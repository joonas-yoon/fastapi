{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastAPI \ud504\ub808\uc784\uc6cc\ud06c, \uace0\uc131\ub2a5, \uac04\ud3b8\ud55c \ud559\uc2b5, \ube60\ub978 \ucf54\ub4dc \uc791\uc131, \uc900\ube44\ub41c \ud504\ub85c\ub355\uc158 \ubb38\uc11c : https://fastapi.tiangolo.com \uc18c\uc2a4 \ucf54\ub4dc : https://github.com/tiangolo/fastapi FastAPI\ub294 \ud604\ub300\uc801\uc774\uace0, \ube60\ub974\uba70(\uace0\uc131\ub2a5), \ud30c\uc774\uc36c \ud45c\uc900 \ud0c0\uc785 \ud78c\ud2b8\uc5d0 \uae30\ucd08\ud55c Python3.6+\uc758 API\ub97c \ube4c\ub4dc\ud558\uae30 \uc704\ud55c \uc6f9 \ud504\ub808\uc784\uc6cc\ud06c\uc785\ub2c8\ub2e4. \uc8fc\uc694 \ud2b9\uc9d5\uc73c\ub85c: \ube60\ub984 : (Starlette\uacfc Pydantic \ub355\ubd84\uc5d0) NodeJS \ubc0f Go \uc640 \ub300\ub4f1\ud560 \uc815\ub3c4\ub85c \ub9e4\uc6b0 \ub192\uc740 \uc131\ub2a5. \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uac00\uc7a5 \ube60\ub978 \ud30c\uc774\uc36c \ud504\ub808\uc784\uc6cc\ud06c \uc911 \ud558\ub098 . \ube60\ub978 \ucf54\ub4dc \uc791\uc131 : \uc57d 200%\uc5d0\uc11c 300%\uae4c\uc9c0 \uae30\ub2a5 \uac1c\ubc1c \uc18d\ub3c4 \uc99d\uac00. * \uc801\uc740 \ubc84\uadf8 : \uc0ac\ub78c(\uac1c\ubc1c\uc790)\uc5d0 \uc758\ud55c \uc5d0\ub7ec \uc57d 40% \uac10\uc18c. * \uc9c1\uad00\uc801 : \ud6cc\ub96d\ud55c \ud3b8\uc9d1\uae30 \uc9c0\uc6d0. \ubaa8\ub4e0 \uacf3\uc5d0\uc11c \uc790\ub3d9\uc644\uc131 . \uc801\uc740 \ub514\ubc84\uae45 \uc2dc\uac04. \uc26c\uc6c0 : \uc27d\uac8c \uc0ac\uc6a9\ud558\uace0 \ubc30\uc6b0\ub3c4\ub85d \uc124\uacc4. \uc801\uc740 \ubb38\uc11c \uc77d\uae30 \uc2dc\uac04. \uc9e7\uc74c : \ucf54\ub4dc \uc911\ubcf5 \ucd5c\uc18c\ud654. \uac01 \ub9e4\uac1c\ubcc0\uc218 \uc120\uc5b8\uc758 \uc5ec\ub7ec \uae30\ub2a5. \uc801\uc740 \ubc84\uadf8. \uacac\uace0\ud568 : \uc900\ube44\ub41c \ud504\ub85c\ub355\uc158 \uc6a9 \ucf54\ub4dc\ub97c \uc5bb\uc73c\uc2ed\uc2dc\uc624. \uc790\ub3d9 \ub300\ud654\ud615 \ubb38\uc11c\uc640 \ud568\uaed8. \ud45c\uc900 \uae30\ubc18 : API\uc5d0 \ub300\ud55c (\uc644\uc804\ud788 \ud638\ud658\ub418\ub294) \uac1c\ubc29\ud615 \ud45c\uc900 \uae30\ubc18: OpenAPI (\uc774\uc804\uc5d0 Swagger\ub85c \uc54c\ub824\uc84c\ub358) \ubc0f JSON \uc2a4\ud0a4\ub9c8 . * \ub0b4\ubd80 \uac1c\ubc1c\ud300\uc758 \ud504\ub85c\ub355\uc158 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ube4c\ub4dc\ud55c \ud14c\uc2a4\ud2b8\uc5d0 \uadfc\uac70\ud55c \uce21\uc815 \uace8\ub4dc \uc2a4\ud3f0\uc11c \u00b6 \ub2e4\ub978 \uc2a4\ud3f0\uc11c \uc758\uacac\ub4e4 \u00b6 \" [...] \uc800\ub294 \uc694\uc998 FastAPI \ub97c \ub9ce\uc774 \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. [...] \uc0ac\uc2e4 \uc6b0\ub9ac \ud300\uc758 \ub9c8\uc774\ud06c\ub85c\uc18c\ud504\ud2b8 ML \uc11c\ube44\uc2a4 \uc804\ubd80\ub97c \ubc14\uafc0 \uacc4\ud68d\uc785\ub2c8\ub2e4. \uadf8\uc911 \uc77c\ubd80\ub294 \ud575\uc2ec Windows \uc640 \uba87\uba87\uc758 Office \uc81c\ud488\ub4e4\uc774 \ud1b5\ud569\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \" Kabir Khan - \ub9c8\uc774\ud06c\ub85c\uc18c\ud504\ud2b8 (ref) \" FastAPI \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ucc44\ud0dd\ud558\uc5ec \uc608\uce21 \uc744 \uc5bb\uae30 \uc704\ud574 \ucffc\ub9ac\ub97c \uc2e4\ud589 \ud560 \uc218 \uc788\ub294 REST \uc11c\ubc84\ub97c \uc0dd\uc131\ud588\uc2b5\ub2c8\ub2e4. [Ludwig\uc744 \uc704\ud574] \" Piero Molino, Yaroslav Dudin \uadf8\ub9ac\uace0 Sai Sumanth Miryala - \uc6b0\ubc84 (ref) \" Netflix \ub294 \uc6b0\ub9ac\uc758 \uc624\ud508 \uc18c\uc2a4 \ubc30\ud3ec\ud310\uc778 \uc704\uae30 \uad00\ub9ac \uc624\ucf00\uc2a4\ud2b8\ub808\uc774\uc158 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \ubc1c\ud45c\ud560 \uc218 \uc788\uc5b4 \uae30\uc069\ub2c8\ub2e4: \ubc14\ub85c Dispatch \uc785\ub2c8\ub2e4! [ FastAPI \ub85c \ube4c\ub4dc] \" Kevin Glisson, Marc Vilanova, Forest Monsen - \ub137\ud50c\ub9ad\uc2a4 (ref) \" FastAPI \uac00 \ub108\ubb34 \uc88b\uc544\uc11c \uad6c\ub984 \uc704\ub97c \uac77\ub294\ub4ef \ud569\ub2c8\ub2e4. \uc815\ub9d0 \uc990\uac81\uc2b5\ub2c8\ub2e4! \" Brian Okken - Python Bytes \ud31f\uce90\uc2a4\ud2b8 \ud638\uc2a4\ud2b8 (ref) \" \uc194\uc9c1\ud788, \ub2f9\uc2e0\uc774 \ub9cc\ub4e0 \uac83\uc740 \ub9e4\uc6b0 \uacac\uace0\ud558\uace0 \uc138\ub828\ub418\uc5b4 \ubcf4\uc785\ub2c8\ub2e4. \uc5ec\ub7ec \uba74\uc5d0\uc11c Hug \uac00 \uc774\ub807\uac8c \ub418\uc5c8\uc73c\uba74 \ud569\ub2c8\ub2e4 - \uadf8\uac78 \ub9cc\ub4e0 \ub204\uad70\uac00\ub97c \ubcf4\ub294 \uac83\uc740 \ub9ce\uc740 \uc601\uac10\uc744 \uc90d\ub2c8\ub2e4. \" Timothy Crosley - Hug \uc81c\uc791\uc790 (ref) \" REST API\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud604\ub300\uc801\uc778 \ud504\ub808\uc784\uc6cc\ud06c \ub97c \ucc3e\uace0 \uc788\ub2e4\uba74 FastAPI \ub97c \ud655\uc778\ud574 \ubcf4\uc2ed\uc2dc\uc624. [...] \ube60\ub974\uace0, \uc4f0\uae30 \uc27d\uace0, \ubc30\uc6b0\uae30\ub3c4 \uc27d\uc2b5\ub2c8\ub2e4 [...] \" \" \uc6b0\ub9ac API \ub97c FastAPI \ub85c \ubc14\uafe8\uc2b5\ub2c8\ub2e4 [...] \uc544\ub9c8 \uc5ec\ub7ec\ubd84\ub3c4 \uc88b\uc544\ud558\uc2e4 \uac83\uc785\ub2c8\ub2e4 [...] \" Ines Montani - Matthew Honnibal - Explosion AI \uc124\ub9bd\uc790 - spaCy \uc81c\uc791\uc790 (ref) - (ref) Typer , FastAPI\uc758 CLI \u00b6 \uc6f9 API \ub300\uc2e0 \ud130\ubbf8\ub110\uc5d0\uc11c \uc0ac\uc6a9\ud560 CLI \uc571\uc744 \ub9cc\ub4e4\uace0 \uc788\ub2e4\uba74, Typer \ub97c \ud655\uc778\ud574 \ubcf4\uc2ed\uc2dc\uc624. Typer \ub294 FastAPI\uc758 \ub3d9\uc0dd\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 FastAPI\uc758 CLI \uac00 \ub418\uae30 \uc704\ud574 \uc0dd\uacbc\uc2b5\ub2c8\ub2e4. \u2328\ufe0f \ud83d\ude80 \uc694\uad6c\uc0ac\ud56d \u00b6 Python 3.6+ FastAPI\ub294 \uac70\uc778\ub4e4\uc758 \uc5b4\uae68 \uc704\uc5d0 \uc11c \uc788\uc2b5\ub2c8\ub2e4: \uc6f9 \ubd80\ubd84\uc744 \uc704\ud55c Starlette . \ub370\uc774\ud130 \ubd80\ubd84\uc744 \uc704\ud55c Pydantic . \uc124\uce58 \u00b6 $ pip install fastapi ---> 100% \ud504\ub85c\ub355\uc158\uc744 \uc704\ud574 Uvicorn \ub610\ub294 Hypercorn \uacfc \uac19\uc740 ASGI \uc11c\ubc84\ub3c4 \ud544\uc694\ud560 \uac81\ub2c8\ub2e4. $ pip install uvicorn [ standard ] ---> 100% \uc608\uc81c \u00b6 \ub9cc\ub4e4\uae30 \u00b6 main.py \ud30c\uc77c\uc744 \ub9cc\ub4dc\uc2ed\uc2dc\uc624: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } \ub610\ub294 async def \uc0ac\uc6a9\ud558\uae30... \uc5ec\ub7ec\ubd84\uc758 \ucf54\ub4dc\uac00 async / await \uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, async def \ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } Note : \uc798 \ubaa8\ub974\uaca0\ub2e4\uba74, \ubb38\uc11c\uc5d0\uc11c async \uc640 await \uc5d0 \uad00\ud55c \"\uae09\ud558\uc138\uc694?\" \uc139\uc158\uc744 \ud655\uc778\ud574 \ubcf4\uc2ed\uc2dc\uc624. \uc2e4\ud589\ud558\uae30 \u00b6 \uc11c\ubc84\ub97c \uc2e4\ud589\ud558\uc2ed\uc2dc\uc624: $ uvicorn main:app --reload INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) INFO: Started reloader process [28720] INFO: Started server process [28722] INFO: Waiting for application startup. INFO: Application startup complete. uvicorn main:app --reload \uba85\ub839\uc5d0 \uad00\ud558\uc5ec... \uba85\ub839 uvicorn main:app \uc740 \ub2e4\uc74c\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4: main : main.py \ud30c\uc77c (\ud30c\uc774\uc36c \"\ubaa8\ub4c8\"). app : the object created inside of main.py with the line app = FastAPI() . --reload : \ucf54\ub4dc\uac00 \ubcc0\uacbd\ub41c \ud6c4 \uc11c\ubc84 \uc7ac\uc2dc\uc791\ud558\uae30. \uac1c\ubc1c\ud658\uacbd\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. \ud655\uc778\ud558\uae30 \u00b6 \ube0c\ub77c\uc6b0\uc800\ub85c http://127.0.0.1:8000/items/5?q=somequery \ub97c \uc5f4\uc5b4\ubcf4\uc2ed\uc2dc\uc624. \uc544\ub798\uc758 JSON \uc751\ub2f5\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"item_id\" : 5 , \"q\" : \"somequery\" } \uc5ec\ub7ec\ubd84\uc740 \ubc8c\uc368 API\ub97c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4: \uacbd\ub85c / \ubc0f /items/{item_id} \uc5d0\uc11c HTTP \uc694\uccad \ubc1b\uae30. \ub450 \uacbd\ub85c \ubaa8\ub450 GET \uc5f0\uc0b0 (HTTP \uba54\uc18c\ub4dc \ub85c \uc54c\ub824\uc9c4)\uc744 \ubc1b\uc2b5\ub2c8\ub2e4. \uacbd\ub85c /items/{item_id} \ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 int \ud615 \uc774\uc5b4\uc57c \ud558\ub294 item_id \ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uacbd\ub85c /items/{item_id} \ub294 \uc120\ud0dd\uc801\uc778 str \ud615 \uc774\uc5b4\uc57c \ud558\ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 q \ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ud654\ud615 API \ubb38\uc11c \u00b6 \uc774\uc81c http://127.0.0.1:8000/docs \ub85c \uac00\ubcf4\uc2ed\uc2dc\uc624. \uc790\ub3d9 \ub300\ud654\ud615 API \ubb38\uc11c\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4 ( Swagger UI \uc81c\uacf5): \ub300\uc548 API \ubb38\uc11c \u00b6 \uadf8\ub9ac\uace0 \uc774\uc81c http://127.0.0.1:8000/redoc \ub85c \uac00\ubd05\uc2dc\ub2e4. \ub2e4\ub978 \uc790\ub3d9 \ubb38\uc11c\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4( ReDoc \uc81c\uacf5): \uc608\uc81c \uc2ec\ud654 \u00b6 \uc774\uc81c PUT \uc694\uccad\uc5d0 \uc788\ub294 \ubcf8\ubb38(Body)\uc744 \ubc1b\uae30 \uc704\ud574 main.py \ub97c \uc218\uc815\ud574\ubd05\uc2dc\ub2e4. Pydantic\uc744 \uc774\uc6a9\ud574 \ud30c\uc774\uc36c \ud45c\uc900 \ud0c0\uc785\uc73c\ub85c \ubcf8\ubb38\uc744 \uc120\uc5b8\ud569\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float is_offer : Union [ bool , None ] = None @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } @app . put ( \"/items/ {item_id} \" ) def update_item ( item_id : int , item : Item ): return { \"item_name\" : item . name , \"item_id\" : item_id } \uc11c\ubc84\uac00 \uc790\ub3d9\uc73c\ub85c \ub9ac\ub85c\ub529 \ud560 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4 (\uc704\uc5d0\uc11c uvicorn \uba85\ub839\uc5d0 --reload \uc744 \ucd94\uac00 \ud588\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4). \ub300\ud654\ud615 API \ubb38\uc11c \uc5c5\uadf8\ub808\uc774\ub4dc \u00b6 \uc774\uc81c http://127.0.0.1:8000/docs \ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. \ub300\ud654\ud615 API \ubb38\uc11c\uac00 \uc0c8 \ubcf8\ubb38\uacfc \ud568\uaed8 \uc790\ub3d9\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8 \ud569\ub2c8\ub2e4: \"Try it out\" \ubc84\ud2bc\uc744 \ud074\ub9ad\ud558\uba74, \ub9e4\uac1c\ubcc0\uc218\ub97c \ucc44\uc6b8 \uc218 \uc788\uac8c \ud574\uc8fc\uace0 \uc9c1\uc811 API\uc640 \uc0c1\ud638\uc791\uc6a9 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uadf8\ub7ec\uace0 \ub098\uc11c \"Execute\" \ubc84\ud2bc\uc744 \ub204\ub974\uba74, \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4\ub294 API\uc640 \ud1b5\uc2e0\ud558\uace0 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc804\uc1a1\ud558\uba70 \uadf8 \uacb0\uacfc\ub97c \uac00\uc838\uc640\uc11c \ud654\uba74\uc5d0 \ud45c\uc2dc\ud569\ub2c8\ub2e4: \ub300\uc548 API \ubb38\uc11c \uc5c5\uadf8\ub808\uc774\ub4dc \u00b6 \uadf8\ub9ac\uace0 \uc774\uc81c, http://127.0.0.1:8000/redoc \ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. \ub300\uc548 \ubb38\uc11c \uc5ed\uc2dc \uc0c8 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uc640 \ubcf8\ubb38\uc744 \ubc18\uc601\ud569\ub2c8\ub2e4: \uc694\uc57d \u00b6 \uc694\uc57d\ud558\uba74, \uc5ec\ub7ec\ubd84\uc740 \ub9e4\uac1c\ubcc0\uc218\uc758 \ud0c0\uc785, \ubcf8\ubb38 \ub4f1\uc744 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\ub85c\uc11c \ud55c\ubc88\uc5d0 \uc120\uc5b8\ud588\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \ud604\ub300 \ud45c\uc900 \ud30c\uc774\uc36c \ud0c0\uc785\uc73c\ub85c \uc774\ub97c \ud589\ud588\uc2b5\ub2c8\ub2e4. \uc0c8\ub85c\uc6b4 \ubb38\ubc95, \ud2b9\uc815 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uba54\uc18c\ub4dc\ub098 \ud074\ub798\uc2a4 \ub4f1\uc744 \ubc30\uc6b8 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\uc800 \ud45c\uc900 Python 3.6+ \uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, int \uc5d0 \ub300\ud574\uc120: item_id : int \ub610\ub294 \uc880 \ub354 \ubcf5\uc7a1\ud55c Item \ubaa8\ub378\uc5d0 \ub300\ud574\uc120: item : Item ...\uadf8\ub9ac\uace0 \ub2e8 \ud558\ub098\uc758 \uc120\uc5b8\uc73c\ub85c \uc5ec\ub7ec\ubd84\uc774 \uc5bb\ub294 \uac83\uc740: \ub2e4\uc74c\uc744 \ud3ec\ud568\ud55c \ud3b8\uc9d1\uae30 \uc9c0\uc6d0: \uc790\ub3d9\uc644\uc131. \ud0c0\uc785 \uac80\uc0ac. \ub370\uc774\ud130 \uac80\uc99d: \ub370\uc774\ud130\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc744 \ub54c \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ud558\ub294 \uba85\ud655\ud55c \uc5d0\ub7ec. \uc911\ucca9\ub41c JSON \uac1d\uccb4\uc5d0 \ub300\ud55c \uc720\ud6a8\uc131 \uac80\uc0ac. \uc785\ub825 \ub370\uc774\ud130 \ubcc0\ud658 : \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \ud30c\uc774\uc36c \ub370\uc774\ud130 \ubc0f \ud0c0\uc785\uc73c\ub85c \uc804\uc1a1. \uc77d\uc744 \uc218 \uc788\ub294 \uac83\ub4e4: JSON. \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218. \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218. \ucfe0\ud0a4. \ud5e4\ub354. \ud3fc(Forms). \ud30c\uc77c. \ucd9c\ub825 \ub370\uc774\ud130 \ubcc0\ud658 : \ud30c\uc774\uc36c \ub370\uc774\ud130 \ubc0f \ud0c0\uc785\uc744 \ub124\ud2b8\uc6cc\ud06c \ub370\uc774\ud130\ub85c \uc804\ud658(JSON \ud615\uc2dd\uc73c\ub85c): \ud30c\uc774\uc36c \ud0c0\uc785 \ubcc0\ud658 ( str , int , float , bool , list , \ub4f1). datetime \uac1d\uccb4. UUID \uac1d\uccb4. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378. ...\ub354 \ub9ce\uc740 \uac83\ub4e4. \ub300\uc548\uac00\ub2a5\ud55c \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4\ub97c 2\uac1c \ud3ec\ud568\ud55c \uc790\ub3d9 \ub300\ud654\ud615 API \ubb38\uc11c: Swagger UI. ReDoc. \uc774\uc804 \ucf54\ub4dc \uc608\uc81c\ub85c \ub3cc\uc544\uac00\uc11c, FastAPI \ub294 \ub2e4\uc74c\ucc98\ub7fc \ucc98\ub9ac\ud569\ub2c8\ub2e4: GET \ubc0f PUT \uc694\uccad\uc5d0 item_id \uac00 \uacbd\ub85c\uc5d0 \uc788\ub294\uc9c0 \uac80\uc99d. GET \ubc0f PUT \uc694\uccad\uc5d0 item_id \uac00 int \ud0c0\uc785\uc778\uc9c0 \uac80\uc99d. \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \uc720\uc6a9\ud558\uace0 \uba85\ud655\ud55c \uc5d0\ub7ec\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. GET \uc694\uccad\uc5d0 q \ub77c\ub294 \uc120\ud0dd\uc801\uc778 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uac00 \uac80\uc0ac( http://127.0.0.1:8000/items/foo?q=somequery \ucc98\ub7fc). q \ub9e4\uac1c\ubcc0\uc218\ub294 = None \uc73c\ub85c \uc120\uc5b8\ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 \uc120\ud0dd\uc0ac\ud56d\uc785\ub2c8\ub2e4. None \uc774 \uc5c6\ub2e4\uba74 \ud544\uc218\uc0ac\ud56d\uc785\ub2c8\ub2e4( PUT \uc758 \uacbd\uc6b0\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c). /items/{item_id} \uc73c\ub85c\uc758 PUT \uc694\uccad\uc740 \ubcf8\ubb38\uc744 JSON\uc73c\ub85c \uc77d\uc74c: name \uc744 \ud544\uc218 \uc18d\uc131\uc73c\ub85c \uac16\uace0 str \ud615\uc778\uc9c0 \uac80\uc0ac. price \uc744 \ud544\uc218 \uc18d\uc131\uc73c\ub85c \uac16\uace0 float \ud615\uc778\uc9c0 \uac80\uc0ac. \ub9cc\uc57d \uc8fc\uc5b4\uc9c4\ub2e4\uba74, is_offer \ub97c \uc120\ud0dd \uc18d\uc131\uc73c\ub85c \uac16\uace0 bool \ud615\uc778\uc9c0 \uac80\uc0ac. \uc774 \ubaa8\ub4e0 \uac83\uc740 \uae4a\uc774 \uc911\ucca9\ub41c JSON \uac1d\uccb4\uc5d0\ub3c4 \uc801\uc6a9\ub429\ub2c8\ub2e4. JSON\uc744 \ubcc0\ud658\ud558\uac70\ub098 JSON\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc744 \uc790\ub3d9\ud654. \ub2e4\uc74c\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ubaa8\ub4e0 \uac83\uc744 OpenAPI\ub85c \ubb38\uc11c\ud654: \ub300\ud654\ud615 \ubb38\uc11c \uc2dc\uc2a4\ud15c. \uc5ec\ub7ec \uc5b8\uc5b4\ub4e4\uc5d0 \ub300\ud55c \uc790\ub3d9 \ud074\ub77c\uc774\uc5b8\ud2b8 \ucf54\ub4dc \uc0dd\uc131 \uc2dc\uc2a4\ud15c. 2\uac1c\uc758 \ub300\ud654\ud615 \ubb38\uc11c \uc6f9 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc9c1\uc811 \uc81c\uacf5. \uc6b0\ub9ac\ub294 \uadf8\uc800 \uc218\ubc15 \uac89\ud561\uae30\ub9cc \ud588\uc744 \ubfd0\uc778\ub370 \uc5ec\ub7ec\ubd84\uc740 \ubc8c\uc368 \uc5b4\ub5bb\uac8c \uc791\ub3d9\ud558\ub294\uc9c0 \uc54c\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc904\uc744 \ubc14\uafd4\ubcf4\uc2ed\uc2dc\uc624: return { \"item_name\" : item . name , \"item_id\" : item_id } ...\uc5d0\uc11c: ... \"item_name\" : item . name ... ...\uc73c\ub85c: ... \"item_price\" : item . price ... ...\uadf8\ub7ec\uace0 \ub098\uc11c \uc5ec\ub7ec\ubd84\uc758 \ud3b8\uc9d1\uae30\uac00 \uc18d\uc131\uacfc \ud0c0\uc785\uc744 \uc54c\uace0 \uc790\ub3d9 \uc644\uc131\ud558\ub294\uc9c0 \ubcf4\uc2ed\uc2dc\uc624: \ub354 \ub9ce\uc740 \uae30\ub2a5\uc744 \ud3ec\ud568\ud55c \ubcf4\ub2e4 \uc644\uc804\ud55c \uc608\uc81c\uc758 \uacbd\uc6b0, \ud29c\ud1a0\ub9ac\uc5bc - \uc0ac\uc6a9\uc790 \uac00\uc774\ub4dc \ub97c \ubcf4\uc2ed\uc2dc\uc624. \uc2a4\ud3ec\uc77c\ub7ec \uc8fc\uc758 : \ud29c\ud1a0\ub9ac\uc5bc - \uc0ac\uc6a9\uc790 \uac00\uc774\ub4dc\ub294: \uc11c\ub85c \ub2e4\ub978 \uc7a5\uc18c\uc5d0\uc11c \ub9e4\uac1c\ubcc0\uc218 \uc120\uc5b8: \ud5e4\ub354 , \ucfe0\ud0a4 , \ud3fc \ud544\ub4dc \uadf8\ub9ac\uace0 \ud30c\uc77c . maximum_length \ub610\ub294 regex \ucc98\ub7fc \uc720\ud6a8\uc131 \uc81c\uc57d \ud558\ub294 \ubc29\ubc95. \uac15\ub825\ud558\uace0 \uc0ac\uc6a9\ud558\uae30 \uc26c\uc6b4 \uc758\uc874\uc131 \uc8fc\uc785 \uc2dc\uc2a4\ud15c. OAuth2 \uc9c0\uc6d0\uc744 \ud3ec\ud568\ud55c JWT tokens \ubc0f HTTP Basic \uc744 \uac16\ub294 \ubcf4\uc548\uacfc \uc778\uc99d. (Pydantic \ub355\ubd84\uc5d0) \uae4a\uc740 \uc911\ucca9 JSON \ubaa8\ub378 \uc744 \uc120\uc5b8\ud558\ub294\ub370 \ub354 \uc9c4\ubcf4\ud55c (\ud558\uc9c0\ub9cc \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc26c\uc6b4) \uae30\uc220. (Starlette \ub355\ubd84\uc5d0) \ub9ce\uc740 \ucd94\uac00 \uae30\ub2a5: \uc6f9 \uc18c\ucf13 GraphQL requests \ubc0f pytest \uc5d0 \uae30\ubc18\ud55c \uadf9\ud788 \uc26c\uc6b4 \ud14c\uc2a4\ud2b8 CORS \ucfe0\ud0a4 \uc138\uc158 ...\uae30\ud0c0 \ub4f1\ub4f1. \uc131\ub2a5 \u00b6 \ub3c5\ub9bd\ub41c TechEmpower \ubca4\uce58\ub9c8\ud06c\uc5d0\uc11c Uvicorn\uc5d0\uc11c \uc791\ub3d9\ud558\ub294 FastAPI \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uac00\uc7a5 \ube60\ub978 \ud504\ub808\uc784\uc6cc\ud06c \uc911 \ud558\ub098 \ub85c Starlette\uc640 Uvicorn(FastAPI\uc5d0\uc11c \ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9)\uc5d0\ub9cc \ubc11\ub3cc\uace0 \uc788\uc2b5\ub2c8\ub2e4. (*) \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ubca4\uce58\ub9c8\ud06c \uc139\uc158\uc744 \ubcf4\uc2ed\uc2dc\uc624. \uc120\ud0dd\uac00\ub2a5\ud55c \uc758\uc874\uc131 \u00b6 Pydantic\uc774 \uc0ac\uc6a9\ud558\ub294: ujson - \ub354 \ube60\ub978 JSON \"\ud30c\uc2f1\" . email_validator - \uc774\uba54\uc77c \uc720\ud6a8\uc131 \uac80\uc0ac. Starlette\uc774 \uc0ac\uc6a9\ud558\ub294: requests - TestClient \ub97c \uc0ac\uc6a9\ud558\ub824\uba74 \ud544\uc694. jinja2 - \uae30\ubcf8 \ud15c\ud50c\ub9bf \uc124\uc815\uc744 \uc0ac\uc6a9\ud558\ub824\uba74 \ud544\uc694. python-multipart - request.form() \uacfc \ud568\uaed8 \"parsing\" \uc758 \uc9c0\uc6d0\uc744 \uc6d0\ud558\uba74 \ud544\uc694. itsdangerous - SessionMiddleware \uc9c0\uc6d0\uc744 \uc704\ud574 \ud544\uc694. pyyaml - Starlette\uc758 SchemaGenerator \uc9c0\uc6d0\uc744 \uc704\ud574 \ud544\uc694 (FastAPI\uc640 \uc4f8\ub54c\ub294 \ud544\uc694 \uc5c6\uc744 \uac83\uc785\ub2c8\ub2e4). graphene - GraphQLApp \uc9c0\uc6d0\uc744 \uc704\ud574 \ud544\uc694. ujson - UJSONResponse \ub97c \uc0ac\uc6a9\ud558\ub824\uba74 \ud544\uc694. FastAPI / Starlette\uc774 \uc0ac\uc6a9\ud558\ub294: uvicorn - \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ub85c\ub4dc\ud558\uace0 \uc81c\uacf5\ud558\ub294 \uc11c\ubc84. orjson - ORJSONResponse \uc744 \uc0ac\uc6a9\ud558\ub824\uba74 \ud544\uc694. pip install fastapi[all] \ub97c \ud1b5\ud574 \uc774 \ubaa8\ub450\ub97c \uc124\uce58 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub77c\uc774\uc13c\uc2a4 \u00b6 \uc774 \ud504\ub85c\uc81d\ud2b8\ub294 MIT \ub77c\uc774\uc13c\uc2a4 \uc870\uc57d\uc5d0 \ub530\ub77c \ub77c\uc774\uc13c\uc2a4\uac00 \ubd80\uc5ec\ub429\ub2c8\ub2e4.","title":"FastAPI"},{"location":"#_1","text":"\ub2e4\ub978 \uc2a4\ud3f0\uc11c","title":"\uace8\ub4dc \uc2a4\ud3f0\uc11c"},{"location":"#_2","text":"\" [...] \uc800\ub294 \uc694\uc998 FastAPI \ub97c \ub9ce\uc774 \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. [...] \uc0ac\uc2e4 \uc6b0\ub9ac \ud300\uc758 \ub9c8\uc774\ud06c\ub85c\uc18c\ud504\ud2b8 ML \uc11c\ube44\uc2a4 \uc804\ubd80\ub97c \ubc14\uafc0 \uacc4\ud68d\uc785\ub2c8\ub2e4. \uadf8\uc911 \uc77c\ubd80\ub294 \ud575\uc2ec Windows \uc640 \uba87\uba87\uc758 Office \uc81c\ud488\ub4e4\uc774 \ud1b5\ud569\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \" Kabir Khan - \ub9c8\uc774\ud06c\ub85c\uc18c\ud504\ud2b8 (ref) \" FastAPI \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ucc44\ud0dd\ud558\uc5ec \uc608\uce21 \uc744 \uc5bb\uae30 \uc704\ud574 \ucffc\ub9ac\ub97c \uc2e4\ud589 \ud560 \uc218 \uc788\ub294 REST \uc11c\ubc84\ub97c \uc0dd\uc131\ud588\uc2b5\ub2c8\ub2e4. [Ludwig\uc744 \uc704\ud574] \" Piero Molino, Yaroslav Dudin \uadf8\ub9ac\uace0 Sai Sumanth Miryala - \uc6b0\ubc84 (ref) \" Netflix \ub294 \uc6b0\ub9ac\uc758 \uc624\ud508 \uc18c\uc2a4 \ubc30\ud3ec\ud310\uc778 \uc704\uae30 \uad00\ub9ac \uc624\ucf00\uc2a4\ud2b8\ub808\uc774\uc158 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \ubc1c\ud45c\ud560 \uc218 \uc788\uc5b4 \uae30\uc069\ub2c8\ub2e4: \ubc14\ub85c Dispatch \uc785\ub2c8\ub2e4! [ FastAPI \ub85c \ube4c\ub4dc] \" Kevin Glisson, Marc Vilanova, Forest Monsen - \ub137\ud50c\ub9ad\uc2a4 (ref) \" FastAPI \uac00 \ub108\ubb34 \uc88b\uc544\uc11c \uad6c\ub984 \uc704\ub97c \uac77\ub294\ub4ef \ud569\ub2c8\ub2e4. \uc815\ub9d0 \uc990\uac81\uc2b5\ub2c8\ub2e4! \" Brian Okken - Python Bytes \ud31f\uce90\uc2a4\ud2b8 \ud638\uc2a4\ud2b8 (ref) \" \uc194\uc9c1\ud788, \ub2f9\uc2e0\uc774 \ub9cc\ub4e0 \uac83\uc740 \ub9e4\uc6b0 \uacac\uace0\ud558\uace0 \uc138\ub828\ub418\uc5b4 \ubcf4\uc785\ub2c8\ub2e4. \uc5ec\ub7ec \uba74\uc5d0\uc11c Hug \uac00 \uc774\ub807\uac8c \ub418\uc5c8\uc73c\uba74 \ud569\ub2c8\ub2e4 - \uadf8\uac78 \ub9cc\ub4e0 \ub204\uad70\uac00\ub97c \ubcf4\ub294 \uac83\uc740 \ub9ce\uc740 \uc601\uac10\uc744 \uc90d\ub2c8\ub2e4. \" Timothy Crosley - Hug \uc81c\uc791\uc790 (ref) \" REST API\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \ud604\ub300\uc801\uc778 \ud504\ub808\uc784\uc6cc\ud06c \ub97c \ucc3e\uace0 \uc788\ub2e4\uba74 FastAPI \ub97c \ud655\uc778\ud574 \ubcf4\uc2ed\uc2dc\uc624. [...] \ube60\ub974\uace0, \uc4f0\uae30 \uc27d\uace0, \ubc30\uc6b0\uae30\ub3c4 \uc27d\uc2b5\ub2c8\ub2e4 [...] \" \" \uc6b0\ub9ac API \ub97c FastAPI \ub85c \ubc14\uafe8\uc2b5\ub2c8\ub2e4 [...] \uc544\ub9c8 \uc5ec\ub7ec\ubd84\ub3c4 \uc88b\uc544\ud558\uc2e4 \uac83\uc785\ub2c8\ub2e4 [...] \" Ines Montani - Matthew Honnibal - Explosion AI \uc124\ub9bd\uc790 - spaCy \uc81c\uc791\uc790 (ref) - (ref)","title":"\uc758\uacac\ub4e4"},{"location":"#typer-fastapi-cli","text":"\uc6f9 API \ub300\uc2e0 \ud130\ubbf8\ub110\uc5d0\uc11c \uc0ac\uc6a9\ud560 CLI \uc571\uc744 \ub9cc\ub4e4\uace0 \uc788\ub2e4\uba74, Typer \ub97c \ud655\uc778\ud574 \ubcf4\uc2ed\uc2dc\uc624. Typer \ub294 FastAPI\uc758 \ub3d9\uc0dd\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 FastAPI\uc758 CLI \uac00 \ub418\uae30 \uc704\ud574 \uc0dd\uacbc\uc2b5\ub2c8\ub2e4. \u2328\ufe0f \ud83d\ude80","title":"Typer, FastAPI\uc758 CLI"},{"location":"#_3","text":"Python 3.6+ FastAPI\ub294 \uac70\uc778\ub4e4\uc758 \uc5b4\uae68 \uc704\uc5d0 \uc11c \uc788\uc2b5\ub2c8\ub2e4: \uc6f9 \ubd80\ubd84\uc744 \uc704\ud55c Starlette . \ub370\uc774\ud130 \ubd80\ubd84\uc744 \uc704\ud55c Pydantic .","title":"\uc694\uad6c\uc0ac\ud56d"},{"location":"#_4","text":"$ pip install fastapi ---> 100% \ud504\ub85c\ub355\uc158\uc744 \uc704\ud574 Uvicorn \ub610\ub294 Hypercorn \uacfc \uac19\uc740 ASGI \uc11c\ubc84\ub3c4 \ud544\uc694\ud560 \uac81\ub2c8\ub2e4. $ pip install uvicorn [ standard ] ---> 100%","title":"\uc124\uce58"},{"location":"#_5","text":"","title":"\uc608\uc81c"},{"location":"#_6","text":"main.py \ud30c\uc77c\uc744 \ub9cc\ub4dc\uc2ed\uc2dc\uc624: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } \ub610\ub294 async def \uc0ac\uc6a9\ud558\uae30... \uc5ec\ub7ec\ubd84\uc758 \ucf54\ub4dc\uac00 async / await \uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, async def \ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } Note : \uc798 \ubaa8\ub974\uaca0\ub2e4\uba74, \ubb38\uc11c\uc5d0\uc11c async \uc640 await \uc5d0 \uad00\ud55c \"\uae09\ud558\uc138\uc694?\" \uc139\uc158\uc744 \ud655\uc778\ud574 \ubcf4\uc2ed\uc2dc\uc624.","title":"\ub9cc\ub4e4\uae30"},{"location":"#_7","text":"\uc11c\ubc84\ub97c \uc2e4\ud589\ud558\uc2ed\uc2dc\uc624: $ uvicorn main:app --reload INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) INFO: Started reloader process [28720] INFO: Started server process [28722] INFO: Waiting for application startup. INFO: Application startup complete. uvicorn main:app --reload \uba85\ub839\uc5d0 \uad00\ud558\uc5ec... \uba85\ub839 uvicorn main:app \uc740 \ub2e4\uc74c\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4: main : main.py \ud30c\uc77c (\ud30c\uc774\uc36c \"\ubaa8\ub4c8\"). app : the object created inside of main.py with the line app = FastAPI() . --reload : \ucf54\ub4dc\uac00 \ubcc0\uacbd\ub41c \ud6c4 \uc11c\ubc84 \uc7ac\uc2dc\uc791\ud558\uae30. \uac1c\ubc1c\ud658\uacbd\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624.","title":"\uc2e4\ud589\ud558\uae30"},{"location":"#_8","text":"\ube0c\ub77c\uc6b0\uc800\ub85c http://127.0.0.1:8000/items/5?q=somequery \ub97c \uc5f4\uc5b4\ubcf4\uc2ed\uc2dc\uc624. \uc544\ub798\uc758 JSON \uc751\ub2f5\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"item_id\" : 5 , \"q\" : \"somequery\" } \uc5ec\ub7ec\ubd84\uc740 \ubc8c\uc368 API\ub97c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4: \uacbd\ub85c / \ubc0f /items/{item_id} \uc5d0\uc11c HTTP \uc694\uccad \ubc1b\uae30. \ub450 \uacbd\ub85c \ubaa8\ub450 GET \uc5f0\uc0b0 (HTTP \uba54\uc18c\ub4dc \ub85c \uc54c\ub824\uc9c4)\uc744 \ubc1b\uc2b5\ub2c8\ub2e4. \uacbd\ub85c /items/{item_id} \ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 int \ud615 \uc774\uc5b4\uc57c \ud558\ub294 item_id \ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uacbd\ub85c /items/{item_id} \ub294 \uc120\ud0dd\uc801\uc778 str \ud615 \uc774\uc5b4\uc57c \ud558\ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 q \ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ud655\uc778\ud558\uae30"},{"location":"#api","text":"\uc774\uc81c http://127.0.0.1:8000/docs \ub85c \uac00\ubcf4\uc2ed\uc2dc\uc624. \uc790\ub3d9 \ub300\ud654\ud615 API \ubb38\uc11c\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4 ( Swagger UI \uc81c\uacf5):","title":"\ub300\ud654\ud615 API \ubb38\uc11c"},{"location":"#api_1","text":"\uadf8\ub9ac\uace0 \uc774\uc81c http://127.0.0.1:8000/redoc \ub85c \uac00\ubd05\uc2dc\ub2e4. \ub2e4\ub978 \uc790\ub3d9 \ubb38\uc11c\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4( ReDoc \uc81c\uacf5):","title":"\ub300\uc548 API \ubb38\uc11c"},{"location":"#_9","text":"\uc774\uc81c PUT \uc694\uccad\uc5d0 \uc788\ub294 \ubcf8\ubb38(Body)\uc744 \ubc1b\uae30 \uc704\ud574 main.py \ub97c \uc218\uc815\ud574\ubd05\uc2dc\ub2e4. Pydantic\uc744 \uc774\uc6a9\ud574 \ud30c\uc774\uc36c \ud45c\uc900 \ud0c0\uc785\uc73c\ub85c \ubcf8\ubb38\uc744 \uc120\uc5b8\ud569\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float is_offer : Union [ bool , None ] = None @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } @app . put ( \"/items/ {item_id} \" ) def update_item ( item_id : int , item : Item ): return { \"item_name\" : item . name , \"item_id\" : item_id } \uc11c\ubc84\uac00 \uc790\ub3d9\uc73c\ub85c \ub9ac\ub85c\ub529 \ud560 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4 (\uc704\uc5d0\uc11c uvicorn \uba85\ub839\uc5d0 --reload \uc744 \ucd94\uac00 \ud588\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4).","title":"\uc608\uc81c \uc2ec\ud654"},{"location":"#api_2","text":"\uc774\uc81c http://127.0.0.1:8000/docs \ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. \ub300\ud654\ud615 API \ubb38\uc11c\uac00 \uc0c8 \ubcf8\ubb38\uacfc \ud568\uaed8 \uc790\ub3d9\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8 \ud569\ub2c8\ub2e4: \"Try it out\" \ubc84\ud2bc\uc744 \ud074\ub9ad\ud558\uba74, \ub9e4\uac1c\ubcc0\uc218\ub97c \ucc44\uc6b8 \uc218 \uc788\uac8c \ud574\uc8fc\uace0 \uc9c1\uc811 API\uc640 \uc0c1\ud638\uc791\uc6a9 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uadf8\ub7ec\uace0 \ub098\uc11c \"Execute\" \ubc84\ud2bc\uc744 \ub204\ub974\uba74, \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4\ub294 API\uc640 \ud1b5\uc2e0\ud558\uace0 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc804\uc1a1\ud558\uba70 \uadf8 \uacb0\uacfc\ub97c \uac00\uc838\uc640\uc11c \ud654\uba74\uc5d0 \ud45c\uc2dc\ud569\ub2c8\ub2e4:","title":"\ub300\ud654\ud615 API \ubb38\uc11c \uc5c5\uadf8\ub808\uc774\ub4dc"},{"location":"#api_3","text":"\uadf8\ub9ac\uace0 \uc774\uc81c, http://127.0.0.1:8000/redoc \ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. \ub300\uc548 \ubb38\uc11c \uc5ed\uc2dc \uc0c8 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uc640 \ubcf8\ubb38\uc744 \ubc18\uc601\ud569\ub2c8\ub2e4:","title":"\ub300\uc548 API \ubb38\uc11c \uc5c5\uadf8\ub808\uc774\ub4dc"},{"location":"#_10","text":"\uc694\uc57d\ud558\uba74, \uc5ec\ub7ec\ubd84\uc740 \ub9e4\uac1c\ubcc0\uc218\uc758 \ud0c0\uc785, \ubcf8\ubb38 \ub4f1\uc744 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\ub85c\uc11c \ud55c\ubc88\uc5d0 \uc120\uc5b8\ud588\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \ud604\ub300 \ud45c\uc900 \ud30c\uc774\uc36c \ud0c0\uc785\uc73c\ub85c \uc774\ub97c \ud589\ud588\uc2b5\ub2c8\ub2e4. \uc0c8\ub85c\uc6b4 \ubb38\ubc95, \ud2b9\uc815 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uba54\uc18c\ub4dc\ub098 \ud074\ub798\uc2a4 \ub4f1\uc744 \ubc30\uc6b8 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\uc800 \ud45c\uc900 Python 3.6+ \uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, int \uc5d0 \ub300\ud574\uc120: item_id : int \ub610\ub294 \uc880 \ub354 \ubcf5\uc7a1\ud55c Item \ubaa8\ub378\uc5d0 \ub300\ud574\uc120: item : Item ...\uadf8\ub9ac\uace0 \ub2e8 \ud558\ub098\uc758 \uc120\uc5b8\uc73c\ub85c \uc5ec\ub7ec\ubd84\uc774 \uc5bb\ub294 \uac83\uc740: \ub2e4\uc74c\uc744 \ud3ec\ud568\ud55c \ud3b8\uc9d1\uae30 \uc9c0\uc6d0: \uc790\ub3d9\uc644\uc131. \ud0c0\uc785 \uac80\uc0ac. \ub370\uc774\ud130 \uac80\uc99d: \ub370\uc774\ud130\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc744 \ub54c \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ud558\ub294 \uba85\ud655\ud55c \uc5d0\ub7ec. \uc911\ucca9\ub41c JSON \uac1d\uccb4\uc5d0 \ub300\ud55c \uc720\ud6a8\uc131 \uac80\uc0ac. \uc785\ub825 \ub370\uc774\ud130 \ubcc0\ud658 : \ub124\ud2b8\uc6cc\ud06c\uc5d0\uc11c \ud30c\uc774\uc36c \ub370\uc774\ud130 \ubc0f \ud0c0\uc785\uc73c\ub85c \uc804\uc1a1. \uc77d\uc744 \uc218 \uc788\ub294 \uac83\ub4e4: JSON. \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218. \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218. \ucfe0\ud0a4. \ud5e4\ub354. \ud3fc(Forms). \ud30c\uc77c. \ucd9c\ub825 \ub370\uc774\ud130 \ubcc0\ud658 : \ud30c\uc774\uc36c \ub370\uc774\ud130 \ubc0f \ud0c0\uc785\uc744 \ub124\ud2b8\uc6cc\ud06c \ub370\uc774\ud130\ub85c \uc804\ud658(JSON \ud615\uc2dd\uc73c\ub85c): \ud30c\uc774\uc36c \ud0c0\uc785 \ubcc0\ud658 ( str , int , float , bool , list , \ub4f1). datetime \uac1d\uccb4. UUID \uac1d\uccb4. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378. ...\ub354 \ub9ce\uc740 \uac83\ub4e4. \ub300\uc548\uac00\ub2a5\ud55c \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4\ub97c 2\uac1c \ud3ec\ud568\ud55c \uc790\ub3d9 \ub300\ud654\ud615 API \ubb38\uc11c: Swagger UI. ReDoc. \uc774\uc804 \ucf54\ub4dc \uc608\uc81c\ub85c \ub3cc\uc544\uac00\uc11c, FastAPI \ub294 \ub2e4\uc74c\ucc98\ub7fc \ucc98\ub9ac\ud569\ub2c8\ub2e4: GET \ubc0f PUT \uc694\uccad\uc5d0 item_id \uac00 \uacbd\ub85c\uc5d0 \uc788\ub294\uc9c0 \uac80\uc99d. GET \ubc0f PUT \uc694\uccad\uc5d0 item_id \uac00 int \ud0c0\uc785\uc778\uc9c0 \uac80\uc99d. \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \uc720\uc6a9\ud558\uace0 \uba85\ud655\ud55c \uc5d0\ub7ec\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. GET \uc694\uccad\uc5d0 q \ub77c\ub294 \uc120\ud0dd\uc801\uc778 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uac00 \uac80\uc0ac( http://127.0.0.1:8000/items/foo?q=somequery \ucc98\ub7fc). q \ub9e4\uac1c\ubcc0\uc218\ub294 = None \uc73c\ub85c \uc120\uc5b8\ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 \uc120\ud0dd\uc0ac\ud56d\uc785\ub2c8\ub2e4. None \uc774 \uc5c6\ub2e4\uba74 \ud544\uc218\uc0ac\ud56d\uc785\ub2c8\ub2e4( PUT \uc758 \uacbd\uc6b0\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c). /items/{item_id} \uc73c\ub85c\uc758 PUT \uc694\uccad\uc740 \ubcf8\ubb38\uc744 JSON\uc73c\ub85c \uc77d\uc74c: name \uc744 \ud544\uc218 \uc18d\uc131\uc73c\ub85c \uac16\uace0 str \ud615\uc778\uc9c0 \uac80\uc0ac. price \uc744 \ud544\uc218 \uc18d\uc131\uc73c\ub85c \uac16\uace0 float \ud615\uc778\uc9c0 \uac80\uc0ac. \ub9cc\uc57d \uc8fc\uc5b4\uc9c4\ub2e4\uba74, is_offer \ub97c \uc120\ud0dd \uc18d\uc131\uc73c\ub85c \uac16\uace0 bool \ud615\uc778\uc9c0 \uac80\uc0ac. \uc774 \ubaa8\ub4e0 \uac83\uc740 \uae4a\uc774 \uc911\ucca9\ub41c JSON \uac1d\uccb4\uc5d0\ub3c4 \uc801\uc6a9\ub429\ub2c8\ub2e4. JSON\uc744 \ubcc0\ud658\ud558\uac70\ub098 JSON\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc744 \uc790\ub3d9\ud654. \ub2e4\uc74c\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ubaa8\ub4e0 \uac83\uc744 OpenAPI\ub85c \ubb38\uc11c\ud654: \ub300\ud654\ud615 \ubb38\uc11c \uc2dc\uc2a4\ud15c. \uc5ec\ub7ec \uc5b8\uc5b4\ub4e4\uc5d0 \ub300\ud55c \uc790\ub3d9 \ud074\ub77c\uc774\uc5b8\ud2b8 \ucf54\ub4dc \uc0dd\uc131 \uc2dc\uc2a4\ud15c. 2\uac1c\uc758 \ub300\ud654\ud615 \ubb38\uc11c \uc6f9 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc9c1\uc811 \uc81c\uacf5. \uc6b0\ub9ac\ub294 \uadf8\uc800 \uc218\ubc15 \uac89\ud561\uae30\ub9cc \ud588\uc744 \ubfd0\uc778\ub370 \uc5ec\ub7ec\ubd84\uc740 \ubc8c\uc368 \uc5b4\ub5bb\uac8c \uc791\ub3d9\ud558\ub294\uc9c0 \uc54c\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc904\uc744 \ubc14\uafd4\ubcf4\uc2ed\uc2dc\uc624: return { \"item_name\" : item . name , \"item_id\" : item_id } ...\uc5d0\uc11c: ... \"item_name\" : item . name ... ...\uc73c\ub85c: ... \"item_price\" : item . price ... ...\uadf8\ub7ec\uace0 \ub098\uc11c \uc5ec\ub7ec\ubd84\uc758 \ud3b8\uc9d1\uae30\uac00 \uc18d\uc131\uacfc \ud0c0\uc785\uc744 \uc54c\uace0 \uc790\ub3d9 \uc644\uc131\ud558\ub294\uc9c0 \ubcf4\uc2ed\uc2dc\uc624: \ub354 \ub9ce\uc740 \uae30\ub2a5\uc744 \ud3ec\ud568\ud55c \ubcf4\ub2e4 \uc644\uc804\ud55c \uc608\uc81c\uc758 \uacbd\uc6b0, \ud29c\ud1a0\ub9ac\uc5bc - \uc0ac\uc6a9\uc790 \uac00\uc774\ub4dc \ub97c \ubcf4\uc2ed\uc2dc\uc624. \uc2a4\ud3ec\uc77c\ub7ec \uc8fc\uc758 : \ud29c\ud1a0\ub9ac\uc5bc - \uc0ac\uc6a9\uc790 \uac00\uc774\ub4dc\ub294: \uc11c\ub85c \ub2e4\ub978 \uc7a5\uc18c\uc5d0\uc11c \ub9e4\uac1c\ubcc0\uc218 \uc120\uc5b8: \ud5e4\ub354 , \ucfe0\ud0a4 , \ud3fc \ud544\ub4dc \uadf8\ub9ac\uace0 \ud30c\uc77c . maximum_length \ub610\ub294 regex \ucc98\ub7fc \uc720\ud6a8\uc131 \uc81c\uc57d \ud558\ub294 \ubc29\ubc95. \uac15\ub825\ud558\uace0 \uc0ac\uc6a9\ud558\uae30 \uc26c\uc6b4 \uc758\uc874\uc131 \uc8fc\uc785 \uc2dc\uc2a4\ud15c. OAuth2 \uc9c0\uc6d0\uc744 \ud3ec\ud568\ud55c JWT tokens \ubc0f HTTP Basic \uc744 \uac16\ub294 \ubcf4\uc548\uacfc \uc778\uc99d. (Pydantic \ub355\ubd84\uc5d0) \uae4a\uc740 \uc911\ucca9 JSON \ubaa8\ub378 \uc744 \uc120\uc5b8\ud558\ub294\ub370 \ub354 \uc9c4\ubcf4\ud55c (\ud558\uc9c0\ub9cc \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc26c\uc6b4) \uae30\uc220. (Starlette \ub355\ubd84\uc5d0) \ub9ce\uc740 \ucd94\uac00 \uae30\ub2a5: \uc6f9 \uc18c\ucf13 GraphQL requests \ubc0f pytest \uc5d0 \uae30\ubc18\ud55c \uadf9\ud788 \uc26c\uc6b4 \ud14c\uc2a4\ud2b8 CORS \ucfe0\ud0a4 \uc138\uc158 ...\uae30\ud0c0 \ub4f1\ub4f1.","title":"\uc694\uc57d"},{"location":"#_11","text":"\ub3c5\ub9bd\ub41c TechEmpower \ubca4\uce58\ub9c8\ud06c\uc5d0\uc11c Uvicorn\uc5d0\uc11c \uc791\ub3d9\ud558\ub294 FastAPI \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uac00\uc7a5 \ube60\ub978 \ud504\ub808\uc784\uc6cc\ud06c \uc911 \ud558\ub098 \ub85c Starlette\uc640 Uvicorn(FastAPI\uc5d0\uc11c \ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9)\uc5d0\ub9cc \ubc11\ub3cc\uace0 \uc788\uc2b5\ub2c8\ub2e4. (*) \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ubca4\uce58\ub9c8\ud06c \uc139\uc158\uc744 \ubcf4\uc2ed\uc2dc\uc624.","title":"\uc131\ub2a5"},{"location":"#_12","text":"Pydantic\uc774 \uc0ac\uc6a9\ud558\ub294: ujson - \ub354 \ube60\ub978 JSON \"\ud30c\uc2f1\" . email_validator - \uc774\uba54\uc77c \uc720\ud6a8\uc131 \uac80\uc0ac. Starlette\uc774 \uc0ac\uc6a9\ud558\ub294: requests - TestClient \ub97c \uc0ac\uc6a9\ud558\ub824\uba74 \ud544\uc694. jinja2 - \uae30\ubcf8 \ud15c\ud50c\ub9bf \uc124\uc815\uc744 \uc0ac\uc6a9\ud558\ub824\uba74 \ud544\uc694. python-multipart - request.form() \uacfc \ud568\uaed8 \"parsing\" \uc758 \uc9c0\uc6d0\uc744 \uc6d0\ud558\uba74 \ud544\uc694. itsdangerous - SessionMiddleware \uc9c0\uc6d0\uc744 \uc704\ud574 \ud544\uc694. pyyaml - Starlette\uc758 SchemaGenerator \uc9c0\uc6d0\uc744 \uc704\ud574 \ud544\uc694 (FastAPI\uc640 \uc4f8\ub54c\ub294 \ud544\uc694 \uc5c6\uc744 \uac83\uc785\ub2c8\ub2e4). graphene - GraphQLApp \uc9c0\uc6d0\uc744 \uc704\ud574 \ud544\uc694. ujson - UJSONResponse \ub97c \uc0ac\uc6a9\ud558\ub824\uba74 \ud544\uc694. FastAPI / Starlette\uc774 \uc0ac\uc6a9\ud558\ub294: uvicorn - \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ub85c\ub4dc\ud558\uace0 \uc81c\uacf5\ud558\ub294 \uc11c\ubc84. orjson - ORJSONResponse \uc744 \uc0ac\uc6a9\ud558\ub824\uba74 \ud544\uc694. pip install fastapi[all] \ub97c \ud1b5\ud574 \uc774 \ubaa8\ub450\ub97c \uc124\uce58 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc120\ud0dd\uac00\ub2a5\ud55c \uc758\uc874\uc131"},{"location":"#_13","text":"\uc774 \ud504\ub85c\uc81d\ud2b8\ub294 MIT \ub77c\uc774\uc13c\uc2a4 \uc870\uc57d\uc5d0 \ub530\ub77c \ub77c\uc774\uc13c\uc2a4\uac00 \ubd80\uc5ec\ub429\ub2c8\ub2e4.","title":"\ub77c\uc774\uc13c\uc2a4"},{"location":"alternatives/","text":"Alternatives, Inspiration and Comparisons \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . What inspired FastAPI , how it compares to other alternatives and what it learned from them. Intro \u00b6 FastAPI wouldn't exist if not for the previous work of others. There have been many tools created before that have helped inspire its creation. I have been avoiding the creation of a new framework for several years. First I tried to solve all the features covered by FastAPI using many different frameworks, plug-ins, and tools. But at some point, there was no other option than creating something that provided all these features, taking the best ideas from previous tools, and combining them in the best way possible, using language features that weren't even available before (Python 3.6+ type hints). Previous tools \u00b6 Django \u00b6 It's the most popular Python framework and is widely trusted. It is used to build systems like Instagram. It's relatively tightly coupled with relational databases (like MySQL or PostgreSQL), so, having a NoSQL database (like Couchbase, MongoDB, Cassandra, etc) as the main store engine is not very easy. It was created to generate the HTML in the backend, not to create APIs used by a modern frontend (like React, Vue.js and Angular) or by other systems (like IoT devices) communicating with it. Django REST Framework \u00b6 Django REST framework was created to be a flexible toolkit for building Web APIs using Django underneath, to improve its API capabilities. It is used by many companies including Mozilla, Red Hat and Eventbrite. It was one of the first examples of automatic API documentation , and this was specifically one of the first ideas that inspired \"the search for\" FastAPI . Note Django REST Framework was created by Tom Christie. The same creator of Starlette and Uvicorn, on which FastAPI is based. Inspired FastAPI to Have an automatic API documentation web user interface. Flask \u00b6 Flask is a \"microframework\", it doesn't include database integrations nor many of the things that come by default in Django. This simplicity and flexibility allow doing things like using NoSQL databases as the main data storage system. As it is very simple, it's relatively intuitive to learn, although the documentation gets somewhat technical at some points. It is also commonly used for other applications that don't necessarily need a database, user management, or any of the many features that come pre-built in Django. Although many of these features can be added with plug-ins. This decoupling of parts, and being a \"microframework\" that could be extended to cover exactly what is needed was a key feature that I wanted to keep. Given the simplicity of Flask, it seemed like a good match for building APIs. The next thing to find was a \"Django REST Framework\" for Flask. Inspired FastAPI to Be a micro-framework. Making it easy to mix and match the tools and parts needed. Have a simple and easy to use routing system. Requests \u00b6 FastAPI is not actually an alternative to Requests . Their scope is very different. It would actually be common to use Requests inside of a FastAPI application. But still, FastAPI got quite some inspiration from Requests. Requests is a library to interact with APIs (as a client), while FastAPI is a library to build APIs (as a server). They are, more or less, at opposite ends, complementing each other. Requests has a very simple and intuitive design, it's very easy to use, with sensible defaults. But at the same time, it's very powerful and customizable. That's why, as said in the official website: Requests is one of the most downloaded Python packages of all time The way you use it is very simple. For example, to do a GET request, you would write: response = requests . get ( \"http://example.com/some/url\" ) The FastAPI counterpart API path operation could look like: @app . get ( \"/some/url\" ) def read_url (): return { \"message\" : \"Hello World\" } See the similarities in requests.get(...) and @app.get(...) . Inspired FastAPI to Have a simple and intuitive API. Use HTTP method names (operations) directly, in a straightforward and intuitive way. Have sensible defaults, but powerful customizations. Swagger / OpenAPI \u00b6 The main feature I wanted from Django REST Framework was the automatic API documentation. Then I found that there was a standard to document APIs, using JSON (or YAML, an extension of JSON) called Swagger. And there was a web user interface for Swagger APIs already created. So, being able to generate Swagger documentation for an API would allow using this web user interface automatically. At some point, Swagger was given to the Linux Foundation, to be renamed OpenAPI. That's why when talking about version 2.0 it's common to say \"Swagger\", and for version 3+ \"OpenAPI\". Inspired FastAPI to Adopt and use an open standard for API specifications, instead of a custom schema. And integrate standards-based user interface tools: Swagger UI ReDoc These two were chosen for being fairly popular and stable, but doing a quick search, you could find dozens of additional alternative user interfaces for OpenAPI (that you can use with FastAPI ). Flask REST frameworks \u00b6 There are several Flask REST frameworks, but after investing the time and work into investigating them, I found that many are discontinued or abandoned, with several standing issues that made them unfit. Marshmallow \u00b6 One of the main features needed by API systems is data \" serialization \" which is taking data from the code (Python) and converting it into something that can be sent through the network. For example, converting an object containing data from a database into a JSON object. Converting datetime objects into strings, etc. Another big feature needed by APIs is data validation, making sure that the data is valid, given certain parameters. For example, that some field is an int , and not some random string. This is especially useful for incoming data. Without a data validation system, you would have to do all the checks by hand, in code. These features are what Marshmallow was built to provide. It is a great library, and I have used it a lot before. But it was created before there existed Python type hints. So, to define every schema you need to use specific utils and classes provided by Marshmallow. Inspired FastAPI to Use code to define \"schemas\" that provide data types and validation, automatically. Webargs \u00b6 Another big feature required by APIs is parsing data from incoming requests. Webargs is a tool that was made to provide that on top of several frameworks, including Flask. It uses Marshmallow underneath to do the data validation. And it was created by the same developers. It's a great tool and I have used it a lot too, before having FastAPI . Info Webargs was created by the same Marshmallow developers. Inspired FastAPI to Have automatic validation of incoming request data. APISpec \u00b6 Marshmallow and Webargs provide validation, parsing and serialization as plug-ins. But documentation is still missing. Then APISpec was created. It is a plug-in for many frameworks (and there's a plug-in for Starlette too). The way it works is that you write the definition of the schema using YAML format inside the docstring of each function handling a route. And it generates OpenAPI schemas. That's how it works in Flask, Starlette, Responder, etc. But then, we have again the problem of having a micro-syntax, inside of a Python string (a big YAML). The editor can't help much with that. And if we modify parameters or Marshmallow schemas and forget to also modify that YAML docstring, the generated schema would be obsolete. Info APISpec was created by the same Marshmallow developers. Inspired FastAPI to Support the open standard for APIs, OpenAPI. Flask-apispec \u00b6 It's a Flask plug-in, that ties together Webargs, Marshmallow and APISpec. It uses the information from Webargs and Marshmallow to automatically generate OpenAPI schemas, using APISpec. It's a great tool, very under-rated. It should be way more popular than many Flask plug-ins out there. It might be due to its documentation being too concise and abstract. This solved having to write YAML (another syntax) inside of Python docstrings. This combination of Flask, Flask-apispec with Marshmallow and Webargs was my favorite backend stack until building FastAPI . Using it led to the creation of several Flask full-stack generators. These are the main stack I (and several external teams) have been using up to now: https://github.com/tiangolo/full-stack https://github.com/tiangolo/full-stack-flask-couchbase https://github.com/tiangolo/full-stack-flask-couchdb And these same full-stack generators were the base of the FastAPI Project Generators . Info Flask-apispec was created by the same Marshmallow developers. Inspired FastAPI to Generate the OpenAPI schema automatically, from the same code that defines serialization and validation. NestJS (and Angular ) \u00b6 This isn't even Python, NestJS is a JavaScript (TypeScript) NodeJS framework inspired by Angular. It achieves something somewhat similar to what can be done with Flask-apispec. It has an integrated dependency injection system, inspired by Angular two. It requires pre-registering the \"injectables\" (like all the other dependency injection systems I know), so, it adds to the verbosity and code repetition. As the parameters are described with TypeScript types (similar to Python type hints), editor support is quite good. But as TypeScript data is not preserved after compilation to JavaScript, it cannot rely on the types to define validation, serialization and documentation at the same time. Due to this and some design decisions, to get validation, serialization and automatic schema generation, it's needed to add decorators in many places. So, it becomes quite verbose. It can't handle nested models very well. So, if the JSON body in the request is a JSON object that has inner fields that in turn are nested JSON objects, it cannot be properly documented and validated. Inspired FastAPI to Use Python types to have great editor support. Have a powerful dependency injection system. Find a way to minimize code repetition. Sanic \u00b6 It was one of the first extremely fast Python frameworks based on asyncio . It was made to be very similar to Flask. Technical Details It used uvloop instead of the default Python asyncio loop. That's what made it so fast. It clearly inspired Uvicorn and Starlette, that are currently faster than Sanic in open benchmarks. Inspired FastAPI to Find a way to have a crazy performance. That's why FastAPI is based on Starlette, as it is the fastest framework available (tested by third-party benchmarks). Falcon \u00b6 Falcon is another high performance Python framework, it is designed to be minimal, and work as the foundation of other frameworks like Hug. It is designed to have functions that receive two parameters, one \"request\" and one \"response\". Then you \"read\" parts from the request, and \"write\" parts to the response. Because of this design, it is not possible to declare request parameters and bodies with standard Python type hints as function parameters. So, data validation, serialization, and documentation, have to be done in code, not automatically. Or they have to be implemented as a framework on top of Falcon, like Hug. This same distinction happens in other frameworks that are inspired by Falcon's design, of having one request object and one response object as parameters. Inspired FastAPI to Find ways to get great performance. Along with Hug (as Hug is based on Falcon) inspired FastAPI to declare a response parameter in functions. Although in FastAPI it's optional, and is used mainly to set headers, cookies, and alternative status codes. Molten \u00b6 I discovered Molten in the first stages of building FastAPI . And it has quite similar ideas: Based on Python type hints. Validation and documentation from these types. Dependency Injection system. It doesn't use a data validation, serialization and documentation third-party library like Pydantic, it has its own. So, these data type definitions would not be reusable as easily. It requires a little bit more verbose configurations. And as it is based on WSGI (instead of ASGI), it is not designed to take advantage of the high-performance provided by tools like Uvicorn, Starlette and Sanic. The dependency injection system requires pre-registration of the dependencies and the dependencies are solved based on the declared types. So, it's not possible to declare more than one \"component\" that provides a certain type. Routes are declared in a single place, using functions declared in other places (instead of using decorators that can be placed right on top of the function that handles the endpoint). This is closer to how Django does it than to how Flask (and Starlette) does it. It separates in the code things that are relatively tightly coupled. Inspired FastAPI to Define extra validations for data types using the \"default\" value of model attributes. This improves editor support, and it was not available in Pydantic before. This actually inspired updating parts of Pydantic, to support the same validation declaration style (all this functionality is now already available in Pydantic). Hug \u00b6 Hug was one of the first frameworks to implement the declaration of API parameter types using Python type hints. This was a great idea that inspired other tools to do the same. It used custom types in its declarations instead of standard Python types, but it was still a huge step forward. It also was one of the first frameworks to generate a custom schema declaring the whole API in JSON. It was not based on a standard like OpenAPI and JSON Schema. So it wouldn't be straightforward to integrate it with other tools, like Swagger UI. But again, it was a very innovative idea. It has an interesting, uncommon feature: using the same framework, it's possible to create APIs and also CLIs. As it is based on the previous standard for synchronous Python web frameworks (WSGI), it can't handle Websockets and other things, although it still has high performance too. Info Hug was created by Timothy Crosley, the same creator of isort , a great tool to automatically sort imports in Python files. Ideas inspired in FastAPI Hug inspired parts of APIStar, and was one of the tools I found most promising, alongside APIStar. Hug helped inspiring FastAPI to use Python type hints to declare parameters, and to generate a schema defining the API automatically. Hug inspired FastAPI to declare a response parameter in functions to set headers and cookies. APIStar (<= 0.5) \u00b6 Right before deciding to build FastAPI I found APIStar server. It had almost everything I was looking for and had a great design. It was one of the first implementations of a framework using Python type hints to declare parameters and requests that I ever saw (before NestJS and Molten). I found it more or less at the same time as Hug. But APIStar used the OpenAPI standard. It had automatic data validation, data serialization and OpenAPI schema generation based on the same type hints in several places. Body schema definitions didn't use the same Python type hints like Pydantic, it was a bit more similar to Marshmallow, so, editor support wouldn't be as good, but still, APIStar was the best available option. It had the best performance benchmarks at the time (only surpassed by Starlette). At first, it didn't have an automatic API documentation web UI, but I knew I could add Swagger UI to it. It had a dependency injection system. It required pre-registration of components, as other tools discussed above. But still, it was a great feature. I was never able to use it in a full project, as it didn't have security integration, so, I couldn't replace all the features I was having with the full-stack generators based on Flask-apispec. I had in my backlog of projects to create a pull request adding that functionality. But then, the project's focus shifted. It was no longer an API web framework, as the creator needed to focus on Starlette. Now APIStar is a set of tools to validate OpenAPI specifications, not a web framework. Info APIStar was created by Tom Christie. The same guy that created: Django REST Framework Starlette (in which FastAPI is based) Uvicorn (used by Starlette and FastAPI ) Inspired FastAPI to Exist. The idea of declaring multiple things (data validation, serialization and documentation) with the same Python types, that at the same time provided great editor support, was something I considered a brilliant idea. And after searching for a long time for a similar framework and testing many different alternatives, APIStar was the best option available. Then APIStar stopped to exist as a server and Starlette was created, and was a new better foundation for such a system. That was the final inspiration to build FastAPI . I consider FastAPI a \"spiritual successor\" to APIStar, while improving and increasing the features, typing system, and other parts, based on the learnings from all these previous tools. Used by FastAPI \u00b6 Pydantic \u00b6 Pydantic is a library to define data validation, serialization and documentation (using JSON Schema) based on Python type hints. That makes it extremely intuitive. It is comparable to Marshmallow. Although it's faster than Marshmallow in benchmarks. And as it is based on the same Python type hints, the editor support is great. FastAPI uses it to Handle all the data validation, data serialization and automatic model documentation (based on JSON Schema). FastAPI then takes that JSON Schema data and puts it in OpenAPI, apart from all the other things it does. Starlette \u00b6 Starlette is a lightweight ASGI framework/toolkit, which is ideal for building high-performance asyncio services. It is very simple and intuitive. It's designed to be easily extensible, and have modular components. It has: Seriously impressive performance. WebSocket support. In-process background tasks. Startup and shutdown events. Test client built on requests. CORS, GZip, Static Files, Streaming responses. Session and Cookie support. 100% test coverage. 100% type annotated codebase. Few hard dependencies. Starlette is currently the fastest Python framework tested. Only surpassed by Uvicorn, which is not a framework, but a server. Starlette provides all the basic web microframework functionality. But it doesn't provide automatic data validation, serialization or documentation. That's one of the main things that FastAPI adds on top, all based on Python type hints (using Pydantic). That, plus the dependency injection system, security utilities, OpenAPI schema generation, etc. Technical Details ASGI is a new \"standard\" being developed by Django core team members. It is still not a \"Python standard\" (a PEP), although they are in the process of doing that. Nevertheless, it is already being used as a \"standard\" by several tools. This greatly improves interoperability, as you could switch Uvicorn for any other ASGI server (like Daphne or Hypercorn), or you could add ASGI compatible tools, like python-socketio . FastAPI uses it to Handle all the core web parts. Adding features on top. The class FastAPI itself inherits directly from the class Starlette . So, anything that you can do with Starlette, you can do it directly with FastAPI , as it is basically Starlette on steroids. Uvicorn \u00b6 Uvicorn is a lightning-fast ASGI server, built on uvloop and httptools. It is not a web framework, but a server. For example, it doesn't provide tools for routing by paths. That's something that a framework like Starlette (or FastAPI ) would provide on top. It is the recommended server for Starlette and FastAPI . FastAPI recommends it as The main web server to run FastAPI applications. You can combine it with Gunicorn, to have an asynchronous multi-process server. Check more details in the Deployment section. Benchmarks and speed \u00b6 To understand, compare, and see the difference between Uvicorn, Starlette and FastAPI, check the section about Benchmarks .","title":"Alternatives, Inspiration and Comparisons"},{"location":"alternatives/#alternatives-inspiration-and-comparisons","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . What inspired FastAPI , how it compares to other alternatives and what it learned from them.","title":"Alternatives, Inspiration and Comparisons"},{"location":"alternatives/#intro","text":"FastAPI wouldn't exist if not for the previous work of others. There have been many tools created before that have helped inspire its creation. I have been avoiding the creation of a new framework for several years. First I tried to solve all the features covered by FastAPI using many different frameworks, plug-ins, and tools. But at some point, there was no other option than creating something that provided all these features, taking the best ideas from previous tools, and combining them in the best way possible, using language features that weren't even available before (Python 3.6+ type hints).","title":"Intro"},{"location":"alternatives/#previous-tools","text":"","title":"Previous tools"},{"location":"alternatives/#django","text":"It's the most popular Python framework and is widely trusted. It is used to build systems like Instagram. It's relatively tightly coupled with relational databases (like MySQL or PostgreSQL), so, having a NoSQL database (like Couchbase, MongoDB, Cassandra, etc) as the main store engine is not very easy. It was created to generate the HTML in the backend, not to create APIs used by a modern frontend (like React, Vue.js and Angular) or by other systems (like IoT devices) communicating with it.","title":"Django"},{"location":"alternatives/#django-rest-framework","text":"Django REST framework was created to be a flexible toolkit for building Web APIs using Django underneath, to improve its API capabilities. It is used by many companies including Mozilla, Red Hat and Eventbrite. It was one of the first examples of automatic API documentation , and this was specifically one of the first ideas that inspired \"the search for\" FastAPI . Note Django REST Framework was created by Tom Christie. The same creator of Starlette and Uvicorn, on which FastAPI is based. Inspired FastAPI to Have an automatic API documentation web user interface.","title":"Django REST Framework"},{"location":"alternatives/#flask","text":"Flask is a \"microframework\", it doesn't include database integrations nor many of the things that come by default in Django. This simplicity and flexibility allow doing things like using NoSQL databases as the main data storage system. As it is very simple, it's relatively intuitive to learn, although the documentation gets somewhat technical at some points. It is also commonly used for other applications that don't necessarily need a database, user management, or any of the many features that come pre-built in Django. Although many of these features can be added with plug-ins. This decoupling of parts, and being a \"microframework\" that could be extended to cover exactly what is needed was a key feature that I wanted to keep. Given the simplicity of Flask, it seemed like a good match for building APIs. The next thing to find was a \"Django REST Framework\" for Flask. Inspired FastAPI to Be a micro-framework. Making it easy to mix and match the tools and parts needed. Have a simple and easy to use routing system.","title":"Flask"},{"location":"alternatives/#requests","text":"FastAPI is not actually an alternative to Requests . Their scope is very different. It would actually be common to use Requests inside of a FastAPI application. But still, FastAPI got quite some inspiration from Requests. Requests is a library to interact with APIs (as a client), while FastAPI is a library to build APIs (as a server). They are, more or less, at opposite ends, complementing each other. Requests has a very simple and intuitive design, it's very easy to use, with sensible defaults. But at the same time, it's very powerful and customizable. That's why, as said in the official website: Requests is one of the most downloaded Python packages of all time The way you use it is very simple. For example, to do a GET request, you would write: response = requests . get ( \"http://example.com/some/url\" ) The FastAPI counterpart API path operation could look like: @app . get ( \"/some/url\" ) def read_url (): return { \"message\" : \"Hello World\" } See the similarities in requests.get(...) and @app.get(...) . Inspired FastAPI to Have a simple and intuitive API. Use HTTP method names (operations) directly, in a straightforward and intuitive way. Have sensible defaults, but powerful customizations.","title":"Requests"},{"location":"alternatives/#swagger-openapi","text":"The main feature I wanted from Django REST Framework was the automatic API documentation. Then I found that there was a standard to document APIs, using JSON (or YAML, an extension of JSON) called Swagger. And there was a web user interface for Swagger APIs already created. So, being able to generate Swagger documentation for an API would allow using this web user interface automatically. At some point, Swagger was given to the Linux Foundation, to be renamed OpenAPI. That's why when talking about version 2.0 it's common to say \"Swagger\", and for version 3+ \"OpenAPI\". Inspired FastAPI to Adopt and use an open standard for API specifications, instead of a custom schema. And integrate standards-based user interface tools: Swagger UI ReDoc These two were chosen for being fairly popular and stable, but doing a quick search, you could find dozens of additional alternative user interfaces for OpenAPI (that you can use with FastAPI ).","title":"Swagger / OpenAPI"},{"location":"alternatives/#flask-rest-frameworks","text":"There are several Flask REST frameworks, but after investing the time and work into investigating them, I found that many are discontinued or abandoned, with several standing issues that made them unfit.","title":"Flask REST frameworks"},{"location":"alternatives/#marshmallow","text":"One of the main features needed by API systems is data \" serialization \" which is taking data from the code (Python) and converting it into something that can be sent through the network. For example, converting an object containing data from a database into a JSON object. Converting datetime objects into strings, etc. Another big feature needed by APIs is data validation, making sure that the data is valid, given certain parameters. For example, that some field is an int , and not some random string. This is especially useful for incoming data. Without a data validation system, you would have to do all the checks by hand, in code. These features are what Marshmallow was built to provide. It is a great library, and I have used it a lot before. But it was created before there existed Python type hints. So, to define every schema you need to use specific utils and classes provided by Marshmallow. Inspired FastAPI to Use code to define \"schemas\" that provide data types and validation, automatically.","title":"Marshmallow"},{"location":"alternatives/#webargs","text":"Another big feature required by APIs is parsing data from incoming requests. Webargs is a tool that was made to provide that on top of several frameworks, including Flask. It uses Marshmallow underneath to do the data validation. And it was created by the same developers. It's a great tool and I have used it a lot too, before having FastAPI . Info Webargs was created by the same Marshmallow developers. Inspired FastAPI to Have automatic validation of incoming request data.","title":"Webargs"},{"location":"alternatives/#apispec","text":"Marshmallow and Webargs provide validation, parsing and serialization as plug-ins. But documentation is still missing. Then APISpec was created. It is a plug-in for many frameworks (and there's a plug-in for Starlette too). The way it works is that you write the definition of the schema using YAML format inside the docstring of each function handling a route. And it generates OpenAPI schemas. That's how it works in Flask, Starlette, Responder, etc. But then, we have again the problem of having a micro-syntax, inside of a Python string (a big YAML). The editor can't help much with that. And if we modify parameters or Marshmallow schemas and forget to also modify that YAML docstring, the generated schema would be obsolete. Info APISpec was created by the same Marshmallow developers. Inspired FastAPI to Support the open standard for APIs, OpenAPI.","title":"APISpec"},{"location":"alternatives/#flask-apispec","text":"It's a Flask plug-in, that ties together Webargs, Marshmallow and APISpec. It uses the information from Webargs and Marshmallow to automatically generate OpenAPI schemas, using APISpec. It's a great tool, very under-rated. It should be way more popular than many Flask plug-ins out there. It might be due to its documentation being too concise and abstract. This solved having to write YAML (another syntax) inside of Python docstrings. This combination of Flask, Flask-apispec with Marshmallow and Webargs was my favorite backend stack until building FastAPI . Using it led to the creation of several Flask full-stack generators. These are the main stack I (and several external teams) have been using up to now: https://github.com/tiangolo/full-stack https://github.com/tiangolo/full-stack-flask-couchbase https://github.com/tiangolo/full-stack-flask-couchdb And these same full-stack generators were the base of the FastAPI Project Generators . Info Flask-apispec was created by the same Marshmallow developers. Inspired FastAPI to Generate the OpenAPI schema automatically, from the same code that defines serialization and validation.","title":"Flask-apispec"},{"location":"alternatives/#nestjs-and-angular","text":"This isn't even Python, NestJS is a JavaScript (TypeScript) NodeJS framework inspired by Angular. It achieves something somewhat similar to what can be done with Flask-apispec. It has an integrated dependency injection system, inspired by Angular two. It requires pre-registering the \"injectables\" (like all the other dependency injection systems I know), so, it adds to the verbosity and code repetition. As the parameters are described with TypeScript types (similar to Python type hints), editor support is quite good. But as TypeScript data is not preserved after compilation to JavaScript, it cannot rely on the types to define validation, serialization and documentation at the same time. Due to this and some design decisions, to get validation, serialization and automatic schema generation, it's needed to add decorators in many places. So, it becomes quite verbose. It can't handle nested models very well. So, if the JSON body in the request is a JSON object that has inner fields that in turn are nested JSON objects, it cannot be properly documented and validated. Inspired FastAPI to Use Python types to have great editor support. Have a powerful dependency injection system. Find a way to minimize code repetition.","title":"NestJS (and Angular)"},{"location":"alternatives/#sanic","text":"It was one of the first extremely fast Python frameworks based on asyncio . It was made to be very similar to Flask. Technical Details It used uvloop instead of the default Python asyncio loop. That's what made it so fast. It clearly inspired Uvicorn and Starlette, that are currently faster than Sanic in open benchmarks. Inspired FastAPI to Find a way to have a crazy performance. That's why FastAPI is based on Starlette, as it is the fastest framework available (tested by third-party benchmarks).","title":"Sanic"},{"location":"alternatives/#falcon","text":"Falcon is another high performance Python framework, it is designed to be minimal, and work as the foundation of other frameworks like Hug. It is designed to have functions that receive two parameters, one \"request\" and one \"response\". Then you \"read\" parts from the request, and \"write\" parts to the response. Because of this design, it is not possible to declare request parameters and bodies with standard Python type hints as function parameters. So, data validation, serialization, and documentation, have to be done in code, not automatically. Or they have to be implemented as a framework on top of Falcon, like Hug. This same distinction happens in other frameworks that are inspired by Falcon's design, of having one request object and one response object as parameters. Inspired FastAPI to Find ways to get great performance. Along with Hug (as Hug is based on Falcon) inspired FastAPI to declare a response parameter in functions. Although in FastAPI it's optional, and is used mainly to set headers, cookies, and alternative status codes.","title":"Falcon"},{"location":"alternatives/#molten","text":"I discovered Molten in the first stages of building FastAPI . And it has quite similar ideas: Based on Python type hints. Validation and documentation from these types. Dependency Injection system. It doesn't use a data validation, serialization and documentation third-party library like Pydantic, it has its own. So, these data type definitions would not be reusable as easily. It requires a little bit more verbose configurations. And as it is based on WSGI (instead of ASGI), it is not designed to take advantage of the high-performance provided by tools like Uvicorn, Starlette and Sanic. The dependency injection system requires pre-registration of the dependencies and the dependencies are solved based on the declared types. So, it's not possible to declare more than one \"component\" that provides a certain type. Routes are declared in a single place, using functions declared in other places (instead of using decorators that can be placed right on top of the function that handles the endpoint). This is closer to how Django does it than to how Flask (and Starlette) does it. It separates in the code things that are relatively tightly coupled. Inspired FastAPI to Define extra validations for data types using the \"default\" value of model attributes. This improves editor support, and it was not available in Pydantic before. This actually inspired updating parts of Pydantic, to support the same validation declaration style (all this functionality is now already available in Pydantic).","title":"Molten"},{"location":"alternatives/#hug","text":"Hug was one of the first frameworks to implement the declaration of API parameter types using Python type hints. This was a great idea that inspired other tools to do the same. It used custom types in its declarations instead of standard Python types, but it was still a huge step forward. It also was one of the first frameworks to generate a custom schema declaring the whole API in JSON. It was not based on a standard like OpenAPI and JSON Schema. So it wouldn't be straightforward to integrate it with other tools, like Swagger UI. But again, it was a very innovative idea. It has an interesting, uncommon feature: using the same framework, it's possible to create APIs and also CLIs. As it is based on the previous standard for synchronous Python web frameworks (WSGI), it can't handle Websockets and other things, although it still has high performance too. Info Hug was created by Timothy Crosley, the same creator of isort , a great tool to automatically sort imports in Python files. Ideas inspired in FastAPI Hug inspired parts of APIStar, and was one of the tools I found most promising, alongside APIStar. Hug helped inspiring FastAPI to use Python type hints to declare parameters, and to generate a schema defining the API automatically. Hug inspired FastAPI to declare a response parameter in functions to set headers and cookies.","title":"Hug"},{"location":"alternatives/#apistar-05","text":"Right before deciding to build FastAPI I found APIStar server. It had almost everything I was looking for and had a great design. It was one of the first implementations of a framework using Python type hints to declare parameters and requests that I ever saw (before NestJS and Molten). I found it more or less at the same time as Hug. But APIStar used the OpenAPI standard. It had automatic data validation, data serialization and OpenAPI schema generation based on the same type hints in several places. Body schema definitions didn't use the same Python type hints like Pydantic, it was a bit more similar to Marshmallow, so, editor support wouldn't be as good, but still, APIStar was the best available option. It had the best performance benchmarks at the time (only surpassed by Starlette). At first, it didn't have an automatic API documentation web UI, but I knew I could add Swagger UI to it. It had a dependency injection system. It required pre-registration of components, as other tools discussed above. But still, it was a great feature. I was never able to use it in a full project, as it didn't have security integration, so, I couldn't replace all the features I was having with the full-stack generators based on Flask-apispec. I had in my backlog of projects to create a pull request adding that functionality. But then, the project's focus shifted. It was no longer an API web framework, as the creator needed to focus on Starlette. Now APIStar is a set of tools to validate OpenAPI specifications, not a web framework. Info APIStar was created by Tom Christie. The same guy that created: Django REST Framework Starlette (in which FastAPI is based) Uvicorn (used by Starlette and FastAPI ) Inspired FastAPI to Exist. The idea of declaring multiple things (data validation, serialization and documentation) with the same Python types, that at the same time provided great editor support, was something I considered a brilliant idea. And after searching for a long time for a similar framework and testing many different alternatives, APIStar was the best option available. Then APIStar stopped to exist as a server and Starlette was created, and was a new better foundation for such a system. That was the final inspiration to build FastAPI . I consider FastAPI a \"spiritual successor\" to APIStar, while improving and increasing the features, typing system, and other parts, based on the learnings from all these previous tools.","title":"APIStar (&lt;= 0.5)"},{"location":"alternatives/#used-by-fastapi","text":"","title":"Used by FastAPI"},{"location":"alternatives/#pydantic","text":"Pydantic is a library to define data validation, serialization and documentation (using JSON Schema) based on Python type hints. That makes it extremely intuitive. It is comparable to Marshmallow. Although it's faster than Marshmallow in benchmarks. And as it is based on the same Python type hints, the editor support is great. FastAPI uses it to Handle all the data validation, data serialization and automatic model documentation (based on JSON Schema). FastAPI then takes that JSON Schema data and puts it in OpenAPI, apart from all the other things it does.","title":"Pydantic"},{"location":"alternatives/#starlette","text":"Starlette is a lightweight ASGI framework/toolkit, which is ideal for building high-performance asyncio services. It is very simple and intuitive. It's designed to be easily extensible, and have modular components. It has: Seriously impressive performance. WebSocket support. In-process background tasks. Startup and shutdown events. Test client built on requests. CORS, GZip, Static Files, Streaming responses. Session and Cookie support. 100% test coverage. 100% type annotated codebase. Few hard dependencies. Starlette is currently the fastest Python framework tested. Only surpassed by Uvicorn, which is not a framework, but a server. Starlette provides all the basic web microframework functionality. But it doesn't provide automatic data validation, serialization or documentation. That's one of the main things that FastAPI adds on top, all based on Python type hints (using Pydantic). That, plus the dependency injection system, security utilities, OpenAPI schema generation, etc. Technical Details ASGI is a new \"standard\" being developed by Django core team members. It is still not a \"Python standard\" (a PEP), although they are in the process of doing that. Nevertheless, it is already being used as a \"standard\" by several tools. This greatly improves interoperability, as you could switch Uvicorn for any other ASGI server (like Daphne or Hypercorn), or you could add ASGI compatible tools, like python-socketio . FastAPI uses it to Handle all the core web parts. Adding features on top. The class FastAPI itself inherits directly from the class Starlette . So, anything that you can do with Starlette, you can do it directly with FastAPI , as it is basically Starlette on steroids.","title":"Starlette"},{"location":"alternatives/#uvicorn","text":"Uvicorn is a lightning-fast ASGI server, built on uvloop and httptools. It is not a web framework, but a server. For example, it doesn't provide tools for routing by paths. That's something that a framework like Starlette (or FastAPI ) would provide on top. It is the recommended server for Starlette and FastAPI . FastAPI recommends it as The main web server to run FastAPI applications. You can combine it with Gunicorn, to have an asynchronous multi-process server. Check more details in the Deployment section.","title":"Uvicorn"},{"location":"alternatives/#benchmarks-and-speed","text":"To understand, compare, and see the difference between Uvicorn, Starlette and FastAPI, check the section about Benchmarks .","title":"Benchmarks and speed"},{"location":"async/","text":"\ub3d9\uc2dc\uc131\uacfc async / await \u00b6 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc5d0\uc11c\uc758 async def \ubb38\ubc95\uc5d0 \ub300\ud55c \uc138\ubd80\uc0ac\ud56d\uacfc \ube44\ub3d9\uae30 \ucf54\ub4dc, \ub3d9\uc2dc\uc131 \ubc0f \ubcd1\ub82c\uc131\uc5d0 \ub300\ud55c \ubc30\uacbd \ubc14\uc058\uc2e0 \uacbd\uc6b0 \u00b6 \uc694\uc57d \ub2e4\uc74c\uacfc \uac19\uc774 await \ub97c \uc0ac\uc6a9\ud574 \ud638\ucd9c\ud558\ub294 \uc81c3\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0: results = await some_library () \ub2e4\uc74c\ucc98\ub7fc \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub97c async def \ub97c \uc0ac\uc6a9\ud574 \uc120\uc5b8\ud558\uc2ed\uc2dc\uc624: @app . get ( '/' ) async def read_results (): results = await some_library () return results \ucc38\uace0 async def \ub85c \uc0dd\uc131\ub41c \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c\ub9cc await \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130\ubca0\uc774\uc2a4, API, \ud30c\uc77c\uc2dc\uc2a4\ud15c \ub4f1\uacfc \uc758\uc0ac\uc18c\ud1b5\ud558\ub294 \uc81c3\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uace0, \uadf8\uac83\uc774 await \ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0(\ud604\uc7ac \uac70\uc758 \ubaa8\ub4e0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uadf8\ub7ec\ud569\ub2c8\ub2e4), \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub97c \uc77c\ubc18\uc801\uc778 def \ub97c \uc0ac\uc6a9\ud574 \uc120\uc5b8\ud558\uc2ed\uc2dc\uc624: @app . get ( '/' ) def results (): results = some_library () return results \ub9cc\uc57d \ub2f9\uc2e0\uc758 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc774 (\uc5b4\uc9f8\uc11c\uc778\uc9c0) \ub2e4\ub978 \ubb34\uc5c7\uacfc \uc758\uc0ac\uc18c\ud1b5\ud558\uace0 \uadf8\uac83\uc774 \uc751\ub2f5\ud558\uae30\ub97c \uae30\ub2e4\ub9b4 \ud544\uc694\uac00 \uc5c6\ub2e4\uba74 async def \ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. \ubaa8\ub974\uaca0\ub2e4\uba74, \uadf8\ub0e5 def \ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. \ucc38\uace0 : \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc5d0\uc11c \ud544\uc694\ud55c\ub9cc\ud07c def \uc640 async def \ub97c \ud63c\uc6a9\ud560 \uc218 \uc788\uace0, \uac00\uc7a5 \uc54c\ub9de\uc740 \uac83\uc744 \uc120\ud0dd\ud574\uc11c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI\uac00 \uc790\uccb4\uc801\uc73c\ub85c \uc54c\ub9de\uc740 \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uac83\uc785\ub2c8\ub2e4. \uc5b4\ucc0c\ub418\uc5c8\ub4e0, \uc0c1\uae30 \uc5b4\ub5a0\ud55c \uacbd\uc6b0\ub77c\ub3c4, FastAPI\ub294 \uc5ec\uc804\ud788 \ube44\ub3d9\uae30\uc801\uc73c\ub85c \uc791\ub3d9\ud558\uace0 \ub9e4\uc6b0 \ube60\ub985\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc0c1\uae30 \uc791\uc5c5\uc744 \uc218\ud589\ud568\uc73c\ub85c\uc368 \uc5b4\ub290 \uc815\ub3c4\uc758 \uc131\ub2a5 \ucd5c\uc801\ud654\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d \u00b6 \ucd5c\uc2e0 \ud30c\uc774\uc36c \ubc84\uc804\uc740 async \uc640 await \ubb38\ubc95\uacfc \ud568\uaed8 \u201c\ucf54\ub8e8\ud2f4\u201d \uc774\ub77c\uace0 \ud558\ub294 \uac83\uc744 \uc0ac\uc6a9\ud558\ub294 \u201c\ube44\ub3d9\uae30 \ucf54\ub4dc\u201d \ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc544\ub798 \uc139\uc158\ub4e4\uc5d0\uc11c \ud574\ub2f9 \ubb38\uc7a5\uc744 \ubd80\ubd84\ubcc4\ub85c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4: \ube44\ub3d9\uae30 \ucf54\ub4dc async \uc640 await \ucf54\ub8e8\ud2f4 \ube44\ub3d9\uae30 \ucf54\ub4dc \u00b6 \ube44\ub3d9\uae30 \ucf54\ub4dc\ub780 \uc5b8\uc5b4 \ud83d\udcac \uac00 \ucf54\ub4dc\uc758 \uc5b4\ub290 \ud55c \ubd80\ubd84\uc5d0\uc11c, \ucef4\ud4e8\ud130 / \ud504\ub85c\uadf8\ub7a8\ud83e\udd16\uc5d0\uac8c \ub2e4\ub978 \ubb34\uc5b8\uac00 \uac00 \uc5b4\ub518\uac00\uc5d0\uc11c \ub05d\ub0a0 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub824\uc57c\ud55c\ub2e4\uace0 \ub9d0\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \ub2e4\ub978 \ubb34\uc5b8\uac00 \uac00 \u201c\ub290\ub9b0-\ud30c\uc77c\" \ud83d\udcdd \uc774\ub77c\uace0 \ubd88\ub9b0\ub2e4\uace0 \uac00\uc815\ud574\ubd05\uc2dc\ub2e4. \ub530\ub77c\uc11c \u201c\ub290\ub9b0-\ud30c\uc77c\u201d \ud83d\udcdd\uc774 \ub05d\ub0a0\ub54c\uae4c\uc9c0 \ucef4\ud4e8\ud130\ub294 \ub2e4\ub978 \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8 \ub2e4\uc74c \ucef4\ud4e8\ud130 / \ud504\ub85c\uadf8\ub7a8 \ud83e\udd16 \uc740 \ub2e4\uc2dc \uae30\ub2e4\ub9ac\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \uae30\ud68c\uac00 \uc788\uc744 \ub54c\ub9c8\ub2e4 \ub2e4\uc2dc \ub3cc\uc544\uc624\uac70\ub098, \ud639\uc740 \ub2f9\uc2dc\uc5d0 \uc218\ud589\ud574\uc57c\ud558\ub294 \uc791\uc5c5\ub4e4\uc774 \uc644\ub8cc\ub420 \ub54c\ub9c8\ub2e4 \ub2e4\uc2dc \ub3cc\uc544\uc635\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uadf8\uac83 \ud83e\udd16 \uc740 \uae30\ub2e4\ub9ac\uace0 \uc788\ub358 \uc791\uc5c5 \uc911 \uc5b4\ub290 \uac83\uc774 \uc774\ubbf8 \uc644\ub8cc\ub418\uc5c8\ub294\uc9c0, \uadf8\uac83 \ud83e\udd16 \uc774 \ud574\uc57c\ud558\ub294 \ubaa8\ub4e0 \uc791\uc5c5\uc744 \uc218\ud589\ud558\uba74\uc11c \ud655\uc778\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uc73c\ub85c, \uadf8\uac83 \ud83e\udd16 \uc740 \uc644\ub8cc\ud560 \uccab\ubc88\uc9f8 \uc791\uc5c5\uc5d0 \ucc29\uc218\ud558\uace0(\uc6b0\ub9ac\uc758 \"\ub290\ub9b0-\ud30c\uc77c\" \ud83d\udcdd \uc774\ub77c\uace0 \uac00\uc815\ud569\uc2dc\ub2e4) \uadf8\uc5d0 \ub300\ud574 \uc218\ud589\ud574\uc57c\ud558\ub294 \uc791\uc5c5\uc744 \uacc4\uc18d\ud569\ub2c8\ub2e4. \"\ub2e4\ub978 \ubb34\uc5b8\uac00\ub97c \uae30\ub2e4\ub9ac\ub294 \uac83\"\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ube44\uad50\uc801 \"\ub290\ub9b0\" (\ud504\ub85c\uc138\uc11c\uc640 RAM \uba54\ubaa8\ub9ac \uc18d\ub3c4\uc5d0 \ube44\ud574) I/O \uc791\uc5c5\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uc758 \uac83\ub4e4\uc744 \uae30\ub2e4\ub9ac\ub294 \uac83\uc785\ub2c8\ub2e4: \ub124\ud2b8\uc6cc\ud06c\ub97c \ud1b5\ud574 \ud074\ub77c\uc774\uc5b8\ud2b8\ub85c\ubd80\ud130 \uc804\uc1a1\ub418\ub294 \ub370\uc774\ud130 \ub124\ud2b8\uc6cc\ud06c\ub97c \ud1b5\ud574 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc218\uc2e0\ud560, \ub2f9\uc2e0\uc758 \ud504\ub85c\uadf8\ub7a8\uc73c\ub85c\ubd80\ud130 \uc804\uc1a1\ub418\ub294 \ub370\uc774\ud130 \uc2dc\uc2a4\ud15c\uc774 \uc77d\uace0 \ud504\ub85c\uadf8\ub7a8\uc5d0 \uc804\ub2ec\ud560 \ub514\uc2a4\ud06c \ub0b4\uc758 \ud30c\uc77c \ub0b4\uc6a9 \ub2f9\uc2e0\uc758 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2dc\uc2a4\ud15c\uc5d0 \uc804\ub2ec\ud558\ub294, \ub514\uc2a4\ud06c\uc5d0 \uc791\uc131\ub420 \ub0b4\uc6a9 \uc6d0\uaca9 API \uc791\uc5c5 \uc644\ub8cc\ub420 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5 \uacb0\uacfc\ub97c \ubc18\ud658\ud558\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucffc\ub9ac \uae30\ud0c0 \uc218\ud589 \uc2dc\uac04\uc758 \ub300\ubd80\ubd84\uc774 I/O \uc791\uc5c5\uc744 \uae30\ub2e4\ub9ac\ub294\ub370\uc5d0 \uc18c\uc694\ub418\uae30 \ub54c\ubb38\uc5d0, \"I/O\uc5d0 \ubb36\uc778\" \uc791\uc5c5\uc774\ub77c\uace0 \ubd88\ub9bd\ub2c8\ub2e4. \uc774\uac83\uc740 \"\ube44\ub3d9\uae30\"\ub77c\uace0 \ubd88\ub9ac\ub294\ub370 \ucef4\ud4e8\ud130 / \ud504\ub85c\uadf8\ub7a8\uc774 \uc791\uc5c5 \uacb0\uacfc\ub97c \uac00\uc9c0\uace0 \uc77c\uc744 \uc218\ud589\ud560 \uc218 \uc788\ub3c4\ub85d, \ub290\ub9b0 \uc791\uc5c5\uc5d0 \"\ub3d9\uae30\ud654\"\ub418\uc5b4 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\uc73c\uba74\uc11c \uc791\uc5c5\uc774 \uc644\ub8cc\ub420 \uc815\ud655\ud55c \uc2dc\uc810\ub9cc\uc744 \uae30\ub2e4\ub9b4 \ud544\uc694\uac00 \uc5c6\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc774 \ub300\uc2e0\uc5d0, \"\ube44\ub3d9\uae30\" \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294, \uc791\uc5c5\uc740 \uc77c\ub2e8 \uc644\ub8cc\ub418\uba74, \ucef4\ud4e8\ud130 / \ud504\ub85c\uadf8\ub7a8\uc774 \uc218\ud589\ud558\uace0 \uc788\ub294 \uc77c\uc744 \uc644\ub8cc\ud558\uace0 \uc774\ud6c4 \ub2e4\uc2dc \ub3cc\uc544\uc640\uc11c \uadf8\uac83\uc758 \uacb0\uacfc\ub97c \ubc1b\uc544 \uc774\ub97c \uc0ac\uc6a9\ud574 \uc791\uc5c5\uc744 \uc9c0\uc18d\ud560 \ub54c\uae4c\uc9c0 \uc7a0\uc2dc (\uba87 \ub9c8\uc774\ud06c\ub85c\ucd08) \ub300\uae30\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \"\ub3d9\uae30\"(\"\ube44\ub3d9\uae30\"\uc758 \ubc18\ub300)\ub294 \ucef4\ud4e8\ud130 / \ud504\ub85c\uadf8\ub7a8\uc774 \uc0c1\uc774\ud55c \uc791\uc5c5\ub4e4\uac04 \uc804\ud658\uc744 \ud558\uae30 \uc804\uc5d0 \uadf8\uac83\uc774 \ub300\uae30\ub97c \ub3d9\ubc18\ud558\uac8c \ub420\uc9c0\ub77c\ub3c4 \ubaa8\ub4e0 \uc21c\uc11c\ub97c \ub530\ub974\uae30 \ub54c\ubb38\uc5d0 \"\uc21c\ucc28\"\ub77c\ub294 \uc6a9\uc5b4\ub85c\ub3c4 \ud754\ud788 \ubd88\ub9bd\ub2c8\ub2e4. \ub3d9\uc2dc\uc131\uacfc \ubc84\uac70 \u00b6 \uc704\uc5d0\uc11c \uc124\uba85\ud55c \ube44\ub3d9\uae30 \ucf54\ub4dc\uc5d0 \ub300\ud55c \uac1c\ub150\uc740 \uc885\uc885 \"\ub3d9\uc2dc\uc131\" \uc774\ub77c\uace0\ub3c4 \ubd88\ub9bd\ub2c8\ub2e4. \uc774\uac83\uc740 \"\ubcd1\ub82c\uc131\" \uacfc\ub294 \ub2e4\ub985\ub2c8\ub2e4. \ub3d9\uc2dc\uc131 \uacfc \ubcd1\ub82c\uc131 \uc740 \ubaa8\ub450 \"\ub3d9\uc2dc\uc5d0 \uc77c\uc5b4\ub098\ub294 \uc11c\ub85c \ub2e4\ub978 \uc77c\ub4e4\"\uacfc \uad00\ub828\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub3d9\uc2dc\uc131 \uacfc \ubcd1\ub82c\uc131 \uc758 \uc138\ubd80\uc801\uc778 \uac1c\ub150\uc5d0\ub294 \uaf64 \ucc28\uc774\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ucc28\uc774\ub97c \ud655\uc778\ud558\uae30 \uc704\ud574, \ub2e4\uc74c\uc758 \ubc84\uac70\uc5d0 \ub300\ud55c \uc774\uc57c\uae30\ub97c \uc0c1\uc0c1\ud574\ubcf4\uc2ed\uc2dc\uc624: \ub3d9\uc2dc \ubc84\uac70 \u00b6 \ub2f9\uc2e0\uc740 \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc640 \ud328\uc2a4\ud2b8\ud478\ub4dc \ud83c\udf54 \ub97c \uba39\uc73c\ub7ec \uac14\uc2b5\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \uc810\uc6d0 \ud83d\udc81 \uc774 \ub2f9\uc2e0 \uc55e\uc5d0 \uc788\ub294 \uc0ac\ub78c\ub4e4\uc758 \uc8fc\ubb38\uc744 \ubc1b\uc744 \ub3d9\uc548 \uc904\uc744 \uc11c\uc11c \uae30\ub2e4\ub9ac\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \ub2f9\uc2e0\uc758 \uc21c\uc11c\uac00 \ub418\uc5b4\uc11c, \ub2f9\uc2e0\uc740 \ub2f9\uc2e0\uacfc \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \ub97c \uc704\ud55c \ub450 \uac1c\uc758 \uace0\uae09\uc2a4\ub7ec\uc6b4 \ubc84\uac70 \ud83c\udf54 \ub97c \uc8fc\ubb38\ud569\ub2c8\ub2e4. \ub2f9\uc2e0\uc774 \ub3c8\uc744 \ub0c5\ub2c8\ub2e4 \ud83d\udcb8. \uc810\uc6d0 \ud83d\udc81 \uc740 \uc8fc\ubc29 \ud83d\udc68\u200d\ud83c\udf73 \uc5d0 \uc694\ub9ac\ub97c \ud558\ub77c\uace0 \uc804\ub2ec\ud558\uace0, \ub530\ub77c\uc11c \uadf8\ub4e4\uc740 \ub2f9\uc2e0\uc758 \ubc84\uac70 \ud83c\udf54 \ub97c \uc900\ube44\ud574\uc57c\ud55c\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc54c\uac8c\ub429\ub2c8\ub2e4(\uadf8\ub4e4\uc774 \uc9c0\uae08\uc740 \ub2f9\uc2e0 \uc55e \uace0\uac1d\ub4e4\uc758 \uc8fc\ubb38\uc744 \uc900\ube44\ud558\uace0 \uc788\uc744\uc9c0\ub77c\ub3c4 \ub9d0\uc785\ub2c8\ub2e4). \uc810\uc6d0 \ud83d\udc81 \uc740 \ub2f9\uc2e0\uc758 \uc21c\uc11c\uac00 \uc801\ud78c \ubc88\ud638\ud45c\ub97c \uc90d\ub2c8\ub2e4. \uae30\ub2e4\ub9ac\ub294 \ub3d9\uc548, \ub2f9\uc2e0\uc740 \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc640 \ud568\uaed8 \ud14c\uc774\ube14\uc744 \uace0\ub974\uace0, \uc790\ub9ac\uc5d0 \uc549\uc544 \uc624\ub7ab\ub3d9\uc548 (\ub2f9\uc2e0\uc774 \uc8fc\ubb38\ud55c \ubc84\uac70\ub294 \uaf64\ub098 \uace0\uae09\uc2a4\ub7fd\uae30 \ub54c\ubb38\uc5d0 \uc900\ube44\ud558\ub294\ub370 \uc2dc\uac04\uc774 \uc870\uae08 \uac78\ub9bd\ub2c8\ub2e4 \u2728\ud83c\udf54\u2728) \ub300\ud654\ub97c \ub098\ub215\ub2c8\ub2e4. \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc640 \ud14c\uc774\ube14\uc5d0 \uc549\uc544\uc11c \ubc84\uac70 \ud83c\udf54 \ub97c \uae30\ub2e4\ub9ac\ub294 \ub3d9\uc548, \uadf8 \uc0ac\ub78c \ud83d\ude0d \uc774 \uc5bc\ub9c8\ub098 \uba4b\uc9c0\uace0, \uc0ac\ub791\uc2a4\ub7fd\uace0, \ub611\ub611\ud55c\uc9c0 \uac10\ud0c4\ud558\uba70 \uc2dc\uac04\uc744 \ubcf4\ub0c5\ub2c8\ub2e4 \u2728\ud83d\ude0d\u2728. \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc640 \uae30\ub2e4\ub9ac\uba74\uc11c \uc598\uae30\ud558\ub294 \ub3d9\uc548, \ub54c\ub54c\ub85c, \ub2f9\uc2e0\uc740 \ub2f9\uc2e0\uc758 \ucc28\ub840\uac00 \ub418\uc5c8\ub294\uc9c0 \ubcf4\uae30 \uc704\ud574 \uce74\uc6b4\ud130\uc758 \ubc88\ud638\ub97c \ud655\uc778\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub2e4 \uc5b4\ub290 \uc21c\uac04, \ub2f9\uc2e0\uc758 \ucc28\ub840\uac00 \ub429\ub2c8\ub2e4. \uce74\uc6b4\ud130\uc5d0 \uac00\uc11c, \ubc84\uac70 \ud83c\udf54 \ub97c \ubc1b\uace0, \ud14c\uc774\ube14\ub85c \ub2e4\uc2dc \ub3cc\uc544\uc635\ub2c8\ub2e4. \ub2f9\uc2e0\uacfc \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \ub294 \ubc84\uac70 \ud83c\udf54 \ub97c \uba39\uc73c\uba70 \uc88b\uc740 \uc2dc\uac04\uc744 \ubcf4\ub0c5\ub2c8\ub2e4 \u2728. \ub2f9\uc2e0\uc774 \uc774 \uc774\uc57c\uae30\uc5d0\uc11c \ucef4\ud4e8\ud130 / \ud504\ub85c\uadf8\ub7a8 \ud83e\udd16 \uc774\ub77c\uace0 \uc0c1\uc0c1\ud574\ubcf4\uc2ed\uc2dc\uc624. \uc904\uc744 \uc11c\uc11c \uae30\ub2e4\ub9ac\ub294 \ub3d9\uc548, \ub2f9\uc2e0\uc740 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\uace0 \ud83d\ude34 \ub2f9\uc2e0\uc758 \ucc28\ub840\ub97c \uae30\ub2e4\ub9ac\uba70, \uc5b4\ub5a0\ud55c \"\uc0dd\uc0b0\uc801\uc778\" \uc77c\ub3c4 \ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc810\uc6d0 \ud83d\udc81 \uc774 (\uc74c\uc2dd\uc744 \uc900\ube44\ud558\uc9c0\ub294 \uc54a\uace0) \uc8fc\ubb38\uc744 \ubc1b\uae30\ub9cc \ud558\uae30 \ub54c\ubb38\uc5d0 \uc904\uc774 \ube68\ub9ac \uc904\uc5b4\ub4e4\uc5b4\uc11c \uad1c\ucc2e\uc2b5\ub2c8\ub2e4. \uadf8\ub2e4\uc74c, \ub2f9\uc2e0\uc774 \ucc28\ub840\uac00 \uc624\uba74, \ub2f9\uc2e0\uc740 \uc2e4\uc81c\ub85c \"\uc0dd\uc0b0\uc801\uc778\" \uc77c \ud83e\udd13 \uc744 \ud569\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \uba54\ub274\ub97c \ubcf4\uace0, \ubb34\uc5c7\uc744 \uba39\uc744\uc9c0 \uacb0\uc815\ud558\uace0, \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc758 \uc120\ud0dd\uc744 \ubb3b\uace0, \ub3c8\uc744 \ub0b4\uace0 \ud83d\udcb8 , \ub9de\ub294 \uce74\ub4dc\ub97c \ub0c8\ub294\uc9c0 \ud655\uc778\ud558\uace0, \ube44\uc6a9\uc774 \uc81c\ub300\ub85c \uc9c0\ubd88\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\uace0, \uc8fc\ubb38\uc774 \uc81c\ub300\ub85c \ub4e4\uc5b4\uac14\ub294\uc9c0 \ud655\uc778\uc744 \ud558\ub294 \uc791\uc5c5 \ub4f1\ub4f1\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ud6c4\uc5d0\ub294, \ubc84\uac70 \ud83c\udf54 \ub97c \uc544\uc9c1 \ubc1b\uc9c0 \ubabb\ud588\uc74c\uc5d0\ub3c4, \ubc84\uac70\uac00 \uc900\ube44\ub420 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub824\uc57c \ud83d\udd59 \ud558\uae30 \ub54c\ubb38\uc5d0 \uc810\uc6d0 \ud83d\udc81 \uacfc\uc758 \uc791\uc5c5\uc740 \"\uc77c\uc2dc\uc815\uc9c0\" \u23f8 \uc0c1\ud0dc\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ubc88\ud638\ud45c\ub97c \ubc1b\uace0 \uce74\uc6b4\ud130\uc5d0\uc11c \ub098\uc640 \ud14c\uc774\ube14\uc5d0 \uc549\uc73c\uba74, \ub2f9\uc2e0\uc740 \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc640 \uadf8 \"\uc791\uc5c5\" \u23ef \ud83e\udd13 \uc5d0 \ubc88\uac08\uc544\uac00\uba70 \ud83d\udd00 \uc9d1\uc911\ud569\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \ub2f9\uc2e0\uc740 \ub2e4\uc2dc \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc5d0\uac8c \uc791\uc5c5\uc744 \uac70\ub294 \ub9e4\uc6b0 \"\uc0dd\uc0b0\uc801\uc778\" \uc77c \ud83e\udd13 \uc744 \ud569\ub2c8\ub2e4. \uc810\uc6d0 \ud83d\udc81 \uc774 \uce74\uc6b4\ud130 \ud654\uba74\uc5d0 \ub2f9\uc2e0\uc758 \ubc88\ud638\ub97c \ud45c\uc2dc\ud568\uc73c\ub85c\uc368 \"\ubc84\uac70 \ud83c\udf54 \uac00 \uc900\ube44\ub418\uc5c8\uc2b5\ub2c8\ub2e4\"\ub77c\uace0 \ud574\ub3c4, \ub2f9\uc2e0\uc740 \uc989\uc2dc \ub6f0\uccd0\ub098\uac00\uc9c0\ub294 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \ub2f9\uc2e0\uc758 \ubc88\ud638\ub97c \uac16\uace0\uc788\uace0, \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc740 \uadf8\ub4e4\uc758 \ubc88\ud638\ub97c \uac16\uace0\uc788\uae30 \ub54c\ubb38\uc5d0, \uc544\ubb34\ub3c4 \ub2f9\uc2e0\uc758 \ubc84\uac70 \ud83c\udf54 \ub97c \ud6d4\uccd0\uac00\uc9c0 \uc54a\ub294\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc54c\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub2f9\uc2e0\uc740 \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uac00 \uc774\uc57c\uae30\ub97c \ub05d\ub0bc \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9b0 \ud6c4 (\ud604\uc7ac \uc791\uc5c5 \uc644\ub8cc \u23ef / \uc9c4\ud589 \uc911\uc778 \uc791\uc5c5 \ucc98\ub9ac \ud83e\udd13 ), \uc815\uc911\ud558\uac8c \ubbf8\uc18c\uc9d3\uace0 \ubc84\uac70\ub97c \uac00\uc9c0\ub7ec \uac00\uaca0\ub2e4\uace0 \ub9d0\ud569\ub2c8\ub2e4 \u23f8. \uadf8\ub2e4\uc74c \ub2f9\uc2e0\uc740 \uce74\uc6b4\ud130\uc5d0 \uac00\uc11c \ud83d\udd00 , \ucd08\uae30 \uc791\uc5c5\uc744 \uc774\uc81c \uc644\ub8cc\ud558\uace0 \u23ef , \ubc84\uac70 \ud83c\udf54 \ub97c \ubc1b\uace0, \uac10\uc0ac\ud558\ub2e4\uace0 \ub9d0\ud558\uace0 \ud14c\uc774\ube14\ub85c \uac00\uc838\uc635\ub2c8\ub2e4. \uc774\ub85c\uc368 \uce74\uc6b4\ud130\uc640\uc758 \uc0c1\ud638\uc791\uc6a9 \ub2e8\uacc4 / \uc791\uc5c5\uc774 \uc885\ub8cc\ub429\ub2c8\ub2e4 \u23f9. \uc774\uc804 \uc791\uc5c5\uc778 \"\ubc84\uac70 \ubc1b\uae30\"\uac00 \uc885\ub8cc\ub418\uba74 \u23f9 \"\ubc84\uac70 \uba39\uae30\"\ub77c\ub294 \uc0c8\ub85c\uc6b4 \uc791\uc5c5\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4 \ud83d\udd00 \u23ef. \ubcd1\ub82c \ubc84\uac70 \u00b6 \uc774\uc81c \"\ub3d9\uc2dc \ubc84\uac70\"\uac00 \uc544\ub2cc \"\ubcd1\ub82c \ubc84\uac70\"\ub97c \uc0c1\uc0c1\ud574\ubcf4\uc2ed\uc2dc\uc624. \ub2f9\uc2e0\uc740 \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc640 \ud568\uaed8 \ubcd1\ub82c \ud328\uc2a4\ud2b8\ud478\ub4dc \ud83c\udf54 \ub97c \uba39\uc73c\ub7ec \uac14\uc2b5\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \uc5ec\ub7ec\uba85(8\uba85\uc774\ub77c\uace0 \uac00\uc815\ud569\ub2c8\ub2e4)\uc758 \uc810\uc6d0\uc774 \ub2f9\uc2e0 \uc55e \uc0ac\ub78c\ub4e4\uc758 \uc8fc\ubb38\uc744 \ubc1b\uc73c\uba70 \ub3d9\uc2dc\uc5d0 \uc694\ub9ac \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73 \ub3c4 \ud558\ub294 \ub3d9\uc548 \uc904\uc744 \uc11c\uc11c \uae30\ub2e4\ub9bd\ub2c8\ub2e4. \ub2f9\uc2e0 \uc55e \ubaa8\ub4e0 \uc0ac\ub78c\ub4e4\uc774 \ubc84\uac70\uac00 \uc900\ube44\ub420 \ub54c\uae4c\uc9c0 \uce74\uc6b4\ud130\uc5d0\uc11c \ub5a0\ub098\uc9c0 \uc54a\uace0 \uae30\ub2e4\ub9bd\ub2c8\ub2e4 \ud83d\udd59 . \uc65c\ub0d0\ud558\uba74 8\uba85\uc758 \uc9c1\uc6d0\ub4e4\uc774 \ub2e4\uc74c \uc8fc\ubb38\uc744 \ubc1b\uae30 \uc804\uc5d0 \ubc84\uac70\ub97c \uc900\ube44\ud558\ub7ec \uac00\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub9c8\uce68\ub0b4 \ub2f9\uc2e0\uc758 \ucc28\ub840\uac00 \uc654\uace0, \ub2f9\uc2e0\uc740 \ub2f9\uc2e0\uacfc \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \ub97c \uc704\ud55c \ub450 \uac1c\uc758 \uace0\uae09\uc2a4\ub7ec\uc6b4 \ubc84\uac70 \ud83c\udf54 \ub97c \uc8fc\ubb38\ud569\ub2c8\ub2e4. \ub2f9\uc2e0\uc774 \ube44\uc6a9\uc744 \uc9c0\ubd88\ud569\ub2c8\ub2e4 \ud83d\udcb8 . \uc810\uc6d0\uc774 \uc8fc\ubc29\uc5d0 \uac11\ub2c8\ub2e4 \ud83d\udc68\u200d\ud83c\udf73 . \ub2f9\uc2e0\uc740 \ubc88\ud638\ud45c\uac00 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \ub204\uad6c\ub3c4 \ub2f9\uc2e0\uc758 \ubc84\uac70 \ud83c\udf54 \ub97c \ub300\uc2e0 \uac00\uc838\uac08 \uc218 \uc5c6\ub3c4\ub85d \uce74\uc6b4\ud130\uc5d0 \uc11c\uc11c \uae30\ub2e4\ub9bd\ub2c8\ub2e4 \ud83d\udd59 . \ub2f9\uc2e0\uacfc \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \ub294 \ub2e4\ub978 \uc0ac\ub78c\uc774 \uc0c8\uce58\uae30\ud574\uc11c \ubc84\uac70\ub97c \uac00\uc838\uac00\uc9c0 \ubabb\ud558\uac8c \ud558\ub290\ub77c \ubc14\uc058\uae30 \ub54c\ubb38\uc5d0 \ud83d\udd59 , \uc9dd\uc0ac\ub791 \uc0c1\ub300\uc5d0\uac8c \uc8fc\uc758\ub97c \uae30\uc6b8\uc77c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4 \ud83d\ude1e . \uc774\uac83\uc740 \"\ub3d9\uae30\" \uc791\uc5c5\uc774\uace0, \ub2f9\uc2e0\uc740 \uc810\uc6d0/\uc694\ub9ac\uc0ac \ud83d\udc68\u200d\ud83c\udf73 \uc640 \"\ub3d9\uae30\ud654\" \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \uae30\ub2e4\ub9ac\uace0 \ud83d\udd59 , \uc810\uc6d0/\uc694\ub9ac\uc0ac \ud83d\udc68\u200d\ud83c\udf73 \uac00 \ubc84\uac70 \ud83c\udf54 \uc900\ube44\ub97c \uc644\ub8cc\ud55c \ud6c4 \ub2f9\uc2e0\uc5d0\uac8c \uc8fc\uac70\ub098, \ub204\uad70\uac00\uac00 \uadf8\uac83\uc744 \uac00\uc838\uac00\ub294 \uadf8 \uc21c\uac04\uc5d0 \uadf8 \uacf3\uc5d0 \uc788\uc5b4\uc57c\ud569\ub2c8\ub2e4. \uce74\uc6b4\ud130 \uc55e\uc5d0\uc11c \uc624\ub7ab\ub3d9\uc548 \uae30\ub2e4\ub9b0 \ud6c4\uc5d0 \ud83d\udd59 , \uc810\uc6d0/\uc694\ub9ac\uc0ac \ud83d\udc68\u200d\ud83c\udf73 \uac00 \ub2f9\uc2e0\uc758 \ubc84\uac70 \ud83c\udf54 \ub97c \uac00\uc9c0\uace0 \ub3cc\uc544\uc635\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \ubc84\uac70\ub97c \ubc1b\uace0 \uc9dd\uc0ac\ub791 \uc0c1\ub300\uc640 \ud568\uaed8 \ud14c\uc774\ube14\ub85c \ub3cc\uc544\uc635\ub2c8\ub2e4. \ub2e8\uc9c0 \uba39\uae30\ub9cc \ud558\ub2e4\uac00, \ub2e4 \uba39\uc5c8\uc2b5\ub2c8\ub2e4 \ud83c\udf54 \u23f9. \uce74\uc6b4\ud130 \uc55e\uc5d0\uc11c \uae30\ub2e4\ub9ac\uba74\uc11c \ud83d\udd59 \ub108\ubb34 \ub9ce\uc740 \uc2dc\uac04\uc744 \ud5c8\ube44\ud588\uae30 \ub54c\ubb38\uc5d0 \ub300\ud654\ub97c \ud558\uac70\ub098 \uc791\uc5c5\uc744 \uac78 \uc2dc\uac04\uc774 \uac70\uc758 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4 \ud83d\ude1e . \uc774 \ubcd1\ub82c \ubc84\uac70 \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c, \ub2f9\uc2e0\uc740 \uae30\ub2e4\ub9ac\uace0 \ud83d\udd59 , \uc624\ub79c \uc2dc\uac04\ub3d9\uc548 \"\uce74\uc6b4\ud130\uc5d0\uc11c \uae30\ub2e4\ub9ac\ub294\" \ud83d\udd59 \ub370\uc5d0 \uc8fc\uc758\ub97c \uae30\uc6b8\uc774\ub294 \u23ef \ub450 \uac1c\uc758 \ud504\ub85c\uc138\uc11c(\ub2f9\uc2e0\uacfc \uc9dd\uc0ac\ub791 \uc0c1\ub300\ud83d\ude0d)\ub97c \uac00\uc9c4 \ucef4\ud4e8\ud130 / \ud504\ub85c\uadf8\ub7a8 \ud83e\udd16 \uc785\ub2c8\ub2e4. \ud328\uc2a4\ud2b8\ud478\ub4dc\uc810\uc5d0\ub294 8\uac1c\uc758 \ud504\ub85c\uc138\uc11c(\uc810\uc6d0/\uc694\ub9ac\uc0ac) \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73 \uac00 \uc788\uc2b5\ub2c8\ub2e4. \ub3d9\uc2dc \ubc84\uac70\ub294 \ub2e8 \ub450 \uac1c(\ud55c \uba85\uc758 \uc9c1\uc6d0\uacfc \ud55c \uba85\uc758 \uc694\ub9ac\uc0ac) \ud83d\udc81 \ud83d\udc68\u200d\ud83c\udf73 \ub9cc\uc744 \uac00\uc9c0\uace0 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc5ec\uc804\ud788, \ubcd1\ub82c \ubc84\uac70 \uc608\uc2dc\uac00 \ucd5c\uc120\uc740 \uc544\ub2d9\ub2c8\ub2e4 \ud83d\ude1e . \uc774 \uc608\uc2dc\ub294 \ubc84\uac70\ud83c\udf54 \uc774\uc57c\uae30\uc640 \uacb0\uc774 \uac19\uc2b5\ub2c8\ub2e4. \ub354 \"\ud604\uc2e4\uc801\uc778\" \uc608\uc2dc\ub85c, \uc740\ud589\uc744 \uc0c1\uc0c1\ud574\ubcf4\uc2ed\uc2dc\uc624. \ucd5c\uadfc\uae4c\uc9c0, \ub300\ub2e4\uc218\uc758 \uc740\ud589\uc5d0\ub294 \ub2e4\uc218\uc758 \uc740\ud589\uc6d0\ub4e4 \ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc \uacfc \uae34 \uc904 \ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59 \uc774 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \uc740\ud589\uc6d0\ub4e4\uc740 \ud55c \uba85 \ud55c \uba85\uc758 \uace0\uac1d\ub4e4\uc744 \ucc28\ub840\ub85c \uc0c1\ub300\ud569\ub2c8\ub2e4 \ud83d\udc68\u200d\ud83d\udcbc\u23ef . \uadf8\ub9ac\uace0 \ub2f9\uc2e0\uc740 \uc624\ub7ab\ub3d9\uc548 \uc904\uc5d0\uc11c \uae30\ub2e4\ub824\uc57c\ud558\uace0 \ud83d\udd59 , \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ub2f9\uc2e0\uc758 \ucc28\ub840\ub97c \uc783\uac8c \ub429\ub2c8\ub2e4. \uc544\ub9c8 \ub2f9\uc2e0\uc740 \uc740\ud589 \ud83c\udfe6 \uc2ec\ubd80\ub984\uc5d0 \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \ub97c \ub370\ub824\uac00\uace0 \uc2f6\uc9c0\ub294 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. \ubc84\uac70 \uc608\uc2dc\uc758 \uacb0\ub860 \u00b6 \"\uc9dd\uc0ac\ub791 \uc0c1\ub300\uc640\uc758 \ud328\uc2a4\ud2b8\ud478\ub4dc\uc810 \ubc84\uac70\" \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c, \uc624\ub79c \uae30\ub2e4\ub9bc \ud83d\udd59 \uc774 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub3d9\uc2dc \uc2dc\uc2a4\ud15c \u23f8\ud83d\udd00\u23ef \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \ud569\ub9ac\uc801\uc785\ub2c8\ub2e4. \ub300\ub2e4\uc218\uc758 \uc6f9 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc758 \uacbd\uc6b0\uac00 \uadf8\ub7ec\ud569\ub2c8\ub2e4. \ub9e4\uc6b0 \ub9ce\uc740 \uc218\uc758 \uc720\uc800\uac00 \uc788\uc9c0\ub9cc, \uc11c\ubc84\ub294 \uadf8\ub4e4\uc758 \uc694\uccad\uc744 \uc804\uc1a1\ud558\uae30 \uc704\ud574 \uadf8\ub2e5-\uc88b\uc9c0-\uc54a\uc740 \uc5f0\uacb0\uc744 \uae30\ub2e4\ub824\uc57c \ud569\ub2c8\ub2e4 \ud83d\udd59 . \uadf8\ub9ac\uace0 \uc751\ub2f5\uc774 \ub3cc\uc544\uc62c \ub54c\uae4c\uc9c0 \ub2e4\uc2dc \uae30\ub2e4\ub824\uc57c \ud569\ub2c8\ub2e4 \ud83d\udd59 . \uc774 \"\uae30\ub2e4\ub9bc\" \ud83d\udd59 \uc740 \ub9c8\uc774\ud06c\ub85c\ucd08 \ub2e8\uc704\uc774\uc9c0\ub9cc, \ubaa8\ub450 \ub354\ud574\uc9c0\uba74, \uacb0\uad6d\uc5d0\ub294 \ub9e4\uc6b0 \uae34 \ub300\uae30\uc2dc\uac04\uc774 \ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc6f9 API\ub97c \uc704\ud574 \ube44\ub3d9\uae30 \u23f8\ud83d\udd00\u23ef \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ud569\ub9ac\uc801\uc785\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uc874\uc7ac\ud558\ub294 \uc720\uba85\ud55c \ud30c\uc774\uc36c \ud504\ub808\uc784\uc6cc\ud06c (Flask\uc640 Django \ub4f1)\uc740 \uc0c8\ub85c\uc6b4 \ube44\ub3d9\uae30 \uae30\ub2a5\ub4e4\uc774 \ud30c\uc774\uc36c\uc5d0 \uc874\uc7ac\ud558\uae30 \uc804\uc5d0 \ub9cc\ub4e4\uc5b4\uc84c\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c, \uadf8\ub4e4\uc758 \ubc30\ud3ec \ubc29\uc2dd\uc740 \ubcd1\ub82c \uc2e4\ud589\uacfc \uc0c8\ub85c\uc6b4 \uae30\ub2a5\ub9cc\ud07c \uac15\ub825\ud558\uc9c0\ub294 \uc54a\uc740 \uc608\uc804 \ubc84\uc804\uc758 \ube44\ub3d9\uae30 \uc2e4\ud589\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \ube44\ub3d9\uae30 \uc6f9 \ud30c\uc774\uc36c(ASGI)\uc5d0 \ub300\ud55c \uc8fc\uc694 \uba85\uc138\uac00 \uc6f9\uc18c\ucf13\uc744 \uc9c0\uc6d0\ud558\uae30 \uc704\ud574 Django\uc5d0\uc11c \uac1c\ubc1c \ub418\uc5c8\uc74c\uc5d0\ub3c4 \uadf8\ub807\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc885\ub958\uc758 \ube44\ub3d9\uae30\uc131\uc740 (NodeJS\ub294 \ubcd1\ub82c\uc801\uc774\uc9c0 \uc54a\uc74c\uc5d0\ub3c4) NodeJS\uac00 \uc0ac\ub791\ubc1b\ub294 \uc774\uc720\uc774\uace0, \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ub85c\uc11c\uc758 Go\uc758 \uac15\uc810\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 FastAPI \ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \ub3d9\uc77c\ud55c \uc131\ub2a5\uc744 \ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \ubcd1\ub82c\uc131\uacfc \ube44\ub3d9\uae30\uc131\uc744 \ub3d9\uc2dc\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0, \ub300\ubd80\ubd84\uc758 \ud14c\uc2a4\ud2b8\uac00 \uc644\ub8cc\ub41c NodeJS \ud504\ub808\uc784\uc6cc\ud06c\ubcf4\ub2e4 \ub354 \ub192\uc740 \uc131\ub2a5\uc744 \uc5bb\uace0 C\uc5d0 \ub354 \uac00\uae4c\uc6b4 \ucef4\ud30c\uc77c \uc5b8\uc5b4\uc778 Go\uc640 \ub3d9\ub4f1\ud55c \uc131\ub2a5\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\ubaa8\ub450 Starlette \ub355\ubd84\uc785\ub2c8\ub2e4) . \ub3d9\uc2dc\uc131\uc774 \ubcd1\ub82c\uc131\ubcf4\ub2e4 \ub354 \ub098\uc740\uac00? \u00b6 \uadf8\ub807\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4! \uadf8\uac83\uc774 \uc774\uc57c\uae30\uc758 \uad50\ud6c8\uc740 \uc544\ub2d9\ub2c8\ub2e4. \ub3d9\uc2dc\uc131\uc740 \ubcd1\ub82c\uc131\uacfc \ub2e4\ub985\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uadf8\uac83\uc740 \ub9ce\uc740 \ub300\uae30\ub97c \ud544\uc694\ub85c\ud558\ub294 \ud2b9\uc815\ud55c \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c\ub294 \ub354 \ub0ab\uc2b5\ub2c8\ub2e4. \uc774\ub85c \uc778\ud574, \uc6f9 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 \uac1c\ubc1c\uc5d0\uc11c \ub3d9\uc2dc\uc131\uc774 \ubcd1\ub82c\uc131\ubcf4\ub2e4 \uc77c\ubc18\uc801\uc73c\ub85c \ud6e8\uc52c \ub0ab\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ubaa8\ub4e0 \uacbd\uc6b0\uc5d0 \uadf8\ub7f0 \uac83\uc740 \uc544\ub2d9\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uade0\ud615\uc744 \ub9de\ucd94\uae30 \uc704\ud574, \ub2e4\uc74c\uc758 \uc9e7\uc740 \uc774\uc57c\uae30\ub97c \uc0c1\uc0c1\ud574\ubcf4\uc2ed\uc2dc\uc624: \ub2f9\uc2e0\uc740 \ud06c\uace0, \ub354\ub7ec\uc6b4 \uc9d1\uc744 \uccad\uc18c\ud574\uc57c\ud569\ub2c8\ub2e4. \ub124, \uc774\uac8c \uc804\ubd80\uc785\ub2c8\ub2e4 . \uc5b4\ub514\uc5d0\ub3c4 \ub300\uae30 \ud83d\udd59 \ub294 \uc5c6\uace0, \uc9d1\uc548 \uacf3\uacf3\uc5d0\uc11c \ud574\uc57c\ud558\ub294 \ub9ce\uc740 \uc791\uc5c5\ub4e4\ub9cc \uc788\uc2b5\ub2c8\ub2e4. \ubc84\uac70 \uc608\uc2dc\ucc98\ub7fc \ucc98\uc74c\uc5d0\ub294 \uac70\uc2e4, \uadf8 \ub2e4\uc74c\uc740 \ubd80\uc5cc\uacfc \uac19\uc740 \uc2dd\uc73c\ub85c \uc21c\uc11c\ub97c \uc815\ud560 \uc218\ub3c4 \uc788\uc73c\ub098, \ubb34\uc5c7\ub3c4 \uae30\ub2e4\ub9ac\uc9c0 \ud83d\udd59 \uc54a\uace0 \uacc4\uc18d\ud574\uc11c \uccad\uc18c \uc791\uc5c5\ub9cc \uc218\ud589\ud558\uae30 \ub54c\ubb38\uc5d0, \uc21c\uc11c\ub294 \uc544\ubb34\ub7f0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc21c\uc11c\uac00 \uc788\ub4e0 \uc5c6\ub4e0 \ub3d9\uc77c\ud55c \uc2dc\uac04\uc774 \uc18c\uc694\ub420 \uac83\uc774\uace0(\ub3d9\uc2dc\uc131) \ub3d9\uc77c\ud55c \uc591\uc758 \uc791\uc5c5\uc744 \ud558\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774 \uacbd\uc6b0\uc5d0\uc11c, 8\uba85\uc758 \uc804(\u524d)-\uc810\uc6d0/\uc694\ub9ac\uc0ac\uc774\uba74\uc11c-\ud604(\u73fe)-\uccad\uc18c\ubd80 \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73 \ub97c \uace0\uc6a9\ud560 \uc218 \uc788\uace0, \uadf8\ub4e4 \uac01\uc790(\uadf8\ub9ac\uace0 \ub2f9\uc2e0)\uac00 \uc9d1\uc758 \ud55c \ubd80\ubd84\uc529 \ub9e1\uc544 \uccad\uc18c\ub97c \ud55c\ub2e4\uba74, \ub2f9\uc2e0\uc740 \ubcd1\ub82c\uc801 \uc73c\ub85c \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uc218 \uc788\uace0, \uc870\uae08\uc758 \ub3c4\uc6c0\uc774 \uc788\ub2e4\uba74, \ud6e8\uc52c \ub354 \ube68\ub9ac \ub05d\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c, (\ub2f9\uc2e0\uc744 \ud3ec\ud568\ud55c) \uac01\uac01\uc758 \uccad\uc18c\ubd80\ub4e4\uc740 \ud504\ub85c\uc138\uc11c\uac00 \ub420 \uac83\uc774\uace0, \uac01\uc790\uc758 \uc5ed\ud560\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \uc2e4\ud589 \uc2dc\uac04\uc758 \ub300\ubd80\ubd84\uc774 \ub300\uae30\uac00 \uc544\ub2cc \uc2e4\uc81c \uc791\uc5c5\uc5d0 \uc18c\uc694\ub418\uace0, \ucef4\ud4e8\ud130\uc5d0\uc11c \uc791\uc5c5\uc740 CPU \uc5d0\uc11c \uc774\ub8e8\uc5b4\uc9c0\ubbc0\ub85c, \uc774\ub7ec\ud55c \ubb38\uc81c\ub97c \"CPU\uc5d0 \ubb36\uc600\"\ub2e4\uace0 \ud569\ub2c8\ub2e4. CPU\uc5d0 \ubb36\uc778 \uc5f0\uc0b0\uc5d0 \uad00\ud55c \ud754\ud55c \uc608\uc2dc\ub294 \ubcf5\uc7a1\ud55c \uc218\ud559 \ucc98\ub9ac\ub97c \ud544\uc694\ub85c \ud558\ub294 \uacbd\uc6b0\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4: \uc624\ub514\uc624 \ub610\ub294 \uc774\ubbf8\uc9c0 \ucc98\ub9ac. \ucef4\ud4e8\ud130 \ube44\uc804 : \ud558\ub098\uc758 \uc774\ubbf8\uc9c0\ub294 \uc218\ubc31\uac1c\uc758 \ud53d\uc140\ub85c \uad6c\uc131\ub418\uc5b4\uc788\uace0, \uac01 \ud53d\uc140\uc740 3\uac1c\uc758 \uac12 / \uc0c9\uc744 \uac16\uace0 \uc788\uc73c\uba70, \uc77c\ubc18\uc801\uc73c\ub85c \ud574\ub2f9 \ud53d\uc140\ub4e4\uc5d0 \ub300\ud574 \ub3d9\uc2dc\uc5d0 \ubb34\uc5b8\uac00\ub97c \uacc4\uc0b0\ud574\uc57c\ud558\ub294 \ucc98\ub9ac. \uba38\uc2e0\ub7ec\ub2dd : \uc77c\ubc18\uc801\uc73c\ub85c \ub9ce\uc740 \"\ud589\ub82c\"\uacfc \"\ubca1\ud130\" \uacf1\uc148\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \uac70\ub300\ud55c \uc2a4\ud504\ub808\ub4dc \uc2dc\ud2b8\uc5d0 \uc218\ub4e4\uc774 \uc788\uace0 \uadf8 \uc218\ub4e4\uc744 \ub3d9\uc2dc\uc5d0 \uacf1\ud574\uc57c \ud55c\ub2e4\uace0 \uc0dd\uac01\ud574\ubcf4\uc2ed\uc2dc\uc624. \ub525\ub7ec\ub2dd : \uba38\uc2e0\ub7ec\ub2dd\uc758 \ud558\uc704\uc601\uc5ed\uc73c\ub85c, \ub3d9\uc77c\ud55c \uc608\uc2dc\uac00 \uc801\uc6a9\ub429\ub2c8\ub2e4. \ub2e8\uc9c0 \uc774 \uacbd\uc6b0\uc5d0\ub294 \ud558\ub098\uc758 \uc2a4\ud504\ub808\ub4dc \uc2dc\ud2b8\uc5d0 \uacf1\ud574\uc57c\ud560 \uc218\ub4e4\uc774 \uc788\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \uac70\ub300\ud55c \uc138\ud2b8\uc758 \uc2a4\ud504\ub808\ub4dc \uc2dc\ud2b8\ub4e4\uc774 \uc788\uace0, \ub9ce\uc740 \uacbd\uc6b0\uc5d0, \uc774 \ubaa8\ub378\ub4e4\uc744 \ub9cc\ub4e4\uace0 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ud2b9\uc218\ud55c \ud504\ub85c\uc138\uc11c\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub3d9\uc2dc\uc131 + \ubcd1\ub82c\uc131: \uc6f9 + \uba38\uc2e0\ub7ec\ub2dd \u00b6 FastAPI \ub97c \uc0ac\uc6a9\ud558\uba74 \uc6f9 \uac1c\ubc1c\uc5d0\uc11c\ub294 \ub9e4\uc6b0 \ud754\ud55c \ub3d9\uc2dc\uc131\uc758 \uc774\uc810\uc744 (NodeJS\uc758 \uc8fc\ub41c \ub9e4\ub825\ub9cc\ud07c) \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubfd0\ub9cc \uc544\ub2c8\ub77c \uba38\uc2e0\ub7ec\ub2dd \uc2dc\uc2a4\ud15c\uacfc \uac19\uc774 CPU\uc5d0 \ubb36\uc778 \uc791\uc5c5\uc744 \uc704\ud574 \ubcd1\ub82c\uc131\uacfc \uba40\ud2f0\ud504\ub85c\uc138\uc2f1(\ub2e4\uc218\uc758 \ud504\ub85c\uc138\uc2a4\ub97c \ubcd1\ub82c\uc801\uc73c\ub85c \ub3d9\uc791\uc2dc\ud0a4\ub294 \uac83)\uc744 \uc774\uc6a9\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc774 \ub370\uc774\ud130 \uc0ac\uc774\uc5b8\uc2a4 , \uba38\uc2e0\ub7ec\ub2dd\uacfc \ud2b9\ud788 \ub525\ub7ec\ub2dd\uc5d0 \uc758 \uc8fc\ub41c \uc5b8\uc5b4\ub77c\ub294 \uac04\ub2e8\ud55c \uc0ac\uc2e4\uc5d0 \ub354\ud574\uc11c, \uc774\uac83\uc740 FastAPI\ub97c \ub370\uc774\ud130 \uc0ac\uc774\uc5b8\uc2a4 / \uba38\uc2e0\ub7ec\ub2dd \uc6f9 API\uc640 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 (\ub2e4\ub978 \uac83\ub4e4\ubcf4\ub2e4) \uc88b\uc740 \uc120\ud0dd\uc9c0\uac00 \ub418\uac8c \ud569\ub2c8\ub2e4. \ubc30\ud3ec\uc2dc \ubcd1\ub82c\uc744 \uc5b4\ub5bb\uac8c \uac00\ub2a5\ud558\uac8c \ud558\ub294\uc9c0 \uc54c\uace0\uc2f6\ub2e4\uba74, \ubc30\ud3ec \ubb38\uc11c\ub97c \ucc38\uace0\ud558\uc2ed\uc2dc\uc624. async \uc640 await \u00b6 \ucd5c\uc2e0 \ud30c\uc774\uc36c \ubc84\uc804\uc5d0\ub294 \ube44\ub3d9\uae30 \ucf54\ub4dc\ub97c \uc815\uc758\ud558\ub294 \ub9e4\uc6b0 \uc9c1\uad00\uc801\uc778 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uc774\uac83\uc744 \ud3c9\ubc94\ud55c \"\uc21c\ucc28\uc801\" \ucf54\ub4dc\ub85c \ubcf4\uc774\uac8c \ud558\uace0, \uc801\uc808\ud55c \uc21c\uac04\uc5d0 \ub2f9\uc2e0\uc744 \uc704\ud574 \"\ub300\uae30\"\ud569\ub2c8\ub2e4. \uc5f0\uc0b0\uc774 \uacb0\uacfc\ub97c \uc804\ub2ec\ud558\uae30 \uc804\uc5d0 \ub300\uae30\ub97c \ud574\uc57c\ud558\uace0 \uc0c8\ub85c\uc6b4 \ud30c\uc774\uc36c \uae30\ub2a5\ub4e4\uc744 \uc9c0\uc6d0\ud55c\ub2e4\uba74, \uc774\ub807\uac8c \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: burgers = await get_burgers ( 2 ) \uc5ec\uae30\uc11c \ud575\uc2ec\uc740 await \uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \ud30c\uc774\uc36c\uc5d0\uac8c burgers \uacb0\uacfc\ub97c \uc800\uc7a5\ud558\uae30 \uc774\uc804\uc5d0 get_burgers(2) \uc758 \uc791\uc5c5\uc774 \uc644\ub8cc\ub418\uae30\ub97c \ud83d\udd59 \uae30\ub2e4\ub9ac\ub77c\uace0 \u23f8 \ub9d0\ud569\ub2c8\ub2e4. \uc774\ub85c \uc778\ud574, \ud30c\uc774\uc36c\uc740 \uadf8\ub3d9\uc548 (\ub2e4\ub978 \uc694\uccad\uc744 \ubc1b\ub294 \uac83\uacfc \uac19\uc740) \ub2e4\ub978 \uc791\uc5c5\uc744 \uc218\ud589\ud574\ub3c4 \ub41c\ub2e4\ub294 \uac83\uc744 \ud83d\udd00 \u23ef \uc54c\uac8c\ub420 \uac83\uc785\ub2c8\ub2e4. await \uac00 \ub3d9\uc791\ud558\uae30 \uc704\ud574, \uc774\uac83\uc740 \ube44\ub3d9\uae30\ub97c \uc9c0\uc6d0\ud558\ub294 \ud568\uc218 \ub0b4\ubd80\uc5d0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574\uc11c \ud568\uc218\ub97c async def \ub97c \uc0ac\uc6a9\ud574 \uc815\uc758\ud558\uae30\ub9cc \ud558\uba74 \ub429\ub2c8\ub2e4: async def get_burgers ( number : int ): # Do some asynchronous stuff to create the burgers return burgers ... def \ub97c \uc0ac\uc6a9\ud558\ub294 \ub300\uc2e0: # This is not asynchronous def get_sequential_burgers ( number : int ): # Do some sequential stuff to create the burgers return burgers async def \ub97c \uc0ac\uc6a9\ud558\uba74, \ud30c\uc774\uc36c\uc740 \ud574\ub2f9 \ud568\uc218 \ub0b4\uc5d0\uc11c await \ud45c\ud604\uc5d0 \uc8fc\uc758\ud574\uc57c\ud55c\ub2e4\ub294 \uc0ac\uc2e4\uacfc, \ud574\ub2f9 \ud568\uc218\uc758 \uc2e4\ud589\uc744 \"\uc77c\uc2dc\uc815\uc9c0\"\u23f8\ud558\uace0 \ub2e4\uc2dc \ub3cc\uc544\uc624\uae30 \uc804\uae4c\uc9c0 \ub2e4\ub978 \uc791\uc5c5\uc744 \uc218\ud589\ud83d\udd00\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c\uac8c\ub429\ub2c8\ub2e4. async def f \ud568\uc218\ub97c \ud638\ucd9c\ud558\uace0\uc790 \ud560 \ub54c, \"\ub300\uae30\"\ud574\uc57c\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc544\ub798\ub294 \ub3d9\uc791\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. # This won't work, because get_burgers was defined with: async def burgers = get_burgers ( 2 ) \ub530\ub77c\uc11c, await f\ub97c \uc0ac\uc6a9\ud574\uc11c \ud638\ucd9c\ud560 \uc218 \uc788\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 async def \ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub97c \uc0dd\uc131\ud574\uc57c \ud569\ub2c8\ub2e4: @app . get ( '/burgers' ) async def read_burgers (): burgers = await get_burgers ( 2 ) return burgers \ub354 \uc138\ubd80\uc801\uc778 \uae30\uc220\uc801 \uc0ac\ud56d \u00b6 await \uac00 async def \ub97c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\uc774 \uac00\ub2a5\ud558\ub2e4\ub294 \uac83\uc744 \ub208\uce58\ucc44\uc168\uc744 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub3d9\uc2dc\uc5d0, async def \ub85c \uc815\uc758\ub41c \ud568\uc218\ub4e4\uc740 \"\ub300\uae30\"\ub418\uc5b4\uc57c\ub9cc \ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, async def \ub97c \uc0ac\uc6a9\ud55c \ud568\uc218\ub4e4\uc740 \uc5ed\uc2dc async def \ub97c \uc0ac\uc6a9\ud55c \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c\ub9cc \ud638\ucd9c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \ub2ed\uc774 \uba3c\uc800\ub0d0, \ub2ec\uac40\uc774 \uba3c\uc800\ub0d0, \uccab async \ud568\uc218\ub97c \uc5b4\ub5bb\uac8c \ud638\ucd9c\ud560 \uc218 \uc788\uaca0\uc2b5\ub2c8\uae4c? FastAPI \ub97c \uc0ac\uc6a9\ud574 \uc791\uc5c5\ud55c\ub2e4\uba74 \uc774\uac83\uc744 \uac71\uc815\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 \uadf8 \"\uccab\" \ud568\uc218\ub294 \ub2f9\uc2e0\uc758 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uac00 \ub420 \uac83\uc774\uace0, FastAPI\ub294 \uc5b4\ub5bb\uac8c \uc62c\ubc14\ub974\uac8c \ucc98\ub9ac\ud560\uc9c0 \uc54c\uace0\uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc FastAPI\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 async / await \ub97c \uc0ac\uc6a9\ud558\uace0 \uc2f6\ub2e4\uba74, \uc774 \uc5ed\uc2dc \uac00\ub2a5\ud569\ub2c8\ub2e4. \ub2f9\uc2e0\ub9cc\uc758 \ube44\ub3d9\uae30 \ucf54\ub4dc \uc791\uc131\ud558\uae30 \u00b6 Starlette(\uadf8\ub9ac\uace0 FastAPI)\ub294 AnyIO \ub97c \uae30\ubc18\uc73c\ub85c \ud558\uace0\uc788\uace0, \ub530\ub77c\uc11c \ud30c\uc774\uc36c \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778 asyncio \ubc0f Trio \uc640 \ud638\ud658\ub429\ub2c8\ub2e4. \ud2b9\ud788, \ucf54\ub4dc\uc5d0\uc11c \uace0\uae09 \ud328\ud134\uc774 \ud544\uc694\ud55c \uace0\uae09 \ub3d9\uc2dc\uc131\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \uc9c1\uc811\uc801\uc73c\ub85c AnyIO \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub354\ub77c\ub3c4, \ub192\uc740 \ud638\ud658\uc131 \ubc0f AnyIO \uc758 \uc774\uc810(\uc608: \uad6c\uc870\ud654\ub41c \ub3d9\uc2dc\uc131 )\uc744 \ucde8\ud558\uae30 \uc704\ud574 AnyIO \ub97c \uc0ac\uc6a9\ud574 \ube44\ub3d9\uae30 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ube44\ub3d9\uae30 \ucf54\ub4dc\uc758 \ub2e4\ub978 \ud615\ud0dc \u00b6 \ud30c\uc774\uc36c\uc5d0\uc11c async \uc640 await \ub97c \uc0ac\uc6a9\ud558\uac8c \ub41c \uac83\uc740 \ube44\uad50\uc801 \ucd5c\uadfc\uc758 \uc77c\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub85c \uc778\ud574 \ube44\ub3d9\uae30 \ucf54\ub4dc \uc791\uc5c5\uc774 \ud6e8\uc52c \uac04\ub2e8\ud574\uc84c\uc2b5\ub2c8\ub2e4. \uac19\uc740 (\ub610\ub294 \uac70\uc758 \uc720\uc0ac\ud55c) \ubb38\ubc95\uc740 \ucd5c\uc2e0 \ubc84\uc804\uc758 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8(\ube0c\ub77c\uc6b0\uc800\uc640 NodeJS)\uc5d0\ub3c4 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uc774\uc804\uc5d0, \ube44\ub3d9\uae30 \ucf54\ub4dc\ub97c \ucc98\ub9ac\ud558\ub294 \uac83\uc740 \uaf64 \ubcf5\uc7a1\ud558\uace0 \uc5b4\ub824\uc6b4 \uc77c\uc774\uc5c8\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc758 \uc608\uc804 \ubc84\uc804\uc774\ub77c\uba74, \uc2a4\ub808\ub4dc \ub610\ub294 Gevent \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ucf54\ub4dc\ub97c \uc774\ud574\ud558\uace0, \ub514\ubc84\uae45\ud558\uace0, \uc774\uc5d0 \ub300\ud574 \uc0dd\uac01\ud558\ub294\uac8c \ud6e8\uc52c \ubcf5\uc7a1\ud569\ub2c8\ub2e4. \uc608\uc804 \ubc84\uc804\uc758 NodeJS / \ube0c\ub77c\uc6b0\uc800 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\ub77c\uba74, \"\ucf5c\ubc31 \ud568\uc218\"\ub97c \uc0ac\uc6a9\ud588\uc744 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\ub85c \uc778\ud574 \ucf5c\ubc31 \uc9c0\uc625 \uc5d0 \ube60\uc9c0\uac8c \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucf54\ub8e8\ud2f4 \u00b6 \ucf54\ub8e8\ud2f4 \uc740 async def \ud568\uc218\uac00 \ubc18\ud658\ud558\ub294 \uac83\uc744 \uce6d\ud558\ub294 \ub9e4\uc6b0 \uace0\uae09\uc2a4\ub7ec\uc6b4 \uc6a9\uc5b4\uc77c \ubfd0\uc785\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc740 \uadf8\uac83\uc774 \uc2dc\uc791\ub418\uace0 \uc5b4\ub290 \uc2dc\uc810\uc5d0\uc11c \uc644\ub8cc\ub418\uc9c0\ub9cc \ub0b4\ubd80\uc5d0 await \uac00 \uc788\uc744 \ub54c\ub9c8\ub2e4 \ub0b4\ubd80\uc801\uc73c\ub85c \uc77c\uc2dc\uc815\uc9c0\u23f8\ub420 \uc218\ub3c4 \uc788\ub294 \ud568\uc218\uc640 \uc720\uc0ac\ud55c \uac83\uc774\ub77c\ub294 \uc0ac\uc2e4\uc744 \uc54c\uace0\uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 async \ubc0f await \uc640 \ud568\uaed8 \ube44\ub3d9\uae30 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub294 \uc774 \ubaa8\ub4e0 \uae30\ub2a5\ub4e4\uc740 \"\ucf54\ub8e8\ud2f4\"\uc73c\ub85c \uac04\ub2e8\ud788 \uc694\uc57d\ub429\ub2c8\ub2e4. \uc774\uac83\uc740 Go\uc758 \uc8fc\ub41c \ud575\uc2ec \uae30\ub2a5\uc778 \"\uace0\ub8e8\ud2f4\"\uc5d0 \uacac\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uacb0\ub860 \u00b6 \uc0c1\uae30 \ubb38\uc7a5\uc744 \ub2e4\uc2dc \ud55c \ubc88 \ubd05\uc2dc\ub2e4: \ucd5c\uc2e0 \ud30c\uc774\uc36c \ubc84\uc804\uc740 async \ubc0f await \ubb38\ubc95\uacfc \ud568\uaed8 \u201c\ucf54\ub8e8\ud2f4\u201d \uc774\ub77c\uace0 \ud558\ub294 \uac83\uc744 \uc0ac\uc6a9\ud558\ub294 \u201c\ube44\ub3d9\uae30 \ucf54\ub4dc\u201d \ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc774\uc81c \uc774 \ub9d0\uc744 \uc870\uae08 \ub354 \uc774\ud574\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \u2728 \uc774\uac83\uc774 (Starlette\uc744 \ud1b5\ud574) FastAPI\ub97c \uac15\ud558\uac8c \ud558\uba74\uc11c \uadf8\uac83\uc774 \uc778\uc0c1\uc801\uc778 \uc131\ub2a5\uc744 \ub0bc \uc218 \uc788\uac8c \ud569\ub2c8\ub2e4. \ub9e4\uc6b0 \uc138\ubd80\uc801\uc778 \uae30\uc220\uc801 \uc0ac\ud56d \u00b6 \uacbd\uace0 \uc774 \ubd80\ubd84\uc740 \ub118\uc5b4\uac00\ub3c4 \ub429\ub2c8\ub2e4. \uc774\uac83\ub4e4\uc740 FastAPI \uac00 \ub0b4\ubd80\uc801\uc73c\ub85c \uc5b4\ub5bb\uac8c \ub3d9\uc791\ud558\ub294\uc9c0\uc5d0 \ub300\ud55c \ub9e4\uc6b0 \uc138\ubd80\uc801\uc778 \uae30\uc220\uc0ac\ud56d\uc785\ub2c8\ub2e4. \ub9cc\uc57d \uae30\uc220\uc801 \uc9c0\uc2dd(\ucf54\ub8e8\ud2f4, \uc2a4\ub808\ub4dc, \ube14\ub85d\ud0b9 \ub4f1)\uc774 \uc788\uace0 FastAPI\uac00 \uc5b4\ub5bb\uac8c async def vs def \ub97c \ub2e4\ub8e8\ub294\uc9c0 \uad81\uae08\ud558\ub2e4\uba74, \uacc4\uc18d\ud558\uc2ed\uc2dc\uc624. \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \u00b6 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218\ub97c async def \ub300\uc2e0 \uc77c\ubc18\uc801\uc778 def \ub85c \uc120\uc5b8\ud558\ub294 \uacbd\uc6b0, (\uc11c\ubc84\ub97c \ucc28\ub2e8\ud558\ub294 \uac83\ucc98\ub7fc) \uadf8\uac83\uc744 \uc9c1\uc811 \ud638\ucd9c\ud558\ub294 \ub300\uc2e0 \ub300\uae30\uc911\uc778 \uc678\ubd80 \uc2a4\ub808\ub4dc\ud480\uc5d0\uc11c \uc2e4\ud589\ub429\ub2c8\ub2e4. \ub9cc\uc57d \uc0c1\uae30\uc5d0 \ubb18\uc0ac\ub41c\ub300\ub85c \ub3d9\uc791\ud558\uc9c0 \uc54a\ub294 \ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub7a8\uc744 \uc0ac\uc6a9\ud574\uc654\uace0 \uc57d\uac04\uc758 \uc131\ub2a5 \ud5a5\uc0c1 (\uc57d 100 \ub098\ub178\ucd08)\uc744 \uc704\ud574 def \ub97c \uc0ac\uc6a9\ud574\uc11c \uacc4\uc0b0\ub9cc\uc744 \uc704\ud55c \uc0ac\uc18c\ud55c \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub97c \uc815\uc758\ud574\uc654\ub2e4\uba74, FastAPI \ub294 \uc774\uc640\ub294 \ubc18\ub300\ub77c\ub294 \uac83\uc5d0 \uc8fc\uc758\ud558\uc2ed\uc2dc\uc624. \uc774\ub7ec\ud55c \uacbd\uc6b0\uc5d0, \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uac00 \ube14\ub85c\ud0b9 I/O \ub97c \uc218\ud589\ud558\ub294 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ud55c async def \ub97c \uc0ac\uc6a9\ud558\ub294 \ud3b8\uc774 \ub354 \ub0ab\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub450 \uacbd\uc6b0 \ubaa8\ub450, FastAPI\uac00 \ub2f9\uc2e0\uc774 \uc804\uc5d0 \uc0ac\uc6a9\ud558\ub358 \ud504\ub808\uc784\uc6cc\ud06c\ubcf4\ub2e4 \ub354 \ube60\ub97c (\ucd5c\uc18c\ud55c \ube44\uacac\ub420) \ud655\ub960\uc774 \ub192\uc2b5\ub2c8\ub2e4. \uc758\uc874\uc131 \u00b6 \uc758\uc874\uc131\uc5d0\ub3c4 \ub3d9\uc77c\ud558\uac8c \uc801\uc6a9\ub429\ub2c8\ub2e4. \uc758\uc874\uc131\uc774 async def \uac00 \uc544\ub2cc \ud45c\uc900 def \ud568\uc218\ub77c\uba74, \uc678\ubd80 \uc2a4\ub808\ub4dc\ud480\uc5d0\uc11c \uc2e4\ud589\ub429\ub2c8\ub2e4. \ud558\uc704-\uc758\uc874\uc131 \u00b6 \ud568\uc218 \uc815\uc758\uc2dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc11c\ub85c\ub97c \ud544\uc694\ub85c\ud558\ub294 \ub2e4\uc218\uc758 \uc758\uc874\uc131\uacfc \ud558\uc704-\uc758\uc874\uc131\uc744 \uac00\uc9c8 \uc218 \uc788\uace0, \uadf8 \uc911 \uc77c\ubd80\ub294 async def \ub85c, \ub2e4\ub978 \uc77c\ubd80\ub294 \uc77c\ubc18\uc801\uc778 def \ub85c \uc0dd\uc131\ub418\uc5c8\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \uc5ec\uc804\ud788 \uc798 \ub3d9\uc791\ud558\uace0, \uc77c\ubc18\uc801\uc778 def \ub85c \uc0dd\uc131\ub41c \uac83\ub4e4\uc740 \"\ub300\uae30\"\ub418\ub294 \ub300\uc2e0\uc5d0 (\uc2a4\ub808\ub4dc\ud480\ub85c\ubd80\ud130) \uc678\ubd80 \uc2a4\ub808\ub4dc\uc5d0\uc11c \ud638\ucd9c\ub429\ub2c8\ub2e4. \ub2e4\ub978 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218 \u00b6 \uc9c1\uc811 \ud638\ucd9c\ub418\ub294 \ub2e4\ub978 \ubaa8\ub4e0 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\ub294 \uc77c\ubc18\uc801\uc778 def \ub098 async def \ub85c \uc0dd\uc131\ub420 \uc218 \uc788\uace0 FastAPI\ub294 \uc774\ub97c \ud638\ucd9c\ud558\ub294 \ubc29\uc2dd\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 FastAPI\uac00 \ub2f9\uc2e0\uc744 \uc704\ud574 \ud638\ucd9c\ud558\ub294 \ud568\uc218\uc640\ub294 \ubc18\ub300\uc785\ub2c8\ub2e4: \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc640 \uc758\uc874\uc131 \ub9cc\uc57d \ub2f9\uc2e0\uc758 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\uac00 def \ub97c \uc0ac\uc6a9\ud55c \uc77c\ubc18\uc801\uc778 \ud568\uc218\ub77c\uba74, \uc2a4\ub808\ub4dc\ud480\uc5d0\uc11c\uac00 \uc544\ub2c8\ub77c \uc9c1\uc811 \ud638\ucd9c(\ub2f9\uc2e0\uc774 \ucf54\ub4dc\uc5d0 \uc791\uc131\ud55c \ub300\ub85c)\ub420 \uac83\uc774\uace0, async def \ub85c \uc0dd\uc131\ub41c \ud568\uc218\ub77c\uba74 \ucf54\ub4dc\uc5d0\uc11c \ud638\ucd9c\ud560 \ub54c \uadf8 \ud568\uc218\ub97c await \ud574\uc57c \ud569\ub2c8\ub2e4. \ub2e4\uc2dc \ub9d0\ud558\uc9c0\ub9cc, \uc774\uac83\uc740 \ub2f9\uc2e0\uc774 \uc774\uac83\uc5d0 \ub300\ud574 \ucc3e\uace0\uc788\ub358 \uacbd\uc6b0\uc5d0 \ud55c\ud574 \uc720\uc6a9\ud560 \ub9e4\uc6b0 \uc138\ubd80\uc801\uc778 \uae30\uc220\uc0ac\ud56d\uc785\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0, \uc0c1\uae30\uc758 \uac00\uc774\ub4dc\ub77c\uc778\ub9cc\uc73c\ub85c\ub3c4 \ucda9\ubd84\ud560 \uac83\uc785\ub2c8\ub2e4: \ubc14\uc058\uc2e0 \uacbd\uc6b0 .","title":"\ub3d9\uc2dc\uc131\uacfc async / await"},{"location":"async/#async-await","text":"\uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc5d0\uc11c\uc758 async def \ubb38\ubc95\uc5d0 \ub300\ud55c \uc138\ubd80\uc0ac\ud56d\uacfc \ube44\ub3d9\uae30 \ucf54\ub4dc, \ub3d9\uc2dc\uc131 \ubc0f \ubcd1\ub82c\uc131\uc5d0 \ub300\ud55c \ubc30\uacbd","title":"\ub3d9\uc2dc\uc131\uacfc async / await"},{"location":"async/#_1","text":"\uc694\uc57d \ub2e4\uc74c\uacfc \uac19\uc774 await \ub97c \uc0ac\uc6a9\ud574 \ud638\ucd9c\ud558\ub294 \uc81c3\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0: results = await some_library () \ub2e4\uc74c\ucc98\ub7fc \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub97c async def \ub97c \uc0ac\uc6a9\ud574 \uc120\uc5b8\ud558\uc2ed\uc2dc\uc624: @app . get ( '/' ) async def read_results (): results = await some_library () return results \ucc38\uace0 async def \ub85c \uc0dd\uc131\ub41c \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c\ub9cc await \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130\ubca0\uc774\uc2a4, API, \ud30c\uc77c\uc2dc\uc2a4\ud15c \ub4f1\uacfc \uc758\uc0ac\uc18c\ud1b5\ud558\ub294 \uc81c3\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uace0, \uadf8\uac83\uc774 await \ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0(\ud604\uc7ac \uac70\uc758 \ubaa8\ub4e0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uadf8\ub7ec\ud569\ub2c8\ub2e4), \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub97c \uc77c\ubc18\uc801\uc778 def \ub97c \uc0ac\uc6a9\ud574 \uc120\uc5b8\ud558\uc2ed\uc2dc\uc624: @app . get ( '/' ) def results (): results = some_library () return results \ub9cc\uc57d \ub2f9\uc2e0\uc758 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc774 (\uc5b4\uc9f8\uc11c\uc778\uc9c0) \ub2e4\ub978 \ubb34\uc5c7\uacfc \uc758\uc0ac\uc18c\ud1b5\ud558\uace0 \uadf8\uac83\uc774 \uc751\ub2f5\ud558\uae30\ub97c \uae30\ub2e4\ub9b4 \ud544\uc694\uac00 \uc5c6\ub2e4\uba74 async def \ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. \ubaa8\ub974\uaca0\ub2e4\uba74, \uadf8\ub0e5 def \ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. \ucc38\uace0 : \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc5d0\uc11c \ud544\uc694\ud55c\ub9cc\ud07c def \uc640 async def \ub97c \ud63c\uc6a9\ud560 \uc218 \uc788\uace0, \uac00\uc7a5 \uc54c\ub9de\uc740 \uac83\uc744 \uc120\ud0dd\ud574\uc11c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI\uac00 \uc790\uccb4\uc801\uc73c\ub85c \uc54c\ub9de\uc740 \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uac83\uc785\ub2c8\ub2e4. \uc5b4\ucc0c\ub418\uc5c8\ub4e0, \uc0c1\uae30 \uc5b4\ub5a0\ud55c \uacbd\uc6b0\ub77c\ub3c4, FastAPI\ub294 \uc5ec\uc804\ud788 \ube44\ub3d9\uae30\uc801\uc73c\ub85c \uc791\ub3d9\ud558\uace0 \ub9e4\uc6b0 \ube60\ub985\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc0c1\uae30 \uc791\uc5c5\uc744 \uc218\ud589\ud568\uc73c\ub85c\uc368 \uc5b4\ub290 \uc815\ub3c4\uc758 \uc131\ub2a5 \ucd5c\uc801\ud654\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4.","title":"\ubc14\uc058\uc2e0 \uacbd\uc6b0"},{"location":"async/#_2","text":"\ucd5c\uc2e0 \ud30c\uc774\uc36c \ubc84\uc804\uc740 async \uc640 await \ubb38\ubc95\uacfc \ud568\uaed8 \u201c\ucf54\ub8e8\ud2f4\u201d \uc774\ub77c\uace0 \ud558\ub294 \uac83\uc744 \uc0ac\uc6a9\ud558\ub294 \u201c\ube44\ub3d9\uae30 \ucf54\ub4dc\u201d \ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc544\ub798 \uc139\uc158\ub4e4\uc5d0\uc11c \ud574\ub2f9 \ubb38\uc7a5\uc744 \ubd80\ubd84\ubcc4\ub85c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4: \ube44\ub3d9\uae30 \ucf54\ub4dc async \uc640 await \ucf54\ub8e8\ud2f4","title":"\uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d"},{"location":"async/#_3","text":"\ube44\ub3d9\uae30 \ucf54\ub4dc\ub780 \uc5b8\uc5b4 \ud83d\udcac \uac00 \ucf54\ub4dc\uc758 \uc5b4\ub290 \ud55c \ubd80\ubd84\uc5d0\uc11c, \ucef4\ud4e8\ud130 / \ud504\ub85c\uadf8\ub7a8\ud83e\udd16\uc5d0\uac8c \ub2e4\ub978 \ubb34\uc5b8\uac00 \uac00 \uc5b4\ub518\uac00\uc5d0\uc11c \ub05d\ub0a0 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub824\uc57c\ud55c\ub2e4\uace0 \ub9d0\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \ub2e4\ub978 \ubb34\uc5b8\uac00 \uac00 \u201c\ub290\ub9b0-\ud30c\uc77c\" \ud83d\udcdd \uc774\ub77c\uace0 \ubd88\ub9b0\ub2e4\uace0 \uac00\uc815\ud574\ubd05\uc2dc\ub2e4. \ub530\ub77c\uc11c \u201c\ub290\ub9b0-\ud30c\uc77c\u201d \ud83d\udcdd\uc774 \ub05d\ub0a0\ub54c\uae4c\uc9c0 \ucef4\ud4e8\ud130\ub294 \ub2e4\ub978 \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8 \ub2e4\uc74c \ucef4\ud4e8\ud130 / \ud504\ub85c\uadf8\ub7a8 \ud83e\udd16 \uc740 \ub2e4\uc2dc \uae30\ub2e4\ub9ac\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \uae30\ud68c\uac00 \uc788\uc744 \ub54c\ub9c8\ub2e4 \ub2e4\uc2dc \ub3cc\uc544\uc624\uac70\ub098, \ud639\uc740 \ub2f9\uc2dc\uc5d0 \uc218\ud589\ud574\uc57c\ud558\ub294 \uc791\uc5c5\ub4e4\uc774 \uc644\ub8cc\ub420 \ub54c\ub9c8\ub2e4 \ub2e4\uc2dc \ub3cc\uc544\uc635\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uadf8\uac83 \ud83e\udd16 \uc740 \uae30\ub2e4\ub9ac\uace0 \uc788\ub358 \uc791\uc5c5 \uc911 \uc5b4\ub290 \uac83\uc774 \uc774\ubbf8 \uc644\ub8cc\ub418\uc5c8\ub294\uc9c0, \uadf8\uac83 \ud83e\udd16 \uc774 \ud574\uc57c\ud558\ub294 \ubaa8\ub4e0 \uc791\uc5c5\uc744 \uc218\ud589\ud558\uba74\uc11c \ud655\uc778\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uc73c\ub85c, \uadf8\uac83 \ud83e\udd16 \uc740 \uc644\ub8cc\ud560 \uccab\ubc88\uc9f8 \uc791\uc5c5\uc5d0 \ucc29\uc218\ud558\uace0(\uc6b0\ub9ac\uc758 \"\ub290\ub9b0-\ud30c\uc77c\" \ud83d\udcdd \uc774\ub77c\uace0 \uac00\uc815\ud569\uc2dc\ub2e4) \uadf8\uc5d0 \ub300\ud574 \uc218\ud589\ud574\uc57c\ud558\ub294 \uc791\uc5c5\uc744 \uacc4\uc18d\ud569\ub2c8\ub2e4. \"\ub2e4\ub978 \ubb34\uc5b8\uac00\ub97c \uae30\ub2e4\ub9ac\ub294 \uac83\"\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ube44\uad50\uc801 \"\ub290\ub9b0\" (\ud504\ub85c\uc138\uc11c\uc640 RAM \uba54\ubaa8\ub9ac \uc18d\ub3c4\uc5d0 \ube44\ud574) I/O \uc791\uc5c5\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uc758 \uac83\ub4e4\uc744 \uae30\ub2e4\ub9ac\ub294 \uac83\uc785\ub2c8\ub2e4: \ub124\ud2b8\uc6cc\ud06c\ub97c \ud1b5\ud574 \ud074\ub77c\uc774\uc5b8\ud2b8\ub85c\ubd80\ud130 \uc804\uc1a1\ub418\ub294 \ub370\uc774\ud130 \ub124\ud2b8\uc6cc\ud06c\ub97c \ud1b5\ud574 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc218\uc2e0\ud560, \ub2f9\uc2e0\uc758 \ud504\ub85c\uadf8\ub7a8\uc73c\ub85c\ubd80\ud130 \uc804\uc1a1\ub418\ub294 \ub370\uc774\ud130 \uc2dc\uc2a4\ud15c\uc774 \uc77d\uace0 \ud504\ub85c\uadf8\ub7a8\uc5d0 \uc804\ub2ec\ud560 \ub514\uc2a4\ud06c \ub0b4\uc758 \ud30c\uc77c \ub0b4\uc6a9 \ub2f9\uc2e0\uc758 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2dc\uc2a4\ud15c\uc5d0 \uc804\ub2ec\ud558\ub294, \ub514\uc2a4\ud06c\uc5d0 \uc791\uc131\ub420 \ub0b4\uc6a9 \uc6d0\uaca9 API \uc791\uc5c5 \uc644\ub8cc\ub420 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc791\uc5c5 \uacb0\uacfc\ub97c \ubc18\ud658\ud558\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ucffc\ub9ac \uae30\ud0c0 \uc218\ud589 \uc2dc\uac04\uc758 \ub300\ubd80\ubd84\uc774 I/O \uc791\uc5c5\uc744 \uae30\ub2e4\ub9ac\ub294\ub370\uc5d0 \uc18c\uc694\ub418\uae30 \ub54c\ubb38\uc5d0, \"I/O\uc5d0 \ubb36\uc778\" \uc791\uc5c5\uc774\ub77c\uace0 \ubd88\ub9bd\ub2c8\ub2e4. \uc774\uac83\uc740 \"\ube44\ub3d9\uae30\"\ub77c\uace0 \ubd88\ub9ac\ub294\ub370 \ucef4\ud4e8\ud130 / \ud504\ub85c\uadf8\ub7a8\uc774 \uc791\uc5c5 \uacb0\uacfc\ub97c \uac00\uc9c0\uace0 \uc77c\uc744 \uc218\ud589\ud560 \uc218 \uc788\ub3c4\ub85d, \ub290\ub9b0 \uc791\uc5c5\uc5d0 \"\ub3d9\uae30\ud654\"\ub418\uc5b4 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\uc73c\uba74\uc11c \uc791\uc5c5\uc774 \uc644\ub8cc\ub420 \uc815\ud655\ud55c \uc2dc\uc810\ub9cc\uc744 \uae30\ub2e4\ub9b4 \ud544\uc694\uac00 \uc5c6\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc774 \ub300\uc2e0\uc5d0, \"\ube44\ub3d9\uae30\" \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294, \uc791\uc5c5\uc740 \uc77c\ub2e8 \uc644\ub8cc\ub418\uba74, \ucef4\ud4e8\ud130 / \ud504\ub85c\uadf8\ub7a8\uc774 \uc218\ud589\ud558\uace0 \uc788\ub294 \uc77c\uc744 \uc644\ub8cc\ud558\uace0 \uc774\ud6c4 \ub2e4\uc2dc \ub3cc\uc544\uc640\uc11c \uadf8\uac83\uc758 \uacb0\uacfc\ub97c \ubc1b\uc544 \uc774\ub97c \uc0ac\uc6a9\ud574 \uc791\uc5c5\uc744 \uc9c0\uc18d\ud560 \ub54c\uae4c\uc9c0 \uc7a0\uc2dc (\uba87 \ub9c8\uc774\ud06c\ub85c\ucd08) \ub300\uae30\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \"\ub3d9\uae30\"(\"\ube44\ub3d9\uae30\"\uc758 \ubc18\ub300)\ub294 \ucef4\ud4e8\ud130 / \ud504\ub85c\uadf8\ub7a8\uc774 \uc0c1\uc774\ud55c \uc791\uc5c5\ub4e4\uac04 \uc804\ud658\uc744 \ud558\uae30 \uc804\uc5d0 \uadf8\uac83\uc774 \ub300\uae30\ub97c \ub3d9\ubc18\ud558\uac8c \ub420\uc9c0\ub77c\ub3c4 \ubaa8\ub4e0 \uc21c\uc11c\ub97c \ub530\ub974\uae30 \ub54c\ubb38\uc5d0 \"\uc21c\ucc28\"\ub77c\ub294 \uc6a9\uc5b4\ub85c\ub3c4 \ud754\ud788 \ubd88\ub9bd\ub2c8\ub2e4.","title":"\ube44\ub3d9\uae30 \ucf54\ub4dc"},{"location":"async/#_4","text":"\uc704\uc5d0\uc11c \uc124\uba85\ud55c \ube44\ub3d9\uae30 \ucf54\ub4dc\uc5d0 \ub300\ud55c \uac1c\ub150\uc740 \uc885\uc885 \"\ub3d9\uc2dc\uc131\" \uc774\ub77c\uace0\ub3c4 \ubd88\ub9bd\ub2c8\ub2e4. \uc774\uac83\uc740 \"\ubcd1\ub82c\uc131\" \uacfc\ub294 \ub2e4\ub985\ub2c8\ub2e4. \ub3d9\uc2dc\uc131 \uacfc \ubcd1\ub82c\uc131 \uc740 \ubaa8\ub450 \"\ub3d9\uc2dc\uc5d0 \uc77c\uc5b4\ub098\ub294 \uc11c\ub85c \ub2e4\ub978 \uc77c\ub4e4\"\uacfc \uad00\ub828\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub3d9\uc2dc\uc131 \uacfc \ubcd1\ub82c\uc131 \uc758 \uc138\ubd80\uc801\uc778 \uac1c\ub150\uc5d0\ub294 \uaf64 \ucc28\uc774\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ucc28\uc774\ub97c \ud655\uc778\ud558\uae30 \uc704\ud574, \ub2e4\uc74c\uc758 \ubc84\uac70\uc5d0 \ub300\ud55c \uc774\uc57c\uae30\ub97c \uc0c1\uc0c1\ud574\ubcf4\uc2ed\uc2dc\uc624:","title":"\ub3d9\uc2dc\uc131\uacfc \ubc84\uac70"},{"location":"async/#_5","text":"\ub2f9\uc2e0\uc740 \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc640 \ud328\uc2a4\ud2b8\ud478\ub4dc \ud83c\udf54 \ub97c \uba39\uc73c\ub7ec \uac14\uc2b5\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \uc810\uc6d0 \ud83d\udc81 \uc774 \ub2f9\uc2e0 \uc55e\uc5d0 \uc788\ub294 \uc0ac\ub78c\ub4e4\uc758 \uc8fc\ubb38\uc744 \ubc1b\uc744 \ub3d9\uc548 \uc904\uc744 \uc11c\uc11c \uae30\ub2e4\ub9ac\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \ub2f9\uc2e0\uc758 \uc21c\uc11c\uac00 \ub418\uc5b4\uc11c, \ub2f9\uc2e0\uc740 \ub2f9\uc2e0\uacfc \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \ub97c \uc704\ud55c \ub450 \uac1c\uc758 \uace0\uae09\uc2a4\ub7ec\uc6b4 \ubc84\uac70 \ud83c\udf54 \ub97c \uc8fc\ubb38\ud569\ub2c8\ub2e4. \ub2f9\uc2e0\uc774 \ub3c8\uc744 \ub0c5\ub2c8\ub2e4 \ud83d\udcb8. \uc810\uc6d0 \ud83d\udc81 \uc740 \uc8fc\ubc29 \ud83d\udc68\u200d\ud83c\udf73 \uc5d0 \uc694\ub9ac\ub97c \ud558\ub77c\uace0 \uc804\ub2ec\ud558\uace0, \ub530\ub77c\uc11c \uadf8\ub4e4\uc740 \ub2f9\uc2e0\uc758 \ubc84\uac70 \ud83c\udf54 \ub97c \uc900\ube44\ud574\uc57c\ud55c\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc54c\uac8c\ub429\ub2c8\ub2e4(\uadf8\ub4e4\uc774 \uc9c0\uae08\uc740 \ub2f9\uc2e0 \uc55e \uace0\uac1d\ub4e4\uc758 \uc8fc\ubb38\uc744 \uc900\ube44\ud558\uace0 \uc788\uc744\uc9c0\ub77c\ub3c4 \ub9d0\uc785\ub2c8\ub2e4). \uc810\uc6d0 \ud83d\udc81 \uc740 \ub2f9\uc2e0\uc758 \uc21c\uc11c\uac00 \uc801\ud78c \ubc88\ud638\ud45c\ub97c \uc90d\ub2c8\ub2e4. \uae30\ub2e4\ub9ac\ub294 \ub3d9\uc548, \ub2f9\uc2e0\uc740 \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc640 \ud568\uaed8 \ud14c\uc774\ube14\uc744 \uace0\ub974\uace0, \uc790\ub9ac\uc5d0 \uc549\uc544 \uc624\ub7ab\ub3d9\uc548 (\ub2f9\uc2e0\uc774 \uc8fc\ubb38\ud55c \ubc84\uac70\ub294 \uaf64\ub098 \uace0\uae09\uc2a4\ub7fd\uae30 \ub54c\ubb38\uc5d0 \uc900\ube44\ud558\ub294\ub370 \uc2dc\uac04\uc774 \uc870\uae08 \uac78\ub9bd\ub2c8\ub2e4 \u2728\ud83c\udf54\u2728) \ub300\ud654\ub97c \ub098\ub215\ub2c8\ub2e4. \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc640 \ud14c\uc774\ube14\uc5d0 \uc549\uc544\uc11c \ubc84\uac70 \ud83c\udf54 \ub97c \uae30\ub2e4\ub9ac\ub294 \ub3d9\uc548, \uadf8 \uc0ac\ub78c \ud83d\ude0d \uc774 \uc5bc\ub9c8\ub098 \uba4b\uc9c0\uace0, \uc0ac\ub791\uc2a4\ub7fd\uace0, \ub611\ub611\ud55c\uc9c0 \uac10\ud0c4\ud558\uba70 \uc2dc\uac04\uc744 \ubcf4\ub0c5\ub2c8\ub2e4 \u2728\ud83d\ude0d\u2728. \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc640 \uae30\ub2e4\ub9ac\uba74\uc11c \uc598\uae30\ud558\ub294 \ub3d9\uc548, \ub54c\ub54c\ub85c, \ub2f9\uc2e0\uc740 \ub2f9\uc2e0\uc758 \ucc28\ub840\uac00 \ub418\uc5c8\ub294\uc9c0 \ubcf4\uae30 \uc704\ud574 \uce74\uc6b4\ud130\uc758 \ubc88\ud638\ub97c \ud655\uc778\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub2e4 \uc5b4\ub290 \uc21c\uac04, \ub2f9\uc2e0\uc758 \ucc28\ub840\uac00 \ub429\ub2c8\ub2e4. \uce74\uc6b4\ud130\uc5d0 \uac00\uc11c, \ubc84\uac70 \ud83c\udf54 \ub97c \ubc1b\uace0, \ud14c\uc774\ube14\ub85c \ub2e4\uc2dc \ub3cc\uc544\uc635\ub2c8\ub2e4. \ub2f9\uc2e0\uacfc \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \ub294 \ubc84\uac70 \ud83c\udf54 \ub97c \uba39\uc73c\uba70 \uc88b\uc740 \uc2dc\uac04\uc744 \ubcf4\ub0c5\ub2c8\ub2e4 \u2728. \ub2f9\uc2e0\uc774 \uc774 \uc774\uc57c\uae30\uc5d0\uc11c \ucef4\ud4e8\ud130 / \ud504\ub85c\uadf8\ub7a8 \ud83e\udd16 \uc774\ub77c\uace0 \uc0c1\uc0c1\ud574\ubcf4\uc2ed\uc2dc\uc624. \uc904\uc744 \uc11c\uc11c \uae30\ub2e4\ub9ac\ub294 \ub3d9\uc548, \ub2f9\uc2e0\uc740 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\uace0 \ud83d\ude34 \ub2f9\uc2e0\uc758 \ucc28\ub840\ub97c \uae30\ub2e4\ub9ac\uba70, \uc5b4\ub5a0\ud55c \"\uc0dd\uc0b0\uc801\uc778\" \uc77c\ub3c4 \ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc810\uc6d0 \ud83d\udc81 \uc774 (\uc74c\uc2dd\uc744 \uc900\ube44\ud558\uc9c0\ub294 \uc54a\uace0) \uc8fc\ubb38\uc744 \ubc1b\uae30\ub9cc \ud558\uae30 \ub54c\ubb38\uc5d0 \uc904\uc774 \ube68\ub9ac \uc904\uc5b4\ub4e4\uc5b4\uc11c \uad1c\ucc2e\uc2b5\ub2c8\ub2e4. \uadf8\ub2e4\uc74c, \ub2f9\uc2e0\uc774 \ucc28\ub840\uac00 \uc624\uba74, \ub2f9\uc2e0\uc740 \uc2e4\uc81c\ub85c \"\uc0dd\uc0b0\uc801\uc778\" \uc77c \ud83e\udd13 \uc744 \ud569\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \uba54\ub274\ub97c \ubcf4\uace0, \ubb34\uc5c7\uc744 \uba39\uc744\uc9c0 \uacb0\uc815\ud558\uace0, \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc758 \uc120\ud0dd\uc744 \ubb3b\uace0, \ub3c8\uc744 \ub0b4\uace0 \ud83d\udcb8 , \ub9de\ub294 \uce74\ub4dc\ub97c \ub0c8\ub294\uc9c0 \ud655\uc778\ud558\uace0, \ube44\uc6a9\uc774 \uc81c\ub300\ub85c \uc9c0\ubd88\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\uace0, \uc8fc\ubb38\uc774 \uc81c\ub300\ub85c \ub4e4\uc5b4\uac14\ub294\uc9c0 \ud655\uc778\uc744 \ud558\ub294 \uc791\uc5c5 \ub4f1\ub4f1\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ud6c4\uc5d0\ub294, \ubc84\uac70 \ud83c\udf54 \ub97c \uc544\uc9c1 \ubc1b\uc9c0 \ubabb\ud588\uc74c\uc5d0\ub3c4, \ubc84\uac70\uac00 \uc900\ube44\ub420 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub824\uc57c \ud83d\udd59 \ud558\uae30 \ub54c\ubb38\uc5d0 \uc810\uc6d0 \ud83d\udc81 \uacfc\uc758 \uc791\uc5c5\uc740 \"\uc77c\uc2dc\uc815\uc9c0\" \u23f8 \uc0c1\ud0dc\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ubc88\ud638\ud45c\ub97c \ubc1b\uace0 \uce74\uc6b4\ud130\uc5d0\uc11c \ub098\uc640 \ud14c\uc774\ube14\uc5d0 \uc549\uc73c\uba74, \ub2f9\uc2e0\uc740 \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc640 \uadf8 \"\uc791\uc5c5\" \u23ef \ud83e\udd13 \uc5d0 \ubc88\uac08\uc544\uac00\uba70 \ud83d\udd00 \uc9d1\uc911\ud569\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \ub2f9\uc2e0\uc740 \ub2e4\uc2dc \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc5d0\uac8c \uc791\uc5c5\uc744 \uac70\ub294 \ub9e4\uc6b0 \"\uc0dd\uc0b0\uc801\uc778\" \uc77c \ud83e\udd13 \uc744 \ud569\ub2c8\ub2e4. \uc810\uc6d0 \ud83d\udc81 \uc774 \uce74\uc6b4\ud130 \ud654\uba74\uc5d0 \ub2f9\uc2e0\uc758 \ubc88\ud638\ub97c \ud45c\uc2dc\ud568\uc73c\ub85c\uc368 \"\ubc84\uac70 \ud83c\udf54 \uac00 \uc900\ube44\ub418\uc5c8\uc2b5\ub2c8\ub2e4\"\ub77c\uace0 \ud574\ub3c4, \ub2f9\uc2e0\uc740 \uc989\uc2dc \ub6f0\uccd0\ub098\uac00\uc9c0\ub294 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \ub2f9\uc2e0\uc758 \ubc88\ud638\ub97c \uac16\uace0\uc788\uace0, \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc740 \uadf8\ub4e4\uc758 \ubc88\ud638\ub97c \uac16\uace0\uc788\uae30 \ub54c\ubb38\uc5d0, \uc544\ubb34\ub3c4 \ub2f9\uc2e0\uc758 \ubc84\uac70 \ud83c\udf54 \ub97c \ud6d4\uccd0\uac00\uc9c0 \uc54a\ub294\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc54c\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub2f9\uc2e0\uc740 \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uac00 \uc774\uc57c\uae30\ub97c \ub05d\ub0bc \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9b0 \ud6c4 (\ud604\uc7ac \uc791\uc5c5 \uc644\ub8cc \u23ef / \uc9c4\ud589 \uc911\uc778 \uc791\uc5c5 \ucc98\ub9ac \ud83e\udd13 ), \uc815\uc911\ud558\uac8c \ubbf8\uc18c\uc9d3\uace0 \ubc84\uac70\ub97c \uac00\uc9c0\ub7ec \uac00\uaca0\ub2e4\uace0 \ub9d0\ud569\ub2c8\ub2e4 \u23f8. \uadf8\ub2e4\uc74c \ub2f9\uc2e0\uc740 \uce74\uc6b4\ud130\uc5d0 \uac00\uc11c \ud83d\udd00 , \ucd08\uae30 \uc791\uc5c5\uc744 \uc774\uc81c \uc644\ub8cc\ud558\uace0 \u23ef , \ubc84\uac70 \ud83c\udf54 \ub97c \ubc1b\uace0, \uac10\uc0ac\ud558\ub2e4\uace0 \ub9d0\ud558\uace0 \ud14c\uc774\ube14\ub85c \uac00\uc838\uc635\ub2c8\ub2e4. \uc774\ub85c\uc368 \uce74\uc6b4\ud130\uc640\uc758 \uc0c1\ud638\uc791\uc6a9 \ub2e8\uacc4 / \uc791\uc5c5\uc774 \uc885\ub8cc\ub429\ub2c8\ub2e4 \u23f9. \uc774\uc804 \uc791\uc5c5\uc778 \"\ubc84\uac70 \ubc1b\uae30\"\uac00 \uc885\ub8cc\ub418\uba74 \u23f9 \"\ubc84\uac70 \uba39\uae30\"\ub77c\ub294 \uc0c8\ub85c\uc6b4 \uc791\uc5c5\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4 \ud83d\udd00 \u23ef.","title":"\ub3d9\uc2dc \ubc84\uac70"},{"location":"async/#_6","text":"\uc774\uc81c \"\ub3d9\uc2dc \ubc84\uac70\"\uac00 \uc544\ub2cc \"\ubcd1\ub82c \ubc84\uac70\"\ub97c \uc0c1\uc0c1\ud574\ubcf4\uc2ed\uc2dc\uc624. \ub2f9\uc2e0\uc740 \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \uc640 \ud568\uaed8 \ubcd1\ub82c \ud328\uc2a4\ud2b8\ud478\ub4dc \ud83c\udf54 \ub97c \uba39\uc73c\ub7ec \uac14\uc2b5\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \uc5ec\ub7ec\uba85(8\uba85\uc774\ub77c\uace0 \uac00\uc815\ud569\ub2c8\ub2e4)\uc758 \uc810\uc6d0\uc774 \ub2f9\uc2e0 \uc55e \uc0ac\ub78c\ub4e4\uc758 \uc8fc\ubb38\uc744 \ubc1b\uc73c\uba70 \ub3d9\uc2dc\uc5d0 \uc694\ub9ac \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73 \ub3c4 \ud558\ub294 \ub3d9\uc548 \uc904\uc744 \uc11c\uc11c \uae30\ub2e4\ub9bd\ub2c8\ub2e4. \ub2f9\uc2e0 \uc55e \ubaa8\ub4e0 \uc0ac\ub78c\ub4e4\uc774 \ubc84\uac70\uac00 \uc900\ube44\ub420 \ub54c\uae4c\uc9c0 \uce74\uc6b4\ud130\uc5d0\uc11c \ub5a0\ub098\uc9c0 \uc54a\uace0 \uae30\ub2e4\ub9bd\ub2c8\ub2e4 \ud83d\udd59 . \uc65c\ub0d0\ud558\uba74 8\uba85\uc758 \uc9c1\uc6d0\ub4e4\uc774 \ub2e4\uc74c \uc8fc\ubb38\uc744 \ubc1b\uae30 \uc804\uc5d0 \ubc84\uac70\ub97c \uc900\ube44\ud558\ub7ec \uac00\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub9c8\uce68\ub0b4 \ub2f9\uc2e0\uc758 \ucc28\ub840\uac00 \uc654\uace0, \ub2f9\uc2e0\uc740 \ub2f9\uc2e0\uacfc \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \ub97c \uc704\ud55c \ub450 \uac1c\uc758 \uace0\uae09\uc2a4\ub7ec\uc6b4 \ubc84\uac70 \ud83c\udf54 \ub97c \uc8fc\ubb38\ud569\ub2c8\ub2e4. \ub2f9\uc2e0\uc774 \ube44\uc6a9\uc744 \uc9c0\ubd88\ud569\ub2c8\ub2e4 \ud83d\udcb8 . \uc810\uc6d0\uc774 \uc8fc\ubc29\uc5d0 \uac11\ub2c8\ub2e4 \ud83d\udc68\u200d\ud83c\udf73 . \ub2f9\uc2e0\uc740 \ubc88\ud638\ud45c\uac00 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \ub204\uad6c\ub3c4 \ub2f9\uc2e0\uc758 \ubc84\uac70 \ud83c\udf54 \ub97c \ub300\uc2e0 \uac00\uc838\uac08 \uc218 \uc5c6\ub3c4\ub85d \uce74\uc6b4\ud130\uc5d0 \uc11c\uc11c \uae30\ub2e4\ub9bd\ub2c8\ub2e4 \ud83d\udd59 . \ub2f9\uc2e0\uacfc \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \ub294 \ub2e4\ub978 \uc0ac\ub78c\uc774 \uc0c8\uce58\uae30\ud574\uc11c \ubc84\uac70\ub97c \uac00\uc838\uac00\uc9c0 \ubabb\ud558\uac8c \ud558\ub290\ub77c \ubc14\uc058\uae30 \ub54c\ubb38\uc5d0 \ud83d\udd59 , \uc9dd\uc0ac\ub791 \uc0c1\ub300\uc5d0\uac8c \uc8fc\uc758\ub97c \uae30\uc6b8\uc77c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4 \ud83d\ude1e . \uc774\uac83\uc740 \"\ub3d9\uae30\" \uc791\uc5c5\uc774\uace0, \ub2f9\uc2e0\uc740 \uc810\uc6d0/\uc694\ub9ac\uc0ac \ud83d\udc68\u200d\ud83c\udf73 \uc640 \"\ub3d9\uae30\ud654\" \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \uae30\ub2e4\ub9ac\uace0 \ud83d\udd59 , \uc810\uc6d0/\uc694\ub9ac\uc0ac \ud83d\udc68\u200d\ud83c\udf73 \uac00 \ubc84\uac70 \ud83c\udf54 \uc900\ube44\ub97c \uc644\ub8cc\ud55c \ud6c4 \ub2f9\uc2e0\uc5d0\uac8c \uc8fc\uac70\ub098, \ub204\uad70\uac00\uac00 \uadf8\uac83\uc744 \uac00\uc838\uac00\ub294 \uadf8 \uc21c\uac04\uc5d0 \uadf8 \uacf3\uc5d0 \uc788\uc5b4\uc57c\ud569\ub2c8\ub2e4. \uce74\uc6b4\ud130 \uc55e\uc5d0\uc11c \uc624\ub7ab\ub3d9\uc548 \uae30\ub2e4\ub9b0 \ud6c4\uc5d0 \ud83d\udd59 , \uc810\uc6d0/\uc694\ub9ac\uc0ac \ud83d\udc68\u200d\ud83c\udf73 \uac00 \ub2f9\uc2e0\uc758 \ubc84\uac70 \ud83c\udf54 \ub97c \uac00\uc9c0\uace0 \ub3cc\uc544\uc635\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \ubc84\uac70\ub97c \ubc1b\uace0 \uc9dd\uc0ac\ub791 \uc0c1\ub300\uc640 \ud568\uaed8 \ud14c\uc774\ube14\ub85c \ub3cc\uc544\uc635\ub2c8\ub2e4. \ub2e8\uc9c0 \uba39\uae30\ub9cc \ud558\ub2e4\uac00, \ub2e4 \uba39\uc5c8\uc2b5\ub2c8\ub2e4 \ud83c\udf54 \u23f9. \uce74\uc6b4\ud130 \uc55e\uc5d0\uc11c \uae30\ub2e4\ub9ac\uba74\uc11c \ud83d\udd59 \ub108\ubb34 \ub9ce\uc740 \uc2dc\uac04\uc744 \ud5c8\ube44\ud588\uae30 \ub54c\ubb38\uc5d0 \ub300\ud654\ub97c \ud558\uac70\ub098 \uc791\uc5c5\uc744 \uac78 \uc2dc\uac04\uc774 \uac70\uc758 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4 \ud83d\ude1e . \uc774 \ubcd1\ub82c \ubc84\uac70 \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c, \ub2f9\uc2e0\uc740 \uae30\ub2e4\ub9ac\uace0 \ud83d\udd59 , \uc624\ub79c \uc2dc\uac04\ub3d9\uc548 \"\uce74\uc6b4\ud130\uc5d0\uc11c \uae30\ub2e4\ub9ac\ub294\" \ud83d\udd59 \ub370\uc5d0 \uc8fc\uc758\ub97c \uae30\uc6b8\uc774\ub294 \u23ef \ub450 \uac1c\uc758 \ud504\ub85c\uc138\uc11c(\ub2f9\uc2e0\uacfc \uc9dd\uc0ac\ub791 \uc0c1\ub300\ud83d\ude0d)\ub97c \uac00\uc9c4 \ucef4\ud4e8\ud130 / \ud504\ub85c\uadf8\ub7a8 \ud83e\udd16 \uc785\ub2c8\ub2e4. \ud328\uc2a4\ud2b8\ud478\ub4dc\uc810\uc5d0\ub294 8\uac1c\uc758 \ud504\ub85c\uc138\uc11c(\uc810\uc6d0/\uc694\ub9ac\uc0ac) \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73 \uac00 \uc788\uc2b5\ub2c8\ub2e4. \ub3d9\uc2dc \ubc84\uac70\ub294 \ub2e8 \ub450 \uac1c(\ud55c \uba85\uc758 \uc9c1\uc6d0\uacfc \ud55c \uba85\uc758 \uc694\ub9ac\uc0ac) \ud83d\udc81 \ud83d\udc68\u200d\ud83c\udf73 \ub9cc\uc744 \uac00\uc9c0\uace0 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc5ec\uc804\ud788, \ubcd1\ub82c \ubc84\uac70 \uc608\uc2dc\uac00 \ucd5c\uc120\uc740 \uc544\ub2d9\ub2c8\ub2e4 \ud83d\ude1e . \uc774 \uc608\uc2dc\ub294 \ubc84\uac70\ud83c\udf54 \uc774\uc57c\uae30\uc640 \uacb0\uc774 \uac19\uc2b5\ub2c8\ub2e4. \ub354 \"\ud604\uc2e4\uc801\uc778\" \uc608\uc2dc\ub85c, \uc740\ud589\uc744 \uc0c1\uc0c1\ud574\ubcf4\uc2ed\uc2dc\uc624. \ucd5c\uadfc\uae4c\uc9c0, \ub300\ub2e4\uc218\uc758 \uc740\ud589\uc5d0\ub294 \ub2e4\uc218\uc758 \uc740\ud589\uc6d0\ub4e4 \ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc \uacfc \uae34 \uc904 \ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59 \uc774 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \uc740\ud589\uc6d0\ub4e4\uc740 \ud55c \uba85 \ud55c \uba85\uc758 \uace0\uac1d\ub4e4\uc744 \ucc28\ub840\ub85c \uc0c1\ub300\ud569\ub2c8\ub2e4 \ud83d\udc68\u200d\ud83d\udcbc\u23ef . \uadf8\ub9ac\uace0 \ub2f9\uc2e0\uc740 \uc624\ub7ab\ub3d9\uc548 \uc904\uc5d0\uc11c \uae30\ub2e4\ub824\uc57c\ud558\uace0 \ud83d\udd59 , \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ub2f9\uc2e0\uc758 \ucc28\ub840\ub97c \uc783\uac8c \ub429\ub2c8\ub2e4. \uc544\ub9c8 \ub2f9\uc2e0\uc740 \uc740\ud589 \ud83c\udfe6 \uc2ec\ubd80\ub984\uc5d0 \uc9dd\uc0ac\ub791 \uc0c1\ub300 \ud83d\ude0d \ub97c \ub370\ub824\uac00\uace0 \uc2f6\uc9c0\ub294 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4.","title":"\ubcd1\ub82c \ubc84\uac70"},{"location":"async/#_7","text":"\"\uc9dd\uc0ac\ub791 \uc0c1\ub300\uc640\uc758 \ud328\uc2a4\ud2b8\ud478\ub4dc\uc810 \ubc84\uac70\" \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c, \uc624\ub79c \uae30\ub2e4\ub9bc \ud83d\udd59 \uc774 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub3d9\uc2dc \uc2dc\uc2a4\ud15c \u23f8\ud83d\udd00\u23ef \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \ud569\ub9ac\uc801\uc785\ub2c8\ub2e4. \ub300\ub2e4\uc218\uc758 \uc6f9 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc758 \uacbd\uc6b0\uac00 \uadf8\ub7ec\ud569\ub2c8\ub2e4. \ub9e4\uc6b0 \ub9ce\uc740 \uc218\uc758 \uc720\uc800\uac00 \uc788\uc9c0\ub9cc, \uc11c\ubc84\ub294 \uadf8\ub4e4\uc758 \uc694\uccad\uc744 \uc804\uc1a1\ud558\uae30 \uc704\ud574 \uadf8\ub2e5-\uc88b\uc9c0-\uc54a\uc740 \uc5f0\uacb0\uc744 \uae30\ub2e4\ub824\uc57c \ud569\ub2c8\ub2e4 \ud83d\udd59 . \uadf8\ub9ac\uace0 \uc751\ub2f5\uc774 \ub3cc\uc544\uc62c \ub54c\uae4c\uc9c0 \ub2e4\uc2dc \uae30\ub2e4\ub824\uc57c \ud569\ub2c8\ub2e4 \ud83d\udd59 . \uc774 \"\uae30\ub2e4\ub9bc\" \ud83d\udd59 \uc740 \ub9c8\uc774\ud06c\ub85c\ucd08 \ub2e8\uc704\uc774\uc9c0\ub9cc, \ubaa8\ub450 \ub354\ud574\uc9c0\uba74, \uacb0\uad6d\uc5d0\ub294 \ub9e4\uc6b0 \uae34 \ub300\uae30\uc2dc\uac04\uc774 \ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc6f9 API\ub97c \uc704\ud574 \ube44\ub3d9\uae30 \u23f8\ud83d\udd00\u23ef \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ud569\ub9ac\uc801\uc785\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uc874\uc7ac\ud558\ub294 \uc720\uba85\ud55c \ud30c\uc774\uc36c \ud504\ub808\uc784\uc6cc\ud06c (Flask\uc640 Django \ub4f1)\uc740 \uc0c8\ub85c\uc6b4 \ube44\ub3d9\uae30 \uae30\ub2a5\ub4e4\uc774 \ud30c\uc774\uc36c\uc5d0 \uc874\uc7ac\ud558\uae30 \uc804\uc5d0 \ub9cc\ub4e4\uc5b4\uc84c\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c, \uadf8\ub4e4\uc758 \ubc30\ud3ec \ubc29\uc2dd\uc740 \ubcd1\ub82c \uc2e4\ud589\uacfc \uc0c8\ub85c\uc6b4 \uae30\ub2a5\ub9cc\ud07c \uac15\ub825\ud558\uc9c0\ub294 \uc54a\uc740 \uc608\uc804 \ubc84\uc804\uc758 \ube44\ub3d9\uae30 \uc2e4\ud589\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \ube44\ub3d9\uae30 \uc6f9 \ud30c\uc774\uc36c(ASGI)\uc5d0 \ub300\ud55c \uc8fc\uc694 \uba85\uc138\uac00 \uc6f9\uc18c\ucf13\uc744 \uc9c0\uc6d0\ud558\uae30 \uc704\ud574 Django\uc5d0\uc11c \uac1c\ubc1c \ub418\uc5c8\uc74c\uc5d0\ub3c4 \uadf8\ub807\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc885\ub958\uc758 \ube44\ub3d9\uae30\uc131\uc740 (NodeJS\ub294 \ubcd1\ub82c\uc801\uc774\uc9c0 \uc54a\uc74c\uc5d0\ub3c4) NodeJS\uac00 \uc0ac\ub791\ubc1b\ub294 \uc774\uc720\uc774\uace0, \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ub85c\uc11c\uc758 Go\uc758 \uac15\uc810\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 FastAPI \ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \ub3d9\uc77c\ud55c \uc131\ub2a5\uc744 \ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \ubcd1\ub82c\uc131\uacfc \ube44\ub3d9\uae30\uc131\uc744 \ub3d9\uc2dc\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0, \ub300\ubd80\ubd84\uc758 \ud14c\uc2a4\ud2b8\uac00 \uc644\ub8cc\ub41c NodeJS \ud504\ub808\uc784\uc6cc\ud06c\ubcf4\ub2e4 \ub354 \ub192\uc740 \uc131\ub2a5\uc744 \uc5bb\uace0 C\uc5d0 \ub354 \uac00\uae4c\uc6b4 \ucef4\ud30c\uc77c \uc5b8\uc5b4\uc778 Go\uc640 \ub3d9\ub4f1\ud55c \uc131\ub2a5\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\ubaa8\ub450 Starlette \ub355\ubd84\uc785\ub2c8\ub2e4) .","title":"\ubc84\uac70 \uc608\uc2dc\uc758 \uacb0\ub860"},{"location":"async/#_8","text":"\uadf8\ub807\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4! \uadf8\uac83\uc774 \uc774\uc57c\uae30\uc758 \uad50\ud6c8\uc740 \uc544\ub2d9\ub2c8\ub2e4. \ub3d9\uc2dc\uc131\uc740 \ubcd1\ub82c\uc131\uacfc \ub2e4\ub985\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uadf8\uac83\uc740 \ub9ce\uc740 \ub300\uae30\ub97c \ud544\uc694\ub85c\ud558\ub294 \ud2b9\uc815\ud55c \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c\ub294 \ub354 \ub0ab\uc2b5\ub2c8\ub2e4. \uc774\ub85c \uc778\ud574, \uc6f9 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 \uac1c\ubc1c\uc5d0\uc11c \ub3d9\uc2dc\uc131\uc774 \ubcd1\ub82c\uc131\ubcf4\ub2e4 \uc77c\ubc18\uc801\uc73c\ub85c \ud6e8\uc52c \ub0ab\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ubaa8\ub4e0 \uacbd\uc6b0\uc5d0 \uadf8\ub7f0 \uac83\uc740 \uc544\ub2d9\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uade0\ud615\uc744 \ub9de\ucd94\uae30 \uc704\ud574, \ub2e4\uc74c\uc758 \uc9e7\uc740 \uc774\uc57c\uae30\ub97c \uc0c1\uc0c1\ud574\ubcf4\uc2ed\uc2dc\uc624: \ub2f9\uc2e0\uc740 \ud06c\uace0, \ub354\ub7ec\uc6b4 \uc9d1\uc744 \uccad\uc18c\ud574\uc57c\ud569\ub2c8\ub2e4. \ub124, \uc774\uac8c \uc804\ubd80\uc785\ub2c8\ub2e4 . \uc5b4\ub514\uc5d0\ub3c4 \ub300\uae30 \ud83d\udd59 \ub294 \uc5c6\uace0, \uc9d1\uc548 \uacf3\uacf3\uc5d0\uc11c \ud574\uc57c\ud558\ub294 \ub9ce\uc740 \uc791\uc5c5\ub4e4\ub9cc \uc788\uc2b5\ub2c8\ub2e4. \ubc84\uac70 \uc608\uc2dc\ucc98\ub7fc \ucc98\uc74c\uc5d0\ub294 \uac70\uc2e4, \uadf8 \ub2e4\uc74c\uc740 \ubd80\uc5cc\uacfc \uac19\uc740 \uc2dd\uc73c\ub85c \uc21c\uc11c\ub97c \uc815\ud560 \uc218\ub3c4 \uc788\uc73c\ub098, \ubb34\uc5c7\ub3c4 \uae30\ub2e4\ub9ac\uc9c0 \ud83d\udd59 \uc54a\uace0 \uacc4\uc18d\ud574\uc11c \uccad\uc18c \uc791\uc5c5\ub9cc \uc218\ud589\ud558\uae30 \ub54c\ubb38\uc5d0, \uc21c\uc11c\ub294 \uc544\ubb34\ub7f0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc21c\uc11c\uac00 \uc788\ub4e0 \uc5c6\ub4e0 \ub3d9\uc77c\ud55c \uc2dc\uac04\uc774 \uc18c\uc694\ub420 \uac83\uc774\uace0(\ub3d9\uc2dc\uc131) \ub3d9\uc77c\ud55c \uc591\uc758 \uc791\uc5c5\uc744 \ud558\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774 \uacbd\uc6b0\uc5d0\uc11c, 8\uba85\uc758 \uc804(\u524d)-\uc810\uc6d0/\uc694\ub9ac\uc0ac\uc774\uba74\uc11c-\ud604(\u73fe)-\uccad\uc18c\ubd80 \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73 \ub97c \uace0\uc6a9\ud560 \uc218 \uc788\uace0, \uadf8\ub4e4 \uac01\uc790(\uadf8\ub9ac\uace0 \ub2f9\uc2e0)\uac00 \uc9d1\uc758 \ud55c \ubd80\ubd84\uc529 \ub9e1\uc544 \uccad\uc18c\ub97c \ud55c\ub2e4\uba74, \ub2f9\uc2e0\uc740 \ubcd1\ub82c\uc801 \uc73c\ub85c \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uc218 \uc788\uace0, \uc870\uae08\uc758 \ub3c4\uc6c0\uc774 \uc788\ub2e4\uba74, \ud6e8\uc52c \ub354 \ube68\ub9ac \ub05d\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c, (\ub2f9\uc2e0\uc744 \ud3ec\ud568\ud55c) \uac01\uac01\uc758 \uccad\uc18c\ubd80\ub4e4\uc740 \ud504\ub85c\uc138\uc11c\uac00 \ub420 \uac83\uc774\uace0, \uac01\uc790\uc758 \uc5ed\ud560\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \uc2e4\ud589 \uc2dc\uac04\uc758 \ub300\ubd80\ubd84\uc774 \ub300\uae30\uac00 \uc544\ub2cc \uc2e4\uc81c \uc791\uc5c5\uc5d0 \uc18c\uc694\ub418\uace0, \ucef4\ud4e8\ud130\uc5d0\uc11c \uc791\uc5c5\uc740 CPU \uc5d0\uc11c \uc774\ub8e8\uc5b4\uc9c0\ubbc0\ub85c, \uc774\ub7ec\ud55c \ubb38\uc81c\ub97c \"CPU\uc5d0 \ubb36\uc600\"\ub2e4\uace0 \ud569\ub2c8\ub2e4. CPU\uc5d0 \ubb36\uc778 \uc5f0\uc0b0\uc5d0 \uad00\ud55c \ud754\ud55c \uc608\uc2dc\ub294 \ubcf5\uc7a1\ud55c \uc218\ud559 \ucc98\ub9ac\ub97c \ud544\uc694\ub85c \ud558\ub294 \uacbd\uc6b0\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4: \uc624\ub514\uc624 \ub610\ub294 \uc774\ubbf8\uc9c0 \ucc98\ub9ac. \ucef4\ud4e8\ud130 \ube44\uc804 : \ud558\ub098\uc758 \uc774\ubbf8\uc9c0\ub294 \uc218\ubc31\uac1c\uc758 \ud53d\uc140\ub85c \uad6c\uc131\ub418\uc5b4\uc788\uace0, \uac01 \ud53d\uc140\uc740 3\uac1c\uc758 \uac12 / \uc0c9\uc744 \uac16\uace0 \uc788\uc73c\uba70, \uc77c\ubc18\uc801\uc73c\ub85c \ud574\ub2f9 \ud53d\uc140\ub4e4\uc5d0 \ub300\ud574 \ub3d9\uc2dc\uc5d0 \ubb34\uc5b8\uac00\ub97c \uacc4\uc0b0\ud574\uc57c\ud558\ub294 \ucc98\ub9ac. \uba38\uc2e0\ub7ec\ub2dd : \uc77c\ubc18\uc801\uc73c\ub85c \ub9ce\uc740 \"\ud589\ub82c\"\uacfc \"\ubca1\ud130\" \uacf1\uc148\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \uac70\ub300\ud55c \uc2a4\ud504\ub808\ub4dc \uc2dc\ud2b8\uc5d0 \uc218\ub4e4\uc774 \uc788\uace0 \uadf8 \uc218\ub4e4\uc744 \ub3d9\uc2dc\uc5d0 \uacf1\ud574\uc57c \ud55c\ub2e4\uace0 \uc0dd\uac01\ud574\ubcf4\uc2ed\uc2dc\uc624. \ub525\ub7ec\ub2dd : \uba38\uc2e0\ub7ec\ub2dd\uc758 \ud558\uc704\uc601\uc5ed\uc73c\ub85c, \ub3d9\uc77c\ud55c \uc608\uc2dc\uac00 \uc801\uc6a9\ub429\ub2c8\ub2e4. \ub2e8\uc9c0 \uc774 \uacbd\uc6b0\uc5d0\ub294 \ud558\ub098\uc758 \uc2a4\ud504\ub808\ub4dc \uc2dc\ud2b8\uc5d0 \uacf1\ud574\uc57c\ud560 \uc218\ub4e4\uc774 \uc788\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \uac70\ub300\ud55c \uc138\ud2b8\uc758 \uc2a4\ud504\ub808\ub4dc \uc2dc\ud2b8\ub4e4\uc774 \uc788\uace0, \ub9ce\uc740 \uacbd\uc6b0\uc5d0, \uc774 \ubaa8\ub378\ub4e4\uc744 \ub9cc\ub4e4\uace0 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 \ud2b9\uc218\ud55c \ud504\ub85c\uc138\uc11c\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","title":"\ub3d9\uc2dc\uc131\uc774 \ubcd1\ub82c\uc131\ubcf4\ub2e4 \ub354 \ub098\uc740\uac00?"},{"location":"async/#_9","text":"FastAPI \ub97c \uc0ac\uc6a9\ud558\uba74 \uc6f9 \uac1c\ubc1c\uc5d0\uc11c\ub294 \ub9e4\uc6b0 \ud754\ud55c \ub3d9\uc2dc\uc131\uc758 \uc774\uc810\uc744 (NodeJS\uc758 \uc8fc\ub41c \ub9e4\ub825\ub9cc\ud07c) \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubfd0\ub9cc \uc544\ub2c8\ub77c \uba38\uc2e0\ub7ec\ub2dd \uc2dc\uc2a4\ud15c\uacfc \uac19\uc774 CPU\uc5d0 \ubb36\uc778 \uc791\uc5c5\uc744 \uc704\ud574 \ubcd1\ub82c\uc131\uacfc \uba40\ud2f0\ud504\ub85c\uc138\uc2f1(\ub2e4\uc218\uc758 \ud504\ub85c\uc138\uc2a4\ub97c \ubcd1\ub82c\uc801\uc73c\ub85c \ub3d9\uc791\uc2dc\ud0a4\ub294 \uac83)\uc744 \uc774\uc6a9\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc774 \ub370\uc774\ud130 \uc0ac\uc774\uc5b8\uc2a4 , \uba38\uc2e0\ub7ec\ub2dd\uacfc \ud2b9\ud788 \ub525\ub7ec\ub2dd\uc5d0 \uc758 \uc8fc\ub41c \uc5b8\uc5b4\ub77c\ub294 \uac04\ub2e8\ud55c \uc0ac\uc2e4\uc5d0 \ub354\ud574\uc11c, \uc774\uac83\uc740 FastAPI\ub97c \ub370\uc774\ud130 \uc0ac\uc774\uc5b8\uc2a4 / \uba38\uc2e0\ub7ec\ub2dd \uc6f9 API\uc640 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 (\ub2e4\ub978 \uac83\ub4e4\ubcf4\ub2e4) \uc88b\uc740 \uc120\ud0dd\uc9c0\uac00 \ub418\uac8c \ud569\ub2c8\ub2e4. \ubc30\ud3ec\uc2dc \ubcd1\ub82c\uc744 \uc5b4\ub5bb\uac8c \uac00\ub2a5\ud558\uac8c \ud558\ub294\uc9c0 \uc54c\uace0\uc2f6\ub2e4\uba74, \ubc30\ud3ec \ubb38\uc11c\ub97c \ucc38\uace0\ud558\uc2ed\uc2dc\uc624.","title":"\ub3d9\uc2dc\uc131 + \ubcd1\ub82c\uc131: \uc6f9 + \uba38\uc2e0\ub7ec\ub2dd"},{"location":"async/#async-await_1","text":"\ucd5c\uc2e0 \ud30c\uc774\uc36c \ubc84\uc804\uc5d0\ub294 \ube44\ub3d9\uae30 \ucf54\ub4dc\ub97c \uc815\uc758\ud558\ub294 \ub9e4\uc6b0 \uc9c1\uad00\uc801\uc778 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uc774\uac83\uc744 \ud3c9\ubc94\ud55c \"\uc21c\ucc28\uc801\" \ucf54\ub4dc\ub85c \ubcf4\uc774\uac8c \ud558\uace0, \uc801\uc808\ud55c \uc21c\uac04\uc5d0 \ub2f9\uc2e0\uc744 \uc704\ud574 \"\ub300\uae30\"\ud569\ub2c8\ub2e4. \uc5f0\uc0b0\uc774 \uacb0\uacfc\ub97c \uc804\ub2ec\ud558\uae30 \uc804\uc5d0 \ub300\uae30\ub97c \ud574\uc57c\ud558\uace0 \uc0c8\ub85c\uc6b4 \ud30c\uc774\uc36c \uae30\ub2a5\ub4e4\uc744 \uc9c0\uc6d0\ud55c\ub2e4\uba74, \uc774\ub807\uac8c \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: burgers = await get_burgers ( 2 ) \uc5ec\uae30\uc11c \ud575\uc2ec\uc740 await \uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \ud30c\uc774\uc36c\uc5d0\uac8c burgers \uacb0\uacfc\ub97c \uc800\uc7a5\ud558\uae30 \uc774\uc804\uc5d0 get_burgers(2) \uc758 \uc791\uc5c5\uc774 \uc644\ub8cc\ub418\uae30\ub97c \ud83d\udd59 \uae30\ub2e4\ub9ac\ub77c\uace0 \u23f8 \ub9d0\ud569\ub2c8\ub2e4. \uc774\ub85c \uc778\ud574, \ud30c\uc774\uc36c\uc740 \uadf8\ub3d9\uc548 (\ub2e4\ub978 \uc694\uccad\uc744 \ubc1b\ub294 \uac83\uacfc \uac19\uc740) \ub2e4\ub978 \uc791\uc5c5\uc744 \uc218\ud589\ud574\ub3c4 \ub41c\ub2e4\ub294 \uac83\uc744 \ud83d\udd00 \u23ef \uc54c\uac8c\ub420 \uac83\uc785\ub2c8\ub2e4. await \uac00 \ub3d9\uc791\ud558\uae30 \uc704\ud574, \uc774\uac83\uc740 \ube44\ub3d9\uae30\ub97c \uc9c0\uc6d0\ud558\ub294 \ud568\uc218 \ub0b4\ubd80\uc5d0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574\uc11c \ud568\uc218\ub97c async def \ub97c \uc0ac\uc6a9\ud574 \uc815\uc758\ud558\uae30\ub9cc \ud558\uba74 \ub429\ub2c8\ub2e4: async def get_burgers ( number : int ): # Do some asynchronous stuff to create the burgers return burgers ... def \ub97c \uc0ac\uc6a9\ud558\ub294 \ub300\uc2e0: # This is not asynchronous def get_sequential_burgers ( number : int ): # Do some sequential stuff to create the burgers return burgers async def \ub97c \uc0ac\uc6a9\ud558\uba74, \ud30c\uc774\uc36c\uc740 \ud574\ub2f9 \ud568\uc218 \ub0b4\uc5d0\uc11c await \ud45c\ud604\uc5d0 \uc8fc\uc758\ud574\uc57c\ud55c\ub2e4\ub294 \uc0ac\uc2e4\uacfc, \ud574\ub2f9 \ud568\uc218\uc758 \uc2e4\ud589\uc744 \"\uc77c\uc2dc\uc815\uc9c0\"\u23f8\ud558\uace0 \ub2e4\uc2dc \ub3cc\uc544\uc624\uae30 \uc804\uae4c\uc9c0 \ub2e4\ub978 \uc791\uc5c5\uc744 \uc218\ud589\ud83d\udd00\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c\uac8c\ub429\ub2c8\ub2e4. async def f \ud568\uc218\ub97c \ud638\ucd9c\ud558\uace0\uc790 \ud560 \ub54c, \"\ub300\uae30\"\ud574\uc57c\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc544\ub798\ub294 \ub3d9\uc791\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. # This won't work, because get_burgers was defined with: async def burgers = get_burgers ( 2 ) \ub530\ub77c\uc11c, await f\ub97c \uc0ac\uc6a9\ud574\uc11c \ud638\ucd9c\ud560 \uc218 \uc788\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 async def \ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub97c \uc0dd\uc131\ud574\uc57c \ud569\ub2c8\ub2e4: @app . get ( '/burgers' ) async def read_burgers (): burgers = await get_burgers ( 2 ) return burgers","title":"async\uc640  await"},{"location":"async/#_10","text":"await \uac00 async def \ub97c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\uc774 \uac00\ub2a5\ud558\ub2e4\ub294 \uac83\uc744 \ub208\uce58\ucc44\uc168\uc744 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub3d9\uc2dc\uc5d0, async def \ub85c \uc815\uc758\ub41c \ud568\uc218\ub4e4\uc740 \"\ub300\uae30\"\ub418\uc5b4\uc57c\ub9cc \ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, async def \ub97c \uc0ac\uc6a9\ud55c \ud568\uc218\ub4e4\uc740 \uc5ed\uc2dc async def \ub97c \uc0ac\uc6a9\ud55c \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c\ub9cc \ud638\ucd9c\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \ub2ed\uc774 \uba3c\uc800\ub0d0, \ub2ec\uac40\uc774 \uba3c\uc800\ub0d0, \uccab async \ud568\uc218\ub97c \uc5b4\ub5bb\uac8c \ud638\ucd9c\ud560 \uc218 \uc788\uaca0\uc2b5\ub2c8\uae4c? FastAPI \ub97c \uc0ac\uc6a9\ud574 \uc791\uc5c5\ud55c\ub2e4\uba74 \uc774\uac83\uc744 \uac71\uc815\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 \uadf8 \"\uccab\" \ud568\uc218\ub294 \ub2f9\uc2e0\uc758 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uac00 \ub420 \uac83\uc774\uace0, FastAPI\ub294 \uc5b4\ub5bb\uac8c \uc62c\ubc14\ub974\uac8c \ucc98\ub9ac\ud560\uc9c0 \uc54c\uace0\uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc FastAPI\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 async / await \ub97c \uc0ac\uc6a9\ud558\uace0 \uc2f6\ub2e4\uba74, \uc774 \uc5ed\uc2dc \uac00\ub2a5\ud569\ub2c8\ub2e4.","title":"\ub354 \uc138\ubd80\uc801\uc778 \uae30\uc220\uc801 \uc0ac\ud56d"},{"location":"async/#_11","text":"Starlette(\uadf8\ub9ac\uace0 FastAPI)\ub294 AnyIO \ub97c \uae30\ubc18\uc73c\ub85c \ud558\uace0\uc788\uace0, \ub530\ub77c\uc11c \ud30c\uc774\uc36c \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778 asyncio \ubc0f Trio \uc640 \ud638\ud658\ub429\ub2c8\ub2e4. \ud2b9\ud788, \ucf54\ub4dc\uc5d0\uc11c \uace0\uae09 \ud328\ud134\uc774 \ud544\uc694\ud55c \uace0\uae09 \ub3d9\uc2dc\uc131\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \uc9c1\uc811\uc801\uc73c\ub85c AnyIO \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub354\ub77c\ub3c4, \ub192\uc740 \ud638\ud658\uc131 \ubc0f AnyIO \uc758 \uc774\uc810(\uc608: \uad6c\uc870\ud654\ub41c \ub3d9\uc2dc\uc131 )\uc744 \ucde8\ud558\uae30 \uc704\ud574 AnyIO \ub97c \uc0ac\uc6a9\ud574 \ube44\ub3d9\uae30 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ub2f9\uc2e0\ub9cc\uc758 \ube44\ub3d9\uae30 \ucf54\ub4dc \uc791\uc131\ud558\uae30"},{"location":"async/#_12","text":"\ud30c\uc774\uc36c\uc5d0\uc11c async \uc640 await \ub97c \uc0ac\uc6a9\ud558\uac8c \ub41c \uac83\uc740 \ube44\uad50\uc801 \ucd5c\uadfc\uc758 \uc77c\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub85c \uc778\ud574 \ube44\ub3d9\uae30 \ucf54\ub4dc \uc791\uc5c5\uc774 \ud6e8\uc52c \uac04\ub2e8\ud574\uc84c\uc2b5\ub2c8\ub2e4. \uac19\uc740 (\ub610\ub294 \uac70\uc758 \uc720\uc0ac\ud55c) \ubb38\ubc95\uc740 \ucd5c\uc2e0 \ubc84\uc804\uc758 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8(\ube0c\ub77c\uc6b0\uc800\uc640 NodeJS)\uc5d0\ub3c4 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uc774\uc804\uc5d0, \ube44\ub3d9\uae30 \ucf54\ub4dc\ub97c \ucc98\ub9ac\ud558\ub294 \uac83\uc740 \uaf64 \ubcf5\uc7a1\ud558\uace0 \uc5b4\ub824\uc6b4 \uc77c\uc774\uc5c8\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc758 \uc608\uc804 \ubc84\uc804\uc774\ub77c\uba74, \uc2a4\ub808\ub4dc \ub610\ub294 Gevent \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ucf54\ub4dc\ub97c \uc774\ud574\ud558\uace0, \ub514\ubc84\uae45\ud558\uace0, \uc774\uc5d0 \ub300\ud574 \uc0dd\uac01\ud558\ub294\uac8c \ud6e8\uc52c \ubcf5\uc7a1\ud569\ub2c8\ub2e4. \uc608\uc804 \ubc84\uc804\uc758 NodeJS / \ube0c\ub77c\uc6b0\uc800 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\ub77c\uba74, \"\ucf5c\ubc31 \ud568\uc218\"\ub97c \uc0ac\uc6a9\ud588\uc744 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\ub85c \uc778\ud574 \ucf5c\ubc31 \uc9c0\uc625 \uc5d0 \ube60\uc9c0\uac8c \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ube44\ub3d9\uae30 \ucf54\ub4dc\uc758 \ub2e4\ub978 \ud615\ud0dc"},{"location":"async/#_13","text":"\ucf54\ub8e8\ud2f4 \uc740 async def \ud568\uc218\uac00 \ubc18\ud658\ud558\ub294 \uac83\uc744 \uce6d\ud558\ub294 \ub9e4\uc6b0 \uace0\uae09\uc2a4\ub7ec\uc6b4 \uc6a9\uc5b4\uc77c \ubfd0\uc785\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc740 \uadf8\uac83\uc774 \uc2dc\uc791\ub418\uace0 \uc5b4\ub290 \uc2dc\uc810\uc5d0\uc11c \uc644\ub8cc\ub418\uc9c0\ub9cc \ub0b4\ubd80\uc5d0 await \uac00 \uc788\uc744 \ub54c\ub9c8\ub2e4 \ub0b4\ubd80\uc801\uc73c\ub85c \uc77c\uc2dc\uc815\uc9c0\u23f8\ub420 \uc218\ub3c4 \uc788\ub294 \ud568\uc218\uc640 \uc720\uc0ac\ud55c \uac83\uc774\ub77c\ub294 \uc0ac\uc2e4\uc744 \uc54c\uace0\uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 async \ubc0f await \uc640 \ud568\uaed8 \ube44\ub3d9\uae30 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub294 \uc774 \ubaa8\ub4e0 \uae30\ub2a5\ub4e4\uc740 \"\ucf54\ub8e8\ud2f4\"\uc73c\ub85c \uac04\ub2e8\ud788 \uc694\uc57d\ub429\ub2c8\ub2e4. \uc774\uac83\uc740 Go\uc758 \uc8fc\ub41c \ud575\uc2ec \uae30\ub2a5\uc778 \"\uace0\ub8e8\ud2f4\"\uc5d0 \uacac\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ucf54\ub8e8\ud2f4"},{"location":"async/#_14","text":"\uc0c1\uae30 \ubb38\uc7a5\uc744 \ub2e4\uc2dc \ud55c \ubc88 \ubd05\uc2dc\ub2e4: \ucd5c\uc2e0 \ud30c\uc774\uc36c \ubc84\uc804\uc740 async \ubc0f await \ubb38\ubc95\uacfc \ud568\uaed8 \u201c\ucf54\ub8e8\ud2f4\u201d \uc774\ub77c\uace0 \ud558\ub294 \uac83\uc744 \uc0ac\uc6a9\ud558\ub294 \u201c\ube44\ub3d9\uae30 \ucf54\ub4dc\u201d \ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc774\uc81c \uc774 \ub9d0\uc744 \uc870\uae08 \ub354 \uc774\ud574\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \u2728 \uc774\uac83\uc774 (Starlette\uc744 \ud1b5\ud574) FastAPI\ub97c \uac15\ud558\uac8c \ud558\uba74\uc11c \uadf8\uac83\uc774 \uc778\uc0c1\uc801\uc778 \uc131\ub2a5\uc744 \ub0bc \uc218 \uc788\uac8c \ud569\ub2c8\ub2e4.","title":"\uacb0\ub860"},{"location":"async/#_15","text":"\uacbd\uace0 \uc774 \ubd80\ubd84\uc740 \ub118\uc5b4\uac00\ub3c4 \ub429\ub2c8\ub2e4. \uc774\uac83\ub4e4\uc740 FastAPI \uac00 \ub0b4\ubd80\uc801\uc73c\ub85c \uc5b4\ub5bb\uac8c \ub3d9\uc791\ud558\ub294\uc9c0\uc5d0 \ub300\ud55c \ub9e4\uc6b0 \uc138\ubd80\uc801\uc778 \uae30\uc220\uc0ac\ud56d\uc785\ub2c8\ub2e4. \ub9cc\uc57d \uae30\uc220\uc801 \uc9c0\uc2dd(\ucf54\ub8e8\ud2f4, \uc2a4\ub808\ub4dc, \ube14\ub85d\ud0b9 \ub4f1)\uc774 \uc788\uace0 FastAPI\uac00 \uc5b4\ub5bb\uac8c async def vs def \ub97c \ub2e4\ub8e8\ub294\uc9c0 \uad81\uae08\ud558\ub2e4\uba74, \uacc4\uc18d\ud558\uc2ed\uc2dc\uc624.","title":"\ub9e4\uc6b0 \uc138\ubd80\uc801\uc778 \uae30\uc220\uc801 \uc0ac\ud56d"},{"location":"async/#_16","text":"\uacbd\ub85c \uc791\ub3d9 \ud568\uc218\ub97c async def \ub300\uc2e0 \uc77c\ubc18\uc801\uc778 def \ub85c \uc120\uc5b8\ud558\ub294 \uacbd\uc6b0, (\uc11c\ubc84\ub97c \ucc28\ub2e8\ud558\ub294 \uac83\ucc98\ub7fc) \uadf8\uac83\uc744 \uc9c1\uc811 \ud638\ucd9c\ud558\ub294 \ub300\uc2e0 \ub300\uae30\uc911\uc778 \uc678\ubd80 \uc2a4\ub808\ub4dc\ud480\uc5d0\uc11c \uc2e4\ud589\ub429\ub2c8\ub2e4. \ub9cc\uc57d \uc0c1\uae30\uc5d0 \ubb18\uc0ac\ub41c\ub300\ub85c \ub3d9\uc791\ud558\uc9c0 \uc54a\ub294 \ube44\ub3d9\uae30 \ud504\ub85c\uadf8\ub7a8\uc744 \uc0ac\uc6a9\ud574\uc654\uace0 \uc57d\uac04\uc758 \uc131\ub2a5 \ud5a5\uc0c1 (\uc57d 100 \ub098\ub178\ucd08)\uc744 \uc704\ud574 def \ub97c \uc0ac\uc6a9\ud574\uc11c \uacc4\uc0b0\ub9cc\uc744 \uc704\ud55c \uc0ac\uc18c\ud55c \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub97c \uc815\uc758\ud574\uc654\ub2e4\uba74, FastAPI \ub294 \uc774\uc640\ub294 \ubc18\ub300\ub77c\ub294 \uac83\uc5d0 \uc8fc\uc758\ud558\uc2ed\uc2dc\uc624. \uc774\ub7ec\ud55c \uacbd\uc6b0\uc5d0, \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uac00 \ube14\ub85c\ud0b9 I/O \ub97c \uc218\ud589\ud558\ub294 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ud55c async def \ub97c \uc0ac\uc6a9\ud558\ub294 \ud3b8\uc774 \ub354 \ub0ab\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub450 \uacbd\uc6b0 \ubaa8\ub450, FastAPI\uac00 \ub2f9\uc2e0\uc774 \uc804\uc5d0 \uc0ac\uc6a9\ud558\ub358 \ud504\ub808\uc784\uc6cc\ud06c\ubcf4\ub2e4 \ub354 \ube60\ub97c (\ucd5c\uc18c\ud55c \ube44\uacac\ub420) \ud655\ub960\uc774 \ub192\uc2b5\ub2c8\ub2e4.","title":"\uacbd\ub85c \uc791\ub3d9 \ud568\uc218"},{"location":"async/#_17","text":"\uc758\uc874\uc131\uc5d0\ub3c4 \ub3d9\uc77c\ud558\uac8c \uc801\uc6a9\ub429\ub2c8\ub2e4. \uc758\uc874\uc131\uc774 async def \uac00 \uc544\ub2cc \ud45c\uc900 def \ud568\uc218\ub77c\uba74, \uc678\ubd80 \uc2a4\ub808\ub4dc\ud480\uc5d0\uc11c \uc2e4\ud589\ub429\ub2c8\ub2e4.","title":"\uc758\uc874\uc131"},{"location":"async/#-","text":"\ud568\uc218 \uc815\uc758\uc2dc \ub9e4\uac1c\ubcc0\uc218\ub85c \uc11c\ub85c\ub97c \ud544\uc694\ub85c\ud558\ub294 \ub2e4\uc218\uc758 \uc758\uc874\uc131\uacfc \ud558\uc704-\uc758\uc874\uc131\uc744 \uac00\uc9c8 \uc218 \uc788\uace0, \uadf8 \uc911 \uc77c\ubd80\ub294 async def \ub85c, \ub2e4\ub978 \uc77c\ubd80\ub294 \uc77c\ubc18\uc801\uc778 def \ub85c \uc0dd\uc131\ub418\uc5c8\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \uc5ec\uc804\ud788 \uc798 \ub3d9\uc791\ud558\uace0, \uc77c\ubc18\uc801\uc778 def \ub85c \uc0dd\uc131\ub41c \uac83\ub4e4\uc740 \"\ub300\uae30\"\ub418\ub294 \ub300\uc2e0\uc5d0 (\uc2a4\ub808\ub4dc\ud480\ub85c\ubd80\ud130) \uc678\ubd80 \uc2a4\ub808\ub4dc\uc5d0\uc11c \ud638\ucd9c\ub429\ub2c8\ub2e4.","title":"\ud558\uc704-\uc758\uc874\uc131"},{"location":"async/#_18","text":"\uc9c1\uc811 \ud638\ucd9c\ub418\ub294 \ub2e4\ub978 \ubaa8\ub4e0 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\ub294 \uc77c\ubc18\uc801\uc778 def \ub098 async def \ub85c \uc0dd\uc131\ub420 \uc218 \uc788\uace0 FastAPI\ub294 \uc774\ub97c \ud638\ucd9c\ud558\ub294 \ubc29\uc2dd\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 FastAPI\uac00 \ub2f9\uc2e0\uc744 \uc704\ud574 \ud638\ucd9c\ud558\ub294 \ud568\uc218\uc640\ub294 \ubc18\ub300\uc785\ub2c8\ub2e4: \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc640 \uc758\uc874\uc131 \ub9cc\uc57d \ub2f9\uc2e0\uc758 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\uac00 def \ub97c \uc0ac\uc6a9\ud55c \uc77c\ubc18\uc801\uc778 \ud568\uc218\ub77c\uba74, \uc2a4\ub808\ub4dc\ud480\uc5d0\uc11c\uac00 \uc544\ub2c8\ub77c \uc9c1\uc811 \ud638\ucd9c(\ub2f9\uc2e0\uc774 \ucf54\ub4dc\uc5d0 \uc791\uc131\ud55c \ub300\ub85c)\ub420 \uac83\uc774\uace0, async def \ub85c \uc0dd\uc131\ub41c \ud568\uc218\ub77c\uba74 \ucf54\ub4dc\uc5d0\uc11c \ud638\ucd9c\ud560 \ub54c \uadf8 \ud568\uc218\ub97c await \ud574\uc57c \ud569\ub2c8\ub2e4. \ub2e4\uc2dc \ub9d0\ud558\uc9c0\ub9cc, \uc774\uac83\uc740 \ub2f9\uc2e0\uc774 \uc774\uac83\uc5d0 \ub300\ud574 \ucc3e\uace0\uc788\ub358 \uacbd\uc6b0\uc5d0 \ud55c\ud574 \uc720\uc6a9\ud560 \ub9e4\uc6b0 \uc138\ubd80\uc801\uc778 \uae30\uc220\uc0ac\ud56d\uc785\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0, \uc0c1\uae30\uc758 \uac00\uc774\ub4dc\ub77c\uc778\ub9cc\uc73c\ub85c\ub3c4 \ucda9\ubd84\ud560 \uac83\uc785\ub2c8\ub2e4: \ubc14\uc058\uc2e0 \uacbd\uc6b0 .","title":"\ub2e4\ub978 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218"},{"location":"benchmarks/","text":"\ubca4\uce58\ub9c8\ud06c \u00b6 \ub3c5\ub9bd\uc801\uc778 TechEmpower \ubca4\uce58\ub9c8\ud06c\uc5d0 \ub530\ub974\uba74 Uvicorn\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uac00\uc7a5 \ube60\ub978 Python \ud504\ub808\uc784\uc6cc\ud06c \uc911 \ud558\ub098 \ub85c Starlette\uacfc Uvicorn \ub2e4\uc74c\uc73c\ub85c \ub192\uc740 \uc21c\uc704\uc785\ub2c8\ub2e4. (FastAPI\uc5d0\uc11c \ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9). (*) \uadf8\ub7ec\ub098 \ubca4\uce58\ub9c8\ud06c\ub97c \ud655\uc778\ud558\uace0 \ube44\uad50\ud560 \ub54c \ub2e4\uc74c \uc0ac\ud56d\uc744 \uc5fc\ub450\uc5d0 \ub450\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ubca4\uce58\ub9c8\ud06c \ubc0f \uc18d\ub3c4 \u00b6 \ubca4\uce58\ub9c8\ud06c\ub97c \ud655\uc778\ud560 \ub54c \uc11c\ub85c \ub2e4\ub978 \uc720\ud615\uc758 \uc5ec\ub7ec \ub3c4\uad6c\ub97c \ub3d9\ub4f1\ud558\uac8c \ube44\uad50\ud558\ub294 \uac83\uc774 \uc77c\ubc18\uc801\uc785\ub2c8\ub2e4. \ud2b9\ud788 (\ub2e4\ub978 \ub9ce\uc740 \ub3c4\uad6c \uc911\uc5d0\uc11c) Uvicorn, Starlette \ubc0f FastAPI\ub97c \ud568\uaed8 \ube44\uad50\ud558\ub294 \uac83\uc744 \ud655\uc778\ud558\uae30 \uc704\ud55c \ubc29\ubc95\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ub3c4\uad6c\ub85c \ubb38\uc81c\ub97c \uac04\ub2e8\ud558\uac8c \ud574\uacb0\ud560\uc218\ub85d \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub300\ubd80\ubd84\uc758 \ubca4\uce58\ub9c8\ud06c\ub294 \ub3c4\uad6c\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \ucd94\uac00 \uae30\ub2a5\uc744 \ud14c\uc2a4\ud2b8\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uacc4\uce35 \uad6c\uc870\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. Uvicorn : ASGI \uc11c\ubc84 Starlette : (Uvicorn \uc0ac\uc6a9) \uc6f9 \ub9c8\uc774\ud06c\ub85c\ud504\ub808\uc784\uc6cc\ud06c FastAPI : (Starlette \uc0ac\uc6a9) API \uad6c\ucd95, \ub370\uc774\ud130 \uac80\uc99d \ub4f1\uc744 \uc704\ud55c \uba87 \uac00\uc9c0 \ucd94\uac00 \uae30\ub2a5\uc774 \uc788\ub294 API \ub9c8\uc774\ud06c\ub85c\ud504\ub808\uc784\uc6cc\ud06c Uvicorn : \uc11c\ubc84 \uc790\uccb4\ub97c \uc81c\uc678\ud558\uace0 \ucd94\uac00 \ucf54\ub4dc\uac00 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uace0\uc758 \uc131\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. Uvicorn\uc5d0\uc11c \uc9c1\uc811 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc989, \uc0ac\uc6a9\uc790\uc758 \ucf54\ub4dc\uc5d0\ub294 \uc801\uc5b4\ub3c4 Starlette(\ub610\ub294 FastAPI )\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \ubaa8\ub4e0 \ucf54\ub4dc\uac00 \ud3ec\ud568\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub807\uac8c \ud558\uba74 \ucd5c\uc885 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc740 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc0ac\uc6a9\ud558\uace0 \uc571 \ucf54\ub4dc\uc640 \ubc84\uadf8\ub97c \ucd5c\uc18c\ud654\ud558\ub294 \uac83\uacfc \ub3d9\uc77c\ud55c \uc624\ubc84\ud5e4\ub4dc\ub97c \uac16\uac8c \ub429\ub2c8\ub2e4. Uvicorn\uc744 \ube44\uad50\ud558\uace0 \uc2f6\ub2e4\uba74 Daphne, Hypercorn, uWSGI \ub4f1\uc758 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 \uc11c\ubc84\uc640 \ube44\uad50\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. Starlette : Uvicorn \ub2e4\uc74c\uc73c\ub85c \ucd5c\uace0\uc758 \uc131\ub2a5\uc744 \ubcf4\uc785\ub2c8\ub2e4. \uc2e4\uc81c\ub85c Starlette\ub294 Uvicorn\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc2e4\ud589\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub354 \ub9ce\uc740 \ucf54\ub4dc\ub97c \uc2e4\ud589\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 Uvicorn\ubcf4\ub2e4 \ub290\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uacbd\ub85c \ub4f1\uc744 \uae30\ubc18\uc73c\ub85c \ud558\ub294 \ub77c\uc6b0\ud305\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac04\ub2e8\ud55c \uc6f9 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc744 \uad6c\ucd95\ud560 \uc218 \uc788\ub294 \ub3c4\uad6c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. Starlette\uc744 \ube44\uad50\ud558\uace0 \uc2f6\ub2e4\uba74 Sanic, Flask, Django \ub4f1\uc758 \uc6f9 \ud504\ub808\uc784\uc6cc\ud06c(\ub610\ub294 \ub9c8\uc774\ud06c\ub85c\ud504\ub808\uc784\uc6cc\ud06c)\uc640 \ube44\uad50\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. FastAPI : Starlette\uc774 Uvicorn\uc744 \uc0ac\uc6a9\ud558\uc5ec \ube60\ub978 \uc18d\ub3c4\ub97c \uc81c\uacf5\ud558\ub294 \uac83\ucc98\ub7fc FastAPI \ub294 Starlette\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c \ubb34\ucc99 \ube60\ub978 \uc18d\ub3c4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. FastAPI\ub294 Starlette\uc5d0 \ucd94\uac00\uc801\uc73c\ub85c \ub354 \ub9ce\uc740 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \uadf8 \uae30\ub2a5\ub4e4\uc740 \ub370\uc774\ud130 \uac80\uc99d \ubc0f \uc9c1\ub82c\ud654\uc640 \uac19\uc774 API\ub97c \uad6c\ucd95\ud560 \ub54c \uac70\uc758 \ub9e4\ubc88 \ud544\uc694\ud55c \uac83\ub4e4 \uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uadf8\uac83\ub4e4\uc744 \uc0ac\uc6a9\ud558\uba74 \ubb34\ub8cc\ub85c \uc790\ub3d9 \ubb38\uc11c\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\uc790\ub3d9 \ubb38\uc11c\ub294 \uc2e4\ud589 \uc911\uc778 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0 \uc624\ubc84\ud5e4\ub4dc\ub97c \ucd94\uac00\ud558\uc9c0 \uc54a\uc73c\uba70 \uc2dc\uc791 \uc2dc \uc0dd\uc131\ub429\ub2c8\ub2e4). FastAPI\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 Starlette (\ub610\ub294 Sanic, Flask, Responder \ub4f1\uacfc \uac19\uc740 \ub2e4\ub978 \ub3c4\uad6c) \ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud55c \uacbd\uc6b0 \ubaa8\ub4e0 \ub370\uc774\ud130 \uac80\uc99d \ubc0f \uc9c1\ub82c\ud654\ub97c \uc9c1\uc811 \uad6c\ud604\ud574\uc57c \ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \ucd5c\uc885 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc740 FastAPI\ub97c \uc0ac\uc6a9\ud558\uc5ec \uad6c\ucd95\ub41c \uac83\uacfc \ub3d9\uc77c\ud55c \uc624\ubc84\ud5e4\ub4dc\ub97c \uac16\uac8c \ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0, \ub370\uc774\ud130 \uac80\uc99d \ubc0f \uc9c1\ub82c\ud654\ub294 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc791\uc131\ub41c \ucf54\ub4dc \uc911 \uac00\uc7a5 \ub9ce\uc740 \uc591\uc744 \ucc28\uc9c0\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c FastAPI\ub97c \uc0ac\uc6a9\ud558\uba74 \uac1c\ubc1c \uc2dc\uac04, \ubc84\uadf8, \ucf54\ub4dc \uc591\uc744 \uc808\uc57d\ud560 \uc218 \uc788\uc73c\uba70, \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\uc640 \ub3d9\uc77c\ud558\uac70\ub098 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI\ub97c \ube44\uad50\ud558\uace0 \uc2f6\ub2e4\uba74 Flask-apispec, NestJS, Molten \ub4f1\uacfc \uac19\uc740 \ub370\uc774\ud130 \uac80\uc99d, \uc9c1\ub82c\ud654 \ubc0f \ubb38\uc11c\ud654\ub97c \uc81c\uacf5\ud558\ub294 \uc6f9 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 \ud504\ub808\uc784\uc6cc\ud06c (\ub610\ub294 \ub3c4\uad6c \uc9d1\ud569) \uc640 \ube44\uad50\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.","title":"\ubca4\uce58\ub9c8\ud06c"},{"location":"benchmarks/#_1","text":"\ub3c5\ub9bd\uc801\uc778 TechEmpower \ubca4\uce58\ub9c8\ud06c\uc5d0 \ub530\ub974\uba74 Uvicorn\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uac00\uc7a5 \ube60\ub978 Python \ud504\ub808\uc784\uc6cc\ud06c \uc911 \ud558\ub098 \ub85c Starlette\uacfc Uvicorn \ub2e4\uc74c\uc73c\ub85c \ub192\uc740 \uc21c\uc704\uc785\ub2c8\ub2e4. (FastAPI\uc5d0\uc11c \ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9). (*) \uadf8\ub7ec\ub098 \ubca4\uce58\ub9c8\ud06c\ub97c \ud655\uc778\ud558\uace0 \ube44\uad50\ud560 \ub54c \ub2e4\uc74c \uc0ac\ud56d\uc744 \uc5fc\ub450\uc5d0 \ub450\uc5b4\uc57c \ud569\ub2c8\ub2e4.","title":"\ubca4\uce58\ub9c8\ud06c"},{"location":"benchmarks/#_2","text":"\ubca4\uce58\ub9c8\ud06c\ub97c \ud655\uc778\ud560 \ub54c \uc11c\ub85c \ub2e4\ub978 \uc720\ud615\uc758 \uc5ec\ub7ec \ub3c4\uad6c\ub97c \ub3d9\ub4f1\ud558\uac8c \ube44\uad50\ud558\ub294 \uac83\uc774 \uc77c\ubc18\uc801\uc785\ub2c8\ub2e4. \ud2b9\ud788 (\ub2e4\ub978 \ub9ce\uc740 \ub3c4\uad6c \uc911\uc5d0\uc11c) Uvicorn, Starlette \ubc0f FastAPI\ub97c \ud568\uaed8 \ube44\uad50\ud558\ub294 \uac83\uc744 \ud655\uc778\ud558\uae30 \uc704\ud55c \ubc29\ubc95\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ub3c4\uad6c\ub85c \ubb38\uc81c\ub97c \uac04\ub2e8\ud558\uac8c \ud574\uacb0\ud560\uc218\ub85d \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub300\ubd80\ubd84\uc758 \ubca4\uce58\ub9c8\ud06c\ub294 \ub3c4\uad6c\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \ucd94\uac00 \uae30\ub2a5\uc744 \ud14c\uc2a4\ud2b8\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uacc4\uce35 \uad6c\uc870\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. Uvicorn : ASGI \uc11c\ubc84 Starlette : (Uvicorn \uc0ac\uc6a9) \uc6f9 \ub9c8\uc774\ud06c\ub85c\ud504\ub808\uc784\uc6cc\ud06c FastAPI : (Starlette \uc0ac\uc6a9) API \uad6c\ucd95, \ub370\uc774\ud130 \uac80\uc99d \ub4f1\uc744 \uc704\ud55c \uba87 \uac00\uc9c0 \ucd94\uac00 \uae30\ub2a5\uc774 \uc788\ub294 API \ub9c8\uc774\ud06c\ub85c\ud504\ub808\uc784\uc6cc\ud06c Uvicorn : \uc11c\ubc84 \uc790\uccb4\ub97c \uc81c\uc678\ud558\uace0 \ucd94\uac00 \ucf54\ub4dc\uac00 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uace0\uc758 \uc131\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. Uvicorn\uc5d0\uc11c \uc9c1\uc811 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc989, \uc0ac\uc6a9\uc790\uc758 \ucf54\ub4dc\uc5d0\ub294 \uc801\uc5b4\ub3c4 Starlette(\ub610\ub294 FastAPI )\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \ubaa8\ub4e0 \ucf54\ub4dc\uac00 \ud3ec\ud568\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub807\uac8c \ud558\uba74 \ucd5c\uc885 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc740 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc0ac\uc6a9\ud558\uace0 \uc571 \ucf54\ub4dc\uc640 \ubc84\uadf8\ub97c \ucd5c\uc18c\ud654\ud558\ub294 \uac83\uacfc \ub3d9\uc77c\ud55c \uc624\ubc84\ud5e4\ub4dc\ub97c \uac16\uac8c \ub429\ub2c8\ub2e4. Uvicorn\uc744 \ube44\uad50\ud558\uace0 \uc2f6\ub2e4\uba74 Daphne, Hypercorn, uWSGI \ub4f1\uc758 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 \uc11c\ubc84\uc640 \ube44\uad50\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. Starlette : Uvicorn \ub2e4\uc74c\uc73c\ub85c \ucd5c\uace0\uc758 \uc131\ub2a5\uc744 \ubcf4\uc785\ub2c8\ub2e4. \uc2e4\uc81c\ub85c Starlette\ub294 Uvicorn\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc2e4\ud589\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub354 \ub9ce\uc740 \ucf54\ub4dc\ub97c \uc2e4\ud589\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 Uvicorn\ubcf4\ub2e4 \ub290\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uacbd\ub85c \ub4f1\uc744 \uae30\ubc18\uc73c\ub85c \ud558\ub294 \ub77c\uc6b0\ud305\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac04\ub2e8\ud55c \uc6f9 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc744 \uad6c\ucd95\ud560 \uc218 \uc788\ub294 \ub3c4\uad6c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. Starlette\uc744 \ube44\uad50\ud558\uace0 \uc2f6\ub2e4\uba74 Sanic, Flask, Django \ub4f1\uc758 \uc6f9 \ud504\ub808\uc784\uc6cc\ud06c(\ub610\ub294 \ub9c8\uc774\ud06c\ub85c\ud504\ub808\uc784\uc6cc\ud06c)\uc640 \ube44\uad50\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. FastAPI : Starlette\uc774 Uvicorn\uc744 \uc0ac\uc6a9\ud558\uc5ec \ube60\ub978 \uc18d\ub3c4\ub97c \uc81c\uacf5\ud558\ub294 \uac83\ucc98\ub7fc FastAPI \ub294 Starlette\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c \ubb34\ucc99 \ube60\ub978 \uc18d\ub3c4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. FastAPI\ub294 Starlette\uc5d0 \ucd94\uac00\uc801\uc73c\ub85c \ub354 \ub9ce\uc740 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \uadf8 \uae30\ub2a5\ub4e4\uc740 \ub370\uc774\ud130 \uac80\uc99d \ubc0f \uc9c1\ub82c\ud654\uc640 \uac19\uc774 API\ub97c \uad6c\ucd95\ud560 \ub54c \uac70\uc758 \ub9e4\ubc88 \ud544\uc694\ud55c \uac83\ub4e4 \uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uadf8\uac83\ub4e4\uc744 \uc0ac\uc6a9\ud558\uba74 \ubb34\ub8cc\ub85c \uc790\ub3d9 \ubb38\uc11c\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\uc790\ub3d9 \ubb38\uc11c\ub294 \uc2e4\ud589 \uc911\uc778 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0 \uc624\ubc84\ud5e4\ub4dc\ub97c \ucd94\uac00\ud558\uc9c0 \uc54a\uc73c\uba70 \uc2dc\uc791 \uc2dc \uc0dd\uc131\ub429\ub2c8\ub2e4). FastAPI\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 Starlette (\ub610\ub294 Sanic, Flask, Responder \ub4f1\uacfc \uac19\uc740 \ub2e4\ub978 \ub3c4\uad6c) \ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud55c \uacbd\uc6b0 \ubaa8\ub4e0 \ub370\uc774\ud130 \uac80\uc99d \ubc0f \uc9c1\ub82c\ud654\ub97c \uc9c1\uc811 \uad6c\ud604\ud574\uc57c \ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \ucd5c\uc885 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc740 FastAPI\ub97c \uc0ac\uc6a9\ud558\uc5ec \uad6c\ucd95\ub41c \uac83\uacfc \ub3d9\uc77c\ud55c \uc624\ubc84\ud5e4\ub4dc\ub97c \uac16\uac8c \ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0, \ub370\uc774\ud130 \uac80\uc99d \ubc0f \uc9c1\ub82c\ud654\ub294 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc791\uc131\ub41c \ucf54\ub4dc \uc911 \uac00\uc7a5 \ub9ce\uc740 \uc591\uc744 \ucc28\uc9c0\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c FastAPI\ub97c \uc0ac\uc6a9\ud558\uba74 \uac1c\ubc1c \uc2dc\uac04, \ubc84\uadf8, \ucf54\ub4dc \uc591\uc744 \uc808\uc57d\ud560 \uc218 \uc788\uc73c\uba70, \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\uc640 \ub3d9\uc77c\ud558\uac70\ub098 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI\ub97c \ube44\uad50\ud558\uace0 \uc2f6\ub2e4\uba74 Flask-apispec, NestJS, Molten \ub4f1\uacfc \uac19\uc740 \ub370\uc774\ud130 \uac80\uc99d, \uc9c1\ub82c\ud654 \ubc0f \ubb38\uc11c\ud654\ub97c \uc81c\uacf5\ud558\ub294 \uc6f9 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 \ud504\ub808\uc784\uc6cc\ud06c (\ub610\ub294 \ub3c4\uad6c \uc9d1\ud569) \uc640 \ube44\uad50\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.","title":"\ubca4\uce58\ub9c8\ud06c \ubc0f \uc18d\ub3c4"},{"location":"contributing/","text":"\uac1c\ubc1c - \uae30\uc5ec \u00b6 \uba3c\uc800 help FastAPI and get help \uc5d0\uc11c \uae30\ubcf8 \ubc29\ubc95\uc744 \ubcf4\uace0 \ub3c4\uc6c0\uc744 \uc5bb\ub294 \uac83\uc774 \uc88b\uc744\uc9c0\ub3c4 \ubaa8\ub985\ub2c8\ub2e4. \uac1c\ubc1c \u00b6 \uc774\ubbf8 \uc800\uc7a5\uc18c\ub97c Clone\ud588\uace0, \ucf54\ub4dc\ub97c \uc870\uc0ac\ud558\uac8c \uc54c\uace0\uc2f6\uc740 \uacbd\uc6b0\uc5d0 \ud658\uacbd \uad6c\ucd95\uc744 \uc704\ud55c \uba87 \uac00\uc9c0 \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc788\uc2b5\ub2c8\ub2e4. venv \ub97c \uc774\uc6a9\ud55c \uac00\uc0c1\ud658\uacbd \u00b6 Python\uc758 venv \ubaa8\ub4c8\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub514\ub809\ud1a0\ub9ac\uc5d0 \uac00\uc0c1 \ud658\uacbd\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4: $ python -m venv env \uadf8\ub7ec\uba74 Python \ubc14\uc774\ub108\ub9ac\ub97c \ud3ec\ud568\ud55c ./env/ \ub514\ub809\ud1a0\ub9ac\uac00 \uc0dd\uc131\ub418\uace0 \uadf8 \uace0\ub9bd\ub41c \ud658\uacbd\uc5d0 \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac00\uc0c1 \ud658\uacbd \ud65c\uc131\ud654 \u00b6 \uc0c8\ub85c\uc6b4 \ud658\uacbd\uc744 \ud65c\uc131\ud654\ud558\ub824\uba74: Linux, macOS <div class=\"termy\"> ```console $ source ./env/bin/activate ``` </div> Windows PowerShell <div class=\"termy\"> ```console $ .\\env\\Scripts\\Activate.ps1 ``` </div> Windows Bash Or if you use Bash for Windows (e.g. <a href=\"https://gitforwindows.org/\" class=\"external-link\" target=\"_blank\">Git Bash</a>): <div class=\"termy\"> ```console $ source ./env/Scripts/activate ``` </div> \ub3d9\uc791 \ud655\uc778\uc744 \uc704\ud574 \ub2e4\uc74c\uc744 \uc2e4\ud589\ud558\uc2ed\uc2dc\uc624: Linux, macOS, Windows Bash <div class=\"termy\"> ```console $ which pip some/directory/fastapi/env/bin/pip ``` </div> Windows PowerShell <div class=\"termy\"> ```console $ Get-Command pip some/directory/fastapi/env/bin/pip ``` </div> env/bin/pip \uc5d0 pip \ubc14\uc774\ub108\ub9ac\uac00 \ub098\ud0c0\ub09c\ub2e4\uba74 \uc81c\ub300\ub85c \uc791\ub3d9\ud558\uace0 \uc788\ub294 \uac83\uc785\ub2c8\ub2e4. \ud83c\udf89 \ud301 \uc774 \ud658\uacbd \uc544\ub798\uc5d0 pip \uc5d0\uc11c \uc0c8 \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\ud560 \ub54c\ub9c8\ub2e4, \uac00\uc0c1 \ud658\uacbd\uc744 \ub2e4\uc2dc \ud65c\uc131\ud654 \ud569\ub2c8\ub2e4. This makes sure that if you use a terminal program installed by that package (like `flit`), you use the one from your local environment and not any other that could be installed globally. Flit \u00b6 FastAPI \ub294 Flit \uc744 \uc0ac\uc6a9\ud558\uc5ec \ud504\ub85c\uc81d\ud2b8\ub97c \ube4c\ub4dc, \ud328\ud0a4\uc9c0, publish\ud569\ub2c8\ub2e4. \uc704\uc640 \uac19\uc774 \ud658\uacbd\uc744 \ud65c\uc131\ud654 \ud55c \ud6c4, flit \uc744 \uc124\uce58\ud569\ub2c8\ub2e4: $ pip install flit ---> 100% \uc774\uc81c \ud658\uacbd\uc744 \ub2e4\uc2dc \ud65c\uc131\ud654\ud558\uc5ec \uc124\uce58\ud55c flit \uc774 \uc804\uc5ed\uc774 \uc544\ub2cc \ud658\uacbd\uc5d0\uc11c \uc0ac\uc6a9\ub418\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \uadf8\ub9ac\uace0 flit \uc744 \uc0ac\uc6a9\ud558\uc5ec \uac1c\ubc1c \uc885\uc18d\uc131\uc744 \uc124\uce58\ud569\ub2c8\ub2e4 : Linux, macOS <div class=\"termy\"> ```console $ flit install --deps develop --symlink ---> 100% ``` </div> Windows If you are on Windows, use `--pth-file` instead of `--symlink`: <div class=\"termy\"> ```console $ flit install --deps develop --pth-file ---> 100% ``` </div> \uc774\uc81c \ubaa8\ub4e0 \uc885\uc18d\uc131\uacfc FastAPI\ub97c \ub2f9\uc2e0\uc758 \ub85c\uceec\ud658\uacbd\uc5d0 \uc124\uce58\ud569\ub2c8\ub2e4. \ub85c\uceec \ud658\uacbd\uc5d0\uc11c\uc758 FastAPI \uc0ac\uc6a9 \u00b6 FastAPI\ub97c \uac00\uc838\uc624\uace0 \uc0ac\uc6a9\ud558\ub294 Python \ud30c\uc77c\uc744 \ub9cc\ub4e4\uc5b4, \ub85c\uceec \ud658\uacbd\uc5d0 \uc124\uce58\ub41c Python\uc73c\ub85c \uc2e4\ud589\ud558\uba74, \ub85c\uceec FastAPI \uc18c\uc2a4\ucf54\ub4dc\uac00 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 --symlink (Windows\uc758 \uacbd\uc6b0 --pth-file )\uc5d0 \uc124\uce58\ub418\uc5b4\uc788\ub294 \ub85c\uceec FastAPI \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc5c5\ub370\uc774\ud2b8\ud55c \uacbd\uc6b0, Python \ud30c\uc77c\uc744 \ub2e4\uc2dc \uc2e4\ud589\ud558\uba74, \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc758 FastAPI\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774\ub7f0 \ubc29\ubc95\uc73c\ub85c \ub85c\uceec\ubc84\uc804\uc744 \"install\" \ud558\uc9c0 \uc54a\uace0 \ubaa8\ub4e0 \ubcc0\uacbd \uc0ac\ud56d\uc744 \ud14c\uc2a4\ud2b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Format \u00b6 \ubaa8\ub4e0 \ucf54\ub4dc\ub97c \ud3ec\ub9f7\ud558\uace0 \uc9c0\uc6cc\uc8fc\ub294 \uc2a4\ud06c\ub9bd\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4 : $ bash scripts/format.sh \ub610\ud55c \ubaa8\ub4e0 \uac00\uc838\uc624\uae30\ub97c \uc790\ub3d9\uc73c\ub85c \uc815\ub82c\ud569\ub2c8\ub2e4. \uc62c\ubc14\ub974\uac8c \uc815\ub82c\ud558\ub824\uba74, \uc704 \uc139\uc158\uc758 \uba85\ub839\uc778 --symlink (Windows\uc758 \uacbd\uc6b0 --pth-file )\uc744 \uc0ac\uc6a9\ud558\uc5ec FastAPI\ub97c \ub85c\uceec\ud658\uacbd\uc5d0 \uc124\uce58\ud574\uc57c \ud569\ub2c8\ub2e4. Format imports \u00b6 \uc774\uc678\uc5d0\ub3c4 \ubaa8\ub4e0 import\ub97c \ud3ec\ub9f7\ud558\uace0 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc740 import\uac00 \uc5c6\ub294\uc9c0 \ud655\uc778\ud558\ub294 \uc2a4\ud06c\ub9bd\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4: $ bash scripts/format-imports.sh \uc5ec\ub7ec \uba85\ub839\uc744 \ucc28\ub840\ub85c \uc2e4\ud589\ud558\uace0 \ub9ce\uc740 \ud30c\uc77c\uc744 \uc218\uc815\ud558\uace0 \ub418\ub3cc\ub9ac\uae30 \ub54c\ubb38\uc5d0 \uc2dc\uac04\uc774 \uc870\uae08 \ub354 \uac78\ub9bd\ub2c8\ub2e4. \uadf8\ub798\uc11c scripts/format.sh \ub97c \uc790\uc8fc \uc0ac\uc6a9\ud558\uace0, scripts/format-imports.sh \ub294 \ucee4\ubc0b\ud558\uae30 \uc804\uc5d0 \uc2e4\ud589\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4 . Docs \u00b6 \uba3c\uc800 \uc704\uc640 \uac19\uc774 \ud658\uacbd\uc744 \uc124\uc815\ud55c\ub2e4\uba74 \ud544\uc694\ud55c \ubaa8\ub4e0 \ud328\ud0a4\uc9c0\uac00 \uc124\uce58\ub429\ub2c8\ub2e4. \ubb38\uc11c\ud654 \ud558\ub294\ub370 MkDocs \ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ubc88\uc5ed\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud55c \ucd94\uac00 \ub3c4\uad6c / \uc2a4\ud06c\ub9bd\ud2b8\uc778 ./scripts/docs.py \uac00 \uc788\uc2b5\ub2c8\ub2e4. \ud301 ./scripts/docs.py \uc758 \ucf54\ub4dc\ub97c \ubcfc \ud544\uc694\ub294 \uc5c6\uace0, \uadf8\ub0e5 \uba85\ub839\ud589\uc5d0\uc11c \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4. \ubaa8\ub4e0 \ubb38\uc11c\ub294 Markdown \ud615\uc2dd\uc73c\ub85c ./docs/en/ \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \ub9ce\uc740 \ud29c\ud1a0\ub9ac\uc5bc\uc740 \ucf54\ub4dc \ube14\ub85d\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0, \uc774\ub7ec\ud55c \ucf54\ub4dc \ube14\ub85d\ub4e4\uc740 \uc788\ub294 \uadf8\ub300\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\ub294 \uc644\uc804\ud55c \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \uc0ac\uc2e4, \uc774\ub7ec\ud55c \ucf54\ub4dc \ube14\ub85d\ub4e4\uc740 Markdown \ub0b4\ubd80\uc5d0 \uc791\uc131\ub418\uc9c0 \uc54a\uace0, ./docs_src/ \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\ub294 Python \ud30c\uc77c\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud574\ub2f9 Python \ud30c\uc77c\uc740 \uc0ac\uc774\ud2b8\ub97c \uc0dd\uc131\ud560 \ub54c \ubb38\uc11c\uc5d0 \ud3ec\ud568/\uc0bd\uc785\ub429\ub2c8\ub2e4. Docs for tests \u00b6 \ub300\ubd80\ubd84\uc758 \ud14c\uc2a4\ud2b8\ub294 \uc2e4\uc81c \ubb38\uc11c\uc758 \uc608\uc81c \uc18c\uc2a4 \ud30c\uc77c\uc5d0 \ub300\ud574 \uc2e4\ud589\ub429\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \ub2e4\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 : \ubb38\uc11c\uac00 \ucd5c\uc2e0 \uc0c1\ud0dc\uc778\uac00? \ubb38\uc11c\uc758 \uc608\uc81c\ub97c \uadf8\ub300\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\ub294\uac00? \ub300\ubd80\ubd84\uc758 \uae30\ub2a5\uc774 \ubb38\uc11c\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\uba70, \ud14c\uc2a4\ud2b8 \ubc94\uc704\uc5d0\uc11c \ubcf4\uc7a5\ub418\ub294\uac00? \ub85c\uceec \uac1c\ubc1c \uc911\uc5d0, \uc0ac\uc774\ud2b8\ub97c \uad6c\ucd95\ud558\uc5ec \ubcc0\uacbd \uc0ac\ud56d\uc758 \uc720\ubb34\ub97c \ud655\uc778\ud558\ub294 \uc2a4\ud06c\ub9bd\ud2b8\uac00 live-reloading \ub429\ub2c8\ub2e4: $ python ./scripts/docs.py live <span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008 <span style=\"color: green;\">[INFO]</span> Start watching changes <span style=\"color: green;\">[INFO]</span> Start detecting changes \ubb38\uc11c\ub294 http://127.0.0.1:8008 \uc5d0\uc11c \uc81c\uacf5\ub429\ub2c8\ub2e4. \uc774 \ubc29\ubc95\uc73c\ub85c, \ubb38\uc11c/\uc18c\uc2a4 \ud30c\uc77c \uc744 \ud3b8\uc9d1\ud558\uace0 \ubcc0\uacbd\uc0ac\ud56d\uc744 \uc2e4\uc2dc\uac04\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. Typer CLI (optional) \u00b6 ./scripts/docs.py \uc5d0\uc11c\ub294 python \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc9c1\uc811 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \uc124\uba85\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Typer CLI \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc124\uce58\ud55c\ub2e4\uba74, \uc124\uce58\uac00 \uc644\ub8cc\ub41c \ud6c4 \ud130\ubbf8\ub110\uc5d0\uc11c \uc790\ub3d9 \uc644\uc131 \uae30\ub2a5\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc744 \uc774\uc6a9\ud558\uc5ec Typer CLI\ub97c \uc124\uce58\ub97c \uc644\ub8cc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: $ typer --install-completion zsh completion installed in /home/user/.bashrc. Completion will take effect once you restart the terminal. Apps and docs at the same time \u00b6 \ub2e4\uc74c\uacfc \uac19\uc774 \uc0d8\ud50c\uc744 \uc2e4\ud589\ud558\uba74 : $ uvicorn tutorial001:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Uvicorn\uc740 \uae30\ubcf8 \uac12\uc73c\ub85c port 8000 \uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0, port 8008 \uc758 \ubb38\uc11c\uc640 \ucda9\ub3cc\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Translations \u00b6 \ubc88\uc5ed\uc5d0 \ub300\ud55c \ub3c4\uc6c0\uc740 \ub9e4\uc6b0 \ud658\uc601\ud569\ub2c8\ub2e4! \uadf8\ub9ac\uace0 \uc774\uac83\uc740 \ucee4\ubba4\ub2c8\ud2f0\uc758 \ub3c4\uc6c0 \uc5c6\uc774 \uc774\ub8f0 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ud83c\udf0e \ud83d\ude80 \ubc88\uc5ed\uc744 \uc9c0\uc6d0\ud558\uae30 \uc704\ud55c \uc808\ucc28\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. Tips and guidelines \u00b6 \ub2f9\uc2e0\uc758 \uc5b8\uc5b4\ub97c existing pull requests \uc5d0\uc11c \ud655\uc778\ud558\uace0, \ubcc0\uacbd\uc744 \uc694\uccad\ud558\uac70\ub098 \uc2b9\uc778\ud558\ub294 \ub9ac\ubdf0\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4. \ud301 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 pull requests\uc5d0 add comments with change suggestions \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Check the docs about <a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-request-reviews\" class=\"external-link\" target=\"_blank\">adding a pull request review</a> to approve it or request changes. issues \uc5d0\uc11c \ub2f9\uc2e0\uc758 \uc5b8\uc5b4\uc5d0 \ub300\ud55c \ubc88\uc5ed\uc774 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \ubc88\uc5ed\ud558\ub294 \ud398\uc774\uc9c0 \ub2f9 \ud55c \uac1c\uc758 pull request\ub97c \ucd94\uac00\ud558\uc2ed\uc2dc\uc624. \uc774\uac83\uc740 \ub2e4\ub978 \uc0ac\uc6a9\uc790\uac00 \uac80\ud1a0\ud558\uae30 \uc26c\uc6cc\uc9d1\ub2c8\ub2e4. \uc81c\uac00 \ud560 \uc218 \uc5c6\ub294 \uc5b8\uc5b4\uc758 \uacbd\uc6b0, \ubcd1\ud569\ud558\uae30 \uc804\uc5d0 \ub2e4\ub978 \uc5ec\ub7ec \uc0ac\uc6a9\uc790\uac00 \ubc88\uc5ed\uc744 \uac80\ud1a0\ud560 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9ac\uaca0\uc2b5\ub2c8\ub2e4. \uc790\uc2e0\uc758 \uc5b8\uc5b4\uac00 \ubc88\uc5ed\ub418\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uace0, \uadf8\uac83\uc5d0 \ub9ac\ubdf0\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9ac\ubdf0\ub294 \ubc88\uc5ed\uc774 \uc798 \uc774\ub8e8\uc5b4\uc84c\ub294\uc9c0 \ud655\uc778 \ud560 \uc218 \uc788\uace0, \uadf8\uac83\uc744 \ubcd1\ud569\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac19\uc740 Python \uc608\uc2dc\ub97c \uc0ac\uc6a9\ud558\uace0 \ubb38\uc11c\ub0b4\uc5d0 \uc788\ub294 \ud14d\uc2a4\ud2b8\ub9cc\uc744 \ubc88\uc5ed\ud569\ub2c8\ub2e4. \uc774 \uc791\uc5c5\uc911\uc5d0 \uc544\ubb34\uac83\ub3c4 \ubcc0\uacbd\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uac19\uc740 \uc774\ubbf8\uc9c0, \ud30c\uc77c, \ub9c1\ud06c\ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. \uc774 \uc791\uc5c5\uc911\uc5d0 \uc544\ubb34\uac83\ub3c4 \ubcc0\uacbd\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ubc88\uc5ed\uc744 \uc6d0\ud558\ub294 \uc5b8\uc5b4\uc758 \ub450 \ubb38\uc790\ub85c \ub41c \ucf54\ub4dc\ub97c \ud655\uc778\ud558\ub824\uba74 \ud45c List of ISO 639-1 codes \ub97c \uc774\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Existing language \u00b6 \uc2a4\ud398\uc778\uc5b4\ucc98\ub7fc \uc774\ubbf8 \uc77c\ubd80 \ud398\uc774\uc9c0\uac00 \ubc88\uc5ed\ub418\uc5b4 \uc788\ub294 \uc5b8\uc5b4\uc758 \ubc88\uc5ed\uc744 \ucd94\uac00\ud558\uace0 \uc2f6\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4. \uc2a4\ud398\uc778\uc5b4\uc758 \uacbd\uc6b0, \ub450 \ubb38\uc790\ub85c \ub41c \ucf54\ub4dc\uac00 es \uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc2a4\ud398\uc778\uc5b4\uc758 \ub514\ub809\ud1a0\ub9ac\ub294 docs/es/ \uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \ud301 \uba54\uc778 (\"\uacf5\uc2dd\") \uc5b8\uc5b4\ub294 \uc601\uc5b4\uc774\uace0, docs/en/ \uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \uc2a4\ud398\uc778\uc5b4\ub85c \uc791\uc131\ub41c \ubb38\uc11c\ub97c \ub77c\uc774\ube0c \uc11c\ubc84\uc5d0\uc11c \uc2e4\ud589\ud569\ub2c8\ub2e4 : // Use the command \"live\" and pass the language code as a CLI argument $ python ./scripts/docs.py live es <span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008 <span style=\"color: green;\">[INFO]</span> Start watching changes <span style=\"color: green;\">[INFO]</span> Start detecting changes \uc774\uc81c http://127.0.0.1:8008 \uc744 \uc5f4\uc5b4 \uc218\uc815\ud55c \ub0b4\uc6a9\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ubb38\uc11c \uc6f9 \uc0ac\uc774\ud2b8\ub97c \ubcf4\uba74 \ubaa8\ub4e0 \uc5b8\uc5b4\uc5d0 \ubaa8\ub4e0 \ud398\uc774\uc9c0\uac00 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc77c\ubd80 \ud398\uc774\uc9c0\ub294 \ubc88\uc5ed\ub418\uc9c0 \uc54a\uace0, \ub204\ub77d\ub41c \ubc88\uc5ed\uc5d0 \ub300\ud55c \uc54c\ub9bc\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub7f0 \ubc29\ubc95\uc73c\ub85c \ub85c\uceec\uc5d0\uc11c \uc2e4\ud589\ud558\uba74 \ubc88\uc5ed\ub41c \ud398\uc774\uc9c0\ub9cc \ud45c\uc2dc\ub429\ub2c8\ub2e4. Now let's say that you want to add a translation for the section Features . \ub2e4\uc74c \ud30c\uc77c\uc744 \ubcf5\uc0ac\ud569\ub2c8\ub2e4 : docs/en/docs/features.md \ubc88\uc5ed\ud558\uace0 \uc2f6\uc740 \uc5b8\uc5b4\ub97c \uc704\ud574\uc11c \uc774\uac83\uc744 \uc815\ud655\ud788 \uac19\uc740 \uc704\uce58\uc5d0 \ubd99\uc5ec \ub123\uc2b5\ub2c8\ub2e4. \uc608\ub97c\ub4e4\uba74: docs/es/docs/features.md \ud301 \uacbd\ub85c\uc640 \ud30c\uc77c\uc758 \uc720\uc77c\ud55c \ubcc0\uacbd \uc0ac\ud56d\uc740 en \uc5d0\uc11c es \ub85c \ubc14\uafb8\ub294 \uc5b8\uc5b4\ucf54\ub4dc\uc785\ub2c8\ub2e4. \uc774\uc81c \uc601\uc5b4\ub85c\ub41c MkDocs config file \uc744 \uc5fd\ub2c8\ub2e4 : docs/en/docs/mkdocs.yml config file\uc5d0\uc11c docs/features.md \uc758 \uc704\uce58\ub97c \ucc3e\uc2b5\ub2c8\ub2e4. : site_name: FastAPI # More stuff nav: - FastAPI: index.md - Languages: - en: / - es: /es/ - features.md \ud3b8\uc9d1\ud558\uace0\uc790 \ud558\ub294 \uc5b8\uc5b4\uc758 MkDocs \uad6c\uc131 \ud30c\uc77c\uc744 \uc5fd\ub2c8\ub2e4, \uc608\ub97c \ub4e4\uba74: docs/es/docs/mkdocs.yml \uadf8\uac83\uc744 \uc601\uc5b4\uc640 \ub611\uac19\uc740 \uc704\uce58\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4, \uc608\ub97c \ub4e4\uba74: site_name: FastAPI # More stuff nav: - FastAPI: index.md - Languages: - en: / - es: /es/ - features.md \ub2e4\ub978 \ud56d\ubaa9\uc774 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub294 \ubc88\uc5ed\uc744 \ud3ec\ud568\ud55c \uc0c8\ub85c\uc6b4 \ud56d\ubaa9\uc774 \uc601\uc5b4 \ubc84\uc804\uacfc \ub3d9\uc77c\ud55c \uc21c\uc11c\ub85c\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \ube0c\ub77c\uc6b0\uc800\uc5d0 \uc811\uc18d\ud558\uba74 \ubb38\uc11c\uc5d0 \uc0c8\ub85c\uc6b4 \uc139\uc158\uc774 \ud45c\uc2dc\ub418\uc5b4 \uc788\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83c\udf89 \uc774\uc81c \ubaa8\ub4e0 \uac83\uc744 \ubc88\uc5ed\ud560 \uc218 \uc788\uace0, \ud30c\uc77c\uc758 \uc800\uc7a5 \uc0c1\ud0dc\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. New Language \u00b6 \uc544\uc9c1 \ubc88\uc5ed\ub418\uc9c0 \uc54a\uc740 \uc5b8\uc5b4\uc758 \ubc88\uc5ed\uc73c\ub85c \ucd94\uac00\ud558\uace0 \uc2f6\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4. Creole\uc5b4 \ubc88\uc5ed\uc744 \ucd94\uac00\ud558\uace0 \uc2f6\uc9c0\ub9cc, \uc544\uc9c1 \ubb38\uc11c\uc5d0 \uc5c6\uc2b5\ub2c8\ub2e4. \uc704\uc758 \ub9c1\ud06c\ub97c \ud655\uc778\ud558\uba74 \"Creole\"\uc758 \ubb38\uc790\ucf54\ub4dc\ub294 ht \uc785\ub2c8\ub2e4. \ub2e4\uc74c \ub2e8\uacc4\ub294 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc2e4\ud589\ud558\uc5ec \uc0c8\ub85c\uc6b4 \ubc88\uc5ed \ub514\ub809\ud1a0\ub9ac\ub97c \uc0dd\uc131\ud558\ub294 \uac83\uc785\ub2c8\ub2e4 : // Use the command new-lang, pass the language code as a CLI argument $ python ./scripts/docs.py new-lang ht Successfully initialized: docs/ht Updating ht Updating en \uc774\uc81c \ucf54\ub4dc\ud3b8\uc9d1\uae30\uc5d0\uc11c \uc0c8\ub85c \uc0dd\uc131\ub41c docs/ht/ \ub514\ub809\ud1a0\ub9ac\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud301 Create a first pull request with just this, to set up the configuration for the new language, before adding translations. \uc774\ub807\uac8c \ud558\uba74 \uccab \ubc88\uc9f8 \ud398\uc774\uc9c0\uc5d0\uc11c \uc791\uc5c5\ud558\ub294 \ub3d9\uc548 \ub204\uad70\uac00 \ub2e4\ub978 \ud398\uc774\uc9c0 \uc791\uc5c5\uc744 \ub3c4\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\ude80 \uba3c\uc800 \uba54\uc778 \ud398\uc774\uc9c0\uc758 docs/ht/index.md \ub97c \ubc88\uc5ed\ud569\ub2c8\ub2e4. \uadf8 \ud6c4 \"\uae30\uc874\uc758 \uc5b8\uc5b4\"\uc5d0 \ub300\ud55c \uc774\uc804\uc758 \uc9c0\uc2dc\ub97c \uacc4\uc18d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. New Language not supported \u00b6 \ub77c\uc774\ube0c \uc11c\ubc84 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc2e4\ud589\ud560 \ub54c \uc9c0\uc6d0\ub418\uc9c0 \uc54a\ub294 \uc5b8\uc5b4\uc5d0 \ub300\ud55c \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4 : raise TemplateNotFound(template) jinja2.exceptions.TemplateNotFound: partials/language/xx.html \uc774\uac83\uc740 \ud14c\ub9c8\uac00 \ud574\ub2f9 \uc5b8\uc5b4\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4 (\uc774 \uacbd\uc6b0, xx \uc758 \ub450 \ubb38\uc790\ub85c \ub41c \uac00\uc9dc \ucf54\ub4dc). \uadf8\ub7ec\ub098 \uac71\uc815\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624, \ud14c\ub9c8 \uc5b8\uc5b4\ub97c \uc601\uc5b4\ub85c \uc124\uc815\ud558\uc5ec \ubb38\uc11c\uc758 \ub0b4\uc6a9\uc744 \ubc88\uc5ed\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8 \ud544\uc694\uac00 \uc788\ub294 \uacbd\uc6b0, \uc0c8\ub85c\uc6b4 \uc5b8\uc5b4\uc758 mkdocs.yml \ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \ud3b8\uc9d1\ud558\uc2ed\uc2dc\uc624: site_name: FastAPI # More stuff theme: # More stuff language: xx \uc5b8\uc5b4\ub97c xx (\ub2f9\uc2e0\uc758 \uc5b8\uc5b4 \ucf54\ub4dc) \uc5d0\uc11c en \uc73c\ub85c \ubcc0\uacbd\ud569\ub2c8\ub2e4. \uadf8 \ud6c4 \ub77c\uc774\ube0c \uc11c\ubc84\ub97c \ub2e4\uc2dc \uc2dc\uc791\ud569\ub2c8\ub2e4. Preview the result \u00b6 ./scripts/docs.py \uc2a4\ud06c\ub9bd\ud2b8\ub97c live \uba85\ub839\uc73c\ub85c \uc2e4\ud589\ud558\uba74 \ud604\uc7ac\uc758 \uc5b8\uc5b4\uc5d0\uc11c \uc774\uc6a9\uac00\ub2a5\ud55c \ud30c\uc77c\uacfc \ubc88\uc5ed\ub9cc \ud45c\uc2dc\ub429\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc77c\ub2e8 \uc2e4\ud589\ub418\uba74 \uc628\ub77c\uc778\uc5d0\uc11c \ubcf4\uc774\ub294 \uac83\uacfc \uac19\uc774 \ubaa8\ub450 \ud14c\uc2a4\ud2b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574, \uba3c\uc800 \ubaa8\ub4e0 \ubb38\uc11c\ub97c \ube4c\ub4dc\ud569\ub2c8\ub2e4 : // Use the command \"build-all\", this will take a bit $ python ./scripts/docs.py build-all Updating es Updating en Building docs for: en Building docs for: es Successfully built docs for: es Copying en index.md to README.md \uc774\uc81c \uc5b8\uc5b4\ub9c8\ub2e4 ./docs_build/ \uc5d0 \uc788\ub294 \ubaa8\ub4e0 \ubb38\uc11c\uac00 \uc0dd\uc131\ub429\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\ub294 \ubc88\uc5ed\uc774 \ub204\ub77d\ub41c \ud30c\uc77c\uc744 \ucd94\uac00\ud558\ub294 \uac83\uacfc \"\uc774 \ud30c\uc77c\uc5d0\ub294 \ubc88\uc5ed\uc774 \uc544\uc9c1 \uc5c6\uc2b5\ub2c8\ub2e4\" \ub77c\ub294 \uba54\ubaa8\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uadf8 \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c \uc544\ubb34\uac83\ub3c4 \ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \uac01 \uc5b8\uc5b4\uc5d0 \ub300\ud55c \ubaa8\ub4e0 \ub3c5\ub9bd MkDocs \uc0ac\uc774\ud2b8\ub97c \ube4c\ub4dc\ud558\uc5ec \uadf8\uac83\ub4e4\uc744 \uacb0\ud569\ud558\uace0 ./site/ \uc5d0\uc11c \uc0dd\uc131\ud55c\ub2e4. \uadf8\ub7ec\uba74 serve \uba85\ub839\uc73c\ub85c \uadf8\uac83\uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: // Use the command \"serve\" after running \"build-all\" $ python ./scripts/docs.py serve Warning: this is a very simple server. For development, use mkdocs serve instead. This is here only to preview a site with translations already built. Make sure you run the build-all command first. Serving at: http://127.0.0.1:8008 Tests \u00b6 \ub85c\uceec\uc5d0\uc11c \ubaa8\ub4e0 \ucf54\ub4dc\ub97c \ud14c\uc2a4\ud2b8\ud558\uace0 HTML\uc5d0\uc11c coverage \ubcf4\uace0\uc11c\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud55c \uc2a4\ud06c\ub9bd\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4: $ bash scripts/test-cov-html.sh \uc774 \uba85\ub839\uc740 ./htmlcov/ \ub514\ub809\ud1a0\ub9ac\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c ./htmlcov/index.html \ud30c\uc77c\uc744 \uc5f4\uba74, \ud14c\uc2a4\ud2b8\uc5d0 \ud3ec\ud568\ub41c \ucf54\ub4dc\uc758 \uc601\uc5ed\uc744 \ub300\ud654\uc2dd\uc73c\ub85c \ud0d0\uc0c9\ud560 \uc218 \uc788\uace0 \ub204\ub77d\ub41c \uc601\uc5ed\uc774 \uc788\ub294\uc9c0 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uac1c\ubc1c - \uae30\uc5ec"},{"location":"contributing/#-","text":"\uba3c\uc800 help FastAPI and get help \uc5d0\uc11c \uae30\ubcf8 \ubc29\ubc95\uc744 \ubcf4\uace0 \ub3c4\uc6c0\uc744 \uc5bb\ub294 \uac83\uc774 \uc88b\uc744\uc9c0\ub3c4 \ubaa8\ub985\ub2c8\ub2e4.","title":"\uac1c\ubc1c - \uae30\uc5ec"},{"location":"contributing/#_1","text":"\uc774\ubbf8 \uc800\uc7a5\uc18c\ub97c Clone\ud588\uace0, \ucf54\ub4dc\ub97c \uc870\uc0ac\ud558\uac8c \uc54c\uace0\uc2f6\uc740 \uacbd\uc6b0\uc5d0 \ud658\uacbd \uad6c\ucd95\uc744 \uc704\ud55c \uba87 \uac00\uc9c0 \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uac1c\ubc1c"},{"location":"contributing/#venv","text":"Python\uc758 venv \ubaa8\ub4c8\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub514\ub809\ud1a0\ub9ac\uc5d0 \uac00\uc0c1 \ud658\uacbd\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4: $ python -m venv env \uadf8\ub7ec\uba74 Python \ubc14\uc774\ub108\ub9ac\ub97c \ud3ec\ud568\ud55c ./env/ \ub514\ub809\ud1a0\ub9ac\uac00 \uc0dd\uc131\ub418\uace0 \uadf8 \uace0\ub9bd\ub41c \ud658\uacbd\uc5d0 \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"venv\ub97c \uc774\uc6a9\ud55c \uac00\uc0c1\ud658\uacbd"},{"location":"contributing/#_2","text":"\uc0c8\ub85c\uc6b4 \ud658\uacbd\uc744 \ud65c\uc131\ud654\ud558\ub824\uba74: Linux, macOS <div class=\"termy\"> ```console $ source ./env/bin/activate ``` </div> Windows PowerShell <div class=\"termy\"> ```console $ .\\env\\Scripts\\Activate.ps1 ``` </div> Windows Bash Or if you use Bash for Windows (e.g. <a href=\"https://gitforwindows.org/\" class=\"external-link\" target=\"_blank\">Git Bash</a>): <div class=\"termy\"> ```console $ source ./env/Scripts/activate ``` </div> \ub3d9\uc791 \ud655\uc778\uc744 \uc704\ud574 \ub2e4\uc74c\uc744 \uc2e4\ud589\ud558\uc2ed\uc2dc\uc624: Linux, macOS, Windows Bash <div class=\"termy\"> ```console $ which pip some/directory/fastapi/env/bin/pip ``` </div> Windows PowerShell <div class=\"termy\"> ```console $ Get-Command pip some/directory/fastapi/env/bin/pip ``` </div> env/bin/pip \uc5d0 pip \ubc14\uc774\ub108\ub9ac\uac00 \ub098\ud0c0\ub09c\ub2e4\uba74 \uc81c\ub300\ub85c \uc791\ub3d9\ud558\uace0 \uc788\ub294 \uac83\uc785\ub2c8\ub2e4. \ud83c\udf89 \ud301 \uc774 \ud658\uacbd \uc544\ub798\uc5d0 pip \uc5d0\uc11c \uc0c8 \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\ud560 \ub54c\ub9c8\ub2e4, \uac00\uc0c1 \ud658\uacbd\uc744 \ub2e4\uc2dc \ud65c\uc131\ud654 \ud569\ub2c8\ub2e4. This makes sure that if you use a terminal program installed by that package (like `flit`), you use the one from your local environment and not any other that could be installed globally.","title":"\uac00\uc0c1 \ud658\uacbd \ud65c\uc131\ud654"},{"location":"contributing/#flit","text":"FastAPI \ub294 Flit \uc744 \uc0ac\uc6a9\ud558\uc5ec \ud504\ub85c\uc81d\ud2b8\ub97c \ube4c\ub4dc, \ud328\ud0a4\uc9c0, publish\ud569\ub2c8\ub2e4. \uc704\uc640 \uac19\uc774 \ud658\uacbd\uc744 \ud65c\uc131\ud654 \ud55c \ud6c4, flit \uc744 \uc124\uce58\ud569\ub2c8\ub2e4: $ pip install flit ---> 100% \uc774\uc81c \ud658\uacbd\uc744 \ub2e4\uc2dc \ud65c\uc131\ud654\ud558\uc5ec \uc124\uce58\ud55c flit \uc774 \uc804\uc5ed\uc774 \uc544\ub2cc \ud658\uacbd\uc5d0\uc11c \uc0ac\uc6a9\ub418\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \uadf8\ub9ac\uace0 flit \uc744 \uc0ac\uc6a9\ud558\uc5ec \uac1c\ubc1c \uc885\uc18d\uc131\uc744 \uc124\uce58\ud569\ub2c8\ub2e4 : Linux, macOS <div class=\"termy\"> ```console $ flit install --deps develop --symlink ---> 100% ``` </div> Windows If you are on Windows, use `--pth-file` instead of `--symlink`: <div class=\"termy\"> ```console $ flit install --deps develop --pth-file ---> 100% ``` </div> \uc774\uc81c \ubaa8\ub4e0 \uc885\uc18d\uc131\uacfc FastAPI\ub97c \ub2f9\uc2e0\uc758 \ub85c\uceec\ud658\uacbd\uc5d0 \uc124\uce58\ud569\ub2c8\ub2e4.","title":"Flit"},{"location":"contributing/#fastapi","text":"FastAPI\ub97c \uac00\uc838\uc624\uace0 \uc0ac\uc6a9\ud558\ub294 Python \ud30c\uc77c\uc744 \ub9cc\ub4e4\uc5b4, \ub85c\uceec \ud658\uacbd\uc5d0 \uc124\uce58\ub41c Python\uc73c\ub85c \uc2e4\ud589\ud558\uba74, \ub85c\uceec FastAPI \uc18c\uc2a4\ucf54\ub4dc\uac00 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 --symlink (Windows\uc758 \uacbd\uc6b0 --pth-file )\uc5d0 \uc124\uce58\ub418\uc5b4\uc788\ub294 \ub85c\uceec FastAPI \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc5c5\ub370\uc774\ud2b8\ud55c \uacbd\uc6b0, Python \ud30c\uc77c\uc744 \ub2e4\uc2dc \uc2e4\ud589\ud558\uba74, \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc758 FastAPI\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774\ub7f0 \ubc29\ubc95\uc73c\ub85c \ub85c\uceec\ubc84\uc804\uc744 \"install\" \ud558\uc9c0 \uc54a\uace0 \ubaa8\ub4e0 \ubcc0\uacbd \uc0ac\ud56d\uc744 \ud14c\uc2a4\ud2b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ub85c\uceec \ud658\uacbd\uc5d0\uc11c\uc758 FastAPI \uc0ac\uc6a9"},{"location":"contributing/#format","text":"\ubaa8\ub4e0 \ucf54\ub4dc\ub97c \ud3ec\ub9f7\ud558\uace0 \uc9c0\uc6cc\uc8fc\ub294 \uc2a4\ud06c\ub9bd\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4 : $ bash scripts/format.sh \ub610\ud55c \ubaa8\ub4e0 \uac00\uc838\uc624\uae30\ub97c \uc790\ub3d9\uc73c\ub85c \uc815\ub82c\ud569\ub2c8\ub2e4. \uc62c\ubc14\ub974\uac8c \uc815\ub82c\ud558\ub824\uba74, \uc704 \uc139\uc158\uc758 \uba85\ub839\uc778 --symlink (Windows\uc758 \uacbd\uc6b0 --pth-file )\uc744 \uc0ac\uc6a9\ud558\uc5ec FastAPI\ub97c \ub85c\uceec\ud658\uacbd\uc5d0 \uc124\uce58\ud574\uc57c \ud569\ub2c8\ub2e4.","title":"Format"},{"location":"contributing/#format-imports","text":"\uc774\uc678\uc5d0\ub3c4 \ubaa8\ub4e0 import\ub97c \ud3ec\ub9f7\ud558\uace0 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc740 import\uac00 \uc5c6\ub294\uc9c0 \ud655\uc778\ud558\ub294 \uc2a4\ud06c\ub9bd\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4: $ bash scripts/format-imports.sh \uc5ec\ub7ec \uba85\ub839\uc744 \ucc28\ub840\ub85c \uc2e4\ud589\ud558\uace0 \ub9ce\uc740 \ud30c\uc77c\uc744 \uc218\uc815\ud558\uace0 \ub418\ub3cc\ub9ac\uae30 \ub54c\ubb38\uc5d0 \uc2dc\uac04\uc774 \uc870\uae08 \ub354 \uac78\ub9bd\ub2c8\ub2e4. \uadf8\ub798\uc11c scripts/format.sh \ub97c \uc790\uc8fc \uc0ac\uc6a9\ud558\uace0, scripts/format-imports.sh \ub294 \ucee4\ubc0b\ud558\uae30 \uc804\uc5d0 \uc2e4\ud589\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4 .","title":"Format imports"},{"location":"contributing/#docs","text":"\uba3c\uc800 \uc704\uc640 \uac19\uc774 \ud658\uacbd\uc744 \uc124\uc815\ud55c\ub2e4\uba74 \ud544\uc694\ud55c \ubaa8\ub4e0 \ud328\ud0a4\uc9c0\uac00 \uc124\uce58\ub429\ub2c8\ub2e4. \ubb38\uc11c\ud654 \ud558\ub294\ub370 MkDocs \ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ubc88\uc5ed\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud55c \ucd94\uac00 \ub3c4\uad6c / \uc2a4\ud06c\ub9bd\ud2b8\uc778 ./scripts/docs.py \uac00 \uc788\uc2b5\ub2c8\ub2e4. \ud301 ./scripts/docs.py \uc758 \ucf54\ub4dc\ub97c \ubcfc \ud544\uc694\ub294 \uc5c6\uace0, \uadf8\ub0e5 \uba85\ub839\ud589\uc5d0\uc11c \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4. \ubaa8\ub4e0 \ubb38\uc11c\ub294 Markdown \ud615\uc2dd\uc73c\ub85c ./docs/en/ \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \ub9ce\uc740 \ud29c\ud1a0\ub9ac\uc5bc\uc740 \ucf54\ub4dc \ube14\ub85d\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0, \uc774\ub7ec\ud55c \ucf54\ub4dc \ube14\ub85d\ub4e4\uc740 \uc788\ub294 \uadf8\ub300\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\ub294 \uc644\uc804\ud55c \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \uc0ac\uc2e4, \uc774\ub7ec\ud55c \ucf54\ub4dc \ube14\ub85d\ub4e4\uc740 Markdown \ub0b4\ubd80\uc5d0 \uc791\uc131\ub418\uc9c0 \uc54a\uace0, ./docs_src/ \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\ub294 Python \ud30c\uc77c\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud574\ub2f9 Python \ud30c\uc77c\uc740 \uc0ac\uc774\ud2b8\ub97c \uc0dd\uc131\ud560 \ub54c \ubb38\uc11c\uc5d0 \ud3ec\ud568/\uc0bd\uc785\ub429\ub2c8\ub2e4.","title":"Docs"},{"location":"contributing/#docs-for-tests","text":"\ub300\ubd80\ubd84\uc758 \ud14c\uc2a4\ud2b8\ub294 \uc2e4\uc81c \ubb38\uc11c\uc758 \uc608\uc81c \uc18c\uc2a4 \ud30c\uc77c\uc5d0 \ub300\ud574 \uc2e4\ud589\ub429\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \ub2e4\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 : \ubb38\uc11c\uac00 \ucd5c\uc2e0 \uc0c1\ud0dc\uc778\uac00? \ubb38\uc11c\uc758 \uc608\uc81c\ub97c \uadf8\ub300\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\ub294\uac00? \ub300\ubd80\ubd84\uc758 \uae30\ub2a5\uc774 \ubb38\uc11c\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\uc73c\uba70, \ud14c\uc2a4\ud2b8 \ubc94\uc704\uc5d0\uc11c \ubcf4\uc7a5\ub418\ub294\uac00? \ub85c\uceec \uac1c\ubc1c \uc911\uc5d0, \uc0ac\uc774\ud2b8\ub97c \uad6c\ucd95\ud558\uc5ec \ubcc0\uacbd \uc0ac\ud56d\uc758 \uc720\ubb34\ub97c \ud655\uc778\ud558\ub294 \uc2a4\ud06c\ub9bd\ud2b8\uac00 live-reloading \ub429\ub2c8\ub2e4: $ python ./scripts/docs.py live <span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008 <span style=\"color: green;\">[INFO]</span> Start watching changes <span style=\"color: green;\">[INFO]</span> Start detecting changes \ubb38\uc11c\ub294 http://127.0.0.1:8008 \uc5d0\uc11c \uc81c\uacf5\ub429\ub2c8\ub2e4. \uc774 \ubc29\ubc95\uc73c\ub85c, \ubb38\uc11c/\uc18c\uc2a4 \ud30c\uc77c \uc744 \ud3b8\uc9d1\ud558\uace0 \ubcc0\uacbd\uc0ac\ud56d\uc744 \uc2e4\uc2dc\uac04\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"Docs for tests"},{"location":"contributing/#typer-cli-optional","text":"./scripts/docs.py \uc5d0\uc11c\ub294 python \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc9c1\uc811 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \uc124\uba85\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Typer CLI \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc124\uce58\ud55c\ub2e4\uba74, \uc124\uce58\uac00 \uc644\ub8cc\ub41c \ud6c4 \ud130\ubbf8\ub110\uc5d0\uc11c \uc790\ub3d9 \uc644\uc131 \uae30\ub2a5\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc744 \uc774\uc6a9\ud558\uc5ec Typer CLI\ub97c \uc124\uce58\ub97c \uc644\ub8cc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: $ typer --install-completion zsh completion installed in /home/user/.bashrc. Completion will take effect once you restart the terminal.","title":"Typer CLI (optional)"},{"location":"contributing/#apps-and-docs-at-the-same-time","text":"\ub2e4\uc74c\uacfc \uac19\uc774 \uc0d8\ud50c\uc744 \uc2e4\ud589\ud558\uba74 : $ uvicorn tutorial001:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Uvicorn\uc740 \uae30\ubcf8 \uac12\uc73c\ub85c port 8000 \uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0, port 8008 \uc758 \ubb38\uc11c\uc640 \ucda9\ub3cc\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"Apps and docs at the same time"},{"location":"contributing/#translations","text":"\ubc88\uc5ed\uc5d0 \ub300\ud55c \ub3c4\uc6c0\uc740 \ub9e4\uc6b0 \ud658\uc601\ud569\ub2c8\ub2e4! \uadf8\ub9ac\uace0 \uc774\uac83\uc740 \ucee4\ubba4\ub2c8\ud2f0\uc758 \ub3c4\uc6c0 \uc5c6\uc774 \uc774\ub8f0 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ud83c\udf0e \ud83d\ude80 \ubc88\uc5ed\uc744 \uc9c0\uc6d0\ud558\uae30 \uc704\ud55c \uc808\ucc28\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.","title":"Translations"},{"location":"contributing/#tips-and-guidelines","text":"\ub2f9\uc2e0\uc758 \uc5b8\uc5b4\ub97c existing pull requests \uc5d0\uc11c \ud655\uc778\ud558\uace0, \ubcc0\uacbd\uc744 \uc694\uccad\ud558\uac70\ub098 \uc2b9\uc778\ud558\ub294 \ub9ac\ubdf0\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4. \ud301 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 pull requests\uc5d0 add comments with change suggestions \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Check the docs about <a href=\"https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-request-reviews\" class=\"external-link\" target=\"_blank\">adding a pull request review</a> to approve it or request changes. issues \uc5d0\uc11c \ub2f9\uc2e0\uc758 \uc5b8\uc5b4\uc5d0 \ub300\ud55c \ubc88\uc5ed\uc774 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \ubc88\uc5ed\ud558\ub294 \ud398\uc774\uc9c0 \ub2f9 \ud55c \uac1c\uc758 pull request\ub97c \ucd94\uac00\ud558\uc2ed\uc2dc\uc624. \uc774\uac83\uc740 \ub2e4\ub978 \uc0ac\uc6a9\uc790\uac00 \uac80\ud1a0\ud558\uae30 \uc26c\uc6cc\uc9d1\ub2c8\ub2e4. \uc81c\uac00 \ud560 \uc218 \uc5c6\ub294 \uc5b8\uc5b4\uc758 \uacbd\uc6b0, \ubcd1\ud569\ud558\uae30 \uc804\uc5d0 \ub2e4\ub978 \uc5ec\ub7ec \uc0ac\uc6a9\uc790\uac00 \ubc88\uc5ed\uc744 \uac80\ud1a0\ud560 \ub54c\uae4c\uc9c0 \uae30\ub2e4\ub9ac\uaca0\uc2b5\ub2c8\ub2e4. \uc790\uc2e0\uc758 \uc5b8\uc5b4\uac00 \ubc88\uc5ed\ub418\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uace0, \uadf8\uac83\uc5d0 \ub9ac\ubdf0\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9ac\ubdf0\ub294 \ubc88\uc5ed\uc774 \uc798 \uc774\ub8e8\uc5b4\uc84c\ub294\uc9c0 \ud655\uc778 \ud560 \uc218 \uc788\uace0, \uadf8\uac83\uc744 \ubcd1\ud569\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac19\uc740 Python \uc608\uc2dc\ub97c \uc0ac\uc6a9\ud558\uace0 \ubb38\uc11c\ub0b4\uc5d0 \uc788\ub294 \ud14d\uc2a4\ud2b8\ub9cc\uc744 \ubc88\uc5ed\ud569\ub2c8\ub2e4. \uc774 \uc791\uc5c5\uc911\uc5d0 \uc544\ubb34\uac83\ub3c4 \ubcc0\uacbd\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uac19\uc740 \uc774\ubbf8\uc9c0, \ud30c\uc77c, \ub9c1\ud06c\ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. \uc774 \uc791\uc5c5\uc911\uc5d0 \uc544\ubb34\uac83\ub3c4 \ubcc0\uacbd\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ubc88\uc5ed\uc744 \uc6d0\ud558\ub294 \uc5b8\uc5b4\uc758 \ub450 \ubb38\uc790\ub85c \ub41c \ucf54\ub4dc\ub97c \ud655\uc778\ud558\ub824\uba74 \ud45c List of ISO 639-1 codes \ub97c \uc774\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"Tips and guidelines"},{"location":"contributing/#existing-language","text":"\uc2a4\ud398\uc778\uc5b4\ucc98\ub7fc \uc774\ubbf8 \uc77c\ubd80 \ud398\uc774\uc9c0\uac00 \ubc88\uc5ed\ub418\uc5b4 \uc788\ub294 \uc5b8\uc5b4\uc758 \ubc88\uc5ed\uc744 \ucd94\uac00\ud558\uace0 \uc2f6\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4. \uc2a4\ud398\uc778\uc5b4\uc758 \uacbd\uc6b0, \ub450 \ubb38\uc790\ub85c \ub41c \ucf54\ub4dc\uac00 es \uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc2a4\ud398\uc778\uc5b4\uc758 \ub514\ub809\ud1a0\ub9ac\ub294 docs/es/ \uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \ud301 \uba54\uc778 (\"\uacf5\uc2dd\") \uc5b8\uc5b4\ub294 \uc601\uc5b4\uc774\uace0, docs/en/ \uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \uc2a4\ud398\uc778\uc5b4\ub85c \uc791\uc131\ub41c \ubb38\uc11c\ub97c \ub77c\uc774\ube0c \uc11c\ubc84\uc5d0\uc11c \uc2e4\ud589\ud569\ub2c8\ub2e4 : // Use the command \"live\" and pass the language code as a CLI argument $ python ./scripts/docs.py live es <span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008 <span style=\"color: green;\">[INFO]</span> Start watching changes <span style=\"color: green;\">[INFO]</span> Start detecting changes \uc774\uc81c http://127.0.0.1:8008 \uc744 \uc5f4\uc5b4 \uc218\uc815\ud55c \ub0b4\uc6a9\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ubb38\uc11c \uc6f9 \uc0ac\uc774\ud2b8\ub97c \ubcf4\uba74 \ubaa8\ub4e0 \uc5b8\uc5b4\uc5d0 \ubaa8\ub4e0 \ud398\uc774\uc9c0\uac00 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc77c\ubd80 \ud398\uc774\uc9c0\ub294 \ubc88\uc5ed\ub418\uc9c0 \uc54a\uace0, \ub204\ub77d\ub41c \ubc88\uc5ed\uc5d0 \ub300\ud55c \uc54c\ub9bc\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub7f0 \ubc29\ubc95\uc73c\ub85c \ub85c\uceec\uc5d0\uc11c \uc2e4\ud589\ud558\uba74 \ubc88\uc5ed\ub41c \ud398\uc774\uc9c0\ub9cc \ud45c\uc2dc\ub429\ub2c8\ub2e4. Now let's say that you want to add a translation for the section Features . \ub2e4\uc74c \ud30c\uc77c\uc744 \ubcf5\uc0ac\ud569\ub2c8\ub2e4 : docs/en/docs/features.md \ubc88\uc5ed\ud558\uace0 \uc2f6\uc740 \uc5b8\uc5b4\ub97c \uc704\ud574\uc11c \uc774\uac83\uc744 \uc815\ud655\ud788 \uac19\uc740 \uc704\uce58\uc5d0 \ubd99\uc5ec \ub123\uc2b5\ub2c8\ub2e4. \uc608\ub97c\ub4e4\uba74: docs/es/docs/features.md \ud301 \uacbd\ub85c\uc640 \ud30c\uc77c\uc758 \uc720\uc77c\ud55c \ubcc0\uacbd \uc0ac\ud56d\uc740 en \uc5d0\uc11c es \ub85c \ubc14\uafb8\ub294 \uc5b8\uc5b4\ucf54\ub4dc\uc785\ub2c8\ub2e4. \uc774\uc81c \uc601\uc5b4\ub85c\ub41c MkDocs config file \uc744 \uc5fd\ub2c8\ub2e4 : docs/en/docs/mkdocs.yml config file\uc5d0\uc11c docs/features.md \uc758 \uc704\uce58\ub97c \ucc3e\uc2b5\ub2c8\ub2e4. : site_name: FastAPI # More stuff nav: - FastAPI: index.md - Languages: - en: / - es: /es/ - features.md \ud3b8\uc9d1\ud558\uace0\uc790 \ud558\ub294 \uc5b8\uc5b4\uc758 MkDocs \uad6c\uc131 \ud30c\uc77c\uc744 \uc5fd\ub2c8\ub2e4, \uc608\ub97c \ub4e4\uba74: docs/es/docs/mkdocs.yml \uadf8\uac83\uc744 \uc601\uc5b4\uc640 \ub611\uac19\uc740 \uc704\uce58\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4, \uc608\ub97c \ub4e4\uba74: site_name: FastAPI # More stuff nav: - FastAPI: index.md - Languages: - en: / - es: /es/ - features.md \ub2e4\ub978 \ud56d\ubaa9\uc774 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub294 \ubc88\uc5ed\uc744 \ud3ec\ud568\ud55c \uc0c8\ub85c\uc6b4 \ud56d\ubaa9\uc774 \uc601\uc5b4 \ubc84\uc804\uacfc \ub3d9\uc77c\ud55c \uc21c\uc11c\ub85c\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \ube0c\ub77c\uc6b0\uc800\uc5d0 \uc811\uc18d\ud558\uba74 \ubb38\uc11c\uc5d0 \uc0c8\ub85c\uc6b4 \uc139\uc158\uc774 \ud45c\uc2dc\ub418\uc5b4 \uc788\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83c\udf89 \uc774\uc81c \ubaa8\ub4e0 \uac83\uc744 \ubc88\uc5ed\ud560 \uc218 \uc788\uace0, \ud30c\uc77c\uc758 \uc800\uc7a5 \uc0c1\ud0dc\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"Existing language"},{"location":"contributing/#new-language","text":"\uc544\uc9c1 \ubc88\uc5ed\ub418\uc9c0 \uc54a\uc740 \uc5b8\uc5b4\uc758 \ubc88\uc5ed\uc73c\ub85c \ucd94\uac00\ud558\uace0 \uc2f6\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4. Creole\uc5b4 \ubc88\uc5ed\uc744 \ucd94\uac00\ud558\uace0 \uc2f6\uc9c0\ub9cc, \uc544\uc9c1 \ubb38\uc11c\uc5d0 \uc5c6\uc2b5\ub2c8\ub2e4. \uc704\uc758 \ub9c1\ud06c\ub97c \ud655\uc778\ud558\uba74 \"Creole\"\uc758 \ubb38\uc790\ucf54\ub4dc\ub294 ht \uc785\ub2c8\ub2e4. \ub2e4\uc74c \ub2e8\uacc4\ub294 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc2e4\ud589\ud558\uc5ec \uc0c8\ub85c\uc6b4 \ubc88\uc5ed \ub514\ub809\ud1a0\ub9ac\ub97c \uc0dd\uc131\ud558\ub294 \uac83\uc785\ub2c8\ub2e4 : // Use the command new-lang, pass the language code as a CLI argument $ python ./scripts/docs.py new-lang ht Successfully initialized: docs/ht Updating ht Updating en \uc774\uc81c \ucf54\ub4dc\ud3b8\uc9d1\uae30\uc5d0\uc11c \uc0c8\ub85c \uc0dd\uc131\ub41c docs/ht/ \ub514\ub809\ud1a0\ub9ac\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud301 Create a first pull request with just this, to set up the configuration for the new language, before adding translations. \uc774\ub807\uac8c \ud558\uba74 \uccab \ubc88\uc9f8 \ud398\uc774\uc9c0\uc5d0\uc11c \uc791\uc5c5\ud558\ub294 \ub3d9\uc548 \ub204\uad70\uac00 \ub2e4\ub978 \ud398\uc774\uc9c0 \uc791\uc5c5\uc744 \ub3c4\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\ude80 \uba3c\uc800 \uba54\uc778 \ud398\uc774\uc9c0\uc758 docs/ht/index.md \ub97c \ubc88\uc5ed\ud569\ub2c8\ub2e4. \uadf8 \ud6c4 \"\uae30\uc874\uc758 \uc5b8\uc5b4\"\uc5d0 \ub300\ud55c \uc774\uc804\uc758 \uc9c0\uc2dc\ub97c \uacc4\uc18d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"New Language"},{"location":"contributing/#new-language-not-supported","text":"\ub77c\uc774\ube0c \uc11c\ubc84 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc2e4\ud589\ud560 \ub54c \uc9c0\uc6d0\ub418\uc9c0 \uc54a\ub294 \uc5b8\uc5b4\uc5d0 \ub300\ud55c \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4 : raise TemplateNotFound(template) jinja2.exceptions.TemplateNotFound: partials/language/xx.html \uc774\uac83\uc740 \ud14c\ub9c8\uac00 \ud574\ub2f9 \uc5b8\uc5b4\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4 (\uc774 \uacbd\uc6b0, xx \uc758 \ub450 \ubb38\uc790\ub85c \ub41c \uac00\uc9dc \ucf54\ub4dc). \uadf8\ub7ec\ub098 \uac71\uc815\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624, \ud14c\ub9c8 \uc5b8\uc5b4\ub97c \uc601\uc5b4\ub85c \uc124\uc815\ud558\uc5ec \ubb38\uc11c\uc758 \ub0b4\uc6a9\uc744 \ubc88\uc5ed\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8 \ud544\uc694\uac00 \uc788\ub294 \uacbd\uc6b0, \uc0c8\ub85c\uc6b4 \uc5b8\uc5b4\uc758 mkdocs.yml \ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \ud3b8\uc9d1\ud558\uc2ed\uc2dc\uc624: site_name: FastAPI # More stuff theme: # More stuff language: xx \uc5b8\uc5b4\ub97c xx (\ub2f9\uc2e0\uc758 \uc5b8\uc5b4 \ucf54\ub4dc) \uc5d0\uc11c en \uc73c\ub85c \ubcc0\uacbd\ud569\ub2c8\ub2e4. \uadf8 \ud6c4 \ub77c\uc774\ube0c \uc11c\ubc84\ub97c \ub2e4\uc2dc \uc2dc\uc791\ud569\ub2c8\ub2e4.","title":"New Language not supported"},{"location":"contributing/#preview-the-result","text":"./scripts/docs.py \uc2a4\ud06c\ub9bd\ud2b8\ub97c live \uba85\ub839\uc73c\ub85c \uc2e4\ud589\ud558\uba74 \ud604\uc7ac\uc758 \uc5b8\uc5b4\uc5d0\uc11c \uc774\uc6a9\uac00\ub2a5\ud55c \ud30c\uc77c\uacfc \ubc88\uc5ed\ub9cc \ud45c\uc2dc\ub429\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc77c\ub2e8 \uc2e4\ud589\ub418\uba74 \uc628\ub77c\uc778\uc5d0\uc11c \ubcf4\uc774\ub294 \uac83\uacfc \uac19\uc774 \ubaa8\ub450 \ud14c\uc2a4\ud2b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574, \uba3c\uc800 \ubaa8\ub4e0 \ubb38\uc11c\ub97c \ube4c\ub4dc\ud569\ub2c8\ub2e4 : // Use the command \"build-all\", this will take a bit $ python ./scripts/docs.py build-all Updating es Updating en Building docs for: en Building docs for: es Successfully built docs for: es Copying en index.md to README.md \uc774\uc81c \uc5b8\uc5b4\ub9c8\ub2e4 ./docs_build/ \uc5d0 \uc788\ub294 \ubaa8\ub4e0 \ubb38\uc11c\uac00 \uc0dd\uc131\ub429\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\ub294 \ubc88\uc5ed\uc774 \ub204\ub77d\ub41c \ud30c\uc77c\uc744 \ucd94\uac00\ud558\ub294 \uac83\uacfc \"\uc774 \ud30c\uc77c\uc5d0\ub294 \ubc88\uc5ed\uc774 \uc544\uc9c1 \uc5c6\uc2b5\ub2c8\ub2e4\" \ub77c\ub294 \uba54\ubaa8\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uadf8 \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c \uc544\ubb34\uac83\ub3c4 \ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \uac01 \uc5b8\uc5b4\uc5d0 \ub300\ud55c \ubaa8\ub4e0 \ub3c5\ub9bd MkDocs \uc0ac\uc774\ud2b8\ub97c \ube4c\ub4dc\ud558\uc5ec \uadf8\uac83\ub4e4\uc744 \uacb0\ud569\ud558\uace0 ./site/ \uc5d0\uc11c \uc0dd\uc131\ud55c\ub2e4. \uadf8\ub7ec\uba74 serve \uba85\ub839\uc73c\ub85c \uadf8\uac83\uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: // Use the command \"serve\" after running \"build-all\" $ python ./scripts/docs.py serve Warning: this is a very simple server. For development, use mkdocs serve instead. This is here only to preview a site with translations already built. Make sure you run the build-all command first. Serving at: http://127.0.0.1:8008","title":"Preview the result"},{"location":"contributing/#tests","text":"\ub85c\uceec\uc5d0\uc11c \ubaa8\ub4e0 \ucf54\ub4dc\ub97c \ud14c\uc2a4\ud2b8\ud558\uace0 HTML\uc5d0\uc11c coverage \ubcf4\uace0\uc11c\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud55c \uc2a4\ud06c\ub9bd\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4: $ bash scripts/test-cov-html.sh \uc774 \uba85\ub839\uc740 ./htmlcov/ \ub514\ub809\ud1a0\ub9ac\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c ./htmlcov/index.html \ud30c\uc77c\uc744 \uc5f4\uba74, \ud14c\uc2a4\ud2b8\uc5d0 \ud3ec\ud568\ub41c \ucf54\ub4dc\uc758 \uc601\uc5ed\uc744 \ub300\ud654\uc2dd\uc73c\ub85c \ud0d0\uc0c9\ud560 \uc218 \uc788\uace0 \ub204\ub77d\ub41c \uc601\uc5ed\uc774 \uc788\ub294\uc9c0 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"Tests"},{"location":"external-links/","text":"\uc678\ubd80 \ub9c1\ud06c\uc640 \ucc38\uace0\ud560\ub9cc\ud55c \uae00 \u00b6 FastAPI \ub294 \uc9c0\uc18d\uc801\uc73c\ub85c \uc131\uc7a5\ud558\uace0 \uc788\ub294 \ud6cc\ub96d\ud55c \ucee4\ubba4\ub2c8\ud2f0\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc5d4 FastAPI \uc640 \uad00\ub828\ub41c \ub9ce\uc740 \ube14\ub85c\uadf8 \uae00\ub4e4, \uc77d\uc744\uac70\ub9ac, \ud234, \uadf8\ub9ac\uace0 \ud504\ub85c\uc81d\ud2b8\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \ubaa9\ub85d \uc911 \uc77c\ubd80\ub294 \uc644\uc131\ub418\uc9c0 \uc54a\uc740 \uac83\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ud301 \ub9cc\uc57d FastAPI \uc640 \uad00\ub828\ud574\uc11c \uc791\uc131\ud558\uc2e0 \uae00\uc774\ub098, \ud504\ub85c\uc81d\ud2b8, \ud234 \ud639\uc740 \uc5b4\ub5a4 \uac83\uc774\ub77c\ub3c4 \uc788\ub294\ub370 \uc5ec\uae30 \ubaa9\ub85d\uc5d0 \uc544\uc9c1 \uc5c6\ub2e4\uba74, \ud480 \ub9ac\ud018\uc2a4\ud2b8 \ub97c \ud1b5\ud574\uc11c \ucd94\uac00\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Articles \u00b6 English \u00b6 Building the Poll App From Django Tutorial With FastAPI And React by Jean-Baptiste Rocher . Seamless FastAPI Configuration with ConfZ by Silvan Melchior . 5 Advanced Features of FastAPI You Should Try by Kaustubh Gupta . Deploying ML Models as API Using FastAPI and Heroku by Kaustubh Gupta . Using GitHub Actions to Deploy a FastAPI Project to Heroku by Somraj Saha . How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI by @pystar . Building a realtime ticket booking solution with Kafka, FastAPI, and Ably by Ben Gamble . Building simple E-Commerce with NuxtJS and FastAPI by Shahriyar(Shako) Rzayev . Serve a machine learning model using Sklearn, FastAPI and Docker by Rodrigo Arenas . Building an API with FastAPI and Supabase and Deploying on Deta by Yashasvi Singh . Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server by Navule Pavan Kumar Rao . Python Facebook messenger webhook with FastAPI on Glitch by Patrick Ladon . Authenticate Your FastAPI App with auth0 by Dom Patmore . Deploy a dockerized FastAPI application to AWS by Valon Januzaj . FastAPI for Flask Users by Amit Chaudhary . How to monitor your FastAPI service by Louis Guitton . HTTP server to display desktop notifications by Julien Harbulot . Creating a CRUD App with FastAPI (Part one) by Precious Ndubueze . Build And Host Fast Data Science Applications Using FastAPI by Farhad Malik . Deploy FastAPI on Azure App Service by Navule Pavan Kumar Rao . Machine learning model serving in Python using FastAPI and streamlit by Davide Fiocco . Introducing Dispatch by Netflix . Using FastAPI with Django by Stavros Korokithakis . Build a Secure Twilio Webhook with Python and FastAPI by Twilio . Build a web API from scratch with FastAPI - the workshop by Sebasti\u00e1n Ram\u00edrez (tiangolo) . FastAPI + Zeit.co = \ud83d\ude80 by Paul Sec . Build simple API service with Python FastAPI \u2014 Part 1 by cuongld2 . Microservice in Python using FastAPI by Paurakh Sharma Humagain . Real-time Notifications with Python and Postgres by Guillermo Cruz . Apache Kafka producer and consumer with FastAPI and aiokafka by Benjamin Ramser . Create and Deploy FastAPI app to Heroku without using Docker by Navule Pavan Kumar Rao . How to continuously deploy a FastAPI to AWS Lambda with AWS SAM by Benjamin Ramser . Another Boilerplate to FastAPI: Azure Pipeline CI + Pytest by Arthur Henrique . Deploy Machine Learning Models with Keras, FastAPI, Redis and Docker by Shane Soh . Towards Data Science: Deploying Iris Classifications with FastAPI and Docker by Mandy Gu . TestDriven.io: Developing and Testing an Asynchronous API with FastAPI and Pytest by Michael Herman . How To Deploy Tensorflow 2.0 Models As An API Service With FastAPI & Docker by Bernard Brenyah . Why I'm Leaving Flask by Dylan Anthony . Setting up Tortoise ORM with FastAPI by Rob Wagner . Using Docker Compose to deploy a lightweight Python REST API with a job queue by Mike Moritz . A FastAPI and Swagger UI visual cheatsheet by @euri10 . Uber: Ludwig v0.2 Adds New Features and Other Improvements to its Deep Learning Toolbox [including a FastAPI server] by Uber Engineering . How to Deploy a Machine Learning Model by Maarten Grootendorst . JWT Authentication with FastAPI and AWS Cognito by Johannes Gontrum . Top 5 Asynchronous Web Frameworks for Python by Ankush Thakur . Deploying a scikit-learn model with ONNX and FastAPI by Nico Axtmann . FastAPI authentication revisited: Enabling API key authentication by Nils de Bruin . FastAPI and Scikit-Learn: Easily Deploy Models by Nick Cortale . Introduction to the fastapi python framework by Errieta Kostala . FastAPI\u200a\u2014\u200aHow to add basic and cookie authentication by Nils de Bruin . FastAPI\u200a\u2014\u200aGoogle as an external authentication provider by Nils de Bruin . FastAPI/Starlette debug vs prod by William Hayes . Developing FastAPI Application using K8s & AWS by Mukul Mantosh . Japanese \u00b6 [FastAPI] Python\u88fd\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI\u306b\u5165\u9580\u3059\u308b by @bee2 . Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03 (Django, Flask, responder, FastAPI, japronto) by @bee2 . \u3010\u7b2c4\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u7ba1\u7406\u8005\u30da\u30fc\u30b8\u6539\u826f\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c3\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u8a8d\u8a3c\u30fb\u30e6\u30fc\u30b6\u767b\u9332\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c2\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u30e2\u30c7\u30eb\u69cb\u7bc9\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c1\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u74b0\u5883\u69cb\u7bc9\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u958b\u767a\u8005\u5411\u3051\u306eDocker\u306b\u3088\u308bPython\u958b\u767a\u74b0\u5883\u69cb\u7bc9 by Hikaru Takahashi . FastAPI\u3067POST\u3055\u308c\u305fJSON\u306e\u30ec\u30b9\u30dd\u30f3\u30b9body\u3092\u53d7\u3051\u53d6\u308b by @angel_katayoku . FastAPI\u3092MySQL\u3068\u63a5\u7d9a\u3057\u3066Docker\u3067\u7ba1\u7406\u3057\u3066\u307f\u308b by @angel_katayoku . FastAPI\u3067CORS\u3092\u56de\u907f by @angel_katayoku . python\u88fd\u306e\u6700\u65b0API\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI \u3092\u89e6\u3063\u3066\u307f\u305f by @ryoryomaru . FastAPI\uff5cDB\u63a5\u7d9a\u3057\u3066CRUD\u3059\u308bPython\u88fdAPI\u30b5\u30fc\u30d0\u30fc\u3092\u69cb\u7bc9 by @mtitg . Vietnamese \u00b6 FASTAPI: TRI\u1ec2N KHAI B\u1eb0NG DOCKER by Nguy\u1ec5n Nh\u00e2n . Russian \u00b6 FastAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c by Troy K\u00f6hler . \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c FastAPI? by prostomarkeloff . \u041c\u0435\u043b\u043a\u0430\u044f \u043f\u0438\u0442\u043e\u043d\u044f\u0447\u0430\u044f \u0440\u0430\u0434\u043e\u0441\u0442\u044c #2: Starlette - \u0421\u043e\u043b\u0438\u0434\u043d\u0430\u044f \u043f\u0440\u0438\u043c\u043e\u0447\u043a\u0430 \u2013 FastAPI by Andrey Korchak . German \u00b6 Inbetriebnahme eines scikit-learn-Modells mit ONNX und FastAPI by Nico Axtmann . REST-API Programmieren mittels Python und dem FastAPI Modul by Felix Sch\u00fcrmeyer . Podcasts \u00b6 Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (tiangolo) by Podcast. __init__ . FastAPI on PythonBytes by Python Bytes FM . Talks \u00b6 [VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PyConBY 2020: Serve ML models easily with FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PyCon UK 2019: FastAPI from the ground up by Chris Withers . Projects \u00b6 Latest GitHub projects with the topic fastapi :","title":"\uc678\ubd80 \ub9c1\ud06c\uc640 \ucc38\uace0\ud560\ub9cc\ud55c \uae00"},{"location":"external-links/#_1","text":"FastAPI \ub294 \uc9c0\uc18d\uc801\uc73c\ub85c \uc131\uc7a5\ud558\uace0 \uc788\ub294 \ud6cc\ub96d\ud55c \ucee4\ubba4\ub2c8\ud2f0\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc5d4 FastAPI \uc640 \uad00\ub828\ub41c \ub9ce\uc740 \ube14\ub85c\uadf8 \uae00\ub4e4, \uc77d\uc744\uac70\ub9ac, \ud234, \uadf8\ub9ac\uace0 \ud504\ub85c\uc81d\ud2b8\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \ubaa9\ub85d \uc911 \uc77c\ubd80\ub294 \uc644\uc131\ub418\uc9c0 \uc54a\uc740 \uac83\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ud301 \ub9cc\uc57d FastAPI \uc640 \uad00\ub828\ud574\uc11c \uc791\uc131\ud558\uc2e0 \uae00\uc774\ub098, \ud504\ub85c\uc81d\ud2b8, \ud234 \ud639\uc740 \uc5b4\ub5a4 \uac83\uc774\ub77c\ub3c4 \uc788\ub294\ub370 \uc5ec\uae30 \ubaa9\ub85d\uc5d0 \uc544\uc9c1 \uc5c6\ub2e4\uba74, \ud480 \ub9ac\ud018\uc2a4\ud2b8 \ub97c \ud1b5\ud574\uc11c \ucd94\uac00\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc678\ubd80 \ub9c1\ud06c\uc640 \ucc38\uace0\ud560\ub9cc\ud55c \uae00"},{"location":"external-links/#articles","text":"","title":"Articles"},{"location":"external-links/#english","text":"Building the Poll App From Django Tutorial With FastAPI And React by Jean-Baptiste Rocher . Seamless FastAPI Configuration with ConfZ by Silvan Melchior . 5 Advanced Features of FastAPI You Should Try by Kaustubh Gupta . Deploying ML Models as API Using FastAPI and Heroku by Kaustubh Gupta . Using GitHub Actions to Deploy a FastAPI Project to Heroku by Somraj Saha . How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI by @pystar . Building a realtime ticket booking solution with Kafka, FastAPI, and Ably by Ben Gamble . Building simple E-Commerce with NuxtJS and FastAPI by Shahriyar(Shako) Rzayev . Serve a machine learning model using Sklearn, FastAPI and Docker by Rodrigo Arenas . Building an API with FastAPI and Supabase and Deploying on Deta by Yashasvi Singh . Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server by Navule Pavan Kumar Rao . Python Facebook messenger webhook with FastAPI on Glitch by Patrick Ladon . Authenticate Your FastAPI App with auth0 by Dom Patmore . Deploy a dockerized FastAPI application to AWS by Valon Januzaj . FastAPI for Flask Users by Amit Chaudhary . How to monitor your FastAPI service by Louis Guitton . HTTP server to display desktop notifications by Julien Harbulot . Creating a CRUD App with FastAPI (Part one) by Precious Ndubueze . Build And Host Fast Data Science Applications Using FastAPI by Farhad Malik . Deploy FastAPI on Azure App Service by Navule Pavan Kumar Rao . Machine learning model serving in Python using FastAPI and streamlit by Davide Fiocco . Introducing Dispatch by Netflix . Using FastAPI with Django by Stavros Korokithakis . Build a Secure Twilio Webhook with Python and FastAPI by Twilio . Build a web API from scratch with FastAPI - the workshop by Sebasti\u00e1n Ram\u00edrez (tiangolo) . FastAPI + Zeit.co = \ud83d\ude80 by Paul Sec . Build simple API service with Python FastAPI \u2014 Part 1 by cuongld2 . Microservice in Python using FastAPI by Paurakh Sharma Humagain . Real-time Notifications with Python and Postgres by Guillermo Cruz . Apache Kafka producer and consumer with FastAPI and aiokafka by Benjamin Ramser . Create and Deploy FastAPI app to Heroku without using Docker by Navule Pavan Kumar Rao . How to continuously deploy a FastAPI to AWS Lambda with AWS SAM by Benjamin Ramser . Another Boilerplate to FastAPI: Azure Pipeline CI + Pytest by Arthur Henrique . Deploy Machine Learning Models with Keras, FastAPI, Redis and Docker by Shane Soh . Towards Data Science: Deploying Iris Classifications with FastAPI and Docker by Mandy Gu . TestDriven.io: Developing and Testing an Asynchronous API with FastAPI and Pytest by Michael Herman . How To Deploy Tensorflow 2.0 Models As An API Service With FastAPI & Docker by Bernard Brenyah . Why I'm Leaving Flask by Dylan Anthony . Setting up Tortoise ORM with FastAPI by Rob Wagner . Using Docker Compose to deploy a lightweight Python REST API with a job queue by Mike Moritz . A FastAPI and Swagger UI visual cheatsheet by @euri10 . Uber: Ludwig v0.2 Adds New Features and Other Improvements to its Deep Learning Toolbox [including a FastAPI server] by Uber Engineering . How to Deploy a Machine Learning Model by Maarten Grootendorst . JWT Authentication with FastAPI and AWS Cognito by Johannes Gontrum . Top 5 Asynchronous Web Frameworks for Python by Ankush Thakur . Deploying a scikit-learn model with ONNX and FastAPI by Nico Axtmann . FastAPI authentication revisited: Enabling API key authentication by Nils de Bruin . FastAPI and Scikit-Learn: Easily Deploy Models by Nick Cortale . Introduction to the fastapi python framework by Errieta Kostala . FastAPI\u200a\u2014\u200aHow to add basic and cookie authentication by Nils de Bruin . FastAPI\u200a\u2014\u200aGoogle as an external authentication provider by Nils de Bruin . FastAPI/Starlette debug vs prod by William Hayes . Developing FastAPI Application using K8s & AWS by Mukul Mantosh .","title":"English"},{"location":"external-links/#japanese","text":"[FastAPI] Python\u88fd\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI\u306b\u5165\u9580\u3059\u308b by @bee2 . Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03 (Django, Flask, responder, FastAPI, japronto) by @bee2 . \u3010\u7b2c4\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u7ba1\u7406\u8005\u30da\u30fc\u30b8\u6539\u826f\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c3\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u8a8d\u8a3c\u30fb\u30e6\u30fc\u30b6\u767b\u9332\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c2\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u30e2\u30c7\u30eb\u69cb\u7bc9\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c1\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u74b0\u5883\u69cb\u7bc9\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u958b\u767a\u8005\u5411\u3051\u306eDocker\u306b\u3088\u308bPython\u958b\u767a\u74b0\u5883\u69cb\u7bc9 by Hikaru Takahashi . FastAPI\u3067POST\u3055\u308c\u305fJSON\u306e\u30ec\u30b9\u30dd\u30f3\u30b9body\u3092\u53d7\u3051\u53d6\u308b by @angel_katayoku . FastAPI\u3092MySQL\u3068\u63a5\u7d9a\u3057\u3066Docker\u3067\u7ba1\u7406\u3057\u3066\u307f\u308b by @angel_katayoku . FastAPI\u3067CORS\u3092\u56de\u907f by @angel_katayoku . python\u88fd\u306e\u6700\u65b0API\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI \u3092\u89e6\u3063\u3066\u307f\u305f by @ryoryomaru . FastAPI\uff5cDB\u63a5\u7d9a\u3057\u3066CRUD\u3059\u308bPython\u88fdAPI\u30b5\u30fc\u30d0\u30fc\u3092\u69cb\u7bc9 by @mtitg .","title":"Japanese"},{"location":"external-links/#vietnamese","text":"FASTAPI: TRI\u1ec2N KHAI B\u1eb0NG DOCKER by Nguy\u1ec5n Nh\u00e2n .","title":"Vietnamese"},{"location":"external-links/#russian","text":"FastAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c by Troy K\u00f6hler . \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c FastAPI? by prostomarkeloff . \u041c\u0435\u043b\u043a\u0430\u044f \u043f\u0438\u0442\u043e\u043d\u044f\u0447\u0430\u044f \u0440\u0430\u0434\u043e\u0441\u0442\u044c #2: Starlette - \u0421\u043e\u043b\u0438\u0434\u043d\u0430\u044f \u043f\u0440\u0438\u043c\u043e\u0447\u043a\u0430 \u2013 FastAPI by Andrey Korchak .","title":"Russian"},{"location":"external-links/#german","text":"Inbetriebnahme eines scikit-learn-Modells mit ONNX und FastAPI by Nico Axtmann . REST-API Programmieren mittels Python und dem FastAPI Modul by Felix Sch\u00fcrmeyer .","title":"German"},{"location":"external-links/#podcasts","text":"Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (tiangolo) by Podcast. __init__ . FastAPI on PythonBytes by Python Bytes FM .","title":"Podcasts"},{"location":"external-links/#talks","text":"[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PyConBY 2020: Serve ML models easily with FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PyCon UK 2019: FastAPI from the ground up by Chris Withers .","title":"Talks"},{"location":"external-links/#projects","text":"Latest GitHub projects with the topic fastapi :","title":"Projects"},{"location":"fastapi-people/","text":"FastAPI People \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI has an amazing community that welcomes people from all backgrounds. Creator - Maintainer \u00b6 Hey! \ud83d\udc4b This is me: @tiangolo Answers: 1248 Pull Requests: 318 I'm the creator and maintainer of FastAPI . You can read more about that in Help FastAPI - Get Help - Connect with the author . ...But here I want to show you the community. FastAPI receives a lot of support from the community. And I want to highlight their contributions. These are the people that: Help others with issues (questions) in GitHub . Create Pull Requests . Review Pull Requests, especially important for translations . A round of applause to them. \ud83d\udc4f \ud83d\ude47 Most active users last month \u00b6 These are the users that have been helping others the most with issues (questions) in GitHub during the last month. \u2615 @JarroVGIT Issues replied: 30 @zoliknemet Issues replied: 9 @iudeen Issues replied: 5 @Kludex Issues replied: 5 @odiseo0 Issues replied: 4 @jonatasoli Issues replied: 3 Experts \u00b6 Here are the FastAPI Experts . \ud83e\udd13 These are the users that have helped others the most with issues (questions) in GitHub through all time . They have proven to be experts by helping many others. \u2728 @Kludex Issues replied: 352 @dmontagu Issues replied: 262 @ycd Issues replied: 221 @Mause Issues replied: 207 @euri10 Issues replied: 166 @phy25 Issues replied: 130 @raphaelauv Issues replied: 77 @ArcLightSlavik Issues replied: 71 @JarroVGIT Issues replied: 68 @falkben Issues replied: 58 @sm-Fifteen Issues replied: 49 @insomnes Issues replied: 46 @Dustyposa Issues replied: 43 @adriangb Issues replied: 40 @jgould22 Issues replied: 40 @includeamin Issues replied: 39 @STeveShary Issues replied: 37 @prostomarkeloff Issues replied: 33 @frankie567 Issues replied: 31 @krishnardt Issues replied: 31 @chbndrhnns Issues replied: 30 @wshayes Issues replied: 29 @panla Issues replied: 27 @acidjunk Issues replied: 25 @ghandic Issues replied: 25 @dbanty Issues replied: 25 @SirTelemak Issues replied: 24 @acnebs Issues replied: 22 @nsidnev Issues replied: 22 @chris-allnutt Issues replied: 21 @retnikt Issues replied: 19 @odiseo0 Issues replied: 19 @Hultner Issues replied: 18 @rafsaf Issues replied: 18 @jorgerpo Issues replied: 17 @nkhitrov Issues replied: 17 @harunyasar Issues replied: 17 @waynerv Issues replied: 16 @dstlny Issues replied: 16 @jonatasoli Issues replied: 15 @hellocoldworld Issues replied: 14 @haizaar Issues replied: 13 @valentin994 Issues replied: 13 @David-Lor Issues replied: 12 @yinziyan1206 Issues replied: 12 @n8sty Issues replied: 12 @lowercase00 Issues replied: 11 @zamiramir Issues replied: 11 Top Contributors \u00b6 Here are the Top Contributors . \ud83d\udc77 These users have created the most Pull Requests that have been merged . They have contributed source code, documentation, translations, etc. \ud83d\udce6 @waynerv Pull Requests: 25 @tokusumi Pull Requests: 22 @dmontagu Pull Requests: 16 @jaystone776 Pull Requests: 15 @euri10 Pull Requests: 13 @mariacamilagl Pull Requests: 12 @Kludex Pull Requests: 11 @Smlep Pull Requests: 10 @Serrones Pull Requests: 8 @RunningIkkyu Pull Requests: 7 @hard-coders Pull Requests: 7 @wshayes Pull Requests: 5 @SwftAlpc Pull Requests: 5 @Attsun1031 Pull Requests: 5 @dependabot Pull Requests: 5 @jekirl Pull Requests: 4 @jfunez Pull Requests: 4 @ycd Pull Requests: 4 @komtaki Pull Requests: 4 @hitrust Pull Requests: 4 @lsglucas Pull Requests: 4 @ComicShrimp Pull Requests: 4 @NinaHwang Pull Requests: 4 There are many other contributors (more than a hundred), you can see them all in the FastAPI GitHub Contributors page . \ud83d\udc77 Top Reviewers \u00b6 These users are the Top Reviewers . \ud83d\udd75\ufe0f Reviews for Translations \u00b6 I only speak a few languages (and not very well \ud83d\ude05). So, the reviewers are the ones that have the power to approve translations of the documentation. Without them, there wouldn't be documentation in several other languages. The Top Reviewers \ud83d\udd75\ufe0f have reviewed the most Pull Requests from others, ensuring the quality of the code, documentation, and especially, the translations . @Kludex Reviews: 95 @tokusumi Reviews: 49 @waynerv Reviews: 47 @Laineyzhang55 Reviews: 47 @BilalAlpaslan Reviews: 45 @ycd Reviews: 45 @cikay Reviews: 41 @yezz123 Reviews: 34 @AdrianDeAnda Reviews: 33 @ArcLightSlavik Reviews: 31 @cassiobotaro Reviews: 25 @dmontagu Reviews: 23 @komtaki Reviews: 21 @hard-coders Reviews: 19 @0417taehyun Reviews: 19 @lsglucas Reviews: 18 @JarroVGIT Reviews: 18 @zy7y Reviews: 17 @yanever Reviews: 16 @SwftAlpc Reviews: 16 @rjNemo Reviews: 16 @Smlep Reviews: 16 @DevDae Reviews: 16 @pedabraham Reviews: 15 @delhi09 Reviews: 15 @sh0nk Reviews: 13 @RunningIkkyu Reviews: 12 @solomein-sv Reviews: 11 @mariacamilagl Reviews: 10 @Attsun1031 Reviews: 10 @maoyibo Reviews: 10 @odiseo0 Reviews: 10 @graingert Reviews: 9 @PandaHun Reviews: 9 @kty4119 Reviews: 9 @bezaca Reviews: 9 @raphaelauv Reviews: 8 @blt232018 Reviews: 8 @rogerbrinkmann Reviews: 8 @ComicShrimp Reviews: 8 @NinaHwang Reviews: 8 @dimaqq Reviews: 8 @Serrones Reviews: 7 @ryuckel Reviews: 7 @NastasiaSaby Reviews: 7 @Mause Reviews: 7 @wakabame Reviews: 7 @AlexandreBiguet Reviews: 7 @krocdort Reviews: 7 Sponsors \u00b6 These are the Sponsors . \ud83d\ude0e They are supporting my work with FastAPI (and others), mainly through GitHub Sponsors . Gold Sponsors \u00b6 Silver Sponsors \u00b6 Bronze Sponsors \u00b6 Individual Sponsors \u00b6 @github @chaserowbotham @Trivie @SendCloud @qaas @BoostryJP @nnfuzzy @johnadjei @HiredScore @wdwinslow @moellenbeck @RodneyU215 @tizz98 @jmaralc @marutoraman @leynier @mainframeindustries @A-Edge @DelfinaCare @povilasb @Kludex @samuelcolvin @jefftriplett @medecau @kamalgill @deserat @ericof @wshayes @koxudaxi @jqueguiner @alexsantos @tcsmith @ltieman @corleyma @madisonmay @saivarunk @andre1sk @Shark009 @grillazz @dblackrun @zsinx6 @anomaly @peterHoburg @gorhack @jaredtrog @oliverxchen @CINOAdam @ScrimForever @ennui93 @MacroPower @Yaleesa @iwpnd @simw @pkucmus @ioalloc @s3ich4n @Rehket @hiancdtrsnm @Shackelford-Arden @Vikka @Ge0f3 @svats2k @gokulyc @dannywade @pablonnaoji @robintully @wedwardbeck @stradivari96 @RedCarpetUp @Filimoa @shuheng-liu @Joeriksson @cometa-haley @LarryGF @veprimk @meysam81 @mauroalejandrojm @Leay15 @AlrasheedA @ProteinQure @guligon90 @ybressler @ddilidili @dbanty @VictorCalderon @arthuRHD @rafsaf @dudikbender @daisuke8000 @dazeddd @yakkonaut @primer-io @around @predictionmachine @daverin @anthonycepeda @dotlas @pyt3h @linux-china @ddanier @jhb @justinrmiller @bryanculbertson @yourkin @slafs @assem-ch @adamghill @eteq @dmig @rinckd @securancy @falkben @hardbyte @browniebroke @janfilips @woodrad @Pytlicek @allen0125 @WillHogan @cbonoz @rglsk @paul121 @igorcorrea @anthonycorletti @pawamoy @Alisa-lisa @danielunderwood @unredundant @holec @moonape1226 @davanstrien @yenchenLiu @xncbf @DMantis @hard-coders @satwikkansal @pheanex @JimFawkes @logan-connolly @sanghunka @stevenayers @cdsre @aprilcoskun @jangia @yannicschroeer @ghandic @fstau @mertguvencli @elisoncrum @HosamAlmoghraby @kitaramu0401 @engineerjoe440 @declon @alvarobartt @d-e-h-i-o @ww-daniel-mora @rwxd @ilias-ant @arrrrrmin @BomGard @akanz1 @shidenko97 @data-djinn @leo-jp-edwards @apar-tiwari @Vyvy-vi @0417taehyun @realabja @alessio-proietti @Mr-Sunglasses @backbord @gabrielmbmb @danburonline @zachspar @sownt @aahouzi About the data - technical details \u00b6 The main intention of this page is to highlight the effort of the community to help others. Especially including efforts that are normally less visible, and in many cases more arduous, like helping others with issues and reviewing Pull Requests with translations. The data is calculated each month, you can read the source code here . Here I'm also highlighting contributions from sponsors. I also reserve the right to update the algorithm, sections, thresholds, etc (just in case \ud83e\udd37).","title":"FastAPI People"},{"location":"fastapi-people/#fastapi-people","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI has an amazing community that welcomes people from all backgrounds.","title":"FastAPI People"},{"location":"fastapi-people/#creator-maintainer","text":"Hey! \ud83d\udc4b This is me: @tiangolo Answers: 1248 Pull Requests: 318 I'm the creator and maintainer of FastAPI . You can read more about that in Help FastAPI - Get Help - Connect with the author . ...But here I want to show you the community. FastAPI receives a lot of support from the community. And I want to highlight their contributions. These are the people that: Help others with issues (questions) in GitHub . Create Pull Requests . Review Pull Requests, especially important for translations . A round of applause to them. \ud83d\udc4f \ud83d\ude47","title":"Creator - Maintainer"},{"location":"fastapi-people/#most-active-users-last-month","text":"These are the users that have been helping others the most with issues (questions) in GitHub during the last month. \u2615 @JarroVGIT Issues replied: 30 @zoliknemet Issues replied: 9 @iudeen Issues replied: 5 @Kludex Issues replied: 5 @odiseo0 Issues replied: 4 @jonatasoli Issues replied: 3","title":"Most active users last month"},{"location":"fastapi-people/#experts","text":"Here are the FastAPI Experts . \ud83e\udd13 These are the users that have helped others the most with issues (questions) in GitHub through all time . They have proven to be experts by helping many others. \u2728 @Kludex Issues replied: 352 @dmontagu Issues replied: 262 @ycd Issues replied: 221 @Mause Issues replied: 207 @euri10 Issues replied: 166 @phy25 Issues replied: 130 @raphaelauv Issues replied: 77 @ArcLightSlavik Issues replied: 71 @JarroVGIT Issues replied: 68 @falkben Issues replied: 58 @sm-Fifteen Issues replied: 49 @insomnes Issues replied: 46 @Dustyposa Issues replied: 43 @adriangb Issues replied: 40 @jgould22 Issues replied: 40 @includeamin Issues replied: 39 @STeveShary Issues replied: 37 @prostomarkeloff Issues replied: 33 @frankie567 Issues replied: 31 @krishnardt Issues replied: 31 @chbndrhnns Issues replied: 30 @wshayes Issues replied: 29 @panla Issues replied: 27 @acidjunk Issues replied: 25 @ghandic Issues replied: 25 @dbanty Issues replied: 25 @SirTelemak Issues replied: 24 @acnebs Issues replied: 22 @nsidnev Issues replied: 22 @chris-allnutt Issues replied: 21 @retnikt Issues replied: 19 @odiseo0 Issues replied: 19 @Hultner Issues replied: 18 @rafsaf Issues replied: 18 @jorgerpo Issues replied: 17 @nkhitrov Issues replied: 17 @harunyasar Issues replied: 17 @waynerv Issues replied: 16 @dstlny Issues replied: 16 @jonatasoli Issues replied: 15 @hellocoldworld Issues replied: 14 @haizaar Issues replied: 13 @valentin994 Issues replied: 13 @David-Lor Issues replied: 12 @yinziyan1206 Issues replied: 12 @n8sty Issues replied: 12 @lowercase00 Issues replied: 11 @zamiramir Issues replied: 11","title":"Experts"},{"location":"fastapi-people/#top-contributors","text":"Here are the Top Contributors . \ud83d\udc77 These users have created the most Pull Requests that have been merged . They have contributed source code, documentation, translations, etc. \ud83d\udce6 @waynerv Pull Requests: 25 @tokusumi Pull Requests: 22 @dmontagu Pull Requests: 16 @jaystone776 Pull Requests: 15 @euri10 Pull Requests: 13 @mariacamilagl Pull Requests: 12 @Kludex Pull Requests: 11 @Smlep Pull Requests: 10 @Serrones Pull Requests: 8 @RunningIkkyu Pull Requests: 7 @hard-coders Pull Requests: 7 @wshayes Pull Requests: 5 @SwftAlpc Pull Requests: 5 @Attsun1031 Pull Requests: 5 @dependabot Pull Requests: 5 @jekirl Pull Requests: 4 @jfunez Pull Requests: 4 @ycd Pull Requests: 4 @komtaki Pull Requests: 4 @hitrust Pull Requests: 4 @lsglucas Pull Requests: 4 @ComicShrimp Pull Requests: 4 @NinaHwang Pull Requests: 4 There are many other contributors (more than a hundred), you can see them all in the FastAPI GitHub Contributors page . \ud83d\udc77","title":"Top Contributors"},{"location":"fastapi-people/#top-reviewers","text":"These users are the Top Reviewers . \ud83d\udd75\ufe0f","title":"Top Reviewers"},{"location":"fastapi-people/#reviews-for-translations","text":"I only speak a few languages (and not very well \ud83d\ude05). So, the reviewers are the ones that have the power to approve translations of the documentation. Without them, there wouldn't be documentation in several other languages. The Top Reviewers \ud83d\udd75\ufe0f have reviewed the most Pull Requests from others, ensuring the quality of the code, documentation, and especially, the translations . @Kludex Reviews: 95 @tokusumi Reviews: 49 @waynerv Reviews: 47 @Laineyzhang55 Reviews: 47 @BilalAlpaslan Reviews: 45 @ycd Reviews: 45 @cikay Reviews: 41 @yezz123 Reviews: 34 @AdrianDeAnda Reviews: 33 @ArcLightSlavik Reviews: 31 @cassiobotaro Reviews: 25 @dmontagu Reviews: 23 @komtaki Reviews: 21 @hard-coders Reviews: 19 @0417taehyun Reviews: 19 @lsglucas Reviews: 18 @JarroVGIT Reviews: 18 @zy7y Reviews: 17 @yanever Reviews: 16 @SwftAlpc Reviews: 16 @rjNemo Reviews: 16 @Smlep Reviews: 16 @DevDae Reviews: 16 @pedabraham Reviews: 15 @delhi09 Reviews: 15 @sh0nk Reviews: 13 @RunningIkkyu Reviews: 12 @solomein-sv Reviews: 11 @mariacamilagl Reviews: 10 @Attsun1031 Reviews: 10 @maoyibo Reviews: 10 @odiseo0 Reviews: 10 @graingert Reviews: 9 @PandaHun Reviews: 9 @kty4119 Reviews: 9 @bezaca Reviews: 9 @raphaelauv Reviews: 8 @blt232018 Reviews: 8 @rogerbrinkmann Reviews: 8 @ComicShrimp Reviews: 8 @NinaHwang Reviews: 8 @dimaqq Reviews: 8 @Serrones Reviews: 7 @ryuckel Reviews: 7 @NastasiaSaby Reviews: 7 @Mause Reviews: 7 @wakabame Reviews: 7 @AlexandreBiguet Reviews: 7 @krocdort Reviews: 7","title":"Reviews for Translations"},{"location":"fastapi-people/#sponsors","text":"These are the Sponsors . \ud83d\ude0e They are supporting my work with FastAPI (and others), mainly through GitHub Sponsors .","title":"Sponsors"},{"location":"fastapi-people/#gold-sponsors","text":"","title":"Gold Sponsors"},{"location":"fastapi-people/#silver-sponsors","text":"","title":"Silver Sponsors"},{"location":"fastapi-people/#bronze-sponsors","text":"","title":"Bronze Sponsors"},{"location":"fastapi-people/#individual-sponsors","text":"@github @chaserowbotham @Trivie @SendCloud @qaas @BoostryJP @nnfuzzy @johnadjei @HiredScore @wdwinslow @moellenbeck @RodneyU215 @tizz98 @jmaralc @marutoraman @leynier @mainframeindustries @A-Edge @DelfinaCare @povilasb @Kludex @samuelcolvin @jefftriplett @medecau @kamalgill @deserat @ericof @wshayes @koxudaxi @jqueguiner @alexsantos @tcsmith @ltieman @corleyma @madisonmay @saivarunk @andre1sk @Shark009 @grillazz @dblackrun @zsinx6 @anomaly @peterHoburg @gorhack @jaredtrog @oliverxchen @CINOAdam @ScrimForever @ennui93 @MacroPower @Yaleesa @iwpnd @simw @pkucmus @ioalloc @s3ich4n @Rehket @hiancdtrsnm @Shackelford-Arden @Vikka @Ge0f3 @svats2k @gokulyc @dannywade @pablonnaoji @robintully @wedwardbeck @stradivari96 @RedCarpetUp @Filimoa @shuheng-liu @Joeriksson @cometa-haley @LarryGF @veprimk @meysam81 @mauroalejandrojm @Leay15 @AlrasheedA @ProteinQure @guligon90 @ybressler @ddilidili @dbanty @VictorCalderon @arthuRHD @rafsaf @dudikbender @daisuke8000 @dazeddd @yakkonaut @primer-io @around @predictionmachine @daverin @anthonycepeda @dotlas @pyt3h @linux-china @ddanier @jhb @justinrmiller @bryanculbertson @yourkin @slafs @assem-ch @adamghill @eteq @dmig @rinckd @securancy @falkben @hardbyte @browniebroke @janfilips @woodrad @Pytlicek @allen0125 @WillHogan @cbonoz @rglsk @paul121 @igorcorrea @anthonycorletti @pawamoy @Alisa-lisa @danielunderwood @unredundant @holec @moonape1226 @davanstrien @yenchenLiu @xncbf @DMantis @hard-coders @satwikkansal @pheanex @JimFawkes @logan-connolly @sanghunka @stevenayers @cdsre @aprilcoskun @jangia @yannicschroeer @ghandic @fstau @mertguvencli @elisoncrum @HosamAlmoghraby @kitaramu0401 @engineerjoe440 @declon @alvarobartt @d-e-h-i-o @ww-daniel-mora @rwxd @ilias-ant @arrrrrmin @BomGard @akanz1 @shidenko97 @data-djinn @leo-jp-edwards @apar-tiwari @Vyvy-vi @0417taehyun @realabja @alessio-proietti @Mr-Sunglasses @backbord @gabrielmbmb @danburonline @zachspar @sownt @aahouzi","title":"Individual Sponsors"},{"location":"fastapi-people/#about-the-data-technical-details","text":"The main intention of this page is to highlight the effort of the community to help others. Especially including efforts that are normally less visible, and in many cases more arduous, like helping others with issues and reviewing Pull Requests with translations. The data is calculated each month, you can read the source code here . Here I'm also highlighting contributions from sponsors. I also reserve the right to update the algorithm, sections, thresholds, etc (just in case \ud83e\udd37).","title":"About the data - technical details"},{"location":"features/","text":"\ud2b9\uc9d5 \u00b6 FastAPI \ud2b9\uc9d5 \u00b6 FastAPI \ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uae30\ub2a5\ub4e4\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \uac1c\ubc29\ud615 \ud45c\uc900(Open standards) \uae30\ubc18 \u00b6 OpenAPI \ub294 path operations , \ud30c\ub77c\ubbf8\ud130, body requests, \ubcf4\uc548 \ub4f1\uc744 \ud3ec\ud568\ud55c \ub2e4\uc591\ud55c API \uc0dd\uc131\uc5d0 \ub300\ud55c \ud45c\uc900\uc785\ub2c8\ub2e4. Automatic data model documentation with JSON Schema (OpenAPI \uc790\uccb4\ub3c4 JSON Schema \uae30\ubc18\uc774\ubbc0\ub85c). \uc774\ub7ec\ud55c \ud45c\uc900\ub4e4\uc740 \ucca0\uc800\ud55c \uc5f0\uad6c\ub97c \ubc14\ud0d5\uc73c\ub85c \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub2e4\uc591\ud55c \uc5b8\uc5b4\uc5d0\uc11c \ud074\ub77c\uc774\uc5b8\ud2b8 \ucf54\ub4dc\ub97c \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131 \ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud558\uac8c \ud569\ub2c8\ub2e4. \ubb38\uc11c \uc790\ub3d9\ud654 \u00b6 \ud504\ub808\uc784\uc6cc\ud06c\uac00 OpenAPI\uc5d0 \uae30\ubc18\ud558\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \uc5ec\ub7ec \uc120\ud0dd\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c Interactive API \ubb38\uc11c\uc640 \uc6f9 \uc720\uc800 \uc778\ud130\ud398\uc774\uc2a4 \uc815\ub9ac\uac00 \uae30\ubcf8\uc801\uc73c\ub85c \uc81c\uacf5\ub429\ub2c8\ub2e4. \ub300\ud654\ud615 API \ubb38\uc11c\ub85c\ub294 Swagger UI \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c API\ub97c \uc9c1\uc811 \ud638\ucd9c\ud558\uace0 \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\ub978 API \ubb38\uc11c\ub85c\ub294 ReDoc \uc774 \uc81c\uacf5\ub429\ub2c8\ub2e4. Just Modern Python \u00b6 \uc774 \ubaa8\ub4e0 \uac8c (Pydantic \ub355\ubd84\uc5d0) Python 3.6\uc758 \ud0c0\uc785 \ud45c\uc900 \uc815\uc758\uc744 \uae30\ubc18\uc73c\ub85c \ud569\ub2c8\ub2e4. \uc0c8\ub85c \ubc30\uc6b8 \uad6c\ubb38\ub3c4 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\uc800 Modern Python \ud45c\uc900\uc785\ub2c8\ub2e4. Python \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c \uc798 \ubaa8\ub978\ub2e4\uba74 (FastAPI\uc744 \uc548 \uc4f0\ub354\ub77c\ub3c4), \uc5ec\uae30 \uc9e7\uc740 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ud655\uc778\ud574\ubcf4\uc138\uc694: Python Types . Python \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud574\uc11c \uc544\ub798\ucc98\ub7fc \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from datetime import date from pydantic import BaseModel # \ubcc0\uc218\ub97c str\ud615\uc73c\ub85c \ubc1b\uaca0\ub2e4\uace0 \uc120\uc5b8\ud558\uba74 # \uc774\uc81c \uc5d0\ub514\ud130\ub294 \ud568\uc218 \ub0b4\ubd80\uc758 \ubcc0\uc218\ub3c4 \ud0c0\uc785\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4 def main ( user_id : str ): return user_id # Pydantic \ubaa8\ub378 class User ( BaseModel ): id : int name : str joined : date \uc774\uc81c \uc774\ub807\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: my_user : User = User ( id = 3 , name = \"John Doe\" , joined = \"2018-07-19\" ) second_user_data = { \"id\" : 4 , \"name\" : \"Mary\" , \"joined\" : \"2018-11-30\" , } my_second_user : User = User ( ** second_user_data ) \uc815\ubcf4 **second_user_data \ub294 \uc758\ubbf8\ud558\ub294 \uac83\uc740 \uc774\ub807\uc2b5\ub2c8\ub2e4. second_user_data \ub515\uc154\ub108\ub9ac(dict) \ub0b4\uc758 \ubaa8\ub4e0 \ud0a4(key)\uc640 \uac12(value)\ub4e4\uc744 key-value \ud615\ud0dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ubd80 \ub118\uae34\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4. \uc989, User(id=4, name=\"Mary\", joined=\"2018-11-30\") \uc640 \uac19\uc740 \ucf54\ub4dc\uac00 \ub429\ub2c8\ub2e4. \uc5d0\ub514\ud130 \uc9c0\uc6d0 \u00b6 \ubaa8\ub4e0 \ud504\ub808\uc784\uc6cc\ud06c\ub294 \uc0ac\uc6a9\ud558\uae30 \uc27d\uace0 \uc9c1\uad00\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ubaa8\ub4e0 \ub0b4\uc6a9\uc740 \uac1c\ubc1c\uc744 \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \uc5ec\ub7ec \uc5d0\ub514\ud130\uc5d0\uc11c \ud14c\uc2a4\ud2b8\ub41c \ucd5c\uace0\uc758 \uac1c\ubc1c \uacbd\ud5d8\uc744 \ubcf4\uc7a5\ubc1b\uc744 \uc218 \uc788\ub3c4\ub85d \uacb0\uc815\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ucd5c\uadfc \ud30c\uc774\uc36c \uac1c\ubc1c\uc790 \uc124\ubb38\uc5d0\uc11c, \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ud558\ub294 \uae30\ub2a5\uc740 \"\uc790\ub3d9\uc644\uc131\" \uc774\uc5c8\uc2b5\ub2c8\ub2e4. FastAPI \ud504\ub808\uc784\uc6cc\ud06c \uc804\uccb4\uc5d0\uc11c \uc774\uac78 \ub9cc\uc871\ud569\ub2c8\ub2e4. \uc5b4\ub514\uc11c\ub4e0 \uc790\ub3d9\uc644\uc131 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubb38\uc11c\ub97c \ubcf4\ub7ec \uc624\ub294 \uc77c\uc774 \uac70\uc758 \uc5c6\uc744\uac81\ub2c8\ub2e4. \uc5d0\ub514\ud130\ubcc4\ub85c \uc5b4\ub5bb\uac8c \uc9c0\uc6d0\ud558\ub294 \uc9c0\ub294 \uc544\ub798\ub97c \ucc38\uace0\ud558\uc138\uc694. Visual Studio Code PyCharm \uc804\uc5d0\ub294 \uc548\ub420\uac70\ub77c\uace0 \uc0dd\uac01\ud588\ub358 \ucf54\ub4dc\ub3c4 \uc790\ub3d9 \uc644\uc131\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74, JSON body \uc548\uc758 (\uc911\ucca9\ub418\uc5b4 \uc788\uc744 \uc218\ub3c4 \uc788\ub294) price \ub77c\ub294 \ud0a4\ub294 Request\ub85c \ub118\uc5b4\uc628 \uac1d\uccb4 \ub0b4\uc5d0 \uc788\uc9c0\ub9cc \uc790\ub3d9 \uc644\uc131\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc774\uc820 \uc774\ub984\uc744 \uc798\ubabb \uc801\uc9c0 \ub9c8\uc138\uc694. username \uc778\uc9c0 user_name \uc778\uc9c0 \ubab0\ub77c\uc11c, \ubb38\uc11c\ub97c \uc654\ub2e4 \uac14\ub2e4 \ud560 \uc77c\ub3c4 \uc2a4\ud06c\ub864\uc744 \uc704\uc544\ub798\ub85c \ud6d1\uc744 \ud544\uc694\ub3c4 \uc5c6\uc2b5\ub2c8\ub2e4. \uc694\uc57d \u00b6 \ubaa8\ub4e0 \uac83\uc774 \ud569\ub9ac\uc801\uc778 \uae30\ubcf8\uac12 \uc744 \uac16\uace0 \uc788\uace0, \uc5b4\ub514\ub4e0 \uc6d0\ud558\uba74 \uc124\uc815\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \ud30c\ub77c\ubbf8\ud130\ub294 \ud558\uace0 \uc2f6\uc740 \uac83\uc5d0 \ub530\ub77c, \uc6d0\ud558\ub294 API \uc815\uc758\uc5d0 \ub530\ub77c \uc785\ub9db\uc5d0 \ub9de\uac8c \ubc14\uafc0 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c, \uc804\ubd80 \"\uadf8\ub0e5 \ub418\uac70\ub4e0\uc694\" . \uac80\uc99d \u00b6 \uc544\ub798\ub97c \ud3ec\ud568\ud55c, \uac70\uc758 \ub300\ubd80\ubd84\uc758 \ud30c\uc774\uc36c \ub370\uc774\ud130 \ud0c0\uc785 \uc5d0 \ub300\ud55c \uac80\uc99d\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. JSON objects ( dict ). JSON array ( list ) defining item types. String ( str ) fields, defining min and max lengths. Numbers ( int , float ) with min and max values, etc. \uc544\ub798\uc640 \uac19\uc740, \uc678\ubd80\uc801\uc778 \ud0c0\uc785\ub4e4\uc758 \uac80\uc99d\ub3c4 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. URL Email UUID \uadf8 \uc678 \ubaa8\ub4e0 \uac80\uc99d\uc740 \uacac\uace0\ud558\uac8c \uc798 \uc124\uacc4\ub41c Pydantic \uc73c\ub85c \ucc98\ub9ac\ud569\ub2c8\ub2e4. \ubcf4\uc548\uacfc \uc778\uc99d \u00b6 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub098 \ub370\uc774\ud130 \ubaa8\ub378\uacfc \uad00\uacc4 \uc5c6\uc774, \ubcf4\uc548\uacfc \uc778\uc99d\uc744 \ud1b5\ud569\ud569\ub2c8\ub2e4. OpenAPI\uc5d0 \uc815\uc758\ub41c \ubcf4\uc548 \uc2a4\ud0a4\ub9c8\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: HTTP Basic. OAuth2 ( JWT tokens \ud3ec\ud568). OAuth2 with JWT \ubb38\uc11c\ub97c \ud655\uc778\ud558\uc138\uc694. API keys in: \ud5e4\ub354(Headers) \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218(Query parameters) \ucfe0\ud0a4(Cookies) \ub4f1 \uadf8\ub9ac\uace0 \ubaa8\ub4e0 \ubcf4\uc548 \uae30\ub2a5\ub4e4\uc740 Starlette \uae30\ubc18\uc785\ub2c8\ub2e4. ( \uc138\uc158 \ucfe0\ud0a4 \ud3ec\ud568). \ube4c\ub4dc\ub41c \ubaa8\ub4e0 \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ud234\uacfc \ucef4\ud3ec\ub10c\ud2b8\ub4e4\uc740 \uc2dc\uc2a4\ud15c\uc774\ub098 \ub370\uc774\ud130 \uc800\uc7a5\uc18c, \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4, NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub4f1\uacfc\ub3c4 \uc5f0\ub3d9\ud558\uae30 \uc27d\uc2b5\ub2c8\ub2e4. \uc758\uc874\uc131 \uc8fc\uc785(Dependency Injection) \u00b6 FastAPI\ub294 \ub9e4\uc6b0 \uc0ac\uc6a9\ud558\uae30 \uc27d\uace0 \ub9e4\uc6b0 \uac15\ub825\ud55c \uc758\uc874\uc131 \uc8fc\uc785(Dependency Injection) \uc2dc\uc2a4\ud15c\uc744 \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc758\uc874\uc131\uc774 \ub2e4\ub978 \uc758\uc874\uc131\uc744 \uac16\uace0 \uc788\ub2e4\uba74, \uc758\uc874\uc131 \uacc4\uce35 \uad6c\uc870\ub098 \uc758\uc874\uc131 \"\uadf8\ub798\ud504\" \ub97c \ub9cc\ub4ed\ub2c8\ub2e4. \ud504\ub808\uc784\uc6cc\ud06c\uc5d0\uc11c \uc804\ubd80 \uc790\ub3d9\uc73c\ub85c \ucc98\ub9ac \ub429\ub2c8\ub2e4. All the dependencies can require data from requests and augment the path operation constraints and automatic documentation. \uc790\ub3d9 \uac80\uc99d \uc740 path operation \ud30c\ub77c\ubbf8\ud130\uc5d0\ub3c4 \uc758\uc874\uc131\uc744 \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcf5\uc7a1\ud55c \uc720\uc800 \uc778\uc99d \uc2dc\uc2a4\ud15c, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ub4f1 \uc9c0\uc6d0 \ub370\uc774\ud130\ubca0\uc774\uc2a4, \ud504\ub860\ud2b8\uc5d4\ub4dc \ub4f1\uc744 \uc2e0\uacbd \uc4f8 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ud1b5\ud569\uc740 \ubb34\ucc99 \uc27d\uc2b5\ub2c8\ub2e4. \ubb34\ud55c\ud55c \"\ud50c\ub7ec\uadf8\uc778\" \u00b6 \ub2e4\ub974\uac8c \ub9d0\ud558\uba74, \ud50c\ub7ec\uadf8\uc778\uc774\ub77c\uace0 \ud560 \uac8c \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ud544\uc694\ud55c \ucf54\ub4dc\ub97c \ubd88\ub7ec\uc640\uc11c \uc0ac\uc6a9\ud558\uc138\uc694. \ubaa8\ub4e0 \uc758\uc874\uc131\uc744 \uace0\ub824\ud558\uba74\uc11c \ud1b5\ud569\ud558\uae30 \uc27d\ub3c4\ub85d \uace0\uc548\ub418\uc5c8\uc2b5\ub2c8\ub2e4. path operations \uc5d0 \uc791\uc131\ud55c \uac83\uacfc \ub3d9\uc77c\ud55c \uad6c\uc870\uc640 \uad6c\ubb38\uc73c\ub85c \uc9e0 2\uc904\uc9dc\ub9ac \ucf54\ub4dc\ub85c\ub3c4 \"\ud50c\ub7ec\uadf8\uc778\"\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8 \u00b6 100% test coverage . 100% type annotated code base. \uc2e4\uc81c\ub85c \ubc30\ud3ec\ud574\uc11c \uc0ac\uc6a9\ud574\ubd24\uc74c. Starlette features \u00b6 FastAPI \ub294 Starlette \ub97c \uc644\uc804\ud788 \ud638\ud658\ud558\uace0, \uadf8 \uae30\ubc18\uc774\uae30\ub3c4 \ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \uac00\uc9c0\uace0 \uc788\ub358 Starlette \ucf54\ub4dc\ub97c \ucd94\uac00\ud574\ub3c4 \uc798 \ub3d9\uc791\ud560 \uac83\uc785\ub2c8\ub2e4. FastAPI \ub294 \uc2e4\uc81c\ub85c Starlette \uc758 \uc11c\ube0c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc774\ubbf8 Starlette\ub97c \uc54c\uace0 \uc788\uac70\ub098 \uc368\ubd24\ub2e4\uba74, \ub300\ubd80\ubd84\uc758 \uae30\ub2a5\uc740 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ub3d9\uc791\ud560 \uac83\uc785\ub2c8\ub2e4. FastAPI \uc5d0\uc11c\ub294 Starlette \uc758 \ubaa8\ub4e0 \uae30\ub2a5\uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (FastAPI\ub294 Starlette\uc758 \uc0c1\uc704 \ud638\ud658\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.) \ub9e4\uc6b0 \uc5c4\uccad\ub09c \uc131\ub2a5. NodeJS , Go \ub9cc\ud07c \uac00\uc7a5 \ube60\ub978 \ud30c\uc774\uc36c \ud504\ub808\uc784\uc6cc\ud06c \uc911 \ud558\ub098 . WebSocket \uc9c0\uc6d0. \ubc31\uadf8\ub77c\uc6b4\ub4dc\uc5d0\uc11c \ucc98\ub9ac\ud558\ub294 \uc791\uc5c5\ub4e4. \uc2dc\uc791\uacfc \uc885\ub8cc \uc774\ubca4\ud2b8\ub4e4. Test client built on requests . CORS , GZip, \uc815\uc801 \ud30c\uc77c\ub4e4, Streaming responses. \uc138\uc158\uacfc \ucfe0\ud0a4 \uc9c0\uc6d0. 100% test coverage. 100% type annotated codebase. Pydantic features \u00b6 FastAPI \ub294 Pydantic \ub97c \uc644\uc804\ud788 \ud638\ud658\ud558\uace0, \uadf8 \uae30\ubc18\uc774\uae30\ub3c4 \ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \uac00\uc9c0\uace0 \uc788\ub358 Pydantic \ucf54\ub4dc\ub97c \ucd94\uac00\ud574\ub3c4 \uc798 \ub3d9\uc791\ud560 \uac83\uc785\ub2c8\ub2e4. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uad00\ub828 ORM , ODM \ub4f1\uc758 Pydantic \uae30\ubc18\uc758 \uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c \ud638\ud658\ub429\ub2c8\ub2e4. \ubaa8\ub4e0 \uac8c \uc790\ub3d9\uc801\uc73c\ub85c \uac80\uc99d\ub418\uae30 \ub54c\ubb38\uc5d0, request\ub85c \ubc1b\uc740 \uac1d\uccb4\ub97c \uadf8\ub300\ub85c \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub85c \uc9c1\uc811 \ub118\uae30\ub294 \ub4f1\uc758 \uc0c1\ud669\ub3c4 \uac00\ub2a5\ud558\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \ubc18\ub300\uc758 \uacbd\uc6b0\ub3c4 \uadf8\ub300\ub85c \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uaebc\ub0b8 \uac1d\uccb4\ub97c \uadf8\ub300\ub85c \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0 \uc9c1\uc811 \uc804\ub2ec\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \uc5d0\uc11c\ub294 Pydantic \uc758 \ubaa8\ub4e0 \uae30\ub2a5\uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (FastAPI\ub294 \ubaa8\ub4e0 \ub370\uc774\ud130 \ucc98\ub9ac\ub97c Pydantic \uae30\ubc18\uc73c\ub85c \ud558\uace0 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.) \uba38\ub9ac \uae68\uc9c0\ub294 \uc77c\uc740 \uc774\uc81c \uadf8\ub9cc : \uc0c8\ub85c \ubc30\uc6cc\uc57c \ud560 \uc790\uc798\ud55c schema \uc815\uc758\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c \uc548\ub2e4\uba74, Pydantic\ub97c \ucda9\ubd84\ud788 \uc4f8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. IDE , linter , \uadf8\ub9ac\ub3c4 \ub2f9\uc2e0\uc758 \ub450\ub1cc \ub97c \uc798 \ud65c\uc6a9\ud558\uc138\uc694: Pydantic\uc758 \uc790\ub8cc \uad6c\uc870\ub294 \uc5ec\ub7ec\ubd84\uc774 \uc815\uc758\ud55c \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\ub4e4\ubfd0\uc785\ub2c8\ub2e4. \uc790\ub3d9 \uc644\uc131, \ubb38\ubc95 \uac80\uc0ac, mypy \uadf8\ub9ac\uace0 \uc5ec\ub7ec\ubd84\uc758 \uc9c1\uac10\uc740 \uac80\uc99d\ub41c \ub370\uc774\ud130\uc640 \uc798 \ub3cc\uc544\uac08 \uac81\ub2c8\ub2e4. \ube60\ub974\ub2e4 : \ubca4\uce58\ub9c8\ud0b9 \uc5d0\uc11c Pydantic\uc774 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\ubcf4\ub2e4 \ube60\ub974\ub2e8 \uac83\uc744 \ud655\uc778\ud588\uc2b5\ub2c8\ub2e4. \ubcf5\uc7a1\ud55c \uad6c\uc870 \uac80\uc99d: \uacc4\uce35\uc801\uc778 Pydantic \ubaa8\ub378, \ud30c\uc774\uc36c\uc758 typing \uc5d0 \uc788\ub294 List and Dict \ub4f1\uc744 \uc0ac\uc6a9\ud558\uc138\uc694. Validator\ub294 \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \uc2a4\ud0a4\ub9c8\ub4e4\uc744 \uac04\ub2e8\ud558\uace0 \uc27d\uac8c \uc815\uc758\ud558\uace0 \uac80\uc0ac\ud560 \uc218 \uc788\uac8c, \uadf8\ub9ac\uace0 JSON \uc2a4\ud0a4\ub9c8\ub85c \ubb38\uc11c\ud654\uae4c\uc9c0 \ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4. \uae4a\uc774\uac00 \uae4a\uc740 Nested JSON \uac1d\uccb4\ub3c4 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc804\ubd80 \uac80\uc99d\ub418\uace0 \uc8fc\uc11d\uc774 \ub2ec\ub9b0 \ucc44\ub85c\uc694. \ud655\uc7a5\uc131 : Pydantic\uc740 \ucee4\uc2a4\ud140 \ub370\uc774\ud130 \ud0c0\uc785\ub4e4\uc744 \uc815\uc758\ud560 \uc218 \uc788\uac8c \ub9cc\ub4ed\ub2c8\ub2e4. \uc544\ub2c8\uba74, \ubaa8\ub378\uc5d0 validator decorator\ub97c \ub370\ucf54\ub808\uc774\ud2b8(decorate)\ud55c \ud6c4, \ud568\uc218\ub97c \uc791\uc131\ud574\uc11c validation\uc744 \ud655\uc7a5\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. 100% test coverage.","title":"\ud2b9\uc9d5"},{"location":"features/#_1","text":"","title":"\ud2b9\uc9d5"},{"location":"features/#fastapi","text":"FastAPI \ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uae30\ub2a5\ub4e4\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.","title":"FastAPI \ud2b9\uc9d5"},{"location":"features/#open-standards","text":"OpenAPI \ub294 path operations , \ud30c\ub77c\ubbf8\ud130, body requests, \ubcf4\uc548 \ub4f1\uc744 \ud3ec\ud568\ud55c \ub2e4\uc591\ud55c API \uc0dd\uc131\uc5d0 \ub300\ud55c \ud45c\uc900\uc785\ub2c8\ub2e4. Automatic data model documentation with JSON Schema (OpenAPI \uc790\uccb4\ub3c4 JSON Schema \uae30\ubc18\uc774\ubbc0\ub85c). \uc774\ub7ec\ud55c \ud45c\uc900\ub4e4\uc740 \ucca0\uc800\ud55c \uc5f0\uad6c\ub97c \ubc14\ud0d5\uc73c\ub85c \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub2e4\uc591\ud55c \uc5b8\uc5b4\uc5d0\uc11c \ud074\ub77c\uc774\uc5b8\ud2b8 \ucf54\ub4dc\ub97c \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131 \ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud558\uac8c \ud569\ub2c8\ub2e4.","title":"\uac1c\ubc29\ud615 \ud45c\uc900(Open standards) \uae30\ubc18"},{"location":"features/#_2","text":"\ud504\ub808\uc784\uc6cc\ud06c\uac00 OpenAPI\uc5d0 \uae30\ubc18\ud558\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \uc5ec\ub7ec \uc120\ud0dd\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c Interactive API \ubb38\uc11c\uc640 \uc6f9 \uc720\uc800 \uc778\ud130\ud398\uc774\uc2a4 \uc815\ub9ac\uac00 \uae30\ubcf8\uc801\uc73c\ub85c \uc81c\uacf5\ub429\ub2c8\ub2e4. \ub300\ud654\ud615 API \ubb38\uc11c\ub85c\ub294 Swagger UI \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c API\ub97c \uc9c1\uc811 \ud638\ucd9c\ud558\uace0 \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\ub978 API \ubb38\uc11c\ub85c\ub294 ReDoc \uc774 \uc81c\uacf5\ub429\ub2c8\ub2e4.","title":"\ubb38\uc11c \uc790\ub3d9\ud654"},{"location":"features/#just-modern-python","text":"\uc774 \ubaa8\ub4e0 \uac8c (Pydantic \ub355\ubd84\uc5d0) Python 3.6\uc758 \ud0c0\uc785 \ud45c\uc900 \uc815\uc758\uc744 \uae30\ubc18\uc73c\ub85c \ud569\ub2c8\ub2e4. \uc0c8\ub85c \ubc30\uc6b8 \uad6c\ubb38\ub3c4 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\uc800 Modern Python \ud45c\uc900\uc785\ub2c8\ub2e4. Python \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c \uc798 \ubaa8\ub978\ub2e4\uba74 (FastAPI\uc744 \uc548 \uc4f0\ub354\ub77c\ub3c4), \uc5ec\uae30 \uc9e7\uc740 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ud655\uc778\ud574\ubcf4\uc138\uc694: Python Types . Python \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud574\uc11c \uc544\ub798\ucc98\ub7fc \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from datetime import date from pydantic import BaseModel # \ubcc0\uc218\ub97c str\ud615\uc73c\ub85c \ubc1b\uaca0\ub2e4\uace0 \uc120\uc5b8\ud558\uba74 # \uc774\uc81c \uc5d0\ub514\ud130\ub294 \ud568\uc218 \ub0b4\ubd80\uc758 \ubcc0\uc218\ub3c4 \ud0c0\uc785\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4 def main ( user_id : str ): return user_id # Pydantic \ubaa8\ub378 class User ( BaseModel ): id : int name : str joined : date \uc774\uc81c \uc774\ub807\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: my_user : User = User ( id = 3 , name = \"John Doe\" , joined = \"2018-07-19\" ) second_user_data = { \"id\" : 4 , \"name\" : \"Mary\" , \"joined\" : \"2018-11-30\" , } my_second_user : User = User ( ** second_user_data ) \uc815\ubcf4 **second_user_data \ub294 \uc758\ubbf8\ud558\ub294 \uac83\uc740 \uc774\ub807\uc2b5\ub2c8\ub2e4. second_user_data \ub515\uc154\ub108\ub9ac(dict) \ub0b4\uc758 \ubaa8\ub4e0 \ud0a4(key)\uc640 \uac12(value)\ub4e4\uc744 key-value \ud615\ud0dc\uc758 \ud30c\ub77c\ubbf8\ud130\ub85c \uc804\ubd80 \ub118\uae34\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4. \uc989, User(id=4, name=\"Mary\", joined=\"2018-11-30\") \uc640 \uac19\uc740 \ucf54\ub4dc\uac00 \ub429\ub2c8\ub2e4.","title":"Just Modern Python"},{"location":"features/#_3","text":"\ubaa8\ub4e0 \ud504\ub808\uc784\uc6cc\ud06c\ub294 \uc0ac\uc6a9\ud558\uae30 \uc27d\uace0 \uc9c1\uad00\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ubaa8\ub4e0 \ub0b4\uc6a9\uc740 \uac1c\ubc1c\uc744 \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \uc5ec\ub7ec \uc5d0\ub514\ud130\uc5d0\uc11c \ud14c\uc2a4\ud2b8\ub41c \ucd5c\uace0\uc758 \uac1c\ubc1c \uacbd\ud5d8\uc744 \ubcf4\uc7a5\ubc1b\uc744 \uc218 \uc788\ub3c4\ub85d \uacb0\uc815\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ucd5c\uadfc \ud30c\uc774\uc36c \uac1c\ubc1c\uc790 \uc124\ubb38\uc5d0\uc11c, \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ud558\ub294 \uae30\ub2a5\uc740 \"\uc790\ub3d9\uc644\uc131\" \uc774\uc5c8\uc2b5\ub2c8\ub2e4. FastAPI \ud504\ub808\uc784\uc6cc\ud06c \uc804\uccb4\uc5d0\uc11c \uc774\uac78 \ub9cc\uc871\ud569\ub2c8\ub2e4. \uc5b4\ub514\uc11c\ub4e0 \uc790\ub3d9\uc644\uc131 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubb38\uc11c\ub97c \ubcf4\ub7ec \uc624\ub294 \uc77c\uc774 \uac70\uc758 \uc5c6\uc744\uac81\ub2c8\ub2e4. \uc5d0\ub514\ud130\ubcc4\ub85c \uc5b4\ub5bb\uac8c \uc9c0\uc6d0\ud558\ub294 \uc9c0\ub294 \uc544\ub798\ub97c \ucc38\uace0\ud558\uc138\uc694. Visual Studio Code PyCharm \uc804\uc5d0\ub294 \uc548\ub420\uac70\ub77c\uace0 \uc0dd\uac01\ud588\ub358 \ucf54\ub4dc\ub3c4 \uc790\ub3d9 \uc644\uc131\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74, JSON body \uc548\uc758 (\uc911\ucca9\ub418\uc5b4 \uc788\uc744 \uc218\ub3c4 \uc788\ub294) price \ub77c\ub294 \ud0a4\ub294 Request\ub85c \ub118\uc5b4\uc628 \uac1d\uccb4 \ub0b4\uc5d0 \uc788\uc9c0\ub9cc \uc790\ub3d9 \uc644\uc131\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc774\uc820 \uc774\ub984\uc744 \uc798\ubabb \uc801\uc9c0 \ub9c8\uc138\uc694. username \uc778\uc9c0 user_name \uc778\uc9c0 \ubab0\ub77c\uc11c, \ubb38\uc11c\ub97c \uc654\ub2e4 \uac14\ub2e4 \ud560 \uc77c\ub3c4 \uc2a4\ud06c\ub864\uc744 \uc704\uc544\ub798\ub85c \ud6d1\uc744 \ud544\uc694\ub3c4 \uc5c6\uc2b5\ub2c8\ub2e4.","title":"\uc5d0\ub514\ud130 \uc9c0\uc6d0"},{"location":"features/#_4","text":"\ubaa8\ub4e0 \uac83\uc774 \ud569\ub9ac\uc801\uc778 \uae30\ubcf8\uac12 \uc744 \uac16\uace0 \uc788\uace0, \uc5b4\ub514\ub4e0 \uc6d0\ud558\uba74 \uc124\uc815\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \ud30c\ub77c\ubbf8\ud130\ub294 \ud558\uace0 \uc2f6\uc740 \uac83\uc5d0 \ub530\ub77c, \uc6d0\ud558\ub294 API \uc815\uc758\uc5d0 \ub530\ub77c \uc785\ub9db\uc5d0 \ub9de\uac8c \ubc14\uafc0 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c, \uc804\ubd80 \"\uadf8\ub0e5 \ub418\uac70\ub4e0\uc694\" .","title":"\uc694\uc57d"},{"location":"features/#_5","text":"\uc544\ub798\ub97c \ud3ec\ud568\ud55c, \uac70\uc758 \ub300\ubd80\ubd84\uc758 \ud30c\uc774\uc36c \ub370\uc774\ud130 \ud0c0\uc785 \uc5d0 \ub300\ud55c \uac80\uc99d\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. JSON objects ( dict ). JSON array ( list ) defining item types. String ( str ) fields, defining min and max lengths. Numbers ( int , float ) with min and max values, etc. \uc544\ub798\uc640 \uac19\uc740, \uc678\ubd80\uc801\uc778 \ud0c0\uc785\ub4e4\uc758 \uac80\uc99d\ub3c4 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. URL Email UUID \uadf8 \uc678 \ubaa8\ub4e0 \uac80\uc99d\uc740 \uacac\uace0\ud558\uac8c \uc798 \uc124\uacc4\ub41c Pydantic \uc73c\ub85c \ucc98\ub9ac\ud569\ub2c8\ub2e4.","title":"\uac80\uc99d"},{"location":"features/#_6","text":"\ub370\uc774\ud130\ubca0\uc774\uc2a4\ub098 \ub370\uc774\ud130 \ubaa8\ub378\uacfc \uad00\uacc4 \uc5c6\uc774, \ubcf4\uc548\uacfc \uc778\uc99d\uc744 \ud1b5\ud569\ud569\ub2c8\ub2e4. OpenAPI\uc5d0 \uc815\uc758\ub41c \ubcf4\uc548 \uc2a4\ud0a4\ub9c8\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: HTTP Basic. OAuth2 ( JWT tokens \ud3ec\ud568). OAuth2 with JWT \ubb38\uc11c\ub97c \ud655\uc778\ud558\uc138\uc694. API keys in: \ud5e4\ub354(Headers) \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218(Query parameters) \ucfe0\ud0a4(Cookies) \ub4f1 \uadf8\ub9ac\uace0 \ubaa8\ub4e0 \ubcf4\uc548 \uae30\ub2a5\ub4e4\uc740 Starlette \uae30\ubc18\uc785\ub2c8\ub2e4. ( \uc138\uc158 \ucfe0\ud0a4 \ud3ec\ud568). \ube4c\ub4dc\ub41c \ubaa8\ub4e0 \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ud234\uacfc \ucef4\ud3ec\ub10c\ud2b8\ub4e4\uc740 \uc2dc\uc2a4\ud15c\uc774\ub098 \ub370\uc774\ud130 \uc800\uc7a5\uc18c, \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4, NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub4f1\uacfc\ub3c4 \uc5f0\ub3d9\ud558\uae30 \uc27d\uc2b5\ub2c8\ub2e4.","title":"\ubcf4\uc548\uacfc \uc778\uc99d"},{"location":"features/#dependency-injection","text":"FastAPI\ub294 \ub9e4\uc6b0 \uc0ac\uc6a9\ud558\uae30 \uc27d\uace0 \ub9e4\uc6b0 \uac15\ub825\ud55c \uc758\uc874\uc131 \uc8fc\uc785(Dependency Injection) \uc2dc\uc2a4\ud15c\uc744 \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc758\uc874\uc131\uc774 \ub2e4\ub978 \uc758\uc874\uc131\uc744 \uac16\uace0 \uc788\ub2e4\uba74, \uc758\uc874\uc131 \uacc4\uce35 \uad6c\uc870\ub098 \uc758\uc874\uc131 \"\uadf8\ub798\ud504\" \ub97c \ub9cc\ub4ed\ub2c8\ub2e4. \ud504\ub808\uc784\uc6cc\ud06c\uc5d0\uc11c \uc804\ubd80 \uc790\ub3d9\uc73c\ub85c \ucc98\ub9ac \ub429\ub2c8\ub2e4. All the dependencies can require data from requests and augment the path operation constraints and automatic documentation. \uc790\ub3d9 \uac80\uc99d \uc740 path operation \ud30c\ub77c\ubbf8\ud130\uc5d0\ub3c4 \uc758\uc874\uc131\uc744 \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcf5\uc7a1\ud55c \uc720\uc800 \uc778\uc99d \uc2dc\uc2a4\ud15c, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \ub4f1 \uc9c0\uc6d0 \ub370\uc774\ud130\ubca0\uc774\uc2a4, \ud504\ub860\ud2b8\uc5d4\ub4dc \ub4f1\uc744 \uc2e0\uacbd \uc4f8 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ud1b5\ud569\uc740 \ubb34\ucc99 \uc27d\uc2b5\ub2c8\ub2e4.","title":"\uc758\uc874\uc131 \uc8fc\uc785(Dependency Injection)"},{"location":"features/#_7","text":"\ub2e4\ub974\uac8c \ub9d0\ud558\uba74, \ud50c\ub7ec\uadf8\uc778\uc774\ub77c\uace0 \ud560 \uac8c \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ud544\uc694\ud55c \ucf54\ub4dc\ub97c \ubd88\ub7ec\uc640\uc11c \uc0ac\uc6a9\ud558\uc138\uc694. \ubaa8\ub4e0 \uc758\uc874\uc131\uc744 \uace0\ub824\ud558\uba74\uc11c \ud1b5\ud569\ud558\uae30 \uc27d\ub3c4\ub85d \uace0\uc548\ub418\uc5c8\uc2b5\ub2c8\ub2e4. path operations \uc5d0 \uc791\uc131\ud55c \uac83\uacfc \ub3d9\uc77c\ud55c \uad6c\uc870\uc640 \uad6c\ubb38\uc73c\ub85c \uc9e0 2\uc904\uc9dc\ub9ac \ucf54\ub4dc\ub85c\ub3c4 \"\ud50c\ub7ec\uadf8\uc778\"\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ubb34\ud55c\ud55c \"\ud50c\ub7ec\uadf8\uc778\""},{"location":"features/#_8","text":"100% test coverage . 100% type annotated code base. \uc2e4\uc81c\ub85c \ubc30\ud3ec\ud574\uc11c \uc0ac\uc6a9\ud574\ubd24\uc74c.","title":"\ud14c\uc2a4\ud2b8"},{"location":"features/#starlette-features","text":"FastAPI \ub294 Starlette \ub97c \uc644\uc804\ud788 \ud638\ud658\ud558\uace0, \uadf8 \uae30\ubc18\uc774\uae30\ub3c4 \ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \uac00\uc9c0\uace0 \uc788\ub358 Starlette \ucf54\ub4dc\ub97c \ucd94\uac00\ud574\ub3c4 \uc798 \ub3d9\uc791\ud560 \uac83\uc785\ub2c8\ub2e4. FastAPI \ub294 \uc2e4\uc81c\ub85c Starlette \uc758 \uc11c\ube0c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc774\ubbf8 Starlette\ub97c \uc54c\uace0 \uc788\uac70\ub098 \uc368\ubd24\ub2e4\uba74, \ub300\ubd80\ubd84\uc758 \uae30\ub2a5\uc740 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ub3d9\uc791\ud560 \uac83\uc785\ub2c8\ub2e4. FastAPI \uc5d0\uc11c\ub294 Starlette \uc758 \ubaa8\ub4e0 \uae30\ub2a5\uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (FastAPI\ub294 Starlette\uc758 \uc0c1\uc704 \ud638\ud658\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.) \ub9e4\uc6b0 \uc5c4\uccad\ub09c \uc131\ub2a5. NodeJS , Go \ub9cc\ud07c \uac00\uc7a5 \ube60\ub978 \ud30c\uc774\uc36c \ud504\ub808\uc784\uc6cc\ud06c \uc911 \ud558\ub098 . WebSocket \uc9c0\uc6d0. \ubc31\uadf8\ub77c\uc6b4\ub4dc\uc5d0\uc11c \ucc98\ub9ac\ud558\ub294 \uc791\uc5c5\ub4e4. \uc2dc\uc791\uacfc \uc885\ub8cc \uc774\ubca4\ud2b8\ub4e4. Test client built on requests . CORS , GZip, \uc815\uc801 \ud30c\uc77c\ub4e4, Streaming responses. \uc138\uc158\uacfc \ucfe0\ud0a4 \uc9c0\uc6d0. 100% test coverage. 100% type annotated codebase.","title":"Starlette features"},{"location":"features/#pydantic-features","text":"FastAPI \ub294 Pydantic \ub97c \uc644\uc804\ud788 \ud638\ud658\ud558\uace0, \uadf8 \uae30\ubc18\uc774\uae30\ub3c4 \ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \uac00\uc9c0\uace0 \uc788\ub358 Pydantic \ucf54\ub4dc\ub97c \ucd94\uac00\ud574\ub3c4 \uc798 \ub3d9\uc791\ud560 \uac83\uc785\ub2c8\ub2e4. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uad00\ub828 ORM , ODM \ub4f1\uc758 Pydantic \uae30\ubc18\uc758 \uc678\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c \ud638\ud658\ub429\ub2c8\ub2e4. \ubaa8\ub4e0 \uac8c \uc790\ub3d9\uc801\uc73c\ub85c \uac80\uc99d\ub418\uae30 \ub54c\ubb38\uc5d0, request\ub85c \ubc1b\uc740 \uac1d\uccb4\ub97c \uadf8\ub300\ub85c \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub85c \uc9c1\uc811 \ub118\uae30\ub294 \ub4f1\uc758 \uc0c1\ud669\ub3c4 \uac00\ub2a5\ud558\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \ubc18\ub300\uc758 \uacbd\uc6b0\ub3c4 \uadf8\ub300\ub85c \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uaebc\ub0b8 \uac1d\uccb4\ub97c \uadf8\ub300\ub85c \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0 \uc9c1\uc811 \uc804\ub2ec\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \uc5d0\uc11c\ub294 Pydantic \uc758 \ubaa8\ub4e0 \uae30\ub2a5\uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (FastAPI\ub294 \ubaa8\ub4e0 \ub370\uc774\ud130 \ucc98\ub9ac\ub97c Pydantic \uae30\ubc18\uc73c\ub85c \ud558\uace0 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.) \uba38\ub9ac \uae68\uc9c0\ub294 \uc77c\uc740 \uc774\uc81c \uadf8\ub9cc : \uc0c8\ub85c \ubc30\uc6cc\uc57c \ud560 \uc790\uc798\ud55c schema \uc815\uc758\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c \uc548\ub2e4\uba74, Pydantic\ub97c \ucda9\ubd84\ud788 \uc4f8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. IDE , linter , \uadf8\ub9ac\ub3c4 \ub2f9\uc2e0\uc758 \ub450\ub1cc \ub97c \uc798 \ud65c\uc6a9\ud558\uc138\uc694: Pydantic\uc758 \uc790\ub8cc \uad6c\uc870\ub294 \uc5ec\ub7ec\ubd84\uc774 \uc815\uc758\ud55c \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\ub4e4\ubfd0\uc785\ub2c8\ub2e4. \uc790\ub3d9 \uc644\uc131, \ubb38\ubc95 \uac80\uc0ac, mypy \uadf8\ub9ac\uace0 \uc5ec\ub7ec\ubd84\uc758 \uc9c1\uac10\uc740 \uac80\uc99d\ub41c \ub370\uc774\ud130\uc640 \uc798 \ub3cc\uc544\uac08 \uac81\ub2c8\ub2e4. \ube60\ub974\ub2e4 : \ubca4\uce58\ub9c8\ud0b9 \uc5d0\uc11c Pydantic\uc774 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\ubcf4\ub2e4 \ube60\ub974\ub2e8 \uac83\uc744 \ud655\uc778\ud588\uc2b5\ub2c8\ub2e4. \ubcf5\uc7a1\ud55c \uad6c\uc870 \uac80\uc99d: \uacc4\uce35\uc801\uc778 Pydantic \ubaa8\ub378, \ud30c\uc774\uc36c\uc758 typing \uc5d0 \uc788\ub294 List and Dict \ub4f1\uc744 \uc0ac\uc6a9\ud558\uc138\uc694. Validator\ub294 \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \uc2a4\ud0a4\ub9c8\ub4e4\uc744 \uac04\ub2e8\ud558\uace0 \uc27d\uac8c \uc815\uc758\ud558\uace0 \uac80\uc0ac\ud560 \uc218 \uc788\uac8c, \uadf8\ub9ac\uace0 JSON \uc2a4\ud0a4\ub9c8\ub85c \ubb38\uc11c\ud654\uae4c\uc9c0 \ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4. \uae4a\uc774\uac00 \uae4a\uc740 Nested JSON \uac1d\uccb4\ub3c4 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc804\ubd80 \uac80\uc99d\ub418\uace0 \uc8fc\uc11d\uc774 \ub2ec\ub9b0 \ucc44\ub85c\uc694. \ud655\uc7a5\uc131 : Pydantic\uc740 \ucee4\uc2a4\ud140 \ub370\uc774\ud130 \ud0c0\uc785\ub4e4\uc744 \uc815\uc758\ud560 \uc218 \uc788\uac8c \ub9cc\ub4ed\ub2c8\ub2e4. \uc544\ub2c8\uba74, \ubaa8\ub378\uc5d0 validator decorator\ub97c \ub370\ucf54\ub808\uc774\ud2b8(decorate)\ud55c \ud6c4, \ud568\uc218\ub97c \uc791\uc131\ud574\uc11c validation\uc744 \ud655\uc7a5\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. 100% test coverage.","title":"Pydantic features"},{"location":"help-fastapi/","text":"FastAPI \uc9c0\uc6d0 - \ub3c4\uc6c0\ub9d0 \ubc1b\uae30 \u00b6 FastAPI \uac00 \ub9c8\uc74c\uc5d0 \ub4dc\uc2dc\ub098\uc694? FastAPI, \ub2e4\ub978 \uc0ac\uc6a9\uc790, \uac1c\ubc1c\uc790\ub97c \uc751\uc6d0\ud558\uace0 \uc2f6\uc73c\uc2e0\uac00\uc694? \ud639\uc740 FastAPI \uc5d0 \ub300\ud574 \ub3c4\uc6c0\uc774 \ud544\uc694\ud558\uc2e0\uac00\uc694? \uc544\uc8fc \uac04\ub2e8\ud558\uac8c \uc751\uc6d0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\uba87 \ubc88\uc758 \ud074\ub9ad\ub9cc\uc73c\ub85c). \ub610\ud55c \ub3c4\uc6c0\uc744 \ubc1b\uc744 \uc218 \uc788\ub294 \ubc29\ubc95\ub3c4 \uba87 \uac00\uc9c0 \uc788\uc2b5\ub2c8\ub2e4. ## \ub274\uc2a4\ub808\ud130 \uad6c\ub3c5 FastAPI\uc640 \uce5c\uad6c \ub274\uc2a4\ub808\ud130 \ub97c \uad6c\ub3c5\ud558\uc5ec \ucd5c\uc2e0 \uc815\ubcf4\ub97c \uc720\uc9c0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4{.internal-link target=_blank}: FastAPI \uc640 \uadf8 \uce5c\uad6c\ub4e4\uc5d0 \ub300\ud55c \ub274\uc2a4 \ud83d\ude80 \uac00\uc774\ub4dc \ud83d\udcdd \ud2b9\uc9d5 \u2728 \ud68d\uae30\uc801\uc778 \ubcc0\ud654 \ud83d\udea8 \ud301\uacfc \uc694\ub839 \u2705 ## \ud2b8\uc704\ud130\uc5d0\uc11c FastAPI \ud314\ub85c\uc6b0\ud558\uae30 Follow @fastapi on Twitter \ub97c \ud314\ub85c\uc6b0\ud558\uc5ec FastAPI \uc5d0 \ub300\ud55c \ucd5c\uc2e0 \ub274\uc2a4\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\udc26 ## Star FastAPI in GitHub GitHub\uc5d0\uc11c FastAPI\uc5d0 \"star\"\ub97c \ubd99\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4(\uc624\ub978\ucabd \uc0c1\ub2e8\uc758 star \ubc84\ud2bc\uc744 \ud074\ub9ad): https://github.com/tiangolo/fastapi. \u2b50\ufe0f \uc2a4\ud0c0\ub97c \ub298\ub9bc\uc73c\ub85c\uc368, \ub2e4\ub978 \uc0ac\uc6a9\uc790\ub4e4\uc774 \uc880 \ub354 \uc27d\uac8c \ucc3e\uc744 \uc218 \uc788\uace0, \ub9ce\uc740 \uc0ac\ub78c\ub4e4\uc5d0\uac8c \uc720\uc6a9\ud55c \uac83\uc784\uc744 \ub098\ud0c0\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. ## GitHub \uc800\uc7a5\uc18c\uc5d0\uc11c \ub9b4\ub9ac\uc988 \ud655\uc778 GitHub\uc5d0\uc11c FastAPI\ub97c \"watch\"\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\uc624\ub978\ucabd \uc0c1\ub2e8 watch \ubc84\ud2bc\uc744 \ud074\ub9ad): https://github.com/tiangolo/fastapi. \ud83d\udc40 \uc5ec\uae30\uc11c \"Releases only\"\uc744 \uc120\ud0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c\ud558\uba74, FastAPI \uc758 \ubc84\uadf8 \uc218\uc815 \ubc0f \uc0c8\ub85c\uc6b4 \uae30\ub2a5\uc758 \uad6c\ud604 \ub4f1\uc758 \uc0c8\ub85c\uc6b4 \uc790\ub8cc (\ucd5c\uc2e0 \ubc84\uc804)\uc774 \uc788\uc744 \ub54c\ub9c8\ub2e4 (\uc774\uba54\uc77c) \ud1b5\uc9c0\ub97c \ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ## \uac1c\ubc1c\uc790\uc640\uc758 \uc5f0\uacb0 \uac1c\ubc1c\uc790\uc778 me (Sebasti\u00e1n Ram\u00edrez / tiangolo ) \uc640 \uc5f0\ub77d\uc744 \ucde8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: GitHub \uc5d0\uc11c \ud314\ub85c\uc6b0\ud558\uae30 . \ub2f9\uc2e0\uc5d0\uac8c \ub3c4\uc6c0\uc774 \ub420 \uc800\uc758 \ub2e4\ub978 \uc624\ud508\uc18c\uc2a4 \ud504\ub85c\uc81d\ud2b8\ub97c \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \uc0c8\ub85c\uc6b4 \uc624\ud508\uc18c\uc2a4 \ud504\ub85c\uc81d\ud2b8\ub97c \ub9cc\ub4e4\uc5c8\uc744 \ub54c \ud655\uc778\ud558\ub824\uba74 \ud314\ub85c\uc6b0 \ud558\uc2ed\uc2dc\uc624. Twitter \uc5d0\uc11c \ud314\ub85c\uc6b0\ud558\uae30 . FastAPI\uc758 \uc0ac\uc6a9 \uc6a9\ub3c4\ub97c \uc54c\ub824\uc8fc\uc138\uc694 (\uadf8\uac83\uc744 \ub4e3\ub294 \uac83\uc744 \uc88b\uc544\ud569\ub2c8\ub2e4). \ubc1c\ud45c \ub610\ub294 \uc0c8\ub85c\uc6b4 \ud234 \ucd9c\uc2dc\ud560 \ub54c \ub4e4\uc73c\uc2ed\uc2dc\uc624. follow @fastapi on Twitter (\ubcc4\ub3c4 \uacc4\uc815\uc5d0\uc11c) \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Linkedin \uc5d0\uc11c\uc758 \uc5f0\uacb0 . \uc0c8\ub85c\uc6b4 \ud234\uc758 \ubc1c\ud45c\ub098 \ub9b4\ub9ac\uc2a4\ub97c \ub4e4\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\ub2e8, Twitter\ub97c \ub354 \uc790\uc8fc \uc0ac\uc6a9\ud569\ub2c8\ub2e4 \ud83e\udd37\u200d\u2642). Dev.to \ub610\ub294 Medium \uc5d0\uc11c \uc81c\uac00 \uc791\uc131\ud55c \ub0b4\uc6a9\uc744 \uc77d\uc5b4 \ubcf4\uc2ed\uc2dc\uc624(\ub610\ub294 \ud314\ub85c\uc6b0). \ub2e4\ub978 \uae30\uc0ac\ub098 \uc544\uc774\ub514\uc5b4\ub4e4\uc744 \uc77d\uace0, \uc81c\uac00 \ub9cc\ub4e4\uc5b4\uc654\ub358 \ud234\uc5d0 \ub300\ud574\uc11c\ub3c4 \uc77d\uc73c\uc2ed\uc2dc\uc624. \uc0c8\ub85c\uc6b4 \uae30\uc0ac\ub97c \uc77d\uae30 \uc704\ud574 \ud314\ub85c\uc6b0 \ud558\uc2ed\uc2dc\uc624. ## FastAPI \uc5d0 \ub300\ud55c \ud2b8\uc717 FastAPI \uc5d0 \ub300\ud574 \ud2b8\uc717 \ud558\uace0 FastAPI\uac00 \ub9c8\uc74c\uc5d0 \ub4dc\ub294 \uc774\uc720\ub97c \uc54c\ub824\uc8fc\uc138\uc694. \ud83c\udf89 FastAPI \uac00 \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ub418\uace0 \uc788\ub294\uc9c0, \uc5b4\ub5a4 \uc810\uc774 \ub9c8\uc74c\uc5d0 \ub4e4\uc5c8\ub294\uc9c0, \uc5b4\ub5a4 \ud504\ub85c\uc81d\ud2b8/\ud68c\uc0ac\uc5d0\uc11c \uc0ac\uc6a9\ud558\uace0 \uc788\ub294\uc9c0 \ub4f1\uc5d0 \ub300\ud574 \ub4e3\uace0 \uc2f6\uc2b5\ub2c8\ub2e4. ## FastAPI\uc5d0 \ud22c\ud45c\ud558\uae30 Slant\uc5d0\uc11c FastAPI \uc5d0 \ub300\ud574 \ud22c\ud45c\ud558\uc2ed\uc2dc\uc624 . AlternativeTo FastAPI \uc5d0 \ub300\ud574 \ud22c\ud45c\ud558\uc2ed\uc2dc\uc624 . ## GitHub\uc758 \uc774\uc288\ub85c \ub2e4\ub978\uc0ac\ub78c \ub3d5\uae30 \uc874\uc7ac\ud558\ub294 \uc774\uc288 \ub97c \ud655\uc778\ud558\uace0 \uadf8\uac83\uc744 \uc2dc\ub3c4\ud558\uace0 \ub3c4\uc640\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uc774\ubbf8 \ub2f5\uc744 \uc54c\uace0 \uc788\ub294 \uc9c8\ubb38\uc785\ub2c8\ub2e4. \ud83e\udd13 \ub9ce\uc740 \uc0ac\ub78c\ub4e4\uc758 \ubb38\uc81c\ub97c \ub3c4\uc640\uc900\ub2e4\uba74, \uacf5\uc2dd\uc801\uc778 FastAPI \uc804\ubb38\uac00 \uac00 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4{.internal-link target=_blank}. \ud83c\udf89 ## GitHub \uc800\uc7a5\uc18c \ubcf4\uae30 GitHub\uc5d0\uc11c FastAPI\ub97c \"watch\"\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\uc624\ub978\ucabd \uc0c1\ub2e8 watch \ubc84\ud2bc\uc744 \ud074\ub9ad): https://github.com/tiangolo/fastapi. \ud83d\udc40 \"Releases only\" \ub300\uc2e0 \"Watching\"\uc744 \uc120\ud0dd\ud558\uba74 \ub2e4\ub978 \uc0ac\uc6a9\uc790\uac00 \uc0c8\ub85c\uc6b4 issue\ub97c \uc0dd\uc131\ud560 \ub54c \uc54c\ub9bc\uc774 \uc218\uc2e0\ub429\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \uc774\ub7f0 issues\ub97c \ud574\uacb0 \ud560 \uc218 \uc788\ub3c4\ub85d \ub3c4\uc6c0\uc744 \uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ## \uc774\uc288 \uc0dd\uc131\ud558\uae30 GitHub \uc800\uc7a5\uc18c\uc5d0 \uc0c8\ub85c\uc6b4 \uc774\uc288 \uc0dd\uc131 \uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4, \uc608\ub97c\ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: \uc9c8\ubb38 \uc744 \ud558\uac70\ub098 \ubb38\uc81c \uc5d0 \ub300\ud574 \uc9c8\ubb38\ud569\ub2c8\ub2e4. \uc0c8\ub85c\uc6b4 \uae30\ub2a5 \uc744 \uc81c\uc548 \ud569\ub2c8\ub2e4. \ucc38\uace0 : \ub9cc\uc57d \uc774\uc288\ub97c \uc0dd\uc131\ud55c\ub2e4\uba74, \uc800\ub294 \uc5ec\ub7ec\ubd84\uc5d0\uac8c \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc744 \ub3c4\uc640\ub2ec\ub77c\uace0 \ubd80\ud0c1\ud560 \uac83\uc785\ub2c8\ub2e4. \ud83d\ude09 ## Pull Request\ub97c \ub9cc\ub4dc\uc2ed\uc2dc\uc624 Pull Requests\ub97c \uc774\uc6a9\ud558\uc5ec \uc18c\uc2a4\ucf54\ub4dc\uc5d0 \ucee8\ud2b8\ub9ac\ubdf0\ud2b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: \ubb38\uc11c\uc5d0\uc11c \ucc3e\uc740 \uc624\ud0c0\ub97c \uc218\uc815\ud560 \ub54c. FastAPI\ub97c \ud3b8\uc9d1\ud558\uc5ec \uc791\uc131\ud588\uac70\ub098 \ucc3e\uc740 \ubb38\uc11c, \ube44\ub514\uc624 \ub610\ub294 \ud31f\uce90\uc2a4\ud2b8\ub97c \uacf5\uc720\ud560 \ub54c. \ud574\ub2f9 \uc139\uc158\uc758 \uc2dc\uc791 \ubd80\ubd84\uc5d0 \ub9c1\ud06c\ub97c \ucd94\uac00\ud588\ub294\uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \ub2f9\uc2e0\uc758 \uc5b8\uc5b4\ub85c \ubb38\uc11c \ubc88\uc5ed\ud558\ub294\ub370 \uae30\uc5ec\ud560 \ub54c. \ub610\ud55c \ub2e4\ub978 \uc0ac\uc6a9\uc790\uac00 \ub9cc\ub4e0 \ubc88\uc5ed\uc744 \uac80\ud1a0\ud558\ub294\ub370 \ub3c4\uc6c0\uc744 \uc904 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc0c8\ub85c\uc6b4 \ubb38\uc11c\uc758 \uc139\uc158\uc744 \uc81c\uc548\ud560 \ub54c. \uae30\uc874 \ubb38\uc81c/\ubc84\uadf8\ub97c \uc218\uc815\ud560 \ub54c. \uc0c8\ub85c\uc6b4 feature\ub97c \ucd94\uac00\ud560 \ub54c. ## \ucc44\ud305\uc5d0 \ucc38\uc5ec\ud558\uc2ed\uc2dc\uc624 \ud83d\udc65 \ub514\uc2a4\ucf54\ub4dc \ucc44\ud305 \uc11c\ubc84 \ud83d\udc65 \uc5d0 \uac00\uc785\ud558\uace0 FastAPI \ucee4\ubba4\ub2c8\ud2f0\uc5d0\uc11c \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uacfc \uc5b4\uc6b8\ub9ac\uc138\uc694. !!! tip \uc9c8\ubb38\uc774 \uc788\ub294 \uacbd\uc6b0, GitHub \uc774\uc288 \uc5d0\uc11c \uc9c8\ubb38\ud558\uc2ed\uc2dc\uc624, FastAPI \uc804\ubb38\uac00 \uc758 \ub3c4\uc6c0\uc744 \ubc1b\uc744 \uac00\ub2a5\uc131\uc774 \ub192\uc2b5\ub2c8\ub2e4{.internal-link target=_blank} . \ub2e4\ub978 \uc77c\ubc18\uc801\uc778 \ub300\ud654\uc5d0\uc11c\ub9cc \ucc44\ud305\uc744 \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. \uae30\uc874 \uc9c0\ud130 \ucc44\ud305 \uc774 \uc788\uc9c0\ub9cc \ucc44\ub110\uacfc \uace0\uae09\uae30\ub2a5\uc774 \uc5c6\uc5b4\uc11c \ub300\ud654\ub97c \ud558\uae30\uac00 \uc870\uae08 \uc5b4\ub835\uae30 \ub54c\ubb38\uc5d0 \uc9c0\uae08\uc740 \ub514\uc2a4\ucf54\ub4dc\uac00 \uad8c\uc7a5\ub418\ub294 \uc2dc\uc2a4\ud15c\uc785\ub2c8\ub2e4. ### \uc9c8\ubb38\uc744 \uc704\ud574 \ucc44\ud305\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624 \ucc44\ud305\uc740 \ub354 \ub9ce\uc740 \"\uc790\uc720\ub85c\uc6b4 \ub300\ud654\"\ub97c \ud5c8\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0, \ub108\ubb34 \uc77c\ubc18\uc801\uc778 \uc9c8\ubb38\uc774\ub098 \ub300\ub2f5\ud558\uae30 \uc5b4\ub824\uc6b4 \uc9c8\ubb38\uc744 \uc27d\uac8c \uc9c8\ubb38\uc744 \ud560 \uc218 \uc788\uc73c\ubbc0\ub85c, \ub2f5\ubcc0\uc744 \ubc1b\uc9c0 \ubabb\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. GitHub \uc774\uc288\uc5d0\uc11c\uc758 \ud15c\ud50c\ub9bf\uc740 \uc62c\ubc14\ub978 \uc9c8\ubb38\uc744 \uc791\uc131\ud558\ub3c4\ub85d \uc548\ub0b4\ud558\uc5ec \ub354 \uc27d\uac8c \uc88b\uc740 \ub2f5\ubcc0\uc744 \uc5bb\uac70\ub098 \uc9c8\ubb38\ud558\uae30 \uc804\uc5d0 \uc2a4\uc2a4\ub85c \ubb38\uc81c\ub97c \ud574\uacb0\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 GitHub\uc5d0\uc11c\ub294 \uc2dc\uac04\uc774 \uc870\uae08 \uac78\ub9ac\ub354\ub77c\ub3c4 \ud56d\uc0c1 \ubaa8\ub4e0 \uac83\uc5d0 \ub2f5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucc44\ud305 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 \uac1c\uc778\uc801\uc73c\ub85c \uadf8\ub807\uac8c \ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ud83d\ude05 \ucc44\ud305 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\uc758 \ub300\ud654 \ub610\ud55c GitHub\uc5d0\uc11c \ucc98\ub7fc \uc27d\uac8c \uac80\uc0c9\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \ub300\ud654 \uc911\uc5d0 \uc9c8\ubb38\uacfc \ub2f5\ubcc0\uc774 \uc190\uc2e4\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 GitHub \uc774\uc288\uc5d0 \uc788\ub294 \uac83\ub9cc FastAPI \uc804\ubb38\uac00 \uac00 \ub418\ub294 \uac83\uc73c\ub85c \uac04\uc8fc\ub418\ubbc0\ub85c{.internal-link target=_blank} , GitHub \uc774\uc288\uc5d0\uc11c \ub354 \ub9ce\uc740 \uad00\uc2ec\uc744 \ubc1b\uc744 \uac83\uc785\ub2c8\ub2e4. \ubc18\uba74, \ucc44\ud305 \uc2dc\uc2a4\ud15c\uc5d0\ub294 \uc218\ucc9c \uba85\uc758 \uc0ac\uc6a9\uc790\uac00 \uc788\uae30 \ub54c\ubb38\uc5d0, \uac70\uc758 \ud56d\uc0c1 \ub300\ud654 \uc0c1\ub300\ub97c \ucc3e\uc744 \uac00\ub2a5\uc131\uc774 \ub192\uc2b5\ub2c8\ub2e4. \ud83d\ude04 ## \uac1c\ubc1c\uc790 \uc2a4\ud3f0\uc11c\uac00 \ub418\uc2ed\uc2dc\uc624 GitHub \uc2a4\ud3f0\uc11c \ub97c \ud1b5\ud574 \uac1c\ubc1c\uc790\ub97c \uacbd\uc81c\uc801\uc73c\ub85c \uc9c0\uc6d0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac10\uc0ac\ud558\ub2e4\ub294 \ub9d0\ub85c \ucee4\ud53c\ub97c \u2615\ufe0f \ud55c\uc794 \uc0ac\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\ude04 \ub610\ud55c FastAPI\uc758 \uc2e4\ubc84 \ub610\ub294 \uace8\ub4dc \uc2a4\ud3f0\uc11c\uac00 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83c\udfc5\ud83c\udf89 ## FastAPI\ub97c \uac15\ud654\ud558\ub294 \ub3c4\uad6c\uc758 \uc2a4\ud3f0\uc11c\uac00 \ub418\uc2ed\uc2dc\uc624 \ubb38\uc11c\uc5d0\uc11c \ubcf4\uc558\ub4ef\uc774, FastAPI\ub294 Starlette\uacfc Pydantic \ub77c\ub294 \uac70\uc778\uc758 \uc5b4\uae68\uc5d0 \ud0c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc758 \uc2a4\ud3f0\uc11c\uac00 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4 Samuel Colvin (Pydantic) Encode (Starlette, Uvicorn) \uac10\uc0ac\ud569\ub2c8\ub2e4! \ud83d\ude80","title":"FastAPI \uc9c0\uc6d0 - \ub3c4\uc6c0\ub9d0 \ubc1b\uae30"},{"location":"help-fastapi/#fastapi-","text":"FastAPI \uac00 \ub9c8\uc74c\uc5d0 \ub4dc\uc2dc\ub098\uc694? FastAPI, \ub2e4\ub978 \uc0ac\uc6a9\uc790, \uac1c\ubc1c\uc790\ub97c \uc751\uc6d0\ud558\uace0 \uc2f6\uc73c\uc2e0\uac00\uc694? \ud639\uc740 FastAPI \uc5d0 \ub300\ud574 \ub3c4\uc6c0\uc774 \ud544\uc694\ud558\uc2e0\uac00\uc694? \uc544\uc8fc \uac04\ub2e8\ud558\uac8c \uc751\uc6d0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\uba87 \ubc88\uc758 \ud074\ub9ad\ub9cc\uc73c\ub85c). \ub610\ud55c \ub3c4\uc6c0\uc744 \ubc1b\uc744 \uc218 \uc788\ub294 \ubc29\ubc95\ub3c4 \uba87 \uac00\uc9c0 \uc788\uc2b5\ub2c8\ub2e4. ## \ub274\uc2a4\ub808\ud130 \uad6c\ub3c5 FastAPI\uc640 \uce5c\uad6c \ub274\uc2a4\ub808\ud130 \ub97c \uad6c\ub3c5\ud558\uc5ec \ucd5c\uc2e0 \uc815\ubcf4\ub97c \uc720\uc9c0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4{.internal-link target=_blank}: FastAPI \uc640 \uadf8 \uce5c\uad6c\ub4e4\uc5d0 \ub300\ud55c \ub274\uc2a4 \ud83d\ude80 \uac00\uc774\ub4dc \ud83d\udcdd \ud2b9\uc9d5 \u2728 \ud68d\uae30\uc801\uc778 \ubcc0\ud654 \ud83d\udea8 \ud301\uacfc \uc694\ub839 \u2705 ## \ud2b8\uc704\ud130\uc5d0\uc11c FastAPI \ud314\ub85c\uc6b0\ud558\uae30 Follow @fastapi on Twitter \ub97c \ud314\ub85c\uc6b0\ud558\uc5ec FastAPI \uc5d0 \ub300\ud55c \ucd5c\uc2e0 \ub274\uc2a4\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\udc26 ## Star FastAPI in GitHub GitHub\uc5d0\uc11c FastAPI\uc5d0 \"star\"\ub97c \ubd99\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4(\uc624\ub978\ucabd \uc0c1\ub2e8\uc758 star \ubc84\ud2bc\uc744 \ud074\ub9ad): https://github.com/tiangolo/fastapi. \u2b50\ufe0f \uc2a4\ud0c0\ub97c \ub298\ub9bc\uc73c\ub85c\uc368, \ub2e4\ub978 \uc0ac\uc6a9\uc790\ub4e4\uc774 \uc880 \ub354 \uc27d\uac8c \ucc3e\uc744 \uc218 \uc788\uace0, \ub9ce\uc740 \uc0ac\ub78c\ub4e4\uc5d0\uac8c \uc720\uc6a9\ud55c \uac83\uc784\uc744 \ub098\ud0c0\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. ## GitHub \uc800\uc7a5\uc18c\uc5d0\uc11c \ub9b4\ub9ac\uc988 \ud655\uc778 GitHub\uc5d0\uc11c FastAPI\ub97c \"watch\"\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\uc624\ub978\ucabd \uc0c1\ub2e8 watch \ubc84\ud2bc\uc744 \ud074\ub9ad): https://github.com/tiangolo/fastapi. \ud83d\udc40 \uc5ec\uae30\uc11c \"Releases only\"\uc744 \uc120\ud0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c\ud558\uba74, FastAPI \uc758 \ubc84\uadf8 \uc218\uc815 \ubc0f \uc0c8\ub85c\uc6b4 \uae30\ub2a5\uc758 \uad6c\ud604 \ub4f1\uc758 \uc0c8\ub85c\uc6b4 \uc790\ub8cc (\ucd5c\uc2e0 \ubc84\uc804)\uc774 \uc788\uc744 \ub54c\ub9c8\ub2e4 (\uc774\uba54\uc77c) \ud1b5\uc9c0\ub97c \ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ## \uac1c\ubc1c\uc790\uc640\uc758 \uc5f0\uacb0 \uac1c\ubc1c\uc790\uc778 me (Sebasti\u00e1n Ram\u00edrez / tiangolo ) \uc640 \uc5f0\ub77d\uc744 \ucde8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: GitHub \uc5d0\uc11c \ud314\ub85c\uc6b0\ud558\uae30 . \ub2f9\uc2e0\uc5d0\uac8c \ub3c4\uc6c0\uc774 \ub420 \uc800\uc758 \ub2e4\ub978 \uc624\ud508\uc18c\uc2a4 \ud504\ub85c\uc81d\ud2b8\ub97c \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \uc0c8\ub85c\uc6b4 \uc624\ud508\uc18c\uc2a4 \ud504\ub85c\uc81d\ud2b8\ub97c \ub9cc\ub4e4\uc5c8\uc744 \ub54c \ud655\uc778\ud558\ub824\uba74 \ud314\ub85c\uc6b0 \ud558\uc2ed\uc2dc\uc624. Twitter \uc5d0\uc11c \ud314\ub85c\uc6b0\ud558\uae30 . FastAPI\uc758 \uc0ac\uc6a9 \uc6a9\ub3c4\ub97c \uc54c\ub824\uc8fc\uc138\uc694 (\uadf8\uac83\uc744 \ub4e3\ub294 \uac83\uc744 \uc88b\uc544\ud569\ub2c8\ub2e4). \ubc1c\ud45c \ub610\ub294 \uc0c8\ub85c\uc6b4 \ud234 \ucd9c\uc2dc\ud560 \ub54c \ub4e4\uc73c\uc2ed\uc2dc\uc624. follow @fastapi on Twitter (\ubcc4\ub3c4 \uacc4\uc815\uc5d0\uc11c) \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Linkedin \uc5d0\uc11c\uc758 \uc5f0\uacb0 . \uc0c8\ub85c\uc6b4 \ud234\uc758 \ubc1c\ud45c\ub098 \ub9b4\ub9ac\uc2a4\ub97c \ub4e4\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\ub2e8, Twitter\ub97c \ub354 \uc790\uc8fc \uc0ac\uc6a9\ud569\ub2c8\ub2e4 \ud83e\udd37\u200d\u2642). Dev.to \ub610\ub294 Medium \uc5d0\uc11c \uc81c\uac00 \uc791\uc131\ud55c \ub0b4\uc6a9\uc744 \uc77d\uc5b4 \ubcf4\uc2ed\uc2dc\uc624(\ub610\ub294 \ud314\ub85c\uc6b0). \ub2e4\ub978 \uae30\uc0ac\ub098 \uc544\uc774\ub514\uc5b4\ub4e4\uc744 \uc77d\uace0, \uc81c\uac00 \ub9cc\ub4e4\uc5b4\uc654\ub358 \ud234\uc5d0 \ub300\ud574\uc11c\ub3c4 \uc77d\uc73c\uc2ed\uc2dc\uc624. \uc0c8\ub85c\uc6b4 \uae30\uc0ac\ub97c \uc77d\uae30 \uc704\ud574 \ud314\ub85c\uc6b0 \ud558\uc2ed\uc2dc\uc624. ## FastAPI \uc5d0 \ub300\ud55c \ud2b8\uc717 FastAPI \uc5d0 \ub300\ud574 \ud2b8\uc717 \ud558\uace0 FastAPI\uac00 \ub9c8\uc74c\uc5d0 \ub4dc\ub294 \uc774\uc720\ub97c \uc54c\ub824\uc8fc\uc138\uc694. \ud83c\udf89 FastAPI \uac00 \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ub418\uace0 \uc788\ub294\uc9c0, \uc5b4\ub5a4 \uc810\uc774 \ub9c8\uc74c\uc5d0 \ub4e4\uc5c8\ub294\uc9c0, \uc5b4\ub5a4 \ud504\ub85c\uc81d\ud2b8/\ud68c\uc0ac\uc5d0\uc11c \uc0ac\uc6a9\ud558\uace0 \uc788\ub294\uc9c0 \ub4f1\uc5d0 \ub300\ud574 \ub4e3\uace0 \uc2f6\uc2b5\ub2c8\ub2e4. ## FastAPI\uc5d0 \ud22c\ud45c\ud558\uae30 Slant\uc5d0\uc11c FastAPI \uc5d0 \ub300\ud574 \ud22c\ud45c\ud558\uc2ed\uc2dc\uc624 . AlternativeTo FastAPI \uc5d0 \ub300\ud574 \ud22c\ud45c\ud558\uc2ed\uc2dc\uc624 . ## GitHub\uc758 \uc774\uc288\ub85c \ub2e4\ub978\uc0ac\ub78c \ub3d5\uae30 \uc874\uc7ac\ud558\ub294 \uc774\uc288 \ub97c \ud655\uc778\ud558\uace0 \uadf8\uac83\uc744 \uc2dc\ub3c4\ud558\uace0 \ub3c4\uc640\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uc774\ubbf8 \ub2f5\uc744 \uc54c\uace0 \uc788\ub294 \uc9c8\ubb38\uc785\ub2c8\ub2e4. \ud83e\udd13 \ub9ce\uc740 \uc0ac\ub78c\ub4e4\uc758 \ubb38\uc81c\ub97c \ub3c4\uc640\uc900\ub2e4\uba74, \uacf5\uc2dd\uc801\uc778 FastAPI \uc804\ubb38\uac00 \uac00 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4{.internal-link target=_blank}. \ud83c\udf89 ## GitHub \uc800\uc7a5\uc18c \ubcf4\uae30 GitHub\uc5d0\uc11c FastAPI\ub97c \"watch\"\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\uc624\ub978\ucabd \uc0c1\ub2e8 watch \ubc84\ud2bc\uc744 \ud074\ub9ad): https://github.com/tiangolo/fastapi. \ud83d\udc40 \"Releases only\" \ub300\uc2e0 \"Watching\"\uc744 \uc120\ud0dd\ud558\uba74 \ub2e4\ub978 \uc0ac\uc6a9\uc790\uac00 \uc0c8\ub85c\uc6b4 issue\ub97c \uc0dd\uc131\ud560 \ub54c \uc54c\ub9bc\uc774 \uc218\uc2e0\ub429\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \uc774\ub7f0 issues\ub97c \ud574\uacb0 \ud560 \uc218 \uc788\ub3c4\ub85d \ub3c4\uc6c0\uc744 \uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ## \uc774\uc288 \uc0dd\uc131\ud558\uae30 GitHub \uc800\uc7a5\uc18c\uc5d0 \uc0c8\ub85c\uc6b4 \uc774\uc288 \uc0dd\uc131 \uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4, \uc608\ub97c\ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: \uc9c8\ubb38 \uc744 \ud558\uac70\ub098 \ubb38\uc81c \uc5d0 \ub300\ud574 \uc9c8\ubb38\ud569\ub2c8\ub2e4. \uc0c8\ub85c\uc6b4 \uae30\ub2a5 \uc744 \uc81c\uc548 \ud569\ub2c8\ub2e4. \ucc38\uace0 : \ub9cc\uc57d \uc774\uc288\ub97c \uc0dd\uc131\ud55c\ub2e4\uba74, \uc800\ub294 \uc5ec\ub7ec\ubd84\uc5d0\uac8c \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc744 \ub3c4\uc640\ub2ec\ub77c\uace0 \ubd80\ud0c1\ud560 \uac83\uc785\ub2c8\ub2e4. \ud83d\ude09 ## Pull Request\ub97c \ub9cc\ub4dc\uc2ed\uc2dc\uc624 Pull Requests\ub97c \uc774\uc6a9\ud558\uc5ec \uc18c\uc2a4\ucf54\ub4dc\uc5d0 \ucee8\ud2b8\ub9ac\ubdf0\ud2b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: \ubb38\uc11c\uc5d0\uc11c \ucc3e\uc740 \uc624\ud0c0\ub97c \uc218\uc815\ud560 \ub54c. FastAPI\ub97c \ud3b8\uc9d1\ud558\uc5ec \uc791\uc131\ud588\uac70\ub098 \ucc3e\uc740 \ubb38\uc11c, \ube44\ub514\uc624 \ub610\ub294 \ud31f\uce90\uc2a4\ud2b8\ub97c \uacf5\uc720\ud560 \ub54c. \ud574\ub2f9 \uc139\uc158\uc758 \uc2dc\uc791 \ubd80\ubd84\uc5d0 \ub9c1\ud06c\ub97c \ucd94\uac00\ud588\ub294\uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \ub2f9\uc2e0\uc758 \uc5b8\uc5b4\ub85c \ubb38\uc11c \ubc88\uc5ed\ud558\ub294\ub370 \uae30\uc5ec\ud560 \ub54c. \ub610\ud55c \ub2e4\ub978 \uc0ac\uc6a9\uc790\uac00 \ub9cc\ub4e0 \ubc88\uc5ed\uc744 \uac80\ud1a0\ud558\ub294\ub370 \ub3c4\uc6c0\uc744 \uc904 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc0c8\ub85c\uc6b4 \ubb38\uc11c\uc758 \uc139\uc158\uc744 \uc81c\uc548\ud560 \ub54c. \uae30\uc874 \ubb38\uc81c/\ubc84\uadf8\ub97c \uc218\uc815\ud560 \ub54c. \uc0c8\ub85c\uc6b4 feature\ub97c \ucd94\uac00\ud560 \ub54c. ## \ucc44\ud305\uc5d0 \ucc38\uc5ec\ud558\uc2ed\uc2dc\uc624 \ud83d\udc65 \ub514\uc2a4\ucf54\ub4dc \ucc44\ud305 \uc11c\ubc84 \ud83d\udc65 \uc5d0 \uac00\uc785\ud558\uace0 FastAPI \ucee4\ubba4\ub2c8\ud2f0\uc5d0\uc11c \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uacfc \uc5b4\uc6b8\ub9ac\uc138\uc694. !!! tip \uc9c8\ubb38\uc774 \uc788\ub294 \uacbd\uc6b0, GitHub \uc774\uc288 \uc5d0\uc11c \uc9c8\ubb38\ud558\uc2ed\uc2dc\uc624, FastAPI \uc804\ubb38\uac00 \uc758 \ub3c4\uc6c0\uc744 \ubc1b\uc744 \uac00\ub2a5\uc131\uc774 \ub192\uc2b5\ub2c8\ub2e4{.internal-link target=_blank} . \ub2e4\ub978 \uc77c\ubc18\uc801\uc778 \ub300\ud654\uc5d0\uc11c\ub9cc \ucc44\ud305\uc744 \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. \uae30\uc874 \uc9c0\ud130 \ucc44\ud305 \uc774 \uc788\uc9c0\ub9cc \ucc44\ub110\uacfc \uace0\uae09\uae30\ub2a5\uc774 \uc5c6\uc5b4\uc11c \ub300\ud654\ub97c \ud558\uae30\uac00 \uc870\uae08 \uc5b4\ub835\uae30 \ub54c\ubb38\uc5d0 \uc9c0\uae08\uc740 \ub514\uc2a4\ucf54\ub4dc\uac00 \uad8c\uc7a5\ub418\ub294 \uc2dc\uc2a4\ud15c\uc785\ub2c8\ub2e4. ### \uc9c8\ubb38\uc744 \uc704\ud574 \ucc44\ud305\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624 \ucc44\ud305\uc740 \ub354 \ub9ce\uc740 \"\uc790\uc720\ub85c\uc6b4 \ub300\ud654\"\ub97c \ud5c8\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0, \ub108\ubb34 \uc77c\ubc18\uc801\uc778 \uc9c8\ubb38\uc774\ub098 \ub300\ub2f5\ud558\uae30 \uc5b4\ub824\uc6b4 \uc9c8\ubb38\uc744 \uc27d\uac8c \uc9c8\ubb38\uc744 \ud560 \uc218 \uc788\uc73c\ubbc0\ub85c, \ub2f5\ubcc0\uc744 \ubc1b\uc9c0 \ubabb\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. GitHub \uc774\uc288\uc5d0\uc11c\uc758 \ud15c\ud50c\ub9bf\uc740 \uc62c\ubc14\ub978 \uc9c8\ubb38\uc744 \uc791\uc131\ud558\ub3c4\ub85d \uc548\ub0b4\ud558\uc5ec \ub354 \uc27d\uac8c \uc88b\uc740 \ub2f5\ubcc0\uc744 \uc5bb\uac70\ub098 \uc9c8\ubb38\ud558\uae30 \uc804\uc5d0 \uc2a4\uc2a4\ub85c \ubb38\uc81c\ub97c \ud574\uacb0\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 GitHub\uc5d0\uc11c\ub294 \uc2dc\uac04\uc774 \uc870\uae08 \uac78\ub9ac\ub354\ub77c\ub3c4 \ud56d\uc0c1 \ubaa8\ub4e0 \uac83\uc5d0 \ub2f5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucc44\ud305 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 \uac1c\uc778\uc801\uc73c\ub85c \uadf8\ub807\uac8c \ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ud83d\ude05 \ucc44\ud305 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\uc758 \ub300\ud654 \ub610\ud55c GitHub\uc5d0\uc11c \ucc98\ub7fc \uc27d\uac8c \uac80\uc0c9\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \ub300\ud654 \uc911\uc5d0 \uc9c8\ubb38\uacfc \ub2f5\ubcc0\uc774 \uc190\uc2e4\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 GitHub \uc774\uc288\uc5d0 \uc788\ub294 \uac83\ub9cc FastAPI \uc804\ubb38\uac00 \uac00 \ub418\ub294 \uac83\uc73c\ub85c \uac04\uc8fc\ub418\ubbc0\ub85c{.internal-link target=_blank} , GitHub \uc774\uc288\uc5d0\uc11c \ub354 \ub9ce\uc740 \uad00\uc2ec\uc744 \ubc1b\uc744 \uac83\uc785\ub2c8\ub2e4. \ubc18\uba74, \ucc44\ud305 \uc2dc\uc2a4\ud15c\uc5d0\ub294 \uc218\ucc9c \uba85\uc758 \uc0ac\uc6a9\uc790\uac00 \uc788\uae30 \ub54c\ubb38\uc5d0, \uac70\uc758 \ud56d\uc0c1 \ub300\ud654 \uc0c1\ub300\ub97c \ucc3e\uc744 \uac00\ub2a5\uc131\uc774 \ub192\uc2b5\ub2c8\ub2e4. \ud83d\ude04 ## \uac1c\ubc1c\uc790 \uc2a4\ud3f0\uc11c\uac00 \ub418\uc2ed\uc2dc\uc624 GitHub \uc2a4\ud3f0\uc11c \ub97c \ud1b5\ud574 \uac1c\ubc1c\uc790\ub97c \uacbd\uc81c\uc801\uc73c\ub85c \uc9c0\uc6d0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac10\uc0ac\ud558\ub2e4\ub294 \ub9d0\ub85c \ucee4\ud53c\ub97c \u2615\ufe0f \ud55c\uc794 \uc0ac\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\ude04 \ub610\ud55c FastAPI\uc758 \uc2e4\ubc84 \ub610\ub294 \uace8\ub4dc \uc2a4\ud3f0\uc11c\uac00 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83c\udfc5\ud83c\udf89 ## FastAPI\ub97c \uac15\ud654\ud558\ub294 \ub3c4\uad6c\uc758 \uc2a4\ud3f0\uc11c\uac00 \ub418\uc2ed\uc2dc\uc624 \ubb38\uc11c\uc5d0\uc11c \ubcf4\uc558\ub4ef\uc774, FastAPI\ub294 Starlette\uacfc Pydantic \ub77c\ub294 \uac70\uc778\uc758 \uc5b4\uae68\uc5d0 \ud0c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc758 \uc2a4\ud3f0\uc11c\uac00 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4 Samuel Colvin (Pydantic) Encode (Starlette, Uvicorn) \uac10\uc0ac\ud569\ub2c8\ub2e4! \ud83d\ude80","title":"FastAPI \uc9c0\uc6d0 - \ub3c4\uc6c0\ub9d0 \ubc1b\uae30"},{"location":"history-design-future/","text":"\uc5ed\uc0ac, \ub514\uc790\uc778 \uadf8\ub9ac\uace0 \ubbf8\ub798 \u00b6 \uacfc\uac70\uc5d0, \ud55c FastAPI \uc720\uc800\uac00 \ubb3c\uc5c8\uc2b5\ub2c8\ub2e4. \uc774 \ud504\ub85c\uc81d\ud2b8\uc758 \uc5ed\uc0ac\uac00 \uc5b4\ub5bb\uac8c \ub418\ub098\uc694? \ub2e8 \uba87 \uc8fc \ub9cc\uc5d0 \uc5b4\ub514\uc120\uac00 \ub098\ud0c0\ub09c \uac83 \uac19\uc544\uc11c\uc694 [...] \uc5ec\uae30\uc5d0 \uadf8 \uc5ed\uc0ac\ub97c \uba87 \uc790 \uc801\uc5b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \ub300\uc548\ub4e4 \u00b6 \uc800\ub294 \ubcf5\uc7a1\ud55c \uc694\uad6c \uc0ac\ud56d\uc5d0 \ub9de\ub294 API\ub97c \uba87 \ub144\uac04 \ub9cc\ub4e4\uc5b4 \uc654\uc2b5\ub2c8\ub2e4. \uba38\uc2e0 \ub7ec\ub2dd, \ubd84\uc0b0 \uc2dc\uc2a4\ud15c, \ube44\ub3d9\uae30 \uc791\uc5c5, NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub4f1\uc774\uc5c8\uace0, \uc5ec\ub7ec \uac1c\ubc1c \ud300\uc744 \uc774\ub04c\uae30\ub3c4 \ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub2e4\ubcf4\ub2c8, \uc800\ub294 \ub9ce\uc740 \ub300\uc548\ub4e4\uc744 \uc54c\uc544\ubcf4\uace0 \ud14c\uc2a4\ud2b8\ud558\uace0 \uc0ac\uc6a9\ud574\uc57c \ud588\uc2b5\ub2c8\ub2e4. FastAPI \uc758 \uc5ed\uc0ac\uc758 \ub300\ubd80\ubd84\uc740 \uadf8 \uc120\uad6c\uc790\ub4e4\uc758 \uc5ed\uc0ac\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. Alternatives \ubb38\uc11c\uc5d0 \uc801\uc740 \ubc14\uc640 \uac19\uc774, FastAPI \ub294 wouldn't exist if not for the previous work of others. FastAPI wouldn't exist if not for the previous work of others. \uc774\uac83\uc744 \ub9cc\ub4dc\ub294 \uac83\uc5d0 \uc601\uac10\uc744 \uc8fc\uc5c8\ub358, \uc774\uc804\uc5d0 \ub9cc\ub4e4\uc5b4\uc9c4 \ub9ce\uc740 \ud234\ub4e4\uc774 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc800\ub294 \uba87\ub144 \ub3d9\uc548 \uc0c8\ub85c\uc6b4 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \ub9cc\ub4dc\ub294 \uac83\uc744 \ud53c\ud558\uace0 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uba3c\uc800 FastAPI \uc5d0\uc11c \ub2e4\ub8e8\ub294 \ubaa8\ub4e0 \uae30\ub2a5\uc744 \ub9ce\uc740 \ub2e4\ub978 \ud504\ub808\uc784\uc6cc\ud06c, \ud50c\ub7ec\uadf8\uc778, \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud574\uacb0\ud558\ub824\uace0 \ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc5b4\ub290 \uc21c\uac04, \ub9cc\ub4dc\ub294 \uac83 \ub9d0\uace0\ub294 \ub2e4\ub978 \uc120\ud0dd\uc9c0\uac00 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4. \uc774 \ubaa8\ub4e0 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uace0, \uc774\uc804\uc758 \ub3c4\uad6c\ub4e4\uc5d0\uc11c \ucd5c\uace0\uc778 \uc544\uc774\ub514\uc5b4\ub4e4\uc740 \uac00\uc838\uc624\uace0, \uadf8\uac78 \uac00\ub2a5\ud55c \ucd5c\uc120\uc758 \ubc29\ubc95\uc73c\ub85c \ud569\uce58\uba74\uc11c, \uc774\uc804\uc5d0\ub294 \uc5c6\uc5c8\ub358 \uc5b8\uc5b4\uc758 \ud2b9\uc9d5\ub4e4(Python 3.6+ \ud0c0\uc785 \ud78c\ud2b8)\uc744 \uc0ac\uc6a9\ud574\uc11c\uc694. Investigation \u00b6 By using all the previous alternatives I had the chance to learn from all of them, take ideas, and combine them in the best way I could find for myself and the teams of developers I have worked with. For example, it was clear that ideally it should be based on standard Python type hints. Also, the best approach was to use already existing standards. So, before even starting to code FastAPI , I spent several months studying the specs for OpenAPI, JSON Schema, OAuth2, etc. Understanding their relationship, overlap, and differences. \ub514\uc790\uc778 \u00b6 Then I spent some time designing the developer \"API\" I wanted to have as a user (as a developer using FastAPI). I tested several ideas in the most popular Python editors: PyCharm, VS Code, Jedi based editors. By the last Python Developer Survey , that covers about 80% of the users. It means that FastAPI was specifically tested with the editors used by 80% of the Python developers. And as most of the other editors tend to work similarly, all its benefits should work for virtually all editors. That way I could find the best ways to reduce code duplication as much as possible, to have completion everywhere, type and error checks, etc. All in a way that provided the best development experience for all the developers. Requirements \u00b6 After testing several alternatives, I decided that I was going to use Pydantic for its advantages. Then I contributed to it, to make it fully compliant with JSON Schema, to support different ways to define constraint declarations, and to improve editor support (type checks, autocompletion) based on the tests in several editors. During the development, I also contributed to Starlette , the other key requirement. Development \u00b6 By the time I started creating FastAPI itself, most of the pieces were already in place, the design was defined, the requirements and tools were ready, and the knowledge about the standards and specifications was clear and fresh. \ubbf8\ub798 \u00b6 \uc774 \uc2dc\uc810\uc5d0\uc11c, FastAPI \uc640 \uadf8 \uc544\uc774\ub514\uc5b4\ub4e4\uc774 \ub9ce\uc740 \uc0ac\ub78c\ub4e4\uc5d0\uac8c \uc720\uc6a9\ud558\ub2e4\ub294 \uac83\uc740 \uc774\ubbf8 \uba85\ubc31\ud569\ub2c8\ub2e4. \uc774\uc804\uc758 \ub300\uc548\ub4e4\uc744 \ub118\uc5b4\uc11c \ub354 \ub9ce\uc740 \uc0ac\ub840\ub4e4\uc5d0 \uc54c\ub9de\uac8c \uc120\ud0dd\ubc1b\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ubbf8 \ub9ce\uc740 \uac1c\ubc1c\uc790\ub4e4\uacfc \uac1c\ubc1c\ud300\ub4e4\uc774 \ud504\ub85c\uc81d\ud2b8\uc5d0 FastAPI \ub97c \uc4f0\uace0 \uc788\uc2b5\ub2c8\ub2e4. (\uc800\uc640 \uc81c \ud300\uc744 \ud3ec\ud568\ud574\uc11c) \ud558\uc9c0\ub9cc \uc5ec\uc804\ud788, \uc55e\uc73c\ub85c \ub2e4\uac00\uc62c \uac1c\uc120\uc810\ub4e4\uacfc \uae30\ub2a5\ub4e4\uc774 \ub9ce\uc774 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uc544\uc8fc \uc720\ub9dd\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub3c4\uc640\uc8fc\uc154\uc11c \ub300\ub2e8\ud788 \uac10\uc0ac\ud569\ub2c8\ub2e4.","title":"\uc5ed\uc0ac, \ub514\uc790\uc778 \uadf8\ub9ac\uace0 \ubbf8\ub798"},{"location":"history-design-future/#_1","text":"\uacfc\uac70\uc5d0, \ud55c FastAPI \uc720\uc800\uac00 \ubb3c\uc5c8\uc2b5\ub2c8\ub2e4. \uc774 \ud504\ub85c\uc81d\ud2b8\uc758 \uc5ed\uc0ac\uac00 \uc5b4\ub5bb\uac8c \ub418\ub098\uc694? \ub2e8 \uba87 \uc8fc \ub9cc\uc5d0 \uc5b4\ub514\uc120\uac00 \ub098\ud0c0\ub09c \uac83 \uac19\uc544\uc11c\uc694 [...] \uc5ec\uae30\uc5d0 \uadf8 \uc5ed\uc0ac\ub97c \uba87 \uc790 \uc801\uc5b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"\uc5ed\uc0ac, \ub514\uc790\uc778 \uadf8\ub9ac\uace0 \ubbf8\ub798"},{"location":"history-design-future/#_2","text":"\uc800\ub294 \ubcf5\uc7a1\ud55c \uc694\uad6c \uc0ac\ud56d\uc5d0 \ub9de\ub294 API\ub97c \uba87 \ub144\uac04 \ub9cc\ub4e4\uc5b4 \uc654\uc2b5\ub2c8\ub2e4. \uba38\uc2e0 \ub7ec\ub2dd, \ubd84\uc0b0 \uc2dc\uc2a4\ud15c, \ube44\ub3d9\uae30 \uc791\uc5c5, NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub4f1\uc774\uc5c8\uace0, \uc5ec\ub7ec \uac1c\ubc1c \ud300\uc744 \uc774\ub04c\uae30\ub3c4 \ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub2e4\ubcf4\ub2c8, \uc800\ub294 \ub9ce\uc740 \ub300\uc548\ub4e4\uc744 \uc54c\uc544\ubcf4\uace0 \ud14c\uc2a4\ud2b8\ud558\uace0 \uc0ac\uc6a9\ud574\uc57c \ud588\uc2b5\ub2c8\ub2e4. FastAPI \uc758 \uc5ed\uc0ac\uc758 \ub300\ubd80\ubd84\uc740 \uadf8 \uc120\uad6c\uc790\ub4e4\uc758 \uc5ed\uc0ac\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. Alternatives \ubb38\uc11c\uc5d0 \uc801\uc740 \ubc14\uc640 \uac19\uc774, FastAPI \ub294 wouldn't exist if not for the previous work of others. FastAPI wouldn't exist if not for the previous work of others. \uc774\uac83\uc744 \ub9cc\ub4dc\ub294 \uac83\uc5d0 \uc601\uac10\uc744 \uc8fc\uc5c8\ub358, \uc774\uc804\uc5d0 \ub9cc\ub4e4\uc5b4\uc9c4 \ub9ce\uc740 \ud234\ub4e4\uc774 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc800\ub294 \uba87\ub144 \ub3d9\uc548 \uc0c8\ub85c\uc6b4 \ud504\ub808\uc784\uc6cc\ud06c\ub97c \ub9cc\ub4dc\ub294 \uac83\uc744 \ud53c\ud558\uace0 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uba3c\uc800 FastAPI \uc5d0\uc11c \ub2e4\ub8e8\ub294 \ubaa8\ub4e0 \uae30\ub2a5\uc744 \ub9ce\uc740 \ub2e4\ub978 \ud504\ub808\uc784\uc6cc\ud06c, \ud50c\ub7ec\uadf8\uc778, \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud574\uacb0\ud558\ub824\uace0 \ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc5b4\ub290 \uc21c\uac04, \ub9cc\ub4dc\ub294 \uac83 \ub9d0\uace0\ub294 \ub2e4\ub978 \uc120\ud0dd\uc9c0\uac00 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4. \uc774 \ubaa8\ub4e0 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uace0, \uc774\uc804\uc758 \ub3c4\uad6c\ub4e4\uc5d0\uc11c \ucd5c\uace0\uc778 \uc544\uc774\ub514\uc5b4\ub4e4\uc740 \uac00\uc838\uc624\uace0, \uadf8\uac78 \uac00\ub2a5\ud55c \ucd5c\uc120\uc758 \ubc29\ubc95\uc73c\ub85c \ud569\uce58\uba74\uc11c, \uc774\uc804\uc5d0\ub294 \uc5c6\uc5c8\ub358 \uc5b8\uc5b4\uc758 \ud2b9\uc9d5\ub4e4(Python 3.6+ \ud0c0\uc785 \ud78c\ud2b8)\uc744 \uc0ac\uc6a9\ud574\uc11c\uc694.","title":"\ub300\uc548\ub4e4"},{"location":"history-design-future/#investigation","text":"By using all the previous alternatives I had the chance to learn from all of them, take ideas, and combine them in the best way I could find for myself and the teams of developers I have worked with. For example, it was clear that ideally it should be based on standard Python type hints. Also, the best approach was to use already existing standards. So, before even starting to code FastAPI , I spent several months studying the specs for OpenAPI, JSON Schema, OAuth2, etc. Understanding their relationship, overlap, and differences.","title":"Investigation"},{"location":"history-design-future/#_3","text":"Then I spent some time designing the developer \"API\" I wanted to have as a user (as a developer using FastAPI). I tested several ideas in the most popular Python editors: PyCharm, VS Code, Jedi based editors. By the last Python Developer Survey , that covers about 80% of the users. It means that FastAPI was specifically tested with the editors used by 80% of the Python developers. And as most of the other editors tend to work similarly, all its benefits should work for virtually all editors. That way I could find the best ways to reduce code duplication as much as possible, to have completion everywhere, type and error checks, etc. All in a way that provided the best development experience for all the developers.","title":"\ub514\uc790\uc778"},{"location":"history-design-future/#requirements","text":"After testing several alternatives, I decided that I was going to use Pydantic for its advantages. Then I contributed to it, to make it fully compliant with JSON Schema, to support different ways to define constraint declarations, and to improve editor support (type checks, autocompletion) based on the tests in several editors. During the development, I also contributed to Starlette , the other key requirement.","title":"Requirements"},{"location":"history-design-future/#development","text":"By the time I started creating FastAPI itself, most of the pieces were already in place, the design was defined, the requirements and tools were ready, and the knowledge about the standards and specifications was clear and fresh.","title":"Development"},{"location":"history-design-future/#_4","text":"\uc774 \uc2dc\uc810\uc5d0\uc11c, FastAPI \uc640 \uadf8 \uc544\uc774\ub514\uc5b4\ub4e4\uc774 \ub9ce\uc740 \uc0ac\ub78c\ub4e4\uc5d0\uac8c \uc720\uc6a9\ud558\ub2e4\ub294 \uac83\uc740 \uc774\ubbf8 \uba85\ubc31\ud569\ub2c8\ub2e4. \uc774\uc804\uc758 \ub300\uc548\ub4e4\uc744 \ub118\uc5b4\uc11c \ub354 \ub9ce\uc740 \uc0ac\ub840\ub4e4\uc5d0 \uc54c\ub9de\uac8c \uc120\ud0dd\ubc1b\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ubbf8 \ub9ce\uc740 \uac1c\ubc1c\uc790\ub4e4\uacfc \uac1c\ubc1c\ud300\ub4e4\uc774 \ud504\ub85c\uc81d\ud2b8\uc5d0 FastAPI \ub97c \uc4f0\uace0 \uc788\uc2b5\ub2c8\ub2e4. (\uc800\uc640 \uc81c \ud300\uc744 \ud3ec\ud568\ud574\uc11c) \ud558\uc9c0\ub9cc \uc5ec\uc804\ud788, \uc55e\uc73c\ub85c \ub2e4\uac00\uc62c \uac1c\uc120\uc810\ub4e4\uacfc \uae30\ub2a5\ub4e4\uc774 \ub9ce\uc774 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uc544\uc8fc \uc720\ub9dd\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub3c4\uc640\uc8fc\uc154\uc11c \ub300\ub2e8\ud788 \uac10\uc0ac\ud569\ub2c8\ub2e4.","title":"\ubbf8\ub798"},{"location":"project-generation/","text":"\ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131 - \ud15c\ud50c\ub9bf \u00b6 \ub2f9\uc2e0\uc740 \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131\uae30\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc2dc\uc791\ud560 \uc218 \uc788\uc73c\uba70, \uc0dd\uc131\uae30\uc5d0\ub294 \ucd08\uae30\uc124\uc815, \ubcf4\uc548, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc0f \ucd08\uae30 API \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \ub4f1\uc774 \uc124\uc815 \ub418\uc5b4\uc788\uc2b5\ub2c8\ub2e4. \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131\uae30\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud56d\uc0c1 \ub2f9\uc2e0\uc758 \ud544\uc694\uc5d0 \ub9de\uac8c \uc5c5\ub370\uc774\ud2b8\ud558\uace0 \ub610 \uc124\uc815\ud574\uc57c \ud558\ub294 \ubd80\ubd84\uc774 \uc788\uc9c0\ub9cc, \uc774\uac83\uc740 \ud504\ub85c\uc81d\ud2b8\ub97c \uc2dc\uc791\ud558\uae30\uc5d0 \uc88b\uc740 \uc5ed\ud560\uc744 \ud574\uc904 \uac83\uc785\ub2c8\ub2e4. \ud480 \uc2a4\ud0dd FastAPI PostgreSQL \u00b6 GitHub: https://github.com/tiangolo/full-stack-fastapi-postgresql \uc804\uccb4 \uc2a4\ud0dd FastAPI PostgreSQL - \uae30\ub2a5 \u00b6 \uc804\uccb4 Docker \ub97c \ud1b5\ud569\ud569\ub2c8\ub2e4. (Docker \uae30\ubc18). Docker Swarm Mode \ub97c \ubc30\ud3ec\ud569\ub2c8\ub2e4. Docker \ub294 \uc9c0\uc5ed \uac1c\ubc1c\uc744 \uc704\ud55c \ud1b5\ud569 \ubc0f \ucd5c\uc801\ud654 \uc2dc\ud0b5\ub2c8\ub2e4. Uvicorn \ubc0f Gunicorn\uc744 \uc0ac\uc6a9\ud55c Python \uc6f9 \uc11c\ubc84\ub97c \uc900\ube44\ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c FastAPI \ubc31\uc5d4\ub4dc: \ube60\ub974\ub2e4 : NodeJS \uc640 GO \uc218\uc900\uc758 \ub9e4\uc6b0 \ube60\ub978 \uc131\ub2a5 (Starlette \uc640 Pydantic\ub85c \uc778\ud574\uc11c) \uc9c1\uad00\uc801 : \ud6cc\ub96d\ud55c \ud3b8\uc9d1\uc790 \uc9c0\uc6d0. \uc5b4\ub290 \ud658\uacbd\uc5d0\uc11c\ub098 \ub514\ubc84\uae45 \uc2dc\uac04 \ub2e8\ucd95. \uc27d\ub2e4 : \uc27d\uac8c \uc0ac\uc6a9\ud558\uace0 \ubc30\uc6b8 \uc218 \uc788\ub3c4\ub85d \uc124\uacc4 \ubb38\uc11c \uc77d\ub294 \uc2dc\uac04 \ub2e8\ucd95 \uc9e7\ub2e4 : \ucf54\ub4dc\uc758 \uc911\ubcf5 \ucd5c\uc18c\ud654. \ub9e4\uac1c\ubcc0\uc218 \ud55c \uac1c\uc758 \ub2e4\uc911 \uae30\ub2a5 \uac00\ub2a5. \uac15\ub825 : \ud504\ub85c\ub355\uc158\uc5d0 \ubc14\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ucf54\ub4dc\ub97c \uc81c\uacf5. \uc790\ub3d9 \ub300\ud654\ud615 \ubb38\uc11c\ub97c \uc0ac\uc6a9. \ud45c\uc900 \uae30\ubc18 : API\uc5d0 \ub300\ud55c \uac1c\ubc29\ud615 \ud45c\uc900 \uae30\ubc18. OpenAPI \ubc0f JSON \uc2a4\ud0a4\ub9c8 \ub97c \uae30\ubc18\uc73c\ub85c \uc644\uc804\ud55c \ud638\ud658 \uac00\ub2a5. \uae30\ud0c0 \uae30\ub2a5 : \uc790\ub3d9 \uc720\ud6a8\uc131 \uac80\uc0ac, \uc9c1\ub82c\ud654, \ub300\ud654\ud615 \ubb38\uc11c, OAuth2 JWT \ud1a0\ud070\uc744 \uc0ac\uc6a9\ud55c \uc778\uc99d \ub4f1\uc744 \ud3ec\ud568\ud55c \uc5ec\ub7ec \uae30\ub2a5. \uc554\ud638 \ubcf4\uc548 \ud574\uc2f1\uc740 \uae30\ubcf8\uc801\uc73c\ub85c \uc218\ud589\ub429\ub2c8\ub2e4. JWT \ud1a0\ud070 \uc778\uc99d \uae30\ub2a5\uc744 \uac00\uc9d1\ub2c8\ub2e4. SQLlchemy \ubaa8\ub378 \uc744 \ud1b5\ud574 \ud50c\ub77c\uc2a4\ud06c \ud655\uc7a5\uacfc \ubcc4\uac1c\ub85c \uc140\ub7ec\ub9ac \uc791\uc5c5\uc790\uc640 \ud568\uaed8 \uc9c1\uc811 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc6a9\uc790\ub97c \uc704\ud55c \uae30\ubcf8 \uc2dc\uc791 \ubaa8\ub378\uc744 \uac00\uc9c0\uba70, \ud544\uc694\uc5d0 \ub530\ub77c \uc218\uc815 \ubc0f \uc81c\uac70\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4. Alembic migrations \ud2b9\uc9d5\uc744 \uac00\uc9d1\ub2c8\ub2e4. CORS (Cross Origin Resource Sharing) \ud2b9\uc9d5\uc744 \uac00\uc9d1\ub2c8\ub2e4. \uc140\ub7ec\ub9ac \uc791\uc5c5\uc790\ub97c \ud1b5\ud574 \ub098\uba38\uc9c0 \ubc31\uc5d4\ub4dc\uc5d0\uc11c \ubaa8\ub378\uacfc \ucf54\ub4dc\ub97c \uc120\ud0dd\uc801\uc73c\ub85c \uac00\uc838\uc640 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Docker\uc640 \ud1b5\ud569\ub41c Pytest \uae30\ubc18 REST \ubc31\uc5d4\ub4dc \ud14c\uc2a4\ud2b8\ub97c \ud1b5\ud574 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \ub3c5\ub9bd\uc801\uc73c\ub85c \uc804\uccb4 API \uc0c1\ud638 \uc791\uc6a9\uc744 \ud14c\uc2a4\ud2b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Docker\uc5d0\uc11c \uc2e4\ud589\ub418\ubbc0\ub85c \ub9e4\ubc88 \ucc98\uc74c\ubd80\ud130 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \uc800\uc7a5\uc18c\ub97c \uad6c\ucd95\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c Elastic Search, MonogoDB, CouchDB \ub4f1\uc758 \uc6d0\ud558\ub294 \uac83\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc73c\uba70, API\uac00 \uc791\ub3d9\ud558\ub294\uc9c0 \ud14c\uc2a4\ud2b8 \ud574\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. Atom Hydrogen \ub610\ub294 Visual Studio Code Jupyter\uacfc \uac19\uc740 \ud655\uc7a5 \uae30\ub2a5\uc744 \uac16\ucd98 \uc6d0\uaca9 \ub610\ub294 Docker\uac1c\ubc1c\uc744 \uc704\ud574 Jupyter Kernels \uacfc Python\uc744 \uc27d\uac8c \ud1b5\ud569\ud560 \uc218 \uc788\ub2e4. Vue \ud504\ub7f0\ud2b8\uc5d4\ub4dc: Vue CLI\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0dd\uc131\ub428. JWT \uc778\uc99d \ucc98\ub9ac. \ub85c\uadf8\uc778 \ubcf4\uae30. \ub85c\uadf8\uc778 \ud6c4 \uae30\ubcf8 \ub300\uc2dc\ubcf4\ub4dc \ubcf4\uae30. \uc0ac\uc6a9\uc790 \uc0dd\uc131 \ubc0f \uc5d0\ub514\uc158\uc774 \ud3ec\ud568\ub41c \uae30\ubcf8 \ub300\uc2dc\ubcf4\ub4dc. \uc140\ud504 \uc0ac\uc6a9\uc790 \uc5d0\ub514\uc158. Vuex. Vue-router. \uc544\ub984\ub2e4\uc6b4 \uc7ac\ub8cc \ub514\uc790\uc778 \uad6c\uc131 \uc694\uc18c\ub97c \ud655\uc778. TypeScript . Nginx \uae30\ubc18\uc758 \ub3c4\ucee4 \uc11c\ubc84 (Vue-router\uc640 \uc6d0\ud65c\ud558\uac8c \uc791\ub3d9\ud558\ub3c4\ub85d \uad6c\uc131) \ub3c4\ucee4 \ub2e4\ub2e8\uacc4 \ube4c\ub529\uc73c\ub85c \ucef4\ud30c\uc77c\ub41c \ucf54\ub4dc\ub97c \uc800\uc7a5\ud558\uac70\ub098 \ucee4\ubc0b\ud560 \ud544\uc694 \uc5c6\uc74c. \ud504\ub7f0\ud2b8\uc5d4\ub4dc \ud14c\uc2a4\ud2b8\ub294 \ube4c\ub4dc \uc2dc\uac04\uc5d0 \uc2e4\ud589 (\uc0ac\uc6a9 \ubd88\uac00\ub2a5\uc73c\ub85c \uc124\uc815 \uac00\ub2a5) \uac00\ub2a5\ud55c \ud55c \ubaa8\ub4c8\uc2dd\uc73c\ub85c \uc81c\uc791\ub418\uc5b4 \uc989\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc9c0\ub9cc, Vue CLI\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc2dc \uc0dd\uc131\ud558\uac70\ub098 \ud544\uc694\uc5d0 \ub530\ub77c \uc0dd\uc131\ud558\uace0 \uc6d0\ud558\ub294 \uac83\uc744 \ub2e4\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc74c. PGADmin for PostgreSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub294 PHPmyAdmin \ubc0f MySQL\uc744 \uc27d\uac8c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc218\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc140\ub7ec\ub9ac \uc791\uc5c5 \uac10\uc2dc\ub97c \uc704\ud55c Flower\uc744 \uac00\uc9d1\ub2c8\ub2e4. HTTPS \uc778\uc99d\uc11c \uc790\ub3d9 \uc0dd\uc131\uc744 \uc554\ud638\ud654\ud558\ub294 \ud2b8\ub808\uc774\ud53d\uc744 \ud1b5\ud569\ud569\ub2c8\ub2e4. \ud504\ub7f0\ud2b8\uc5d4\ub4dc \ubc0f \ubc31\uc5d4\ub4dc \ud14c\uc2a4\ud2b8 \ud3ec\ud568\ud55c GitLab CI (\uc5f0\uc18d \ud1b5\ud569)\uc744 \uac00\uc9d1\ub2c8\ub2e4. \ud480 \uc2a4\ud0dd FastAPI Couchbase \u00b6 GitHub: https://github.com/tiangolo/full-stack-fastapi-couchbase \u26a0 \uacbd\uace0 \u26a0 \uc0c8 \ud504\ub85c\uc81d\ud2b8\ub97c \ucc98\uc74c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0, \uc774\uacf3\uc5d0\uc11c \ub300\uc548\uc744 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \uc608\ub97c \ub4e4\uc5b4 \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131\uae30 \ud480 \uc2a4\ud0dd Full Stack FastAPI PostgreSQL \uc740 \uc801\uadf9\uc801\uc73c\ub85c \uc720\uc9c0 \uad00\ub9ac \ubc0f \uc0ac\uc6a9\ub418\ubbc0\ub85c \ub354 \ub098\uc740 \ub300\uc548\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\uacf3\uc5d0\uc11c \ubaa8\ub4e0 \uc0c8\ub85c\uc6b4 \uae30\ub2a5\uacfc \ud5a5\uc0c1\ub41c \uae30\ub2a5\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc6d0\ud558\ub294 \uacbd\uc6b0 Couchbase \uc0dd\uc131\uae30\ub97c \uc790\uc720\ub86d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub9c8 \uc5ec\uc804\ud788 \uc798 \uc791\ub3d9\ud560 \uac83\uc774\uba70, \uc774\ubbf8 \uc0dd\uc131\ub41c \ud504\ub85c\uc81d\ud2b8\uac00 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4. (\uc544\ub9c8\ub3c4 \ud544\uc694\uc5d0 \ub9de\uac8c \uc5c5\ub370\uc774\ud2b8 \ud588\uc744 \uac83\uc785\ub2c8\ub2e4.) \uc774\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 repo \ubb38\uc11c\ub97c \ucc38\uc870\ud558\uc2ed\uc2dc\uc624. \ud480 \uc2a4\ud0dd FastAPI MongoDB \u00b6 \uc544\uc9c1 \uacf5\uac1c\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \ucd94\ud6c4\uc5d0 \uc5c5\ub370\uc774\ud2b8 \ud558\uaca0\uc2b5\ub2c8\ub2e4.\ud83d\ude05 \ud83c\udf89 spaCy and FastAPI\ub97c \uc9c0\uc6d0\ud558\ub294 \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 \u00b6 GitHub: https://github.com/microsoft/cookiecutter-spacy-fastapi spaCy and FastAPI\ub97c \uc9c0\uc6d0\ud558\ub294 \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 - \uae30\ub2a5 \u00b6 spaCy NER \ubaa8\ub378 \ud1b5\ud569. Azure \uc778\uc9c0 \uac80\uc0c9 \uc694\uccad\uc774 \ub0b4\uc7a5\ub428. Uvicorn \ubc0f Gunicorn\uc744 \uc0ac\uc6a9\ud55c Python \uc6f9 \uc11c\ubc84\ub97c \uc900\ube44\ud569\ub2c8\ub2e4. Azure DevOps Kubernetes (AKS) CI/CD \ubc30\ud3ec\uac00 \uae30\ubcf8 \uc81c\uacf5\ub429\ub2c8\ub2e4. \ub2e4\uad6d\uc5b4 \ud504\ub85c\uc81d\ud2b8 \uc124\uc815\uc5d0\uc11c spaCy\uc758 \uae30\ubcf8 \uc81c\uacf5 \uc5b8\uc5b4 \uc911 \ud558\ub098\ub97c \uc27d\uac8c \uc120\ud0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. spaCy\ubfd0 \uc544\ub2c8\ub77c \ub2e4\ub978 \ud504\ub808\uc784\uc6cc\ud06c(Pytorch, Tensorflow \ub4f1) \ub85c\ub3c4 \uc27d\uac8c \ud655\uc7a5 \uac00\ub2a5\ud569\ub2c8\ub2e4.","title":"\ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131 - \ud15c\ud50c\ub9bf"},{"location":"project-generation/#-","text":"\ub2f9\uc2e0\uc740 \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131\uae30\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc2dc\uc791\ud560 \uc218 \uc788\uc73c\uba70, \uc0dd\uc131\uae30\uc5d0\ub294 \ucd08\uae30\uc124\uc815, \ubcf4\uc548, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc0f \ucd08\uae30 API \uc5d4\ub4dc\ud3ec\uc778\ud2b8 \ub4f1\uc774 \uc124\uc815 \ub418\uc5b4\uc788\uc2b5\ub2c8\ub2e4. \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131\uae30\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud56d\uc0c1 \ub2f9\uc2e0\uc758 \ud544\uc694\uc5d0 \ub9de\uac8c \uc5c5\ub370\uc774\ud2b8\ud558\uace0 \ub610 \uc124\uc815\ud574\uc57c \ud558\ub294 \ubd80\ubd84\uc774 \uc788\uc9c0\ub9cc, \uc774\uac83\uc740 \ud504\ub85c\uc81d\ud2b8\ub97c \uc2dc\uc791\ud558\uae30\uc5d0 \uc88b\uc740 \uc5ed\ud560\uc744 \ud574\uc904 \uac83\uc785\ub2c8\ub2e4.","title":"\ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131 - \ud15c\ud50c\ub9bf"},{"location":"project-generation/#fastapi-postgresql","text":"GitHub: https://github.com/tiangolo/full-stack-fastapi-postgresql","title":"\ud480 \uc2a4\ud0dd FastAPI PostgreSQL"},{"location":"project-generation/#fastapi-postgresql-","text":"\uc804\uccb4 Docker \ub97c \ud1b5\ud569\ud569\ub2c8\ub2e4. (Docker \uae30\ubc18). Docker Swarm Mode \ub97c \ubc30\ud3ec\ud569\ub2c8\ub2e4. Docker \ub294 \uc9c0\uc5ed \uac1c\ubc1c\uc744 \uc704\ud55c \ud1b5\ud569 \ubc0f \ucd5c\uc801\ud654 \uc2dc\ud0b5\ub2c8\ub2e4. Uvicorn \ubc0f Gunicorn\uc744 \uc0ac\uc6a9\ud55c Python \uc6f9 \uc11c\ubc84\ub97c \uc900\ube44\ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c FastAPI \ubc31\uc5d4\ub4dc: \ube60\ub974\ub2e4 : NodeJS \uc640 GO \uc218\uc900\uc758 \ub9e4\uc6b0 \ube60\ub978 \uc131\ub2a5 (Starlette \uc640 Pydantic\ub85c \uc778\ud574\uc11c) \uc9c1\uad00\uc801 : \ud6cc\ub96d\ud55c \ud3b8\uc9d1\uc790 \uc9c0\uc6d0. \uc5b4\ub290 \ud658\uacbd\uc5d0\uc11c\ub098 \ub514\ubc84\uae45 \uc2dc\uac04 \ub2e8\ucd95. \uc27d\ub2e4 : \uc27d\uac8c \uc0ac\uc6a9\ud558\uace0 \ubc30\uc6b8 \uc218 \uc788\ub3c4\ub85d \uc124\uacc4 \ubb38\uc11c \uc77d\ub294 \uc2dc\uac04 \ub2e8\ucd95 \uc9e7\ub2e4 : \ucf54\ub4dc\uc758 \uc911\ubcf5 \ucd5c\uc18c\ud654. \ub9e4\uac1c\ubcc0\uc218 \ud55c \uac1c\uc758 \ub2e4\uc911 \uae30\ub2a5 \uac00\ub2a5. \uac15\ub825 : \ud504\ub85c\ub355\uc158\uc5d0 \ubc14\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ucf54\ub4dc\ub97c \uc81c\uacf5. \uc790\ub3d9 \ub300\ud654\ud615 \ubb38\uc11c\ub97c \uc0ac\uc6a9. \ud45c\uc900 \uae30\ubc18 : API\uc5d0 \ub300\ud55c \uac1c\ubc29\ud615 \ud45c\uc900 \uae30\ubc18. OpenAPI \ubc0f JSON \uc2a4\ud0a4\ub9c8 \ub97c \uae30\ubc18\uc73c\ub85c \uc644\uc804\ud55c \ud638\ud658 \uac00\ub2a5. \uae30\ud0c0 \uae30\ub2a5 : \uc790\ub3d9 \uc720\ud6a8\uc131 \uac80\uc0ac, \uc9c1\ub82c\ud654, \ub300\ud654\ud615 \ubb38\uc11c, OAuth2 JWT \ud1a0\ud070\uc744 \uc0ac\uc6a9\ud55c \uc778\uc99d \ub4f1\uc744 \ud3ec\ud568\ud55c \uc5ec\ub7ec \uae30\ub2a5. \uc554\ud638 \ubcf4\uc548 \ud574\uc2f1\uc740 \uae30\ubcf8\uc801\uc73c\ub85c \uc218\ud589\ub429\ub2c8\ub2e4. JWT \ud1a0\ud070 \uc778\uc99d \uae30\ub2a5\uc744 \uac00\uc9d1\ub2c8\ub2e4. SQLlchemy \ubaa8\ub378 \uc744 \ud1b5\ud574 \ud50c\ub77c\uc2a4\ud06c \ud655\uc7a5\uacfc \ubcc4\uac1c\ub85c \uc140\ub7ec\ub9ac \uc791\uc5c5\uc790\uc640 \ud568\uaed8 \uc9c1\uc811 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc6a9\uc790\ub97c \uc704\ud55c \uae30\ubcf8 \uc2dc\uc791 \ubaa8\ub378\uc744 \uac00\uc9c0\uba70, \ud544\uc694\uc5d0 \ub530\ub77c \uc218\uc815 \ubc0f \uc81c\uac70\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4. Alembic migrations \ud2b9\uc9d5\uc744 \uac00\uc9d1\ub2c8\ub2e4. CORS (Cross Origin Resource Sharing) \ud2b9\uc9d5\uc744 \uac00\uc9d1\ub2c8\ub2e4. \uc140\ub7ec\ub9ac \uc791\uc5c5\uc790\ub97c \ud1b5\ud574 \ub098\uba38\uc9c0 \ubc31\uc5d4\ub4dc\uc5d0\uc11c \ubaa8\ub378\uacfc \ucf54\ub4dc\ub97c \uc120\ud0dd\uc801\uc73c\ub85c \uac00\uc838\uc640 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Docker\uc640 \ud1b5\ud569\ub41c Pytest \uae30\ubc18 REST \ubc31\uc5d4\ub4dc \ud14c\uc2a4\ud2b8\ub97c \ud1b5\ud574 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \ub3c5\ub9bd\uc801\uc73c\ub85c \uc804\uccb4 API \uc0c1\ud638 \uc791\uc6a9\uc744 \ud14c\uc2a4\ud2b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Docker\uc5d0\uc11c \uc2e4\ud589\ub418\ubbc0\ub85c \ub9e4\ubc88 \ucc98\uc74c\ubd80\ud130 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \uc800\uc7a5\uc18c\ub97c \uad6c\ucd95\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c Elastic Search, MonogoDB, CouchDB \ub4f1\uc758 \uc6d0\ud558\ub294 \uac83\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc73c\uba70, API\uac00 \uc791\ub3d9\ud558\ub294\uc9c0 \ud14c\uc2a4\ud2b8 \ud574\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. Atom Hydrogen \ub610\ub294 Visual Studio Code Jupyter\uacfc \uac19\uc740 \ud655\uc7a5 \uae30\ub2a5\uc744 \uac16\ucd98 \uc6d0\uaca9 \ub610\ub294 Docker\uac1c\ubc1c\uc744 \uc704\ud574 Jupyter Kernels \uacfc Python\uc744 \uc27d\uac8c \ud1b5\ud569\ud560 \uc218 \uc788\ub2e4. Vue \ud504\ub7f0\ud2b8\uc5d4\ub4dc: Vue CLI\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0dd\uc131\ub428. JWT \uc778\uc99d \ucc98\ub9ac. \ub85c\uadf8\uc778 \ubcf4\uae30. \ub85c\uadf8\uc778 \ud6c4 \uae30\ubcf8 \ub300\uc2dc\ubcf4\ub4dc \ubcf4\uae30. \uc0ac\uc6a9\uc790 \uc0dd\uc131 \ubc0f \uc5d0\ub514\uc158\uc774 \ud3ec\ud568\ub41c \uae30\ubcf8 \ub300\uc2dc\ubcf4\ub4dc. \uc140\ud504 \uc0ac\uc6a9\uc790 \uc5d0\ub514\uc158. Vuex. Vue-router. \uc544\ub984\ub2e4\uc6b4 \uc7ac\ub8cc \ub514\uc790\uc778 \uad6c\uc131 \uc694\uc18c\ub97c \ud655\uc778. TypeScript . Nginx \uae30\ubc18\uc758 \ub3c4\ucee4 \uc11c\ubc84 (Vue-router\uc640 \uc6d0\ud65c\ud558\uac8c \uc791\ub3d9\ud558\ub3c4\ub85d \uad6c\uc131) \ub3c4\ucee4 \ub2e4\ub2e8\uacc4 \ube4c\ub529\uc73c\ub85c \ucef4\ud30c\uc77c\ub41c \ucf54\ub4dc\ub97c \uc800\uc7a5\ud558\uac70\ub098 \ucee4\ubc0b\ud560 \ud544\uc694 \uc5c6\uc74c. \ud504\ub7f0\ud2b8\uc5d4\ub4dc \ud14c\uc2a4\ud2b8\ub294 \ube4c\ub4dc \uc2dc\uac04\uc5d0 \uc2e4\ud589 (\uc0ac\uc6a9 \ubd88\uac00\ub2a5\uc73c\ub85c \uc124\uc815 \uac00\ub2a5) \uac00\ub2a5\ud55c \ud55c \ubaa8\ub4c8\uc2dd\uc73c\ub85c \uc81c\uc791\ub418\uc5b4 \uc989\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc9c0\ub9cc, Vue CLI\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc2dc \uc0dd\uc131\ud558\uac70\ub098 \ud544\uc694\uc5d0 \ub530\ub77c \uc0dd\uc131\ud558\uace0 \uc6d0\ud558\ub294 \uac83\uc744 \ub2e4\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc74c. PGADmin for PostgreSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub294 PHPmyAdmin \ubc0f MySQL\uc744 \uc27d\uac8c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc218\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc140\ub7ec\ub9ac \uc791\uc5c5 \uac10\uc2dc\ub97c \uc704\ud55c Flower\uc744 \uac00\uc9d1\ub2c8\ub2e4. HTTPS \uc778\uc99d\uc11c \uc790\ub3d9 \uc0dd\uc131\uc744 \uc554\ud638\ud654\ud558\ub294 \ud2b8\ub808\uc774\ud53d\uc744 \ud1b5\ud569\ud569\ub2c8\ub2e4. \ud504\ub7f0\ud2b8\uc5d4\ub4dc \ubc0f \ubc31\uc5d4\ub4dc \ud14c\uc2a4\ud2b8 \ud3ec\ud568\ud55c GitLab CI (\uc5f0\uc18d \ud1b5\ud569)\uc744 \uac00\uc9d1\ub2c8\ub2e4.","title":"\uc804\uccb4 \uc2a4\ud0dd FastAPI PostgreSQL - \uae30\ub2a5"},{"location":"project-generation/#fastapi-couchbase","text":"GitHub: https://github.com/tiangolo/full-stack-fastapi-couchbase \u26a0 \uacbd\uace0 \u26a0 \uc0c8 \ud504\ub85c\uc81d\ud2b8\ub97c \ucc98\uc74c \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0, \uc774\uacf3\uc5d0\uc11c \ub300\uc548\uc744 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \uc608\ub97c \ub4e4\uc5b4 \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131\uae30 \ud480 \uc2a4\ud0dd Full Stack FastAPI PostgreSQL \uc740 \uc801\uadf9\uc801\uc73c\ub85c \uc720\uc9c0 \uad00\ub9ac \ubc0f \uc0ac\uc6a9\ub418\ubbc0\ub85c \ub354 \ub098\uc740 \ub300\uc548\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\uacf3\uc5d0\uc11c \ubaa8\ub4e0 \uc0c8\ub85c\uc6b4 \uae30\ub2a5\uacfc \ud5a5\uc0c1\ub41c \uae30\ub2a5\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc6d0\ud558\ub294 \uacbd\uc6b0 Couchbase \uc0dd\uc131\uae30\ub97c \uc790\uc720\ub86d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub9c8 \uc5ec\uc804\ud788 \uc798 \uc791\ub3d9\ud560 \uac83\uc774\uba70, \uc774\ubbf8 \uc0dd\uc131\ub41c \ud504\ub85c\uc81d\ud2b8\uac00 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4. (\uc544\ub9c8\ub3c4 \ud544\uc694\uc5d0 \ub9de\uac8c \uc5c5\ub370\uc774\ud2b8 \ud588\uc744 \uac83\uc785\ub2c8\ub2e4.) \uc774\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 repo \ubb38\uc11c\ub97c \ucc38\uc870\ud558\uc2ed\uc2dc\uc624.","title":"\ud480 \uc2a4\ud0dd FastAPI Couchbase"},{"location":"project-generation/#fastapi-mongodb","text":"\uc544\uc9c1 \uacf5\uac1c\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \ucd94\ud6c4\uc5d0 \uc5c5\ub370\uc774\ud2b8 \ud558\uaca0\uc2b5\ub2c8\ub2e4.\ud83d\ude05 \ud83c\udf89","title":"\ud480 \uc2a4\ud0dd FastAPI MongoDB"},{"location":"project-generation/#spacy-and-fastapi","text":"GitHub: https://github.com/microsoft/cookiecutter-spacy-fastapi","title":"spaCy and FastAPI\ub97c \uc9c0\uc6d0\ud558\ub294 \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378"},{"location":"project-generation/#spacy-and-fastapi-","text":"spaCy NER \ubaa8\ub378 \ud1b5\ud569. Azure \uc778\uc9c0 \uac80\uc0c9 \uc694\uccad\uc774 \ub0b4\uc7a5\ub428. Uvicorn \ubc0f Gunicorn\uc744 \uc0ac\uc6a9\ud55c Python \uc6f9 \uc11c\ubc84\ub97c \uc900\ube44\ud569\ub2c8\ub2e4. Azure DevOps Kubernetes (AKS) CI/CD \ubc30\ud3ec\uac00 \uae30\ubcf8 \uc81c\uacf5\ub429\ub2c8\ub2e4. \ub2e4\uad6d\uc5b4 \ud504\ub85c\uc81d\ud2b8 \uc124\uc815\uc5d0\uc11c spaCy\uc758 \uae30\ubcf8 \uc81c\uacf5 \uc5b8\uc5b4 \uc911 \ud558\ub098\ub97c \uc27d\uac8c \uc120\ud0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. spaCy\ubfd0 \uc544\ub2c8\ub77c \ub2e4\ub978 \ud504\ub808\uc784\uc6cc\ud06c(Pytorch, Tensorflow \ub4f1) \ub85c\ub3c4 \uc27d\uac8c \ud655\uc7a5 \uac00\ub2a5\ud569\ub2c8\ub2e4.","title":"spaCy and FastAPI\ub97c \uc9c0\uc6d0\ud558\ub294 \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378 - \uae30\ub2a5"},{"location":"python-types/","text":"\ud30c\uc774\uc36c \ud0c0\uc785 \uc18c\uac1c \u00b6 \ud30c\uc774\uc36c\uc740 \uc120\ud0dd\uc801\uc73c\ub85c \"\ud0c0\uc785 \ud78c\ud2b8(type hints)\"\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ud0c0\uc785 \ud78c\ud2b8 \ub4e4\uc740 \ubcc0\uc218\uc758 \ud0c0\uc785 \uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ud2b9\uc218\ud55c \uad6c\ubb38\uc785\ub2c8\ub2e4. \ubcc0\uc218\uc758 \ud0c0\uc785\uc744 \uc9c0\uc815\ud558\uba74 \uc5d0\ub514\ud130\uc640 \ud234\uc774 \ub354 \ub9ce\uc740 \ub3c4\uc6c0\uc744 \uc904 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. \uc774 \ubb38\uc11c\ub294 \ud30c\uc774\uc36c \ud0c0\uc785 \ud78c\ud2b8\uc5d0 \ub300\ud55c \ube60\ub978 \uc790\uc2b5\uc11c / \ub0b4\uc6a9\ud658\uae30 \uc218\uc900\uc758 \ubb38\uc11c\uc785\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 FastAPI \ub97c \uc4f0\uae30 \uc704\ud55c \ucd5c\uc18c\ud55c\uc758 \ub0b4\uc6a9\ub9cc\uc744 \ub2e4\ub8f9\ub2c8\ub2e4. FastAPI \ub294 \ud0c0\uc785 \ud78c\ud2b8\uc5d0 \uae30\ubc18\uc744 \ub450\uace0 \uc788\uc73c\uba70, \uc774\ub294 \ub9ce\uc740 \uc7a5\uc810\uacfc \uc774\uc775\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ube44\ub85d FastAPI \ub97c \uc4f0\uc9c0 \uc54a\ub294\ub2e4\uace0 \ud558\ub354\ub77c\ub3c4, \uc870\uae08\uc774\ub77c\ub3c4 \uc54c\uc544\ub450\uba74 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. \ucc38\uace0 \ud30c\uc774\uc36c\uc5d0 \ub2a5\uc219\ud558\uc154\uc11c \ud0c0\uc785 \ud78c\ud2b8\uc5d0 \ub300\ud574 \ubaa8\ub450 \uc544\uc2e0\ub2e4\uba74, \ub2e4\uc74c \ucc55\ud130\ub85c \uac74\ub108\ub6f0\uc138\uc694. \ub3d9\uae30 \ubd80\uc5ec \u00b6 \uac04\ub2e8\ud55c \uc608\uc81c\ubd80\ud130 \uc2dc\uc791\ud574\ubd05\uc2dc\ub2e4: def get_full_name ( first_name , last_name ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \uc774 \ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud55c \uacb0\uacfc\uac12: John Doe \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\uc774 \uc2e4\ud589\ub429\ub2c8\ub2e4: first_name \uacfc last_name \ub97c \ubc1b\uc2b5\ub2c8\ub2e4. title() \ub85c \uac01 \uccab \ubb38\uc790\ub97c \ub300\ubb38\uc790\ub85c \ubcc0\ud658\uc2dc\ud0b5\ub2c8\ub2e4. \ub450 \ub2e8\uc5b4\ub97c \uc911\uac04\uc5d0 \uacf5\ubc31\uc744 \ub450\uace0 \uc5f0\uacb0 \ud569\ub2c8\ub2e4. def get_full_name ( first_name , last_name ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \ucf54\ub4dc \uc218\uc815 \u00b6 \uc774\uac74 \ub9e4\uc6b0 \uac04\ub2e8\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ucc98\uc74c\ubd80\ud130 \uc791\uc131\ud55c\ub2e4\uace0 \uc0dd\uac01\uc744 \ud574\ubd05\uc2dc\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc900\ube44\ud588\uace0, \ud568\uc218\ub97c \uc815\uc758\ud558\uae30 \uc2dc\uc791\ud588\uc744 \uac81\ub2c8\ub2e4. \uc774\ub54c \"\uccab \uae00\uc790\ub97c \ub300\ubb38\uc790\ub85c \ubc14\uafb8\ub294 \ud568\uc218\"\ub97c \ud638\ucd9c\ud574\uc57c \ud569\ub2c8\ub2e4. upper \uc600\ub098? \uc544\ub2c8\uba74 uppercase ? first_uppercase ? capitalize ? \uadf8\ub54c \uac1c\ubc1c\uc790\ub4e4\uc758 \uc624\ub79c \uce5c\uad6c, \uc5d0\ub514\ud130 \uc790\ub3d9\uc644\uc131\uc744 \uc2dc\ub3c4\ud574\ubd05\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 first_name \ub97c \uc785\ub825\ud55c \ub4a4 \uc810( . )\uc744 \uc785\ub825\ud558\uace0 \uc790\ub3d9\uc644\uc131\uc744 \ucf1c\uae30 \uc704\ud574\uc11c Ctrl+Space \ub97c \ub20c\ub800\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc2ac\ud504\uac8c\ub3c4 \uc544\ubb34\ub7f0 \ub3c4\uc6c0\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4: \ud0c0\uc785 \ucd94\uac00\ud558\uae30 \u00b6 \uc774\uc804 \ubc84\uc804\uc5d0\uc11c \ud55c \uc904\ub9cc \uc218\uc815\ud574\ubd05\uc2dc\ub2e4. \uc800\ud76c\ub294 \uc774 \ud568\uc218\uc758 \ub9e4\uac1c\ubcc0\uc218 \ubd80\ubd84: first_name , last_name \uc744 \uc544\ub798\uc640 \uac19\uc774 \ubc14\uafc0 \uac81\ub2c8\ub2e4: first_name : str , last_name : str \uc774\uac8c \ub2e4\uc785\ub2c8\ub2e4. \uc774\uac8c \"\ud0c0\uc785 \ud78c\ud2b8\"\uc785\ub2c8\ub2e4: def get_full_name ( first_name : str , last_name : str ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \ud0c0\uc785\ud78c\ud2b8\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uae30\ubcf8 \uac12\uc744 \uc120\uc5b8\ud558\ub294 \uac83\uacfc\ub294 \ub2e4\ub985\ub2c8\ub2e4: first_name = \"john\" , last_name = \"doe\" \uc774\ub294 \ub2e4\ub978 \uac83\uc785\ub2c8\ub2e4. \ub4f1\ud638( = ) \ub300\uc2e0 \ucf5c\ub860( : )\uc744 \uc4f0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \ud0c0\uc785\ud78c\ud2b8\ub97c \ucd94\uac00\ud55c\ub2e4\uace0 \ud574\uc11c \ud2b9\ubcc4\ud558\uac8c \uc5b4\ub5a4 \uc77c\uc774 \uc77c\uc5b4\ub098\uc9c0\ub3c4 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub807\uc9c0\ub9cc \uc774\uc81c, \ub2e4\uc2dc \ud568\uc218\ub97c \ub9cc\ub4dc\ub294 \ub3c4\uc911\uc774\ub77c\uace0 \uc0dd\uac01\ud574\ubd05\uc2dc\ub2e4. \ub2e4\ub9cc \uc774\ubc88\uc5d4 \ud0c0\uc785 \ud78c\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uac19\uc740 \uc0c1\ud669\uc5d0\uc11c Ctrl+Space \ub85c \uc790\ub3d9\uc644\uc131\uc744 \uc791\ub3d9\uc2dc\ud0a4\uba74, \uc544\ub798\uc640 \uac19\uc774 \"\uadf8\ub807\uc9c0!\"\ud558\ub294 \uc635\uc158\uc774 \ub098\uc62c\ub54c\uae4c\uc9c0 \uc2a4\ud06c\ub864\uc744 \ub0b4\ub824\uc11c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ub354 \ud070 \ub3d9\uae30\ubd80\uc5ec \u00b6 \uc544\ub798 \ud568\uc218\ub97c \ubcf4\uba74, \uc774\ubbf8 \ud0c0\uc785 \ud78c\ud2b8\uac00 \uc801\uc6a9\ub418\uc5b4 \uc788\ub294 \uac78 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: def get_name_with_age ( name : str , age : int ): name_with_age = name + \" is this old: \" + age return name_with_age \ud3b8\uc9d1\uae30\uac00 \ubcc0\uc218\uc758 \ud0c0\uc785\uc744 \uc54c\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \uc790\ub3d9\uc644\uc131 \ubfd0 \uc544\ub2c8\ub77c \uc5d0\ub7ec\ub3c4 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uc774\uc81c \uace0\uccd0\uc57c\ud558\ub294 \uac78 \uc54c\uae30 \ub54c\ubb38\uc5d0, age \ub97c str(age) \uacfc \uac19\uc774 \ubb38\uc790\uc5f4\ub85c \ubc14\uafb8\uac8c \ub429\ub2c8\ub2e4: def get_name_with_age ( name : str , age : int ): name_with_age = name + \" is this old: \" + str ( age ) return name_with_age \ud0c0\uc785 \uc120\uc5b8 \u00b6 \ubc29\uae08 \ud568\uc218\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c\uc368 \ud0c0\uc785 \ud78c\ud2b8\ub97c \uc120\uc5b8\ud558\ub294 \uc8fc\uc694 \uc7a5\uc18c\ub97c \ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc774 \uc704\uce58\ub294 \uc5ec\ub7ec\ubd84\uc774 FastAPI \uc640 \ud568\uaed8 \uc774\ub97c \uc0ac\uc6a9\ud558\ub294 \uc8fc\uc694 \uc7a5\uc18c\uc785\ub2c8\ub2e4. Simple \ud0c0\uc785 \u00b6 str \ubfd0 \uc544\ub2c8\ub77c \ubaa8\ub4e0 \ud30c\uc774\uc36c \ud45c\uc900 \ud0c0\uc785\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74: int float bool bytes def get_items ( item_a : str , item_b : int , item_c : float , item_d : bool , item_e : bytes ): return item_a , item_b , item_c , item_d , item_d , item_e \ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\ub97c \ud65c\uc6a9\ud55c Generic(\uc81c\ub124\ub9ad) \ud0c0\uc785 \u00b6 dict , list , set , tuple \uacfc \uac19\uc740 \uac12\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \ub370\uc774\ud130 \uad6c\uc870\uac00 \uc788\uace0, \ub0b4\ubd80\uc758 \uac12\uc740 \uac01\uc790\uc758 \ud0c0\uc785\uc744 \uac00\uc9c8 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ud0c0\uc785\uacfc \ub0b4\ubd80 \ud0c0\uc785\uc744 \uc120\uc5b8\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud30c\uc774\uc36c \ud45c\uc900 \ubaa8\ub4c8\uc778 typing \uc744 \uc774\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uad6c\uccb4\uc801\uc73c\ub85c\ub294 \uc544\ub798 \ud0c0\uc785 \ud78c\ud2b8\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. List \u00b6 \uc608\ub97c \ub4e4\uba74, str \uc758 list \uc778 \ubcc0\uc218\ub97c \uc815\uc758\ud574\ubd05\uc2dc\ub2e4. typing \uc5d0\uc11c List (\ub300\ubb38\uc790 L )\ub97c import \ud569\ub2c8\ub2e4. from typing import List def process_items ( items : List [ str ]): for item in items : print ( item ) \ucf5c\ub860( : ) \ubb38\ubc95\uc744 \uc774\uc6a9\ud558\uc5ec \ubcc0\uc218\ub97c \uc120\uc5b8\ud569\ub2c8\ub2e4. \ud0c0\uc785\uc73c\ub85c\ub294 List \ub97c \ub123\uc5b4\uc90d\ub2c8\ub2e4. \uc774\ub54c \ubc30\uc5f4\uc740 \ub0b4\ubd80 \ud0c0\uc785\uc744 \ud3ec\ud568\ud558\ub294 \ud0c0\uc785\uc774\uae30 \ub54c\ubb38\uc5d0 \ub300\uad04\ud638 \uc548\uc5d0 \ub123\uc5b4\uc90d\ub2c8\ub2e4. from typing import List def process_items ( items : List [ str ]): for item in items : print ( item ) \ud301 \ub300\uad04\ud638 \uc548\uc758 \ub0b4\ubd80 \ud0c0\uc785\uc740 \"\ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218(type paramters)\"\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc774\ubc88 \uc608\uc81c\uc5d0\uc11c\ub294 str \uc774 List \uc5d0 \ub4e4\uc5b4\uac04 \ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218 \uc785\ub2c8\ub2e4. \uc774\ub294 \" items \uc740 list \uc778\ub370, \ubc30\uc5f4\uc5d0 \ub4e4\uc5b4\uc788\ub294 \uc544\uc774\ud15c \uac01\uac01\uc740 str \uc774\ub2e4\"\ub77c\ub294 \ub73b\uc785\ub2c8\ub2e4. \uc774\ub807\uac8c \ud568\uc73c\ub85c\uc368, \uc5d0\ub514\ud130\ub294 \ubc30\uc5f4\uc5d0 \ub4e4\uc5b4\uc788\ub294 \uc544\uc774\ud15c\uc744 \ucc98\ub9ac\ud560\ub54c\ub3c4 \ub3c4\uc6c0\uc744 \uc904 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4: \ud0c0\uc785\uc774 \uc5c6\uc73c\uba74 \uc774\uac74 \uac70\uc758 \ubd88\uac00\ub2a5\uc774\ub098 \ub2e4\ub984 \uc5c6\uc2b5\ub2c8\ub2e4. \ubcc0\uc218 item \uc740 items \uc758 \uac1c\ubcc4 \uc694\uc18c\ub77c\ub294 \uc0ac\uc2e4\uc744 \uc54c\uc544\ub450\uc138\uc694. \uadf8\ub9ac\uace0 \uc5d0\ub514\ud130\ub294 \uacc4\uc18d str \ub77c\ub294 \uc0ac\uc2e4\uc744 \uc54c\uace0 \ub3c4\uc640\uc90d\ub2c8\ub2e4. Tuple \uacfc Set \u00b6 tuple \uacfc set \ub3c4 \ub3d9\uc77c\ud558\uac8c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from typing import Set , Tuple def process_items ( items_t : Tuple [ int , int , str ], items_s : Set [ bytes ]): return items_t , items_s \uc774 \ub73b\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4: \ubcc0\uc218 items_t \ub294, \ucc28\ub840\ub300\ub85c int , int , str \uc778 tuple \uc774\ub2e4. \ubcc0\uc218 items_s \ub294, \uac01 \uc544\uc774\ud15c\uc774 bytes \uc778 set \uc774\ub2e4. Dict \u00b6 dict \ub97c \uc120\uc5b8\ud558\ub824\uba74 \ucef4\ub9c8\ub85c \uad6c\ubd84\ub41c 2\uac1c\uc758 \ud30c\ub77c\ubbf8\ud130\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \uccab \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub294 dict \uc758 \ud0a4(key)\uc774\uace0, \ub450 \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub294 dict \uc758 \uac12(value)\uc785\ub2c8\ub2e4. from typing import Dict def process_items ( prices : Dict [ str , float ]): for item_name , item_price in prices . items (): print ( item_name ) print ( item_price ) \uc774 \ub73b\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4: \ubcc0\uc218 prices \ub294 dict \uc774\ub2e4: dict \uc758 \ud0a4(key)\ub294 str \ud0c0\uc785\uc774\ub2e4. (\uac01 \uc544\uc774\ud15c\uc758 \uc774\ub984(name)) dict \uc758 \uac12(value)\ub294 float \ud0c0\uc785\uc774\ub2e4. (\uac01 \uc544\uc774\ud15c\uc758 \uac00\uaca9(price)) Optional \u00b6 str \uacfc \uac19\uc774 \ud0c0\uc785\uc744 \uc120\uc5b8\ud560 \ub54c Optional \uc744 \uc4f8 \uc218\ub3c4 \uc788\ub294\ub370, \"\uc120\ud0dd\uc801(Optional)\"\uc774\uae30\ub54c\ubb38\uc5d0 None \ub3c4 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Optional def say_hi ( name : Optional [ str ] = None ): if name is not None : print ( f \"Hey { name } !\" ) else : print ( \"Hello World\" ) Optional[str] \uc744 str \ub300\uc2e0 \uc4f0\uac8c \ub418\uba74, \ud2b9\uc815 \uac12\uc774 \uc2e4\uc81c\ub85c\ub294 None \uc774 \ub420 \uc218\ub3c4 \uc788\ub294\ub370 \ud56d\uc0c1 str \uc774\ub77c\uace0 \uac00\uc815\ud558\ub294 \uc0c1\ud669\uc5d0\uc11c \uc5d0\ub514\ud130\uac00 \uc5d0\ub7ec\ub97c \ucc3e\uac8c \ub3c4\uc640\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Generic(\uc81c\ub124\ub9ad) \ud0c0\uc785 \u00b6 \uc774 \ud0c0\uc785\uc740 \ub300\uad04\ud638 \uc548\uc5d0 \ub9e4\uac1c\ubcc0\uc218\ub97c \uac00\uc9c0\uba70, \uc885\ub958\ub294: List Tuple Set Dict Optional ...\ub4f1\ub4f1 \uc704\uc640 \uac19\uc740 \ud0c0\uc785\uc740 Generic(\uc81c\ub124\ub9ad) \ud0c0\uc785 \ud639\uc740 Generics(\uc81c\ub124\ub9ad\uc2a4) \ub77c\uace0 \ubd88\ub9bd\ub2c8\ub2e4. \ud0c0\uc785\uc73c\ub85c\uc11c\uc758 \ud074\ub798\uc2a4 \u00b6 \ubcc0\uc218\uc758 \ud0c0\uc785\uc73c\ub85c \ud074\ub798\uc2a4\ub97c \uc120\uc5b8\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub984(name)\uc744 \uac00\uc9c4 Person \ud074\ub798\uc2a4\uac00 \uc788\ub2e4\uace0 \ud574\ubd05\uc2dc\ub2e4. class Person : def __init__ ( self , name : str ): self . name = name def get_person_name ( one_person : Person ): return one_person . name \uadf8\ub807\uac8c \ud558\uba74 \ubcc0\uc218\ub97c Person \uc774\ub77c\uace0 \uc120\uc5b8\ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. class Person : def __init__ ( self , name : str ): self . name = name def get_person_name ( one_person : Person ): return one_person . name \uadf8\ub9ac\uace0 \uc5ed\uc2dc\ub098 \ubaa8\ub4e0 \uc5d0\ub514\ud130 \ub3c4\uc6c0\uc744 \ubc1b\uac8c \ub418\uaca0\uc8e0. Pydantic \ubaa8\ub378 \u00b6 Pydantic \uc740 \ub370\uc774\ud130 \uac80\uc99d(Validation)\uc744 \uc704\ud55c \ud30c\uc774\uc36c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \uc18d\uc131\ub4e4\uc744 \ud3ec\ud568\ud55c \ud074\ub798\uc2a4 \ud615\ud0dc\ub85c \"\ubaa8\uc591(shape)\"\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uac01 \uc18d\uc131\uc740 \ud0c0\uc785\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud074\ub798\uc2a4\ub97c \ud65c\uc6a9\ud558\uc5ec\uc11c \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uc778\uc2a4\ud134\uc2a4\ub97c \ub9cc\ub4e4\uac8c \ub418\uba74, \ud544\uc694\ud55c \uacbd\uc6b0\uc5d0\ub294 \uc801\ub2f9\ud55c \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\uae4c\uc9c0 \uc2dc\ud0a4\uae30\ub3c4 \ud558\uc5ec \ub370\uc774\ud130\uac00 \ud3ec\ud568\ub41c \uac1d\uccb4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uacb0\uacfc \uac1d\uccb4\uc5d0 \ub300\ud574\uc11c\ub294 \uc5d0\ub514\ud130\uc758 \ub3c4\uc6c0\uc744 \ubc1b\uc744 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. Pydantic \uacf5\uc2dd \ubb38\uc11c \uc608\uc2dc: from datetime import datetime from typing import List , Union from pydantic import BaseModel class User ( BaseModel ): id : int name = \"John Doe\" signup_ts : Union [ datetime , None ] = None friends : List [ int ] = [] external_data = { \"id\" : \"123\" , \"signup_ts\" : \"2017-06-01 12:22\" , \"friends\" : [ 1 , \"2\" , b \"3\" ], } user = User ( ** external_data ) print ( user ) # > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3] print ( user . id ) # > 123 \uc815\ubcf4 Pydantic<\uc5d0 \ub300\ud574 \ub354 \ubc30\uc6b0\uace0 \uc2f6\ub2e4\uba74 \uacf5\uc2dd \ubb38\uc11c \ub97c \ucc38\uace0\ud558\uc138\uc694. FastAPI \ub294 \ubaa8\ub450 Pydantic\uc744 \uae30\ubc18\uc73c\ub85c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ubaa8\ub4e0 \uac83\uc774 \uc2e4\uc81c\ub85c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ub418\ub294\uc9c0\uc5d0 \ub300\ud574\uc11c\ub294 \uc790\uc2b5\uc11c - \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \uc5d0\uc11c \ub354 \ub9ce\uc774 \ud655\uc778\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \uc5d0\uc11c\uc758 \ud0c0\uc785 \ud78c\ud2b8 \u00b6 FastAPI \ub294 \uc5ec\ub7ec \ubd80\ubd84\uc5d0\uc11c \ud0c0\uc785 \ud78c\ud2b8\uc758 \uc7a5\uc810\uc744 \ucde8\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \uc5d0\uc11c \ud0c0\uc785 \ud78c\ud2b8\uc640 \ud568\uaed8 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud558\uba74 \uc7a5\uc810\uc740: \uc5d0\ub514\ud130 \ub3c4\uc6c0 . \ud0c0\uc785 \ud655\uc778 . ...\uadf8\ub9ac\uace0 FastAPI \ub294 \uac19\uc740 \uc815\uc758\ub97c \uc544\ub798\uc5d0\ub3c4 \uc801\uc6a9\ud569\ub2c8\ub2e4: \uc694\uad6c\uc0ac\ud56d \uc815\uc758 : \uc694\uccad \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218, \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218, \ud5e4\ub354, \ubc14\ub514, \uc758\uc874\uc131 \ub4f1. \ub370\uc774\ud130 \ubcc0\ud658 : \uc694\uccad\uc5d0\uc11c \uc694\uad6c\ud55c \ud0c0\uc785\uc73c\ub85c. \ub370\uc774\ud130 \uac80\uc99d : \uac01 \uc694\uccad\ub9c8\ub2e4: \ub370\uc774\ud130\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uc5d0\ub294 \uc790\ub3d9\uc73c\ub85c \uc5d0\ub7ec \ub97c \ubc1c\uc0dd\ud569\ub2c8\ub2e4. OpenAPI\ub97c \ud65c\uc6a9\ud55c API \ubb38\uc11c\ud654 : \uc790\ub3d9\uc73c\ub85c \uc0c1\ud638\uc791\uc6a9\ud558\ub294 \uc720\uc800 \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \uc4f0\uc774\uac8c \ub429\ub2c8\ub2e4. \uc704 \ub0b4\uc6a9\uc774 \ub2e4\uc18c \ucd94\uc0c1\uc801\uc77c \uc218\ub3c4 \uc788\uc9c0\ub9cc, \uac71\uc815\ub9c8\uc138\uc694. \uc790\uc2b5\uc11c - \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \uc5d0\uc11c \uc804\ubd80 \ud655\uc778 \uac00\ub2a5\ud569\ub2c8\ub2e4. \uac00\uc7a5 \uc911\uc694\ud55c \uac74, \ud45c\uc900 \ud30c\uc774\uc36c \ud0c0\uc785\uc744 \ud55c \uacf3\uc5d0\uc11c(\ud074\ub798\uc2a4\ub97c \ub354\ud558\uac70\ub098, \ub370\ucf54\ub808\uc774\ud130 \uc0ac\uc6a9\ud558\ub294 \ub300\uc2e0) \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 FastAPI \uac00 \ub2f9\uc2e0\uc744 \uc704\ud574 \ub9ce\uc740 \uc77c\uc744 \ud574\uc900\ub2e4\ub294 \uc0ac\uc2e4\uc774\uc8e0. \uc815\ubcf4 \ub9cc\uc57d \ubaa8\ub4e0 \uc790\uc2b5\uc11c\ub97c \ub2e4 \ubcf4\uc558\uc74c\uc5d0\ub3c4 \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c \ub354 \ubcf4\uace0\uc790 \ubc29\ubb38\ud55c \uacbd\uc6b0\uc5d0\ub294 mypy \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \"cheat sheet\" \uc774 \uc88b\uc740 \uc790\ub8cc\uac00 \ub420 \uac81\ub2c8\ub2e4.","title":"\ud30c\uc774\uc36c \ud0c0\uc785 \uc18c\uac1c"},{"location":"python-types/#_1","text":"\ud30c\uc774\uc36c\uc740 \uc120\ud0dd\uc801\uc73c\ub85c \"\ud0c0\uc785 \ud78c\ud2b8(type hints)\"\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ud0c0\uc785 \ud78c\ud2b8 \ub4e4\uc740 \ubcc0\uc218\uc758 \ud0c0\uc785 \uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ud2b9\uc218\ud55c \uad6c\ubb38\uc785\ub2c8\ub2e4. \ubcc0\uc218\uc758 \ud0c0\uc785\uc744 \uc9c0\uc815\ud558\uba74 \uc5d0\ub514\ud130\uc640 \ud234\uc774 \ub354 \ub9ce\uc740 \ub3c4\uc6c0\uc744 \uc904 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. \uc774 \ubb38\uc11c\ub294 \ud30c\uc774\uc36c \ud0c0\uc785 \ud78c\ud2b8\uc5d0 \ub300\ud55c \ube60\ub978 \uc790\uc2b5\uc11c / \ub0b4\uc6a9\ud658\uae30 \uc218\uc900\uc758 \ubb38\uc11c\uc785\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 FastAPI \ub97c \uc4f0\uae30 \uc704\ud55c \ucd5c\uc18c\ud55c\uc758 \ub0b4\uc6a9\ub9cc\uc744 \ub2e4\ub8f9\ub2c8\ub2e4. FastAPI \ub294 \ud0c0\uc785 \ud78c\ud2b8\uc5d0 \uae30\ubc18\uc744 \ub450\uace0 \uc788\uc73c\uba70, \uc774\ub294 \ub9ce\uc740 \uc7a5\uc810\uacfc \uc774\uc775\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ube44\ub85d FastAPI \ub97c \uc4f0\uc9c0 \uc54a\ub294\ub2e4\uace0 \ud558\ub354\ub77c\ub3c4, \uc870\uae08\uc774\ub77c\ub3c4 \uc54c\uc544\ub450\uba74 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. \ucc38\uace0 \ud30c\uc774\uc36c\uc5d0 \ub2a5\uc219\ud558\uc154\uc11c \ud0c0\uc785 \ud78c\ud2b8\uc5d0 \ub300\ud574 \ubaa8\ub450 \uc544\uc2e0\ub2e4\uba74, \ub2e4\uc74c \ucc55\ud130\ub85c \uac74\ub108\ub6f0\uc138\uc694.","title":"\ud30c\uc774\uc36c \ud0c0\uc785 \uc18c\uac1c"},{"location":"python-types/#_2","text":"\uac04\ub2e8\ud55c \uc608\uc81c\ubd80\ud130 \uc2dc\uc791\ud574\ubd05\uc2dc\ub2e4: def get_full_name ( first_name , last_name ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \uc774 \ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud55c \uacb0\uacfc\uac12: John Doe \ud568\uc218\ub294 \uc544\ub798\uc640 \uac19\uc774 \uc2e4\ud589\ub429\ub2c8\ub2e4: first_name \uacfc last_name \ub97c \ubc1b\uc2b5\ub2c8\ub2e4. title() \ub85c \uac01 \uccab \ubb38\uc790\ub97c \ub300\ubb38\uc790\ub85c \ubcc0\ud658\uc2dc\ud0b5\ub2c8\ub2e4. \ub450 \ub2e8\uc5b4\ub97c \uc911\uac04\uc5d0 \uacf5\ubc31\uc744 \ub450\uace0 \uc5f0\uacb0 \ud569\ub2c8\ub2e4. def get_full_name ( first_name , last_name ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" ))","title":"\ub3d9\uae30 \ubd80\uc5ec"},{"location":"python-types/#_3","text":"\uc774\uac74 \ub9e4\uc6b0 \uac04\ub2e8\ud55c \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ucc98\uc74c\ubd80\ud130 \uc791\uc131\ud55c\ub2e4\uace0 \uc0dd\uac01\uc744 \ud574\ubd05\uc2dc\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc900\ube44\ud588\uace0, \ud568\uc218\ub97c \uc815\uc758\ud558\uae30 \uc2dc\uc791\ud588\uc744 \uac81\ub2c8\ub2e4. \uc774\ub54c \"\uccab \uae00\uc790\ub97c \ub300\ubb38\uc790\ub85c \ubc14\uafb8\ub294 \ud568\uc218\"\ub97c \ud638\ucd9c\ud574\uc57c \ud569\ub2c8\ub2e4. upper \uc600\ub098? \uc544\ub2c8\uba74 uppercase ? first_uppercase ? capitalize ? \uadf8\ub54c \uac1c\ubc1c\uc790\ub4e4\uc758 \uc624\ub79c \uce5c\uad6c, \uc5d0\ub514\ud130 \uc790\ub3d9\uc644\uc131\uc744 \uc2dc\ub3c4\ud574\ubd05\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 first_name \ub97c \uc785\ub825\ud55c \ub4a4 \uc810( . )\uc744 \uc785\ub825\ud558\uace0 \uc790\ub3d9\uc644\uc131\uc744 \ucf1c\uae30 \uc704\ud574\uc11c Ctrl+Space \ub97c \ub20c\ub800\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc2ac\ud504\uac8c\ub3c4 \uc544\ubb34\ub7f0 \ub3c4\uc6c0\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4:","title":"\ucf54\ub4dc \uc218\uc815"},{"location":"python-types/#_4","text":"\uc774\uc804 \ubc84\uc804\uc5d0\uc11c \ud55c \uc904\ub9cc \uc218\uc815\ud574\ubd05\uc2dc\ub2e4. \uc800\ud76c\ub294 \uc774 \ud568\uc218\uc758 \ub9e4\uac1c\ubcc0\uc218 \ubd80\ubd84: first_name , last_name \uc744 \uc544\ub798\uc640 \uac19\uc774 \ubc14\uafc0 \uac81\ub2c8\ub2e4: first_name : str , last_name : str \uc774\uac8c \ub2e4\uc785\ub2c8\ub2e4. \uc774\uac8c \"\ud0c0\uc785 \ud78c\ud2b8\"\uc785\ub2c8\ub2e4: def get_full_name ( first_name : str , last_name : str ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \ud0c0\uc785\ud78c\ud2b8\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uae30\ubcf8 \uac12\uc744 \uc120\uc5b8\ud558\ub294 \uac83\uacfc\ub294 \ub2e4\ub985\ub2c8\ub2e4: first_name = \"john\" , last_name = \"doe\" \uc774\ub294 \ub2e4\ub978 \uac83\uc785\ub2c8\ub2e4. \ub4f1\ud638( = ) \ub300\uc2e0 \ucf5c\ub860( : )\uc744 \uc4f0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \ud0c0\uc785\ud78c\ud2b8\ub97c \ucd94\uac00\ud55c\ub2e4\uace0 \ud574\uc11c \ud2b9\ubcc4\ud558\uac8c \uc5b4\ub5a4 \uc77c\uc774 \uc77c\uc5b4\ub098\uc9c0\ub3c4 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub807\uc9c0\ub9cc \uc774\uc81c, \ub2e4\uc2dc \ud568\uc218\ub97c \ub9cc\ub4dc\ub294 \ub3c4\uc911\uc774\ub77c\uace0 \uc0dd\uac01\ud574\ubd05\uc2dc\ub2e4. \ub2e4\ub9cc \uc774\ubc88\uc5d4 \ud0c0\uc785 \ud78c\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uac19\uc740 \uc0c1\ud669\uc5d0\uc11c Ctrl+Space \ub85c \uc790\ub3d9\uc644\uc131\uc744 \uc791\ub3d9\uc2dc\ud0a4\uba74, \uc544\ub798\uc640 \uac19\uc774 \"\uadf8\ub807\uc9c0!\"\ud558\ub294 \uc635\uc158\uc774 \ub098\uc62c\ub54c\uae4c\uc9c0 \uc2a4\ud06c\ub864\uc744 \ub0b4\ub824\uc11c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4:","title":"\ud0c0\uc785 \ucd94\uac00\ud558\uae30"},{"location":"python-types/#_5","text":"\uc544\ub798 \ud568\uc218\ub97c \ubcf4\uba74, \uc774\ubbf8 \ud0c0\uc785 \ud78c\ud2b8\uac00 \uc801\uc6a9\ub418\uc5b4 \uc788\ub294 \uac78 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: def get_name_with_age ( name : str , age : int ): name_with_age = name + \" is this old: \" + age return name_with_age \ud3b8\uc9d1\uae30\uac00 \ubcc0\uc218\uc758 \ud0c0\uc785\uc744 \uc54c\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \uc790\ub3d9\uc644\uc131 \ubfd0 \uc544\ub2c8\ub77c \uc5d0\ub7ec\ub3c4 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uc774\uc81c \uace0\uccd0\uc57c\ud558\ub294 \uac78 \uc54c\uae30 \ub54c\ubb38\uc5d0, age \ub97c str(age) \uacfc \uac19\uc774 \ubb38\uc790\uc5f4\ub85c \ubc14\uafb8\uac8c \ub429\ub2c8\ub2e4: def get_name_with_age ( name : str , age : int ): name_with_age = name + \" is this old: \" + str ( age ) return name_with_age","title":"\ub354 \ud070 \ub3d9\uae30\ubd80\uc5ec"},{"location":"python-types/#_6","text":"\ubc29\uae08 \ud568\uc218\uc758 \ub9e4\uac1c\ubcc0\uc218\ub85c\uc368 \ud0c0\uc785 \ud78c\ud2b8\ub97c \uc120\uc5b8\ud558\ub294 \uc8fc\uc694 \uc7a5\uc18c\ub97c \ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc774 \uc704\uce58\ub294 \uc5ec\ub7ec\ubd84\uc774 FastAPI \uc640 \ud568\uaed8 \uc774\ub97c \uc0ac\uc6a9\ud558\ub294 \uc8fc\uc694 \uc7a5\uc18c\uc785\ub2c8\ub2e4.","title":"\ud0c0\uc785 \uc120\uc5b8"},{"location":"python-types/#simple","text":"str \ubfd0 \uc544\ub2c8\ub77c \ubaa8\ub4e0 \ud30c\uc774\uc36c \ud45c\uc900 \ud0c0\uc785\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74: int float bool bytes def get_items ( item_a : str , item_b : int , item_c : float , item_d : bool , item_e : bytes ): return item_a , item_b , item_c , item_d , item_d , item_e","title":"Simple \ud0c0\uc785"},{"location":"python-types/#generic","text":"dict , list , set , tuple \uacfc \uac19\uc740 \uac12\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \ub370\uc774\ud130 \uad6c\uc870\uac00 \uc788\uace0, \ub0b4\ubd80\uc758 \uac12\uc740 \uac01\uc790\uc758 \ud0c0\uc785\uc744 \uac00\uc9c8 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ud0c0\uc785\uacfc \ub0b4\ubd80 \ud0c0\uc785\uc744 \uc120\uc5b8\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud30c\uc774\uc36c \ud45c\uc900 \ubaa8\ub4c8\uc778 typing \uc744 \uc774\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uad6c\uccb4\uc801\uc73c\ub85c\ub294 \uc544\ub798 \ud0c0\uc785 \ud78c\ud2b8\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4.","title":"\ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\ub97c \ud65c\uc6a9\ud55c Generic(\uc81c\ub124\ub9ad) \ud0c0\uc785"},{"location":"python-types/#list","text":"\uc608\ub97c \ub4e4\uba74, str \uc758 list \uc778 \ubcc0\uc218\ub97c \uc815\uc758\ud574\ubd05\uc2dc\ub2e4. typing \uc5d0\uc11c List (\ub300\ubb38\uc790 L )\ub97c import \ud569\ub2c8\ub2e4. from typing import List def process_items ( items : List [ str ]): for item in items : print ( item ) \ucf5c\ub860( : ) \ubb38\ubc95\uc744 \uc774\uc6a9\ud558\uc5ec \ubcc0\uc218\ub97c \uc120\uc5b8\ud569\ub2c8\ub2e4. \ud0c0\uc785\uc73c\ub85c\ub294 List \ub97c \ub123\uc5b4\uc90d\ub2c8\ub2e4. \uc774\ub54c \ubc30\uc5f4\uc740 \ub0b4\ubd80 \ud0c0\uc785\uc744 \ud3ec\ud568\ud558\ub294 \ud0c0\uc785\uc774\uae30 \ub54c\ubb38\uc5d0 \ub300\uad04\ud638 \uc548\uc5d0 \ub123\uc5b4\uc90d\ub2c8\ub2e4. from typing import List def process_items ( items : List [ str ]): for item in items : print ( item ) \ud301 \ub300\uad04\ud638 \uc548\uc758 \ub0b4\ubd80 \ud0c0\uc785\uc740 \"\ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218(type paramters)\"\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc774\ubc88 \uc608\uc81c\uc5d0\uc11c\ub294 str \uc774 List \uc5d0 \ub4e4\uc5b4\uac04 \ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218 \uc785\ub2c8\ub2e4. \uc774\ub294 \" items \uc740 list \uc778\ub370, \ubc30\uc5f4\uc5d0 \ub4e4\uc5b4\uc788\ub294 \uc544\uc774\ud15c \uac01\uac01\uc740 str \uc774\ub2e4\"\ub77c\ub294 \ub73b\uc785\ub2c8\ub2e4. \uc774\ub807\uac8c \ud568\uc73c\ub85c\uc368, \uc5d0\ub514\ud130\ub294 \ubc30\uc5f4\uc5d0 \ub4e4\uc5b4\uc788\ub294 \uc544\uc774\ud15c\uc744 \ucc98\ub9ac\ud560\ub54c\ub3c4 \ub3c4\uc6c0\uc744 \uc904 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4: \ud0c0\uc785\uc774 \uc5c6\uc73c\uba74 \uc774\uac74 \uac70\uc758 \ubd88\uac00\ub2a5\uc774\ub098 \ub2e4\ub984 \uc5c6\uc2b5\ub2c8\ub2e4. \ubcc0\uc218 item \uc740 items \uc758 \uac1c\ubcc4 \uc694\uc18c\ub77c\ub294 \uc0ac\uc2e4\uc744 \uc54c\uc544\ub450\uc138\uc694. \uadf8\ub9ac\uace0 \uc5d0\ub514\ud130\ub294 \uacc4\uc18d str \ub77c\ub294 \uc0ac\uc2e4\uc744 \uc54c\uace0 \ub3c4\uc640\uc90d\ub2c8\ub2e4.","title":"List"},{"location":"python-types/#tuple-set","text":"tuple \uacfc set \ub3c4 \ub3d9\uc77c\ud558\uac8c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from typing import Set , Tuple def process_items ( items_t : Tuple [ int , int , str ], items_s : Set [ bytes ]): return items_t , items_s \uc774 \ub73b\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4: \ubcc0\uc218 items_t \ub294, \ucc28\ub840\ub300\ub85c int , int , str \uc778 tuple \uc774\ub2e4. \ubcc0\uc218 items_s \ub294, \uac01 \uc544\uc774\ud15c\uc774 bytes \uc778 set \uc774\ub2e4.","title":"Tuple\uacfc Set"},{"location":"python-types/#dict","text":"dict \ub97c \uc120\uc5b8\ud558\ub824\uba74 \ucef4\ub9c8\ub85c \uad6c\ubd84\ub41c 2\uac1c\uc758 \ud30c\ub77c\ubbf8\ud130\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \uccab \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub294 dict \uc758 \ud0a4(key)\uc774\uace0, \ub450 \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub294 dict \uc758 \uac12(value)\uc785\ub2c8\ub2e4. from typing import Dict def process_items ( prices : Dict [ str , float ]): for item_name , item_price in prices . items (): print ( item_name ) print ( item_price ) \uc774 \ub73b\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4: \ubcc0\uc218 prices \ub294 dict \uc774\ub2e4: dict \uc758 \ud0a4(key)\ub294 str \ud0c0\uc785\uc774\ub2e4. (\uac01 \uc544\uc774\ud15c\uc758 \uc774\ub984(name)) dict \uc758 \uac12(value)\ub294 float \ud0c0\uc785\uc774\ub2e4. (\uac01 \uc544\uc774\ud15c\uc758 \uac00\uaca9(price))","title":"Dict"},{"location":"python-types/#optional","text":"str \uacfc \uac19\uc774 \ud0c0\uc785\uc744 \uc120\uc5b8\ud560 \ub54c Optional \uc744 \uc4f8 \uc218\ub3c4 \uc788\ub294\ub370, \"\uc120\ud0dd\uc801(Optional)\"\uc774\uae30\ub54c\ubb38\uc5d0 None \ub3c4 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Optional def say_hi ( name : Optional [ str ] = None ): if name is not None : print ( f \"Hey { name } !\" ) else : print ( \"Hello World\" ) Optional[str] \uc744 str \ub300\uc2e0 \uc4f0\uac8c \ub418\uba74, \ud2b9\uc815 \uac12\uc774 \uc2e4\uc81c\ub85c\ub294 None \uc774 \ub420 \uc218\ub3c4 \uc788\ub294\ub370 \ud56d\uc0c1 str \uc774\ub77c\uace0 \uac00\uc815\ud558\ub294 \uc0c1\ud669\uc5d0\uc11c \uc5d0\ub514\ud130\uac00 \uc5d0\ub7ec\ub97c \ucc3e\uac8c \ub3c4\uc640\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"Optional"},{"location":"python-types/#generic_1","text":"\uc774 \ud0c0\uc785\uc740 \ub300\uad04\ud638 \uc548\uc5d0 \ub9e4\uac1c\ubcc0\uc218\ub97c \uac00\uc9c0\uba70, \uc885\ub958\ub294: List Tuple Set Dict Optional ...\ub4f1\ub4f1 \uc704\uc640 \uac19\uc740 \ud0c0\uc785\uc740 Generic(\uc81c\ub124\ub9ad) \ud0c0\uc785 \ud639\uc740 Generics(\uc81c\ub124\ub9ad\uc2a4) \ub77c\uace0 \ubd88\ub9bd\ub2c8\ub2e4.","title":"Generic(\uc81c\ub124\ub9ad) \ud0c0\uc785"},{"location":"python-types/#_7","text":"\ubcc0\uc218\uc758 \ud0c0\uc785\uc73c\ub85c \ud074\ub798\uc2a4\ub97c \uc120\uc5b8\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub984(name)\uc744 \uac00\uc9c4 Person \ud074\ub798\uc2a4\uac00 \uc788\ub2e4\uace0 \ud574\ubd05\uc2dc\ub2e4. class Person : def __init__ ( self , name : str ): self . name = name def get_person_name ( one_person : Person ): return one_person . name \uadf8\ub807\uac8c \ud558\uba74 \ubcc0\uc218\ub97c Person \uc774\ub77c\uace0 \uc120\uc5b8\ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. class Person : def __init__ ( self , name : str ): self . name = name def get_person_name ( one_person : Person ): return one_person . name \uadf8\ub9ac\uace0 \uc5ed\uc2dc\ub098 \ubaa8\ub4e0 \uc5d0\ub514\ud130 \ub3c4\uc6c0\uc744 \ubc1b\uac8c \ub418\uaca0\uc8e0.","title":"\ud0c0\uc785\uc73c\ub85c\uc11c\uc758 \ud074\ub798\uc2a4"},{"location":"python-types/#pydantic","text":"Pydantic \uc740 \ub370\uc774\ud130 \uac80\uc99d(Validation)\uc744 \uc704\ud55c \ud30c\uc774\uc36c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \uc18d\uc131\ub4e4\uc744 \ud3ec\ud568\ud55c \ud074\ub798\uc2a4 \ud615\ud0dc\ub85c \"\ubaa8\uc591(shape)\"\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uac01 \uc18d\uc131\uc740 \ud0c0\uc785\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud074\ub798\uc2a4\ub97c \ud65c\uc6a9\ud558\uc5ec\uc11c \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uc778\uc2a4\ud134\uc2a4\ub97c \ub9cc\ub4e4\uac8c \ub418\uba74, \ud544\uc694\ud55c \uacbd\uc6b0\uc5d0\ub294 \uc801\ub2f9\ud55c \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\uae4c\uc9c0 \uc2dc\ud0a4\uae30\ub3c4 \ud558\uc5ec \ub370\uc774\ud130\uac00 \ud3ec\ud568\ub41c \uac1d\uccb4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uacb0\uacfc \uac1d\uccb4\uc5d0 \ub300\ud574\uc11c\ub294 \uc5d0\ub514\ud130\uc758 \ub3c4\uc6c0\uc744 \ubc1b\uc744 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. Pydantic \uacf5\uc2dd \ubb38\uc11c \uc608\uc2dc: from datetime import datetime from typing import List , Union from pydantic import BaseModel class User ( BaseModel ): id : int name = \"John Doe\" signup_ts : Union [ datetime , None ] = None friends : List [ int ] = [] external_data = { \"id\" : \"123\" , \"signup_ts\" : \"2017-06-01 12:22\" , \"friends\" : [ 1 , \"2\" , b \"3\" ], } user = User ( ** external_data ) print ( user ) # > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3] print ( user . id ) # > 123 \uc815\ubcf4 Pydantic<\uc5d0 \ub300\ud574 \ub354 \ubc30\uc6b0\uace0 \uc2f6\ub2e4\uba74 \uacf5\uc2dd \ubb38\uc11c \ub97c \ucc38\uace0\ud558\uc138\uc694. FastAPI \ub294 \ubaa8\ub450 Pydantic\uc744 \uae30\ubc18\uc73c\ub85c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ubaa8\ub4e0 \uac83\uc774 \uc2e4\uc81c\ub85c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ub418\ub294\uc9c0\uc5d0 \ub300\ud574\uc11c\ub294 \uc790\uc2b5\uc11c - \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \uc5d0\uc11c \ub354 \ub9ce\uc774 \ud655\uc778\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"Pydantic \ubaa8\ub378"},{"location":"python-types/#fastapi","text":"FastAPI \ub294 \uc5ec\ub7ec \ubd80\ubd84\uc5d0\uc11c \ud0c0\uc785 \ud78c\ud2b8\uc758 \uc7a5\uc810\uc744 \ucde8\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \uc5d0\uc11c \ud0c0\uc785 \ud78c\ud2b8\uc640 \ud568\uaed8 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud558\uba74 \uc7a5\uc810\uc740: \uc5d0\ub514\ud130 \ub3c4\uc6c0 . \ud0c0\uc785 \ud655\uc778 . ...\uadf8\ub9ac\uace0 FastAPI \ub294 \uac19\uc740 \uc815\uc758\ub97c \uc544\ub798\uc5d0\ub3c4 \uc801\uc6a9\ud569\ub2c8\ub2e4: \uc694\uad6c\uc0ac\ud56d \uc815\uc758 : \uc694\uccad \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218, \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218, \ud5e4\ub354, \ubc14\ub514, \uc758\uc874\uc131 \ub4f1. \ub370\uc774\ud130 \ubcc0\ud658 : \uc694\uccad\uc5d0\uc11c \uc694\uad6c\ud55c \ud0c0\uc785\uc73c\ub85c. \ub370\uc774\ud130 \uac80\uc99d : \uac01 \uc694\uccad\ub9c8\ub2e4: \ub370\uc774\ud130\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uc5d0\ub294 \uc790\ub3d9\uc73c\ub85c \uc5d0\ub7ec \ub97c \ubc1c\uc0dd\ud569\ub2c8\ub2e4. OpenAPI\ub97c \ud65c\uc6a9\ud55c API \ubb38\uc11c\ud654 : \uc790\ub3d9\uc73c\ub85c \uc0c1\ud638\uc791\uc6a9\ud558\ub294 \uc720\uc800 \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \uc4f0\uc774\uac8c \ub429\ub2c8\ub2e4. \uc704 \ub0b4\uc6a9\uc774 \ub2e4\uc18c \ucd94\uc0c1\uc801\uc77c \uc218\ub3c4 \uc788\uc9c0\ub9cc, \uac71\uc815\ub9c8\uc138\uc694. \uc790\uc2b5\uc11c - \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \uc5d0\uc11c \uc804\ubd80 \ud655\uc778 \uac00\ub2a5\ud569\ub2c8\ub2e4. \uac00\uc7a5 \uc911\uc694\ud55c \uac74, \ud45c\uc900 \ud30c\uc774\uc36c \ud0c0\uc785\uc744 \ud55c \uacf3\uc5d0\uc11c(\ud074\ub798\uc2a4\ub97c \ub354\ud558\uac70\ub098, \ub370\ucf54\ub808\uc774\ud130 \uc0ac\uc6a9\ud558\ub294 \ub300\uc2e0) \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 FastAPI \uac00 \ub2f9\uc2e0\uc744 \uc704\ud574 \ub9ce\uc740 \uc77c\uc744 \ud574\uc900\ub2e4\ub294 \uc0ac\uc2e4\uc774\uc8e0. \uc815\ubcf4 \ub9cc\uc57d \ubaa8\ub4e0 \uc790\uc2b5\uc11c\ub97c \ub2e4 \ubcf4\uc558\uc74c\uc5d0\ub3c4 \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c \ub354 \ubcf4\uace0\uc790 \ubc29\ubb38\ud55c \uacbd\uc6b0\uc5d0\ub294 mypy \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \"cheat sheet\" \uc774 \uc88b\uc740 \uc790\ub8cc\uac00 \ub420 \uac81\ub2c8\ub2e4.","title":"FastAPI\uc5d0\uc11c\uc758 \ud0c0\uc785 \ud78c\ud2b8"},{"location":"release-notes/","text":"\ubcc0\uacbd \uc0ac\ud56d \u00b6 Latest Changes \u00b6 \ud83d\udd27 Update sponsors, Striveworks badge. PR #5179 by @tiangolo . \ud83c\udf10 Add Persian translation for docs/fa/docs/index.md and tweak right-to-left CSS. PR #2395 by @mohsen-mahmoodi . 0.79.0 \u00b6 Fixes - Breaking Changes \u00b6 \ud83d\udc1b Fix removing body from status codes that do not support it. PR #5145 by @tiangolo . Setting status_code to 204 , 304 , or any code below 200 (1xx) will remove the body from the response. This fixes an error in Uvicorn that otherwise would be thrown: RuntimeError: Response content longer than Content-Length . This removes fastapi.openapi.constants.STATUS_CODES_WITH_NO_BODY , it is replaced by a function in utils. Translations \u00b6 \ud83c\udf10 Start of Hebrew translation. PR #5050 by @itay-raveh . \ud83d\udd27 Add config for Swedish translations notification. PR #5147 by @tiangolo . \ud83c\udf10 Start of Swedish translation. PR #5062 by @MrRawbin . \ud83c\udf10 Add Japanese translation for docs/ja/docs/advanced/index.md . PR #5043 by @wakabame . \ud83c\udf10\ud83c\uddf5\ud83c\uddf1 Add Polish translation for docs/pl/docs/tutorial/first-steps.md . PR #5024 by @Valaraucoo . Internal \u00b6 \ud83d\udd27 Update translations notification for Hebrew. PR #5158 by @tiangolo . \ud83d\udd27 Update Dependabot commit message. PR #5156 by @tiangolo . \u2b06 Bump actions/upload-artifact from 2 to 3. PR #5148 by @dependabot[bot] . \u2b06 Bump actions/cache from 2 to 3. PR #5149 by @dependabot[bot] . \ud83d\udd27 Update sponsors badge configs. PR #5155 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #5154 by @tiangolo . \ud83d\udd27 Update Jina sponsor badges. PR #5151 by @tiangolo . \u2b06 Bump actions/checkout from 2 to 3. PR #5133 by @dependabot[bot] . \u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5030 by @pre-commit-ci[bot] . \u2b06 Bump nwtgck/actions-netlify from 1.1.5 to 1.2.3. PR #5132 by @dependabot[bot] . \u2b06 Bump codecov/codecov-action from 2 to 3. PR #5131 by @dependabot[bot] . \u2b06 Bump dawidd6/action-download-artifact from 2.9.0 to 2.21.1. PR #5130 by @dependabot[bot] . \u2b06 Bump actions/setup-python from 2 to 4. PR #5129 by @dependabot[bot] . \ud83d\udc77 Add Dependabot. PR #5128 by @tiangolo . \u267b\ufe0f Move from Optional[X] to Union[X, None] for internal utils. PR #5124 by @tiangolo . \ud83d\udd27 Update sponsors, remove Dropbase, add Doist. PR #5096 by @tiangolo . \ud83d\udd27 Update sponsors, remove Classiq, add ImgWhale. PR #5079 by @tiangolo . 0.78.0 \u00b6 Features \u00b6 \u2728 Add support for omitting ... as default value when declaring required parameters with: Path() Query() Header() Cookie() Body() Form() File() New docs at Tutorial - Query Parameters and String Validations - Make it required . PR #4906 by @tiangolo . Up to now, declaring a required parameter while adding additional validation or metadata needed using ... (Ellipsis). For example: from fastapi import Cookie , FastAPI , Header , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def main ( item_id : int = Path ( default =... , gt = 0 ), query : str = Query ( default =... , max_length = 10 ), session : str = Cookie ( default =... , min_length = 3 ), x_trace : str = Header ( default =... , title = \"Tracing header\" ), ): return { \"message\" : \"Hello World\" } ...all these parameters are required because the default value is ... (Ellipsis). But now it's possible and supported to just omit the default value, as would be done with Pydantic fields, and the parameters would still be required. \u2728 For example, this is now supported: from fastapi import Cookie , FastAPI , Header , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def main ( item_id : int = Path ( gt = 0 ), query : str = Query ( max_length = 10 ), session : str = Cookie ( min_length = 3 ), x_trace : str = Header ( title = \"Tracing header\" ), ): return { \"message\" : \"Hello World\" } To declare parameters as optional (not required), you can set a default value as always, for example using None : from typing import Union from fastapi import Cookie , FastAPI , Header , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def main ( item_id : int = Path ( gt = 0 ), query : Union [ str , None ] = Query ( default = None , max_length = 10 ), session : Union [ str , None ] = Cookie ( default = None , min_length = 3 ), x_trace : Union [ str , None ] = Header ( default = None , title = \"Tracing header\" ), ): return { \"message\" : \"Hello World\" } Docs \u00b6 \ud83d\udcdd Add docs recommending Union over Optional and migrate source examples. New docs at Python Types Intro - Using Union or Optional . PR #4908 by @tiangolo . \ud83c\udfa8 Fix default value as set in tutorial for Path Operations Advanced Configurations. PR #4899 by @tiangolo . \ud83d\udcdd Add documentation for redefined path operations. PR #4864 by @madkinsz . \ud83d\udcdd Updates links for Celery documentation. PR #4736 by @sammyzord . \u270f Fix example code with sets in tutorial for body nested models. PR #3030 by @hitrust . \u270f Fix links to Pydantic docs. PR #4670 by @kinuax . \ud83d\udcdd Update docs about Swagger UI self-hosting with newer source links. PR #4813 by @Kastakin . \ud83d\udcdd Add link to external article: Building the Poll App From Django Tutorial With FastAPI And React. PR #4778 by @jbrocher . \ud83d\udcdd Add OpenAPI warning to \"Body - Fields\" docs with extra schema extensions. PR #4846 by @ml-evs . Translations \u00b6 \ud83c\udf10 Fix code examples in Japanese translation for docs/ja/docs/tutorial/testing.md . PR #4623 by @hirotoKirimaru . Internal \u00b6 \u267b Refactor dict value extraction to minimize key lookups fastapi/utils.py . PR #3139 by @ShahriyarR . \u2705 Add tests for required nonable parameters and body fields. PR #4907 by @tiangolo . \ud83d\udc77 Fix installing Material for MkDocs Insiders in CI. PR #4897 by @tiangolo . \ud83d\udc77 Add pre-commit CI instead of custom GitHub Action. PR #4896 by @tiangolo . \ud83d\udc77 Add pre-commit GitHub Action workflow. PR #4895 by @tiangolo . \ud83d\udcdd Add dark mode auto switch to docs based on OS preference. PR #4869 by @ComicShrimp . \ud83d\udd25 Remove un-used old pending tests, already covered in other places. PR #4891 by @tiangolo . \ud83d\udd27 Add Python formatting hooks to pre-commit. PR #4890 by @tiangolo . \ud83d\udd27 Add pre-commit with first config and first formatting pass. PR #4888 by @tiangolo . \ud83d\udc77 Disable CI installing Material for MkDocs in forks. PR #4410 by @dolfinus . 0.77.1 \u00b6 Upgrades \u00b6 \u2b06 Upgrade Starlette from 0.19.0 to 0.19.1. PR #4819 by @Kludex . Docs \u00b6 \ud83d\udcdd Add link to german article: REST-API Programmieren mittels Python und dem FastAPI Modul. PR #4624 by @fschuermeyer . \ud83d\udcdd Add external link: PyCharm Guide to FastAPI. PR #4512 by @mukulmantosh . \ud83d\udcdd Add external link to article: Building an API with FastAPI and Supabase and Deploying on Deta. PR #4440 by @aUnicornDev . \u270f Fix small typo in docs/en/docs/tutorial/security/first-steps.md . PR #4515 by @KikoIlievski . Translations \u00b6 \ud83c\udf10 Add Polish translation for docs/pl/docs/tutorial/index.md . PR #4516 by @MKaczkow . \u270f Fix typo in deployment. PR #4629 by @raisulislam541 . \ud83c\udf10 Add Portuguese translation for docs/pt/docs/help-fastapi.md . PR #4583 by @mateusjs . Internal \u00b6 \ud83d\udd27 Add notifications in issue for Uzbek translations. PR #4884 by @tiangolo . 0.77.0 \u00b6 Upgrades \u00b6 \u2b06 Upgrade Starlette from 0.18.0 to 0.19.0. PR #4488 by @Kludex . When creating an explicit JSONResponse the content argument is now required. Docs \u00b6 \ud83d\udcdd Add external link to article: Seamless FastAPI Configuration with ConfZ. PR #4414 by @silvanmelchior . \ud83d\udcdd Add external link to article: 5 Advanced Features of FastAPI You Should Try. PR #4436 by @kaustubhgupta . \u270f Reword to improve legibility of docs about TestClient . PR #4389 by @rgilton . \ud83d\udcdd Add external link to blog post about Kafka, FastAPI, and Ably. PR #4044 by @Ugbot . \u270f Fix typo in docs/en/docs/tutorial/sql-databases.md . PR #4875 by @wpyoga . \u270f Fix typo in docs/en/docs/async.md . PR #4726 by @Prezu . Translations \u00b6 \ud83c\udf10 Update source example highlights for docs/zh/docs/tutorial/query-params-str-validations.md . PR #4237 by @caimaoy . \ud83c\udf10 Remove translation docs references to aiofiles as it's no longer needed since AnyIO. PR #3594 by @alonme . \u270f \ud83c\udf10 Fix typo in Portuguese translation for docs/pt/docs/tutorial/path-params.md . PR #4722 by @CleoMenezesJr . \ud83c\udf10 Fix live docs server for translations for some languages. PR #4729 by @wakabame . \ud83c\udf10 Add Portuguese translation for docs/pt/docs/tutorial/cookie-params.md . PR #4112 by @lbmendes . \ud83c\udf10 Fix French translation for docs/tutorial/body.md . PR #4332 by @Smlep . \ud83c\udf10 Add Japanese translation for docs/ja/docs/advanced/conditional-openapi.md . PR #2631 by @sh0nk . \ud83c\udf10 Fix Japanese translation of docs/ja/docs/tutorial/body.md . PR #3062 by @a-takahashi223 . \ud83c\udf10 Add Portuguese translation for docs/pt/docs/tutorial/background-tasks.md . PR #2170 by @izaguerreiro . \ud83c\udf10 Add Portuguese translation for docs/deployment/deta.md . PR #4442 by @lsglucas . \ud83c\udf10 Add Russian translation for docs/async.md . PR #4036 by @Winand . \ud83c\udf10 Add Portuguese translation for docs/tutorial/body.md . PR #3960 by @leandrodesouzadev . \ud83c\udf10 Add Portuguese translation of tutorial/extra-data-types.md . PR #4077 by @luccasmmg . \ud83c\udf10 Update German translation for docs/features.md . PR #3905 by @jomue . 0.76.0 \u00b6 Upgrades \u00b6 \u2b06 Upgrade Starlette from 0.17.1 to 0.18.0. PR #4483 by @Kludex . Internal \u00b6 \ud83d\udc65 Update FastAPI People. PR #4847 by @github-actions[bot] . \ud83d\udd27 Add Budget Insight sponsor. PR #4824 by @tiangolo . \ud83c\udf71 Update sponsor, ExoFlare badge. PR #4822 by @tiangolo . \ud83d\udd27 Update sponsors, enable Dropbase again, update TalkPython link. PR #4821 by @tiangolo . 0.75.2 \u00b6 This release includes upgrades to third-party packages that handle security issues. Although there's a chance these issues don't affect you in particular, please upgrade as soon as possible. Fixes \u00b6 \u2705 Fix new/recent tests with new fixed ValidationError JSON Schema. PR #4806 by @tiangolo . \ud83d\udc1b Fix JSON Schema for ValidationError at field loc . PR #3810 by @dconathan . \ud83d\udc1b Fix support for prefix on APIRouter WebSockets. PR #2640 by @Kludex . Upgrades \u00b6 \u2b06\ufe0f Update ujson ranges for CVE-2021-45958. PR #4804 by @tiangolo . \u2b06\ufe0f Upgrade dependencies upper range for extras \"all\". PR #4803 by @tiangolo . \u2b06 Upgrade Swagger UI - swagger-ui-dist@4. This handles a security issue in Swagger UI itself where it could be possible to inject HTML into Swagger UI. Please upgrade as soon as you can, in particular if you expose your Swagger UI ( /docs ) publicly to non-expert users. PR #4347 by @RAlanWright . Internal \u00b6 \ud83d\udd27 Update sponsors, add: ExoFlare, Ines Course; remove: Dropbase, Vim.so, Calmcode; update: Striveworks, TalkPython and TestDriven.io. PR #4805 by @tiangolo . \u2b06\ufe0f Upgrade Codecov GitHub Action. PR #4801 by @tiangolo . 0.75.1 \u00b6 Translations \u00b6 \ud83c\udf10 Start Dutch translations. PR #4703 by @tiangolo . \ud83c\udf10 Start Persian/Farsi translations. PR #4243 by @aminalaee . \u270f Reword sentence about handling errors. PR #1993 by @khuhroproeza . Internal \u00b6 \ud83d\udc65 Update FastAPI People. PR #4752 by @github-actions[bot] . \u2796 Temporarily remove typer-cli from dependencies and upgrade Black to unblock Pydantic CI. PR #4754 by @tiangolo . \ud83d\udd27 Add configuration to notify Dutch translations. PR #4702 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #4699 by @github-actions[bot] . \ud83d\udc1b Fix FastAPI People generation to include missing file in commit. PR #4695 by @tiangolo . \ud83d\udd27 Update Classiq sponsor links. PR #4688 by @tiangolo . \ud83d\udd27 Add Classiq sponsor. PR #4671 by @tiangolo . \ud83d\udcdd Add Jina's QA Bot to the docs to help people that want to ask quick questions. PR #4655 by @tiangolo based on original PR #4626 by @hanxiao . 0.75.0 \u00b6 Features \u00b6 \u2728 Add support for custom generate_unique_id_function and docs for generating clients. New docs: Advanced - Generate Clients . PR #4650 by @tiangolo . 0.74.1 \u00b6 Features \u00b6 \u2728 Include route in scope to allow middleware and other tools to extract its information. PR #4603 by @tiangolo . 0.74.0 \u00b6 Breaking Changes \u00b6 \u2728 Update internal AsyncExitStack to fix context for dependencies with yield . PR #4575 by @tiangolo . Dependencies with yield can now catch HTTPException and custom exceptions. For example: async def get_database (): with Session () as session : try : yield session except HTTPException : session . rollback () raise finally : session . close () After the dependency with yield handles the exception (or not) the exception is raised again. So that any exception handlers can catch it, or ultimately the default internal ServerErrorMiddleware . If you depended on exceptions not being received by dependencies with yield , and receiving an exception breaks the code after yield , you can use a block with try and finally : async def do_something (): try : yield something finally : some_cleanup () ...that way the finally block is run regardless of any exception that might happen. Features \u00b6 The same PR #4575 from above also fixes the contextvars context for the code before and after yield . This was the main objective of that PR. This means that now, if you set a value in a context variable before yield , the value would still be available after yield (as you would intuitively expect). And it also means that you can reset the context variable with a token afterwards. For example, this works correctly now: from contextvars import ContextVar from typing import Any , Dict , Optional legacy_request_state_context_var : ContextVar [ Optional [ Dict [ str , Any ]]] = ContextVar ( \"legacy_request_state_context_var\" , default = None ) async def set_up_request_state_dependency (): request_state = { \"user\" : \"deadpond\" } contextvar_token = legacy_request_state_context_var . set ( request_state ) yield request_state legacy_request_state_context_var . reset ( contextvar_token ) ...before this change it would raise an error when resetting the context variable, because the contextvars context was different, because of the way it was implemented. Note : You probably don't need contextvars , and you should probably avoid using them. But they are powerful and useful in some advanced scenarios, for example, migrating from code that used Flask's g semi-global variable. Technical Details : If you want to know more of the technical details you can check out the PR description #4575 . Internal \u00b6 \ud83d\udd27 Add Striveworks sponsor. PR #4596 by @tiangolo . \ud83d\udc9a Only build docs on push when on master to avoid duplicate runs from PRs. PR #4564 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #4502 by @github-actions[bot] . 0.73.0 \u00b6 Features \u00b6 \u2728 Add support for declaring UploadFile parameters without explicit File() . PR #4469 by @tiangolo . New docs: Request Files - File Parameters with UploadFile . \u2728 Add support for tags with Enums. PR #4468 by @tiangolo . New docs: Path Operation Configuration - Tags with Enums . \u2728 Allow hiding from OpenAPI (and Swagger UI) Query , Cookie , Header , and Path parameters. PR #3144 by @astraldawn . New docs: Query Parameters and String Validations - Exclude from OpenAPI . Docs \u00b6 \ud83d\udcdd Tweak and improve docs for Request Files. PR #4470 by @tiangolo . Fixes \u00b6 \ud83d\udc1b Fix bug preventing to use OpenAPI when using tuples. PR #3874 by @victorbenichoux . \ud83d\udc1b Prefer custom encoder over defaults if specified in jsonable_encoder . PR #2061 by @viveksunder . \ud83d\udc9a Duplicate PR to trigger CI. PR #4467 by @tiangolo . Internal \u00b6 \ud83d\udc1b Fix docs dependencies cache, to get the latest Material for MkDocs. PR #4466 by @tiangolo . \ud83d\udd27 Add sponsor Dropbase. PR #4465 by @tiangolo . 0.72.0 \u00b6 Features \u00b6 \u2728 Enable configuring Swagger UI parameters. Original PR #2568 by @jmriebold . Here are the new docs: Configuring Swagger UI . Docs \u00b6 \ud83d\udcdd Update Python Types docs, add missing 3.6 / 3.9 example. PR #4434 by @tiangolo . Translations \u00b6 \ud83c\udf10 Update Chinese translation for docs/help-fastapi.md . PR #3847 by @jaystone776 . \ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md . PR #4195 by @kty4119 . \ud83c\udf10 Add Polish translation for docs/pl/docs/index.md . PR #4245 by @MicroPanda123 . \ud83c\udf10 Add Chinese translation for docs\\tutorial\\path-operation-configuration.md . PR #3312 by @jaystone776 . Internal \u00b6 \ud83d\udd27 Enable MkDocs Material Insiders' content.tabs.link . PR #4399 by @tiangolo . 0.71.0 \u00b6 Features \u00b6 \u2728 Add docs and tests for Python 3.9 and Python 3.10. PR #3712 by @tiangolo . You can start with Python Types Intro , it explains what changes between different Python versions, in Python 3.9 and in Python 3.10. All the FastAPI docs are updated. Each code example in the docs that could use different syntax in Python 3.9 or Python 3.10 now has all the alternatives in tabs. \u2b06\ufe0f Upgrade Starlette to 0.17.1. PR #4145 by @simondale00 . Internal \u00b6 \ud83d\udc65 Update FastAPI People. PR #4354 by @github-actions[bot] . \ud83d\udd27 Add FastAPI Trove Classifier for PyPI as now there's one \ud83e\udd37\ud83d\ude01. PR #4386 by @tiangolo . \u2b06 Upgrade MkDocs Material and configs. PR #4385 by @tiangolo . 0.70.1 \u00b6 There's nothing interesting in this particular FastAPI release. It is mainly to enable/unblock the release of the next version of Pydantic that comes packed with features and improvements. \ud83e\udd29 Fixes \u00b6 \ud83d\udc1b Fix JSON Schema for dataclasses, supporting the fixes in Pydantic 1.9. PR #4272 by @PrettyWood . Translations \u00b6 \ud83c\udf10 Add Korean translation for docs/tutorial/request-forms-and-files.md . PR #3744 by @NinaHwang . \ud83c\udf10 Add Korean translation for docs/tutorial/request-files.md . PR #3743 by @NinaHwang . \ud83c\udf10 Add portuguese translation for docs/tutorial/query-params-str-validations.md . PR #3965 by @leandrodesouzadev . \ud83c\udf10 Add Korean translation for docs/tutorial/response-status-code.md . PR #3742 by @NinaHwang . \ud83c\udf10 Add Korean translation for Tutorial - JSON Compatible Encoder. PR #3152 by @NEONKID . \ud83c\udf10 Add Korean translation for Tutorial - Path Parameters and Numeric Validations. PR #2432 by @hard-coders . \ud83c\udf10 Add Korean translation for docs/ko/docs/deployment/versions.md . PR #4121 by @DevDae . \ud83c\udf10 Fix Korean translation for docs/ko/docs/tutorial/index.md . PR #4193 by @kimjaeyoonn . \ud83d\udd27 Add CryptAPI sponsor. PR #4264 by @tiangolo . \ud83d\udcdd Update docs/tutorial/dependencies/classes-as-dependencies : Add type of query parameters in a description of Classes as dependencies . PR #4015 by @0417taehyun . \ud83c\udf10 Add French translation for Tutorial - First steps. PR #3455 by @Smlep . \ud83c\udf10 Add French translation for docs/tutorial/path-params.md . PR #3548 by @Smlep . \ud83c\udf10 Add French translation for docs/tutorial/query-params.md . PR #3556 by @Smlep . \ud83c\udf10 Add Turkish translation for docs/python-types.md . PR #3926 by @BilalAlpaslan . Internal \u00b6 \ud83d\udc65 Update FastAPI People. PR #4274 by @github-actions[bot] . 0.70.0 \u00b6 This release just upgrades Starlette to the latest version, 0.16.0 , which includes several bug fixes and some small breaking changes. These last three consecutive releases are independent so that you can migrate gradually : First to FastAPI 0.68.2 , with no breaking changes, but upgrading all the sub-dependencies. Next to FastAPI 0.69.0 , which upgrades Starlette to 0.15.0 , with AnyIO support, and a higher chance of having breaking changes in your code. Finally to FastAPI 0.70.0 , just upgrading Starlette to the latest version 0.16.0 with additional bug fixes. This way, in case there was a breaking change for your code in one of the releases, you can still benefit from the previous upgrades. \u2728 Breaking Changes - Upgrade \u00b6 \u2b06\ufe0f Upgrade Starlette to 0.16.0. PR #4016 by @tiangolo . Also upgrades the ranges of optional dependencies: \"jinja2 >=2.11.2,<4.0.0\" \"itsdangerous >=1.1.0,<3.0.0\" 0.69.0 \u00b6 Breaking Changes - Upgrade \u00b6 This release adds support for Trio . \u2728 It upgrades the version of Starlette to 0.15.0 , now based on AnyIO , and the internal async components in FastAPI are now based on AnyIO as well, making it compatible with both asyncio and Trio . You can read the docs about running FastAPI with Trio using Hypercorn . This release also removes graphene as an optional dependency for GraphQL. If you need to work with GraphQL, the recommended library now is Strawberry . You can read the new FastAPI with GraphQL docs . Features \u00b6 \u2728 Add support for Trio via AnyIO, upgrading Starlette to 0.15.0 . PR #3372 by @graingert . \u2796 Remove graphene as an optional dependency. PR #4007 by @tiangolo . Docs \u00b6 \ud83d\udcdd Add docs for using Trio with Hypercorn. PR #4014 by @tiangolo . \u270f Fix typos in Deployment Guide. PR #3975 by @ghandic . \ud83d\udcdd Update docs with pip install calls when using extras with brackets, use quotes for compatibility with Zsh. PR #3131 by @tomwei7 . \ud83d\udcdd Add external link to article: Deploying ML Models as API Using FastAPI and Heroku. PR #3904 by @kaustubhgupta . \u270f Fix typo in file paths in docs/en/docs/contributing.md . PR #3752 by @NinaHwang . \u270f Fix a typo in docs/en/docs/advanced/path-operation-advanced-configuration.md and docs/en/docs/release-notes.md . PR #3750 by @saintmalik . \u270f\ufe0f Add a missing comma in the security tutorial. PR #3564 by @jalvaradosegura . \u270f Fix typo in docs/en/docs/help-fastapi.md . PR #3760 by @jaystone776 . \u270f Fix typo about file path in docs/en/docs/tutorial/bigger-applications.md . PR #3285 by @HolyDorus . \u270f Re-word to clarify test client in docs/en/docs/tutorial/testing.md . PR #3382 by @Bharat123rox . \ud83d\udcdd Fix incorrect highlighted code. PR #3325 by @paxcodes . \ud83d\udcdd Add external link to article: How-to deploy FastAPI app to Heroku. PR #3241 by @Jarmos-san . \u270f Fix typo (mistranslation) in docs/en/docs/advanced/templates.md . PR #3211 by @oerpli . \ud83d\udcdd Remove note about (now supported) feature from Swagger UI in docs/en/docs/tutorial/request-files.md . PR #2803 by @gsganden . \u270f Fix typo re-word in docs/tutorial/handling-errors.md . PR #2700 by @graue70 . Translations \u00b6 \ud83c\udf10 Initialize Azerbaijani translations. PR #3941 by @madatbay . \ud83c\udf10 Add Turkish translation for docs/fastapi-people.md . PR #3848 by @BilalAlpaslan . Internal \u00b6 \ud83d\udcdd Add supported Python versions badge. PR #2794 by @hramezani . \u270f Fix link in Japanese docs for docs/ja/docs/deployment/docker.md . PR #3245 by @utamori . \ud83d\udd27 Correct DeprecationWarning config and comment in pytest settings. PR #4008 by @graingert . \ud83d\udd27 Swap light/dark theme button icon. PR #3246 by @eddsalkield . \ud83d\udd27 Lint only in Python 3.7 and above. PR #4006 by @tiangolo . \ud83d\udd27 Add GitHub Action notify-translations config for Azerbaijani. PR #3995 by @tiangolo . 0.68.2 \u00b6 This release has no breaking changes . \ud83c\udf89 It upgrades the version ranges of sub-dependencies to allow applications using FastAPI to easily upgrade them. Soon there will be a new FastAPI release upgrading Starlette to take advantage of recent improvements, but as that has a higher chance of having breaking changes, it will be in a separate release. Features \u00b6 \u2b06Increase supported version of aiofiles to suppress warnings. PR #2899 by @SnkSynthesis . \u2796 Do not require backports in Python >= 3.7. PR #1880 by @FFY00 . \u2b06 Upgrade required Python version to >= 3.6.1, needed by typing.Deque, used by Pydantic. PR #2733 by @hukkin . \u2b06\ufe0f Bump Uvicorn max range to 0.15.0. PR #3345 by @Kludex . Docs \u00b6 \ud83d\udcdd Update GraphQL docs, recommend Strawberry. PR #3981 by @tiangolo . \ud83d\udcdd Re-write and extend Deployment guide: Concepts, Uvicorn, Gunicorn, Docker, Containers, Kubernetes. PR #3974 by @tiangolo . \ud83d\udcdd Upgrade HTTPS guide with more explanations and diagrams. PR #3950 by @tiangolo . Translations \u00b6 \ud83c\udf10 Add Turkish translation for docs/features.md . PR #1950 by @ycd . \ud83c\udf10 Add Turkish translation for docs/benchmarks.md . PR #2729 by @Telomeraz . \ud83c\udf10 Add Turkish translation for docs/index.md . PR #1908 by @ycd . \ud83c\udf10 Add French translation for docs/tutorial/body.md . PR #3671 by @Smlep . \ud83c\udf10 Add French translation for deployment/docker.md . PR #3694 by @rjNemo . \ud83c\udf10 Add Portuguese translation for docs/tutorial/path-params.md . PR #3664 by @FelipeSilva93 . \ud83c\udf10 Add Portuguese translation for docs/deployment/https.md . PR #3754 by @lsglucas . \ud83c\udf10 Add German translation for docs/features.md . PR #3699 by @mawassk . Internal \u00b6 \u2728 Update GitHub Action: notify-translations, to avoid a race conditions. PR #3989 by @tiangolo . \u2b06\ufe0f Upgrade development autoflake , supporting multi-line imports. PR #3988 by @tiangolo . \u2b06\ufe0f Increase dependency ranges for tests and docs: pytest-cov, pytest-asyncio, black, httpx, sqlalchemy, databases, mkdocs-markdownextradata-plugin. PR #3987 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #3986 by @github-actions[bot] . \ud83d\udc9a Fix badges in README and main page. PR #3979 by @ghandic . \u2b06 Upgrade internal testing dependencies: mypy to version 0.910, add newly needed type packages. PR #3350 by @ArcLightSlavik . \u2728 Add Deepset Sponsorship. PR #3976 by @tiangolo . \ud83c\udfa8 Tweak CSS styles for shell animations. PR #3888 by @tiangolo . \ud83d\udd27 Add new Sponsor Calmcode.io. PR #3777 by @tiangolo . 0.68.1 \u00b6 \u2728 Add support for read_with_orm_mode , to support SQLModel relationship attributes. PR #3757 by @tiangolo . Translations \u00b6 \ud83c\udf10 Add Portuguese translation of docs/fastapi-people.md . PR #3461 by @ComicShrimp . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md . PR #3492 by @jaystone776 . \ud83d\udd27 Add new Translation tracking issues for German and Indonesian. PR #3718 by @tiangolo . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/sub-dependencies.md . PR #3491 by @jaystone776 . \ud83c\udf10 Add Portuguese translation for docs/advanced/index.md . PR #3460 by @ComicShrimp . \ud83c\udf10 Portuguese translation of docs/async.md . PR #1330 by @Serrones . \ud83c\udf10 Add French translation for docs/async.md . PR #3416 by @Smlep . Internal \u00b6 \u2728 Add GitHub Action: Notify Translations. PR #3715 by @tiangolo . \u2728 Update computation of FastAPI People and sponsors. PR #3714 by @tiangolo . \u2728 Enable recent Material for MkDocs Insiders features. PR #3710 by @tiangolo . \ud83d\udd25 Remove/clean extra imports from examples in docs for features. PR #3709 by @tiangolo . \u2795 Update docs library to include sources in Markdown. PR #3648 by @tiangolo . \u2b06 Enable tests for Python 3.9. PR #2298 by @Kludex . \ud83d\udc65 Update FastAPI People. PR #3642 by @github-actions[bot] . 0.68.0 \u00b6 Features \u00b6 \u2728 Add support for extensions and updates to the OpenAPI schema in each path operation . New docs: FastAPI Path Operation Advanced Configuration - OpenAPI Extra . Initial PR #1922 by @edouardlp . \u2728 Add additional OpenAPI metadata parameters to FastAPI class, shown on the automatic API docs UI. New docs: Metadata and Docs URLs . Initial PR #1812 by @dkreeft . \u2728 Add description parameter to all the security scheme classes, e.g. APIKeyQuery(name=\"key\", description=\"A very cool API key\") . PR #1757 by @hylkepostma . \u2728 Update OpenAPI models, supporting recursive models and extensions. PR #3628 by @tiangolo . \u2728 Import and re-export data structures from Starlette, used by Request properties, on fastapi.datastructures . Initial PR #1872 by @jamescurtin . Docs \u00b6 \ud83d\udcdd Update docs about async and response-model with more gender neutral language. PR #1869 by @Edward-Knight . Translations \u00b6 \ud83c\udf10 Add Russian translation for docs/python-types.md . PR #3039 by @dukkee . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/index.md . PR #3489 by @jaystone776 . \ud83c\udf10 Add Russian translation for docs/external-links.md . PR #3036 by @dukkee . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/global-dependencies.md . PR #3493 by @jaystone776 . \ud83c\udf10 Add Portuguese translation for docs/deployment/versions.md . PR #3618 by @lsglucas . \ud83c\udf10 Add Japanese translation for docs/tutorial/security/oauth2-jwt.md . PR #3526 by @sattosan . Internal \u00b6 \u2705 Add the docs_src directory to test coverage and update tests. Initial PR #1904 by @Kludex . \ud83d\udd27 Add new GitHub templates with forms for new issues. PR #3612 by @tiangolo . \ud83d\udcdd Add official FastAPI Twitter to docs: @fastapi . PR #3578 by @tiangolo . 0.67.0 \u00b6 Features \u00b6 \u2728 Add support for dataclasses in request bodies and response_model . New documentation: Advanced User Guide - Using Dataclasses . PR #3577 by @tiangolo . \u2728 Support dataclasses in responses. PR #3576 by @tiangolo , continuation from initial PR #2722 by @amitlissack . Docs \u00b6 \ud83d\udcdd Add external link: How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI. PR #2839 by @aitoehigie . \u270f Fix code highlighted line in: body-nested-models.md . PR #3463 by @jaystone776 . \u270f Fix typo in body-nested-models.md . PR #3462 by @jaystone776 . \u270f Fix typo \"might me\" -> \"might be\" in docs/en/docs/tutorial/schema-extra-example.md . PR #3362 by @dbrakman . \ud83d\udcdd Add external link: Building simple E-Commerce with NuxtJS and FastAPI. PR #3271 by @ShahriyarR . \ud83d\udcdd Add external link: Serve a machine learning model using Sklearn, FastAPI and Docker. PR #2974 by @rodrigo-arenas . \u270f\ufe0f Fix typo on docstring in datastructures file. PR #2887 by @Kludex . \ud83d\udcdd Add External Link: Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server. PR #3572 by @tiangolo . \ud83d\udcdd Add External Link, replaces #1898. PR #3571 by @tiangolo . Internal \u00b6 \ud83c\udfa8 Improve style for sponsors, add radius border. PR #2388 by @Kludex . \ud83d\udc77 Update GitHub Action latest-changes. PR #3574 by @tiangolo . \ud83d\udc77 Update GitHub Action latest-changes. PR #3573 by @tiangolo . \ud83d\udc77 Rename and clarify CI workflow job names. PR #3570 by @tiangolo . \ud83d\udc77 Update GitHub Action latest-changes, strike 2 \u26be. PR #3575 by @tiangolo . \ud83d\udd27 Sort external links in docs to have the most recent at the top. PR #3568 by @tiangolo . 0.66.1 \u00b6 Translations \u00b6 \ud83c\udf10 Add basic setup for German translations. PR #3522 by @0x4Dark . \ud83c\udf10 Add Portuguese translation for docs/tutorial/security/index.md . PR #3507 by @oandersonmagalhaes . \ud83c\udf10 Add Portuguese translation for docs/deployment/index.md . PR #3337 by @lsglucas . Internal \u00b6 \ud83d\udd27 Configure strict pytest options and update/refactor tests. Upgrade pytest to >=6.2.4,<7.0.0 and pytest-cov to >=2.12.0,<3.0.0 . Initial PR #2790 by @graingert . \u2b06\ufe0f Upgrade python-jose dependency to >=3.3.0,<4.0.0 for tests. PR #3468 by @tiangolo . 0.66.0 \u00b6 Features \u00b6 \u2728 Allow setting the response_class to RedirectResponse or FileResponse and returning the URL from the function. New and updated docs are in the tutorial section Custom Response - HTML, Stream, File, others , in RedirectResponse and in FileResponse . PR #3457 by @tiangolo . Fixes \u00b6 \ud83d\udc1b Fix include/exclude for dicts in jsonable_encoder . PR #2016 by @Rubikoid . \ud83d\udc1b Support custom OpenAPI / JSON Schema fields in the generated output OpenAPI. PR #1429 by @jmagnusson . Translations \u00b6 \ud83c\udf10 Add Spanish translation for tutorial/query-params.md . PR #2243 by @mariacamilagl . \ud83c\udf10 Add Spanish translation for advanced/response-directly.md . PR #1253 by @jfunez . \ud83c\udf10 Add Spanish translation for advanced/additional-status-codes.md . PR #1252 by @jfunez . \ud83c\udf10 Add Spanish translation for advanced/path-operation-advanced-configuration.md . PR #1251 by @jfunez . 0.65.3 \u00b6 Fixes \u00b6 \u267b Assume request bodies contain JSON when no Content-Type header is provided. This fixes a breaking change introduced by 0.65.2 with PR #2118 . It should allow upgrading FastAPI applications with clients that send JSON data without a Content-Type header. And there's still protection against CSRFs. PR #3456 by @tiangolo . Translations \u00b6 \ud83c\udf10 Initialize Indonesian translations. PR #3014 by @pace-noge . \ud83c\udf10 Add Spanish translation of Tutorial - Path Parameters. PR #2219 by @mariacamilagl . \ud83c\udf10 Add Spanish translation of Tutorial - First Steps. PR #2208 by @mariacamilagl . \ud83c\udf10 Portuguese translation of Tutorial - Body - Fields. PR #3420 by @ComicShrimp . \ud83c\udf10 Add Chinese translation for Tutorial - Request - Forms - and - Files. PR #3249 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Handling - Errors. PR #3299 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Form - Data. PR #3248 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Body - Updates. PR #3237 by @jaystone776 . \ud83c\udf10 Add Chinese translation for FastAPI People. PR #3112 by @hareru . \ud83c\udf10 Add French translation for Project Generation. PR #3197 by @Smlep . \ud83c\udf10 Add French translation for Python Types Intro. PR #3185 by @Smlep . \ud83c\udf10 Add French translation for External Links. PR #3103 by @Smlep . \ud83c\udf10 Add French translation for Alternatives, Inspiration and Comparisons. PR #3020 by @rjNemo . \ud83c\udf10 Fix Chinese translation code snippet mismatch in Tutorial - Python Types Intro. PR #2573 by @BoYanZh . \ud83c\udf10 Add Portuguese translation for Development Contributing. PR #1364 by @Serrones . \ud83c\udf10 Add Chinese translation for Tutorial - Request - Files. PR #3244 by @jaystone776 . Internal \u00b6 \ud83d\udc65 Update FastAPI People. PR #3450 by @github-actions[bot] . \ud83d\udc65 Update FastAPI People. PR #3319 by @github-actions[bot] . \u2b06 Upgrade docs development dependency on typer-cli to >=0.0.12 to fix conflicts. PR #3429 by @tiangolo . 0.65.2 \u00b6 Security fixes \u00b6 \ud83d\udd12 Check Content-Type request header before assuming JSON. Initial PR #2118 by @patrickkwang . This change fixes a CSRF security vulnerability when using cookies for authentication in path operations with JSON payloads sent by browsers. In versions lower than 0.65.2 , FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json ). So, a request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. But requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests . So, the browser would execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. See CVE-2021-32677 for more details. Thanks to Dima Boger for the security report! \ud83d\ude47\ud83d\udd12 Internal \u00b6 \ud83d\udd27 Update sponsors badge, course bundle. PR #3340 by @tiangolo . \ud83d\udd27 Add new gold sponsor Jina \ud83c\udf89. PR #3291 by @tiangolo . \ud83d\udd27 Add new banner sponsor badge for FastAPI courses bundle. PR #3288 by @tiangolo . \ud83d\udc77 Upgrade Issue Manager GitHub Action. PR #3236 by @tiangolo . 0.65.1 \u00b6 Security fixes \u00b6 \ud83d\udccc Upgrade pydantic pin, to handle security vulnerability CVE-2021-29510 . PR #3213 by @tiangolo . 0.65.0 \u00b6 Breaking Changes - Upgrade \u00b6 \u2b06\ufe0f Upgrade Starlette to 0.14.2 , including internal UJSONResponse migrated from Starlette. This includes several bug fixes and features from Starlette. PR #2335 by @hanneskuettner . Translations \u00b6 \ud83c\udf10 Initialize new language Polish for translations. PR #3170 by @neternefer . Internal \u00b6 \ud83d\udc77 Add GitHub Action cache to speed up CI installs. PR #3204 by @tiangolo . \u2b06\ufe0f Upgrade setup-python GitHub Action to v2. PR #3203 by @tiangolo . \ud83d\udc1b Fix docs script to generate a new translation language with overrides boilerplate. PR #3202 by @tiangolo . \u2728 Add new Deta banner badge with new sponsorship tier \ud83d\ude47. PR #3194 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #3189 by @github-actions[bot] . \ud83d\udd0a Update FastAPI People to allow better debugging. PR #3188 by @tiangolo . 0.64.0 \u00b6 Features \u00b6 \u2728 Add support for adding multiple examples in request bodies and path, query, cookie, and header params. New docs: Declare Request Example Data . Initial PR #1267 by @austinorr . Fixes \u00b6 \ud83d\udccc Pin SQLAlchemy range for tests, as it doesn't use SemVer. PR #3001 by @tiangolo . \ud83c\udfa8 Add newly required type annotations for mypy. PR #2882 by @tiangolo . \ud83c\udfa8 Remove internal \"type: ignore\", now unnecessary. PR #2424 by @AsakuraMizu . Docs \u00b6 \ud83d\udcdd Add link to article in Russian \"FastAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c\". PR #2564 by @trkohler . \ud83d\udcdd Add external link to blog post \"Authenticate Your FastAPI App with Auth0\". PR #2172 by @dompatmore . \ud83d\udcdd Fix broken link to article: Machine learning model serving in Python using FastAPI and Streamlit. PR #2557 by @davidefiocco . \ud83d\udcdd Add FastAPI Medium Article: Deploy a dockerized FastAPI application to AWS. PR #2515 by @vjanz . \u270f Fix typo in Tutorial - Handling Errors. PR #2486 by @johnthagen . \u270f Fix typo in Security OAuth2 scopes. PR #2407 by @jugmac00 . \u270f Fix typo/clarify docs for SQL (Relational) Databases. PR #2393 by @kangni . \ud83d\udcdd Add external link to \"FastAPI for Flask Users\". PR #2280 by @amitness . Translations \u00b6 \ud83c\udf10 Fix Chinese translation of Tutorial - Query Parameters, remove obsolete content. PR #3051 by @louis70109 . \ud83c\udf10 Add French translation for Tutorial - Background Tasks. PR #3098 by @Smlep . \ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md. PR #3159 by @SueNaEunYang . \ud83c\udf10 Add Korean translation for Tutorial - Query Parameters. PR #2390 by @hard-coders . \ud83c\udf10 Add French translation for FastAPI People. PR #2232 by @JulianMaurin . \ud83c\udf10 Add Korean translation for Tutorial - Path Parameters. PR #2355 by @hard-coders . \ud83c\udf10 Add French translation for Features. PR #2157 by @Jefidev . \ud83d\udc65 Update FastAPI People. PR #3031 by @github-actions[bot] . \ud83c\udf10 Add Chinese translation for Tutorial - Debugging. PR #2737 by @blt232018 . \ud83c\udf10 Add Chinese translation for Tutorial - Security - OAuth2 with Password (and hashing), Bearer with JWT tokens. PR #2642 by @waynerv . \ud83c\udf10 Add Korean translation for Tutorial - Header Parameters. PR #2589 by @mode9 . \ud83c\udf10 Add Chinese translation for Tutorial - Metadata and Docs URLs. PR #2559 by @blt232018 . \ud83c\udf10 Add Korean translation for Tutorial - First Steps. PR #2323 by @hard-coders . \ud83c\udf10 Add Chinese translation for Tutorial - CORS (Cross-Origin Resource Sharing). PR #2540 by @blt232018 . \ud83c\udf10 Add Chinese translation for Tutorial - Middleware. PR #2334 by @lpdswing . \ud83c\udf10 Add Korean translation for Tutorial - Intro. PR #2317 by @hard-coders . \ud83c\udf10 Add Chinese translation for Tutorial - Bigger Applications - Multiple Files. PR #2453 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Security Intro. PR #2443 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Header Parameters. PR #2412 by @maoyibo . \ud83c\udf10 Add Chinese translation for Tutorial - Extra Data Types. PR #2410 by @maoyibo . \ud83c\udf10 Add Japanese translation for Deployment - Docker. PR #2312 by @tokusumi . \ud83c\udf10 Add Japanese translation for Deployment - Versions. PR #2310 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Cookie Parameters. PR #2261 by @alicrazy1947 . \ud83c\udf10 Add Japanese translation for Tutorial - Static files. PR #2260 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Testing. PR #2259 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Debugging. PR #2256 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Middleware. PR #2255 by @tokusumi . \ud83c\udf10 Add Japanese translation for Concurrency and async / await. PR #2058 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Simple OAuth2 with Password and Bearer. PR #2514 by @waynerv . \ud83c\udf10 Add Japanese translation for Deployment - Deta. PR #2314 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Get Current User. PR #2474 by @waynerv . \ud83c\udf10 Add Japanese translation for Deployment - Manually. PR #2313 by @tokusumi . \ud83c\udf10 Add Japanese translation for Deployment - Intro. PR #2309 by @tokusumi . \ud83c\udf10 Add Japanese translation for FastAPI People. PR #2254 by @tokusumi . \ud83c\udf10 Add Japanese translation for Advanced - Path Operation Advanced Configuration. PR #2124 by @Attsun1031 . \ud83c\udf10 Add Japanese translation for External Links. PR #2070 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Body - Updates. PR #1956 by @SwftAlpc . \ud83c\udf10 Add Japanese translation for Tutorial - Form Data. PR #1943 by @SwftAlpc . \ud83c\udf10 Add Japanese translation for Tutorial - Cookie Parameters. PR #1933 by @SwftAlpc . Internal \u00b6 \ud83d\udd27 Update top banner, point to newsletter. PR #3003 by @tiangolo . \ud83d\udd27 Disable sponsor WeTransfer. PR #3002 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2880 by @github-actions[bot] . \ud83d\udc65 Update FastAPI People. PR #2739 by @github-actions[bot] . \ud83d\udd27 Add new Gold Sponsor Talk Python \ud83c\udf89. PR #2673 by @tiangolo . \ud83d\udd27 Add new Gold Sponsor vim.so \ud83c\udf89. PR #2669 by @tiangolo . \ud83d\udd27 Add FastAPI user survey banner. PR #2623 by @tiangolo . \ud83d\udd27 Add new Bronze Sponsor(s) \ud83e\udd49\ud83c\udf89. PR #2622 by @tiangolo . \ud83d\udcdd Update social links: add Discord, fix GitHub. PR #2621 by @tiangolo . \ud83d\udd27 Update FastAPI People GitHub Sponsors order. PR #2620 by @tiangolo . \ud83d\udd27 Update InvestSuite sponsor data. PR #2608 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2590 by @github-actions[bot] . 0.63.0 \u00b6 Features \u00b6 \u2728 Improve type annotations, add support for mypy --strict, internally and for external packages. PR #2547 by @tiangolo . Breaking changes \u00b6 \u2b06\ufe0f Upgrade Uvicorn when installing fastapi[all] to the latest version including uvloop , the new range is uvicorn[standard] >=0.12.0,<0.14.0 . PR #2548 by @tiangolo . Fixes \u00b6 \ud83d\udc1b PR #2547 (read above) also fixes some false-positive mypy errors with callbacks parameters and when using the OAuth2 class. Docs \u00b6 \ud83d\udcdd Update Uvicorn installation instructions to use uvicorn[standard] (includes uvloop). PR #2543 by @tiangolo . \ud83d\udcdd Update title for Deta tutorial. PR #2466 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2454 by @github-actions[bot] . Translations \u00b6 \ud83c\udf10 Add docs lang selector widget. PR #2542 by @tiangolo . \ud83c\udf10 Add Chinese translation for Tutorial - Response Status Code. PR #2442 by @waynerv . \ud83c\udf10 Start translation of the documentation for the Albanian language. PR #2516 by @vjanz . \ud83c\udf10 Add Chinese translation for Tutorial - Extra Models. PR #2416 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Response Model. PR #2414 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Schema Extra Example. PR #2411 by @maoyibo . \ud83c\udf10 Add Korean translation for Index. PR #2192 by @hard-coders . \ud83c\udf10 Add Japanese translation for Advanced User Guide - Additional Status Codes. PR #2145 by @Attsun1031 . Internal \u00b6 \ud83d\udc1b Fix docs overrides directory for translations. PR #2541 by @tiangolo . \u2796 Remove Typer as a docs building dependency (covered by typer-cli) to fix pip resolver conflicts. PR #2539 by @tiangolo . \u2728 Add newsletter: FastAPI and friends. PR #2509 by @tiangolo . \u2728 Add new Gold Sponsor: InvestSuite \ud83c\udf89. PR #2508 by @tiangolo . \ud83d\udd27 Add issue template configs. PR #2476 by @tiangolo . 0.62.0 \u00b6 Features \u00b6 \u2728 Add support for shared/top-level parameters (dependencies, tags, etc). PR #2434 by @tiangolo . Up to now, for several options, the only way to apply them to a group of path operations was in include_router . That works well, but the call to app.include_router() or router.include_router() is normally done in another file. That means that, for example, to apply authentication to all the path operations in a router it would end up being done in a different file, instead of keeping related logic together. Setting options in include_router still makes sense in some cases, for example, to override or increase configurations from a third party router included in an app. But in a router that is part of a bigger application, it would probably make more sense to add those settings when creating the APIRouter . In FastAPI This allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and include_router . dependencies : to include \u2728 top-level dependencies \u2728 that apply to the whole application. E.g. to add global authentication. callbacks : OpenAPI callbacks that apply to all the path operations . deprecated : to mark all the path operations as deprecated. \ud83e\udd37 include_in_schema : to allow excluding all the path operations from the OpenAPI schema. responses : OpenAPI responses that apply to all the path operations . For example: from fastapi import FastAPI , Depends async def some_dependency (): return app = FastAPI ( dependencies = [ Depends ( some_dependency )]) In APIRouter This allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and include_router . For example, it's not needed to set it explicitly when creating callbacks . dependencies : to include \u2728 router-level dependencies \u2728 that apply to all the path operations in a router. Up to now, this was only possible with include_router . callbacks : OpenAPI callbacks that apply to all the path operations in this router. deprecated : to mark all the path operations in a router as deprecated. include_in_schema : to allow excluding all the path operations in a router from the OpenAPI schema. responses : OpenAPI responses that apply to all the path operations in a router. prefix : to set the path prefix for a router. Up to now, this was only possible when calling include_router . tags : OpenAPI tags to apply to all the path operations in this router. For example: from fastapi import APIRouter , Depends async def some_dependency (): return router = APIRouter ( prefix = \"/users\" , dependencies = [ Depends ( some_dependency )]) In include_router Most of these settings are now supported in APIRouter , which normally lives closer to the related code, so it is recommended to use APIRouter when possible. But include_router is still useful to, for example, adding options (like dependencies , prefix , and tags ) when including a third party router, or a generic router that is shared between several projects. This PR allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and FastAPI . deprecated : to mark all the path operations in a router as deprecated in OpenAPI. include_in_schema : to allow disabling all the path operations from showing in the OpenAPI schema. callbacks : OpenAPI callbacks that apply to all the path operations in this router. Note: all the previous parameters are still there, so it's still possible to declare dependencies in include_router . Breaking Changes \u00b6 PR #2434 includes several improvements that shouldn't affect normal use cases, but could affect in advanced scenarios: If you are testing the generated OpenAPI (you shouldn't, FastAPI already tests it extensively for you): the order for tags in include_router and path operations was updated for consistency, but it's a simple order change. If you have advanced custom logic to access each route's route.response_class , or the router.default_response_class , or the app.default_response_class : the default value for response_class in APIRoute and for default_response_class in APIRouter and FastAPI is now a DefaultPlaceholder used internally to handle and solve default values and overrides. The actual response class inside the DefaultPlaceholder is available at route.response_class.value . Docs \u00b6 PR #2434 (above) includes new or updated docs: Advanced User Guide - OpenAPI Callbacks . Tutorial - Bigger Applications . Tutorial - Dependencies - Dependencies in path operation decorators . Tutorial - Dependencies - Global Dependencies . \ud83d\udcdd Add FastAPI monitoring blog post to External Links. PR #2324 by @louisguitton . \u270f\ufe0f Fix typo in Deta tutorial. PR #2320 by @tiangolo . \u2728 Add Discord chat. PR #2322 by @tiangolo . \ud83d\udcdd Fix image links for sponsors. PR #2304 by @tiangolo . Translations \u00b6 \ud83c\udf10 Add Japanese translation for Advanced - Custom Response. PR #2193 by @Attsun1031 . \ud83c\udf10 Add Chinese translation for Benchmarks. PR #2119 by @spaceack . \ud83c\udf10 Add Chinese translation for Tutorial - Body - Nested Models. PR #1609 by @waynerv . \ud83c\udf10 Add Chinese translation for Advanced - Custom Response. PR #1459 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Return a Response Directly. PR #1452 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Additional Status Codes. PR #1451 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Path Operation Advanced Configuration. PR #1447 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced User Guide - Intro. PR #1445 by @RunningIkkyu . Internal \u00b6 \ud83d\udd27 Update TestDriven link to course in sponsors section. PR #2435 by @tiangolo . \ud83c\udf71 Update sponsor logos. PR #2418 by @tiangolo . \ud83d\udc9a Fix disabling install of Material for MkDocs Insiders in forks, strike 1 \u26be. PR #2340 by @tiangolo . \ud83d\udc1b Fix disabling Material for MkDocs Insiders install in forks. PR #2339 by @tiangolo . \u2728 Add silver sponsor WeTransfer. PR #2338 by @tiangolo . \u2728 Set up and enable Material for MkDocs Insiders for the docs. PR #2325 by @tiangolo . 0.61.2 \u00b6 Fixes \u00b6 \ud83d\udccc Relax Swagger UI version pin. PR #2089 by @jmriebold . \ud83d\udc1b Fix bug overriding custom HTTPException and RequestValidationError from exception_handlers. PR #1924 by @uriyyo . \u270f\ufe0f Fix typo on dependencies utils and cleanup unused variable. PR #1912 by @Kludex . Docs \u00b6 \u270f\ufe0f Fix typo in Tutorial - Path Parameters. PR #2231 by @mariacamilagl . \u270f Fix a stylistic error in docs. PR #2206 by @ddobrinskiy . \u270f Fix capitalizaiton typo in docs. PR #2204 by @imba-tjd . \u270f Fix typo in docs. PR #2179 by @ammarasmro . \ud83d\udcdd Update/fix links in docs to use HTTPS. PR #2165 by @imba-tjd . \u270f Fix typos and add rewording in docs. PR #2159 by @nukopy . \ud83d\udcdd Fix code consistency in examples for Tutorial - User Guide - Path Parameters. PR #2158 by @nukopy . \ud83d\udcdd Fix renamed parameter content_type typo. PR #2135 by @TeoZosa . \u270f Fix minor typos in docs. PR #2122 by @TeoZosa . \u270f Fix typos in docs and source examples. PR #2102 by @AdrianDeAnda . \u270f Fix incorrect Celery URLs in docs. PR #2100 by @CircleOnCircles . \ud83d\udcdd Simplify intro to Python Types, all currently supported Python versions include type hints \ud83c\udf89. PR #2085 by @ninjaaron . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 3. PR #2054 by @hitrust . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 2. PR #2053 by @hitrust . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models. PR #2052 by @hitrust . \u270f Fix typo in Benchmarks. PR #1995 by @AlejoAsd . \ud83d\udcdd Add note in CORS tutorial about allow_origins with [\"*\"] and allow_credentials. PR #1895 by @dsmurrell . \ud83d\udcdd Add deployment to Deta, the first gold sponsor \ud83c\udf89. PR #2303 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2282 by @github-actions[bot] . \u270f\ufe0f Fix uppercase in Tutorial - Query parameters. PR #2245 by @mariacamilagl . \ud83d\udcdd Add articles to External Links. PR #2247 by @tiangolo . \u270f Fix typo in Spanish tutorial index. PR #2020 by @aviloncho . Translations \u00b6 \ud83c\udf10 Add Japanese translation for Advanced Tutorial - Response Directly. PR #2191 by @Attsun1031 . \ud83d\udcdd Add Japanese translation for Tutorial - Security - First Steps. PR #2153 by @komtaki . \ud83c\udf10 Add Japanese translation for Tutorial - Query Parameters and String Validations. PR #1901 by @SwftAlpc . \ud83c\udf10 Add Portuguese translation for External Links. PR #1443 by @Serrones . \ud83c\udf10 Add Japanese translation for Tutorial - CORS. PR #2125 by @tokusumi . \ud83c\udf10 Add Japanese translation for Contributing. PR #2067 by @komtaki . \ud83c\udf10 Add Japanese translation for Project Generation. PR #2050 by @tokusumi . \ud83c\udf10 Add Japanese translation for Alternatives. PR #2043 by @Attsun1031 . \ud83c\udf10 Add Japanese translation for History Design and Future. PR #2002 by @komtaki . \ud83c\udf10 Add Japanese translation for Benchmarks. PR #1992 by @komtaki . \ud83c\udf10 Add Japanese translation for Tutorial - Header Parameters. PR #1935 by @SwftAlpc . \ud83c\udf10 Add Portuguese translation for Tutorial - First Steps. PR #1861 by @jessicapaz . \ud83c\udf10 Add Portuguese translation for Python Types. PR #1796 by @izaguerreiro . \ud83c\udf10 Add Japanese translation for Help FastAPI. PR #1692 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Body. PR #1683 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Query Params. PR #1674 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/path-params.md. PR #1671 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/first-steps.md. PR #1658 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/index.md. PR #1656 by @tokusumi . \ud83c\udf10 Add translation to Portuguese for Project Generation. PR #1602 by @Serrones . \ud83c\udf10 Add Japanese translation for Features. PR #1625 by @tokusumi . \ud83c\udf10 Initialize new language Korean for translations. PR #2018 by @hard-coders . \ud83c\udf10 Add Portuguese translation of Deployment. PR #1374 by @Serrones . Internal \u00b6 \ud83d\udd25 Cleanup after upgrade for Docs Previews GitHub Action. PR #2248 by @tiangolo . \ud83d\udc1b Fix CI docs preview, unzip docs. PR #2246 by @tiangolo . \u2728 Add instant docs deploy previews for PRs from forks. PR #2244 by @tiangolo . \u26a1\ufe0f Build docs for languages in parallel in subprocesses to speed up CI. PR #2242 by @tiangolo . \ud83d\udc1b Fix docs order generation for partial translations. PR #2238 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2202 by @github-actions[bot] . \u267b\ufe0f Update FastAPI People GitHub Action to send the PR as github-actions. PR #2201 by @tiangolo . \ud83d\udd27 Update FastAPI People GitHub Action config, run monthly. PR #2199 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action Docker dependency, strike 1 \u26be. PR #2198 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action Docker dependencies. PR #2197 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action when there's nothing to change. PR #2196 by @tiangolo . \ud83d\udc65 Add new section FastAPI People. PR #2195 by @tiangolo . \u2b06\ufe0f Upgrade GitHub Action Latest Changes. PR #2190 by @tiangolo . \u2b06\ufe0f Upgrade GitHub Action Label Approved. PR #2189 by @tiangolo . \ud83d\udd27 Update GitHub Action Label Approved, run at 12:00. PR #2185 by @tiangolo . \ud83d\udc77 Upgrade GitHub Action Latest Changes. PR #2184 by @tiangolo . \ud83d\udc77 Set GitHub Action Label Approved to run daily, not every minute. PR #2163 by @tiangolo . \ud83d\udd25 Remove pr-approvals GitHub Action as it's not compatible with forks. Use the new one. PR #2162 by @tiangolo . \ud83d\udc77 Add GitHub Action Latest Changes. PR #2160 . \ud83d\udc77 Add GitHub Action Label Approved. PR #2161 . 0.61.1 \u00b6 Fixes \u00b6 Fix issues using jsonable_encoder with SQLAlchemy models directly. PR #1987 . Docs \u00b6 Fix typo in NoSQL docs. PR #1980 by @facundojmaero . Translations \u00b6 Add translation for main page to Japanese PR #1571 by @ryuckel . Initialize French translations. PR #1975 by @JulianMaurin-BM . Initialize Turkish translations. PR #1905 by @ycd . Internal \u00b6 Improve docs maintainability by updating hl_lines syntax to use ranges. PR #1863 by @la-mar . 0.61.0 \u00b6 Features \u00b6 Add support for injecting HTTPConnection (as Request and WebSocket ). Useful for sharing app state in dependencies. PR #1827 by @nsidnev . Export WebSocketDisconnect and add example handling WebSocket disconnections to docs. PR #1822 by @rkbeatss . Breaking Changes \u00b6 Require Pydantic > 1.0.0 . Remove support for deprecated Pydantic 0.32.2 . This improves maintainability and allows new features. In FastAPI and APIRouter : Remove path operation decorators related/deprecated parameter response_model_skip_defaults (use response_model_exclude_unset instead). Change path operation decorators parameter default for response_model_exclude from set() to None (as is in Pydantic). In encoders.jsonable_encoder : Remove deprecated skip_defaults , use instead exclude_unset . Set default of exclude from set() to None (as is in Pydantic). PR #1862 . In encoders.jsonable_encoder remove parameter sqlalchemy_safe . It was an early hack to allow returning SQLAlchemy models, but it was never documented, and the recommended way is using Pydantic's orm_mode as described in the tutorial: SQL (Relational) Databases . PR #1864 . Docs \u00b6 Add link to the course by TestDriven.io: Test-Driven Development with FastAPI and Docker . PR #1860 . Fix empty log message in docs example about handling errors. PR #1815 by @manlix . Reword text to reduce ambiguity while not being gender-specific. PR #1824 by @Mause . Internal \u00b6 Add Flake8 linting. Original PR #1774 by @MashhadiNima . Disable Gitter bot, as it's currently broken, and Gitter's response doesn't show the problem. PR #1853 . 0.60.2 \u00b6 Fix typo in docs for query parameters. PR #1832 by @ycd . Add docs about Async Tests . PR #1619 by @empicano . Raise an exception when using form data ( Form , File ) without having python-multipart installed. Up to now the application would run, and raise an exception only when receiving a request with form data, the new behavior, raising early, will prevent from deploying applications with broken dependencies. It also detects if the correct package python-multipart is installed instead of the incorrect multipart (both importable as multipart ). PR #1851 based on original PR #1627 by @chrisngyn , @YKo20010 , @kx-chen . Re-enable Gitter releases bot. PR #1831 . Add link to async SQL databases tutorial from main SQL tutorial. PR #1813 by @short2strings . Fix typo in tutorial about behind a proxy. PR #1807 by @toidi . Fix typo in Portuguese docs. PR #1795 by @izaguerreiro . Add translations setup for Ukrainian. PR #1830 . Add external link Build And Host Fast Data Science Applications Using FastAPI . PR #1786 by @Kludex . Fix encoding of Pydantic models that inherit from others models with custom json_encoders . PR #1769 by @henrybetts . Simplify and improve jsonable_encoder . PR #1754 by @MashhadiNima . Simplify internal code syntax in several points. PR #1753 by @uriyyo . Improve internal typing, declare Optional parameters. PR #1731 by @MashhadiNima . Add external link Deploy FastAPI on Azure App Service to docs. PR #1726 by @windson . Add link to Starlette docs about WebSocket testing. PR #1717 by @hellocoldworld . Refactor generating dependant, merge for loops. PR #1714 by @Bloodielie . Update example for templates with Jinja to include HTML media type. PR #1690 by @frafra . Fix typos in docs for security. PR #1678 by @nilslindemann . Fix typos in docs for dependencies. PR #1675 by @nilslindemann . Fix type annotation for **extra parameters in FastAPI . PR #1659 by @bharel . Bump MkDocs Material to fix docs in browsers with dark mode. PR #1789 by @adriencaccia . Remove docs preview comment from each commit. PR #1826 . Update GitHub context extraction for Gitter notification bot. PR #1766 . 0.60.1 \u00b6 Add debugging logs for GitHub actions to introspect GitHub hidden context. PR #1764 . Use OS preference theme for online docs. PR #1760 by @adriencaccia . Upgrade Starlette to version 0.13.6 to handle a vulnerability when using static files in Windows. PR #1759 by @jamesag26 . Pin Swagger UI temporarily, waiting for a fix for swagger-api/swagger-ui#6249 . PR #1763 . Update GitHub Actions, use commit from PR for docs preview, not commit from pre-merge. PR #1761 . Update GitHub Actions, refactor Gitter bot. PR #1746 . 0.60.0 \u00b6 Add GitHub Action to watch for missing preview docs and trigger a preview deploy. PR #1740 . Add custom GitHub Action to get artifact with docs preview. PR #1739 . Add new GitHub Actions to preview docs from PRs. PR #1738 . Add XML test coverage to support GitHub Actions. PR #1737 . Update badges and remove Travis now that GitHub Actions is the main CI. PR #1736 . Add GitHub Actions for CI, move from Travis. PR #1735 . Add support for adding OpenAPI schema for GET requests with a body. PR #1626 by @victorphoenix3 . 0.59.0 \u00b6 Fix typo in docstring for OAuth2 utils. PR #1621 by @tomarv2 . Update JWT docs to use Python-jose instead of PyJWT. Initial PR #1610 by @asheux . Fix/re-enable search bar in docs. PR #1703 . Auto-generate a \"server\" in OpenAPI servers when there's a root_path instead of prefixing all the paths : Add a new parameter for FastAPI classes: root_path_in_servers to disable the auto-generation of servers . New docs about root_path and servers in Additional Servers . Update OAuth2 examples to use a relative URL for tokenUrl=\"token\" to make sure those examples keep working as-is even when behind a reverse proxy. Initial PR #1596 by @rkbeatss . Fix typo/link in External Links. PR #1702 . Update handling of External Links to use a data file and allow translating the headers without becoming obsolete quickly when new links are added. PR #https://github.com/tiangolo/fastapi/pull/1701 . Add external link Machine learning model serving in Python using FastAPI and Streamlit to docs. PR #1669 by @davidefiocco . Add note in docs on order in Pydantic Unions. PR #1591 by @kbanc . Improve support for tests in editor. PR #1699 . Pin dependencies. PR #1697 . Update isort to version 5.x.x. PR #1670 by @asheux . 0.58.1 \u00b6 Add link in docs to Pydantic data types. PR #1612 by @tayoogunbiyi . Fix link in warning logs for openapi_prefix . PR #1611 by @bavaria95 . Fix bad link in docs. PR #1603 by @molto0504 . Add Vim temporary files to .gitignore for contributors using Vim. PR #1590 by @asheux . Fix typo in docs for sub-applications. PR #1578 by @schlpbch . Use Optional in all the examples in the docs. Original PR #1574 by @chrisngyn , @kx-chen , @YKo20010 . Updated and merged PR #1644 . Update tests and handling of response_model_by_alias . PR #1642 . Add translation to Chinese for Body - Fields - \u8bf7\u6c42\u4f53 - \u5b57\u6bb5 . PR #1569 by @waynerv . Update Chinese translation of main page. PR #1564 by @waynerv . Add translation to Chinese for Body - Multiple Parameters - \u8bf7\u6c42\u4f53 - \u591a\u4e2a\u53c2\u6570 . PR #1532 by @waynerv . Add translation to Chinese for Path Parameters and Numeric Validations - \u8def\u5f84\u53c2\u6570\u548c\u6570\u503c\u6821\u9a8c . PR #1506 by @waynerv . Add GitHub action to auto-label approved PRs (mainly for translations). PR #1638 . 0.58.0 \u00b6 Deep merge OpenAPI responses to preserve all the additional metadata. PR #1577 . Mention in docs that only main app events are run (not sub-apps). PR #1554 by @amacfie . Fix body validation error response, do not include body variable when it is not embedded. PR #1553 by @amacfie . Fix testing OAuth2 security scopes when using dependency overrides. PR #1549 by @amacfie . Fix Model for JSON Schema keyword not as a JSON Schema instead of a list. PR #1548 by @v-do . Add support for OpenAPI servers . PR #1547 by @mikaello . 0.57.0 \u00b6 Remove broken link from \"External Links\". PR #1565 by @victorphoenix3 . Update/fix docs for WebSockets with dependencies . Original PR #1540 by @ChihSeanHsu . Add support for Python's http.HTTPStatus in status_code parameters. PR #1534 by @retnikt . When using Pydantic models with __root__ , use the internal value in jsonable_encoder . PR #1524 by @patrickkwang . Update docs for path parameters. PR #1521 by @yankeexe . Update docs for first steps, links and rewording. PR #1518 by @yankeexe . Enable showCommonExtensions in Swagger UI to show additional validations like maxLength , etc. PR #1466 by @TiewKH . Make OAuth2PasswordRequestFormStrict importable directly from fastapi.security . PR #1462 by @RichardHoekstra . Add docs about Default response class . PR #1455 by @TezRomacH . Add note in docs about additional parameters response_model_exclude_defaults and response_model_exclude_none in Response Model . PR #1427 by @wshayes . Add note about PyCharm Pydantic plugin to docs. PR #1420 by @koxudaxi . Update and clarify testing function name. PR #1395 by @chenl . Fix duplicated headers created by indirect dependencies that use the request directly. PR #1386 by @obataku from tests by @scottsmith2gmail . Upgrade Starlette version to 0.13.4 . PR #1361 by @rushton . Improve error handling and feedback for requests with invalid JSON. PR #1354 by @aviramha . Add support for declaring metadata for tags in OpenAPI. New docs at Tutorial - Metadata and Docs URLs - Metadata for tags . PR #1348 by @thomas-maschler . Add basic setup for Russian translations. PR #1566 . Remove obsolete Chinese articles after adding official community translations. PR #1510 by @waynerv . Add __repr__ for path operation function parameter helpers (like Query , Depends , etc) to simplify debugging. PR #1560 by @rkbeatss and @victorphoenix3 . 0.56.1 \u00b6 Add link to advanced docs from tutorial. PR #1512 by @kx-chen . Remove internal unnecessary f-strings. PR #1526 by @kotamatsuoka . Add translation to Chinese for Query Parameters and String Validations - \u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c . PR #1500 by @waynerv . Add translation to Chinese for Request Body - \u8bf7\u6c42\u4f53 . PR #1492 by @waynerv . Add translation to Chinese for Help FastAPI - Get Help - \u5e2e\u52a9 FastAPI - \u83b7\u53d6\u5e2e\u52a9 . PR #1465 by @waynerv . Add translation to Chinese for Query Parameters - \u67e5\u8be2\u53c2\u6570 . PR #1454 by @waynerv . Add translation to Chinese for Contributing - \u5f00\u53d1 - \u8d21\u732e . PR #1460 by @waynerv . Add translation to Chinese for Path Parameters - \u8def\u5f84\u53c2\u6570 . PR #1453 by @waynerv . Add official Microsoft project generator for serving spaCy with FastAPI and Azure Cognitive Skills to Project Generators . PR #1390 by @kabirkhan . Update docs in Python Types Intro to include info about Optional . Original PR #1377 by @yaegassy . Fix support for callable class dependencies with yield . PR #1365 by @mrosales . Fix/remove incorrect error logging when a client sends invalid payloads. PR #1351 by @dbanty . Add translation to Chinese for First Steps - \u7b2c\u4e00\u6b65 . PR #1323 by @waynerv . Fix generating OpenAPI for apps using callbacks with routers including Pydantic models. PR #1322 by @nsidnev . Optimize internal regex performance in get_path_param_names() . PR #1243 by @heckad . Remove *, from functions in docs where it's not needed. PR #1239 by @pankaj-giri . Start translations for Italian. PR #1557 by @csr . 0.56.0 \u00b6 Add support for ASGI root_path : Use root_path internally for mounted applications, so that OpenAPI and the docs UI works automatically without extra configurations and parameters. Add new root_path parameter for FastAPI applications to provide it in cases where it can be set with the command line (e.g. for Uvicorn and Hypercorn, with the parameter --root-path ). Deprecate openapi_prefix parameter in favor of the new root_path parameter. Add new/updated docs for Sub Applications - Mounts , without openapi_prefix (as it is now handled automatically). Add new/updated docs for Behind a Proxy , including how to setup a local testing proxy with Traefik and using root_path . Update docs for Extending OpenAPI with the new openapi_prefix parameter passed (internally generated from root_path ). Original PR #1199 by @iksteen . Update new issue templates and docs: Help FastAPI - Get Help . PR #1531 . Update GitHub action issue-manager. PR #1520 . Add new links: English articles : Real-time Notifications with Python and Postgres by Guillermo Cruz . Microservice in Python using FastAPI by Paurakh Sharma Humagain . Build simple API service with Python FastAPI \u2014 Part 1 by cuongld2 . FastAPI + Zeit.co = \ud83d\ude80 by Paul Sec . Build a web API from scratch with FastAPI - the workshop by Sebasti\u00e1n Ram\u00edrez (tiangolo) . Build a Secure Twilio Webhook with Python and FastAPI by Twilio . Using FastAPI with Django by Stavros Korokithakis . Introducing Dispatch by Netflix . Podcasts : Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (tiangolo) by Podcast. __init__ . Talks : PyConBY 2020: Serve ML models easily with FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . [VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PR #1467 . Add translation to Chinese for Python Types Intro - Python \u7c7b\u578b\u63d0\u793a\u7b80\u4ecb . PR #1197 by @waynerv . 0.55.1 \u00b6 Fix handling of enums with their own schema in path parameters. To support samuelcolvin/pydantic#1432 in FastAPI. PR #1463 . 0.55.0 \u00b6 Allow enums to allow them to have their own schemas in OpenAPI. To support samuelcolvin/pydantic#1432 in FastAPI. PR #1461 . Add links for funding through GitHub sponsors . PR #1425 . Update issue template for for questions. PR #1344 by @retnikt . Update warning about storing passwords in docs. PR #1336 by @skorokithakis . Fix typo. PR #1326 by @chenl . Add translation to Portuguese for Alternatives, Inspiration and Comparisons - Alternativas, Inspira\u00e7\u00e3o e Compara\u00e7\u00f5es . PR #1325 by @Serrones . Fix 2 typos in docs. PR #1324 by @waynerv . Update CORS docs, fix correct default of max_age=600 . PR #1301 by @derekbekoe . Add translation of main page to Portuguese . PR #1300 by @Serrones . Re-word and clarify docs for extra info in fields. PR #1299 by @chris-allnutt . Make sure the * in short features in the docs is consistent (after . ) in all languages. PR #1424 . Update order of execution for get_db in SQLAlchemy tutorial. PR #1293 by @bcb . Fix typos in Async docs. PR #1423 . 0.54.2 \u00b6 Add translation to Spanish for Concurrency and async / await - Concurrencia y async / await . PR #1290 by @alvaropernas . Remove obsolete vote link. PR #1289 by @donhui . Allow disabling docs UIs by just disabling OpenAPI with openapi_url=None . New example in docs: Advanced: Conditional OpenAPI . PR #1421 . Add translation to Portuguese for Benchmarks - Compara\u00e7\u00f5es . PR #1274 by @Serrones . Add translation to Portuguese for Tutorial - User Guide - Intro - Tutorial - Guia de Usu\u00e1rio - Introdu\u00e7\u00e3o . PR #1259 by @marcosmmb . Allow using Unicode in MkDocs for translations. PR #1419 . Add translation to Spanish for Advanced User Guide - Intro - Gu\u00eda de Usuario Avanzada - Introducci\u00f3n . PR #1250 by @jfunez . Add translation to Portuguese for History, Design and Future - Hist\u00f3ria, Design e Futuro . PR #1249 by @marcosmmb . Add translation to Portuguese for Features - Recursos . PR #1248 by @marcosmmb . Add translation to Spanish for Tutorial - User Guide - Intro - Tutorial - Gu\u00eda de Usuario - Introducci\u00f3n . PR #1244 by @MartinEliasQ . Add translation to Chinese for Deployment - \u90e8\u7f72 . PR #1203 by @RunningIkkyu . Add translation to Chinese for Tutorial - User Guide - Intro - \u6559\u7a0b - \u7528\u6237\u6307\u5357 - \u7b80\u4ecb . PR #1202 by @waynerv . Add translation to Chinese for Features - \u7279\u6027 . PR #1192 by @Dustyposa . Add translation for main page to Chinese PR #1191 by @waynerv . Update docs for project generation. PR #1287 . Add Spanish translation for Introducci\u00f3n a los Tipos de Python (Python Types Intro) . PR #1237 by @mariacamilagl . Add Spanish translation for Caracter\u00edsticas (Features) . PR #1220 by @mariacamilagl . 0.54.1 \u00b6 Update database test setup. PR #1226 . Improve test debugging by showing response text in failing tests. PR #1222 by @samuelcolvin . 0.54.0 \u00b6 Fix grammatical mistakes in async docs. PR #1188 by @mickeypash . Add support for response_model_exclude_defaults and response_model_exclude_none : Deprecate the parameter include_none in jsonable_encoder and add the inverted exclude_none , to keep in sync with Pydantic. PR #1166 by @voegtlel . Add example about Testing a Database . Initial PR #1144 by @duganchen . Update docs for Development - Contributing: Translations including note about reviewing translation PRs. #1215 . Update log style in README.md for GitHub Markdown compatibility. PR #1200 by #geekgao . Add Python venv env to .gitignore . PR #1212 by @cassiobotaro . Start Portuguese translations. PR #1210 by @cassiobotaro . Update docs for Pydantic's Settings using a dependency with @lru_cache() . PR #1214 . Add first translation to Spanish FastAPI . PR #1201 by @mariacamilagl . Add docs about Settings and Environment Variables . Initial PR 1118 by @alexmitelman . 0.53.2 \u00b6 Fix automatic embedding of body fields for dependencies and sub-dependencies. Original PR #1079 by @Toad2186 . Fix dependency overrides in WebSocket testing. PR #1122 by @amitlissack . Fix docs script to ensure languages are always sorted. PR #1189 . Start translations for Chinese. PR #1187 by @RunningIkkyu . Add docs for Schema Extra - Example . PR #1185 . 0.53.1 \u00b6 Fix included example after translations refactor. PR #1182 . Add docs example for example in Field . Docs at Body - Fields: JSON Schema extras . PR #1106 by @JohnPaton . Fix using recursive models in response_model . PR #1164 by @voegtlel . Add docs for Pycharm Debugging . PR #1096 by @youngquan . Fix typo in docs. PR #1148 by @PLNech . Update Windows development environment instructions. PR #1179 . 0.53.0 \u00b6 Update test coverage badge. PR #1175 . Add orjson to pip install fastapi[all] . PR #1161 by @michael0liver . Fix included example for GZipMiddleware . PR #1138 by @arimbr . Fix class name in docstring for OAuth2PasswordRequestFormStrict . PR #1126 by @adg-mh . Clarify function name in example in docs. PR #1121 by @tmsick . Add external link Apache Kafka producer and consumer with FastAPI and aiokafka to docs. PR #1112 by @iwpnd . Fix serialization when using by_alias or exclude_unset and returning data with Pydantic models. PR #1074 by @juhovh-aiven . Add Gitter chat to docs. PR #1061 by @aakashnand . Update and simplify translations docs. PR #1171 . Update development of FastAPI docs, set address to 127.0.0.1 to improve Windows support. PR #1169 by @mariacamilagl . Add support for docs translations. New docs: Development - Contributing: Docs: Translations . PR #1168 . Update terminal styles in docs and add note about Typer , the FastAPI of CLIs . PR #1139 . 0.52.0 \u00b6 Add new high-performance JSON response class using orjson . New docs: Custom Response - HTML, Stream, File, others: ORJSONResponse . PR #1065 . 0.51.0 \u00b6 Re-export utils from Starlette: This allows using things like from fastapi.responses import JSONResponse instead of from starlette.responses import JSONResponse . It's mainly syntax sugar, a convenience for developer experience. Now Request , Response , WebSocket , status can be imported directly from fastapi as in from fastapi import Response . This is because those are frequently used, to use the request directly, to set headers and cookies, to get status codes, etc. Documentation changes in many places, but new docs and noticeable improvements: Custom Response - HTML, Stream, File, others . Advanced Middleware . Including WSGI - Flask, Django, others . PR #1064 . 0.50.0 \u00b6 Add link to Release Notes from docs about pinning versions for deployment. PR #1058 . Upgrade code to use the latest version of Starlette, including: Several bug fixes. Optional redirects of slashes, with or without ending in / . Events for routers, \"startup\" , and \"shutdown\" . PR #1057 . Add docs about pinning FastAPI versions for deployment: Deployment: FastAPI versions . PR #1056 . 0.49.2 \u00b6 Fix links in release notes. PR #1052 by @sattosan . Fix typo in release notes. PR #1051 by @sattosan . Refactor/clarify serialize_response parameter name to avoid confusion. PR #1031 by @patrickmckenna . Refactor calling each a path operation's handler function in an isolated function, to simplify profiling. PR #1027 by @sm-Fifteen . Add missing dependencies for testing. PR #1026 by @sm-Fifteen . Fix accepting valid types for response models, including Python types like List[int] . PR #1017 by @patrickmckenna . Fix format in SQL tutorial. PR #1015 by @vegarsti . 0.49.1 \u00b6 Fix path operation duplicated parameters when used in dependencies and the path operation function. PR #994 by @merowinger92 . Update Netlify previews deployment GitHub action as the fix is already merged and there's a new release. PR #1047 . Move mypy configurations to config file. PR #987 by @hukkinj1 . Temporary fix to Netlify previews not deployable from PRs from forks. PR #1046 by @mariacamilagl . 0.49.0 \u00b6 Fix encoding of pathlib paths in jsonable_encoder . PR #978 by @patrickmckenna . Add articles to External Links : Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03 (Django, Flask, responder, FastAPI, japronto) and [FastAPI] Python\u88fd\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI\u306b\u5165\u9580\u3059\u308b . PR #974 by @tokusumi . Fix broken links in docs. PR #949 by @tsotnikov . Fix small typos. PR #941 by @NikitaKolesov . Update and clarify docs for dependencies with yield . PR #986 . Add Mermaid JS support for diagrams in docs. Add first diagrams to Dependencies: First Steps and Dependencies with yield and HTTPException . PR #985 . Update CI to run docs deployment in GitHub actions. PR #983 . Allow callable s in path operation functions , like functions modified with functools.partial . PR #977 . 0.48.0 \u00b6 Run linters first in tests to error out faster. PR #948 . Log warning about email-validator only when used. PR #946 . Simplify Peewee docs with double dependency with yield . PR #947 . Add article External Links : Create and Deploy FastAPI app to Heroku . PR #942 by @windson . Update description of Sanic, as it is now ASGI too. PR #932 by @raphaelauv . Fix typo in main page. PR #920 by @mMarzeta . Fix parsing of possibly invalid bodies. PR #918 by @dmontagu . Fix typo #916 by @adursun . Allow Any type for enums in OpenAPI. PR #906 by @songzhi . Add article to External Links : How to continuously deploy a FastAPI to AWS Lambda with AWS SAM . PR #901 by @iwpnd . Add note about using Body parameters without Pydantic. PR #900 by @pawamoy . Fix Pydantic field clone logic. PR #899 by @deuce2367 . Fix link in middleware docs. PR #893 by @linchiwei123 . Rename default API title from \"Fast API\" to \"FastAPI\" for consistency. PR #890 . 0.47.1 \u00b6 Fix model filtering in response_model , cloning sub-models. PR #889 . Fix FastAPI serialization of Pydantic models using ORM mode blocking the event loop. PR #888 . 0.47.0 \u00b6 Refactor documentation to make a simpler and shorter Tutorial - User Guide and an additional Advanced User Guide with all the additional docs. PR #887 . Tweak external links, Markdown format, typos. PR #881 . Fix bug in tutorial handling HTTP Basic Auth username and password . PR #865 by @isaevpd . Fix handling form path operation parameters declared with pure classes like list , tuple , etc. PR #856 by @nsidnev . Add request body to RequestValidationError , new docs: Use the RequestValidationError body . Initial PR #853 by @aviramha . Update External Links with new links and dynamic GitHub projects with fastapi topic. PR #850 . Fix Peewee contextvars handling in docs: SQL (Relational) Databases with Peewee . PR #879 . Setup development environment with Python's Venv and Flit, instead of requiring the extra Pipenv duplicating dependencies. Updated docs: Development - Contributing . PR #877 . Update docs for HTTP Basic Auth to improve security against timing attacks. Initial PR #807 by @zwass . 0.46.0 \u00b6 Fix typos and tweak configs. PR #837 . Add link to Chinese article in External Links . PR 810 by @wxq0309 . Implement OAuth2AuthorizationCodeBearer class. PR #797 by @kuwv . Update example upgrade in docs main page. PR #795 by @cdeil . Fix callback handling for sub-routers. PR #792 by @jekirl . Fix typos. PR #784 by @kkinder . Add 4 Japanese articles to External Links . PR #783 by @HymanZHAN . Add support for subtypes of main types in jsonable_encoder , e.g. asyncpg's UUIDs. PR #756 by @RmStorm . Fix usage of Pydantic's HttpUrl in docs. PR #832 by @Dustyposa . Fix Twitter links in docs. PR #813 by @justindujardin . Add docs for correctly using FastAPI with Peewee ORM . Including how to overwrite parts of Peewee to correctly handle async threads. PR #789 . 0.45.0 \u00b6 Add support for OpenAPI Callbacks: New docs: OpenAPI Callbacks . Refactor generation of operationId s to be valid Python names (also valid variables in most languages). Add default_response_class parameter to APIRouter . Original PR #722 by @booooh . Refactor logging to use the same logger everywhere, update log strings and levels. PR #781 . Add article to External Links : \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c FastAPI? . PR #766 by @prostomarkeloff . Remove gender bias in docs for handling errors. PR #780 . Original idea in PR #761 by @classywhetten . Rename docs and references to body-schema to body-fields to keep in line with Pydantic. PR #746 by @prostomarkeloff . 0.44.1 \u00b6 Add GitHub social preview images to git. PR #752 . Update PyPI \"trove classifiers\". PR #751 . Add full support for Python 3.8. Enable Python 3.8 in full in Travis. PR 749 . Update \"new issue\" templates. PR #749 . Fix serialization of errors for exotic Pydantic types. PR #748 by @dmontagu . 0.44.0 \u00b6 Add GitHub action Issue Manager . PR #742 . Fix typos in docs. PR 734 by @bundabrg . Fix usage of custom_encoder in jsonable_encoder . PR #715 by @matrixise . Fix invalid XML example. PR 710 by @OcasoProtal . Fix typos and update wording in deployment docs. PR #700 by @marier-nico . Add note about dependencies in APIRouter docs. PR #698 by @marier-nico . Add support for async class methods as dependencies #681 by @frankie567 . Add FastAPI with Swagger UI cheatsheet to external links. PR #671 by @euri10 . Fix typo in HTTP protocol in CORS example. PR #647 by @forestmonster . Add support for Pydantic versions 1.0.0 and above, with temporary (deprecated) backwards compatibility for Pydantic 0.32.2 . PR #646 by @dmontagu . 0.43.0 \u00b6 Update docs to reduce gender bias. PR #645 by @ticosax . Add docs about overriding the operationId for all the path operations based on their function name. PR #642 by @SKalt . Fix validators in models generating an incorrect key order. PR #637 by @jaddison . Generate correct OpenAPI docs for responses with no content. PR #621 by @brotskydotcom . Remove $ from Bash code blocks in docs for consistency. PR #613 by @nstapelbroek . Add docs for self-serving docs' (Swagger UI) static assets , e.g. to use the docs offline, or without Internet. Initial PR #557 by @svalouch . Fix black linting after upgrade. PR #682 by @frankie567 . 0.42.0 \u00b6 Add dependencies with yield , a.k.a. exit steps, context managers, cleanup, teardown, ... This allows adding extra code after a dependency is done. It can be used, for example, to close database connections. Dependencies with yield can be normal or async , FastAPI will run normal dependencies in a threadpool. They can be combined with normal dependencies. It's possible to have arbitrary trees/levels of dependencies with yield and exit steps are handled in the correct order automatically. It works by default in Python 3.7 or above. For Python 3.6, it requires the extra backport dependencies: async-exit-stack async-generator New docs at Dependencies with yield . Updated database docs SQL (Relational) Databases: Main FastAPI app . PR #595 . Fix sitemap.xml in website. PR #598 by @samuelcolvin . 0.41.0 \u00b6 Upgrade required Starlette to 0.12.9 , the new range is >=0.12.9,<=0.12.9 . Add State to FastAPI apps at app.state . PR #593 . Improve handling of custom classes for Request s and APIRoute s. This helps to more easily solve use cases like: Reading a body before and/or after a request (equivalent to a middleware). Run middleware-like code only for a subset of path operations . Process a request before passing it to a path operation function . E.g. decompressing, deserializing, etc. Processing a response after being generated by path operation functions but before returning it. E.g. adding custom headers, logging, adding extra metadata. New docs section: Custom Request and APIRoute class . PR #589 by @dmontagu . Fix preserving custom route class in routers when including other sub-routers. PR #538 by @dmontagu . 0.40.0 \u00b6 Add notes to docs about installing python-multipart when using forms. PR #574 by @sliptonic . Generate OpenAPI schemas in alphabetical order. PR #554 by @dmontagu . Add support for truncating docstrings from path operation functions . New docs at Advanced description from docstring . PR #556 by @svalouch . Fix DOCTYPE in HTML files generated for Swagger UI and ReDoc. PR #537 by @Trim21 . Fix handling 4XX responses overriding default 422 validation error responses. PR #517 by @tsouvarev . Fix typo in documentation for Simple HTTP Basic Auth . PR #514 by @prostomarkeloff . Fix incorrect documentation example in first steps . PR #511 by @IgnatovFedor . Add support for Swagger UI initOauth settings with the parameter swagger_ui_init_oauth . PR #499 by @zamiramir . 0.39.0 \u00b6 Allow path parameters to have default values (e.g. None ) and discard them instead of raising an error. This allows declaring a parameter like user_id: str = None that can be taken from a query parameter, but the same path operation can be included in a router with a path /users/{user_id} , in which case will be taken from the path and will be required. PR #464 by @jonathanunderwood . Add support for setting a default_response_class in the FastAPI instance or in include_router . Initial PR #467 by @toppk . Add support for type annotations using strings and from __future__ import annotations . PR #451 by @dmontagu . 0.38.1 \u00b6 Fix incorrect Request class import. PR #493 by @kamalgill . 0.38.0 \u00b6 Add recent articles to External Links and recent opinions. PR #490 . Upgrade support range for Starlette to include 0.12.8 . The new range is >=0.11.1,<=0.12.8\" . PR #477 by @dmontagu . Upgrade support to Pydantic version 0.32.2 and update internal code to use it (breaking change). PR #463 by @dmontagu . 0.37.0 \u00b6 Add support for custom route classes for advanced use cases. PR #468 by @dmontagu . Allow disabling Google fonts in ReDoc. PR #481 by @b1-luettje . Fix security issue: when returning a sub-class of a response model and using skip_defaults it could leak information. PR #485 by @dmontagu . Enable tests for Python 3.8-dev. PR #465 by @Jamim . Add support and tests for Pydantic dataclasses in response_model . PR #454 by @dconathan . Fix typo in OAuth2 JWT tutorial. PR #447 by @pablogamboa . Use the media_type parameter in Body() params to set the media type in OpenAPI for requestBody . PR #439 by @divums . Add article Deploying a scikit-learn model with ONNX and FastAPI by https://www.linkedin.com/in/nico-axtmann . PR #438 by @naxty . Allow setting custom 422 (validation error) response/schema in OpenAPI. And use media type from response class instead of fixed application/json (the default). PR #437 by @divums . Fix using \"default\" extra response with status codes at the same time. PR #489 . Allow additional responses to use status code ranges (like 5XX and 4XX ) and \"default\" . PR #435 by @divums . 0.36.0 \u00b6 Fix implementation for skip_defaults when returning a Pydantic model. PR #422 by @dmontagu . Fix OpenAPI generation when using the same dependency in multiple places for the same path operation . PR #417 by @dmontagu . Allow having empty paths in path operations used with include_router and a prefix . This allows having a router for /cats and all its path operations , while having one of them for /cats . Now it doesn't have to be only /cats/ (with a trailing slash). To use it, declare the path in the path operation as the empty string ( \"\" ). PR #415 by @vitalik . Fix mypy error after merging PR #415. PR #462 . 0.35.0 \u00b6 Fix typo in routing assert . PR #419 by @pablogamboa . Fix typo in docs. PR #411 by @bronsen . Fix parsing a body type declared with Union . PR #400 by @koxudaxi . 0.34.0 \u00b6 Upgrade Starlette supported range to include the latest 0.12.7 . The new range is 0.11.1,<=0.12.7 . PR #367 by @dedsm . Add test for OpenAPI schema with duplicate models from PR #333 by @dmontagu . PR #385 . 0.33.0 \u00b6 Upgrade Pydantic version to 0.30.0 . PR #384 by @jekirl . 0.32.0 \u00b6 Fix typo in docs for features. PR #380 by @MartinoMensio . Fix source code limit for example in Query Parameters . PR #366 by @Smashman . Update wording in docs about OAuth2 scopes . PR #371 by @cjw296 . Update docs for Enum s to inherit from str and improve Swagger UI rendering. PR #351 . Fix regression, add Swagger UI deep linking again. PR #350 . Add test for having path templates in prefix of .include_router . PR #349 . Add note to docs: Include the same router multiple times with different prefix . PR #348 . Fix OpenAPI/JSON Schema generation for two functions with the same name (in different modules) with the same composite bodies. Composite bodies' IDs are now based on path, not only on route name, as the auto-generated name uses the function names, that can be duplicated in different modules. The same new ID generation applies to response models. This also changes the generated title for those models. Only composite bodies and response models are affected because those are generated dynamically, they don't have a module (a Python file). This also adds the possibility of using .include_router() with the same APIRouter multiple times, with different prefixes, e.g. /api/v2 and /api/latest , and it will now work correctly. PR #347 . 0.31.0 \u00b6 Upgrade Pydantic supported version to 0.29.0 . New supported version range is \"pydantic >=0.28,<=0.29.0\" . This adds support for Pydantic Generic Models , kudos to @dmontagu . PR #344 . 0.30.1 \u00b6 Add section in docs about External Links and Articles . PR #341 . Remove Pipfile.lock from the repository as it is only used by FastAPI contributors (developers of FastAPI itself). See the PR for more details. PR #340 . Update section about Help FastAPI - Get Help . PR #339 . Refine internal type declarations to improve/remove Mypy errors in users' code. PR #338 . Update and clarify SQL tutorial with SQLAlchemy . PR #331 by @mariacamilagl . Add SQLite online viewers to the docs . PR #330 by @cyrilbois . 0.30.0 \u00b6 Add support for Pydantic's ORM mode: Updated documentation about SQL with SQLAlchemy, using Pydantic models with ORM mode, SQLAlchemy models with relations, separation of files, simplification of code and other changes. New docs: SQL (Relational) Databases . The new support for ORM mode fixes issues/adds features related to ORMs with lazy-loading, hybrid properties, dynamic/getters (using @property decorators) and several other use cases. This applies to ORMs like SQLAlchemy, Peewee, Tortoise ORM, GINO ORM and virtually any other. If your path operations return an arbitrary object with attributes (e.g. my_item.name instead of my_item[\"name\"] ) AND you use a response_model , make sure to update the Pydantic models with orm_mode = True as described in the docs (link above). New documentation about receiving plain dict s as request bodies: Bodies of arbitrary dict s . New documentation about returning arbitrary dict s in responses: Response with arbitrary dict . Technical Details : When declaring a response_model it is used directly to generate the response content, from whatever was returned from the path operation function . Before this, the return content was first passed through jsonable_encoder to ensure it was a \"jsonable\" object, like a dict , instead of an arbitrary object with attributes (like an ORM model). That's why you should make sure to update your Pydantic models for objects with attributes to use orm_mode = True . If you don't have a response_model , the return object will still be passed through jsonable_encoder first. When a response_model is declared, the same response_model type declaration won't be used as is, it will be \"cloned\" to create an new one (a cloned Pydantic Field with all the submodels cloned as well). This avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the response_model (e.g. you return a UserInDB that inherits from User but contains extra fields, like hashed_password , and User is used in the response_model ), it would still pass the validation (because UserInDB is a subclass of User ) and the object would be returned as-is, including the hashed_password . To fix this, the declared response_model is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a List[Item] ), the Pydantic model class(es) will be a different one (the \"cloned\" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned response_model . Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned response_model , containing only the declared fields as normally. PR #322 . Remove/clean unused RegEx code in routing. PR #314 by @dmontagu . Use default response status code descriptions for additional responses. PR #313 by @duxiaoyao . Upgrade Pydantic support to 0.28 . PR #320 by @jekirl . 0.29.1 \u00b6 Fix handling an empty-body request with a required body param. PR #311 . Fix broken link in docs: Return a Response directly . PR #306 by @dmontagu . Fix docs discrepancy in docs for Response Model . PR #288 by @awiddersheim . 0.29.0 \u00b6 Add support for declaring a Response parameter: This allows declaring: Response Cookies . Response Headers . An HTTP Status Code different than the default: Response - Change Status Code . All of this while still being able to return arbitrary objects ( dict , DB model, etc). Update attribution to Hug, for inspiring the response parameter pattern. PR #294 . 0.28.0 \u00b6 Implement dependency cache per request. This avoids calling each dependency multiple times for the same request. This is useful while calling external services, performing costly computation, etc. This also means that if a dependency was declared as a path operation decorator dependency, possibly at the router level (with .include_router() ) and then it is declared again in a specific path operation , the dependency will be called only once. The cache can be disabled per dependency declaration, using use_cache=False as in Depends(your_dependency, use_cache=False) . Updated docs at: Using the same dependency multiple times . PR #292 . Implement dependency overrides for testing. This allows using overrides/mocks of dependencies during tests. New docs: Testing Dependencies with Overrides . PR #291 . 0.27.2 \u00b6 Fix path and query parameters receiving dict as a valid type. It should be mapped to a body payload. PR #287 . Updated docs at: Query parameter list / multiple values with defaults: Using list . 0.27.1 \u00b6 Fix auto_error=False handling in HTTPBearer security scheme. Do not raise when there's an incorrect Authorization header if auto_error=False . PR #282 . Fix type declaration of HTTPException . PR #279 . 0.27.0 \u00b6 Fix broken link in docs about OAuth 2.0 with scopes. PR #275 by @dmontagu . Refactor param extraction using Pydantic Field : Large refactor, improvement, and simplification of param extraction from path operations . Fix/add support for list query parameters with list defaults. New documentation: Query parameter list / multiple values with defaults . Add support for enumerations in path operation parameters. New documentation: Path Parameters: Predefined values . Add support for type annotations using Optional as in param: Optional[str] = None . New documentation: Optional type declarations . PR #278 . 0.26.0 \u00b6 Separate error handling for validation errors. This will allow developers to customize the exception handlers. Document better how to handle exceptions and use error handlers. Include RequestValidationError and WebSocketRequestValidationError (this last one will be useful once encode/starlette#527 or equivalent is merged). New documentation about exceptions handlers: Install custom exception handlers . Override the default exception handlers . Re-use FastAPI's exception handlers . PR #273 . Fix support for paths in path parameters without needing explicit Path(...) . PR #256 . Documented in PR #272 by @wshayes . New documentation at: Path Parameters containing paths . Update docs for testing FastAPI. Include using POST , sending JSON, testing headers, etc. New documentation: Testing . PR #271 . Fix type declaration of response_model to allow generic Python types as List[Model] . Mainly to fix mypy for users. PR #266 . 0.25.0 \u00b6 Add support for Pydantic's include , exclude , by_alias . Update documentation: Response Model . Add docs for: Body - updates , using Pydantic's skip_defaults . Add method consistency tests. PR #264 . Add CONTRIBUTING.md file to GitHub, to help new contributors. PR #255 by @wshayes . Add support for Pydantic's skip_defaults : There's a new path operation decorator parameter response_model_skip_defaults . The name of the parameter will most probably change in a future version to response_skip_defaults , model_skip_defaults or something similar. New documentation section about using response_model_skip_defaults . PR #248 by @wshayes . 0.24.0 \u00b6 Add support for WebSockets with dependencies and parameters. Support included for: Depends Security Cookie Header Path Query ...as these are compatible with the WebSockets protocol (e.g. Body is not). Updated documentation for WebSockets . PR #178 by @jekirl . Upgrade the compatible version of Pydantic to 0.26.0 . This includes JSON Schema support for IP address and network objects, bug fixes, and other features. PR #247 by @euri10 . 0.23.0 \u00b6 Upgrade the compatible version of Starlette to 0.12.0 . This includes support for ASGI 3 (the latest version of the standard). It's now possible to use Starlette's StreamingResponse with iterators, like file-like objects (as those returned by open() ). It's now possible to use the low level utility iterate_in_threadpool from starlette.concurrency (for advanced scenarios). PR #243 . Add OAuth2 redirect page for Swagger UI. This allows having delegated authentication in the Swagger UI docs. For this to work, you need to add {your_origin}/docs/oauth2-redirect to the allowed callbacks in your OAuth2 provider (in Auth0, Facebook, Google, etc). For example, during development, it could be http://localhost:8000/docs/oauth2-redirect . Have in mind that this callback URL is independent of whichever one is used by your frontend. You might also have another callback at https://yourdomain.com/login/callback . This is only to allow delegated authentication in the API docs with Swagger UI. PR #198 by @steinitzu . Make Swagger UI and ReDoc route handlers ( path operations ) be async functions instead of lambdas to improve performance. PR #241 by @Trim21 . Make Swagger UI and ReDoc URLs parameterizable, allowing to host and serve local versions of them and have offline docs. PR #112 by @euri10 . 0.22.0 \u00b6 Add support for dependencies parameter: A parameter in path operation decorators , for dependencies that should be executed but the return value is not important or not used in the path operation function . A parameter in the .include_router() method of FastAPI applications and routers, to include dependencies that should be executed in each path operation in a router. This is useful, for example, to require authentication or permissions in specific group of path operations . Different dependencies can be applied to different routers. These dependencies are run before the normal parameter dependencies. And normal dependencies are run too. They can be combined. Dependencies declared in a router are executed first, then the ones defined in path operation decorators , and then the ones declared in normal parameters. They are all combined and executed. All this also supports using Security with scopes in those dependencies parameters, for more advanced OAuth 2.0 security scenarios with scopes. New documentation about dependencies in path operation decorators . New documentation about dependencies in the include_router() method . PR #235 . Fix OpenAPI documentation of Starlette URL convertors. Specially useful when using path convertors, to take a whole path as a parameter, like /some/url/{p:path} . PR #234 by @euri10 . Make default parameter utilities exported from fastapi be functions instead of classes (the new functions return instances of those classes). To be able to override the return types and fix mypy errors in FastAPI's users' code. Applies to Path , Query , Header , Cookie , Body , Form , File , Depends , and Security . PR #226 and PR #231 . Separate development scripts test.sh , lint.sh , and format.sh . PR #232 . Re-enable black formatting checks for Python 3.7. PR #229 by @zamiramir . 0.21.0 \u00b6 On body parsing errors, raise from previous exception, to allow better introspection in logging code. PR #192 by @ricardomomm . Use Python logger named \" fastapi \" instead of root logger. PR #222 by @euri10 . Upgrade Pydantic to version 0.25. PR #225 by @euri10 . Fix typo in routing. PR #221 by @djlambert . 0.20.1 \u00b6 Add typing information to package including file py.typed . PR #209 by @meadsteve . Add FastAPI bot for Gitter. To automatically announce new releases. PR #189 . 0.20.0 \u00b6 Upgrade OAuth2: Upgrade Password flow using Bearer tokens to use the correct HTTP status code 401 UNAUTHORIZED , with WWW-Authenticate headers. Update, simplify, and improve all the security docs . Add new scope_str to SecurityScopes and update docs: OAuth2 scopes . Update docs, images, tests. PR #188 . Include Hypercorn as an alternative ASGI server in the docs. PR #187 . Add docs for Static Files and Templates . PR #186 . Add docs for handling Response Cookies and Response Headers . PR #185 . Fix typos in docs. PR #176 by @chdsbd . 0.19.0 \u00b6 Rename path operation decorator parameter content_type to response_class . PR #183 . Add docs: How to use the jsonable_encoder in JSON compatible encoder . How to Return a Response directly . Update how to use a Custom Response Class . PR #184 . 0.18.0 \u00b6 Add docs for HTTP Basic Auth . PR #177 . Upgrade HTTP Basic Auth handling with automatic headers (automatic browser login prompt). PR #175 . Update dependencies for security. PR #174 . Add docs for Middleware . PR #173 . 0.17.0 \u00b6 Make Flit publish from CI. PR #170 . Add documentation about handling CORS (Cross-Origin Resource Sharing) . PR #169 . By default, encode by alias. This allows using Pydantic alias parameters working by default. PR #168 . 0.16.0 \u00b6 Upgrade path operation docstring parsing to support proper Markdown descriptions. New documentation at Path Operation Configuration . PR #163 . Refactor internal usage of Pydantic to use correct data types. PR #164 . Upgrade Pydantic to version 0.23 . PR #160 by @euri10 . Fix typo in Tutorial about Extra Models. PR #159 by @danielmichaels . Fix Query Parameters URL examples in docs. PR #157 by @hayata-yamamoto . 0.15.0 \u00b6 Add support for multiple file uploads (as a single form field). New docs at: Multiple file uploads . PR #158 . Add docs for: Additional Status Codes . PR #156 . 0.14.0 \u00b6 Improve automatically generated names of path operations in OpenAPI (in API docs). A function read_items instead of having a generated name \"Read Items Get\" will have \"Read Items\". PR #155 . Add docs for: Testing FastAPI . PR #151 . Update /docs Swagger UI to enable deep linking. This allows sharing the URL pointing directly to the path operation documentation in the docs. PR #148 by @wshayes . Update development dependencies, Pipfile.lock . PR #150 . Include Falcon and Hug in: Alternatives, Inspiration and Comparisons . 0.13.0 \u00b6 Improve/upgrade OAuth2 scopes support with SecurityScopes : SecurityScopes can be declared as a parameter like Request , to get the scopes of all super-dependencies/dependants. Improve Security handling, merging scopes when declaring SecurityScopes . Allow using SecurityBase (like OAuth2 ) classes with Depends and still document them. Security now is needed only to declare scopes . Updated docs about: OAuth2 with Password (and hashing), Bearer with JWT tokens . New docs about: OAuth2 scopes . PR #141 . 0.12.1 \u00b6 Fix bug: handling additional responses in APIRouter.include_router() . PR #140 . Fix typo in SQL tutorial. PR #138 by @mostaphaRoudsari . Fix typos in section about nested models and OAuth2 with JWT. PR #127 by @mmcloud . 0.12.0 \u00b6 Add additional responses parameter to path operation decorators to extend responses in OpenAPI (and API docs). It also allows extending existing responses generated from response_model , declare other media types (like images), etc. The new documentation is here: Additional Responses . responses can also be added to .include_router() , the updated docs are here: Bigger Applications . PR #97 originally initiated by @barsi . Update scripts/test-cov-html.sh to allow passing extra parameters like -vv , for development. 0.11.0 \u00b6 Add auto_error parameter to security utility functions. Allowing them to be optional. Also allowing to have multiple alternative security schemes that are then checked in a single dependency instead of each one verifying and returning the error to the client automatically when not satisfied. PR #134 . Update SQL Tutorial to close database sessions even when there are exceptions. PR #89 by @alexiri . Fix duplicate dependency in pyproject.toml . PR #128 by @zxalif . 0.10.3 \u00b6 Add Gitter chat, badge, links, etc. https://gitter.im/tiangolo/fastapi . PR #117 . Add docs about Extending OpenAPI . PR #126 . Make Travis run Ubuntu Xenial (newer version) and Python 3.7 instead of Python 3.7-dev. PR #92 by @blueyed . Fix duplicated param variable creation. PR #123 by @yihuang . Add note in Response Model docs about why using a function parameter instead of a function return type annotation. PR #109 by @JHSaunders . Fix event docs (startup/shutdown) function name. PR #105 by @stratosgear . 0.10.2 \u00b6 Fix OpenAPI (JSON Schema) for declarations of Python Union (JSON Schema additionalProperties ). PR #121 . Update Background Tasks with a note on Celery. Document response models using unions and lists, updated at: Extra Models . PR #108 . 0.10.1 \u00b6 Add docs and tests for encode/databases . New docs at: Async SQL (Relational) Databases . PR #107 . 0.10.0 \u00b6 Add support for Background Tasks in path operation functions and dependencies. New documentation about Background Tasks is here . PR #103 . Add support for .websocket_route() in APIRouter . PR #100 by @euri10 . New docs section about Events: startup - shutdown . PR #99 . 0.9.1 \u00b6 Document receiving Multiple values with the same query parameter and Duplicate headers . PR #95 . 0.9.0 \u00b6 Upgrade compatible Pydantic version to 0.21.0 . PR #90 . Add documentation for: Application Configuration . Fix typo in docs. PR #76 by @matthewhegarty . Fix link in \"Deployment\" to \"Bigger Applications\". 0.8.0 \u00b6 Make development scripts executable. PR #76 by @euri10 . Add support for adding tags in app.include_router() . PR #55 by @euri10 . Documentation updated in the section: Bigger Applications . Update docs related to Uvicorn to use new --reload option from version 0.5.x . PR #74 . Update isort imports and scripts to be compatible with newer versions. PR #75 . 0.7.1 \u00b6 Update technical details about async def handling with respect to previous frameworks. PR #64 by @haizaar . Add deployment documentation for Docker in Raspberry Pi and other architectures. Trigger Docker images build on Travis CI automatically. PR #65 . 0.7.0 \u00b6 Add support for UploadFile in File parameter annotations. This includes a file-like interface. Here's the updated documentation for declaring File parameters with UploadFile . And here's the updated documentation for using Form parameters mixed with File parameters, supporting bytes and UploadFile at the same time. PR #63 . 0.6.4 \u00b6 Add technical details about async def handling to docs . PR #61 . Add docs for Debugging FastAPI applications in editors . Clarify Bigger Applications deployed with Docker . Fix typos in docs. Add section about History, Design and Future . Add docs for using WebSockets with FastAPI . PR #62 . 0.6.3 \u00b6 Add Favicons to docs. PR #53 . 0.6.2 \u00b6 Introduce new project generator based on FastAPI and PostgreSQL: https://github.com/tiangolo/full-stack-fastapi-postgresql . PR #52 . Update SQL tutorial with SQLAlchemy, using Depends to improve editor support and reduce code repetition . PR #52 . Improve middleware naming in tutorial for SQL with SQLAlchemy https://fastapi.tiangolo.com/tutorial/sql-databases/ . 0.6.1 \u00b6 Add docs for GraphQL: https://fastapi.tiangolo.com/advanced/graphql/ . PR #48 . 0.6.0 \u00b6 Update SQL with SQLAlchemy tutorial at https://fastapi.tiangolo.com/tutorial/sql-databases/ using the new official request.state . PR #45 . Upgrade Starlette to version 0.11.1 and add required compatibility changes. PR #44 . 0.5.1 \u00b6 Add section about helping and getting help with FastAPI . Add note about path operations order in docs . Update section about error handling with more information and make relation with Starlette error handling utilities more explicit. PR #41 . Add Development - Contributing section to the docs . PR #42 . 0.5.0 \u00b6 Add new HTTPException with support for custom headers. With new documentation for handling errors at: https://fastapi.tiangolo.com/tutorial/handling-errors/ . PR #35 . Add documentation to use Starlette Request object directly. Check #25 by @euri10 . Add issue templates to simplify reporting bugs, getting help, etc: #34 . Update example for the SQLAlchemy tutorial at https://fastapi.tiangolo.com/tutorial/sql-databases/ using middleware and database session attached to request. 0.4.0 \u00b6 Add openapi_prefix , support for reverse proxy and mounting sub-applications. See the docs at https://fastapi.tiangolo.com/advanced/sub-applications-proxy/ : #26 by @kabirkhan . Update docs/tutorial for SQLAlchemy including note about DB Browser for SQLite . 0.3.0 \u00b6 Fix/add SQLAlchemy support, including ORM, and update docs for SQLAlchemy : #30 . 0.2.1 \u00b6 Fix jsonable_encoder for Pydantic models with Config but without json_encoders : #29 . 0.2.0 \u00b6 Fix typos in Security section: #24 by @kkinder . Add support for Pydantic custom JSON encoders: #21 by @euri10 . 0.1.19 \u00b6 Upgrade Starlette version to the current latest 0.10.1 : #17 by @euri10 .","title":"\ubcc0\uacbd \uc0ac\ud56d"},{"location":"release-notes/#_1","text":"","title":"\ubcc0\uacbd \uc0ac\ud56d"},{"location":"release-notes/#latest-changes","text":"\ud83d\udd27 Update sponsors, Striveworks badge. PR #5179 by @tiangolo . \ud83c\udf10 Add Persian translation for docs/fa/docs/index.md and tweak right-to-left CSS. PR #2395 by @mohsen-mahmoodi .","title":"Latest Changes"},{"location":"release-notes/#0790","text":"","title":"0.79.0"},{"location":"release-notes/#fixes-breaking-changes","text":"\ud83d\udc1b Fix removing body from status codes that do not support it. PR #5145 by @tiangolo . Setting status_code to 204 , 304 , or any code below 200 (1xx) will remove the body from the response. This fixes an error in Uvicorn that otherwise would be thrown: RuntimeError: Response content longer than Content-Length . This removes fastapi.openapi.constants.STATUS_CODES_WITH_NO_BODY , it is replaced by a function in utils.","title":"Fixes - Breaking Changes"},{"location":"release-notes/#translations","text":"\ud83c\udf10 Start of Hebrew translation. PR #5050 by @itay-raveh . \ud83d\udd27 Add config for Swedish translations notification. PR #5147 by @tiangolo . \ud83c\udf10 Start of Swedish translation. PR #5062 by @MrRawbin . \ud83c\udf10 Add Japanese translation for docs/ja/docs/advanced/index.md . PR #5043 by @wakabame . \ud83c\udf10\ud83c\uddf5\ud83c\uddf1 Add Polish translation for docs/pl/docs/tutorial/first-steps.md . PR #5024 by @Valaraucoo .","title":"Translations"},{"location":"release-notes/#internal","text":"\ud83d\udd27 Update translations notification for Hebrew. PR #5158 by @tiangolo . \ud83d\udd27 Update Dependabot commit message. PR #5156 by @tiangolo . \u2b06 Bump actions/upload-artifact from 2 to 3. PR #5148 by @dependabot[bot] . \u2b06 Bump actions/cache from 2 to 3. PR #5149 by @dependabot[bot] . \ud83d\udd27 Update sponsors badge configs. PR #5155 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #5154 by @tiangolo . \ud83d\udd27 Update Jina sponsor badges. PR #5151 by @tiangolo . \u2b06 Bump actions/checkout from 2 to 3. PR #5133 by @dependabot[bot] . \u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5030 by @pre-commit-ci[bot] . \u2b06 Bump nwtgck/actions-netlify from 1.1.5 to 1.2.3. PR #5132 by @dependabot[bot] . \u2b06 Bump codecov/codecov-action from 2 to 3. PR #5131 by @dependabot[bot] . \u2b06 Bump dawidd6/action-download-artifact from 2.9.0 to 2.21.1. PR #5130 by @dependabot[bot] . \u2b06 Bump actions/setup-python from 2 to 4. PR #5129 by @dependabot[bot] . \ud83d\udc77 Add Dependabot. PR #5128 by @tiangolo . \u267b\ufe0f Move from Optional[X] to Union[X, None] for internal utils. PR #5124 by @tiangolo . \ud83d\udd27 Update sponsors, remove Dropbase, add Doist. PR #5096 by @tiangolo . \ud83d\udd27 Update sponsors, remove Classiq, add ImgWhale. PR #5079 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0780","text":"","title":"0.78.0"},{"location":"release-notes/#features","text":"\u2728 Add support for omitting ... as default value when declaring required parameters with: Path() Query() Header() Cookie() Body() Form() File() New docs at Tutorial - Query Parameters and String Validations - Make it required . PR #4906 by @tiangolo . Up to now, declaring a required parameter while adding additional validation or metadata needed using ... (Ellipsis). For example: from fastapi import Cookie , FastAPI , Header , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def main ( item_id : int = Path ( default =... , gt = 0 ), query : str = Query ( default =... , max_length = 10 ), session : str = Cookie ( default =... , min_length = 3 ), x_trace : str = Header ( default =... , title = \"Tracing header\" ), ): return { \"message\" : \"Hello World\" } ...all these parameters are required because the default value is ... (Ellipsis). But now it's possible and supported to just omit the default value, as would be done with Pydantic fields, and the parameters would still be required. \u2728 For example, this is now supported: from fastapi import Cookie , FastAPI , Header , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def main ( item_id : int = Path ( gt = 0 ), query : str = Query ( max_length = 10 ), session : str = Cookie ( min_length = 3 ), x_trace : str = Header ( title = \"Tracing header\" ), ): return { \"message\" : \"Hello World\" } To declare parameters as optional (not required), you can set a default value as always, for example using None : from typing import Union from fastapi import Cookie , FastAPI , Header , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def main ( item_id : int = Path ( gt = 0 ), query : Union [ str , None ] = Query ( default = None , max_length = 10 ), session : Union [ str , None ] = Cookie ( default = None , min_length = 3 ), x_trace : Union [ str , None ] = Header ( default = None , title = \"Tracing header\" ), ): return { \"message\" : \"Hello World\" }","title":"Features"},{"location":"release-notes/#docs","text":"\ud83d\udcdd Add docs recommending Union over Optional and migrate source examples. New docs at Python Types Intro - Using Union or Optional . PR #4908 by @tiangolo . \ud83c\udfa8 Fix default value as set in tutorial for Path Operations Advanced Configurations. PR #4899 by @tiangolo . \ud83d\udcdd Add documentation for redefined path operations. PR #4864 by @madkinsz . \ud83d\udcdd Updates links for Celery documentation. PR #4736 by @sammyzord . \u270f Fix example code with sets in tutorial for body nested models. PR #3030 by @hitrust . \u270f Fix links to Pydantic docs. PR #4670 by @kinuax . \ud83d\udcdd Update docs about Swagger UI self-hosting with newer source links. PR #4813 by @Kastakin . \ud83d\udcdd Add link to external article: Building the Poll App From Django Tutorial With FastAPI And React. PR #4778 by @jbrocher . \ud83d\udcdd Add OpenAPI warning to \"Body - Fields\" docs with extra schema extensions. PR #4846 by @ml-evs .","title":"Docs"},{"location":"release-notes/#translations_1","text":"\ud83c\udf10 Fix code examples in Japanese translation for docs/ja/docs/tutorial/testing.md . PR #4623 by @hirotoKirimaru .","title":"Translations"},{"location":"release-notes/#internal_1","text":"\u267b Refactor dict value extraction to minimize key lookups fastapi/utils.py . PR #3139 by @ShahriyarR . \u2705 Add tests for required nonable parameters and body fields. PR #4907 by @tiangolo . \ud83d\udc77 Fix installing Material for MkDocs Insiders in CI. PR #4897 by @tiangolo . \ud83d\udc77 Add pre-commit CI instead of custom GitHub Action. PR #4896 by @tiangolo . \ud83d\udc77 Add pre-commit GitHub Action workflow. PR #4895 by @tiangolo . \ud83d\udcdd Add dark mode auto switch to docs based on OS preference. PR #4869 by @ComicShrimp . \ud83d\udd25 Remove un-used old pending tests, already covered in other places. PR #4891 by @tiangolo . \ud83d\udd27 Add Python formatting hooks to pre-commit. PR #4890 by @tiangolo . \ud83d\udd27 Add pre-commit with first config and first formatting pass. PR #4888 by @tiangolo . \ud83d\udc77 Disable CI installing Material for MkDocs in forks. PR #4410 by @dolfinus .","title":"Internal"},{"location":"release-notes/#0771","text":"","title":"0.77.1"},{"location":"release-notes/#upgrades","text":"\u2b06 Upgrade Starlette from 0.19.0 to 0.19.1. PR #4819 by @Kludex .","title":"Upgrades"},{"location":"release-notes/#docs_1","text":"\ud83d\udcdd Add link to german article: REST-API Programmieren mittels Python und dem FastAPI Modul. PR #4624 by @fschuermeyer . \ud83d\udcdd Add external link: PyCharm Guide to FastAPI. PR #4512 by @mukulmantosh . \ud83d\udcdd Add external link to article: Building an API with FastAPI and Supabase and Deploying on Deta. PR #4440 by @aUnicornDev . \u270f Fix small typo in docs/en/docs/tutorial/security/first-steps.md . PR #4515 by @KikoIlievski .","title":"Docs"},{"location":"release-notes/#translations_2","text":"\ud83c\udf10 Add Polish translation for docs/pl/docs/tutorial/index.md . PR #4516 by @MKaczkow . \u270f Fix typo in deployment. PR #4629 by @raisulislam541 . \ud83c\udf10 Add Portuguese translation for docs/pt/docs/help-fastapi.md . PR #4583 by @mateusjs .","title":"Translations"},{"location":"release-notes/#internal_2","text":"\ud83d\udd27 Add notifications in issue for Uzbek translations. PR #4884 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0770","text":"","title":"0.77.0"},{"location":"release-notes/#upgrades_1","text":"\u2b06 Upgrade Starlette from 0.18.0 to 0.19.0. PR #4488 by @Kludex . When creating an explicit JSONResponse the content argument is now required.","title":"Upgrades"},{"location":"release-notes/#docs_2","text":"\ud83d\udcdd Add external link to article: Seamless FastAPI Configuration with ConfZ. PR #4414 by @silvanmelchior . \ud83d\udcdd Add external link to article: 5 Advanced Features of FastAPI You Should Try. PR #4436 by @kaustubhgupta . \u270f Reword to improve legibility of docs about TestClient . PR #4389 by @rgilton . \ud83d\udcdd Add external link to blog post about Kafka, FastAPI, and Ably. PR #4044 by @Ugbot . \u270f Fix typo in docs/en/docs/tutorial/sql-databases.md . PR #4875 by @wpyoga . \u270f Fix typo in docs/en/docs/async.md . PR #4726 by @Prezu .","title":"Docs"},{"location":"release-notes/#translations_3","text":"\ud83c\udf10 Update source example highlights for docs/zh/docs/tutorial/query-params-str-validations.md . PR #4237 by @caimaoy . \ud83c\udf10 Remove translation docs references to aiofiles as it's no longer needed since AnyIO. PR #3594 by @alonme . \u270f \ud83c\udf10 Fix typo in Portuguese translation for docs/pt/docs/tutorial/path-params.md . PR #4722 by @CleoMenezesJr . \ud83c\udf10 Fix live docs server for translations for some languages. PR #4729 by @wakabame . \ud83c\udf10 Add Portuguese translation for docs/pt/docs/tutorial/cookie-params.md . PR #4112 by @lbmendes . \ud83c\udf10 Fix French translation for docs/tutorial/body.md . PR #4332 by @Smlep . \ud83c\udf10 Add Japanese translation for docs/ja/docs/advanced/conditional-openapi.md . PR #2631 by @sh0nk . \ud83c\udf10 Fix Japanese translation of docs/ja/docs/tutorial/body.md . PR #3062 by @a-takahashi223 . \ud83c\udf10 Add Portuguese translation for docs/pt/docs/tutorial/background-tasks.md . PR #2170 by @izaguerreiro . \ud83c\udf10 Add Portuguese translation for docs/deployment/deta.md . PR #4442 by @lsglucas . \ud83c\udf10 Add Russian translation for docs/async.md . PR #4036 by @Winand . \ud83c\udf10 Add Portuguese translation for docs/tutorial/body.md . PR #3960 by @leandrodesouzadev . \ud83c\udf10 Add Portuguese translation of tutorial/extra-data-types.md . PR #4077 by @luccasmmg . \ud83c\udf10 Update German translation for docs/features.md . PR #3905 by @jomue .","title":"Translations"},{"location":"release-notes/#0760","text":"","title":"0.76.0"},{"location":"release-notes/#upgrades_2","text":"\u2b06 Upgrade Starlette from 0.17.1 to 0.18.0. PR #4483 by @Kludex .","title":"Upgrades"},{"location":"release-notes/#internal_3","text":"\ud83d\udc65 Update FastAPI People. PR #4847 by @github-actions[bot] . \ud83d\udd27 Add Budget Insight sponsor. PR #4824 by @tiangolo . \ud83c\udf71 Update sponsor, ExoFlare badge. PR #4822 by @tiangolo . \ud83d\udd27 Update sponsors, enable Dropbase again, update TalkPython link. PR #4821 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0752","text":"This release includes upgrades to third-party packages that handle security issues. Although there's a chance these issues don't affect you in particular, please upgrade as soon as possible.","title":"0.75.2"},{"location":"release-notes/#fixes","text":"\u2705 Fix new/recent tests with new fixed ValidationError JSON Schema. PR #4806 by @tiangolo . \ud83d\udc1b Fix JSON Schema for ValidationError at field loc . PR #3810 by @dconathan . \ud83d\udc1b Fix support for prefix on APIRouter WebSockets. PR #2640 by @Kludex .","title":"Fixes"},{"location":"release-notes/#upgrades_3","text":"\u2b06\ufe0f Update ujson ranges for CVE-2021-45958. PR #4804 by @tiangolo . \u2b06\ufe0f Upgrade dependencies upper range for extras \"all\". PR #4803 by @tiangolo . \u2b06 Upgrade Swagger UI - swagger-ui-dist@4. This handles a security issue in Swagger UI itself where it could be possible to inject HTML into Swagger UI. Please upgrade as soon as you can, in particular if you expose your Swagger UI ( /docs ) publicly to non-expert users. PR #4347 by @RAlanWright .","title":"Upgrades"},{"location":"release-notes/#internal_4","text":"\ud83d\udd27 Update sponsors, add: ExoFlare, Ines Course; remove: Dropbase, Vim.so, Calmcode; update: Striveworks, TalkPython and TestDriven.io. PR #4805 by @tiangolo . \u2b06\ufe0f Upgrade Codecov GitHub Action. PR #4801 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0751","text":"","title":"0.75.1"},{"location":"release-notes/#translations_4","text":"\ud83c\udf10 Start Dutch translations. PR #4703 by @tiangolo . \ud83c\udf10 Start Persian/Farsi translations. PR #4243 by @aminalaee . \u270f Reword sentence about handling errors. PR #1993 by @khuhroproeza .","title":"Translations"},{"location":"release-notes/#internal_5","text":"\ud83d\udc65 Update FastAPI People. PR #4752 by @github-actions[bot] . \u2796 Temporarily remove typer-cli from dependencies and upgrade Black to unblock Pydantic CI. PR #4754 by @tiangolo . \ud83d\udd27 Add configuration to notify Dutch translations. PR #4702 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #4699 by @github-actions[bot] . \ud83d\udc1b Fix FastAPI People generation to include missing file in commit. PR #4695 by @tiangolo . \ud83d\udd27 Update Classiq sponsor links. PR #4688 by @tiangolo . \ud83d\udd27 Add Classiq sponsor. PR #4671 by @tiangolo . \ud83d\udcdd Add Jina's QA Bot to the docs to help people that want to ask quick questions. PR #4655 by @tiangolo based on original PR #4626 by @hanxiao .","title":"Internal"},{"location":"release-notes/#0750","text":"","title":"0.75.0"},{"location":"release-notes/#features_1","text":"\u2728 Add support for custom generate_unique_id_function and docs for generating clients. New docs: Advanced - Generate Clients . PR #4650 by @tiangolo .","title":"Features"},{"location":"release-notes/#0741","text":"","title":"0.74.1"},{"location":"release-notes/#features_2","text":"\u2728 Include route in scope to allow middleware and other tools to extract its information. PR #4603 by @tiangolo .","title":"Features"},{"location":"release-notes/#0740","text":"","title":"0.74.0"},{"location":"release-notes/#breaking-changes","text":"\u2728 Update internal AsyncExitStack to fix context for dependencies with yield . PR #4575 by @tiangolo . Dependencies with yield can now catch HTTPException and custom exceptions. For example: async def get_database (): with Session () as session : try : yield session except HTTPException : session . rollback () raise finally : session . close () After the dependency with yield handles the exception (or not) the exception is raised again. So that any exception handlers can catch it, or ultimately the default internal ServerErrorMiddleware . If you depended on exceptions not being received by dependencies with yield , and receiving an exception breaks the code after yield , you can use a block with try and finally : async def do_something (): try : yield something finally : some_cleanup () ...that way the finally block is run regardless of any exception that might happen.","title":"Breaking Changes"},{"location":"release-notes/#features_3","text":"The same PR #4575 from above also fixes the contextvars context for the code before and after yield . This was the main objective of that PR. This means that now, if you set a value in a context variable before yield , the value would still be available after yield (as you would intuitively expect). And it also means that you can reset the context variable with a token afterwards. For example, this works correctly now: from contextvars import ContextVar from typing import Any , Dict , Optional legacy_request_state_context_var : ContextVar [ Optional [ Dict [ str , Any ]]] = ContextVar ( \"legacy_request_state_context_var\" , default = None ) async def set_up_request_state_dependency (): request_state = { \"user\" : \"deadpond\" } contextvar_token = legacy_request_state_context_var . set ( request_state ) yield request_state legacy_request_state_context_var . reset ( contextvar_token ) ...before this change it would raise an error when resetting the context variable, because the contextvars context was different, because of the way it was implemented. Note : You probably don't need contextvars , and you should probably avoid using them. But they are powerful and useful in some advanced scenarios, for example, migrating from code that used Flask's g semi-global variable. Technical Details : If you want to know more of the technical details you can check out the PR description #4575 .","title":"Features"},{"location":"release-notes/#internal_6","text":"\ud83d\udd27 Add Striveworks sponsor. PR #4596 by @tiangolo . \ud83d\udc9a Only build docs on push when on master to avoid duplicate runs from PRs. PR #4564 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #4502 by @github-actions[bot] .","title":"Internal"},{"location":"release-notes/#0730","text":"","title":"0.73.0"},{"location":"release-notes/#features_4","text":"\u2728 Add support for declaring UploadFile parameters without explicit File() . PR #4469 by @tiangolo . New docs: Request Files - File Parameters with UploadFile . \u2728 Add support for tags with Enums. PR #4468 by @tiangolo . New docs: Path Operation Configuration - Tags with Enums . \u2728 Allow hiding from OpenAPI (and Swagger UI) Query , Cookie , Header , and Path parameters. PR #3144 by @astraldawn . New docs: Query Parameters and String Validations - Exclude from OpenAPI .","title":"Features"},{"location":"release-notes/#docs_3","text":"\ud83d\udcdd Tweak and improve docs for Request Files. PR #4470 by @tiangolo .","title":"Docs"},{"location":"release-notes/#fixes_1","text":"\ud83d\udc1b Fix bug preventing to use OpenAPI when using tuples. PR #3874 by @victorbenichoux . \ud83d\udc1b Prefer custom encoder over defaults if specified in jsonable_encoder . PR #2061 by @viveksunder . \ud83d\udc9a Duplicate PR to trigger CI. PR #4467 by @tiangolo .","title":"Fixes"},{"location":"release-notes/#internal_7","text":"\ud83d\udc1b Fix docs dependencies cache, to get the latest Material for MkDocs. PR #4466 by @tiangolo . \ud83d\udd27 Add sponsor Dropbase. PR #4465 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0720","text":"","title":"0.72.0"},{"location":"release-notes/#features_5","text":"\u2728 Enable configuring Swagger UI parameters. Original PR #2568 by @jmriebold . Here are the new docs: Configuring Swagger UI .","title":"Features"},{"location":"release-notes/#docs_4","text":"\ud83d\udcdd Update Python Types docs, add missing 3.6 / 3.9 example. PR #4434 by @tiangolo .","title":"Docs"},{"location":"release-notes/#translations_5","text":"\ud83c\udf10 Update Chinese translation for docs/help-fastapi.md . PR #3847 by @jaystone776 . \ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md . PR #4195 by @kty4119 . \ud83c\udf10 Add Polish translation for docs/pl/docs/index.md . PR #4245 by @MicroPanda123 . \ud83c\udf10 Add Chinese translation for docs\\tutorial\\path-operation-configuration.md . PR #3312 by @jaystone776 .","title":"Translations"},{"location":"release-notes/#internal_8","text":"\ud83d\udd27 Enable MkDocs Material Insiders' content.tabs.link . PR #4399 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0710","text":"","title":"0.71.0"},{"location":"release-notes/#features_6","text":"\u2728 Add docs and tests for Python 3.9 and Python 3.10. PR #3712 by @tiangolo . You can start with Python Types Intro , it explains what changes between different Python versions, in Python 3.9 and in Python 3.10. All the FastAPI docs are updated. Each code example in the docs that could use different syntax in Python 3.9 or Python 3.10 now has all the alternatives in tabs. \u2b06\ufe0f Upgrade Starlette to 0.17.1. PR #4145 by @simondale00 .","title":"Features"},{"location":"release-notes/#internal_9","text":"\ud83d\udc65 Update FastAPI People. PR #4354 by @github-actions[bot] . \ud83d\udd27 Add FastAPI Trove Classifier for PyPI as now there's one \ud83e\udd37\ud83d\ude01. PR #4386 by @tiangolo . \u2b06 Upgrade MkDocs Material and configs. PR #4385 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0701","text":"There's nothing interesting in this particular FastAPI release. It is mainly to enable/unblock the release of the next version of Pydantic that comes packed with features and improvements. \ud83e\udd29","title":"0.70.1"},{"location":"release-notes/#fixes_2","text":"\ud83d\udc1b Fix JSON Schema for dataclasses, supporting the fixes in Pydantic 1.9. PR #4272 by @PrettyWood .","title":"Fixes"},{"location":"release-notes/#translations_6","text":"\ud83c\udf10 Add Korean translation for docs/tutorial/request-forms-and-files.md . PR #3744 by @NinaHwang . \ud83c\udf10 Add Korean translation for docs/tutorial/request-files.md . PR #3743 by @NinaHwang . \ud83c\udf10 Add portuguese translation for docs/tutorial/query-params-str-validations.md . PR #3965 by @leandrodesouzadev . \ud83c\udf10 Add Korean translation for docs/tutorial/response-status-code.md . PR #3742 by @NinaHwang . \ud83c\udf10 Add Korean translation for Tutorial - JSON Compatible Encoder. PR #3152 by @NEONKID . \ud83c\udf10 Add Korean translation for Tutorial - Path Parameters and Numeric Validations. PR #2432 by @hard-coders . \ud83c\udf10 Add Korean translation for docs/ko/docs/deployment/versions.md . PR #4121 by @DevDae . \ud83c\udf10 Fix Korean translation for docs/ko/docs/tutorial/index.md . PR #4193 by @kimjaeyoonn . \ud83d\udd27 Add CryptAPI sponsor. PR #4264 by @tiangolo . \ud83d\udcdd Update docs/tutorial/dependencies/classes-as-dependencies : Add type of query parameters in a description of Classes as dependencies . PR #4015 by @0417taehyun . \ud83c\udf10 Add French translation for Tutorial - First steps. PR #3455 by @Smlep . \ud83c\udf10 Add French translation for docs/tutorial/path-params.md . PR #3548 by @Smlep . \ud83c\udf10 Add French translation for docs/tutorial/query-params.md . PR #3556 by @Smlep . \ud83c\udf10 Add Turkish translation for docs/python-types.md . PR #3926 by @BilalAlpaslan .","title":"Translations"},{"location":"release-notes/#internal_10","text":"\ud83d\udc65 Update FastAPI People. PR #4274 by @github-actions[bot] .","title":"Internal"},{"location":"release-notes/#0700","text":"This release just upgrades Starlette to the latest version, 0.16.0 , which includes several bug fixes and some small breaking changes. These last three consecutive releases are independent so that you can migrate gradually : First to FastAPI 0.68.2 , with no breaking changes, but upgrading all the sub-dependencies. Next to FastAPI 0.69.0 , which upgrades Starlette to 0.15.0 , with AnyIO support, and a higher chance of having breaking changes in your code. Finally to FastAPI 0.70.0 , just upgrading Starlette to the latest version 0.16.0 with additional bug fixes. This way, in case there was a breaking change for your code in one of the releases, you can still benefit from the previous upgrades. \u2728","title":"0.70.0"},{"location":"release-notes/#breaking-changes-upgrade","text":"\u2b06\ufe0f Upgrade Starlette to 0.16.0. PR #4016 by @tiangolo . Also upgrades the ranges of optional dependencies: \"jinja2 >=2.11.2,<4.0.0\" \"itsdangerous >=1.1.0,<3.0.0\"","title":"Breaking Changes - Upgrade"},{"location":"release-notes/#0690","text":"","title":"0.69.0"},{"location":"release-notes/#breaking-changes-upgrade_1","text":"This release adds support for Trio . \u2728 It upgrades the version of Starlette to 0.15.0 , now based on AnyIO , and the internal async components in FastAPI are now based on AnyIO as well, making it compatible with both asyncio and Trio . You can read the docs about running FastAPI with Trio using Hypercorn . This release also removes graphene as an optional dependency for GraphQL. If you need to work with GraphQL, the recommended library now is Strawberry . You can read the new FastAPI with GraphQL docs .","title":"Breaking Changes - Upgrade"},{"location":"release-notes/#features_7","text":"\u2728 Add support for Trio via AnyIO, upgrading Starlette to 0.15.0 . PR #3372 by @graingert . \u2796 Remove graphene as an optional dependency. PR #4007 by @tiangolo .","title":"Features"},{"location":"release-notes/#docs_5","text":"\ud83d\udcdd Add docs for using Trio with Hypercorn. PR #4014 by @tiangolo . \u270f Fix typos in Deployment Guide. PR #3975 by @ghandic . \ud83d\udcdd Update docs with pip install calls when using extras with brackets, use quotes for compatibility with Zsh. PR #3131 by @tomwei7 . \ud83d\udcdd Add external link to article: Deploying ML Models as API Using FastAPI and Heroku. PR #3904 by @kaustubhgupta . \u270f Fix typo in file paths in docs/en/docs/contributing.md . PR #3752 by @NinaHwang . \u270f Fix a typo in docs/en/docs/advanced/path-operation-advanced-configuration.md and docs/en/docs/release-notes.md . PR #3750 by @saintmalik . \u270f\ufe0f Add a missing comma in the security tutorial. PR #3564 by @jalvaradosegura . \u270f Fix typo in docs/en/docs/help-fastapi.md . PR #3760 by @jaystone776 . \u270f Fix typo about file path in docs/en/docs/tutorial/bigger-applications.md . PR #3285 by @HolyDorus . \u270f Re-word to clarify test client in docs/en/docs/tutorial/testing.md . PR #3382 by @Bharat123rox . \ud83d\udcdd Fix incorrect highlighted code. PR #3325 by @paxcodes . \ud83d\udcdd Add external link to article: How-to deploy FastAPI app to Heroku. PR #3241 by @Jarmos-san . \u270f Fix typo (mistranslation) in docs/en/docs/advanced/templates.md . PR #3211 by @oerpli . \ud83d\udcdd Remove note about (now supported) feature from Swagger UI in docs/en/docs/tutorial/request-files.md . PR #2803 by @gsganden . \u270f Fix typo re-word in docs/tutorial/handling-errors.md . PR #2700 by @graue70 .","title":"Docs"},{"location":"release-notes/#translations_7","text":"\ud83c\udf10 Initialize Azerbaijani translations. PR #3941 by @madatbay . \ud83c\udf10 Add Turkish translation for docs/fastapi-people.md . PR #3848 by @BilalAlpaslan .","title":"Translations"},{"location":"release-notes/#internal_11","text":"\ud83d\udcdd Add supported Python versions badge. PR #2794 by @hramezani . \u270f Fix link in Japanese docs for docs/ja/docs/deployment/docker.md . PR #3245 by @utamori . \ud83d\udd27 Correct DeprecationWarning config and comment in pytest settings. PR #4008 by @graingert . \ud83d\udd27 Swap light/dark theme button icon. PR #3246 by @eddsalkield . \ud83d\udd27 Lint only in Python 3.7 and above. PR #4006 by @tiangolo . \ud83d\udd27 Add GitHub Action notify-translations config for Azerbaijani. PR #3995 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0682","text":"This release has no breaking changes . \ud83c\udf89 It upgrades the version ranges of sub-dependencies to allow applications using FastAPI to easily upgrade them. Soon there will be a new FastAPI release upgrading Starlette to take advantage of recent improvements, but as that has a higher chance of having breaking changes, it will be in a separate release.","title":"0.68.2"},{"location":"release-notes/#features_8","text":"\u2b06Increase supported version of aiofiles to suppress warnings. PR #2899 by @SnkSynthesis . \u2796 Do not require backports in Python >= 3.7. PR #1880 by @FFY00 . \u2b06 Upgrade required Python version to >= 3.6.1, needed by typing.Deque, used by Pydantic. PR #2733 by @hukkin . \u2b06\ufe0f Bump Uvicorn max range to 0.15.0. PR #3345 by @Kludex .","title":"Features"},{"location":"release-notes/#docs_6","text":"\ud83d\udcdd Update GraphQL docs, recommend Strawberry. PR #3981 by @tiangolo . \ud83d\udcdd Re-write and extend Deployment guide: Concepts, Uvicorn, Gunicorn, Docker, Containers, Kubernetes. PR #3974 by @tiangolo . \ud83d\udcdd Upgrade HTTPS guide with more explanations and diagrams. PR #3950 by @tiangolo .","title":"Docs"},{"location":"release-notes/#translations_8","text":"\ud83c\udf10 Add Turkish translation for docs/features.md . PR #1950 by @ycd . \ud83c\udf10 Add Turkish translation for docs/benchmarks.md . PR #2729 by @Telomeraz . \ud83c\udf10 Add Turkish translation for docs/index.md . PR #1908 by @ycd . \ud83c\udf10 Add French translation for docs/tutorial/body.md . PR #3671 by @Smlep . \ud83c\udf10 Add French translation for deployment/docker.md . PR #3694 by @rjNemo . \ud83c\udf10 Add Portuguese translation for docs/tutorial/path-params.md . PR #3664 by @FelipeSilva93 . \ud83c\udf10 Add Portuguese translation for docs/deployment/https.md . PR #3754 by @lsglucas . \ud83c\udf10 Add German translation for docs/features.md . PR #3699 by @mawassk .","title":"Translations"},{"location":"release-notes/#internal_12","text":"\u2728 Update GitHub Action: notify-translations, to avoid a race conditions. PR #3989 by @tiangolo . \u2b06\ufe0f Upgrade development autoflake , supporting multi-line imports. PR #3988 by @tiangolo . \u2b06\ufe0f Increase dependency ranges for tests and docs: pytest-cov, pytest-asyncio, black, httpx, sqlalchemy, databases, mkdocs-markdownextradata-plugin. PR #3987 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #3986 by @github-actions[bot] . \ud83d\udc9a Fix badges in README and main page. PR #3979 by @ghandic . \u2b06 Upgrade internal testing dependencies: mypy to version 0.910, add newly needed type packages. PR #3350 by @ArcLightSlavik . \u2728 Add Deepset Sponsorship. PR #3976 by @tiangolo . \ud83c\udfa8 Tweak CSS styles for shell animations. PR #3888 by @tiangolo . \ud83d\udd27 Add new Sponsor Calmcode.io. PR #3777 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0681","text":"\u2728 Add support for read_with_orm_mode , to support SQLModel relationship attributes. PR #3757 by @tiangolo .","title":"0.68.1"},{"location":"release-notes/#translations_9","text":"\ud83c\udf10 Add Portuguese translation of docs/fastapi-people.md . PR #3461 by @ComicShrimp . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md . PR #3492 by @jaystone776 . \ud83d\udd27 Add new Translation tracking issues for German and Indonesian. PR #3718 by @tiangolo . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/sub-dependencies.md . PR #3491 by @jaystone776 . \ud83c\udf10 Add Portuguese translation for docs/advanced/index.md . PR #3460 by @ComicShrimp . \ud83c\udf10 Portuguese translation of docs/async.md . PR #1330 by @Serrones . \ud83c\udf10 Add French translation for docs/async.md . PR #3416 by @Smlep .","title":"Translations"},{"location":"release-notes/#internal_13","text":"\u2728 Add GitHub Action: Notify Translations. PR #3715 by @tiangolo . \u2728 Update computation of FastAPI People and sponsors. PR #3714 by @tiangolo . \u2728 Enable recent Material for MkDocs Insiders features. PR #3710 by @tiangolo . \ud83d\udd25 Remove/clean extra imports from examples in docs for features. PR #3709 by @tiangolo . \u2795 Update docs library to include sources in Markdown. PR #3648 by @tiangolo . \u2b06 Enable tests for Python 3.9. PR #2298 by @Kludex . \ud83d\udc65 Update FastAPI People. PR #3642 by @github-actions[bot] .","title":"Internal"},{"location":"release-notes/#0680","text":"","title":"0.68.0"},{"location":"release-notes/#features_9","text":"\u2728 Add support for extensions and updates to the OpenAPI schema in each path operation . New docs: FastAPI Path Operation Advanced Configuration - OpenAPI Extra . Initial PR #1922 by @edouardlp . \u2728 Add additional OpenAPI metadata parameters to FastAPI class, shown on the automatic API docs UI. New docs: Metadata and Docs URLs . Initial PR #1812 by @dkreeft . \u2728 Add description parameter to all the security scheme classes, e.g. APIKeyQuery(name=\"key\", description=\"A very cool API key\") . PR #1757 by @hylkepostma . \u2728 Update OpenAPI models, supporting recursive models and extensions. PR #3628 by @tiangolo . \u2728 Import and re-export data structures from Starlette, used by Request properties, on fastapi.datastructures . Initial PR #1872 by @jamescurtin .","title":"Features"},{"location":"release-notes/#docs_7","text":"\ud83d\udcdd Update docs about async and response-model with more gender neutral language. PR #1869 by @Edward-Knight .","title":"Docs"},{"location":"release-notes/#translations_10","text":"\ud83c\udf10 Add Russian translation for docs/python-types.md . PR #3039 by @dukkee . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/index.md . PR #3489 by @jaystone776 . \ud83c\udf10 Add Russian translation for docs/external-links.md . PR #3036 by @dukkee . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/global-dependencies.md . PR #3493 by @jaystone776 . \ud83c\udf10 Add Portuguese translation for docs/deployment/versions.md . PR #3618 by @lsglucas . \ud83c\udf10 Add Japanese translation for docs/tutorial/security/oauth2-jwt.md . PR #3526 by @sattosan .","title":"Translations"},{"location":"release-notes/#internal_14","text":"\u2705 Add the docs_src directory to test coverage and update tests. Initial PR #1904 by @Kludex . \ud83d\udd27 Add new GitHub templates with forms for new issues. PR #3612 by @tiangolo . \ud83d\udcdd Add official FastAPI Twitter to docs: @fastapi . PR #3578 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0670","text":"","title":"0.67.0"},{"location":"release-notes/#features_10","text":"\u2728 Add support for dataclasses in request bodies and response_model . New documentation: Advanced User Guide - Using Dataclasses . PR #3577 by @tiangolo . \u2728 Support dataclasses in responses. PR #3576 by @tiangolo , continuation from initial PR #2722 by @amitlissack .","title":"Features"},{"location":"release-notes/#docs_8","text":"\ud83d\udcdd Add external link: How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI. PR #2839 by @aitoehigie . \u270f Fix code highlighted line in: body-nested-models.md . PR #3463 by @jaystone776 . \u270f Fix typo in body-nested-models.md . PR #3462 by @jaystone776 . \u270f Fix typo \"might me\" -> \"might be\" in docs/en/docs/tutorial/schema-extra-example.md . PR #3362 by @dbrakman . \ud83d\udcdd Add external link: Building simple E-Commerce with NuxtJS and FastAPI. PR #3271 by @ShahriyarR . \ud83d\udcdd Add external link: Serve a machine learning model using Sklearn, FastAPI and Docker. PR #2974 by @rodrigo-arenas . \u270f\ufe0f Fix typo on docstring in datastructures file. PR #2887 by @Kludex . \ud83d\udcdd Add External Link: Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server. PR #3572 by @tiangolo . \ud83d\udcdd Add External Link, replaces #1898. PR #3571 by @tiangolo .","title":"Docs"},{"location":"release-notes/#internal_15","text":"\ud83c\udfa8 Improve style for sponsors, add radius border. PR #2388 by @Kludex . \ud83d\udc77 Update GitHub Action latest-changes. PR #3574 by @tiangolo . \ud83d\udc77 Update GitHub Action latest-changes. PR #3573 by @tiangolo . \ud83d\udc77 Rename and clarify CI workflow job names. PR #3570 by @tiangolo . \ud83d\udc77 Update GitHub Action latest-changes, strike 2 \u26be. PR #3575 by @tiangolo . \ud83d\udd27 Sort external links in docs to have the most recent at the top. PR #3568 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0661","text":"","title":"0.66.1"},{"location":"release-notes/#translations_11","text":"\ud83c\udf10 Add basic setup for German translations. PR #3522 by @0x4Dark . \ud83c\udf10 Add Portuguese translation for docs/tutorial/security/index.md . PR #3507 by @oandersonmagalhaes . \ud83c\udf10 Add Portuguese translation for docs/deployment/index.md . PR #3337 by @lsglucas .","title":"Translations"},{"location":"release-notes/#internal_16","text":"\ud83d\udd27 Configure strict pytest options and update/refactor tests. Upgrade pytest to >=6.2.4,<7.0.0 and pytest-cov to >=2.12.0,<3.0.0 . Initial PR #2790 by @graingert . \u2b06\ufe0f Upgrade python-jose dependency to >=3.3.0,<4.0.0 for tests. PR #3468 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0660","text":"","title":"0.66.0"},{"location":"release-notes/#features_11","text":"\u2728 Allow setting the response_class to RedirectResponse or FileResponse and returning the URL from the function. New and updated docs are in the tutorial section Custom Response - HTML, Stream, File, others , in RedirectResponse and in FileResponse . PR #3457 by @tiangolo .","title":"Features"},{"location":"release-notes/#fixes_3","text":"\ud83d\udc1b Fix include/exclude for dicts in jsonable_encoder . PR #2016 by @Rubikoid . \ud83d\udc1b Support custom OpenAPI / JSON Schema fields in the generated output OpenAPI. PR #1429 by @jmagnusson .","title":"Fixes"},{"location":"release-notes/#translations_12","text":"\ud83c\udf10 Add Spanish translation for tutorial/query-params.md . PR #2243 by @mariacamilagl . \ud83c\udf10 Add Spanish translation for advanced/response-directly.md . PR #1253 by @jfunez . \ud83c\udf10 Add Spanish translation for advanced/additional-status-codes.md . PR #1252 by @jfunez . \ud83c\udf10 Add Spanish translation for advanced/path-operation-advanced-configuration.md . PR #1251 by @jfunez .","title":"Translations"},{"location":"release-notes/#0653","text":"","title":"0.65.3"},{"location":"release-notes/#fixes_4","text":"\u267b Assume request bodies contain JSON when no Content-Type header is provided. This fixes a breaking change introduced by 0.65.2 with PR #2118 . It should allow upgrading FastAPI applications with clients that send JSON data without a Content-Type header. And there's still protection against CSRFs. PR #3456 by @tiangolo .","title":"Fixes"},{"location":"release-notes/#translations_13","text":"\ud83c\udf10 Initialize Indonesian translations. PR #3014 by @pace-noge . \ud83c\udf10 Add Spanish translation of Tutorial - Path Parameters. PR #2219 by @mariacamilagl . \ud83c\udf10 Add Spanish translation of Tutorial - First Steps. PR #2208 by @mariacamilagl . \ud83c\udf10 Portuguese translation of Tutorial - Body - Fields. PR #3420 by @ComicShrimp . \ud83c\udf10 Add Chinese translation for Tutorial - Request - Forms - and - Files. PR #3249 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Handling - Errors. PR #3299 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Form - Data. PR #3248 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Body - Updates. PR #3237 by @jaystone776 . \ud83c\udf10 Add Chinese translation for FastAPI People. PR #3112 by @hareru . \ud83c\udf10 Add French translation for Project Generation. PR #3197 by @Smlep . \ud83c\udf10 Add French translation for Python Types Intro. PR #3185 by @Smlep . \ud83c\udf10 Add French translation for External Links. PR #3103 by @Smlep . \ud83c\udf10 Add French translation for Alternatives, Inspiration and Comparisons. PR #3020 by @rjNemo . \ud83c\udf10 Fix Chinese translation code snippet mismatch in Tutorial - Python Types Intro. PR #2573 by @BoYanZh . \ud83c\udf10 Add Portuguese translation for Development Contributing. PR #1364 by @Serrones . \ud83c\udf10 Add Chinese translation for Tutorial - Request - Files. PR #3244 by @jaystone776 .","title":"Translations"},{"location":"release-notes/#internal_17","text":"\ud83d\udc65 Update FastAPI People. PR #3450 by @github-actions[bot] . \ud83d\udc65 Update FastAPI People. PR #3319 by @github-actions[bot] . \u2b06 Upgrade docs development dependency on typer-cli to >=0.0.12 to fix conflicts. PR #3429 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0652","text":"","title":"0.65.2"},{"location":"release-notes/#security-fixes","text":"\ud83d\udd12 Check Content-Type request header before assuming JSON. Initial PR #2118 by @patrickkwang . This change fixes a CSRF security vulnerability when using cookies for authentication in path operations with JSON payloads sent by browsers. In versions lower than 0.65.2 , FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json ). So, a request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. But requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests . So, the browser would execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. See CVE-2021-32677 for more details. Thanks to Dima Boger for the security report! \ud83d\ude47\ud83d\udd12","title":"Security fixes"},{"location":"release-notes/#internal_18","text":"\ud83d\udd27 Update sponsors badge, course bundle. PR #3340 by @tiangolo . \ud83d\udd27 Add new gold sponsor Jina \ud83c\udf89. PR #3291 by @tiangolo . \ud83d\udd27 Add new banner sponsor badge for FastAPI courses bundle. PR #3288 by @tiangolo . \ud83d\udc77 Upgrade Issue Manager GitHub Action. PR #3236 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0651","text":"","title":"0.65.1"},{"location":"release-notes/#security-fixes_1","text":"\ud83d\udccc Upgrade pydantic pin, to handle security vulnerability CVE-2021-29510 . PR #3213 by @tiangolo .","title":"Security fixes"},{"location":"release-notes/#0650","text":"","title":"0.65.0"},{"location":"release-notes/#breaking-changes-upgrade_2","text":"\u2b06\ufe0f Upgrade Starlette to 0.14.2 , including internal UJSONResponse migrated from Starlette. This includes several bug fixes and features from Starlette. PR #2335 by @hanneskuettner .","title":"Breaking Changes - Upgrade"},{"location":"release-notes/#translations_14","text":"\ud83c\udf10 Initialize new language Polish for translations. PR #3170 by @neternefer .","title":"Translations"},{"location":"release-notes/#internal_19","text":"\ud83d\udc77 Add GitHub Action cache to speed up CI installs. PR #3204 by @tiangolo . \u2b06\ufe0f Upgrade setup-python GitHub Action to v2. PR #3203 by @tiangolo . \ud83d\udc1b Fix docs script to generate a new translation language with overrides boilerplate. PR #3202 by @tiangolo . \u2728 Add new Deta banner badge with new sponsorship tier \ud83d\ude47. PR #3194 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #3189 by @github-actions[bot] . \ud83d\udd0a Update FastAPI People to allow better debugging. PR #3188 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0640","text":"","title":"0.64.0"},{"location":"release-notes/#features_12","text":"\u2728 Add support for adding multiple examples in request bodies and path, query, cookie, and header params. New docs: Declare Request Example Data . Initial PR #1267 by @austinorr .","title":"Features"},{"location":"release-notes/#fixes_5","text":"\ud83d\udccc Pin SQLAlchemy range for tests, as it doesn't use SemVer. PR #3001 by @tiangolo . \ud83c\udfa8 Add newly required type annotations for mypy. PR #2882 by @tiangolo . \ud83c\udfa8 Remove internal \"type: ignore\", now unnecessary. PR #2424 by @AsakuraMizu .","title":"Fixes"},{"location":"release-notes/#docs_9","text":"\ud83d\udcdd Add link to article in Russian \"FastAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c\". PR #2564 by @trkohler . \ud83d\udcdd Add external link to blog post \"Authenticate Your FastAPI App with Auth0\". PR #2172 by @dompatmore . \ud83d\udcdd Fix broken link to article: Machine learning model serving in Python using FastAPI and Streamlit. PR #2557 by @davidefiocco . \ud83d\udcdd Add FastAPI Medium Article: Deploy a dockerized FastAPI application to AWS. PR #2515 by @vjanz . \u270f Fix typo in Tutorial - Handling Errors. PR #2486 by @johnthagen . \u270f Fix typo in Security OAuth2 scopes. PR #2407 by @jugmac00 . \u270f Fix typo/clarify docs for SQL (Relational) Databases. PR #2393 by @kangni . \ud83d\udcdd Add external link to \"FastAPI for Flask Users\". PR #2280 by @amitness .","title":"Docs"},{"location":"release-notes/#translations_15","text":"\ud83c\udf10 Fix Chinese translation of Tutorial - Query Parameters, remove obsolete content. PR #3051 by @louis70109 . \ud83c\udf10 Add French translation for Tutorial - Background Tasks. PR #3098 by @Smlep . \ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md. PR #3159 by @SueNaEunYang . \ud83c\udf10 Add Korean translation for Tutorial - Query Parameters. PR #2390 by @hard-coders . \ud83c\udf10 Add French translation for FastAPI People. PR #2232 by @JulianMaurin . \ud83c\udf10 Add Korean translation for Tutorial - Path Parameters. PR #2355 by @hard-coders . \ud83c\udf10 Add French translation for Features. PR #2157 by @Jefidev . \ud83d\udc65 Update FastAPI People. PR #3031 by @github-actions[bot] . \ud83c\udf10 Add Chinese translation for Tutorial - Debugging. PR #2737 by @blt232018 . \ud83c\udf10 Add Chinese translation for Tutorial - Security - OAuth2 with Password (and hashing), Bearer with JWT tokens. PR #2642 by @waynerv . \ud83c\udf10 Add Korean translation for Tutorial - Header Parameters. PR #2589 by @mode9 . \ud83c\udf10 Add Chinese translation for Tutorial - Metadata and Docs URLs. PR #2559 by @blt232018 . \ud83c\udf10 Add Korean translation for Tutorial - First Steps. PR #2323 by @hard-coders . \ud83c\udf10 Add Chinese translation for Tutorial - CORS (Cross-Origin Resource Sharing). PR #2540 by @blt232018 . \ud83c\udf10 Add Chinese translation for Tutorial - Middleware. PR #2334 by @lpdswing . \ud83c\udf10 Add Korean translation for Tutorial - Intro. PR #2317 by @hard-coders . \ud83c\udf10 Add Chinese translation for Tutorial - Bigger Applications - Multiple Files. PR #2453 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Security Intro. PR #2443 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Header Parameters. PR #2412 by @maoyibo . \ud83c\udf10 Add Chinese translation for Tutorial - Extra Data Types. PR #2410 by @maoyibo . \ud83c\udf10 Add Japanese translation for Deployment - Docker. PR #2312 by @tokusumi . \ud83c\udf10 Add Japanese translation for Deployment - Versions. PR #2310 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Cookie Parameters. PR #2261 by @alicrazy1947 . \ud83c\udf10 Add Japanese translation for Tutorial - Static files. PR #2260 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Testing. PR #2259 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Debugging. PR #2256 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Middleware. PR #2255 by @tokusumi . \ud83c\udf10 Add Japanese translation for Concurrency and async / await. PR #2058 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Simple OAuth2 with Password and Bearer. PR #2514 by @waynerv . \ud83c\udf10 Add Japanese translation for Deployment - Deta. PR #2314 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Get Current User. PR #2474 by @waynerv . \ud83c\udf10 Add Japanese translation for Deployment - Manually. PR #2313 by @tokusumi . \ud83c\udf10 Add Japanese translation for Deployment - Intro. PR #2309 by @tokusumi . \ud83c\udf10 Add Japanese translation for FastAPI People. PR #2254 by @tokusumi . \ud83c\udf10 Add Japanese translation for Advanced - Path Operation Advanced Configuration. PR #2124 by @Attsun1031 . \ud83c\udf10 Add Japanese translation for External Links. PR #2070 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Body - Updates. PR #1956 by @SwftAlpc . \ud83c\udf10 Add Japanese translation for Tutorial - Form Data. PR #1943 by @SwftAlpc . \ud83c\udf10 Add Japanese translation for Tutorial - Cookie Parameters. PR #1933 by @SwftAlpc .","title":"Translations"},{"location":"release-notes/#internal_20","text":"\ud83d\udd27 Update top banner, point to newsletter. PR #3003 by @tiangolo . \ud83d\udd27 Disable sponsor WeTransfer. PR #3002 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2880 by @github-actions[bot] . \ud83d\udc65 Update FastAPI People. PR #2739 by @github-actions[bot] . \ud83d\udd27 Add new Gold Sponsor Talk Python \ud83c\udf89. PR #2673 by @tiangolo . \ud83d\udd27 Add new Gold Sponsor vim.so \ud83c\udf89. PR #2669 by @tiangolo . \ud83d\udd27 Add FastAPI user survey banner. PR #2623 by @tiangolo . \ud83d\udd27 Add new Bronze Sponsor(s) \ud83e\udd49\ud83c\udf89. PR #2622 by @tiangolo . \ud83d\udcdd Update social links: add Discord, fix GitHub. PR #2621 by @tiangolo . \ud83d\udd27 Update FastAPI People GitHub Sponsors order. PR #2620 by @tiangolo . \ud83d\udd27 Update InvestSuite sponsor data. PR #2608 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2590 by @github-actions[bot] .","title":"Internal"},{"location":"release-notes/#0630","text":"","title":"0.63.0"},{"location":"release-notes/#features_13","text":"\u2728 Improve type annotations, add support for mypy --strict, internally and for external packages. PR #2547 by @tiangolo .","title":"Features"},{"location":"release-notes/#breaking-changes_1","text":"\u2b06\ufe0f Upgrade Uvicorn when installing fastapi[all] to the latest version including uvloop , the new range is uvicorn[standard] >=0.12.0,<0.14.0 . PR #2548 by @tiangolo .","title":"Breaking changes"},{"location":"release-notes/#fixes_6","text":"\ud83d\udc1b PR #2547 (read above) also fixes some false-positive mypy errors with callbacks parameters and when using the OAuth2 class.","title":"Fixes"},{"location":"release-notes/#docs_10","text":"\ud83d\udcdd Update Uvicorn installation instructions to use uvicorn[standard] (includes uvloop). PR #2543 by @tiangolo . \ud83d\udcdd Update title for Deta tutorial. PR #2466 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2454 by @github-actions[bot] .","title":"Docs"},{"location":"release-notes/#translations_16","text":"\ud83c\udf10 Add docs lang selector widget. PR #2542 by @tiangolo . \ud83c\udf10 Add Chinese translation for Tutorial - Response Status Code. PR #2442 by @waynerv . \ud83c\udf10 Start translation of the documentation for the Albanian language. PR #2516 by @vjanz . \ud83c\udf10 Add Chinese translation for Tutorial - Extra Models. PR #2416 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Response Model. PR #2414 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Schema Extra Example. PR #2411 by @maoyibo . \ud83c\udf10 Add Korean translation for Index. PR #2192 by @hard-coders . \ud83c\udf10 Add Japanese translation for Advanced User Guide - Additional Status Codes. PR #2145 by @Attsun1031 .","title":"Translations"},{"location":"release-notes/#internal_21","text":"\ud83d\udc1b Fix docs overrides directory for translations. PR #2541 by @tiangolo . \u2796 Remove Typer as a docs building dependency (covered by typer-cli) to fix pip resolver conflicts. PR #2539 by @tiangolo . \u2728 Add newsletter: FastAPI and friends. PR #2509 by @tiangolo . \u2728 Add new Gold Sponsor: InvestSuite \ud83c\udf89. PR #2508 by @tiangolo . \ud83d\udd27 Add issue template configs. PR #2476 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0620","text":"","title":"0.62.0"},{"location":"release-notes/#features_14","text":"\u2728 Add support for shared/top-level parameters (dependencies, tags, etc). PR #2434 by @tiangolo . Up to now, for several options, the only way to apply them to a group of path operations was in include_router . That works well, but the call to app.include_router() or router.include_router() is normally done in another file. That means that, for example, to apply authentication to all the path operations in a router it would end up being done in a different file, instead of keeping related logic together. Setting options in include_router still makes sense in some cases, for example, to override or increase configurations from a third party router included in an app. But in a router that is part of a bigger application, it would probably make more sense to add those settings when creating the APIRouter . In FastAPI This allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and include_router . dependencies : to include \u2728 top-level dependencies \u2728 that apply to the whole application. E.g. to add global authentication. callbacks : OpenAPI callbacks that apply to all the path operations . deprecated : to mark all the path operations as deprecated. \ud83e\udd37 include_in_schema : to allow excluding all the path operations from the OpenAPI schema. responses : OpenAPI responses that apply to all the path operations . For example: from fastapi import FastAPI , Depends async def some_dependency (): return app = FastAPI ( dependencies = [ Depends ( some_dependency )]) In APIRouter This allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and include_router . For example, it's not needed to set it explicitly when creating callbacks . dependencies : to include \u2728 router-level dependencies \u2728 that apply to all the path operations in a router. Up to now, this was only possible with include_router . callbacks : OpenAPI callbacks that apply to all the path operations in this router. deprecated : to mark all the path operations in a router as deprecated. include_in_schema : to allow excluding all the path operations in a router from the OpenAPI schema. responses : OpenAPI responses that apply to all the path operations in a router. prefix : to set the path prefix for a router. Up to now, this was only possible when calling include_router . tags : OpenAPI tags to apply to all the path operations in this router. For example: from fastapi import APIRouter , Depends async def some_dependency (): return router = APIRouter ( prefix = \"/users\" , dependencies = [ Depends ( some_dependency )]) In include_router Most of these settings are now supported in APIRouter , which normally lives closer to the related code, so it is recommended to use APIRouter when possible. But include_router is still useful to, for example, adding options (like dependencies , prefix , and tags ) when including a third party router, or a generic router that is shared between several projects. This PR allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and FastAPI . deprecated : to mark all the path operations in a router as deprecated in OpenAPI. include_in_schema : to allow disabling all the path operations from showing in the OpenAPI schema. callbacks : OpenAPI callbacks that apply to all the path operations in this router. Note: all the previous parameters are still there, so it's still possible to declare dependencies in include_router .","title":"Features"},{"location":"release-notes/#breaking-changes_2","text":"PR #2434 includes several improvements that shouldn't affect normal use cases, but could affect in advanced scenarios: If you are testing the generated OpenAPI (you shouldn't, FastAPI already tests it extensively for you): the order for tags in include_router and path operations was updated for consistency, but it's a simple order change. If you have advanced custom logic to access each route's route.response_class , or the router.default_response_class , or the app.default_response_class : the default value for response_class in APIRoute and for default_response_class in APIRouter and FastAPI is now a DefaultPlaceholder used internally to handle and solve default values and overrides. The actual response class inside the DefaultPlaceholder is available at route.response_class.value .","title":"Breaking Changes"},{"location":"release-notes/#docs_11","text":"PR #2434 (above) includes new or updated docs: Advanced User Guide - OpenAPI Callbacks . Tutorial - Bigger Applications . Tutorial - Dependencies - Dependencies in path operation decorators . Tutorial - Dependencies - Global Dependencies . \ud83d\udcdd Add FastAPI monitoring blog post to External Links. PR #2324 by @louisguitton . \u270f\ufe0f Fix typo in Deta tutorial. PR #2320 by @tiangolo . \u2728 Add Discord chat. PR #2322 by @tiangolo . \ud83d\udcdd Fix image links for sponsors. PR #2304 by @tiangolo .","title":"Docs"},{"location":"release-notes/#translations_17","text":"\ud83c\udf10 Add Japanese translation for Advanced - Custom Response. PR #2193 by @Attsun1031 . \ud83c\udf10 Add Chinese translation for Benchmarks. PR #2119 by @spaceack . \ud83c\udf10 Add Chinese translation for Tutorial - Body - Nested Models. PR #1609 by @waynerv . \ud83c\udf10 Add Chinese translation for Advanced - Custom Response. PR #1459 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Return a Response Directly. PR #1452 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Additional Status Codes. PR #1451 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Path Operation Advanced Configuration. PR #1447 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced User Guide - Intro. PR #1445 by @RunningIkkyu .","title":"Translations"},{"location":"release-notes/#internal_22","text":"\ud83d\udd27 Update TestDriven link to course in sponsors section. PR #2435 by @tiangolo . \ud83c\udf71 Update sponsor logos. PR #2418 by @tiangolo . \ud83d\udc9a Fix disabling install of Material for MkDocs Insiders in forks, strike 1 \u26be. PR #2340 by @tiangolo . \ud83d\udc1b Fix disabling Material for MkDocs Insiders install in forks. PR #2339 by @tiangolo . \u2728 Add silver sponsor WeTransfer. PR #2338 by @tiangolo . \u2728 Set up and enable Material for MkDocs Insiders for the docs. PR #2325 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0612","text":"","title":"0.61.2"},{"location":"release-notes/#fixes_7","text":"\ud83d\udccc Relax Swagger UI version pin. PR #2089 by @jmriebold . \ud83d\udc1b Fix bug overriding custom HTTPException and RequestValidationError from exception_handlers. PR #1924 by @uriyyo . \u270f\ufe0f Fix typo on dependencies utils and cleanup unused variable. PR #1912 by @Kludex .","title":"Fixes"},{"location":"release-notes/#docs_12","text":"\u270f\ufe0f Fix typo in Tutorial - Path Parameters. PR #2231 by @mariacamilagl . \u270f Fix a stylistic error in docs. PR #2206 by @ddobrinskiy . \u270f Fix capitalizaiton typo in docs. PR #2204 by @imba-tjd . \u270f Fix typo in docs. PR #2179 by @ammarasmro . \ud83d\udcdd Update/fix links in docs to use HTTPS. PR #2165 by @imba-tjd . \u270f Fix typos and add rewording in docs. PR #2159 by @nukopy . \ud83d\udcdd Fix code consistency in examples for Tutorial - User Guide - Path Parameters. PR #2158 by @nukopy . \ud83d\udcdd Fix renamed parameter content_type typo. PR #2135 by @TeoZosa . \u270f Fix minor typos in docs. PR #2122 by @TeoZosa . \u270f Fix typos in docs and source examples. PR #2102 by @AdrianDeAnda . \u270f Fix incorrect Celery URLs in docs. PR #2100 by @CircleOnCircles . \ud83d\udcdd Simplify intro to Python Types, all currently supported Python versions include type hints \ud83c\udf89. PR #2085 by @ninjaaron . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 3. PR #2054 by @hitrust . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 2. PR #2053 by @hitrust . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models. PR #2052 by @hitrust . \u270f Fix typo in Benchmarks. PR #1995 by @AlejoAsd . \ud83d\udcdd Add note in CORS tutorial about allow_origins with [\"*\"] and allow_credentials. PR #1895 by @dsmurrell . \ud83d\udcdd Add deployment to Deta, the first gold sponsor \ud83c\udf89. PR #2303 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2282 by @github-actions[bot] . \u270f\ufe0f Fix uppercase in Tutorial - Query parameters. PR #2245 by @mariacamilagl . \ud83d\udcdd Add articles to External Links. PR #2247 by @tiangolo . \u270f Fix typo in Spanish tutorial index. PR #2020 by @aviloncho .","title":"Docs"},{"location":"release-notes/#translations_18","text":"\ud83c\udf10 Add Japanese translation for Advanced Tutorial - Response Directly. PR #2191 by @Attsun1031 . \ud83d\udcdd Add Japanese translation for Tutorial - Security - First Steps. PR #2153 by @komtaki . \ud83c\udf10 Add Japanese translation for Tutorial - Query Parameters and String Validations. PR #1901 by @SwftAlpc . \ud83c\udf10 Add Portuguese translation for External Links. PR #1443 by @Serrones . \ud83c\udf10 Add Japanese translation for Tutorial - CORS. PR #2125 by @tokusumi . \ud83c\udf10 Add Japanese translation for Contributing. PR #2067 by @komtaki . \ud83c\udf10 Add Japanese translation for Project Generation. PR #2050 by @tokusumi . \ud83c\udf10 Add Japanese translation for Alternatives. PR #2043 by @Attsun1031 . \ud83c\udf10 Add Japanese translation for History Design and Future. PR #2002 by @komtaki . \ud83c\udf10 Add Japanese translation for Benchmarks. PR #1992 by @komtaki . \ud83c\udf10 Add Japanese translation for Tutorial - Header Parameters. PR #1935 by @SwftAlpc . \ud83c\udf10 Add Portuguese translation for Tutorial - First Steps. PR #1861 by @jessicapaz . \ud83c\udf10 Add Portuguese translation for Python Types. PR #1796 by @izaguerreiro . \ud83c\udf10 Add Japanese translation for Help FastAPI. PR #1692 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Body. PR #1683 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Query Params. PR #1674 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/path-params.md. PR #1671 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/first-steps.md. PR #1658 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/index.md. PR #1656 by @tokusumi . \ud83c\udf10 Add translation to Portuguese for Project Generation. PR #1602 by @Serrones . \ud83c\udf10 Add Japanese translation for Features. PR #1625 by @tokusumi . \ud83c\udf10 Initialize new language Korean for translations. PR #2018 by @hard-coders . \ud83c\udf10 Add Portuguese translation of Deployment. PR #1374 by @Serrones .","title":"Translations"},{"location":"release-notes/#internal_23","text":"\ud83d\udd25 Cleanup after upgrade for Docs Previews GitHub Action. PR #2248 by @tiangolo . \ud83d\udc1b Fix CI docs preview, unzip docs. PR #2246 by @tiangolo . \u2728 Add instant docs deploy previews for PRs from forks. PR #2244 by @tiangolo . \u26a1\ufe0f Build docs for languages in parallel in subprocesses to speed up CI. PR #2242 by @tiangolo . \ud83d\udc1b Fix docs order generation for partial translations. PR #2238 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2202 by @github-actions[bot] . \u267b\ufe0f Update FastAPI People GitHub Action to send the PR as github-actions. PR #2201 by @tiangolo . \ud83d\udd27 Update FastAPI People GitHub Action config, run monthly. PR #2199 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action Docker dependency, strike 1 \u26be. PR #2198 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action Docker dependencies. PR #2197 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action when there's nothing to change. PR #2196 by @tiangolo . \ud83d\udc65 Add new section FastAPI People. PR #2195 by @tiangolo . \u2b06\ufe0f Upgrade GitHub Action Latest Changes. PR #2190 by @tiangolo . \u2b06\ufe0f Upgrade GitHub Action Label Approved. PR #2189 by @tiangolo . \ud83d\udd27 Update GitHub Action Label Approved, run at 12:00. PR #2185 by @tiangolo . \ud83d\udc77 Upgrade GitHub Action Latest Changes. PR #2184 by @tiangolo . \ud83d\udc77 Set GitHub Action Label Approved to run daily, not every minute. PR #2163 by @tiangolo . \ud83d\udd25 Remove pr-approvals GitHub Action as it's not compatible with forks. Use the new one. PR #2162 by @tiangolo . \ud83d\udc77 Add GitHub Action Latest Changes. PR #2160 . \ud83d\udc77 Add GitHub Action Label Approved. PR #2161 .","title":"Internal"},{"location":"release-notes/#0611","text":"","title":"0.61.1"},{"location":"release-notes/#fixes_8","text":"Fix issues using jsonable_encoder with SQLAlchemy models directly. PR #1987 .","title":"Fixes"},{"location":"release-notes/#docs_13","text":"Fix typo in NoSQL docs. PR #1980 by @facundojmaero .","title":"Docs"},{"location":"release-notes/#translations_19","text":"Add translation for main page to Japanese PR #1571 by @ryuckel . Initialize French translations. PR #1975 by @JulianMaurin-BM . Initialize Turkish translations. PR #1905 by @ycd .","title":"Translations"},{"location":"release-notes/#internal_24","text":"Improve docs maintainability by updating hl_lines syntax to use ranges. PR #1863 by @la-mar .","title":"Internal"},{"location":"release-notes/#0610","text":"","title":"0.61.0"},{"location":"release-notes/#features_15","text":"Add support for injecting HTTPConnection (as Request and WebSocket ). Useful for sharing app state in dependencies. PR #1827 by @nsidnev . Export WebSocketDisconnect and add example handling WebSocket disconnections to docs. PR #1822 by @rkbeatss .","title":"Features"},{"location":"release-notes/#breaking-changes_3","text":"Require Pydantic > 1.0.0 . Remove support for deprecated Pydantic 0.32.2 . This improves maintainability and allows new features. In FastAPI and APIRouter : Remove path operation decorators related/deprecated parameter response_model_skip_defaults (use response_model_exclude_unset instead). Change path operation decorators parameter default for response_model_exclude from set() to None (as is in Pydantic). In encoders.jsonable_encoder : Remove deprecated skip_defaults , use instead exclude_unset . Set default of exclude from set() to None (as is in Pydantic). PR #1862 . In encoders.jsonable_encoder remove parameter sqlalchemy_safe . It was an early hack to allow returning SQLAlchemy models, but it was never documented, and the recommended way is using Pydantic's orm_mode as described in the tutorial: SQL (Relational) Databases . PR #1864 .","title":"Breaking Changes"},{"location":"release-notes/#docs_14","text":"Add link to the course by TestDriven.io: Test-Driven Development with FastAPI and Docker . PR #1860 . Fix empty log message in docs example about handling errors. PR #1815 by @manlix . Reword text to reduce ambiguity while not being gender-specific. PR #1824 by @Mause .","title":"Docs"},{"location":"release-notes/#internal_25","text":"Add Flake8 linting. Original PR #1774 by @MashhadiNima . Disable Gitter bot, as it's currently broken, and Gitter's response doesn't show the problem. PR #1853 .","title":"Internal"},{"location":"release-notes/#0602","text":"Fix typo in docs for query parameters. PR #1832 by @ycd . Add docs about Async Tests . PR #1619 by @empicano . Raise an exception when using form data ( Form , File ) without having python-multipart installed. Up to now the application would run, and raise an exception only when receiving a request with form data, the new behavior, raising early, will prevent from deploying applications with broken dependencies. It also detects if the correct package python-multipart is installed instead of the incorrect multipart (both importable as multipart ). PR #1851 based on original PR #1627 by @chrisngyn , @YKo20010 , @kx-chen . Re-enable Gitter releases bot. PR #1831 . Add link to async SQL databases tutorial from main SQL tutorial. PR #1813 by @short2strings . Fix typo in tutorial about behind a proxy. PR #1807 by @toidi . Fix typo in Portuguese docs. PR #1795 by @izaguerreiro . Add translations setup for Ukrainian. PR #1830 . Add external link Build And Host Fast Data Science Applications Using FastAPI . PR #1786 by @Kludex . Fix encoding of Pydantic models that inherit from others models with custom json_encoders . PR #1769 by @henrybetts . Simplify and improve jsonable_encoder . PR #1754 by @MashhadiNima . Simplify internal code syntax in several points. PR #1753 by @uriyyo . Improve internal typing, declare Optional parameters. PR #1731 by @MashhadiNima . Add external link Deploy FastAPI on Azure App Service to docs. PR #1726 by @windson . Add link to Starlette docs about WebSocket testing. PR #1717 by @hellocoldworld . Refactor generating dependant, merge for loops. PR #1714 by @Bloodielie . Update example for templates with Jinja to include HTML media type. PR #1690 by @frafra . Fix typos in docs for security. PR #1678 by @nilslindemann . Fix typos in docs for dependencies. PR #1675 by @nilslindemann . Fix type annotation for **extra parameters in FastAPI . PR #1659 by @bharel . Bump MkDocs Material to fix docs in browsers with dark mode. PR #1789 by @adriencaccia . Remove docs preview comment from each commit. PR #1826 . Update GitHub context extraction for Gitter notification bot. PR #1766 .","title":"0.60.2"},{"location":"release-notes/#0601","text":"Add debugging logs for GitHub actions to introspect GitHub hidden context. PR #1764 . Use OS preference theme for online docs. PR #1760 by @adriencaccia . Upgrade Starlette to version 0.13.6 to handle a vulnerability when using static files in Windows. PR #1759 by @jamesag26 . Pin Swagger UI temporarily, waiting for a fix for swagger-api/swagger-ui#6249 . PR #1763 . Update GitHub Actions, use commit from PR for docs preview, not commit from pre-merge. PR #1761 . Update GitHub Actions, refactor Gitter bot. PR #1746 .","title":"0.60.1"},{"location":"release-notes/#0600","text":"Add GitHub Action to watch for missing preview docs and trigger a preview deploy. PR #1740 . Add custom GitHub Action to get artifact with docs preview. PR #1739 . Add new GitHub Actions to preview docs from PRs. PR #1738 . Add XML test coverage to support GitHub Actions. PR #1737 . Update badges and remove Travis now that GitHub Actions is the main CI. PR #1736 . Add GitHub Actions for CI, move from Travis. PR #1735 . Add support for adding OpenAPI schema for GET requests with a body. PR #1626 by @victorphoenix3 .","title":"0.60.0"},{"location":"release-notes/#0590","text":"Fix typo in docstring for OAuth2 utils. PR #1621 by @tomarv2 . Update JWT docs to use Python-jose instead of PyJWT. Initial PR #1610 by @asheux . Fix/re-enable search bar in docs. PR #1703 . Auto-generate a \"server\" in OpenAPI servers when there's a root_path instead of prefixing all the paths : Add a new parameter for FastAPI classes: root_path_in_servers to disable the auto-generation of servers . New docs about root_path and servers in Additional Servers . Update OAuth2 examples to use a relative URL for tokenUrl=\"token\" to make sure those examples keep working as-is even when behind a reverse proxy. Initial PR #1596 by @rkbeatss . Fix typo/link in External Links. PR #1702 . Update handling of External Links to use a data file and allow translating the headers without becoming obsolete quickly when new links are added. PR #https://github.com/tiangolo/fastapi/pull/1701 . Add external link Machine learning model serving in Python using FastAPI and Streamlit to docs. PR #1669 by @davidefiocco . Add note in docs on order in Pydantic Unions. PR #1591 by @kbanc . Improve support for tests in editor. PR #1699 . Pin dependencies. PR #1697 . Update isort to version 5.x.x. PR #1670 by @asheux .","title":"0.59.0"},{"location":"release-notes/#0581","text":"Add link in docs to Pydantic data types. PR #1612 by @tayoogunbiyi . Fix link in warning logs for openapi_prefix . PR #1611 by @bavaria95 . Fix bad link in docs. PR #1603 by @molto0504 . Add Vim temporary files to .gitignore for contributors using Vim. PR #1590 by @asheux . Fix typo in docs for sub-applications. PR #1578 by @schlpbch . Use Optional in all the examples in the docs. Original PR #1574 by @chrisngyn , @kx-chen , @YKo20010 . Updated and merged PR #1644 . Update tests and handling of response_model_by_alias . PR #1642 . Add translation to Chinese for Body - Fields - \u8bf7\u6c42\u4f53 - \u5b57\u6bb5 . PR #1569 by @waynerv . Update Chinese translation of main page. PR #1564 by @waynerv . Add translation to Chinese for Body - Multiple Parameters - \u8bf7\u6c42\u4f53 - \u591a\u4e2a\u53c2\u6570 . PR #1532 by @waynerv . Add translation to Chinese for Path Parameters and Numeric Validations - \u8def\u5f84\u53c2\u6570\u548c\u6570\u503c\u6821\u9a8c . PR #1506 by @waynerv . Add GitHub action to auto-label approved PRs (mainly for translations). PR #1638 .","title":"0.58.1"},{"location":"release-notes/#0580","text":"Deep merge OpenAPI responses to preserve all the additional metadata. PR #1577 . Mention in docs that only main app events are run (not sub-apps). PR #1554 by @amacfie . Fix body validation error response, do not include body variable when it is not embedded. PR #1553 by @amacfie . Fix testing OAuth2 security scopes when using dependency overrides. PR #1549 by @amacfie . Fix Model for JSON Schema keyword not as a JSON Schema instead of a list. PR #1548 by @v-do . Add support for OpenAPI servers . PR #1547 by @mikaello .","title":"0.58.0"},{"location":"release-notes/#0570","text":"Remove broken link from \"External Links\". PR #1565 by @victorphoenix3 . Update/fix docs for WebSockets with dependencies . Original PR #1540 by @ChihSeanHsu . Add support for Python's http.HTTPStatus in status_code parameters. PR #1534 by @retnikt . When using Pydantic models with __root__ , use the internal value in jsonable_encoder . PR #1524 by @patrickkwang . Update docs for path parameters. PR #1521 by @yankeexe . Update docs for first steps, links and rewording. PR #1518 by @yankeexe . Enable showCommonExtensions in Swagger UI to show additional validations like maxLength , etc. PR #1466 by @TiewKH . Make OAuth2PasswordRequestFormStrict importable directly from fastapi.security . PR #1462 by @RichardHoekstra . Add docs about Default response class . PR #1455 by @TezRomacH . Add note in docs about additional parameters response_model_exclude_defaults and response_model_exclude_none in Response Model . PR #1427 by @wshayes . Add note about PyCharm Pydantic plugin to docs. PR #1420 by @koxudaxi . Update and clarify testing function name. PR #1395 by @chenl . Fix duplicated headers created by indirect dependencies that use the request directly. PR #1386 by @obataku from tests by @scottsmith2gmail . Upgrade Starlette version to 0.13.4 . PR #1361 by @rushton . Improve error handling and feedback for requests with invalid JSON. PR #1354 by @aviramha . Add support for declaring metadata for tags in OpenAPI. New docs at Tutorial - Metadata and Docs URLs - Metadata for tags . PR #1348 by @thomas-maschler . Add basic setup for Russian translations. PR #1566 . Remove obsolete Chinese articles after adding official community translations. PR #1510 by @waynerv . Add __repr__ for path operation function parameter helpers (like Query , Depends , etc) to simplify debugging. PR #1560 by @rkbeatss and @victorphoenix3 .","title":"0.57.0"},{"location":"release-notes/#0561","text":"Add link to advanced docs from tutorial. PR #1512 by @kx-chen . Remove internal unnecessary f-strings. PR #1526 by @kotamatsuoka . Add translation to Chinese for Query Parameters and String Validations - \u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c . PR #1500 by @waynerv . Add translation to Chinese for Request Body - \u8bf7\u6c42\u4f53 . PR #1492 by @waynerv . Add translation to Chinese for Help FastAPI - Get Help - \u5e2e\u52a9 FastAPI - \u83b7\u53d6\u5e2e\u52a9 . PR #1465 by @waynerv . Add translation to Chinese for Query Parameters - \u67e5\u8be2\u53c2\u6570 . PR #1454 by @waynerv . Add translation to Chinese for Contributing - \u5f00\u53d1 - \u8d21\u732e . PR #1460 by @waynerv . Add translation to Chinese for Path Parameters - \u8def\u5f84\u53c2\u6570 . PR #1453 by @waynerv . Add official Microsoft project generator for serving spaCy with FastAPI and Azure Cognitive Skills to Project Generators . PR #1390 by @kabirkhan . Update docs in Python Types Intro to include info about Optional . Original PR #1377 by @yaegassy . Fix support for callable class dependencies with yield . PR #1365 by @mrosales . Fix/remove incorrect error logging when a client sends invalid payloads. PR #1351 by @dbanty . Add translation to Chinese for First Steps - \u7b2c\u4e00\u6b65 . PR #1323 by @waynerv . Fix generating OpenAPI for apps using callbacks with routers including Pydantic models. PR #1322 by @nsidnev . Optimize internal regex performance in get_path_param_names() . PR #1243 by @heckad . Remove *, from functions in docs where it's not needed. PR #1239 by @pankaj-giri . Start translations for Italian. PR #1557 by @csr .","title":"0.56.1"},{"location":"release-notes/#0560","text":"Add support for ASGI root_path : Use root_path internally for mounted applications, so that OpenAPI and the docs UI works automatically without extra configurations and parameters. Add new root_path parameter for FastAPI applications to provide it in cases where it can be set with the command line (e.g. for Uvicorn and Hypercorn, with the parameter --root-path ). Deprecate openapi_prefix parameter in favor of the new root_path parameter. Add new/updated docs for Sub Applications - Mounts , without openapi_prefix (as it is now handled automatically). Add new/updated docs for Behind a Proxy , including how to setup a local testing proxy with Traefik and using root_path . Update docs for Extending OpenAPI with the new openapi_prefix parameter passed (internally generated from root_path ). Original PR #1199 by @iksteen . Update new issue templates and docs: Help FastAPI - Get Help . PR #1531 . Update GitHub action issue-manager. PR #1520 . Add new links: English articles : Real-time Notifications with Python and Postgres by Guillermo Cruz . Microservice in Python using FastAPI by Paurakh Sharma Humagain . Build simple API service with Python FastAPI \u2014 Part 1 by cuongld2 . FastAPI + Zeit.co = \ud83d\ude80 by Paul Sec . Build a web API from scratch with FastAPI - the workshop by Sebasti\u00e1n Ram\u00edrez (tiangolo) . Build a Secure Twilio Webhook with Python and FastAPI by Twilio . Using FastAPI with Django by Stavros Korokithakis . Introducing Dispatch by Netflix . Podcasts : Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (tiangolo) by Podcast. __init__ . Talks : PyConBY 2020: Serve ML models easily with FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . [VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PR #1467 . Add translation to Chinese for Python Types Intro - Python \u7c7b\u578b\u63d0\u793a\u7b80\u4ecb . PR #1197 by @waynerv .","title":"0.56.0"},{"location":"release-notes/#0551","text":"Fix handling of enums with their own schema in path parameters. To support samuelcolvin/pydantic#1432 in FastAPI. PR #1463 .","title":"0.55.1"},{"location":"release-notes/#0550","text":"Allow enums to allow them to have their own schemas in OpenAPI. To support samuelcolvin/pydantic#1432 in FastAPI. PR #1461 . Add links for funding through GitHub sponsors . PR #1425 . Update issue template for for questions. PR #1344 by @retnikt . Update warning about storing passwords in docs. PR #1336 by @skorokithakis . Fix typo. PR #1326 by @chenl . Add translation to Portuguese for Alternatives, Inspiration and Comparisons - Alternativas, Inspira\u00e7\u00e3o e Compara\u00e7\u00f5es . PR #1325 by @Serrones . Fix 2 typos in docs. PR #1324 by @waynerv . Update CORS docs, fix correct default of max_age=600 . PR #1301 by @derekbekoe . Add translation of main page to Portuguese . PR #1300 by @Serrones . Re-word and clarify docs for extra info in fields. PR #1299 by @chris-allnutt . Make sure the * in short features in the docs is consistent (after . ) in all languages. PR #1424 . Update order of execution for get_db in SQLAlchemy tutorial. PR #1293 by @bcb . Fix typos in Async docs. PR #1423 .","title":"0.55.0"},{"location":"release-notes/#0542","text":"Add translation to Spanish for Concurrency and async / await - Concurrencia y async / await . PR #1290 by @alvaropernas . Remove obsolete vote link. PR #1289 by @donhui . Allow disabling docs UIs by just disabling OpenAPI with openapi_url=None . New example in docs: Advanced: Conditional OpenAPI . PR #1421 . Add translation to Portuguese for Benchmarks - Compara\u00e7\u00f5es . PR #1274 by @Serrones . Add translation to Portuguese for Tutorial - User Guide - Intro - Tutorial - Guia de Usu\u00e1rio - Introdu\u00e7\u00e3o . PR #1259 by @marcosmmb . Allow using Unicode in MkDocs for translations. PR #1419 . Add translation to Spanish for Advanced User Guide - Intro - Gu\u00eda de Usuario Avanzada - Introducci\u00f3n . PR #1250 by @jfunez . Add translation to Portuguese for History, Design and Future - Hist\u00f3ria, Design e Futuro . PR #1249 by @marcosmmb . Add translation to Portuguese for Features - Recursos . PR #1248 by @marcosmmb . Add translation to Spanish for Tutorial - User Guide - Intro - Tutorial - Gu\u00eda de Usuario - Introducci\u00f3n . PR #1244 by @MartinEliasQ . Add translation to Chinese for Deployment - \u90e8\u7f72 . PR #1203 by @RunningIkkyu . Add translation to Chinese for Tutorial - User Guide - Intro - \u6559\u7a0b - \u7528\u6237\u6307\u5357 - \u7b80\u4ecb . PR #1202 by @waynerv . Add translation to Chinese for Features - \u7279\u6027 . PR #1192 by @Dustyposa . Add translation for main page to Chinese PR #1191 by @waynerv . Update docs for project generation. PR #1287 . Add Spanish translation for Introducci\u00f3n a los Tipos de Python (Python Types Intro) . PR #1237 by @mariacamilagl . Add Spanish translation for Caracter\u00edsticas (Features) . PR #1220 by @mariacamilagl .","title":"0.54.2"},{"location":"release-notes/#0541","text":"Update database test setup. PR #1226 . Improve test debugging by showing response text in failing tests. PR #1222 by @samuelcolvin .","title":"0.54.1"},{"location":"release-notes/#0540","text":"Fix grammatical mistakes in async docs. PR #1188 by @mickeypash . Add support for response_model_exclude_defaults and response_model_exclude_none : Deprecate the parameter include_none in jsonable_encoder and add the inverted exclude_none , to keep in sync with Pydantic. PR #1166 by @voegtlel . Add example about Testing a Database . Initial PR #1144 by @duganchen . Update docs for Development - Contributing: Translations including note about reviewing translation PRs. #1215 . Update log style in README.md for GitHub Markdown compatibility. PR #1200 by #geekgao . Add Python venv env to .gitignore . PR #1212 by @cassiobotaro . Start Portuguese translations. PR #1210 by @cassiobotaro . Update docs for Pydantic's Settings using a dependency with @lru_cache() . PR #1214 . Add first translation to Spanish FastAPI . PR #1201 by @mariacamilagl . Add docs about Settings and Environment Variables . Initial PR 1118 by @alexmitelman .","title":"0.54.0"},{"location":"release-notes/#0532","text":"Fix automatic embedding of body fields for dependencies and sub-dependencies. Original PR #1079 by @Toad2186 . Fix dependency overrides in WebSocket testing. PR #1122 by @amitlissack . Fix docs script to ensure languages are always sorted. PR #1189 . Start translations for Chinese. PR #1187 by @RunningIkkyu . Add docs for Schema Extra - Example . PR #1185 .","title":"0.53.2"},{"location":"release-notes/#0531","text":"Fix included example after translations refactor. PR #1182 . Add docs example for example in Field . Docs at Body - Fields: JSON Schema extras . PR #1106 by @JohnPaton . Fix using recursive models in response_model . PR #1164 by @voegtlel . Add docs for Pycharm Debugging . PR #1096 by @youngquan . Fix typo in docs. PR #1148 by @PLNech . Update Windows development environment instructions. PR #1179 .","title":"0.53.1"},{"location":"release-notes/#0530","text":"Update test coverage badge. PR #1175 . Add orjson to pip install fastapi[all] . PR #1161 by @michael0liver . Fix included example for GZipMiddleware . PR #1138 by @arimbr . Fix class name in docstring for OAuth2PasswordRequestFormStrict . PR #1126 by @adg-mh . Clarify function name in example in docs. PR #1121 by @tmsick . Add external link Apache Kafka producer and consumer with FastAPI and aiokafka to docs. PR #1112 by @iwpnd . Fix serialization when using by_alias or exclude_unset and returning data with Pydantic models. PR #1074 by @juhovh-aiven . Add Gitter chat to docs. PR #1061 by @aakashnand . Update and simplify translations docs. PR #1171 . Update development of FastAPI docs, set address to 127.0.0.1 to improve Windows support. PR #1169 by @mariacamilagl . Add support for docs translations. New docs: Development - Contributing: Docs: Translations . PR #1168 . Update terminal styles in docs and add note about Typer , the FastAPI of CLIs . PR #1139 .","title":"0.53.0"},{"location":"release-notes/#0520","text":"Add new high-performance JSON response class using orjson . New docs: Custom Response - HTML, Stream, File, others: ORJSONResponse . PR #1065 .","title":"0.52.0"},{"location":"release-notes/#0510","text":"Re-export utils from Starlette: This allows using things like from fastapi.responses import JSONResponse instead of from starlette.responses import JSONResponse . It's mainly syntax sugar, a convenience for developer experience. Now Request , Response , WebSocket , status can be imported directly from fastapi as in from fastapi import Response . This is because those are frequently used, to use the request directly, to set headers and cookies, to get status codes, etc. Documentation changes in many places, but new docs and noticeable improvements: Custom Response - HTML, Stream, File, others . Advanced Middleware . Including WSGI - Flask, Django, others . PR #1064 .","title":"0.51.0"},{"location":"release-notes/#0500","text":"Add link to Release Notes from docs about pinning versions for deployment. PR #1058 . Upgrade code to use the latest version of Starlette, including: Several bug fixes. Optional redirects of slashes, with or without ending in / . Events for routers, \"startup\" , and \"shutdown\" . PR #1057 . Add docs about pinning FastAPI versions for deployment: Deployment: FastAPI versions . PR #1056 .","title":"0.50.0"},{"location":"release-notes/#0492","text":"Fix links in release notes. PR #1052 by @sattosan . Fix typo in release notes. PR #1051 by @sattosan . Refactor/clarify serialize_response parameter name to avoid confusion. PR #1031 by @patrickmckenna . Refactor calling each a path operation's handler function in an isolated function, to simplify profiling. PR #1027 by @sm-Fifteen . Add missing dependencies for testing. PR #1026 by @sm-Fifteen . Fix accepting valid types for response models, including Python types like List[int] . PR #1017 by @patrickmckenna . Fix format in SQL tutorial. PR #1015 by @vegarsti .","title":"0.49.2"},{"location":"release-notes/#0491","text":"Fix path operation duplicated parameters when used in dependencies and the path operation function. PR #994 by @merowinger92 . Update Netlify previews deployment GitHub action as the fix is already merged and there's a new release. PR #1047 . Move mypy configurations to config file. PR #987 by @hukkinj1 . Temporary fix to Netlify previews not deployable from PRs from forks. PR #1046 by @mariacamilagl .","title":"0.49.1"},{"location":"release-notes/#0490","text":"Fix encoding of pathlib paths in jsonable_encoder . PR #978 by @patrickmckenna . Add articles to External Links : Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03 (Django, Flask, responder, FastAPI, japronto) and [FastAPI] Python\u88fd\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI\u306b\u5165\u9580\u3059\u308b . PR #974 by @tokusumi . Fix broken links in docs. PR #949 by @tsotnikov . Fix small typos. PR #941 by @NikitaKolesov . Update and clarify docs for dependencies with yield . PR #986 . Add Mermaid JS support for diagrams in docs. Add first diagrams to Dependencies: First Steps and Dependencies with yield and HTTPException . PR #985 . Update CI to run docs deployment in GitHub actions. PR #983 . Allow callable s in path operation functions , like functions modified with functools.partial . PR #977 .","title":"0.49.0"},{"location":"release-notes/#0480","text":"Run linters first in tests to error out faster. PR #948 . Log warning about email-validator only when used. PR #946 . Simplify Peewee docs with double dependency with yield . PR #947 . Add article External Links : Create and Deploy FastAPI app to Heroku . PR #942 by @windson . Update description of Sanic, as it is now ASGI too. PR #932 by @raphaelauv . Fix typo in main page. PR #920 by @mMarzeta . Fix parsing of possibly invalid bodies. PR #918 by @dmontagu . Fix typo #916 by @adursun . Allow Any type for enums in OpenAPI. PR #906 by @songzhi . Add article to External Links : How to continuously deploy a FastAPI to AWS Lambda with AWS SAM . PR #901 by @iwpnd . Add note about using Body parameters without Pydantic. PR #900 by @pawamoy . Fix Pydantic field clone logic. PR #899 by @deuce2367 . Fix link in middleware docs. PR #893 by @linchiwei123 . Rename default API title from \"Fast API\" to \"FastAPI\" for consistency. PR #890 .","title":"0.48.0"},{"location":"release-notes/#0471","text":"Fix model filtering in response_model , cloning sub-models. PR #889 . Fix FastAPI serialization of Pydantic models using ORM mode blocking the event loop. PR #888 .","title":"0.47.1"},{"location":"release-notes/#0470","text":"Refactor documentation to make a simpler and shorter Tutorial - User Guide and an additional Advanced User Guide with all the additional docs. PR #887 . Tweak external links, Markdown format, typos. PR #881 . Fix bug in tutorial handling HTTP Basic Auth username and password . PR #865 by @isaevpd . Fix handling form path operation parameters declared with pure classes like list , tuple , etc. PR #856 by @nsidnev . Add request body to RequestValidationError , new docs: Use the RequestValidationError body . Initial PR #853 by @aviramha . Update External Links with new links and dynamic GitHub projects with fastapi topic. PR #850 . Fix Peewee contextvars handling in docs: SQL (Relational) Databases with Peewee . PR #879 . Setup development environment with Python's Venv and Flit, instead of requiring the extra Pipenv duplicating dependencies. Updated docs: Development - Contributing . PR #877 . Update docs for HTTP Basic Auth to improve security against timing attacks. Initial PR #807 by @zwass .","title":"0.47.0"},{"location":"release-notes/#0460","text":"Fix typos and tweak configs. PR #837 . Add link to Chinese article in External Links . PR 810 by @wxq0309 . Implement OAuth2AuthorizationCodeBearer class. PR #797 by @kuwv . Update example upgrade in docs main page. PR #795 by @cdeil . Fix callback handling for sub-routers. PR #792 by @jekirl . Fix typos. PR #784 by @kkinder . Add 4 Japanese articles to External Links . PR #783 by @HymanZHAN . Add support for subtypes of main types in jsonable_encoder , e.g. asyncpg's UUIDs. PR #756 by @RmStorm . Fix usage of Pydantic's HttpUrl in docs. PR #832 by @Dustyposa . Fix Twitter links in docs. PR #813 by @justindujardin . Add docs for correctly using FastAPI with Peewee ORM . Including how to overwrite parts of Peewee to correctly handle async threads. PR #789 .","title":"0.46.0"},{"location":"release-notes/#0450","text":"Add support for OpenAPI Callbacks: New docs: OpenAPI Callbacks . Refactor generation of operationId s to be valid Python names (also valid variables in most languages). Add default_response_class parameter to APIRouter . Original PR #722 by @booooh . Refactor logging to use the same logger everywhere, update log strings and levels. PR #781 . Add article to External Links : \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c FastAPI? . PR #766 by @prostomarkeloff . Remove gender bias in docs for handling errors. PR #780 . Original idea in PR #761 by @classywhetten . Rename docs and references to body-schema to body-fields to keep in line with Pydantic. PR #746 by @prostomarkeloff .","title":"0.45.0"},{"location":"release-notes/#0441","text":"Add GitHub social preview images to git. PR #752 . Update PyPI \"trove classifiers\". PR #751 . Add full support for Python 3.8. Enable Python 3.8 in full in Travis. PR 749 . Update \"new issue\" templates. PR #749 . Fix serialization of errors for exotic Pydantic types. PR #748 by @dmontagu .","title":"0.44.1"},{"location":"release-notes/#0440","text":"Add GitHub action Issue Manager . PR #742 . Fix typos in docs. PR 734 by @bundabrg . Fix usage of custom_encoder in jsonable_encoder . PR #715 by @matrixise . Fix invalid XML example. PR 710 by @OcasoProtal . Fix typos and update wording in deployment docs. PR #700 by @marier-nico . Add note about dependencies in APIRouter docs. PR #698 by @marier-nico . Add support for async class methods as dependencies #681 by @frankie567 . Add FastAPI with Swagger UI cheatsheet to external links. PR #671 by @euri10 . Fix typo in HTTP protocol in CORS example. PR #647 by @forestmonster . Add support for Pydantic versions 1.0.0 and above, with temporary (deprecated) backwards compatibility for Pydantic 0.32.2 . PR #646 by @dmontagu .","title":"0.44.0"},{"location":"release-notes/#0430","text":"Update docs to reduce gender bias. PR #645 by @ticosax . Add docs about overriding the operationId for all the path operations based on their function name. PR #642 by @SKalt . Fix validators in models generating an incorrect key order. PR #637 by @jaddison . Generate correct OpenAPI docs for responses with no content. PR #621 by @brotskydotcom . Remove $ from Bash code blocks in docs for consistency. PR #613 by @nstapelbroek . Add docs for self-serving docs' (Swagger UI) static assets , e.g. to use the docs offline, or without Internet. Initial PR #557 by @svalouch . Fix black linting after upgrade. PR #682 by @frankie567 .","title":"0.43.0"},{"location":"release-notes/#0420","text":"Add dependencies with yield , a.k.a. exit steps, context managers, cleanup, teardown, ... This allows adding extra code after a dependency is done. It can be used, for example, to close database connections. Dependencies with yield can be normal or async , FastAPI will run normal dependencies in a threadpool. They can be combined with normal dependencies. It's possible to have arbitrary trees/levels of dependencies with yield and exit steps are handled in the correct order automatically. It works by default in Python 3.7 or above. For Python 3.6, it requires the extra backport dependencies: async-exit-stack async-generator New docs at Dependencies with yield . Updated database docs SQL (Relational) Databases: Main FastAPI app . PR #595 . Fix sitemap.xml in website. PR #598 by @samuelcolvin .","title":"0.42.0"},{"location":"release-notes/#0410","text":"Upgrade required Starlette to 0.12.9 , the new range is >=0.12.9,<=0.12.9 . Add State to FastAPI apps at app.state . PR #593 . Improve handling of custom classes for Request s and APIRoute s. This helps to more easily solve use cases like: Reading a body before and/or after a request (equivalent to a middleware). Run middleware-like code only for a subset of path operations . Process a request before passing it to a path operation function . E.g. decompressing, deserializing, etc. Processing a response after being generated by path operation functions but before returning it. E.g. adding custom headers, logging, adding extra metadata. New docs section: Custom Request and APIRoute class . PR #589 by @dmontagu . Fix preserving custom route class in routers when including other sub-routers. PR #538 by @dmontagu .","title":"0.41.0"},{"location":"release-notes/#0400","text":"Add notes to docs about installing python-multipart when using forms. PR #574 by @sliptonic . Generate OpenAPI schemas in alphabetical order. PR #554 by @dmontagu . Add support for truncating docstrings from path operation functions . New docs at Advanced description from docstring . PR #556 by @svalouch . Fix DOCTYPE in HTML files generated for Swagger UI and ReDoc. PR #537 by @Trim21 . Fix handling 4XX responses overriding default 422 validation error responses. PR #517 by @tsouvarev . Fix typo in documentation for Simple HTTP Basic Auth . PR #514 by @prostomarkeloff . Fix incorrect documentation example in first steps . PR #511 by @IgnatovFedor . Add support for Swagger UI initOauth settings with the parameter swagger_ui_init_oauth . PR #499 by @zamiramir .","title":"0.40.0"},{"location":"release-notes/#0390","text":"Allow path parameters to have default values (e.g. None ) and discard them instead of raising an error. This allows declaring a parameter like user_id: str = None that can be taken from a query parameter, but the same path operation can be included in a router with a path /users/{user_id} , in which case will be taken from the path and will be required. PR #464 by @jonathanunderwood . Add support for setting a default_response_class in the FastAPI instance or in include_router . Initial PR #467 by @toppk . Add support for type annotations using strings and from __future__ import annotations . PR #451 by @dmontagu .","title":"0.39.0"},{"location":"release-notes/#0381","text":"Fix incorrect Request class import. PR #493 by @kamalgill .","title":"0.38.1"},{"location":"release-notes/#0380","text":"Add recent articles to External Links and recent opinions. PR #490 . Upgrade support range for Starlette to include 0.12.8 . The new range is >=0.11.1,<=0.12.8\" . PR #477 by @dmontagu . Upgrade support to Pydantic version 0.32.2 and update internal code to use it (breaking change). PR #463 by @dmontagu .","title":"0.38.0"},{"location":"release-notes/#0370","text":"Add support for custom route classes for advanced use cases. PR #468 by @dmontagu . Allow disabling Google fonts in ReDoc. PR #481 by @b1-luettje . Fix security issue: when returning a sub-class of a response model and using skip_defaults it could leak information. PR #485 by @dmontagu . Enable tests for Python 3.8-dev. PR #465 by @Jamim . Add support and tests for Pydantic dataclasses in response_model . PR #454 by @dconathan . Fix typo in OAuth2 JWT tutorial. PR #447 by @pablogamboa . Use the media_type parameter in Body() params to set the media type in OpenAPI for requestBody . PR #439 by @divums . Add article Deploying a scikit-learn model with ONNX and FastAPI by https://www.linkedin.com/in/nico-axtmann . PR #438 by @naxty . Allow setting custom 422 (validation error) response/schema in OpenAPI. And use media type from response class instead of fixed application/json (the default). PR #437 by @divums . Fix using \"default\" extra response with status codes at the same time. PR #489 . Allow additional responses to use status code ranges (like 5XX and 4XX ) and \"default\" . PR #435 by @divums .","title":"0.37.0"},{"location":"release-notes/#0360","text":"Fix implementation for skip_defaults when returning a Pydantic model. PR #422 by @dmontagu . Fix OpenAPI generation when using the same dependency in multiple places for the same path operation . PR #417 by @dmontagu . Allow having empty paths in path operations used with include_router and a prefix . This allows having a router for /cats and all its path operations , while having one of them for /cats . Now it doesn't have to be only /cats/ (with a trailing slash). To use it, declare the path in the path operation as the empty string ( \"\" ). PR #415 by @vitalik . Fix mypy error after merging PR #415. PR #462 .","title":"0.36.0"},{"location":"release-notes/#0350","text":"Fix typo in routing assert . PR #419 by @pablogamboa . Fix typo in docs. PR #411 by @bronsen . Fix parsing a body type declared with Union . PR #400 by @koxudaxi .","title":"0.35.0"},{"location":"release-notes/#0340","text":"Upgrade Starlette supported range to include the latest 0.12.7 . The new range is 0.11.1,<=0.12.7 . PR #367 by @dedsm . Add test for OpenAPI schema with duplicate models from PR #333 by @dmontagu . PR #385 .","title":"0.34.0"},{"location":"release-notes/#0330","text":"Upgrade Pydantic version to 0.30.0 . PR #384 by @jekirl .","title":"0.33.0"},{"location":"release-notes/#0320","text":"Fix typo in docs for features. PR #380 by @MartinoMensio . Fix source code limit for example in Query Parameters . PR #366 by @Smashman . Update wording in docs about OAuth2 scopes . PR #371 by @cjw296 . Update docs for Enum s to inherit from str and improve Swagger UI rendering. PR #351 . Fix regression, add Swagger UI deep linking again. PR #350 . Add test for having path templates in prefix of .include_router . PR #349 . Add note to docs: Include the same router multiple times with different prefix . PR #348 . Fix OpenAPI/JSON Schema generation for two functions with the same name (in different modules) with the same composite bodies. Composite bodies' IDs are now based on path, not only on route name, as the auto-generated name uses the function names, that can be duplicated in different modules. The same new ID generation applies to response models. This also changes the generated title for those models. Only composite bodies and response models are affected because those are generated dynamically, they don't have a module (a Python file). This also adds the possibility of using .include_router() with the same APIRouter multiple times, with different prefixes, e.g. /api/v2 and /api/latest , and it will now work correctly. PR #347 .","title":"0.32.0"},{"location":"release-notes/#0310","text":"Upgrade Pydantic supported version to 0.29.0 . New supported version range is \"pydantic >=0.28,<=0.29.0\" . This adds support for Pydantic Generic Models , kudos to @dmontagu . PR #344 .","title":"0.31.0"},{"location":"release-notes/#0301","text":"Add section in docs about External Links and Articles . PR #341 . Remove Pipfile.lock from the repository as it is only used by FastAPI contributors (developers of FastAPI itself). See the PR for more details. PR #340 . Update section about Help FastAPI - Get Help . PR #339 . Refine internal type declarations to improve/remove Mypy errors in users' code. PR #338 . Update and clarify SQL tutorial with SQLAlchemy . PR #331 by @mariacamilagl . Add SQLite online viewers to the docs . PR #330 by @cyrilbois .","title":"0.30.1"},{"location":"release-notes/#0300","text":"Add support for Pydantic's ORM mode: Updated documentation about SQL with SQLAlchemy, using Pydantic models with ORM mode, SQLAlchemy models with relations, separation of files, simplification of code and other changes. New docs: SQL (Relational) Databases . The new support for ORM mode fixes issues/adds features related to ORMs with lazy-loading, hybrid properties, dynamic/getters (using @property decorators) and several other use cases. This applies to ORMs like SQLAlchemy, Peewee, Tortoise ORM, GINO ORM and virtually any other. If your path operations return an arbitrary object with attributes (e.g. my_item.name instead of my_item[\"name\"] ) AND you use a response_model , make sure to update the Pydantic models with orm_mode = True as described in the docs (link above). New documentation about receiving plain dict s as request bodies: Bodies of arbitrary dict s . New documentation about returning arbitrary dict s in responses: Response with arbitrary dict . Technical Details : When declaring a response_model it is used directly to generate the response content, from whatever was returned from the path operation function . Before this, the return content was first passed through jsonable_encoder to ensure it was a \"jsonable\" object, like a dict , instead of an arbitrary object with attributes (like an ORM model). That's why you should make sure to update your Pydantic models for objects with attributes to use orm_mode = True . If you don't have a response_model , the return object will still be passed through jsonable_encoder first. When a response_model is declared, the same response_model type declaration won't be used as is, it will be \"cloned\" to create an new one (a cloned Pydantic Field with all the submodels cloned as well). This avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the response_model (e.g. you return a UserInDB that inherits from User but contains extra fields, like hashed_password , and User is used in the response_model ), it would still pass the validation (because UserInDB is a subclass of User ) and the object would be returned as-is, including the hashed_password . To fix this, the declared response_model is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a List[Item] ), the Pydantic model class(es) will be a different one (the \"cloned\" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned response_model . Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned response_model , containing only the declared fields as normally. PR #322 . Remove/clean unused RegEx code in routing. PR #314 by @dmontagu . Use default response status code descriptions for additional responses. PR #313 by @duxiaoyao . Upgrade Pydantic support to 0.28 . PR #320 by @jekirl .","title":"0.30.0"},{"location":"release-notes/#0291","text":"Fix handling an empty-body request with a required body param. PR #311 . Fix broken link in docs: Return a Response directly . PR #306 by @dmontagu . Fix docs discrepancy in docs for Response Model . PR #288 by @awiddersheim .","title":"0.29.1"},{"location":"release-notes/#0290","text":"Add support for declaring a Response parameter: This allows declaring: Response Cookies . Response Headers . An HTTP Status Code different than the default: Response - Change Status Code . All of this while still being able to return arbitrary objects ( dict , DB model, etc). Update attribution to Hug, for inspiring the response parameter pattern. PR #294 .","title":"0.29.0"},{"location":"release-notes/#0280","text":"Implement dependency cache per request. This avoids calling each dependency multiple times for the same request. This is useful while calling external services, performing costly computation, etc. This also means that if a dependency was declared as a path operation decorator dependency, possibly at the router level (with .include_router() ) and then it is declared again in a specific path operation , the dependency will be called only once. The cache can be disabled per dependency declaration, using use_cache=False as in Depends(your_dependency, use_cache=False) . Updated docs at: Using the same dependency multiple times . PR #292 . Implement dependency overrides for testing. This allows using overrides/mocks of dependencies during tests. New docs: Testing Dependencies with Overrides . PR #291 .","title":"0.28.0"},{"location":"release-notes/#0272","text":"Fix path and query parameters receiving dict as a valid type. It should be mapped to a body payload. PR #287 . Updated docs at: Query parameter list / multiple values with defaults: Using list .","title":"0.27.2"},{"location":"release-notes/#0271","text":"Fix auto_error=False handling in HTTPBearer security scheme. Do not raise when there's an incorrect Authorization header if auto_error=False . PR #282 . Fix type declaration of HTTPException . PR #279 .","title":"0.27.1"},{"location":"release-notes/#0270","text":"Fix broken link in docs about OAuth 2.0 with scopes. PR #275 by @dmontagu . Refactor param extraction using Pydantic Field : Large refactor, improvement, and simplification of param extraction from path operations . Fix/add support for list query parameters with list defaults. New documentation: Query parameter list / multiple values with defaults . Add support for enumerations in path operation parameters. New documentation: Path Parameters: Predefined values . Add support for type annotations using Optional as in param: Optional[str] = None . New documentation: Optional type declarations . PR #278 .","title":"0.27.0"},{"location":"release-notes/#0260","text":"Separate error handling for validation errors. This will allow developers to customize the exception handlers. Document better how to handle exceptions and use error handlers. Include RequestValidationError and WebSocketRequestValidationError (this last one will be useful once encode/starlette#527 or equivalent is merged). New documentation about exceptions handlers: Install custom exception handlers . Override the default exception handlers . Re-use FastAPI's exception handlers . PR #273 . Fix support for paths in path parameters without needing explicit Path(...) . PR #256 . Documented in PR #272 by @wshayes . New documentation at: Path Parameters containing paths . Update docs for testing FastAPI. Include using POST , sending JSON, testing headers, etc. New documentation: Testing . PR #271 . Fix type declaration of response_model to allow generic Python types as List[Model] . Mainly to fix mypy for users. PR #266 .","title":"0.26.0"},{"location":"release-notes/#0250","text":"Add support for Pydantic's include , exclude , by_alias . Update documentation: Response Model . Add docs for: Body - updates , using Pydantic's skip_defaults . Add method consistency tests. PR #264 . Add CONTRIBUTING.md file to GitHub, to help new contributors. PR #255 by @wshayes . Add support for Pydantic's skip_defaults : There's a new path operation decorator parameter response_model_skip_defaults . The name of the parameter will most probably change in a future version to response_skip_defaults , model_skip_defaults or something similar. New documentation section about using response_model_skip_defaults . PR #248 by @wshayes .","title":"0.25.0"},{"location":"release-notes/#0240","text":"Add support for WebSockets with dependencies and parameters. Support included for: Depends Security Cookie Header Path Query ...as these are compatible with the WebSockets protocol (e.g. Body is not). Updated documentation for WebSockets . PR #178 by @jekirl . Upgrade the compatible version of Pydantic to 0.26.0 . This includes JSON Schema support for IP address and network objects, bug fixes, and other features. PR #247 by @euri10 .","title":"0.24.0"},{"location":"release-notes/#0230","text":"Upgrade the compatible version of Starlette to 0.12.0 . This includes support for ASGI 3 (the latest version of the standard). It's now possible to use Starlette's StreamingResponse with iterators, like file-like objects (as those returned by open() ). It's now possible to use the low level utility iterate_in_threadpool from starlette.concurrency (for advanced scenarios). PR #243 . Add OAuth2 redirect page for Swagger UI. This allows having delegated authentication in the Swagger UI docs. For this to work, you need to add {your_origin}/docs/oauth2-redirect to the allowed callbacks in your OAuth2 provider (in Auth0, Facebook, Google, etc). For example, during development, it could be http://localhost:8000/docs/oauth2-redirect . Have in mind that this callback URL is independent of whichever one is used by your frontend. You might also have another callback at https://yourdomain.com/login/callback . This is only to allow delegated authentication in the API docs with Swagger UI. PR #198 by @steinitzu . Make Swagger UI and ReDoc route handlers ( path operations ) be async functions instead of lambdas to improve performance. PR #241 by @Trim21 . Make Swagger UI and ReDoc URLs parameterizable, allowing to host and serve local versions of them and have offline docs. PR #112 by @euri10 .","title":"0.23.0"},{"location":"release-notes/#0220","text":"Add support for dependencies parameter: A parameter in path operation decorators , for dependencies that should be executed but the return value is not important or not used in the path operation function . A parameter in the .include_router() method of FastAPI applications and routers, to include dependencies that should be executed in each path operation in a router. This is useful, for example, to require authentication or permissions in specific group of path operations . Different dependencies can be applied to different routers. These dependencies are run before the normal parameter dependencies. And normal dependencies are run too. They can be combined. Dependencies declared in a router are executed first, then the ones defined in path operation decorators , and then the ones declared in normal parameters. They are all combined and executed. All this also supports using Security with scopes in those dependencies parameters, for more advanced OAuth 2.0 security scenarios with scopes. New documentation about dependencies in path operation decorators . New documentation about dependencies in the include_router() method . PR #235 . Fix OpenAPI documentation of Starlette URL convertors. Specially useful when using path convertors, to take a whole path as a parameter, like /some/url/{p:path} . PR #234 by @euri10 . Make default parameter utilities exported from fastapi be functions instead of classes (the new functions return instances of those classes). To be able to override the return types and fix mypy errors in FastAPI's users' code. Applies to Path , Query , Header , Cookie , Body , Form , File , Depends , and Security . PR #226 and PR #231 . Separate development scripts test.sh , lint.sh , and format.sh . PR #232 . Re-enable black formatting checks for Python 3.7. PR #229 by @zamiramir .","title":"0.22.0"},{"location":"release-notes/#0210","text":"On body parsing errors, raise from previous exception, to allow better introspection in logging code. PR #192 by @ricardomomm . Use Python logger named \" fastapi \" instead of root logger. PR #222 by @euri10 . Upgrade Pydantic to version 0.25. PR #225 by @euri10 . Fix typo in routing. PR #221 by @djlambert .","title":"0.21.0"},{"location":"release-notes/#0201","text":"Add typing information to package including file py.typed . PR #209 by @meadsteve . Add FastAPI bot for Gitter. To automatically announce new releases. PR #189 .","title":"0.20.1"},{"location":"release-notes/#0200","text":"Upgrade OAuth2: Upgrade Password flow using Bearer tokens to use the correct HTTP status code 401 UNAUTHORIZED , with WWW-Authenticate headers. Update, simplify, and improve all the security docs . Add new scope_str to SecurityScopes and update docs: OAuth2 scopes . Update docs, images, tests. PR #188 . Include Hypercorn as an alternative ASGI server in the docs. PR #187 . Add docs for Static Files and Templates . PR #186 . Add docs for handling Response Cookies and Response Headers . PR #185 . Fix typos in docs. PR #176 by @chdsbd .","title":"0.20.0"},{"location":"release-notes/#0190","text":"Rename path operation decorator parameter content_type to response_class . PR #183 . Add docs: How to use the jsonable_encoder in JSON compatible encoder . How to Return a Response directly . Update how to use a Custom Response Class . PR #184 .","title":"0.19.0"},{"location":"release-notes/#0180","text":"Add docs for HTTP Basic Auth . PR #177 . Upgrade HTTP Basic Auth handling with automatic headers (automatic browser login prompt). PR #175 . Update dependencies for security. PR #174 . Add docs for Middleware . PR #173 .","title":"0.18.0"},{"location":"release-notes/#0170","text":"Make Flit publish from CI. PR #170 . Add documentation about handling CORS (Cross-Origin Resource Sharing) . PR #169 . By default, encode by alias. This allows using Pydantic alias parameters working by default. PR #168 .","title":"0.17.0"},{"location":"release-notes/#0160","text":"Upgrade path operation docstring parsing to support proper Markdown descriptions. New documentation at Path Operation Configuration . PR #163 . Refactor internal usage of Pydantic to use correct data types. PR #164 . Upgrade Pydantic to version 0.23 . PR #160 by @euri10 . Fix typo in Tutorial about Extra Models. PR #159 by @danielmichaels . Fix Query Parameters URL examples in docs. PR #157 by @hayata-yamamoto .","title":"0.16.0"},{"location":"release-notes/#0150","text":"Add support for multiple file uploads (as a single form field). New docs at: Multiple file uploads . PR #158 . Add docs for: Additional Status Codes . PR #156 .","title":"0.15.0"},{"location":"release-notes/#0140","text":"Improve automatically generated names of path operations in OpenAPI (in API docs). A function read_items instead of having a generated name \"Read Items Get\" will have \"Read Items\". PR #155 . Add docs for: Testing FastAPI . PR #151 . Update /docs Swagger UI to enable deep linking. This allows sharing the URL pointing directly to the path operation documentation in the docs. PR #148 by @wshayes . Update development dependencies, Pipfile.lock . PR #150 . Include Falcon and Hug in: Alternatives, Inspiration and Comparisons .","title":"0.14.0"},{"location":"release-notes/#0130","text":"Improve/upgrade OAuth2 scopes support with SecurityScopes : SecurityScopes can be declared as a parameter like Request , to get the scopes of all super-dependencies/dependants. Improve Security handling, merging scopes when declaring SecurityScopes . Allow using SecurityBase (like OAuth2 ) classes with Depends and still document them. Security now is needed only to declare scopes . Updated docs about: OAuth2 with Password (and hashing), Bearer with JWT tokens . New docs about: OAuth2 scopes . PR #141 .","title":"0.13.0"},{"location":"release-notes/#0121","text":"Fix bug: handling additional responses in APIRouter.include_router() . PR #140 . Fix typo in SQL tutorial. PR #138 by @mostaphaRoudsari . Fix typos in section about nested models and OAuth2 with JWT. PR #127 by @mmcloud .","title":"0.12.1"},{"location":"release-notes/#0120","text":"Add additional responses parameter to path operation decorators to extend responses in OpenAPI (and API docs). It also allows extending existing responses generated from response_model , declare other media types (like images), etc. The new documentation is here: Additional Responses . responses can also be added to .include_router() , the updated docs are here: Bigger Applications . PR #97 originally initiated by @barsi . Update scripts/test-cov-html.sh to allow passing extra parameters like -vv , for development.","title":"0.12.0"},{"location":"release-notes/#0110","text":"Add auto_error parameter to security utility functions. Allowing them to be optional. Also allowing to have multiple alternative security schemes that are then checked in a single dependency instead of each one verifying and returning the error to the client automatically when not satisfied. PR #134 . Update SQL Tutorial to close database sessions even when there are exceptions. PR #89 by @alexiri . Fix duplicate dependency in pyproject.toml . PR #128 by @zxalif .","title":"0.11.0"},{"location":"release-notes/#0103","text":"Add Gitter chat, badge, links, etc. https://gitter.im/tiangolo/fastapi . PR #117 . Add docs about Extending OpenAPI . PR #126 . Make Travis run Ubuntu Xenial (newer version) and Python 3.7 instead of Python 3.7-dev. PR #92 by @blueyed . Fix duplicated param variable creation. PR #123 by @yihuang . Add note in Response Model docs about why using a function parameter instead of a function return type annotation. PR #109 by @JHSaunders . Fix event docs (startup/shutdown) function name. PR #105 by @stratosgear .","title":"0.10.3"},{"location":"release-notes/#0102","text":"Fix OpenAPI (JSON Schema) for declarations of Python Union (JSON Schema additionalProperties ). PR #121 . Update Background Tasks with a note on Celery. Document response models using unions and lists, updated at: Extra Models . PR #108 .","title":"0.10.2"},{"location":"release-notes/#0101","text":"Add docs and tests for encode/databases . New docs at: Async SQL (Relational) Databases . PR #107 .","title":"0.10.1"},{"location":"release-notes/#0100","text":"Add support for Background Tasks in path operation functions and dependencies. New documentation about Background Tasks is here . PR #103 . Add support for .websocket_route() in APIRouter . PR #100 by @euri10 . New docs section about Events: startup - shutdown . PR #99 .","title":"0.10.0"},{"location":"release-notes/#091","text":"Document receiving Multiple values with the same query parameter and Duplicate headers . PR #95 .","title":"0.9.1"},{"location":"release-notes/#090","text":"Upgrade compatible Pydantic version to 0.21.0 . PR #90 . Add documentation for: Application Configuration . Fix typo in docs. PR #76 by @matthewhegarty . Fix link in \"Deployment\" to \"Bigger Applications\".","title":"0.9.0"},{"location":"release-notes/#080","text":"Make development scripts executable. PR #76 by @euri10 . Add support for adding tags in app.include_router() . PR #55 by @euri10 . Documentation updated in the section: Bigger Applications . Update docs related to Uvicorn to use new --reload option from version 0.5.x . PR #74 . Update isort imports and scripts to be compatible with newer versions. PR #75 .","title":"0.8.0"},{"location":"release-notes/#071","text":"Update technical details about async def handling with respect to previous frameworks. PR #64 by @haizaar . Add deployment documentation for Docker in Raspberry Pi and other architectures. Trigger Docker images build on Travis CI automatically. PR #65 .","title":"0.7.1"},{"location":"release-notes/#070","text":"Add support for UploadFile in File parameter annotations. This includes a file-like interface. Here's the updated documentation for declaring File parameters with UploadFile . And here's the updated documentation for using Form parameters mixed with File parameters, supporting bytes and UploadFile at the same time. PR #63 .","title":"0.7.0"},{"location":"release-notes/#064","text":"Add technical details about async def handling to docs . PR #61 . Add docs for Debugging FastAPI applications in editors . Clarify Bigger Applications deployed with Docker . Fix typos in docs. Add section about History, Design and Future . Add docs for using WebSockets with FastAPI . PR #62 .","title":"0.6.4"},{"location":"release-notes/#063","text":"Add Favicons to docs. PR #53 .","title":"0.6.3"},{"location":"release-notes/#062","text":"Introduce new project generator based on FastAPI and PostgreSQL: https://github.com/tiangolo/full-stack-fastapi-postgresql . PR #52 . Update SQL tutorial with SQLAlchemy, using Depends to improve editor support and reduce code repetition . PR #52 . Improve middleware naming in tutorial for SQL with SQLAlchemy https://fastapi.tiangolo.com/tutorial/sql-databases/ .","title":"0.6.2"},{"location":"release-notes/#061","text":"Add docs for GraphQL: https://fastapi.tiangolo.com/advanced/graphql/ . PR #48 .","title":"0.6.1"},{"location":"release-notes/#060","text":"Update SQL with SQLAlchemy tutorial at https://fastapi.tiangolo.com/tutorial/sql-databases/ using the new official request.state . PR #45 . Upgrade Starlette to version 0.11.1 and add required compatibility changes. PR #44 .","title":"0.6.0"},{"location":"release-notes/#051","text":"Add section about helping and getting help with FastAPI . Add note about path operations order in docs . Update section about error handling with more information and make relation with Starlette error handling utilities more explicit. PR #41 . Add Development - Contributing section to the docs . PR #42 .","title":"0.5.1"},{"location":"release-notes/#050","text":"Add new HTTPException with support for custom headers. With new documentation for handling errors at: https://fastapi.tiangolo.com/tutorial/handling-errors/ . PR #35 . Add documentation to use Starlette Request object directly. Check #25 by @euri10 . Add issue templates to simplify reporting bugs, getting help, etc: #34 . Update example for the SQLAlchemy tutorial at https://fastapi.tiangolo.com/tutorial/sql-databases/ using middleware and database session attached to request.","title":"0.5.0"},{"location":"release-notes/#040","text":"Add openapi_prefix , support for reverse proxy and mounting sub-applications. See the docs at https://fastapi.tiangolo.com/advanced/sub-applications-proxy/ : #26 by @kabirkhan . Update docs/tutorial for SQLAlchemy including note about DB Browser for SQLite .","title":"0.4.0"},{"location":"release-notes/#030","text":"Fix/add SQLAlchemy support, including ORM, and update docs for SQLAlchemy : #30 .","title":"0.3.0"},{"location":"release-notes/#021","text":"Fix jsonable_encoder for Pydantic models with Config but without json_encoders : #29 .","title":"0.2.1"},{"location":"release-notes/#020","text":"Fix typos in Security section: #24 by @kkinder . Add support for Pydantic custom JSON encoders: #21 by @euri10 .","title":"0.2.0"},{"location":"release-notes/#0119","text":"Upgrade Starlette version to the current latest 0.10.1 : #17 by @euri10 .","title":"0.1.19"},{"location":"advanced/","text":"Advanced User Guide - Intro \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Additional Features \u00b6 The main Tutorial - User Guide should be enough to give you a tour through all the main features of FastAPI . In the next sections you will see other options, configurations, and additional features. Tip The next sections are not necessarily \"advanced\" . And it's possible that for your use case, the solution is in one of them. Read the Tutorial first \u00b6 You could still use most of the features in FastAPI with the knowledge from the main Tutorial - User Guide . And the next sections assume you already read it, and assume that you know those main ideas. TestDriven.io course \u00b6 If you would like to take an advanced-beginner course to complement this section of the docs, you might want to check: Test-Driven Development with FastAPI and Docker by TestDriven.io . They are currently donating 10% of all profits to the development of FastAPI . \ud83c\udf89 \ud83d\ude04","title":"Advanced User Guide - Intro"},{"location":"advanced/#advanced-user-guide-intro","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing .","title":"Advanced User Guide - Intro"},{"location":"advanced/#additional-features","text":"The main Tutorial - User Guide should be enough to give you a tour through all the main features of FastAPI . In the next sections you will see other options, configurations, and additional features. Tip The next sections are not necessarily \"advanced\" . And it's possible that for your use case, the solution is in one of them.","title":"Additional Features"},{"location":"advanced/#read-the-tutorial-first","text":"You could still use most of the features in FastAPI with the knowledge from the main Tutorial - User Guide . And the next sections assume you already read it, and assume that you know those main ideas.","title":"Read the Tutorial first"},{"location":"advanced/#testdrivenio-course","text":"If you would like to take an advanced-beginner course to complement this section of the docs, you might want to check: Test-Driven Development with FastAPI and Docker by TestDriven.io . They are currently donating 10% of all profits to the development of FastAPI . \ud83c\udf89 \ud83d\ude04","title":"TestDriven.io course"},{"location":"advanced/additional-responses/","text":"Additional Responses in OpenAPI \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Warning This is a rather advanced topic. If you are starting with FastAPI , you might not need this. You can declare additional responses, with additional status codes, media types, descriptions, etc. Those additional responses will be included in the OpenAPI schema, so they will also appear in the API docs. But for those additional responses you have to make sure you return a Response like JSONResponse directly, with your status code and content. Additional Response with model \u00b6 You can pass to your path operation decorators a parameter responses . It receives a dict , the keys are status codes for each response, like 200 , and the values are other dict s with the information for each of them. Each of those response dict s can have a key model , containing a Pydantic model, just like response_model . FastAPI will take that model, generate its JSON Schema and include it in the correct place in OpenAPI. For example, to declare another response with a status code 404 and a Pydantic model Message , you can write: from fastapi import FastAPI from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str class Message ( BaseModel ): message : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 404 : { \"model\" : Message }}) async def read_item ( item_id : str ): if item_id == \"foo\" : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } else : return JSONResponse ( status_code = 404 , content = { \"message\" : \"Item not found\" }) Note Have in mind that you have to return the JSONResponse directly. Info The model key is not part of OpenAPI. FastAPI will take the Pydantic model from there, generate the JSON Schema , and put it in the correct place. The correct place is: In the key content , that has as value another JSON object ( dict ) that contains: A key with the media type, e.g. application/json , that contains as value another JSON object, that contains: A key schema , that has as the value the JSON Schema from the model, here's the correct place. FastAPI adds a reference here to the global JSON Schemas in another place in your OpenAPI instead of including it directly. This way, other applications and clients can use those JSON Schemas directly, provide better code generation tools, etc. The generated responses in the OpenAPI for this path operation will be: { \"responses\" : { \"404\" : { \"description\" : \"Additional Response\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/Message\" } } } }, \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/Item\" } } } }, \"422\" : { \"description\" : \"Validation Error\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/HTTPValidationError\" } } } } } } The schemas are referenced to another place inside the OpenAPI schema: { \"components\" : { \"schemas\" : { \"Message\" : { \"title\" : \"Message\" , \"required\" : [ \"message\" ], \"type\" : \"object\" , \"properties\" : { \"message\" : { \"title\" : \"Message\" , \"type\" : \"string\" } } }, \"Item\" : { \"title\" : \"Item\" , \"required\" : [ \"id\" , \"value\" ], \"type\" : \"object\" , \"properties\" : { \"id\" : { \"title\" : \"Id\" , \"type\" : \"string\" }, \"value\" : { \"title\" : \"Value\" , \"type\" : \"string\" } } }, \"ValidationError\" : { \"title\" : \"ValidationError\" , \"required\" : [ \"loc\" , \"msg\" , \"type\" ], \"type\" : \"object\" , \"properties\" : { \"loc\" : { \"title\" : \"Location\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"string\" } }, \"msg\" : { \"title\" : \"Message\" , \"type\" : \"string\" }, \"type\" : { \"title\" : \"Error Type\" , \"type\" : \"string\" } } }, \"HTTPValidationError\" : { \"title\" : \"HTTPValidationError\" , \"type\" : \"object\" , \"properties\" : { \"detail\" : { \"title\" : \"Detail\" , \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" } } } } } } } Additional media types for the main response \u00b6 You can use this same responses parameter to add different media types for the same main response. For example, you can add an additional media type of image/png , declaring that your path operation can return a JSON object (with media type application/json ) or a PNG image: from typing import Union from fastapi import FastAPI from fastapi.responses import FileResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 200 : { \"content\" : { \"image/png\" : {}}, \"description\" : \"Return the JSON item or an image.\" , } }, ) async def read_item ( item_id : str , img : Union [ bool , None ] = None ): if img : return FileResponse ( \"image.png\" , media_type = \"image/png\" ) else : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } Note Notice that you have to return the image using a FileResponse directly. Info Unless you specify a different media type explicitly in your responses parameter, FastAPI will assume the response has the same media type as the main response class (default application/json ). But if you have specified a custom response class with None as its media type, FastAPI will use application/json for any additional response that has an associated model. Combining information \u00b6 You can also combine response information from multiple places, including the response_model , status_code , and responses parameters. You can declare a response_model , using the default status code 200 (or a custom one if you need), and then declare additional information for that same response in responses , directly in the OpenAPI schema. FastAPI will keep the additional information from responses , and combine it with the JSON Schema from your model. For example, you can declare a response with a status code 404 that uses a Pydantic model and has a custom description . And a response with a status code 200 that uses your response_model , but includes a custom example : from fastapi import FastAPI from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str class Message ( BaseModel ): message : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 404 : { \"model\" : Message , \"description\" : \"The item was not found\" }, 200 : { \"description\" : \"Item requested by ID\" , \"content\" : { \"application/json\" : { \"example\" : { \"id\" : \"bar\" , \"value\" : \"The bar tenders\" } } }, }, }, ) async def read_item ( item_id : str ): if item_id == \"foo\" : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } else : return JSONResponse ( status_code = 404 , content = { \"message\" : \"Item not found\" }) It will all be combined and included in your OpenAPI, and shown in the API docs: Combine predefined responses and custom ones \u00b6 You might want to have some predefined responses that apply to many path operations , but you want to combine them with custom responses needed by each path operation . For those cases, you can use the Python technique of \"unpacking\" a dict with **dict_to_unpack : old_dict = { \"old key\" : \"old value\" , \"second old key\" : \"second old value\" , } new_dict = { ** old_dict , \"new key\" : \"new value\" } Here, new_dict will contain all the key-value pairs from old_dict plus the new key-value pair: { \"old key\" : \"old value\" , \"second old key\" : \"second old value\" , \"new key\" : \"new value\" , } You can use that technique to re-use some predefined responses in your path operations and combine them with additional custom ones. For example: from typing import Union from fastapi import FastAPI from fastapi.responses import FileResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str responses = { 404 : { \"description\" : \"Item not found\" }, 302 : { \"description\" : \"The item was moved\" }, 403 : { \"description\" : \"Not enough privileges\" }, } app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { ** responses , 200 : { \"content\" : { \"image/png\" : {}}}}, ) async def read_item ( item_id : str , img : Union [ bool , None ] = None ): if img : return FileResponse ( \"image.png\" , media_type = \"image/png\" ) else : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } More information about OpenAPI responses \u00b6 To see what exactly you can include in the responses, you can check these sections in the OpenAPI specification: OpenAPI Responses Object , it includes the Response Object . OpenAPI Response Object , you can include anything from this directly in each response inside your responses parameter. Including description , headers , content (inside of this is that you declare different media types and JSON Schemas), and links .","title":"Additional Responses in OpenAPI"},{"location":"advanced/additional-responses/#additional-responses-in-openapi","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Warning This is a rather advanced topic. If you are starting with FastAPI , you might not need this. You can declare additional responses, with additional status codes, media types, descriptions, etc. Those additional responses will be included in the OpenAPI schema, so they will also appear in the API docs. But for those additional responses you have to make sure you return a Response like JSONResponse directly, with your status code and content.","title":"Additional Responses in OpenAPI"},{"location":"advanced/additional-responses/#additional-response-with-model","text":"You can pass to your path operation decorators a parameter responses . It receives a dict , the keys are status codes for each response, like 200 , and the values are other dict s with the information for each of them. Each of those response dict s can have a key model , containing a Pydantic model, just like response_model . FastAPI will take that model, generate its JSON Schema and include it in the correct place in OpenAPI. For example, to declare another response with a status code 404 and a Pydantic model Message , you can write: from fastapi import FastAPI from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str class Message ( BaseModel ): message : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 404 : { \"model\" : Message }}) async def read_item ( item_id : str ): if item_id == \"foo\" : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } else : return JSONResponse ( status_code = 404 , content = { \"message\" : \"Item not found\" }) Note Have in mind that you have to return the JSONResponse directly. Info The model key is not part of OpenAPI. FastAPI will take the Pydantic model from there, generate the JSON Schema , and put it in the correct place. The correct place is: In the key content , that has as value another JSON object ( dict ) that contains: A key with the media type, e.g. application/json , that contains as value another JSON object, that contains: A key schema , that has as the value the JSON Schema from the model, here's the correct place. FastAPI adds a reference here to the global JSON Schemas in another place in your OpenAPI instead of including it directly. This way, other applications and clients can use those JSON Schemas directly, provide better code generation tools, etc. The generated responses in the OpenAPI for this path operation will be: { \"responses\" : { \"404\" : { \"description\" : \"Additional Response\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/Message\" } } } }, \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/Item\" } } } }, \"422\" : { \"description\" : \"Validation Error\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/HTTPValidationError\" } } } } } } The schemas are referenced to another place inside the OpenAPI schema: { \"components\" : { \"schemas\" : { \"Message\" : { \"title\" : \"Message\" , \"required\" : [ \"message\" ], \"type\" : \"object\" , \"properties\" : { \"message\" : { \"title\" : \"Message\" , \"type\" : \"string\" } } }, \"Item\" : { \"title\" : \"Item\" , \"required\" : [ \"id\" , \"value\" ], \"type\" : \"object\" , \"properties\" : { \"id\" : { \"title\" : \"Id\" , \"type\" : \"string\" }, \"value\" : { \"title\" : \"Value\" , \"type\" : \"string\" } } }, \"ValidationError\" : { \"title\" : \"ValidationError\" , \"required\" : [ \"loc\" , \"msg\" , \"type\" ], \"type\" : \"object\" , \"properties\" : { \"loc\" : { \"title\" : \"Location\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"string\" } }, \"msg\" : { \"title\" : \"Message\" , \"type\" : \"string\" }, \"type\" : { \"title\" : \"Error Type\" , \"type\" : \"string\" } } }, \"HTTPValidationError\" : { \"title\" : \"HTTPValidationError\" , \"type\" : \"object\" , \"properties\" : { \"detail\" : { \"title\" : \"Detail\" , \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" } } } } } } }","title":"Additional Response with model"},{"location":"advanced/additional-responses/#additional-media-types-for-the-main-response","text":"You can use this same responses parameter to add different media types for the same main response. For example, you can add an additional media type of image/png , declaring that your path operation can return a JSON object (with media type application/json ) or a PNG image: from typing import Union from fastapi import FastAPI from fastapi.responses import FileResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 200 : { \"content\" : { \"image/png\" : {}}, \"description\" : \"Return the JSON item or an image.\" , } }, ) async def read_item ( item_id : str , img : Union [ bool , None ] = None ): if img : return FileResponse ( \"image.png\" , media_type = \"image/png\" ) else : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } Note Notice that you have to return the image using a FileResponse directly. Info Unless you specify a different media type explicitly in your responses parameter, FastAPI will assume the response has the same media type as the main response class (default application/json ). But if you have specified a custom response class with None as its media type, FastAPI will use application/json for any additional response that has an associated model.","title":"Additional media types for the main response"},{"location":"advanced/additional-responses/#combining-information","text":"You can also combine response information from multiple places, including the response_model , status_code , and responses parameters. You can declare a response_model , using the default status code 200 (or a custom one if you need), and then declare additional information for that same response in responses , directly in the OpenAPI schema. FastAPI will keep the additional information from responses , and combine it with the JSON Schema from your model. For example, you can declare a response with a status code 404 that uses a Pydantic model and has a custom description . And a response with a status code 200 that uses your response_model , but includes a custom example : from fastapi import FastAPI from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str class Message ( BaseModel ): message : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 404 : { \"model\" : Message , \"description\" : \"The item was not found\" }, 200 : { \"description\" : \"Item requested by ID\" , \"content\" : { \"application/json\" : { \"example\" : { \"id\" : \"bar\" , \"value\" : \"The bar tenders\" } } }, }, }, ) async def read_item ( item_id : str ): if item_id == \"foo\" : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } else : return JSONResponse ( status_code = 404 , content = { \"message\" : \"Item not found\" }) It will all be combined and included in your OpenAPI, and shown in the API docs:","title":"Combining information"},{"location":"advanced/additional-responses/#combine-predefined-responses-and-custom-ones","text":"You might want to have some predefined responses that apply to many path operations , but you want to combine them with custom responses needed by each path operation . For those cases, you can use the Python technique of \"unpacking\" a dict with **dict_to_unpack : old_dict = { \"old key\" : \"old value\" , \"second old key\" : \"second old value\" , } new_dict = { ** old_dict , \"new key\" : \"new value\" } Here, new_dict will contain all the key-value pairs from old_dict plus the new key-value pair: { \"old key\" : \"old value\" , \"second old key\" : \"second old value\" , \"new key\" : \"new value\" , } You can use that technique to re-use some predefined responses in your path operations and combine them with additional custom ones. For example: from typing import Union from fastapi import FastAPI from fastapi.responses import FileResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str responses = { 404 : { \"description\" : \"Item not found\" }, 302 : { \"description\" : \"The item was moved\" }, 403 : { \"description\" : \"Not enough privileges\" }, } app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { ** responses , 200 : { \"content\" : { \"image/png\" : {}}}}, ) async def read_item ( item_id : str , img : Union [ bool , None ] = None ): if img : return FileResponse ( \"image.png\" , media_type = \"image/png\" ) else : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" }","title":"Combine predefined responses and custom ones"},{"location":"advanced/additional-responses/#more-information-about-openapi-responses","text":"To see what exactly you can include in the responses, you can check these sections in the OpenAPI specification: OpenAPI Responses Object , it includes the Response Object . OpenAPI Response Object , you can include anything from this directly in each response inside your responses parameter. Including description , headers , content (inside of this is that you declare different media types and JSON Schemas), and links .","title":"More information about OpenAPI responses"},{"location":"advanced/additional-status-codes/","text":"Additional Status Codes \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . By default, FastAPI will return the responses using a JSONResponse , putting the content you return from your path operation inside of that JSONResponse . It will use the default status code or the one you set in your path operation . Additional status codes \u00b6 If you want to return additional status codes apart from the main one, you can do that by returning a Response directly, like a JSONResponse , and set the additional status code directly. For example, let's say that you want to have a path operation that allows to update items, and returns HTTP status codes of 200 \"OK\" when successful. But you also want it to accept new items. And when the items didn't exist before, it creates them, and returns an HTTP status code of 201 \"Created\". To achieve that, import JSONResponse , and return your content there directly, setting the status_code that you want: from typing import Union from fastapi import Body , FastAPI , status from fastapi.responses import JSONResponse app = FastAPI () items = { \"foo\" : { \"name\" : \"Fighters\" , \"size\" : 6 }, \"bar\" : { \"name\" : \"Tenders\" , \"size\" : 3 }} @app . put ( \"/items/ {item_id} \" ) async def upsert_item ( item_id : str , name : Union [ str , None ] = Body ( default = None ), size : Union [ int , None ] = Body ( default = None ), ): if item_id in items : item = items [ item_id ] item [ \"name\" ] = name item [ \"size\" ] = size return item else : item = { \"name\" : name , \"size\" : size } items [ item_id ] = item return JSONResponse ( status_code = status . HTTP_201_CREATED , content = item ) Warning When you return a Response directly, like in the example above, it will be returned directly. It won't be serialized with a model, etc. Make sure it has the data you want it to have, and that the values are valid JSON (if you are using JSONResponse ). Technical Details You could also use from starlette.responses import JSONResponse . FastAPI provides the same starlette.responses as fastapi.responses just as a convenience for you, the developer. But most of the available responses come directly from Starlette. The same with status . OpenAPI and API docs \u00b6 If you return additional status codes and responses directly, they won't be included in the OpenAPI schema (the API docs), because FastAPI doesn't have a way to know beforehand what you are going to return. But you can document that in your code, using: Additional Responses .","title":"Additional Status Codes"},{"location":"advanced/additional-status-codes/#additional-status-codes","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . By default, FastAPI will return the responses using a JSONResponse , putting the content you return from your path operation inside of that JSONResponse . It will use the default status code or the one you set in your path operation .","title":"Additional Status Codes"},{"location":"advanced/additional-status-codes/#additional-status-codes_1","text":"If you want to return additional status codes apart from the main one, you can do that by returning a Response directly, like a JSONResponse , and set the additional status code directly. For example, let's say that you want to have a path operation that allows to update items, and returns HTTP status codes of 200 \"OK\" when successful. But you also want it to accept new items. And when the items didn't exist before, it creates them, and returns an HTTP status code of 201 \"Created\". To achieve that, import JSONResponse , and return your content there directly, setting the status_code that you want: from typing import Union from fastapi import Body , FastAPI , status from fastapi.responses import JSONResponse app = FastAPI () items = { \"foo\" : { \"name\" : \"Fighters\" , \"size\" : 6 }, \"bar\" : { \"name\" : \"Tenders\" , \"size\" : 3 }} @app . put ( \"/items/ {item_id} \" ) async def upsert_item ( item_id : str , name : Union [ str , None ] = Body ( default = None ), size : Union [ int , None ] = Body ( default = None ), ): if item_id in items : item = items [ item_id ] item [ \"name\" ] = name item [ \"size\" ] = size return item else : item = { \"name\" : name , \"size\" : size } items [ item_id ] = item return JSONResponse ( status_code = status . HTTP_201_CREATED , content = item ) Warning When you return a Response directly, like in the example above, it will be returned directly. It won't be serialized with a model, etc. Make sure it has the data you want it to have, and that the values are valid JSON (if you are using JSONResponse ). Technical Details You could also use from starlette.responses import JSONResponse . FastAPI provides the same starlette.responses as fastapi.responses just as a convenience for you, the developer. But most of the available responses come directly from Starlette. The same with status .","title":"Additional status codes"},{"location":"advanced/additional-status-codes/#openapi-and-api-docs","text":"If you return additional status codes and responses directly, they won't be included in the OpenAPI schema (the API docs), because FastAPI doesn't have a way to know beforehand what you are going to return. But you can document that in your code, using: Additional Responses .","title":"OpenAPI and API docs"},{"location":"advanced/advanced-dependencies/","text":"Advanced Dependencies \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Parameterized dependencies \u00b6 All the dependencies we have seen are a fixed function or class. But there could be cases where you want to be able to set parameters on the dependency, without having to declare many different functions or classes. Let's imagine that we want to have a dependency that checks if the query parameter q contains some fixed content. But we want to be able to parameterize that fixed content. A \"callable\" instance \u00b6 In Python there's a way to make an instance of a class a \"callable\". Not the class itself (which is already a callable), but an instance of that class. To do that, we declare a method __call__ : from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } In this case, this __call__ is what FastAPI will use to check for additional parameters and sub-dependencies, and this is what will be called to pass a value to the parameter in your path operation function later. Parameterize the instance \u00b6 And now, we can use __init__ to declare the parameters of the instance that we can use to \"parameterize\" the dependency: from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } In this case, FastAPI won't ever touch or care about __init__ , we will use it directly in our code. Create an instance \u00b6 We could create an instance of this class with: from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } And that way we are able to \"parameterize\" our dependency, that now has \"bar\" inside of it, as the attribute checker.fixed_content . Use the instance as a dependency \u00b6 Then, we could use this checker in a Depends(checker) , instead of Depends(FixedContentQueryChecker) , because the dependency is the instance, checker , not the class itself. And when solving the dependency, FastAPI will call this checker like: checker ( q = \"somequery\" ) ...and pass whatever that returns as the value of the dependency in our path operation function as the parameter fixed_content_included : from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } Tip All this might seem contrived. And it might not be very clear how is it useful yet. These examples are intentionally simple, but show how it all works. In the chapters about security, there are utility functions that are implemented in this same way. If you understood all this, you already know how those utility tools for security work underneath.","title":"Advanced Dependencies"},{"location":"advanced/advanced-dependencies/#advanced-dependencies","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing .","title":"Advanced Dependencies"},{"location":"advanced/advanced-dependencies/#parameterized-dependencies","text":"All the dependencies we have seen are a fixed function or class. But there could be cases where you want to be able to set parameters on the dependency, without having to declare many different functions or classes. Let's imagine that we want to have a dependency that checks if the query parameter q contains some fixed content. But we want to be able to parameterize that fixed content.","title":"Parameterized dependencies"},{"location":"advanced/advanced-dependencies/#a-callable-instance","text":"In Python there's a way to make an instance of a class a \"callable\". Not the class itself (which is already a callable), but an instance of that class. To do that, we declare a method __call__ : from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } In this case, this __call__ is what FastAPI will use to check for additional parameters and sub-dependencies, and this is what will be called to pass a value to the parameter in your path operation function later.","title":"A \"callable\" instance"},{"location":"advanced/advanced-dependencies/#parameterize-the-instance","text":"And now, we can use __init__ to declare the parameters of the instance that we can use to \"parameterize\" the dependency: from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } In this case, FastAPI won't ever touch or care about __init__ , we will use it directly in our code.","title":"Parameterize the instance"},{"location":"advanced/advanced-dependencies/#create-an-instance","text":"We could create an instance of this class with: from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } And that way we are able to \"parameterize\" our dependency, that now has \"bar\" inside of it, as the attribute checker.fixed_content .","title":"Create an instance"},{"location":"advanced/advanced-dependencies/#use-the-instance-as-a-dependency","text":"Then, we could use this checker in a Depends(checker) , instead of Depends(FixedContentQueryChecker) , because the dependency is the instance, checker , not the class itself. And when solving the dependency, FastAPI will call this checker like: checker ( q = \"somequery\" ) ...and pass whatever that returns as the value of the dependency in our path operation function as the parameter fixed_content_included : from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } Tip All this might seem contrived. And it might not be very clear how is it useful yet. These examples are intentionally simple, but show how it all works. In the chapters about security, there are utility functions that are implemented in this same way. If you understood all this, you already know how those utility tools for security work underneath.","title":"Use the instance as a dependency"},{"location":"advanced/async-sql-databases/","text":"Async SQL (Relational) Databases \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can also use encode/databases with FastAPI to connect to databases using async and await . It is compatible with: PostgreSQL MySQL SQLite In this example, we'll use SQLite , because it uses a single file and Python has integrated support. So, you can copy this example and run it as is. Later, for your production application, you might want to use a database server like PostgreSQL . Tip You could adopt ideas from the section about SQLAlchemy ORM ( SQL (Relational) Databases ), like using utility functions to perform operations in the database, independent of your FastAPI code. This section doesn't apply those ideas, to be equivalent to the counterpart in Starlette . Import and set up SQLAlchemy \u00b6 Import SQLAlchemy . Create a metadata object. Create a table notes using the metadata object. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Tip Notice that all this code is pure SQLAlchemy Core. databases is not doing anything here yet. Import and set up databases \u00b6 Import databases . Create a DATABASE_URL . Create a database object. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Tip If you were connecting to a different database (e.g. PostgreSQL), you would need to change the DATABASE_URL . Create the tables \u00b6 In this case, we are creating the tables in the same Python file, but in production, you would probably want to create them with Alembic, integrated with migrations, etc. Here, this section would run directly, right before starting your FastAPI application. Create an engine . Create all the tables from the metadata object. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Create models \u00b6 Create Pydantic models for: Notes to be created ( NoteIn ). Notes to be returned ( Note ). from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } By creating these Pydantic models, the input data will be validated, serialized (converted), and annotated (documented). So, you will be able to see it all in the interactive API docs. Connect and disconnect \u00b6 Create your FastAPI application. Create event handlers to connect and disconnect from the database. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Read notes \u00b6 Create the path operation function to read notes: from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Note Notice that as we communicate with the database using await , the path operation function is declared with async . Notice the response_model=List[Note] \u00b6 It uses typing.List . That documents (and validates, serializes, filters) the output data, as a list of Note s. Create notes \u00b6 Create the path operation function to create notes: from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Note Notice that as we communicate with the database using await , the path operation function is declared with async . About {**note.dict(), \"id\": last_record_id} \u00b6 note is a Pydantic Note object. note.dict() returns a dict with its data, something like: { \"text\" : \"Some note\" , \"completed\" : False , } but it doesn't have the id field. So we create a new dict , that contains the key-value pairs from note.dict() with: { ** note . dict ()} **note.dict() \"unpacks\" the key value pairs directly, so, {**note.dict()} would be, more or less, a copy of note.dict() . And then, we extend that copy dict , adding another key-value pair: \"id\": last_record_id : { ** note . dict (), \"id\" : last_record_id } So, the final result returned would be something like: { \"id\" : 1 , \"text\" : \"Some note\" , \"completed\" : False , } Check it \u00b6 You can copy this code as is, and see the docs at http://127.0.0.1:8000/docs . There you can see all your API documented and interact with it: More info \u00b6 You can read more about encode/databases at its GitHub page .","title":"Async SQL (Relational) Databases"},{"location":"advanced/async-sql-databases/#async-sql-relational-databases","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can also use encode/databases with FastAPI to connect to databases using async and await . It is compatible with: PostgreSQL MySQL SQLite In this example, we'll use SQLite , because it uses a single file and Python has integrated support. So, you can copy this example and run it as is. Later, for your production application, you might want to use a database server like PostgreSQL . Tip You could adopt ideas from the section about SQLAlchemy ORM ( SQL (Relational) Databases ), like using utility functions to perform operations in the database, independent of your FastAPI code. This section doesn't apply those ideas, to be equivalent to the counterpart in Starlette .","title":"Async SQL (Relational) Databases"},{"location":"advanced/async-sql-databases/#import-and-set-up-sqlalchemy","text":"Import SQLAlchemy . Create a metadata object. Create a table notes using the metadata object. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Tip Notice that all this code is pure SQLAlchemy Core. databases is not doing anything here yet.","title":"Import and set up SQLAlchemy"},{"location":"advanced/async-sql-databases/#import-and-set-up-databases","text":"Import databases . Create a DATABASE_URL . Create a database object. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Tip If you were connecting to a different database (e.g. PostgreSQL), you would need to change the DATABASE_URL .","title":"Import and set up databases"},{"location":"advanced/async-sql-databases/#create-the-tables","text":"In this case, we are creating the tables in the same Python file, but in production, you would probably want to create them with Alembic, integrated with migrations, etc. Here, this section would run directly, right before starting your FastAPI application. Create an engine . Create all the tables from the metadata object. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id }","title":"Create the tables"},{"location":"advanced/async-sql-databases/#create-models","text":"Create Pydantic models for: Notes to be created ( NoteIn ). Notes to be returned ( Note ). from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } By creating these Pydantic models, the input data will be validated, serialized (converted), and annotated (documented). So, you will be able to see it all in the interactive API docs.","title":"Create models"},{"location":"advanced/async-sql-databases/#connect-and-disconnect","text":"Create your FastAPI application. Create event handlers to connect and disconnect from the database. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id }","title":"Connect and disconnect"},{"location":"advanced/async-sql-databases/#read-notes","text":"Create the path operation function to read notes: from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Note Notice that as we communicate with the database using await , the path operation function is declared with async .","title":"Read notes"},{"location":"advanced/async-sql-databases/#notice-the-response_modellistnote","text":"It uses typing.List . That documents (and validates, serializes, filters) the output data, as a list of Note s.","title":"Notice the response_model=List[Note]"},{"location":"advanced/async-sql-databases/#create-notes","text":"Create the path operation function to create notes: from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Note Notice that as we communicate with the database using await , the path operation function is declared with async .","title":"Create notes"},{"location":"advanced/async-sql-databases/#about-notedict-id-last_record_id","text":"note is a Pydantic Note object. note.dict() returns a dict with its data, something like: { \"text\" : \"Some note\" , \"completed\" : False , } but it doesn't have the id field. So we create a new dict , that contains the key-value pairs from note.dict() with: { ** note . dict ()} **note.dict() \"unpacks\" the key value pairs directly, so, {**note.dict()} would be, more or less, a copy of note.dict() . And then, we extend that copy dict , adding another key-value pair: \"id\": last_record_id : { ** note . dict (), \"id\" : last_record_id } So, the final result returned would be something like: { \"id\" : 1 , \"text\" : \"Some note\" , \"completed\" : False , }","title":"About {**note.dict(), \"id\": last_record_id}"},{"location":"advanced/async-sql-databases/#check-it","text":"You can copy this code as is, and see the docs at http://127.0.0.1:8000/docs . There you can see all your API documented and interact with it:","title":"Check it"},{"location":"advanced/async-sql-databases/#more-info","text":"You can read more about encode/databases at its GitHub page .","title":"More info"},{"location":"advanced/async-tests/","text":"Async Tests \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You have already seen how to test your FastAPI applications using the provided TestClient , but with it, you can't test or run any other async function in your (synchronous) pytest functions. Being able to use asynchronous functions in your tests could be useful, for example, when you're querying your database asynchronously. Imagine you want to test sending requests to your FastAPI application and then verify that your backend successfully wrote the correct data in the database, while using an async database library. Let's look at how we can make that work. pytest.mark.anyio \u00b6 If we want to call asynchronous functions in our tests, our test functions have to be asynchronous. Anyio provides a neat plugin for this, that allows us to specify that some test functions are to be called asynchronously. HTTPX \u00b6 Even if your FastAPI application uses normal def functions instead of async def , it is still an async application underneath. The TestClient does some magic inside to call the asynchronous FastAPI application in your normal def test functions, using standard pytest. But that magic doesn't work anymore when we're using it inside asynchronous functions. By running our tests asynchronously, we can no longer use the TestClient inside our test functions. Luckily there's a nice alternative, called HTTPX . HTTPX is an HTTP client for Python 3 that allows us to query our FastAPI application similarly to how we did it with the TestClient . If you're familiar with the Requests library, you'll find that the API of HTTPX is almost identical. The important difference for us is that with HTTPX we are not limited to synchronous, but can also make asynchronous requests. Example \u00b6 For a simple example, let's consider the following main.py module: from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Tomato\" } The test_main.py module that contains the tests for main.py could look like this now: import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } Run it \u00b6 You can run your tests as usual via: $ pytest ---> 100% In Detail \u00b6 The marker @pytest.mark.anyio tells pytest that this test function should be called asynchronously: import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } Tip Note that the test function is now async def instead of just def as before when using the TestClient . Then we can create an AsyncClient with the app, and send async requests to it, using await . import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } This is the equivalent to: response = client . get ( '/' ) that we used to make our requests with the TestClient . Tip Note that we're using async/await with the new AsyncClient - the request is asynchronous. Other Asynchronous Function Calls \u00b6 As the testing function is now asynchronous, you can now also call (and await ) other async functions apart from sending requests to your FastAPI application in your tests, exactly as you would call them anywhere else in your code. Tip If you encounter a RuntimeError: Task attached to a different loop when integrating asynchronous function calls in your tests (e.g. when using MongoDB's MotorClient ) Remember to instantiate objects that need an event loop only within async functions, e.g. an '@app.on_event(\"startup\") callback.","title":"Async Tests"},{"location":"advanced/async-tests/#async-tests","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You have already seen how to test your FastAPI applications using the provided TestClient , but with it, you can't test or run any other async function in your (synchronous) pytest functions. Being able to use asynchronous functions in your tests could be useful, for example, when you're querying your database asynchronously. Imagine you want to test sending requests to your FastAPI application and then verify that your backend successfully wrote the correct data in the database, while using an async database library. Let's look at how we can make that work.","title":"Async Tests"},{"location":"advanced/async-tests/#pytestmarkanyio","text":"If we want to call asynchronous functions in our tests, our test functions have to be asynchronous. Anyio provides a neat plugin for this, that allows us to specify that some test functions are to be called asynchronously.","title":"pytest.mark.anyio"},{"location":"advanced/async-tests/#httpx","text":"Even if your FastAPI application uses normal def functions instead of async def , it is still an async application underneath. The TestClient does some magic inside to call the asynchronous FastAPI application in your normal def test functions, using standard pytest. But that magic doesn't work anymore when we're using it inside asynchronous functions. By running our tests asynchronously, we can no longer use the TestClient inside our test functions. Luckily there's a nice alternative, called HTTPX . HTTPX is an HTTP client for Python 3 that allows us to query our FastAPI application similarly to how we did it with the TestClient . If you're familiar with the Requests library, you'll find that the API of HTTPX is almost identical. The important difference for us is that with HTTPX we are not limited to synchronous, but can also make asynchronous requests.","title":"HTTPX"},{"location":"advanced/async-tests/#example","text":"For a simple example, let's consider the following main.py module: from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Tomato\" } The test_main.py module that contains the tests for main.py could look like this now: import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" }","title":"Example"},{"location":"advanced/async-tests/#run-it","text":"You can run your tests as usual via: $ pytest ---> 100%","title":"Run it"},{"location":"advanced/async-tests/#in-detail","text":"The marker @pytest.mark.anyio tells pytest that this test function should be called asynchronously: import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } Tip Note that the test function is now async def instead of just def as before when using the TestClient . Then we can create an AsyncClient with the app, and send async requests to it, using await . import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } This is the equivalent to: response = client . get ( '/' ) that we used to make our requests with the TestClient . Tip Note that we're using async/await with the new AsyncClient - the request is asynchronous.","title":"In Detail"},{"location":"advanced/async-tests/#other-asynchronous-function-calls","text":"As the testing function is now asynchronous, you can now also call (and await ) other async functions apart from sending requests to your FastAPI application in your tests, exactly as you would call them anywhere else in your code. Tip If you encounter a RuntimeError: Task attached to a different loop when integrating asynchronous function calls in your tests (e.g. when using MongoDB's MotorClient ) Remember to instantiate objects that need an event loop only within async functions, e.g. an '@app.on_event(\"startup\") callback.","title":"Other Asynchronous Function Calls"},{"location":"advanced/behind-a-proxy/","text":"\ud504\ub85d\uc2dc\uc758 \ub4a4\ud3b8 \u00b6 \ub2f9\uc2e0\uc758 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c\ub294 \uc778\uc2dd\ud560 \uc218 \uc5c6\ub294 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \ucd94\uac00\ud558\ub294 \uc124\uc815\uc744 \uc801\uc6a9\ud574\uc11c Traefik \ub610\ub294 Nginx\uc640 \uac19\uc740 \ud504\ub85d\uc2dc \uc11c\ubc84\ub97c \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uacbd\uc6b0\uc5d0 root_path \ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2f9\uc2e0\uc758 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \uad6c\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. root_path \ub294 (Starlette\uc744 \ud1b5\ud574 FastAPI\uac00 \uae30\ubc18\uc73c\ub85c \ud558\ub294) ASGI \uba85\uc138\uc5d0 \uc758\ud574 \uc81c\uacf5\ub418\ub294 \ub9e4\ucee4\ub2c8\uc998\uc785\ub2c8\ub2e4. root_path \ub294 \uc774\ub7ec\ud55c \ud2b9\uc815\ud55c \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub610\ud55c \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \ub9c8\uc6b4\ud2b8 \ud560 \ub54c \ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uae30\ub3c4 \ud569\ub2c8\ub2e4. \uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\ub294 \ud504\ub85d\uc2dc \u00b6 \uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\ub294 \ud504\ub85d\uc2dc\uac00 \uc788\ub2e4\ub294 \uac83\uc740, \ub2f9\uc2e0\uc758 \ucf54\ub4dc\uc5d0\uc11c /app \uc73c\ub85c \uacbd\ub85c\ub97c \uc120\uc5b8\ud55c \ub4a4\uc5d0, /api/v1 \uc640 \uac19\uc740 \uacbd\ub85c \uc544\ub798\uc5d0 \ub2f9\uc2e0\uc758 FastAPI \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \ub2f4\ub294 \uc0c8\ub85c\uc6b4 \uacc4\uce35\uc744 \ucd5c\uc0c1\ub2e8(\ud504\ub85d\uc2dc) \uc704\uc5d0 \ucd94\uac00\ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774 \uacbd\uc6b0, \uae30\uc874 \uacbd\ub85c /app \uc740 \uc2e4\uc81c\ub85c\ub294 /api/v1/app \uc5d0\uc11c \ub3d9\uc791\ud569\ub2c8\ub2e4. \ubaa8\ub4e0 \ucf54\ub4dc\uac00 /app \uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \uac83\uc73c\ub85c \uac00\uc815\ud55c \ucc44\ub85c \uc791\uc131\ub418\uc5c8\ub2e4\uace0 \ud560\uc9c0\ub77c\ub3c4 \ub9d0\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud504\ub85d\uc2dc\ub294 Uvicorn\uc73c\ub85c \uc694\uccad\uc744 \uc804\uc1a1\ud558\uae30 \uc804\uc5d0 \uc989\uc2dc \uacbd\ub85c \uc811\ub450\uc0ac \ub97c \"\uc798\ub77c\" \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc73c\ub85c \ud558\uc5ec\uae08 /app \uc5d0\uc11c \ub3d9\uc791\uc911\uc784\uc744 \ud655\uc2e0\ud558\uac8c \ud558\uae30 \ub54c\ubb38\uc5d0, \uc811\ub450\uc0ac\uac00 /api/v1 \uc744 \ud3ec\ud568\ud558\ub3c4\ub85d \ucf54\ub4dc\ub97c \uc218\uc815\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uae4c\uc9c0, \ubaa8\ub4e0 \uac83\uc740 \uc815\uc0c1\uc801\uc73c\ub85c \uc791\ub3d9\ud560 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, \ud1b5\ud569 \ubb38\uc11c UI(\ud504\ub860\ud2b8\uc5d4\ub4dc)\ub97c \uc5f4\ub78c\ud558\uba74, /api/v1/openapi.json \uac00 \uc544\ub2cc /openapi.json \uc5d0\uc11c OpenAPI \uc2a4\ud0a4\ub9c8\ub97c \uac00\uc838\uc624\uac8c \ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c, (\ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c \uc2e4\ud589\ub418\ub294) \ud504\ub860\ud2b8\uc5d4\ub4dc\ub294 /openapi.json \uc5d0 \uc811\uadfc\uc744 \uc2dc\ub3c4\ud558\uace0, OpenAPI \uc2a4\ud0a4\ub9c8\ub97c \uac00\uc838\uc62c \uc218 \uc5c6\uac8c\ub429\ub2c8\ub2e4. \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c /api/v1 \ub97c \uacbd\ub85c \uc811\ub450\uc0ac\ub85c \uac16\ub294 \ud504\ub85d\uc2dc\ub97c \uac16\uace0\uc788\uae30 \ub54c\ubb38\uc5d0, \ud504\ub860\ud2b8\uc5d4\ub4dc\ub294 OpenAPI \uc2a4\ud0a4\ub9c8\ub97c /api/v1/openapi.json \uc5d0\uc11c \ubd88\ub7ec\uc640\uc57c\ud569\ub2c8\ub2e4. graph LR browser(\"Browser\") proxy[\"Proxy on http://0.0.0.0:9999/api/v1/app\"] server[\"Server on http://127.0.0.1:8000/app\"] browser --> proxy proxy --> server \ud301 IP 0.0.0.0 \ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc774 \uae30\uacc4/\uc11c\ubc84\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\ub294 \ubaa8\ub4e0 IP\ub97c \uc218\uc2e0\ud55c\ub2e4\ub294 \uc758\ubbf8\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ubb38\uc11c UI \ub610\ud55c \ud574\ub2f9 API server \uac00 /api/v1 (\ud504\ub85d\uc2dc\uc758 \ub4a4\ud3b8)\uc5d0 \uc704\uce58\ud574\uc788\ub2e4\ub294 \uac83\uc744 \uc120\uc5b8\ud558\ub294 OpenAPI \uc2a4\ud0a4\ub9c8\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74: { \"openapi\" : \"3.0.2\" , // More stuff here \"servers\" : [ { \"url\" : \"/api/v1\" } ], \"paths\" : { // More stuff here } } \uc0c1\uae30 \uc608\uc2dc\uc5d0\uc11c, \"\ud504\ub85d\uc2dc\"\ub294 Traefik \uacfc \uac19\uc740 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc11c\ubc84\ub294 FastAPI\ub97c \ub3d9\uc791\uc2dc\ud0a4\ub294 Uvicorn \uacfc \uac19\uc740 \uac83\uc785\ub2c8\ub2e4. root_path \uc758 \uaddc\uc815 \u00b6 \uc774\ub97c \uc704\ud574, \ucee4\ub9e8\ub4dc \ub77c\uc778 \uc635\uc158\uc778 --root-path \ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Hypercorn\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uc5d0\ub3c4 --root-path \uc635\uc158\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d ASGI \uba85\uc138\ub294 \uc774\ub7ec\ud55c \uacbd\uc6b0\uc5d0 \ub300\ud574 root_path \ub97c \uc815\uc758\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 --root-path \ucee4\ub9e8\ub4dc \ub77c\uc778 \uc635\uc158\uc740 \uc774 root_path \uc744 \uaddc\uc815\ud569\ub2c8\ub2e4. \ud604\uc7ac\uc758 root_path \ud655\uc778\ud558\uae30 \u00b6 \uac01 \uc694\uccad\ub9c8\ub2e4 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc774 \uc0ac\uc6a9\ud558\ub294 \ud604\uc7ac\uc758 root_path \ub97c \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 ASGI \uc2a4\ud399\uc758 \ud55c \ubd80\ubd84\uc778 scope \uc0ac\uc804\uc758 \uc77c\ubd80\uc785\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 \ub2e8\uc9c0 \uc124\uba85\uc744 \ubaa9\uc801\uc73c\ub85c \uc774\uac83\uc744 \ud3ec\ud568\ud574 \ubc18\ud658\ud558\uaca0\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , Request app = FastAPI () @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} \uadf8 \ub2e4\uc74c, \ub2e4\uc74c\uacfc \uac19\uc774 Uvicorn\uc744 \uc2e4\ud589\uc2dc\ud0a4\uba74: $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \uc751\ub2f5\uc740 \ub2e4\uc74c\uacfc \uac19\uc744 \uac83\uc785\ub2c8\ub2e4: { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } FastAPI \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c root_path \uc124\uc815\ud558\uae30 \u00b6 --root-path \uc640 \uac19\uc740 \ucee4\ub9e8\ub4dc \ub77c\uc778 \uc635\uc158\uc744 \uc81c\uacf5\ud560 \ubc29\ubc95\uc774 \uc5c6\ub294 \uacbd\uc6b0, FastAPI \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \uc0dd\uc131\ud560 \ub54c root_path \ub9e4\uac1c\ubcc0\uc218\ub97c \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , Request app = FastAPI ( root_path = \"/api/v1\" ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} root_path \uc744 FastAPI \uc5d0 \uc804\ub2ec\ud558\ub294 \uac83\uc740 Uvicorn \ub610\ub294 Hypercorn\uc5d0 --root-path \ub97c \uc804\ub2ec\ud558\ub294 \uac83\uacfc \ub3d9\uc77c\ud55c \ud6a8\uacfc\ub97c \uac16\uc2b5\ub2c8\ub2e4. root_path \uc5d0 \ub300\ud574 \u00b6 \uc11c\ubc84(Uvicorn)\ub294 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 \uc804\ub2ec\ud558\ub294 \uac83 \uc774\uc678\uc5d0\ub294 \ud574\ub2f9 root_path \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc5fc\ub450\uc5d0 \ub450\uc2ed\uc2dc\uc624. \ud558\uc9c0\ub9cc \ube0c\ub77c\uc6b0\uc800\ub85c http://127.0.0.1:8000/app \uc5d0 \uc811\uc18d\ud558\uba74, \ub2e4\uc74c\uacfc \uac19\uc740 \uc815\uc0c1\uc801\uc778 \uc751\ub2f5\uc744 \ud655\uc778\ud558\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4: { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } \ub530\ub77c\uc11c, http://127.0.0.1:8000/api/v1/app \ub85c \uc811\uadfc\ud558\ub294 \uac83\uc740 \ubc14\ub78c\uc9c1\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Uvicorn\uc740 \ud504\ub85d\uc2dc\uac00 http://127.0.0.1:8000/app \ub85c \uc811\uadfc\ud560 \uac83\uc73c\ub85c \uae30\ub300\ud558\uba70, /api/v1 \uc811\ub450\uc0ac\ub97c \ucd94\uac00\ud558\ub294 \uac83\uc740 \ud504\ub85d\uc2dc\uc758 \uc5ed\ud560\uc785\ub2c8\ub2e4. \uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\ub294 \ud504\ub85d\uc2dc\uc5d0 \ub300\ud574 \u00b6 \uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\ub294 \ud504\ub85d\uc2dc\ub294 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uc124\uc815\ud558\ub294 \ubc29\ubc95\ub4e4 \uc911 \ud558\ub098\uc77c \ubfd0\uc774\ub77c\ub294 \uac83\uc744 \uc5fc\ub450\uc5d0 \ub450\uc2ed\uc2dc\uc624. \ub9ce\uc740 \uacbd\uc6b0\uc5d0\uc11c \uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\uc9c0 \uc54a\ub294 \ud504\ub85d\uc2dc\uac00 \uae30\ubcf8\uac12\uc77c \uac83\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c (\uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\uc9c0 \uc54a\ub294) \uacbd\uc6b0, \ud504\ub85d\uc2dc\ub294 https://myawesomeapp.com \uc640 \uac19\uc740 \uacbd\ub85c\uc5d0\uc11c \uc218\uc2e0\ud558\uace0, \ub9cc\uc57d \ube0c\ub77c\uc6b0\uc800\uac00 https://myawesomeapp.com/api/v1/app \ub85c \uc811\uc18d\ud558\uace0 \ub2f9\uc2e0\uc758 \uc11c\ubc84(\uc608\ub97c \ub4e4\uc5b4, Uvicorn)\ub294 http://127.0.0.1:8000 \uc5d0\uc11c \uc218\uc2e0\ud560 \uacbd\uc6b0 (\uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\uc9c0 \uc54a\ub294) \ud504\ub85d\uc2dc\ub294 \ub3d9\uc77c\ud55c \uacbd\ub85c\uc5d0\uc11c Uvicorn\uc5d0 \uc811\uadfc\ud560 \uac83\uc785\ub2c8\ub2e4: http://127.0.0.1:8000/api/v1/app . Traefik\uc744 \uc0ac\uc6a9\ud574 \ub85c\uceec \ud658\uacbd\uc5d0\uc11c \ud14c\uc2a4\ud2b8\ud558\uae30 \u00b6 \uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c Traefik \uc744 \uc0ac\uc6a9\ud574 \ub85c\uceec \ud658\uacbd\uc5d0\uc11c \uc27d\uac8c \ud14c\uc2a4\ud2b8\ud574\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. Traefik\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ud558\uc2ed\uc2dc\uc624 . \uc774\uac83\uc740 \ub2e8\uc77c \uc774\uc9c4 \ud30c\uc77c\ub85c, \uc555\ucd95 \ud30c\uc77c\uc744 \ud480\uc5b4 \ud130\ubbf8\ub110\uc5d0\uc11c \uc9c1\uc811\uc801\uc73c\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 traefik.toml \ud30c\uc77c\uc744 \uc0dd\uc131\ud558\uc2ed\uc2dc\uc624: [entryPoints] [entryPoints.http] address = \":9999\" [providers] [providers.file] filename = \"routes.toml\" \uc774\uac83\uc740 Traefik\uc5d0\uac8c 9999\ubc88 \ud3ec\ud2b8\uc5d0\uc11c \uc218\uc2e0\ud558\uace0 \ub610\ub2e4\ub978 \ud30c\uc77c\uc778 routes.toml \ub97c \uc0ac\uc6a9\ud560 \uac83\uc744 \uc9c0\uc2dc\ud569\ub2c8\ub2e4. \ud301 \ud45c\uc900 HTTP \ud3ec\ud2b8\uc778 80 \ub300\uc2e0 9999\ubc88 \ud3ec\ud2b8\ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \uad00\ub9ac\uc790 \uad8c\ud55c( sudo )\uc73c\ub85c \uc2e4\ud589\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4. \uadf8 \ub610 \ub2e4\ub978 \ud30c\uc77c\uc778 routes.toml \ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4: [http] [http.middlewares] [http.middlewares.api-stripprefix.stripPrefix] prefixes = [ \"/api/v1\" ] [http.routers] [http.routers.app-http] entryPoints = [ \"http\" ] service = \"app\" rule = \"PathPrefix(`/api/v1`)\" middlewares = [ \"api-stripprefix\" ] [http.services] [http.services.app] [http.services.app.loadBalancer] [[http.services.app.loadBalancer.servers]] url = \"http://127.0.0.1:8000\" \uc774 \ud30c\uc77c\uc740 \uacbd\ub85c \uc811\ub450\uc0ac /api/v1 \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d Traefik\uc758 \ud658\uacbd\uc744 \uc124\uc815\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\uac83\uc740 http://127.0.0.1:8000 \uc5d0\uc11c \ub3d9\uc791 \uc911\uc778 Uvicorn\uc73c\ub85c \uc694\uccad\uc744 \ub9ac\ub2e4\uc774\ub809\ud2b8\ud560 \uac83\uc785\ub2c8\ub2e4. \uc774\uc81c Traefik\uc744 \uc2e4\ud589\ud558\uc2ed\uc2dc\uc624: $ ./traefik --configFile = traefik.toml INFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml \uadf8\ub9ac\uace0 --root-path \uc635\uc158\uc744 \uc0ac\uc6a9\ud574 Uvicorn\uc73c\ub85c \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud558\uc2ed\uc2dc\uc624. $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \uc751\ub2f5 \ud655\uc778 \u00b6 Uvicorn\uc5d0 \ub300\ud55c \ud3ec\ud2b8\ub97c \uc0ac\uc6a9\ud574 URL\ub85c \uc811\uc18d\ud558\uc2ed\uc2dc\uc624: http://127.0.0.1:8000/app , \uc815\uc0c1\uc801\uc778 \uc751\ub2f5\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } \ud301 http://127.0.0.1:8000/app \ub85c \uc811\uadfc\ud55c\ub2e4\uace0 \ud574\ub3c4, root_path \uac00 --root-path \uc5d0\uc11c \uac00\uc838\uc628 /api/v1 \ub85c \ud45c\uc2dc\ub418\ub294 \uac83\uc560 \uc8fc\ubaa9\ud558\uc2ed\uc2dc\uc624. \uc774\uc81c Traefik\uc5d0 \ub300\ud55c \ud3ec\ud2b8\ub97c \uc0ac\uc6a9\ud574 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \ud3ec\ud568\ud55c URL\ub85c \uc811\uc18d\ud558\uc2ed\uc2dc\uc624: http://127.0.0.1:9999/api/v1/app . \ub3d9\uc77c\ud55c \uc751\ub2f5\uc744 \ubc1b\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } \ud558\uc9c0\ub9cc \uc774\ubc88\uc5d0\ub294 \ud504\ub85d\uc2dc\uc5d0 \uc758\ud574 \uacbd\ub85c \uc811\ub450\uc0ac\uac00 \ud3ec\ud568\ub41c URL\uc5d0\uc11c \ud574\ub2f9 \uc751\ub2f5\uc744 \ubc1b\uc2b5\ub2c8\ub2e4: /api/v1 . \ubb3c\ub860, \ubaa8\ub450\uac00 \ud504\ub85d\uc2dc\ub97c \ud1b5\ud574 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 \uc811\uadfc\ud55c\ub2e4\ub294 \uac83\uc774 \uc774 \uc139\uc158\uc774 \uc8fc\uc81c\uc774\ubbc0\ub85c \uacbd\ub85c \uc811\ub450\uc0ac /app/v1 \ub97c \uc0ac\uc6a9\ud55c \ubc84\uc804\uc774 \"\uc62c\ubc14\ub978\" \ubc84\uc804\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 Uvicorn\uc5d0\uc11c \uc9c1\uc811 \uc81c\uacf5\ud558\ub294 \uacbd\ub85c \uc811\ub450\uc0ac\uac00 \uc5c6\ub294 \ubc84\uc804( http://127.0.0.1:8000/app )\uc740 \uc624\uc9c1 \ud504\ub85d\uc2dc (Traefik)\ub9cc \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub85c\uc368 \ud504\ub85d\uc2dc(Traefik)\uac00 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uacfc \uc11c\ubc84(Uvicorn)\uac00 --root-path \uc635\uc158\uc73c\ub85c\ubd80\ud130 root_path \ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubb38\uc11c UI \ud655\uc778\ud558\uae30 \u00b6 \ud558\uc9c0\ub9cc \uc5ec\uae30 \uc7ac\ubbf8\uc788\ub294 \uc0ac\uc2e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \u2728 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 \uc811\uadfc\ud558\ub294 \"\uacf5\uc2dd\uc801\uc778\" \ubc29\ubc95\uc740 \uc6b0\ub9ac\uac00 \uc815\uc758\ud55c \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\ub294 \ud504\ub85d\uc2dc\ub97c \ud1b5\ud55c \uac83\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c, URL\uc5d0\uc11c \uacbd\ub85c \uc811\ub450\uc0ac \uc5c6\uc774 Uvicorn\uc5d0\uc11c \uc9c1\uc811 \uc81c\uacf5\ud558\ub294 \ubb38\uc11c UI\uc5d0 \uc811\uadfc\ud558\ub824\uace0 \ud558\ub294 \uacbd\uc6b0, \uc774\uac83\uc740 \ub3d9\uc791\ud558\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. \ud504\ub85d\uc2dc\ub97c \ud1b5\ud574 \uc811\uadfc\ud574\uc57c\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. http://127.0.0.1:8000/docs \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ud558\uc9c0\ub9cc \ubb38\uc11c URL\uc744 \ud3ec\ud2b8 9999 \uc758 \ud504\ub85d\uc2dc\ub97c \uc0ac\uc6a9\ud558\ub294 \"\uacf5\uc2dd\uc801\uc778\" URL\uc778 /api/v1/docs \ub97c \ud1b5\ud574 \uc811\uadfc\ud558\uba74, \uc815\uc0c1\uc801\uc73c\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4! \ud83c\udf89 http://127.0.0.1:9999/api/v1/docs \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uc6b0\ub9ac\uac00 \ubc14\ub780 \uadf8\ub300\ub85c \uc785\ub2c8\ub2e4. \u2714\ufe0f \uc774\uac83\uc740 FastAPI\uac00 \uc774 root_path \uc744 \uc0ac\uc6a9\ud574 root_path \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 URL\ub85c OpenAPI\uc5d0\uc11c \uae30\ubcf8 server \ub97c \uc0dd\uc131\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ucd94\uac00\uc801\uc778 \uc11c\ubc84\ub4e4 \u00b6 \uacbd\uace0 \uc5ec\uae30\ubd80\ud130\ub294 \uc2ec\ud654\ub41c \uc0ac\ub840\uc5d0 \ub300\ud574 \ub2e4\ub8f9\ub2c8\ub2e4. \ub118\uc5b4\uac00\uc154\ub3c4 \uc88b\uc2b5\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c, FastAPI \ub294 root_path \uc758 URL\ub85c OpenAPI \uc2a4\ud0a4\ub9c8\uc758 server \ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \ub300\uc2e0\uc5d0 \ub2e4\ub978 servers \ub97c \uc81c\uacf5\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc77c\ub840\ub85c \uc2a4\ud14c\uc774\uc9d5 \ud658\uacbd \ubc0f \uc6b4\uc601 \ud658\uacbd\uacfc \uc0c1\ud638\uc791\uc6a9\uc744 \ud558\ub294 \ub3d9\uc77c\ud55c \ubb38\uc11c UI\ub97c \uc6d0\ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc6a9\uc790 \uc9c0\uc815 \ub9ac\uc2a4\ud2b8\uc778 servers \ub97c \uc804\ub2ec\ud558\uace0 root_path \uac00 \uc874\uc7ac\ud558\ub294(API\uac00 \ud504\ub85d\uc2dc \ub4a4\uc5d0 \uc704\uce58\ud558\uae30 \ub54c\ubb38\uc5d0) \uacbd\uc6b0, FastAPI \ub294 \uc774 root_path \uc640 \ud568\uaed8 \"\uc11c\ubc84\"\ub97c \ud574\ub2f9 \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubd80\ubd84\uc5d0 \uc0bd\uc785\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4: from fastapi import FastAPI , Request app = FastAPI ( servers = [ { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" }, ], root_path = \"/api/v1\" , ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} \uc774\uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 OpenAPI \uc2a4\ud0a4\ub9c8\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4: { \"openapi\" : \"3.0.2\" , // More stuff here \"servers\" : [ { \"url\" : \"/api/v1\" }, { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" } ], \"paths\" : { // More stuff here } } \ud301 url \uc758 \uac12\uc774 root_path \uc5d0\uc11c \uac00\uc838\uc628 /api/v1 \uc778 \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub41c \uc11c\ubc84\uc5d0 \uc8fc\ubaa9\ud558\uc2ed\uc2dc\uc624. http://127.0.0.1:9999/api/v1/docs \uc758 \ubb38\uc11c UI\ub294 \ub2e4\uc74c\ucc98\ub7fc \uc0dd\uacbc\uc2b5\ub2c8\ub2e4: \ud301 \ubb38\uc11c UI\ub294 \ub2f9\uc2e0\uc774 \uc120\ud0dd\ud55c \uc11c\ubc84\uc640 \uc0c1\ud638\uc791\uc6a9\ud569\ub2c8\ub2e4. root_path \ub97c \uc0ac\uc6a9\ud558\ub294 \uc790\ub3d9 \uc11c\ubc84 \ube44\ud65c\uc131\ud654 \u00b6 FastAPI \uac00 root_path \ub97c \uc0ac\uc6a9\ud55c \uc790\ub3d9 \uc11c\ubc84\ub97c \ud3ec\ud568\ud558\ub294 \uac83\uc744 \uc6d0\uce58 \uc54a\ub294\ub2e4\uba74, root_path_in_servers=False \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI , Request app = FastAPI ( servers = [ { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" }, ], root_path = \"/api/v1\" , root_path_in_servers = False , ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} \uc774 \uacbd\uc6b0 OpenAPI \uc2a4\ud0a4\ub9c8\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 \ub9c8\uc6b4\ud2b8 \u00b6 \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 - \ub9c8\uc6b4\ud2b8 \uc5d0\uc11c \uc124\uba85\ud558\ub294 \ub300\ub85c \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \ub9c8\uc6b4\ud2b8\ud558\uba74\uc11c \ub3d9\uc2dc\uc5d0 root_path \uc640 \ud568\uaed8 \ud504\ub85d\uc2dc\ub97c \uc0ac\uc6a9\ud558\uace0\uc2f6\ub2e4\uba74, \uc608\uc0c1\ud55c\ub300\ub85c \uc815\uc0c1\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI\ub294 \ub0b4\ubd80\uc801\uc73c\ub85c \ub611\ub611\ud558\uac8c root_path \ub97c \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0, \uc774\uac83\uc740 \ubb38\uc81c \uc5c6\uc774 \ub3d9\uc791\ud569\ub2c8\ub2e4. \u2728","title":"\ud504\ub85d\uc2dc\uc758 \ub4a4\ud3b8"},{"location":"advanced/behind-a-proxy/#_1","text":"\ub2f9\uc2e0\uc758 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c\ub294 \uc778\uc2dd\ud560 \uc218 \uc5c6\ub294 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \ucd94\uac00\ud558\ub294 \uc124\uc815\uc744 \uc801\uc6a9\ud574\uc11c Traefik \ub610\ub294 Nginx\uc640 \uac19\uc740 \ud504\ub85d\uc2dc \uc11c\ubc84\ub97c \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uacbd\uc6b0\uc5d0 root_path \ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2f9\uc2e0\uc758 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \uad6c\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. root_path \ub294 (Starlette\uc744 \ud1b5\ud574 FastAPI\uac00 \uae30\ubc18\uc73c\ub85c \ud558\ub294) ASGI \uba85\uc138\uc5d0 \uc758\ud574 \uc81c\uacf5\ub418\ub294 \ub9e4\ucee4\ub2c8\uc998\uc785\ub2c8\ub2e4. root_path \ub294 \uc774\ub7ec\ud55c \ud2b9\uc815\ud55c \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub610\ud55c \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \ub9c8\uc6b4\ud2b8 \ud560 \ub54c \ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uae30\ub3c4 \ud569\ub2c8\ub2e4.","title":"\ud504\ub85d\uc2dc\uc758 \ub4a4\ud3b8"},{"location":"advanced/behind-a-proxy/#_2","text":"\uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\ub294 \ud504\ub85d\uc2dc\uac00 \uc788\ub2e4\ub294 \uac83\uc740, \ub2f9\uc2e0\uc758 \ucf54\ub4dc\uc5d0\uc11c /app \uc73c\ub85c \uacbd\ub85c\ub97c \uc120\uc5b8\ud55c \ub4a4\uc5d0, /api/v1 \uc640 \uac19\uc740 \uacbd\ub85c \uc544\ub798\uc5d0 \ub2f9\uc2e0\uc758 FastAPI \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \ub2f4\ub294 \uc0c8\ub85c\uc6b4 \uacc4\uce35\uc744 \ucd5c\uc0c1\ub2e8(\ud504\ub85d\uc2dc) \uc704\uc5d0 \ucd94\uac00\ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774 \uacbd\uc6b0, \uae30\uc874 \uacbd\ub85c /app \uc740 \uc2e4\uc81c\ub85c\ub294 /api/v1/app \uc5d0\uc11c \ub3d9\uc791\ud569\ub2c8\ub2e4. \ubaa8\ub4e0 \ucf54\ub4dc\uac00 /app \uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \uac83\uc73c\ub85c \uac00\uc815\ud55c \ucc44\ub85c \uc791\uc131\ub418\uc5c8\ub2e4\uace0 \ud560\uc9c0\ub77c\ub3c4 \ub9d0\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud504\ub85d\uc2dc\ub294 Uvicorn\uc73c\ub85c \uc694\uccad\uc744 \uc804\uc1a1\ud558\uae30 \uc804\uc5d0 \uc989\uc2dc \uacbd\ub85c \uc811\ub450\uc0ac \ub97c \"\uc798\ub77c\" \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc73c\ub85c \ud558\uc5ec\uae08 /app \uc5d0\uc11c \ub3d9\uc791\uc911\uc784\uc744 \ud655\uc2e0\ud558\uac8c \ud558\uae30 \ub54c\ubb38\uc5d0, \uc811\ub450\uc0ac\uac00 /api/v1 \uc744 \ud3ec\ud568\ud558\ub3c4\ub85d \ucf54\ub4dc\ub97c \uc218\uc815\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uae4c\uc9c0, \ubaa8\ub4e0 \uac83\uc740 \uc815\uc0c1\uc801\uc73c\ub85c \uc791\ub3d9\ud560 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, \ud1b5\ud569 \ubb38\uc11c UI(\ud504\ub860\ud2b8\uc5d4\ub4dc)\ub97c \uc5f4\ub78c\ud558\uba74, /api/v1/openapi.json \uac00 \uc544\ub2cc /openapi.json \uc5d0\uc11c OpenAPI \uc2a4\ud0a4\ub9c8\ub97c \uac00\uc838\uc624\uac8c \ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c, (\ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c \uc2e4\ud589\ub418\ub294) \ud504\ub860\ud2b8\uc5d4\ub4dc\ub294 /openapi.json \uc5d0 \uc811\uadfc\uc744 \uc2dc\ub3c4\ud558\uace0, OpenAPI \uc2a4\ud0a4\ub9c8\ub97c \uac00\uc838\uc62c \uc218 \uc5c6\uac8c\ub429\ub2c8\ub2e4. \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c /api/v1 \ub97c \uacbd\ub85c \uc811\ub450\uc0ac\ub85c \uac16\ub294 \ud504\ub85d\uc2dc\ub97c \uac16\uace0\uc788\uae30 \ub54c\ubb38\uc5d0, \ud504\ub860\ud2b8\uc5d4\ub4dc\ub294 OpenAPI \uc2a4\ud0a4\ub9c8\ub97c /api/v1/openapi.json \uc5d0\uc11c \ubd88\ub7ec\uc640\uc57c\ud569\ub2c8\ub2e4. graph LR browser(\"Browser\") proxy[\"Proxy on http://0.0.0.0:9999/api/v1/app\"] server[\"Server on http://127.0.0.1:8000/app\"] browser --> proxy proxy --> server \ud301 IP 0.0.0.0 \ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc774 \uae30\uacc4/\uc11c\ubc84\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\ub294 \ubaa8\ub4e0 IP\ub97c \uc218\uc2e0\ud55c\ub2e4\ub294 \uc758\ubbf8\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ubb38\uc11c UI \ub610\ud55c \ud574\ub2f9 API server \uac00 /api/v1 (\ud504\ub85d\uc2dc\uc758 \ub4a4\ud3b8)\uc5d0 \uc704\uce58\ud574\uc788\ub2e4\ub294 \uac83\uc744 \uc120\uc5b8\ud558\ub294 OpenAPI \uc2a4\ud0a4\ub9c8\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74: { \"openapi\" : \"3.0.2\" , // More stuff here \"servers\" : [ { \"url\" : \"/api/v1\" } ], \"paths\" : { // More stuff here } } \uc0c1\uae30 \uc608\uc2dc\uc5d0\uc11c, \"\ud504\ub85d\uc2dc\"\ub294 Traefik \uacfc \uac19\uc740 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc11c\ubc84\ub294 FastAPI\ub97c \ub3d9\uc791\uc2dc\ud0a4\ub294 Uvicorn \uacfc \uac19\uc740 \uac83\uc785\ub2c8\ub2e4.","title":"\uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\ub294 \ud504\ub85d\uc2dc"},{"location":"advanced/behind-a-proxy/#root_path","text":"\uc774\ub97c \uc704\ud574, \ucee4\ub9e8\ub4dc \ub77c\uc778 \uc635\uc158\uc778 --root-path \ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Hypercorn\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uc5d0\ub3c4 --root-path \uc635\uc158\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d ASGI \uba85\uc138\ub294 \uc774\ub7ec\ud55c \uacbd\uc6b0\uc5d0 \ub300\ud574 root_path \ub97c \uc815\uc758\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 --root-path \ucee4\ub9e8\ub4dc \ub77c\uc778 \uc635\uc158\uc740 \uc774 root_path \uc744 \uaddc\uc815\ud569\ub2c8\ub2e4.","title":"root_path\uc758 \uaddc\uc815"},{"location":"advanced/behind-a-proxy/#root_path_1","text":"\uac01 \uc694\uccad\ub9c8\ub2e4 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc774 \uc0ac\uc6a9\ud558\ub294 \ud604\uc7ac\uc758 root_path \ub97c \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 ASGI \uc2a4\ud399\uc758 \ud55c \ubd80\ubd84\uc778 scope \uc0ac\uc804\uc758 \uc77c\ubd80\uc785\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 \ub2e8\uc9c0 \uc124\uba85\uc744 \ubaa9\uc801\uc73c\ub85c \uc774\uac83\uc744 \ud3ec\ud568\ud574 \ubc18\ud658\ud558\uaca0\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , Request app = FastAPI () @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} \uadf8 \ub2e4\uc74c, \ub2e4\uc74c\uacfc \uac19\uc774 Uvicorn\uc744 \uc2e4\ud589\uc2dc\ud0a4\uba74: $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \uc751\ub2f5\uc740 \ub2e4\uc74c\uacfc \uac19\uc744 \uac83\uc785\ub2c8\ub2e4: { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" }","title":"\ud604\uc7ac\uc758 root_path \ud655\uc778\ud558\uae30"},{"location":"advanced/behind-a-proxy/#fastapi-root_path","text":"--root-path \uc640 \uac19\uc740 \ucee4\ub9e8\ub4dc \ub77c\uc778 \uc635\uc158\uc744 \uc81c\uacf5\ud560 \ubc29\ubc95\uc774 \uc5c6\ub294 \uacbd\uc6b0, FastAPI \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \uc0dd\uc131\ud560 \ub54c root_path \ub9e4\uac1c\ubcc0\uc218\ub97c \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , Request app = FastAPI ( root_path = \"/api/v1\" ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} root_path \uc744 FastAPI \uc5d0 \uc804\ub2ec\ud558\ub294 \uac83\uc740 Uvicorn \ub610\ub294 Hypercorn\uc5d0 --root-path \ub97c \uc804\ub2ec\ud558\ub294 \uac83\uacfc \ub3d9\uc77c\ud55c \ud6a8\uacfc\ub97c \uac16\uc2b5\ub2c8\ub2e4.","title":"FastAPI \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c root_path \uc124\uc815\ud558\uae30"},{"location":"advanced/behind-a-proxy/#root_path_2","text":"\uc11c\ubc84(Uvicorn)\ub294 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 \uc804\ub2ec\ud558\ub294 \uac83 \uc774\uc678\uc5d0\ub294 \ud574\ub2f9 root_path \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc5fc\ub450\uc5d0 \ub450\uc2ed\uc2dc\uc624. \ud558\uc9c0\ub9cc \ube0c\ub77c\uc6b0\uc800\ub85c http://127.0.0.1:8000/app \uc5d0 \uc811\uc18d\ud558\uba74, \ub2e4\uc74c\uacfc \uac19\uc740 \uc815\uc0c1\uc801\uc778 \uc751\ub2f5\uc744 \ud655\uc778\ud558\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4: { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } \ub530\ub77c\uc11c, http://127.0.0.1:8000/api/v1/app \ub85c \uc811\uadfc\ud558\ub294 \uac83\uc740 \ubc14\ub78c\uc9c1\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Uvicorn\uc740 \ud504\ub85d\uc2dc\uac00 http://127.0.0.1:8000/app \ub85c \uc811\uadfc\ud560 \uac83\uc73c\ub85c \uae30\ub300\ud558\uba70, /api/v1 \uc811\ub450\uc0ac\ub97c \ucd94\uac00\ud558\ub294 \uac83\uc740 \ud504\ub85d\uc2dc\uc758 \uc5ed\ud560\uc785\ub2c8\ub2e4.","title":"root_path\uc5d0 \ub300\ud574"},{"location":"advanced/behind-a-proxy/#_3","text":"\uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\ub294 \ud504\ub85d\uc2dc\ub294 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uc124\uc815\ud558\ub294 \ubc29\ubc95\ub4e4 \uc911 \ud558\ub098\uc77c \ubfd0\uc774\ub77c\ub294 \uac83\uc744 \uc5fc\ub450\uc5d0 \ub450\uc2ed\uc2dc\uc624. \ub9ce\uc740 \uacbd\uc6b0\uc5d0\uc11c \uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\uc9c0 \uc54a\ub294 \ud504\ub85d\uc2dc\uac00 \uae30\ubcf8\uac12\uc77c \uac83\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c (\uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\uc9c0 \uc54a\ub294) \uacbd\uc6b0, \ud504\ub85d\uc2dc\ub294 https://myawesomeapp.com \uc640 \uac19\uc740 \uacbd\ub85c\uc5d0\uc11c \uc218\uc2e0\ud558\uace0, \ub9cc\uc57d \ube0c\ub77c\uc6b0\uc800\uac00 https://myawesomeapp.com/api/v1/app \ub85c \uc811\uc18d\ud558\uace0 \ub2f9\uc2e0\uc758 \uc11c\ubc84(\uc608\ub97c \ub4e4\uc5b4, Uvicorn)\ub294 http://127.0.0.1:8000 \uc5d0\uc11c \uc218\uc2e0\ud560 \uacbd\uc6b0 (\uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\uc9c0 \uc54a\ub294) \ud504\ub85d\uc2dc\ub294 \ub3d9\uc77c\ud55c \uacbd\ub85c\uc5d0\uc11c Uvicorn\uc5d0 \uc811\uadfc\ud560 \uac83\uc785\ub2c8\ub2e4: http://127.0.0.1:8000/api/v1/app .","title":"\uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\ub294 \ud504\ub85d\uc2dc\uc5d0 \ub300\ud574"},{"location":"advanced/behind-a-proxy/#traefik","text":"\uc798\ub9b0 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c Traefik \uc744 \uc0ac\uc6a9\ud574 \ub85c\uceec \ud658\uacbd\uc5d0\uc11c \uc27d\uac8c \ud14c\uc2a4\ud2b8\ud574\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. Traefik\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ud558\uc2ed\uc2dc\uc624 . \uc774\uac83\uc740 \ub2e8\uc77c \uc774\uc9c4 \ud30c\uc77c\ub85c, \uc555\ucd95 \ud30c\uc77c\uc744 \ud480\uc5b4 \ud130\ubbf8\ub110\uc5d0\uc11c \uc9c1\uc811\uc801\uc73c\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 traefik.toml \ud30c\uc77c\uc744 \uc0dd\uc131\ud558\uc2ed\uc2dc\uc624: [entryPoints] [entryPoints.http] address = \":9999\" [providers] [providers.file] filename = \"routes.toml\" \uc774\uac83\uc740 Traefik\uc5d0\uac8c 9999\ubc88 \ud3ec\ud2b8\uc5d0\uc11c \uc218\uc2e0\ud558\uace0 \ub610\ub2e4\ub978 \ud30c\uc77c\uc778 routes.toml \ub97c \uc0ac\uc6a9\ud560 \uac83\uc744 \uc9c0\uc2dc\ud569\ub2c8\ub2e4. \ud301 \ud45c\uc900 HTTP \ud3ec\ud2b8\uc778 80 \ub300\uc2e0 9999\ubc88 \ud3ec\ud2b8\ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \uad00\ub9ac\uc790 \uad8c\ud55c( sudo )\uc73c\ub85c \uc2e4\ud589\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4. \uadf8 \ub610 \ub2e4\ub978 \ud30c\uc77c\uc778 routes.toml \ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4: [http] [http.middlewares] [http.middlewares.api-stripprefix.stripPrefix] prefixes = [ \"/api/v1\" ] [http.routers] [http.routers.app-http] entryPoints = [ \"http\" ] service = \"app\" rule = \"PathPrefix(`/api/v1`)\" middlewares = [ \"api-stripprefix\" ] [http.services] [http.services.app] [http.services.app.loadBalancer] [[http.services.app.loadBalancer.servers]] url = \"http://127.0.0.1:8000\" \uc774 \ud30c\uc77c\uc740 \uacbd\ub85c \uc811\ub450\uc0ac /api/v1 \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d Traefik\uc758 \ud658\uacbd\uc744 \uc124\uc815\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\uac83\uc740 http://127.0.0.1:8000 \uc5d0\uc11c \ub3d9\uc791 \uc911\uc778 Uvicorn\uc73c\ub85c \uc694\uccad\uc744 \ub9ac\ub2e4\uc774\ub809\ud2b8\ud560 \uac83\uc785\ub2c8\ub2e4. \uc774\uc81c Traefik\uc744 \uc2e4\ud589\ud558\uc2ed\uc2dc\uc624: $ ./traefik --configFile = traefik.toml INFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml \uadf8\ub9ac\uace0 --root-path \uc635\uc158\uc744 \uc0ac\uc6a9\ud574 Uvicorn\uc73c\ub85c \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud558\uc2ed\uc2dc\uc624. $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Traefik\uc744 \uc0ac\uc6a9\ud574 \ub85c\uceec \ud658\uacbd\uc5d0\uc11c \ud14c\uc2a4\ud2b8\ud558\uae30"},{"location":"advanced/behind-a-proxy/#_4","text":"Uvicorn\uc5d0 \ub300\ud55c \ud3ec\ud2b8\ub97c \uc0ac\uc6a9\ud574 URL\ub85c \uc811\uc18d\ud558\uc2ed\uc2dc\uc624: http://127.0.0.1:8000/app , \uc815\uc0c1\uc801\uc778 \uc751\ub2f5\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } \ud301 http://127.0.0.1:8000/app \ub85c \uc811\uadfc\ud55c\ub2e4\uace0 \ud574\ub3c4, root_path \uac00 --root-path \uc5d0\uc11c \uac00\uc838\uc628 /api/v1 \ub85c \ud45c\uc2dc\ub418\ub294 \uac83\uc560 \uc8fc\ubaa9\ud558\uc2ed\uc2dc\uc624. \uc774\uc81c Traefik\uc5d0 \ub300\ud55c \ud3ec\ud2b8\ub97c \uc0ac\uc6a9\ud574 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \ud3ec\ud568\ud55c URL\ub85c \uc811\uc18d\ud558\uc2ed\uc2dc\uc624: http://127.0.0.1:9999/api/v1/app . \ub3d9\uc77c\ud55c \uc751\ub2f5\uc744 \ubc1b\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } \ud558\uc9c0\ub9cc \uc774\ubc88\uc5d0\ub294 \ud504\ub85d\uc2dc\uc5d0 \uc758\ud574 \uacbd\ub85c \uc811\ub450\uc0ac\uac00 \ud3ec\ud568\ub41c URL\uc5d0\uc11c \ud574\ub2f9 \uc751\ub2f5\uc744 \ubc1b\uc2b5\ub2c8\ub2e4: /api/v1 . \ubb3c\ub860, \ubaa8\ub450\uac00 \ud504\ub85d\uc2dc\ub97c \ud1b5\ud574 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 \uc811\uadfc\ud55c\ub2e4\ub294 \uac83\uc774 \uc774 \uc139\uc158\uc774 \uc8fc\uc81c\uc774\ubbc0\ub85c \uacbd\ub85c \uc811\ub450\uc0ac /app/v1 \ub97c \uc0ac\uc6a9\ud55c \ubc84\uc804\uc774 \"\uc62c\ubc14\ub978\" \ubc84\uc804\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 Uvicorn\uc5d0\uc11c \uc9c1\uc811 \uc81c\uacf5\ud558\ub294 \uacbd\ub85c \uc811\ub450\uc0ac\uac00 \uc5c6\ub294 \ubc84\uc804( http://127.0.0.1:8000/app )\uc740 \uc624\uc9c1 \ud504\ub85d\uc2dc (Traefik)\ub9cc \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub85c\uc368 \ud504\ub85d\uc2dc(Traefik)\uac00 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uacfc \uc11c\ubc84(Uvicorn)\uac00 --root-path \uc635\uc158\uc73c\ub85c\ubd80\ud130 root_path \ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc751\ub2f5 \ud655\uc778"},{"location":"advanced/behind-a-proxy/#ui","text":"\ud558\uc9c0\ub9cc \uc5ec\uae30 \uc7ac\ubbf8\uc788\ub294 \uc0ac\uc2e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \u2728 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 \uc811\uadfc\ud558\ub294 \"\uacf5\uc2dd\uc801\uc778\" \ubc29\ubc95\uc740 \uc6b0\ub9ac\uac00 \uc815\uc758\ud55c \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac16\ub294 \ud504\ub85d\uc2dc\ub97c \ud1b5\ud55c \uac83\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c, URL\uc5d0\uc11c \uacbd\ub85c \uc811\ub450\uc0ac \uc5c6\uc774 Uvicorn\uc5d0\uc11c \uc9c1\uc811 \uc81c\uacf5\ud558\ub294 \ubb38\uc11c UI\uc5d0 \uc811\uadfc\ud558\ub824\uace0 \ud558\ub294 \uacbd\uc6b0, \uc774\uac83\uc740 \ub3d9\uc791\ud558\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. \ud504\ub85d\uc2dc\ub97c \ud1b5\ud574 \uc811\uadfc\ud574\uc57c\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. http://127.0.0.1:8000/docs \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ud558\uc9c0\ub9cc \ubb38\uc11c URL\uc744 \ud3ec\ud2b8 9999 \uc758 \ud504\ub85d\uc2dc\ub97c \uc0ac\uc6a9\ud558\ub294 \"\uacf5\uc2dd\uc801\uc778\" URL\uc778 /api/v1/docs \ub97c \ud1b5\ud574 \uc811\uadfc\ud558\uba74, \uc815\uc0c1\uc801\uc73c\ub85c \ub3d9\uc791\ud569\ub2c8\ub2e4! \ud83c\udf89 http://127.0.0.1:9999/api/v1/docs \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uc6b0\ub9ac\uac00 \ubc14\ub780 \uadf8\ub300\ub85c \uc785\ub2c8\ub2e4. \u2714\ufe0f \uc774\uac83\uc740 FastAPI\uac00 \uc774 root_path \uc744 \uc0ac\uc6a9\ud574 root_path \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 URL\ub85c OpenAPI\uc5d0\uc11c \uae30\ubcf8 server \ub97c \uc0dd\uc131\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.","title":"\ubb38\uc11c UI \ud655\uc778\ud558\uae30"},{"location":"advanced/behind-a-proxy/#_5","text":"\uacbd\uace0 \uc5ec\uae30\ubd80\ud130\ub294 \uc2ec\ud654\ub41c \uc0ac\ub840\uc5d0 \ub300\ud574 \ub2e4\ub8f9\ub2c8\ub2e4. \ub118\uc5b4\uac00\uc154\ub3c4 \uc88b\uc2b5\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c, FastAPI \ub294 root_path \uc758 URL\ub85c OpenAPI \uc2a4\ud0a4\ub9c8\uc758 server \ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \ub300\uc2e0\uc5d0 \ub2e4\ub978 servers \ub97c \uc81c\uacf5\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc77c\ub840\ub85c \uc2a4\ud14c\uc774\uc9d5 \ud658\uacbd \ubc0f \uc6b4\uc601 \ud658\uacbd\uacfc \uc0c1\ud638\uc791\uc6a9\uc744 \ud558\ub294 \ub3d9\uc77c\ud55c \ubb38\uc11c UI\ub97c \uc6d0\ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc6a9\uc790 \uc9c0\uc815 \ub9ac\uc2a4\ud2b8\uc778 servers \ub97c \uc804\ub2ec\ud558\uace0 root_path \uac00 \uc874\uc7ac\ud558\ub294(API\uac00 \ud504\ub85d\uc2dc \ub4a4\uc5d0 \uc704\uce58\ud558\uae30 \ub54c\ubb38\uc5d0) \uacbd\uc6b0, FastAPI \ub294 \uc774 root_path \uc640 \ud568\uaed8 \"\uc11c\ubc84\"\ub97c \ud574\ub2f9 \ub9ac\uc2a4\ud2b8\uc758 \uccab \ubd80\ubd84\uc5d0 \uc0bd\uc785\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4: from fastapi import FastAPI , Request app = FastAPI ( servers = [ { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" }, ], root_path = \"/api/v1\" , ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} \uc774\uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 OpenAPI \uc2a4\ud0a4\ub9c8\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4: { \"openapi\" : \"3.0.2\" , // More stuff here \"servers\" : [ { \"url\" : \"/api/v1\" }, { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" } ], \"paths\" : { // More stuff here } } \ud301 url \uc758 \uac12\uc774 root_path \uc5d0\uc11c \uac00\uc838\uc628 /api/v1 \uc778 \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub41c \uc11c\ubc84\uc5d0 \uc8fc\ubaa9\ud558\uc2ed\uc2dc\uc624. http://127.0.0.1:9999/api/v1/docs \uc758 \ubb38\uc11c UI\ub294 \ub2e4\uc74c\ucc98\ub7fc \uc0dd\uacbc\uc2b5\ub2c8\ub2e4: \ud301 \ubb38\uc11c UI\ub294 \ub2f9\uc2e0\uc774 \uc120\ud0dd\ud55c \uc11c\ubc84\uc640 \uc0c1\ud638\uc791\uc6a9\ud569\ub2c8\ub2e4.","title":"\ucd94\uac00\uc801\uc778 \uc11c\ubc84\ub4e4"},{"location":"advanced/behind-a-proxy/#root_path_3","text":"FastAPI \uac00 root_path \ub97c \uc0ac\uc6a9\ud55c \uc790\ub3d9 \uc11c\ubc84\ub97c \ud3ec\ud568\ud558\ub294 \uac83\uc744 \uc6d0\uce58 \uc54a\ub294\ub2e4\uba74, root_path_in_servers=False \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI , Request app = FastAPI ( servers = [ { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" }, ], root_path = \"/api/v1\" , root_path_in_servers = False , ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} \uc774 \uacbd\uc6b0 OpenAPI \uc2a4\ud0a4\ub9c8\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"root_path\ub97c \uc0ac\uc6a9\ud558\ub294 \uc790\ub3d9 \uc11c\ubc84 \ube44\ud65c\uc131\ud654"},{"location":"advanced/behind-a-proxy/#_6","text":"\ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 - \ub9c8\uc6b4\ud2b8 \uc5d0\uc11c \uc124\uba85\ud558\ub294 \ub300\ub85c \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \ub9c8\uc6b4\ud2b8\ud558\uba74\uc11c \ub3d9\uc2dc\uc5d0 root_path \uc640 \ud568\uaed8 \ud504\ub85d\uc2dc\ub97c \uc0ac\uc6a9\ud558\uace0\uc2f6\ub2e4\uba74, \uc608\uc0c1\ud55c\ub300\ub85c \uc815\uc0c1\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI\ub294 \ub0b4\ubd80\uc801\uc73c\ub85c \ub611\ub611\ud558\uac8c root_path \ub97c \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0, \uc774\uac83\uc740 \ubb38\uc81c \uc5c6\uc774 \ub3d9\uc791\ud569\ub2c8\ub2e4. \u2728","title":"\ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 \ub9c8\uc6b4\ud2b8"},{"location":"advanced/conditional-openapi/","text":"Conditional OpenAPI \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . If you needed to, you could use settings and environment variables to configure OpenAPI conditionally depending on the environment, and even disable it entirely. About security, APIs, and docs \u00b6 Hiding your documentation user interfaces in production shouldn't be the way to protect your API. That doesn't add any extra security to your API, the path operations will still be available where they are. If there's a security flaw in your code, it will still exist. Hiding the documentation just makes it more difficult to understand how to interact with your API, and could make it more difficult for you to debug it in production. It could be considered simply a form of Security through obscurity . If you want to secure your API, there are several better things you can do, for example: Make sure you have well defined Pydantic models for your request bodies and responses. Configure any required permissions and roles using dependencies. Never store plaintext passwords, only password hashes. Implement and use well-known cryptographic tools, like Passlib and JWT tokens, etc. Add more granular permission controls with OAuth2 scopes where needed. ...etc. Nevertheless, you might have a very specific use case where you really need to disable the API docs for some environment (e.g. for production) or depending on configurations from environment variables. Conditional OpenAPI from settings and env vars \u00b6 You can easily use the same Pydantic settings to configure your generated OpenAPI and the docs UIs. For example: from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): openapi_url : str = \"/openapi.json\" settings = Settings () app = FastAPI ( openapi_url = settings . openapi_url ) @app . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } Here we declare the setting openapi_url with the same default of \"/openapi.json\" . And then we use it when creating the FastAPI app. Then you could disable OpenAPI (including the UI docs) by setting the environment variable OPENAPI_URL to the empty string, like: $ OPENAPI_URL = uvicorn main:app <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Then if you go to the URLs at /openapi.json , /docs , or /redoc you will just get a 404 Not Found error like: { \"detail\" : \"Not Found\" }","title":"Conditional OpenAPI"},{"location":"advanced/conditional-openapi/#conditional-openapi","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . If you needed to, you could use settings and environment variables to configure OpenAPI conditionally depending on the environment, and even disable it entirely.","title":"Conditional OpenAPI"},{"location":"advanced/conditional-openapi/#about-security-apis-and-docs","text":"Hiding your documentation user interfaces in production shouldn't be the way to protect your API. That doesn't add any extra security to your API, the path operations will still be available where they are. If there's a security flaw in your code, it will still exist. Hiding the documentation just makes it more difficult to understand how to interact with your API, and could make it more difficult for you to debug it in production. It could be considered simply a form of Security through obscurity . If you want to secure your API, there are several better things you can do, for example: Make sure you have well defined Pydantic models for your request bodies and responses. Configure any required permissions and roles using dependencies. Never store plaintext passwords, only password hashes. Implement and use well-known cryptographic tools, like Passlib and JWT tokens, etc. Add more granular permission controls with OAuth2 scopes where needed. ...etc. Nevertheless, you might have a very specific use case where you really need to disable the API docs for some environment (e.g. for production) or depending on configurations from environment variables.","title":"About security, APIs, and docs"},{"location":"advanced/conditional-openapi/#conditional-openapi-from-settings-and-env-vars","text":"You can easily use the same Pydantic settings to configure your generated OpenAPI and the docs UIs. For example: from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): openapi_url : str = \"/openapi.json\" settings = Settings () app = FastAPI ( openapi_url = settings . openapi_url ) @app . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } Here we declare the setting openapi_url with the same default of \"/openapi.json\" . And then we use it when creating the FastAPI app. Then you could disable OpenAPI (including the UI docs) by setting the environment variable OPENAPI_URL to the empty string, like: $ OPENAPI_URL = uvicorn main:app <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Then if you go to the URLs at /openapi.json , /docs , or /redoc you will just get a 404 Not Found error like: { \"detail\" : \"Not Found\" }","title":"Conditional OpenAPI from settings and env vars"},{"location":"advanced/custom-request-and-route/","text":"Custom Request and APIRoute class \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In some cases, you may want to override the logic used by the Request and APIRoute classes. In particular, this may be a good alternative to logic in a middleware. For example, if you want to read or manipulate the request body before it is processed by your application. Danger This is an \"advanced\" feature. If you are just starting with FastAPI you might want to skip this section. Use cases \u00b6 Some use cases include: Converting non-JSON request bodies to JSON (e.g. msgpack ). Decompressing gzip-compressed request bodies. Automatically logging all request bodies. Handling custom request body encodings \u00b6 Let's see how to make use of a custom Request subclass to decompress gzip requests. And an APIRoute subclass to use that custom request class. Create a custom GzipRequest class \u00b6 Tip This is a toy example to demonstrate how it works, if you need Gzip support, you can use the provided GzipMiddleware . First, we create a GzipRequest class, which will overwrite the Request.body() method to decompress the body in the presence of an appropriate header. If there's no gzip in the header, it will not try to decompress the body. That way, the same route class can handle gzip compressed or uncompressed requests. import gzip from typing import Callable , List from fastapi import Body , FastAPI , Request , Response from fastapi.routing import APIRoute class GzipRequest ( Request ): async def body ( self ) -> bytes : if not hasattr ( self , \"_body\" ): body = await super () . body () if \"gzip\" in self . headers . getlist ( \"Content-Encoding\" ): body = gzip . decompress ( body ) self . _body = body return self . _body class GzipRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : request = GzipRequest ( request . scope , request . receive ) return await original_route_handler ( request ) return custom_route_handler app = FastAPI () app . router . route_class = GzipRoute @app . post ( \"/sum\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return { \"sum\" : sum ( numbers )} Create a custom GzipRoute class \u00b6 Next, we create a custom subclass of fastapi.routing.APIRoute that will make use of the GzipRequest . This time, it will overwrite the method APIRoute.get_route_handler() . This method returns a function. And that function is what will receive a request and return a response. Here we use it to create a GzipRequest from the original request. import gzip from typing import Callable , List from fastapi import Body , FastAPI , Request , Response from fastapi.routing import APIRoute class GzipRequest ( Request ): async def body ( self ) -> bytes : if not hasattr ( self , \"_body\" ): body = await super () . body () if \"gzip\" in self . headers . getlist ( \"Content-Encoding\" ): body = gzip . decompress ( body ) self . _body = body return self . _body class GzipRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : request = GzipRequest ( request . scope , request . receive ) return await original_route_handler ( request ) return custom_route_handler app = FastAPI () app . router . route_class = GzipRoute @app . post ( \"/sum\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return { \"sum\" : sum ( numbers )} Technical Details A Request has a request.scope attribute, that's just a Python dict containing the metadata related to the request. A Request also has a request.receive , that's a function to \"receive\" the body of the request. The scope dict and receive function are both part of the ASGI specification. And those two things, scope and receive , are what is needed to create a new Request instance. To learn more about the Request check Starlette's docs about Requests . The only thing the function returned by GzipRequest.get_route_handler does differently is convert the Request to a GzipRequest . Doing this, our GzipRequest will take care of decompressing the data (if necessary) before passing it to our path operations . After that, all of the processing logic is the same. But because of our changes in GzipRequest.body , the request body will be automatically decompressed when it is loaded by FastAPI when needed. Accessing the request body in an exception handler \u00b6 Tip To solve this same problem, it's probably a lot easier to use the body in a custom handler for RequestValidationError ( Handling Errors ). But this example is still valid and it shows how to interact with the internal components. We can also use this same approach to access the request body in an exception handler. All we need to do is handle the request inside a try / except block: from typing import Callable , List from fastapi import Body , FastAPI , HTTPException , Request , Response from fastapi.exceptions import RequestValidationError from fastapi.routing import APIRoute class ValidationErrorLoggingRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : try : return await original_route_handler ( request ) except RequestValidationError as exc : body = await request . body () detail = { \"errors\" : exc . errors (), \"body\" : body . decode ()} raise HTTPException ( status_code = 422 , detail = detail ) return custom_route_handler app = FastAPI () app . router . route_class = ValidationErrorLoggingRoute @app . post ( \"/\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return sum ( numbers ) If an exception occurs, the Request instance will still be in scope, so we can read and make use of the request body when handling the error: from typing import Callable , List from fastapi import Body , FastAPI , HTTPException , Request , Response from fastapi.exceptions import RequestValidationError from fastapi.routing import APIRoute class ValidationErrorLoggingRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : try : return await original_route_handler ( request ) except RequestValidationError as exc : body = await request . body () detail = { \"errors\" : exc . errors (), \"body\" : body . decode ()} raise HTTPException ( status_code = 422 , detail = detail ) return custom_route_handler app = FastAPI () app . router . route_class = ValidationErrorLoggingRoute @app . post ( \"/\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return sum ( numbers ) Custom APIRoute class in a router \u00b6 You can also set the route_class parameter of an APIRouter : import time from typing import Callable from fastapi import APIRouter , FastAPI , Request , Response from fastapi.routing import APIRoute class TimedRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : before = time . time () response : Response = await original_route_handler ( request ) duration = time . time () - before response . headers [ \"X-Response-Time\" ] = str ( duration ) print ( f \"route duration: { duration } \" ) print ( f \"route response: { response } \" ) print ( f \"route response headers: { response . headers } \" ) return response return custom_route_handler app = FastAPI () router = APIRouter ( route_class = TimedRoute ) @app . get ( \"/\" ) async def not_timed (): return { \"message\" : \"Not timed\" } @router . get ( \"/timed\" ) async def timed (): return { \"message\" : \"It's the time of my life\" } app . include_router ( router ) In this example, the path operations under the router will use the custom TimedRoute class, and will have an extra X-Response-Time header in the response with the time it took to generate the response: import time from typing import Callable from fastapi import APIRouter , FastAPI , Request , Response from fastapi.routing import APIRoute class TimedRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : before = time . time () response : Response = await original_route_handler ( request ) duration = time . time () - before response . headers [ \"X-Response-Time\" ] = str ( duration ) print ( f \"route duration: { duration } \" ) print ( f \"route response: { response } \" ) print ( f \"route response headers: { response . headers } \" ) return response return custom_route_handler app = FastAPI () router = APIRouter ( route_class = TimedRoute ) @app . get ( \"/\" ) async def not_timed (): return { \"message\" : \"Not timed\" } @router . get ( \"/timed\" ) async def timed (): return { \"message\" : \"It's the time of my life\" } app . include_router ( router )","title":"Custom Request and APIRoute class"},{"location":"advanced/custom-request-and-route/#custom-request-and-apiroute-class","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In some cases, you may want to override the logic used by the Request and APIRoute classes. In particular, this may be a good alternative to logic in a middleware. For example, if you want to read or manipulate the request body before it is processed by your application. Danger This is an \"advanced\" feature. If you are just starting with FastAPI you might want to skip this section.","title":"Custom Request and APIRoute class"},{"location":"advanced/custom-request-and-route/#use-cases","text":"Some use cases include: Converting non-JSON request bodies to JSON (e.g. msgpack ). Decompressing gzip-compressed request bodies. Automatically logging all request bodies.","title":"Use cases"},{"location":"advanced/custom-request-and-route/#handling-custom-request-body-encodings","text":"Let's see how to make use of a custom Request subclass to decompress gzip requests. And an APIRoute subclass to use that custom request class.","title":"Handling custom request body encodings"},{"location":"advanced/custom-request-and-route/#create-a-custom-gziprequest-class","text":"Tip This is a toy example to demonstrate how it works, if you need Gzip support, you can use the provided GzipMiddleware . First, we create a GzipRequest class, which will overwrite the Request.body() method to decompress the body in the presence of an appropriate header. If there's no gzip in the header, it will not try to decompress the body. That way, the same route class can handle gzip compressed or uncompressed requests. import gzip from typing import Callable , List from fastapi import Body , FastAPI , Request , Response from fastapi.routing import APIRoute class GzipRequest ( Request ): async def body ( self ) -> bytes : if not hasattr ( self , \"_body\" ): body = await super () . body () if \"gzip\" in self . headers . getlist ( \"Content-Encoding\" ): body = gzip . decompress ( body ) self . _body = body return self . _body class GzipRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : request = GzipRequest ( request . scope , request . receive ) return await original_route_handler ( request ) return custom_route_handler app = FastAPI () app . router . route_class = GzipRoute @app . post ( \"/sum\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return { \"sum\" : sum ( numbers )}","title":"Create a custom GzipRequest class"},{"location":"advanced/custom-request-and-route/#create-a-custom-gziproute-class","text":"Next, we create a custom subclass of fastapi.routing.APIRoute that will make use of the GzipRequest . This time, it will overwrite the method APIRoute.get_route_handler() . This method returns a function. And that function is what will receive a request and return a response. Here we use it to create a GzipRequest from the original request. import gzip from typing import Callable , List from fastapi import Body , FastAPI , Request , Response from fastapi.routing import APIRoute class GzipRequest ( Request ): async def body ( self ) -> bytes : if not hasattr ( self , \"_body\" ): body = await super () . body () if \"gzip\" in self . headers . getlist ( \"Content-Encoding\" ): body = gzip . decompress ( body ) self . _body = body return self . _body class GzipRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : request = GzipRequest ( request . scope , request . receive ) return await original_route_handler ( request ) return custom_route_handler app = FastAPI () app . router . route_class = GzipRoute @app . post ( \"/sum\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return { \"sum\" : sum ( numbers )} Technical Details A Request has a request.scope attribute, that's just a Python dict containing the metadata related to the request. A Request also has a request.receive , that's a function to \"receive\" the body of the request. The scope dict and receive function are both part of the ASGI specification. And those two things, scope and receive , are what is needed to create a new Request instance. To learn more about the Request check Starlette's docs about Requests . The only thing the function returned by GzipRequest.get_route_handler does differently is convert the Request to a GzipRequest . Doing this, our GzipRequest will take care of decompressing the data (if necessary) before passing it to our path operations . After that, all of the processing logic is the same. But because of our changes in GzipRequest.body , the request body will be automatically decompressed when it is loaded by FastAPI when needed.","title":"Create a custom GzipRoute class"},{"location":"advanced/custom-request-and-route/#accessing-the-request-body-in-an-exception-handler","text":"Tip To solve this same problem, it's probably a lot easier to use the body in a custom handler for RequestValidationError ( Handling Errors ). But this example is still valid and it shows how to interact with the internal components. We can also use this same approach to access the request body in an exception handler. All we need to do is handle the request inside a try / except block: from typing import Callable , List from fastapi import Body , FastAPI , HTTPException , Request , Response from fastapi.exceptions import RequestValidationError from fastapi.routing import APIRoute class ValidationErrorLoggingRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : try : return await original_route_handler ( request ) except RequestValidationError as exc : body = await request . body () detail = { \"errors\" : exc . errors (), \"body\" : body . decode ()} raise HTTPException ( status_code = 422 , detail = detail ) return custom_route_handler app = FastAPI () app . router . route_class = ValidationErrorLoggingRoute @app . post ( \"/\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return sum ( numbers ) If an exception occurs, the Request instance will still be in scope, so we can read and make use of the request body when handling the error: from typing import Callable , List from fastapi import Body , FastAPI , HTTPException , Request , Response from fastapi.exceptions import RequestValidationError from fastapi.routing import APIRoute class ValidationErrorLoggingRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : try : return await original_route_handler ( request ) except RequestValidationError as exc : body = await request . body () detail = { \"errors\" : exc . errors (), \"body\" : body . decode ()} raise HTTPException ( status_code = 422 , detail = detail ) return custom_route_handler app = FastAPI () app . router . route_class = ValidationErrorLoggingRoute @app . post ( \"/\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return sum ( numbers )","title":"Accessing the request body in an exception handler"},{"location":"advanced/custom-request-and-route/#custom-apiroute-class-in-a-router","text":"You can also set the route_class parameter of an APIRouter : import time from typing import Callable from fastapi import APIRouter , FastAPI , Request , Response from fastapi.routing import APIRoute class TimedRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : before = time . time () response : Response = await original_route_handler ( request ) duration = time . time () - before response . headers [ \"X-Response-Time\" ] = str ( duration ) print ( f \"route duration: { duration } \" ) print ( f \"route response: { response } \" ) print ( f \"route response headers: { response . headers } \" ) return response return custom_route_handler app = FastAPI () router = APIRouter ( route_class = TimedRoute ) @app . get ( \"/\" ) async def not_timed (): return { \"message\" : \"Not timed\" } @router . get ( \"/timed\" ) async def timed (): return { \"message\" : \"It's the time of my life\" } app . include_router ( router ) In this example, the path operations under the router will use the custom TimedRoute class, and will have an extra X-Response-Time header in the response with the time it took to generate the response: import time from typing import Callable from fastapi import APIRouter , FastAPI , Request , Response from fastapi.routing import APIRoute class TimedRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : before = time . time () response : Response = await original_route_handler ( request ) duration = time . time () - before response . headers [ \"X-Response-Time\" ] = str ( duration ) print ( f \"route duration: { duration } \" ) print ( f \"route response: { response } \" ) print ( f \"route response headers: { response . headers } \" ) return response return custom_route_handler app = FastAPI () router = APIRouter ( route_class = TimedRoute ) @app . get ( \"/\" ) async def not_timed (): return { \"message\" : \"Not timed\" } @router . get ( \"/timed\" ) async def timed (): return { \"message\" : \"It's the time of my life\" } app . include_router ( router )","title":"Custom APIRoute class in a router"},{"location":"advanced/custom-response/","text":"Custom Response - HTML, Stream, File, others \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . By default, FastAPI will return the responses using JSONResponse . You can override it by returning a Response directly as seen in Return a Response directly . But if you return a Response directly, the data won't be automatically converted, and the documentation won't be automatically generated (for example, including the specific \"media type\", in the HTTP header Content-Type as part of the generated OpenAPI). But you can also declare the Response that you want to be used, in the path operation decorator . The contents that you return from your path operation function will be put inside of that Response . And if that Response has a JSON media type ( application/json ), like is the case with the JSONResponse and UJSONResponse , the data you return will be automatically converted (and filtered) with any Pydantic response_model that you declared in the path operation decorator . Note If you use a response class with no media type, FastAPI will expect your response to have no content, so it will not document the response format in its generated OpenAPI docs. Use ORJSONResponse \u00b6 For example, if you are squeezing performance, you can install and use orjson and set the response to be ORJSONResponse . Import the Response class (sub-class) you want to use and declare it in the path operation decorator . from fastapi import FastAPI from fastapi.responses import ORJSONResponse app = FastAPI () @app . get ( \"/items/\" , response_class = ORJSONResponse ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] Info The parameter response_class will also be used to define the \"media type\" of the response. In this case, the HTTP header Content-Type will be set to application/json . And it will be documented as such in OpenAPI. Tip The ORJSONResponse is currently only available in FastAPI, not in Starlette. HTML Response \u00b6 To return a response with HTML directly from FastAPI , use HTMLResponse . Import HTMLResponse . Pass HTMLResponse as the parameter response_class of your path operation decorator . from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () @app . get ( \"/items/\" , response_class = HTMLResponse ) async def read_items (): return \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" Info The parameter response_class will also be used to define the \"media type\" of the response. In this case, the HTTP header Content-Type will be set to text/html . And it will be documented as such in OpenAPI. Return a Response \u00b6 As seen in Return a Response directly , you can also override the response directly in your path operation , by returning it. The same example from above, returning an HTMLResponse , could look like: from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): html_content = \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" return HTMLResponse ( content = html_content , status_code = 200 ) Warning A Response returned directly by your path operation function won't be documented in OpenAPI (for example, the Content-Type won't be documented) and won't be visible in the automatic interactive docs. Info Of course, the actual Content-Type header, status code, etc, will come from the Response object your returned. Document in OpenAPI and override Response \u00b6 If you want to override the response from inside of the function but at the same time document the \"media type\" in OpenAPI, you can use the response_class parameter AND return a Response object. The response_class will then be used only to document the OpenAPI path operation , but your Response will be used as is. Return an HTMLResponse directly \u00b6 For example, it could be something like: from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () def generate_html_response (): html_content = \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" return HTMLResponse ( content = html_content , status_code = 200 ) @app . get ( \"/items/\" , response_class = HTMLResponse ) async def read_items (): return generate_html_response () In this example, the function generate_html_response() already generates and returns a Response instead of returning the HTML in a str . By returning the result of calling generate_html_response() , you are already returning a Response that will override the default FastAPI behavior. But as you passed the HTMLResponse in the response_class too, FastAPI will know how to document it in OpenAPI and the interactive docs as HTML with text/html : Available responses \u00b6 Here are some of the available responses. Have in mind that you can use Response to return anything else, or even create a custom sub-class. Technical Details You could also use from starlette.responses import HTMLResponse . FastAPI provides the same starlette.responses as fastapi.responses just as a convenience for you, the developer. But most of the available responses come directly from Starlette. Response \u00b6 The main Response class, all the other responses inherit from it. You can return it directly. It accepts the following parameters: content - A str or bytes . status_code - An int HTTP status code. headers - A dict of strings. media_type - A str giving the media type. E.g. \"text/html\" . FastAPI (actually Starlette) will automatically include a Content-Length header. It will also include a Content-Type header, based on the media_type and appending a charset for text types. from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/legacy/\" ) def get_legacy_data (): data = \"\"\"<?xml version=\"1.0\"?> <shampoo> <Header> Apply shampoo here. </Header> <Body> You'll have to use soap here. </Body> </shampoo> \"\"\" return Response ( content = data , media_type = \"application/xml\" ) HTMLResponse \u00b6 Takes some text or bytes and returns an HTML response, as you read above. PlainTextResponse \u00b6 Takes some text or bytes and returns an plain text response. from fastapi import FastAPI from fastapi.responses import PlainTextResponse app = FastAPI () @app . get ( \"/\" , response_class = PlainTextResponse ) async def main (): return \"Hello World\" JSONResponse \u00b6 Takes some data and returns an application/json encoded response. This is the default response used in FastAPI , as you read above. ORJSONResponse \u00b6 A fast alternative JSON response using orjson , as you read above. UJSONResponse \u00b6 An alternative JSON response using ujson . Warning ujson is less careful than Python's built-in implementation in how it handles some edge-cases. from fastapi import FastAPI from fastapi.responses import UJSONResponse app = FastAPI () @app . get ( \"/items/\" , response_class = UJSONResponse ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] Tip It's possible that ORJSONResponse might be a faster alternative. RedirectResponse \u00b6 Returns an HTTP redirect. Uses a 307 status code (Temporary Redirect) by default. You can return a RedirectResponse directly: from fastapi import FastAPI from fastapi.responses import RedirectResponse app = FastAPI () @app . get ( \"/typer\" ) async def redirect_typer (): return RedirectResponse ( \"https://typer.tiangolo.com\" ) Or you can use it in the response_class parameter: from fastapi import FastAPI from fastapi.responses import RedirectResponse app = FastAPI () @app . get ( \"/fastapi\" , response_class = RedirectResponse ) async def redirect_fastapi (): return \"https://fastapi.tiangolo.com\" If you do that, then you can return the URL directly from your path operation function. In this case, the status_code used will be the default one for the RedirectResponse , which is 307 . You can also use the status_code parameter combined with the response_class parameter: from fastapi import FastAPI from fastapi.responses import RedirectResponse app = FastAPI () @app . get ( \"/pydantic\" , response_class = RedirectResponse , status_code = 302 ) async def redirect_pydantic (): return \"https://pydantic-docs.helpmanual.io/\" StreamingResponse \u00b6 Takes an async generator or a normal generator/iterator and streams the response body. from fastapi import FastAPI from fastapi.responses import StreamingResponse app = FastAPI () async def fake_video_streamer (): for i in range ( 10 ): yield b \"some fake video bytes\" @app . get ( \"/\" ) async def main (): return StreamingResponse ( fake_video_streamer ()) Using StreamingResponse with file-like objects \u00b6 If you have a file-like object (e.g. the object returned by open() ), you can create a generator function to iterate over that file-like object. That way, you don't have to read it all first in memory, and you can pass that generator function to the StreamingResponse , and return it. This includes many libraries to interact with cloud storage, video processing, and others. from fastapi import FastAPI from fastapi.responses import StreamingResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" ) def main (): def iterfile (): # (1) with open ( some_file_path , mode = \"rb\" ) as file_like : # (2) yield from file_like # (3) return StreamingResponse ( iterfile (), media_type = \"video/mp4\" ) This is the generator function. It's a \"generator function\" because it contains yield statements inside. By using a with block, we make sure that the file-like object is closed after the generator function is done. So, after it finishes sending the response. This yield from tells the function to iterate over that thing named file_like . And then, for each part iterated, yield that part as coming from this generator function. So, it is a generator function that transfers the \"generating\" work to something else internally. By doing it this way, we can put it in a with block, and that way, ensure that it is closed after finishing. Tip Notice that here as we are using standard open() that doesn't support async and await , we declare the path operation with normal def . FileResponse \u00b6 Asynchronously streams a file as the response. Takes a different set of arguments to instantiate than the other response types: path - The filepath to the file to stream. headers - Any custom headers to include, as a dictionary. media_type - A string giving the media type. If unset, the filename or path will be used to infer a media type. filename - If set, this will be included in the response Content-Disposition . File responses will include appropriate Content-Length , Last-Modified and ETag headers. from fastapi import FastAPI from fastapi.responses import FileResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" ) async def main (): return FileResponse ( some_file_path ) You can also use the response_class parameter: from fastapi import FastAPI from fastapi.responses import FileResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" , response_class = FileResponse ) async def main (): return some_file_path In this case, you can return the file path directly from your path operation function. Default response class \u00b6 When creating a FastAPI class instance or an APIRouter you can specify which response class to use by default. The parameter that defines this is default_response_class . In the example below, FastAPI will use ORJSONResponse by default, in all path operations , instead of JSONResponse . from fastapi import FastAPI from fastapi.responses import ORJSONResponse app = FastAPI ( default_response_class = ORJSONResponse ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] Tip You can still override response_class in path operations as before. Additional documentation \u00b6 You can also declare the media type and many other details in OpenAPI using responses : Additional Responses in OpenAPI .","title":"Custom Response - HTML, Stream, File, others"},{"location":"advanced/custom-response/#custom-response-html-stream-file-others","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . By default, FastAPI will return the responses using JSONResponse . You can override it by returning a Response directly as seen in Return a Response directly . But if you return a Response directly, the data won't be automatically converted, and the documentation won't be automatically generated (for example, including the specific \"media type\", in the HTTP header Content-Type as part of the generated OpenAPI). But you can also declare the Response that you want to be used, in the path operation decorator . The contents that you return from your path operation function will be put inside of that Response . And if that Response has a JSON media type ( application/json ), like is the case with the JSONResponse and UJSONResponse , the data you return will be automatically converted (and filtered) with any Pydantic response_model that you declared in the path operation decorator . Note If you use a response class with no media type, FastAPI will expect your response to have no content, so it will not document the response format in its generated OpenAPI docs.","title":"Custom Response - HTML, Stream, File, others"},{"location":"advanced/custom-response/#use-orjsonresponse","text":"For example, if you are squeezing performance, you can install and use orjson and set the response to be ORJSONResponse . Import the Response class (sub-class) you want to use and declare it in the path operation decorator . from fastapi import FastAPI from fastapi.responses import ORJSONResponse app = FastAPI () @app . get ( \"/items/\" , response_class = ORJSONResponse ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] Info The parameter response_class will also be used to define the \"media type\" of the response. In this case, the HTTP header Content-Type will be set to application/json . And it will be documented as such in OpenAPI. Tip The ORJSONResponse is currently only available in FastAPI, not in Starlette.","title":"Use ORJSONResponse"},{"location":"advanced/custom-response/#html-response","text":"To return a response with HTML directly from FastAPI , use HTMLResponse . Import HTMLResponse . Pass HTMLResponse as the parameter response_class of your path operation decorator . from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () @app . get ( \"/items/\" , response_class = HTMLResponse ) async def read_items (): return \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" Info The parameter response_class will also be used to define the \"media type\" of the response. In this case, the HTTP header Content-Type will be set to text/html . And it will be documented as such in OpenAPI.","title":"HTML Response"},{"location":"advanced/custom-response/#return-a-response","text":"As seen in Return a Response directly , you can also override the response directly in your path operation , by returning it. The same example from above, returning an HTMLResponse , could look like: from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): html_content = \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" return HTMLResponse ( content = html_content , status_code = 200 ) Warning A Response returned directly by your path operation function won't be documented in OpenAPI (for example, the Content-Type won't be documented) and won't be visible in the automatic interactive docs. Info Of course, the actual Content-Type header, status code, etc, will come from the Response object your returned.","title":"Return a Response"},{"location":"advanced/custom-response/#document-in-openapi-and-override-response","text":"If you want to override the response from inside of the function but at the same time document the \"media type\" in OpenAPI, you can use the response_class parameter AND return a Response object. The response_class will then be used only to document the OpenAPI path operation , but your Response will be used as is.","title":"Document in OpenAPI and override Response"},{"location":"advanced/custom-response/#return-an-htmlresponse-directly","text":"For example, it could be something like: from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () def generate_html_response (): html_content = \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" return HTMLResponse ( content = html_content , status_code = 200 ) @app . get ( \"/items/\" , response_class = HTMLResponse ) async def read_items (): return generate_html_response () In this example, the function generate_html_response() already generates and returns a Response instead of returning the HTML in a str . By returning the result of calling generate_html_response() , you are already returning a Response that will override the default FastAPI behavior. But as you passed the HTMLResponse in the response_class too, FastAPI will know how to document it in OpenAPI and the interactive docs as HTML with text/html :","title":"Return an HTMLResponse directly"},{"location":"advanced/custom-response/#available-responses","text":"Here are some of the available responses. Have in mind that you can use Response to return anything else, or even create a custom sub-class. Technical Details You could also use from starlette.responses import HTMLResponse . FastAPI provides the same starlette.responses as fastapi.responses just as a convenience for you, the developer. But most of the available responses come directly from Starlette.","title":"Available responses"},{"location":"advanced/custom-response/#response","text":"The main Response class, all the other responses inherit from it. You can return it directly. It accepts the following parameters: content - A str or bytes . status_code - An int HTTP status code. headers - A dict of strings. media_type - A str giving the media type. E.g. \"text/html\" . FastAPI (actually Starlette) will automatically include a Content-Length header. It will also include a Content-Type header, based on the media_type and appending a charset for text types. from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/legacy/\" ) def get_legacy_data (): data = \"\"\"<?xml version=\"1.0\"?> <shampoo> <Header> Apply shampoo here. </Header> <Body> You'll have to use soap here. </Body> </shampoo> \"\"\" return Response ( content = data , media_type = \"application/xml\" )","title":"Response"},{"location":"advanced/custom-response/#htmlresponse","text":"Takes some text or bytes and returns an HTML response, as you read above.","title":"HTMLResponse"},{"location":"advanced/custom-response/#plaintextresponse","text":"Takes some text or bytes and returns an plain text response. from fastapi import FastAPI from fastapi.responses import PlainTextResponse app = FastAPI () @app . get ( \"/\" , response_class = PlainTextResponse ) async def main (): return \"Hello World\"","title":"PlainTextResponse"},{"location":"advanced/custom-response/#jsonresponse","text":"Takes some data and returns an application/json encoded response. This is the default response used in FastAPI , as you read above.","title":"JSONResponse"},{"location":"advanced/custom-response/#orjsonresponse","text":"A fast alternative JSON response using orjson , as you read above.","title":"ORJSONResponse"},{"location":"advanced/custom-response/#ujsonresponse","text":"An alternative JSON response using ujson . Warning ujson is less careful than Python's built-in implementation in how it handles some edge-cases. from fastapi import FastAPI from fastapi.responses import UJSONResponse app = FastAPI () @app . get ( \"/items/\" , response_class = UJSONResponse ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] Tip It's possible that ORJSONResponse might be a faster alternative.","title":"UJSONResponse"},{"location":"advanced/custom-response/#redirectresponse","text":"Returns an HTTP redirect. Uses a 307 status code (Temporary Redirect) by default. You can return a RedirectResponse directly: from fastapi import FastAPI from fastapi.responses import RedirectResponse app = FastAPI () @app . get ( \"/typer\" ) async def redirect_typer (): return RedirectResponse ( \"https://typer.tiangolo.com\" ) Or you can use it in the response_class parameter: from fastapi import FastAPI from fastapi.responses import RedirectResponse app = FastAPI () @app . get ( \"/fastapi\" , response_class = RedirectResponse ) async def redirect_fastapi (): return \"https://fastapi.tiangolo.com\" If you do that, then you can return the URL directly from your path operation function. In this case, the status_code used will be the default one for the RedirectResponse , which is 307 . You can also use the status_code parameter combined with the response_class parameter: from fastapi import FastAPI from fastapi.responses import RedirectResponse app = FastAPI () @app . get ( \"/pydantic\" , response_class = RedirectResponse , status_code = 302 ) async def redirect_pydantic (): return \"https://pydantic-docs.helpmanual.io/\"","title":"RedirectResponse"},{"location":"advanced/custom-response/#streamingresponse","text":"Takes an async generator or a normal generator/iterator and streams the response body. from fastapi import FastAPI from fastapi.responses import StreamingResponse app = FastAPI () async def fake_video_streamer (): for i in range ( 10 ): yield b \"some fake video bytes\" @app . get ( \"/\" ) async def main (): return StreamingResponse ( fake_video_streamer ())","title":"StreamingResponse"},{"location":"advanced/custom-response/#using-streamingresponse-with-file-like-objects","text":"If you have a file-like object (e.g. the object returned by open() ), you can create a generator function to iterate over that file-like object. That way, you don't have to read it all first in memory, and you can pass that generator function to the StreamingResponse , and return it. This includes many libraries to interact with cloud storage, video processing, and others. from fastapi import FastAPI from fastapi.responses import StreamingResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" ) def main (): def iterfile (): # (1) with open ( some_file_path , mode = \"rb\" ) as file_like : # (2) yield from file_like # (3) return StreamingResponse ( iterfile (), media_type = \"video/mp4\" ) This is the generator function. It's a \"generator function\" because it contains yield statements inside. By using a with block, we make sure that the file-like object is closed after the generator function is done. So, after it finishes sending the response. This yield from tells the function to iterate over that thing named file_like . And then, for each part iterated, yield that part as coming from this generator function. So, it is a generator function that transfers the \"generating\" work to something else internally. By doing it this way, we can put it in a with block, and that way, ensure that it is closed after finishing. Tip Notice that here as we are using standard open() that doesn't support async and await , we declare the path operation with normal def .","title":"Using StreamingResponse with file-like objects"},{"location":"advanced/custom-response/#fileresponse","text":"Asynchronously streams a file as the response. Takes a different set of arguments to instantiate than the other response types: path - The filepath to the file to stream. headers - Any custom headers to include, as a dictionary. media_type - A string giving the media type. If unset, the filename or path will be used to infer a media type. filename - If set, this will be included in the response Content-Disposition . File responses will include appropriate Content-Length , Last-Modified and ETag headers. from fastapi import FastAPI from fastapi.responses import FileResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" ) async def main (): return FileResponse ( some_file_path ) You can also use the response_class parameter: from fastapi import FastAPI from fastapi.responses import FileResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" , response_class = FileResponse ) async def main (): return some_file_path In this case, you can return the file path directly from your path operation function.","title":"FileResponse"},{"location":"advanced/custom-response/#default-response-class","text":"When creating a FastAPI class instance or an APIRouter you can specify which response class to use by default. The parameter that defines this is default_response_class . In the example below, FastAPI will use ORJSONResponse by default, in all path operations , instead of JSONResponse . from fastapi import FastAPI from fastapi.responses import ORJSONResponse app = FastAPI ( default_response_class = ORJSONResponse ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] Tip You can still override response_class in path operations as before.","title":"Default response class"},{"location":"advanced/custom-response/#additional-documentation","text":"You can also declare the media type and many other details in OpenAPI using responses : Additional Responses in OpenAPI .","title":"Additional documentation"},{"location":"advanced/dataclasses/","text":"Using Dataclasses \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI is built on top of Pydantic , and I have been showing you how to use Pydantic models to declare requests and responses. But FastAPI also supports using dataclasses the same way: from dataclasses import dataclass from typing import Union from fastapi import FastAPI @dataclass class Item : name : str price : float description : Union [ str , None ] = None tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item This is still thanks to Pydantic , as it has internal support for dataclasses . So, even with the code above that doesn't use Pydantic explicitly, FastAPI is using Pydantic to convert those standard dataclasses to Pydantic's own flavor of dataclasses. And of course, it supports the same: data validation data serialization data documentation, etc. This works the same way as with Pydantic models. And it is actually achieved in the same way underneath, using Pydantic. Info Have in mind that dataclasses can't do everything Pydantic models can do. So, you might still need to use Pydantic models. But if you have a bunch of dataclasses laying around, this is a nice trick to use them to power a web API using FastAPI. \ud83e\udd13 Dataclasses in response_model \u00b6 You can also use dataclasses in the response_model parameter: from dataclasses import dataclass , field from typing import List , Union from fastapi import FastAPI @dataclass class Item : name : str price : float tags : List [ str ] = field ( default_factory = list ) description : Union [ str , None ] = None tax : Union [ float , None ] = None app = FastAPI () @app . get ( \"/items/next\" , response_model = Item ) async def read_next_item (): return { \"name\" : \"Island In The Moon\" , \"price\" : 12.99 , \"description\" : \"A place to be be playin' and havin' fun\" , \"tags\" : [ \"breater\" ], } The dataclass will be automatically converted to a Pydantic dataclass. This way, its schema will show up in the API docs user interface: Dataclasses in Nested Data Structures \u00b6 You can also combine dataclasses with other type annotations to make nested data structures. In some cases, you might still have to use Pydantic's version of dataclasses . For example, if you have errors with the automatically generated API documentation. In that case, you can simply swap the standard dataclasses with pydantic.dataclasses , which is a drop-in replacement: from dataclasses import field # (1) from typing import List , Union from fastapi import FastAPI from pydantic.dataclasses import dataclass # (2) @dataclass class Item : name : str description : Union [ str , None ] = None @dataclass class Author : name : str items : List [ Item ] = field ( default_factory = list ) # (3) app = FastAPI () @app . post ( \"/authors/ {author_id} /items/\" , response_model = Author ) # (4) async def create_author_items ( author_id : str , items : List [ Item ]): # (5) return { \"name\" : author_id , \"items\" : items } # (6) @app . get ( \"/authors/\" , response_model = List [ Author ]) # (7) def get_authors (): # (8) return [ # (9) { \"name\" : \"Breaters\" , \"items\" : [ { \"name\" : \"Island In The Moon\" , \"description\" : \"A place to be be playin' and havin' fun\" , }, { \"name\" : \"Holy Buddies\" }, ], }, { \"name\" : \"System of an Up\" , \"items\" : [ { \"name\" : \"Salt\" , \"description\" : \"The kombucha mushroom people's favorite\" , }, { \"name\" : \"Pad Thai\" }, { \"name\" : \"Lonely Night\" , \"description\" : \"The mostests lonliest nightiest of allest\" , }, ], }, ] We still import field from standard dataclasses . pydantic.dataclasses is a drop-in replacement for dataclasses . The Author dataclass includes a list of Item dataclasses. The Author dataclass is used as the response_model parameter. You can use other standard type annotations with dataclasses as the request body. In this case, it's a list of Item dataclasses. Here we are returning a dictionary that contains items which is a list of dataclasses. FastAPI is still capable of serializing the data to JSON. Here the response_model is using a type annotation of a list of Author dataclasses. Again, you can combine dataclasses with standard type annotations. Notice that this path operation function uses regular def instead of async def . As always, in FastAPI you can combine def and async def as needed. If you need a refresher about when to use which, check out the section \"In a hurry?\" in the docs about async and await . This path operation function is not returning dataclasses (although it could), but a list of dictionaries with internal data. FastAPI will use the response_model parameter (that includes dataclasses) to convert the response. You can combine dataclasses with other type annotations in many different combinations to form complex data structures. Check the in-code annotation tips above to see more specific details. Learn More \u00b6 You can also combine dataclasses with other Pydantic models, inherit from them, include them in your own models, etc. To learn more, check the Pydantic docs about dataclasses . Version \u00b6 This is available since FastAPI version 0.67.0 . \ud83d\udd16","title":"Using Dataclasses"},{"location":"advanced/dataclasses/#using-dataclasses","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI is built on top of Pydantic , and I have been showing you how to use Pydantic models to declare requests and responses. But FastAPI also supports using dataclasses the same way: from dataclasses import dataclass from typing import Union from fastapi import FastAPI @dataclass class Item : name : str price : float description : Union [ str , None ] = None tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item This is still thanks to Pydantic , as it has internal support for dataclasses . So, even with the code above that doesn't use Pydantic explicitly, FastAPI is using Pydantic to convert those standard dataclasses to Pydantic's own flavor of dataclasses. And of course, it supports the same: data validation data serialization data documentation, etc. This works the same way as with Pydantic models. And it is actually achieved in the same way underneath, using Pydantic. Info Have in mind that dataclasses can't do everything Pydantic models can do. So, you might still need to use Pydantic models. But if you have a bunch of dataclasses laying around, this is a nice trick to use them to power a web API using FastAPI. \ud83e\udd13","title":"Using Dataclasses"},{"location":"advanced/dataclasses/#dataclasses-in-response_model","text":"You can also use dataclasses in the response_model parameter: from dataclasses import dataclass , field from typing import List , Union from fastapi import FastAPI @dataclass class Item : name : str price : float tags : List [ str ] = field ( default_factory = list ) description : Union [ str , None ] = None tax : Union [ float , None ] = None app = FastAPI () @app . get ( \"/items/next\" , response_model = Item ) async def read_next_item (): return { \"name\" : \"Island In The Moon\" , \"price\" : 12.99 , \"description\" : \"A place to be be playin' and havin' fun\" , \"tags\" : [ \"breater\" ], } The dataclass will be automatically converted to a Pydantic dataclass. This way, its schema will show up in the API docs user interface:","title":"Dataclasses in response_model"},{"location":"advanced/dataclasses/#dataclasses-in-nested-data-structures","text":"You can also combine dataclasses with other type annotations to make nested data structures. In some cases, you might still have to use Pydantic's version of dataclasses . For example, if you have errors with the automatically generated API documentation. In that case, you can simply swap the standard dataclasses with pydantic.dataclasses , which is a drop-in replacement: from dataclasses import field # (1) from typing import List , Union from fastapi import FastAPI from pydantic.dataclasses import dataclass # (2) @dataclass class Item : name : str description : Union [ str , None ] = None @dataclass class Author : name : str items : List [ Item ] = field ( default_factory = list ) # (3) app = FastAPI () @app . post ( \"/authors/ {author_id} /items/\" , response_model = Author ) # (4) async def create_author_items ( author_id : str , items : List [ Item ]): # (5) return { \"name\" : author_id , \"items\" : items } # (6) @app . get ( \"/authors/\" , response_model = List [ Author ]) # (7) def get_authors (): # (8) return [ # (9) { \"name\" : \"Breaters\" , \"items\" : [ { \"name\" : \"Island In The Moon\" , \"description\" : \"A place to be be playin' and havin' fun\" , }, { \"name\" : \"Holy Buddies\" }, ], }, { \"name\" : \"System of an Up\" , \"items\" : [ { \"name\" : \"Salt\" , \"description\" : \"The kombucha mushroom people's favorite\" , }, { \"name\" : \"Pad Thai\" }, { \"name\" : \"Lonely Night\" , \"description\" : \"The mostests lonliest nightiest of allest\" , }, ], }, ] We still import field from standard dataclasses . pydantic.dataclasses is a drop-in replacement for dataclasses . The Author dataclass includes a list of Item dataclasses. The Author dataclass is used as the response_model parameter. You can use other standard type annotations with dataclasses as the request body. In this case, it's a list of Item dataclasses. Here we are returning a dictionary that contains items which is a list of dataclasses. FastAPI is still capable of serializing the data to JSON. Here the response_model is using a type annotation of a list of Author dataclasses. Again, you can combine dataclasses with standard type annotations. Notice that this path operation function uses regular def instead of async def . As always, in FastAPI you can combine def and async def as needed. If you need a refresher about when to use which, check out the section \"In a hurry?\" in the docs about async and await . This path operation function is not returning dataclasses (although it could), but a list of dictionaries with internal data. FastAPI will use the response_model parameter (that includes dataclasses) to convert the response. You can combine dataclasses with other type annotations in many different combinations to form complex data structures. Check the in-code annotation tips above to see more specific details.","title":"Dataclasses in Nested Data Structures"},{"location":"advanced/dataclasses/#learn-more","text":"You can also combine dataclasses with other Pydantic models, inherit from them, include them in your own models, etc. To learn more, check the Pydantic docs about dataclasses .","title":"Learn More"},{"location":"advanced/dataclasses/#version","text":"This is available since FastAPI version 0.67.0 . \ud83d\udd16","title":"Version"},{"location":"advanced/events/","text":"\uc774\ubca4\ud2b8: startup\uacfc shutdown \u00b6 \ud544\uc694\uc5d0 \ub530\ub77c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2dc\uc791\ub418\uae30 \uc804\uc774\ub098 \uc885\ub8cc\ub420 \ub54c \uc2e4\ud589\ub418\ub294 \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec(\ud568\uc218)\ub97c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud568\uc218\ub4e4\uc740 async def \ub610\ub294 \ud3c9\ubc94\ud558\uac8c def \uc73c\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uacbd\uace0 \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec\ub294 \uc8fc \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c\ub9cc \uc791\ub3d9\ud569\ub2c8\ub2e4. \ud558\uc704 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 - \ub9c8\uc6b4\ud2b8 \uc5d0\uc11c\ub294 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. startup \uc774\ubca4\ud2b8 \u00b6 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc744 \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \uc2e4\ud589\ud558\ub824\ub294 \ud568\uc218\ub97c \"startup\" \uc774\ubca4\ud2b8\ub85c \uc120\uc5b8\ud569\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () items = {} @app . on_event ( \"startup\" ) async def startup_event (): items [ \"foo\" ] = { \"name\" : \"Fighters\" } items [ \"bar\" ] = { \"name\" : \"Tenders\" } @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : str ): return items [ item_id ] \uc774 \uacbd\uc6b0 startup \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec \ud568\uc218\ub294 \ub2e8\uc21c\ud788 \uba87 \uac00\uc9c0 \uac12\uc73c\ub85c \uad6c\uc131\ub41c dict \ud615\uc2dd\uc758 \"\ub370\uc774\ud130\ubca0\uc774\uc2a4\"\ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. \ud558\ub098 \uc774\uc0c1\uc758 \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec \ud568\uc218\ub97c \ucd94\uac00\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc740 \ubaa8\ub4e0 startup \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec\uac00 \uc644\ub8cc\ub420 \ub54c\uae4c\uc9c0 \uc694\uccad\uc744 \ubc1b\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. shutdown \uc774\ubca4\ud2b8 \u00b6 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc774 \uc885\ub8cc\ub420 \ub54c \uc2e4\ud589\ud558\ub824\ub294 \ud568\uc218\ub97c \ucd94\uac00\ud558\ub824\uba74 \"shutdown\" \uc774\ubca4\ud2b8\ub85c \uc120\uc5b8\ud569\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . on_event ( \"shutdown\" ) def shutdown_event (): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( \"Application shutdown\" ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] \uc774 \uc608\uc81c\uc5d0\uc11c shutdown \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec \ud568\uc218\ub294 \"Application shutdown\" \uc774\ub77c\ub294 \ud14d\uc2a4\ud2b8\uac00 \uc801\ud78c log.txt \ud30c\uc77c\uc744 \ucd94\uac00\ud560 \uac83\uc785\ub2c8\ub2e4. \uc815\ubcf4 open() \ud568\uc218\uc5d0\uc11c mode=\"a\" \ub294 \"\ucd94\uac00\"\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ud30c\uc77c\uc758 \ub0b4\uc6a9\uc744 \ub36e\uc5b4\uc4f0\uc9c0 \uc54a\uace0 \uc0c8\ub85c\uc6b4 \uc904\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4. \ud301 \uc774 \uc608\uc81c\uc5d0\uc11c\ub294 \ud30c\uc77c\uacfc \uc0c1\ud638\uc791\uc6a9 \ud558\uae30 \uc704\ud574 \ud30c\uc774\uc36c \ud45c\uc900 \ud568\uc218\uc778 open() \uc744 \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub514\uc2a4\ud06c\uc5d0 \ub370\uc774\ud130\ub97c \uc4f0\uae30 \uc704\ud574 \"\ub300\uae30\"\uac00 \ud544\uc694\ud55c I/O (\uc785\ub825/\ucd9c\ub825) \uc791\uc5c5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 open() \uc740 async \uc640 await \uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec \ud568\uc218\ub294 async def \uac00 \uc544\ub2cc \ud45c\uc900 def \ub85c \uc120\uc5b8\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec\uc5d0 \uad00\ud55c \ub0b4\uc6a9\uc740 Starlette \uc774\ubca4\ud2b8 \ubb38\uc11c \uc5d0\uc11c \ucd94\uac00\ub85c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc774\ubca4\ud2b8: startup\uacfc shutdown"},{"location":"advanced/events/#startup-shutdown","text":"\ud544\uc694\uc5d0 \ub530\ub77c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2dc\uc791\ub418\uae30 \uc804\uc774\ub098 \uc885\ub8cc\ub420 \ub54c \uc2e4\ud589\ub418\ub294 \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec(\ud568\uc218)\ub97c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud568\uc218\ub4e4\uc740 async def \ub610\ub294 \ud3c9\ubc94\ud558\uac8c def \uc73c\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uacbd\uace0 \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec\ub294 \uc8fc \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c\ub9cc \uc791\ub3d9\ud569\ub2c8\ub2e4. \ud558\uc704 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 - \ub9c8\uc6b4\ud2b8 \uc5d0\uc11c\ub294 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"\uc774\ubca4\ud2b8: startup\uacfc shutdown"},{"location":"advanced/events/#startup","text":"\uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc744 \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \uc2e4\ud589\ud558\ub824\ub294 \ud568\uc218\ub97c \"startup\" \uc774\ubca4\ud2b8\ub85c \uc120\uc5b8\ud569\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () items = {} @app . on_event ( \"startup\" ) async def startup_event (): items [ \"foo\" ] = { \"name\" : \"Fighters\" } items [ \"bar\" ] = { \"name\" : \"Tenders\" } @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : str ): return items [ item_id ] \uc774 \uacbd\uc6b0 startup \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec \ud568\uc218\ub294 \ub2e8\uc21c\ud788 \uba87 \uac00\uc9c0 \uac12\uc73c\ub85c \uad6c\uc131\ub41c dict \ud615\uc2dd\uc758 \"\ub370\uc774\ud130\ubca0\uc774\uc2a4\"\ub97c \ucd08\uae30\ud654\ud569\ub2c8\ub2e4. \ud558\ub098 \uc774\uc0c1\uc758 \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec \ud568\uc218\ub97c \ucd94\uac00\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc740 \ubaa8\ub4e0 startup \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec\uac00 \uc644\ub8cc\ub420 \ub54c\uae4c\uc9c0 \uc694\uccad\uc744 \ubc1b\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"startup \uc774\ubca4\ud2b8"},{"location":"advanced/events/#shutdown","text":"\uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc774 \uc885\ub8cc\ub420 \ub54c \uc2e4\ud589\ud558\ub824\ub294 \ud568\uc218\ub97c \ucd94\uac00\ud558\ub824\uba74 \"shutdown\" \uc774\ubca4\ud2b8\ub85c \uc120\uc5b8\ud569\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . on_event ( \"shutdown\" ) def shutdown_event (): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( \"Application shutdown\" ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] \uc774 \uc608\uc81c\uc5d0\uc11c shutdown \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec \ud568\uc218\ub294 \"Application shutdown\" \uc774\ub77c\ub294 \ud14d\uc2a4\ud2b8\uac00 \uc801\ud78c log.txt \ud30c\uc77c\uc744 \ucd94\uac00\ud560 \uac83\uc785\ub2c8\ub2e4. \uc815\ubcf4 open() \ud568\uc218\uc5d0\uc11c mode=\"a\" \ub294 \"\ucd94\uac00\"\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ud30c\uc77c\uc758 \ub0b4\uc6a9\uc744 \ub36e\uc5b4\uc4f0\uc9c0 \uc54a\uace0 \uc0c8\ub85c\uc6b4 \uc904\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4. \ud301 \uc774 \uc608\uc81c\uc5d0\uc11c\ub294 \ud30c\uc77c\uacfc \uc0c1\ud638\uc791\uc6a9 \ud558\uae30 \uc704\ud574 \ud30c\uc774\uc36c \ud45c\uc900 \ud568\uc218\uc778 open() \uc744 \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub514\uc2a4\ud06c\uc5d0 \ub370\uc774\ud130\ub97c \uc4f0\uae30 \uc704\ud574 \"\ub300\uae30\"\uac00 \ud544\uc694\ud55c I/O (\uc785\ub825/\ucd9c\ub825) \uc791\uc5c5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 open() \uc740 async \uc640 await \uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec \ud568\uc218\ub294 async def \uac00 \uc544\ub2cc \ud45c\uc900 def \ub85c \uc120\uc5b8\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \uc774\ubca4\ud2b8 \ud578\ub4e4\ub7ec\uc5d0 \uad00\ud55c \ub0b4\uc6a9\uc740 Starlette \uc774\ubca4\ud2b8 \ubb38\uc11c \uc5d0\uc11c \ucd94\uac00\ub85c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"shutdown \uc774\ubca4\ud2b8"},{"location":"advanced/extending-openapi/","text":"Extending OpenAPI \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Warning This is a rather advanced feature. You probably can skip it. If you are just following the tutorial - user guide, you can probably skip this section. If you already know that you need to modify the generated OpenAPI schema, continue reading. There are some cases where you might need to modify the generated OpenAPI schema. In this section you will see how. The normal process \u00b6 The normal (default) process, is as follows. A FastAPI application (instance) has an .openapi() method that is expected to return the OpenAPI schema. As part of the application object creation, a path operation for /openapi.json (or for whatever you set your openapi_url ) is registered. It just returns a JSON response with the result of the application's .openapi() method. By default, what the method .openapi() does is check the property .openapi_schema to see if it has contents and return them. If it doesn't, it generates them using the utility function at fastapi.openapi.utils.get_openapi . And that function get_openapi() receives as parameters: title : The OpenAPI title, shown in the docs. version : The version of your API, e.g. 2.5.0 . openapi_version : The version of the OpenAPI specification used. By default, the latest: 3.0.2 . description : The description of your API. routes : A list of routes, these are each of the registered path operations . They are taken from app.routes . Overriding the defaults \u00b6 Using the information above, you can use the same utility function to generate the OpenAPI schema and override each part that you need. For example, let's add ReDoc's OpenAPI extension to include a custom logo . Normal FastAPI \u00b6 First, write all your FastAPI application as normally: from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi Generate the OpenAPI schema \u00b6 Then, use the same utility function to generate the OpenAPI schema, inside a custom_openapi() function: from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi Modify the OpenAPI schema \u00b6 Now you can add the ReDoc extension, adding a custom x-logo to the info \"object\" in the OpenAPI schema: from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi Cache the OpenAPI schema \u00b6 You can use the property .openapi_schema as a \"cache\", to store your generated schema. That way, your application won't have to generate the schema every time a user opens your API docs. It will be generated only once, and then the same cached schema will be used for the next requests. from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi Override the method \u00b6 Now you can replace the .openapi() method with your new function. from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi Check it \u00b6 Once you go to http://127.0.0.1:8000/redoc you will see that you are using your custom logo (in this example, FastAPI 's logo): Self-hosting JavaScript and CSS for docs \u00b6 The API docs use Swagger UI and ReDoc , and each of those need some JavaScript and CSS files. By default, those files are served from a CDN . But it's possible to customize it, you can set a specific CDN, or serve the files yourself. That's useful, for example, if you need your app to keep working even while offline, without open Internet access, or in a local network. Here you'll see how to serve those files yourself, in the same FastAPI app, and configure the docs to use them. Project file structure \u00b6 Let's say your project file structure looks like this: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py Now create a directory to store those static files. Your new file structure could look like this: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2514\u2500\u2500 static/ Download the files \u00b6 Download the static files needed for the docs and put them on that static/ directory. You can probably right-click each link and select an option similar to Save link as... . Swagger UI uses the files: swagger-ui-bundle.js swagger-ui.css And ReDoc uses the file: redoc.standalone.js After that, your file structure could look like: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2514\u2500\u2500 static \u251c\u2500\u2500 redoc.standalone.js \u251c\u2500\u2500 swagger-ui-bundle.js \u2514\u2500\u2500 swagger-ui.css Serve the static files \u00b6 Import StaticFiles . \"Mount\" a StaticFiles() instance in a specific path. from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } Test the static files \u00b6 Start your application and go to http://127.0.0.1:8000/static/redoc.standalone.js . You should see a very long JavaScript file for ReDoc . It could start with something like: /*! * ReDoc - OpenAPI/Swagger-generated API Reference Documentation * ------------------------------------------------------------- * Version: \"2.0.0-rc.18\" * Repo: https://github.com/Redocly/redoc */ ! function ( e , t ){ \"object\" == typeof exports && \"object\" == typeof m ... That confirms that you are being able to serve static files from your app, and that you placed the static files for the docs in the correct place. Now we can configure the app to use those static files for the docs. Disable the automatic docs \u00b6 The first step is to disable the automatic docs, as those use the CDN by default. To disable them, set their URLs to None when creating your FastAPI app: from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } Include the custom docs \u00b6 Now you can create the path operations for the custom docs. You can re-use FastAPI's internal functions to create the HTML pages for the docs, and pass them the needed arguments: openapi_url : the URL where the HTML page for the docs can get the OpenAPI schema for your API. You can use here the attribute app.openapi_url . title : the title of your API. oauth2_redirect_url : you can use app.swagger_ui_oauth2_redirect_url here to use the default. swagger_js_url : the URL where the HTML for your Swagger UI docs can get the JavaScript file. This is the one that your own app is now serving. swagger_css_url : the URL where the HTML for your Swagger UI docs can get the CSS file. This is the one that your own app is now serving. And similarly for ReDoc... from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } Tip The path operation for swagger_ui_redirect is a helper for when you use OAuth2. If you integrate your API with an OAuth2 provider, you will be able to authenticate and come back to the API docs with the acquired credentials. And interact with it using the real OAuth2 authentication. Swagger UI will handle it behind the scenes for you, but it needs this \"redirect\" helper. Create a path operation to test it \u00b6 Now, to be able to test that everything works, create a path operation : from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } Test it \u00b6 Now, you should be able to disconnect your WiFi, go to your docs at http://127.0.0.1:8000/docs , and reload the page. And even without Internet, you would be able to see the docs for your API and interact with it. Configuring Swagger UI \u00b6 You can configure some extra Swagger UI parameters . To configure them, pass the swagger_ui_parameters argument when creating the FastAPI() app object or to the get_swagger_ui_html() function. swagger_ui_parameters receives a dictionary with the configurations passed to Swagger UI directly. FastAPI converts the configurations to JSON to make them compatible with JavaScript, as that's what Swagger UI needs. Disable Syntax Highlighting \u00b6 For example, you could disable syntax highlighting in Swagger UI. Without changing the settings, syntax highlighting is enabled by default: But you can disable it by setting syntaxHighlight to False : from fastapi import FastAPI app = FastAPI ( swagger_ui_parameters = { \"syntaxHighlight\" : False }) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } ...and then Swagger UI won't show the syntax highlighting anymore: Change the Theme \u00b6 The same way you could set the syntax highlighting theme with the key \"syntaxHighlight.theme\" (notice that it has a dot in the middle): from fastapi import FastAPI app = FastAPI ( swagger_ui_parameters = { \"syntaxHighlight.theme\" : \"obsidian\" }) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } That configuration would change the syntax highlighting color theme: Change Default Swagger UI Parameters \u00b6 FastAPI includes some default configuration parameters appropriate for most of the use cases. It includes these default configurations: swagger_ui_default_parameters = { \"dom_id\" : \"#swagger-ui\" , \"layout\" : \"BaseLayout\" , \"deepLinking\" : True , \"showExtensions\" : True , \"showCommonExtensions\" : True , } You can override any of them by setting a different value in the argument swagger_ui_parameters . For example, to disable deepLinking you could pass these settings to swagger_ui_parameters : from fastapi import FastAPI app = FastAPI ( swagger_ui_parameters = { \"deepLinking\" : False }) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } Other Swagger UI Parameters \u00b6 To see all the other possible configurations you can use, read the official docs for Swagger UI parameters . JavaScript-only settings \u00b6 Swagger UI also allows other configurations to be JavaScript-only objects (for example, JavaScript functions). FastAPI also includes these JavaScript-only presets settings: presets : [ SwaggerUIBundle . presets . apis , SwaggerUIBundle . SwaggerUIStandalonePreset ] These are JavaScript objects, not strings, so you can't pass them from Python code directly. If you need to use JavaScript-only configurations like those, you can use one of the methods above. Override all the Swagger UI path operation and manually write any JavaScript you need.","title":"Extending OpenAPI"},{"location":"advanced/extending-openapi/#extending-openapi","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Warning This is a rather advanced feature. You probably can skip it. If you are just following the tutorial - user guide, you can probably skip this section. If you already know that you need to modify the generated OpenAPI schema, continue reading. There are some cases where you might need to modify the generated OpenAPI schema. In this section you will see how.","title":"Extending OpenAPI"},{"location":"advanced/extending-openapi/#the-normal-process","text":"The normal (default) process, is as follows. A FastAPI application (instance) has an .openapi() method that is expected to return the OpenAPI schema. As part of the application object creation, a path operation for /openapi.json (or for whatever you set your openapi_url ) is registered. It just returns a JSON response with the result of the application's .openapi() method. By default, what the method .openapi() does is check the property .openapi_schema to see if it has contents and return them. If it doesn't, it generates them using the utility function at fastapi.openapi.utils.get_openapi . And that function get_openapi() receives as parameters: title : The OpenAPI title, shown in the docs. version : The version of your API, e.g. 2.5.0 . openapi_version : The version of the OpenAPI specification used. By default, the latest: 3.0.2 . description : The description of your API. routes : A list of routes, these are each of the registered path operations . They are taken from app.routes .","title":"The normal process"},{"location":"advanced/extending-openapi/#overriding-the-defaults","text":"Using the information above, you can use the same utility function to generate the OpenAPI schema and override each part that you need. For example, let's add ReDoc's OpenAPI extension to include a custom logo .","title":"Overriding the defaults"},{"location":"advanced/extending-openapi/#normal-fastapi","text":"First, write all your FastAPI application as normally: from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"Normal FastAPI"},{"location":"advanced/extending-openapi/#generate-the-openapi-schema","text":"Then, use the same utility function to generate the OpenAPI schema, inside a custom_openapi() function: from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"Generate the OpenAPI schema"},{"location":"advanced/extending-openapi/#modify-the-openapi-schema","text":"Now you can add the ReDoc extension, adding a custom x-logo to the info \"object\" in the OpenAPI schema: from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"Modify the OpenAPI schema"},{"location":"advanced/extending-openapi/#cache-the-openapi-schema","text":"You can use the property .openapi_schema as a \"cache\", to store your generated schema. That way, your application won't have to generate the schema every time a user opens your API docs. It will be generated only once, and then the same cached schema will be used for the next requests. from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"Cache the OpenAPI schema"},{"location":"advanced/extending-openapi/#override-the-method","text":"Now you can replace the .openapi() method with your new function. from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"Override the method"},{"location":"advanced/extending-openapi/#check-it","text":"Once you go to http://127.0.0.1:8000/redoc you will see that you are using your custom logo (in this example, FastAPI 's logo):","title":"Check it"},{"location":"advanced/extending-openapi/#self-hosting-javascript-and-css-for-docs","text":"The API docs use Swagger UI and ReDoc , and each of those need some JavaScript and CSS files. By default, those files are served from a CDN . But it's possible to customize it, you can set a specific CDN, or serve the files yourself. That's useful, for example, if you need your app to keep working even while offline, without open Internet access, or in a local network. Here you'll see how to serve those files yourself, in the same FastAPI app, and configure the docs to use them.","title":"Self-hosting JavaScript and CSS for docs"},{"location":"advanced/extending-openapi/#project-file-structure","text":"Let's say your project file structure looks like this: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py Now create a directory to store those static files. Your new file structure could look like this: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2514\u2500\u2500 static/","title":"Project file structure"},{"location":"advanced/extending-openapi/#download-the-files","text":"Download the static files needed for the docs and put them on that static/ directory. You can probably right-click each link and select an option similar to Save link as... . Swagger UI uses the files: swagger-ui-bundle.js swagger-ui.css And ReDoc uses the file: redoc.standalone.js After that, your file structure could look like: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2514\u2500\u2500 static \u251c\u2500\u2500 redoc.standalone.js \u251c\u2500\u2500 swagger-ui-bundle.js \u2514\u2500\u2500 swagger-ui.css","title":"Download the files"},{"location":"advanced/extending-openapi/#serve-the-static-files","text":"Import StaticFiles . \"Mount\" a StaticFiles() instance in a specific path. from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" }","title":"Serve the static files"},{"location":"advanced/extending-openapi/#test-the-static-files","text":"Start your application and go to http://127.0.0.1:8000/static/redoc.standalone.js . You should see a very long JavaScript file for ReDoc . It could start with something like: /*! * ReDoc - OpenAPI/Swagger-generated API Reference Documentation * ------------------------------------------------------------- * Version: \"2.0.0-rc.18\" * Repo: https://github.com/Redocly/redoc */ ! function ( e , t ){ \"object\" == typeof exports && \"object\" == typeof m ... That confirms that you are being able to serve static files from your app, and that you placed the static files for the docs in the correct place. Now we can configure the app to use those static files for the docs.","title":"Test the static files"},{"location":"advanced/extending-openapi/#disable-the-automatic-docs","text":"The first step is to disable the automatic docs, as those use the CDN by default. To disable them, set their URLs to None when creating your FastAPI app: from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" }","title":"Disable the automatic docs"},{"location":"advanced/extending-openapi/#include-the-custom-docs","text":"Now you can create the path operations for the custom docs. You can re-use FastAPI's internal functions to create the HTML pages for the docs, and pass them the needed arguments: openapi_url : the URL where the HTML page for the docs can get the OpenAPI schema for your API. You can use here the attribute app.openapi_url . title : the title of your API. oauth2_redirect_url : you can use app.swagger_ui_oauth2_redirect_url here to use the default. swagger_js_url : the URL where the HTML for your Swagger UI docs can get the JavaScript file. This is the one that your own app is now serving. swagger_css_url : the URL where the HTML for your Swagger UI docs can get the CSS file. This is the one that your own app is now serving. And similarly for ReDoc... from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } Tip The path operation for swagger_ui_redirect is a helper for when you use OAuth2. If you integrate your API with an OAuth2 provider, you will be able to authenticate and come back to the API docs with the acquired credentials. And interact with it using the real OAuth2 authentication. Swagger UI will handle it behind the scenes for you, but it needs this \"redirect\" helper.","title":"Include the custom docs"},{"location":"advanced/extending-openapi/#create-a-path-operation-to-test-it","text":"Now, to be able to test that everything works, create a path operation : from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" }","title":"Create a path operation to test it"},{"location":"advanced/extending-openapi/#test-it","text":"Now, you should be able to disconnect your WiFi, go to your docs at http://127.0.0.1:8000/docs , and reload the page. And even without Internet, you would be able to see the docs for your API and interact with it.","title":"Test it"},{"location":"advanced/extending-openapi/#configuring-swagger-ui","text":"You can configure some extra Swagger UI parameters . To configure them, pass the swagger_ui_parameters argument when creating the FastAPI() app object or to the get_swagger_ui_html() function. swagger_ui_parameters receives a dictionary with the configurations passed to Swagger UI directly. FastAPI converts the configurations to JSON to make them compatible with JavaScript, as that's what Swagger UI needs.","title":"Configuring Swagger UI"},{"location":"advanced/extending-openapi/#disable-syntax-highlighting","text":"For example, you could disable syntax highlighting in Swagger UI. Without changing the settings, syntax highlighting is enabled by default: But you can disable it by setting syntaxHighlight to False : from fastapi import FastAPI app = FastAPI ( swagger_ui_parameters = { \"syntaxHighlight\" : False }) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } ...and then Swagger UI won't show the syntax highlighting anymore:","title":"Disable Syntax Highlighting"},{"location":"advanced/extending-openapi/#change-the-theme","text":"The same way you could set the syntax highlighting theme with the key \"syntaxHighlight.theme\" (notice that it has a dot in the middle): from fastapi import FastAPI app = FastAPI ( swagger_ui_parameters = { \"syntaxHighlight.theme\" : \"obsidian\" }) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } That configuration would change the syntax highlighting color theme:","title":"Change the Theme"},{"location":"advanced/extending-openapi/#change-default-swagger-ui-parameters","text":"FastAPI includes some default configuration parameters appropriate for most of the use cases. It includes these default configurations: swagger_ui_default_parameters = { \"dom_id\" : \"#swagger-ui\" , \"layout\" : \"BaseLayout\" , \"deepLinking\" : True , \"showExtensions\" : True , \"showCommonExtensions\" : True , } You can override any of them by setting a different value in the argument swagger_ui_parameters . For example, to disable deepLinking you could pass these settings to swagger_ui_parameters : from fastapi import FastAPI app = FastAPI ( swagger_ui_parameters = { \"deepLinking\" : False }) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" }","title":"Change Default Swagger UI Parameters"},{"location":"advanced/extending-openapi/#other-swagger-ui-parameters","text":"To see all the other possible configurations you can use, read the official docs for Swagger UI parameters .","title":"Other Swagger UI Parameters"},{"location":"advanced/extending-openapi/#javascript-only-settings","text":"Swagger UI also allows other configurations to be JavaScript-only objects (for example, JavaScript functions). FastAPI also includes these JavaScript-only presets settings: presets : [ SwaggerUIBundle . presets . apis , SwaggerUIBundle . SwaggerUIStandalonePreset ] These are JavaScript objects, not strings, so you can't pass them from Python code directly. If you need to use JavaScript-only configurations like those, you can use one of the methods above. Override all the Swagger UI path operation and manually write any JavaScript you need.","title":"JavaScript-only settings"},{"location":"advanced/generate-clients/","text":"Generate Clients \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . As FastAPI is based on the OpenAPI specification, you get automatic compatibility with many tools, including the automatic API docs (provided by Swagger UI). One particular advantage that is not necessarily obvious is that you can generate clients (sometimes called SDKs ) for your API, for many different programming languages . OpenAPI Client Generators \u00b6 There are many tools to generate clients from OpenAPI . A common tool is OpenAPI Generator . If you are building a frontend , a very interesting alternative is openapi-typescript-codegen . Generate a TypeScript Frontend Client \u00b6 Let's start with a simple FastAPI application: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str @app . post ( \"/items/\" , response_model = ResponseMessage ) async def create_item ( item : Item ): return { \"message\" : \"item received\" } @app . get ( \"/items/\" , response_model = List [ Item ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str @app . post ( \"/items/\" , response_model = ResponseMessage ) async def create_item ( item : Item ): return { \"message\" : \"item received\" } @app . get ( \"/items/\" , response_model = list [ Item ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] Notice that the path operations define the models they use for request payload and response payload, using the models Item and ResponseMessage . API Docs \u00b6 If you go to the API docs, you will see that it has the schemas for the data to be sent in requests and received in responses: You can see those schemas because they were declared with the models in the app. That information is available in the app's OpenAPI schema , and then shown in the API docs (by Swagger UI). And that same information from the models that is included in OpenAPI is what can be used to generate the client code . Generate a TypeScript Client \u00b6 Now that we have the app with the models, we can generate the client code for the frontend. Install openapi-typescript-codegen \u00b6 You can install openapi-typescript-codegen in your frontend code with: $ npm install openapi-typescript-codegen --save-dev ---> 100% Generate Client Code \u00b6 To generate the client code you can use the command line application openapi that would now be installed. Because it is installed in the local project, you probably wouldn't be able to call that command directly, but you would put it on your package.json file. It could look like this: { \"name\" : \"frontend-app\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"index.js\" , \"scripts\" : { \"generate-client\" : \"openapi --input http://localhost:8000/openapi.json --output ./src/client --client axios\" }, \"author\" : \"\" , \"license\" : \"\" , \"devDependencies\" : { \"openapi-typescript-codegen\" : \"^0.20.1\" , \"typescript\" : \"^4.6.2\" } } After having that NPM generate-client script there, you can run it with: $ npm run generate-client frontend-app@1.0.0 generate-client /home/user/code/frontend-app > openapi --input http://localhost:8000/openapi.json --output ./src/client --client axios That command will generate code in ./src/client and will use axios (the frontend HTTP library) internally. Try Out the Client Code \u00b6 Now you can import and use the client code, it could look like this, notice that you get autocompletion for the methods: You will also get autocompletion for the payload to send: Tip Notice the autocompletion for name and price , that was defined in the FastAPI application, in the Item model. You will have inline errors for the data that you send: The response object will also have autocompletion: FastAPI App with Tags \u00b6 In many cases your FastAPI app will be bigger, and you will probably use tags to separate different groups of path operations . For example, you could have a section for items and another section for users , and they could be separated by tags: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = List [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = list [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } Generate a TypeScript Client with Tags \u00b6 If you generate a client for a FastAPI app using tags, it will normally also separate the client code based on the tags. This way you will be able to have things ordered and grouped correctly for the client code: In this case you have: ItemsService UsersService Client Method Names \u00b6 Right now the generated method names like createItemItemsPost don't look very clean: ItemsService . createItemItemsPost ({ name : \"Plumbus\" , price : 5 }) ...that's because the client generator uses the OpenAPI internal operation ID for each path operation . OpenAPI requires that each operation ID is unique across all the path operations , so FastAPI uses the function name , the path , and the HTTP method/operation to generate that operation ID, because that way it can make sure that the operation IDs are unique. But I'll show you how to improve that next. \ud83e\udd13 Custom Operation IDs and Better Method Names \u00b6 You can modify the way these operation IDs are generated to make them simpler and have simpler method names in the clients. In this case you will have to ensure that each operation ID is unique in some other way. For example, you could make sure that each path operation has a tag, and then generate the operation ID based on the tag and the path operation name (the function name). Custom Generate Unique ID Function \u00b6 FastAPI uses a unique ID for each path operation , it is used for the operation ID and also for the names of any needed custom models, for requests or responses. You can customize that function. It takes an APIRoute and outputs a string. For example, here it is using the first tag (you will probably have only one tag) and the path operation name (the function name). You can then pass that custom function to FastAPI as the generate_unique_id_function parameter: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from fastapi.routing import APIRoute from pydantic import BaseModel def custom_generate_unique_id ( route : APIRoute ): return f \" { route . tags [ 0 ] } - { route . name } \" app = FastAPI ( generate_unique_id_function = custom_generate_unique_id ) class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = List [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } from fastapi import FastAPI from fastapi.routing import APIRoute from pydantic import BaseModel def custom_generate_unique_id ( route : APIRoute ): return f \" { route . tags [ 0 ] } - { route . name } \" app = FastAPI ( generate_unique_id_function = custom_generate_unique_id ) class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = list [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } Generate a TypeScript Client with Custom Operation IDs \u00b6 Now if you generate the client again, you will see that it has the improved method names: As you see, the method names now have the tag and then the function name, now they don't include information from the URL path and the HTTP operation. Preprocess the OpenAPI Specification for the Client Generator \u00b6 The generated code still has some duplicated information . We already know that this method is related to the items because that word is in the ItemsService (taken from the tag), but we still have the tag name prefixed in the method name too. \ud83d\ude15 We will probably still want to keep it for OpenAPI in general, as that will ensure that the operation IDs are unique . But for the generated client we could modify the OpenAPI operation IDs right before generating the clients, just to make those method names nicer and cleaner . We could download the OpenAPI JSON to a file openapi.json and then we could remove that prefixed tag with a script like this: import json from pathlib import Path file_path = Path ( \"./openapi.json\" ) openapi_content = json . loads ( file_path . read_text ()) for path_data in openapi_content [ \"paths\" ] . values (): for operation in path_data . values (): tag = operation [ \"tags\" ][ 0 ] operation_id = operation [ \"operationId\" ] to_remove = f \" { tag } -\" new_operation_id = operation_id [ len ( to_remove ) :] operation [ \"operationId\" ] = new_operation_id file_path . write_text ( json . dumps ( openapi_content )) With that, the operation IDs would be renamed from things like items-get_items to just get_items , that way the client generator can generate simpler method names. Generate a TypeScript Client with the Preprocessed OpenAPI \u00b6 Now as the end result is in a file openapi.json , you would modify the package.json to use that local file, for example: { \"name\" : \"frontend-app\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"index.js\" , \"scripts\" : { \"generate-client\" : \"openapi --input ./openapi.json --output ./src/client --client axios\" }, \"author\" : \"\" , \"license\" : \"\" , \"devDependencies\" : { \"openapi-typescript-codegen\" : \"^0.20.1\" , \"typescript\" : \"^4.6.2\" } } After generating the new client, you would now have clean method names , with all the autocompletion , inline errors , etc: Benefits \u00b6 When using the automatically generated clients you would autocompletion for: Methods. Request payloads in the body, query parameters, etc. Response payloads. You would also have inline errors for everything. And whenever you update the backend code, and regenerate the frontend, it would have any new path operations available as methods, the old ones removed, and any other change would be reflected on the generated code. \ud83e\udd13 This also means that if something changed it will be reflected on the client code automatically. And if you build the client it will error out if you have any mismatch in the data used. So, you would detect many errors very early in the development cycle instead of having to wait for the errors to show up to your final users in production and then trying to debug where the problem is. \u2728","title":"Generate Clients"},{"location":"advanced/generate-clients/#generate-clients","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . As FastAPI is based on the OpenAPI specification, you get automatic compatibility with many tools, including the automatic API docs (provided by Swagger UI). One particular advantage that is not necessarily obvious is that you can generate clients (sometimes called SDKs ) for your API, for many different programming languages .","title":"Generate Clients"},{"location":"advanced/generate-clients/#openapi-client-generators","text":"There are many tools to generate clients from OpenAPI . A common tool is OpenAPI Generator . If you are building a frontend , a very interesting alternative is openapi-typescript-codegen .","title":"OpenAPI Client Generators"},{"location":"advanced/generate-clients/#generate-a-typescript-frontend-client","text":"Let's start with a simple FastAPI application: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str @app . post ( \"/items/\" , response_model = ResponseMessage ) async def create_item ( item : Item ): return { \"message\" : \"item received\" } @app . get ( \"/items/\" , response_model = List [ Item ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str @app . post ( \"/items/\" , response_model = ResponseMessage ) async def create_item ( item : Item ): return { \"message\" : \"item received\" } @app . get ( \"/items/\" , response_model = list [ Item ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] Notice that the path operations define the models they use for request payload and response payload, using the models Item and ResponseMessage .","title":"Generate a TypeScript Frontend Client"},{"location":"advanced/generate-clients/#api-docs","text":"If you go to the API docs, you will see that it has the schemas for the data to be sent in requests and received in responses: You can see those schemas because they were declared with the models in the app. That information is available in the app's OpenAPI schema , and then shown in the API docs (by Swagger UI). And that same information from the models that is included in OpenAPI is what can be used to generate the client code .","title":"API Docs"},{"location":"advanced/generate-clients/#generate-a-typescript-client","text":"Now that we have the app with the models, we can generate the client code for the frontend.","title":"Generate a TypeScript Client"},{"location":"advanced/generate-clients/#install-openapi-typescript-codegen","text":"You can install openapi-typescript-codegen in your frontend code with: $ npm install openapi-typescript-codegen --save-dev ---> 100%","title":"Install openapi-typescript-codegen"},{"location":"advanced/generate-clients/#generate-client-code","text":"To generate the client code you can use the command line application openapi that would now be installed. Because it is installed in the local project, you probably wouldn't be able to call that command directly, but you would put it on your package.json file. It could look like this: { \"name\" : \"frontend-app\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"index.js\" , \"scripts\" : { \"generate-client\" : \"openapi --input http://localhost:8000/openapi.json --output ./src/client --client axios\" }, \"author\" : \"\" , \"license\" : \"\" , \"devDependencies\" : { \"openapi-typescript-codegen\" : \"^0.20.1\" , \"typescript\" : \"^4.6.2\" } } After having that NPM generate-client script there, you can run it with: $ npm run generate-client frontend-app@1.0.0 generate-client /home/user/code/frontend-app > openapi --input http://localhost:8000/openapi.json --output ./src/client --client axios That command will generate code in ./src/client and will use axios (the frontend HTTP library) internally.","title":"Generate Client Code"},{"location":"advanced/generate-clients/#try-out-the-client-code","text":"Now you can import and use the client code, it could look like this, notice that you get autocompletion for the methods: You will also get autocompletion for the payload to send: Tip Notice the autocompletion for name and price , that was defined in the FastAPI application, in the Item model. You will have inline errors for the data that you send: The response object will also have autocompletion:","title":"Try Out the Client Code"},{"location":"advanced/generate-clients/#fastapi-app-with-tags","text":"In many cases your FastAPI app will be bigger, and you will probably use tags to separate different groups of path operations . For example, you could have a section for items and another section for users , and they could be separated by tags: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = List [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = list [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" }","title":"FastAPI App with Tags"},{"location":"advanced/generate-clients/#generate-a-typescript-client-with-tags","text":"If you generate a client for a FastAPI app using tags, it will normally also separate the client code based on the tags. This way you will be able to have things ordered and grouped correctly for the client code: In this case you have: ItemsService UsersService","title":"Generate a TypeScript Client with Tags"},{"location":"advanced/generate-clients/#client-method-names","text":"Right now the generated method names like createItemItemsPost don't look very clean: ItemsService . createItemItemsPost ({ name : \"Plumbus\" , price : 5 }) ...that's because the client generator uses the OpenAPI internal operation ID for each path operation . OpenAPI requires that each operation ID is unique across all the path operations , so FastAPI uses the function name , the path , and the HTTP method/operation to generate that operation ID, because that way it can make sure that the operation IDs are unique. But I'll show you how to improve that next. \ud83e\udd13","title":"Client Method Names"},{"location":"advanced/generate-clients/#custom-operation-ids-and-better-method-names","text":"You can modify the way these operation IDs are generated to make them simpler and have simpler method names in the clients. In this case you will have to ensure that each operation ID is unique in some other way. For example, you could make sure that each path operation has a tag, and then generate the operation ID based on the tag and the path operation name (the function name).","title":"Custom Operation IDs and Better Method Names"},{"location":"advanced/generate-clients/#custom-generate-unique-id-function","text":"FastAPI uses a unique ID for each path operation , it is used for the operation ID and also for the names of any needed custom models, for requests or responses. You can customize that function. It takes an APIRoute and outputs a string. For example, here it is using the first tag (you will probably have only one tag) and the path operation name (the function name). You can then pass that custom function to FastAPI as the generate_unique_id_function parameter: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from fastapi.routing import APIRoute from pydantic import BaseModel def custom_generate_unique_id ( route : APIRoute ): return f \" { route . tags [ 0 ] } - { route . name } \" app = FastAPI ( generate_unique_id_function = custom_generate_unique_id ) class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = List [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } from fastapi import FastAPI from fastapi.routing import APIRoute from pydantic import BaseModel def custom_generate_unique_id ( route : APIRoute ): return f \" { route . tags [ 0 ] } - { route . name } \" app = FastAPI ( generate_unique_id_function = custom_generate_unique_id ) class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = list [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" }","title":"Custom Generate Unique ID Function"},{"location":"advanced/generate-clients/#generate-a-typescript-client-with-custom-operation-ids","text":"Now if you generate the client again, you will see that it has the improved method names: As you see, the method names now have the tag and then the function name, now they don't include information from the URL path and the HTTP operation.","title":"Generate a TypeScript Client with Custom Operation IDs"},{"location":"advanced/generate-clients/#preprocess-the-openapi-specification-for-the-client-generator","text":"The generated code still has some duplicated information . We already know that this method is related to the items because that word is in the ItemsService (taken from the tag), but we still have the tag name prefixed in the method name too. \ud83d\ude15 We will probably still want to keep it for OpenAPI in general, as that will ensure that the operation IDs are unique . But for the generated client we could modify the OpenAPI operation IDs right before generating the clients, just to make those method names nicer and cleaner . We could download the OpenAPI JSON to a file openapi.json and then we could remove that prefixed tag with a script like this: import json from pathlib import Path file_path = Path ( \"./openapi.json\" ) openapi_content = json . loads ( file_path . read_text ()) for path_data in openapi_content [ \"paths\" ] . values (): for operation in path_data . values (): tag = operation [ \"tags\" ][ 0 ] operation_id = operation [ \"operationId\" ] to_remove = f \" { tag } -\" new_operation_id = operation_id [ len ( to_remove ) :] operation [ \"operationId\" ] = new_operation_id file_path . write_text ( json . dumps ( openapi_content )) With that, the operation IDs would be renamed from things like items-get_items to just get_items , that way the client generator can generate simpler method names.","title":"Preprocess the OpenAPI Specification for the Client Generator"},{"location":"advanced/generate-clients/#generate-a-typescript-client-with-the-preprocessed-openapi","text":"Now as the end result is in a file openapi.json , you would modify the package.json to use that local file, for example: { \"name\" : \"frontend-app\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"index.js\" , \"scripts\" : { \"generate-client\" : \"openapi --input ./openapi.json --output ./src/client --client axios\" }, \"author\" : \"\" , \"license\" : \"\" , \"devDependencies\" : { \"openapi-typescript-codegen\" : \"^0.20.1\" , \"typescript\" : \"^4.6.2\" } } After generating the new client, you would now have clean method names , with all the autocompletion , inline errors , etc:","title":"Generate a TypeScript Client with the Preprocessed OpenAPI"},{"location":"advanced/generate-clients/#benefits","text":"When using the automatically generated clients you would autocompletion for: Methods. Request payloads in the body, query parameters, etc. Response payloads. You would also have inline errors for everything. And whenever you update the backend code, and regenerate the frontend, it would have any new path operations available as methods, the old ones removed, and any other change would be reflected on the generated code. \ud83e\udd13 This also means that if something changed it will be reflected on the client code automatically. And if you build the client it will error out if you have any mismatch in the data used. So, you would detect many errors very early in the development cycle instead of having to wait for the errors to show up to your final users in production and then trying to debug where the problem is. \u2728","title":"Benefits"},{"location":"advanced/graphql/","text":"GraphQL \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . As FastAPI is based on the ASGI standard, it's very easy to integrate any GraphQL library also compatible with ASGI. You can combine normal FastAPI path operations with GraphQL on the same application. Tip GraphQL solves some very specific use cases. It has advantages and disadvantages when compared to common web APIs . Make sure you evaluate if the benefits for your use case compensate the drawbacks . \ud83e\udd13 GraphQL Libraries \u00b6 Here are some of the GraphQL libraries that have ASGI support. You could use them with FastAPI : Strawberry \ud83c\udf53 With docs for FastAPI Ariadne With docs for Starlette (that also apply to FastAPI) Tartiflette With Tartiflette ASGI to provide ASGI integration Graphene With starlette-graphene3 GraphQL with Strawberry \u00b6 If you need or want to work with GraphQL , Strawberry is the recommended library as it has the design closest to FastAPI's design, it's all based on type annotations . Depending on your use case, you might prefer to use a different library, but if you asked me, I would probably suggest you try Strawberry . Here's a small preview of how you could integrate Strawberry with FastAPI: import strawberry from fastapi import FastAPI from strawberry.asgi import GraphQL @strawberry . type class User : name : str age : int @strawberry . type class Query : @strawberry . field def user ( self ) -> User : return User ( name = \"Patrick\" , age = 100 ) schema = strawberry . Schema ( query = Query ) graphql_app = GraphQL ( schema ) app = FastAPI () app . add_route ( \"/graphql\" , graphql_app ) app . add_websocket_route ( \"/graphql\" , graphql_app ) You can learn more about Strawberry in the Strawberry documentation . And also the docs about Strawberry with FastAPI . Older GraphQLApp from Starlette \u00b6 Previous versions of Starlette included a GraphQLApp class to integrate with Graphene . It was deprecated from Starlette, but if you have code that used it, you can easily migrate to starlette-graphene3 , that covers the same use case and has an almost identical interface . Tip If you need GraphQL, I still would recommend you check out Strawberry , as it's based on type annotations instead of custom classes and types. Learn More \u00b6 You can learn more about GraphQL in the official GraphQL documentation . You can also read more about each those libraries described above in their links.","title":"GraphQL"},{"location":"advanced/graphql/#graphql","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . As FastAPI is based on the ASGI standard, it's very easy to integrate any GraphQL library also compatible with ASGI. You can combine normal FastAPI path operations with GraphQL on the same application. Tip GraphQL solves some very specific use cases. It has advantages and disadvantages when compared to common web APIs . Make sure you evaluate if the benefits for your use case compensate the drawbacks . \ud83e\udd13","title":"GraphQL"},{"location":"advanced/graphql/#graphql-libraries","text":"Here are some of the GraphQL libraries that have ASGI support. You could use them with FastAPI : Strawberry \ud83c\udf53 With docs for FastAPI Ariadne With docs for Starlette (that also apply to FastAPI) Tartiflette With Tartiflette ASGI to provide ASGI integration Graphene With starlette-graphene3","title":"GraphQL Libraries"},{"location":"advanced/graphql/#graphql-with-strawberry","text":"If you need or want to work with GraphQL , Strawberry is the recommended library as it has the design closest to FastAPI's design, it's all based on type annotations . Depending on your use case, you might prefer to use a different library, but if you asked me, I would probably suggest you try Strawberry . Here's a small preview of how you could integrate Strawberry with FastAPI: import strawberry from fastapi import FastAPI from strawberry.asgi import GraphQL @strawberry . type class User : name : str age : int @strawberry . type class Query : @strawberry . field def user ( self ) -> User : return User ( name = \"Patrick\" , age = 100 ) schema = strawberry . Schema ( query = Query ) graphql_app = GraphQL ( schema ) app = FastAPI () app . add_route ( \"/graphql\" , graphql_app ) app . add_websocket_route ( \"/graphql\" , graphql_app ) You can learn more about Strawberry in the Strawberry documentation . And also the docs about Strawberry with FastAPI .","title":"GraphQL with Strawberry"},{"location":"advanced/graphql/#older-graphqlapp-from-starlette","text":"Previous versions of Starlette included a GraphQLApp class to integrate with Graphene . It was deprecated from Starlette, but if you have code that used it, you can easily migrate to starlette-graphene3 , that covers the same use case and has an almost identical interface . Tip If you need GraphQL, I still would recommend you check out Strawberry , as it's based on type annotations instead of custom classes and types.","title":"Older GraphQLApp from Starlette"},{"location":"advanced/graphql/#learn-more","text":"You can learn more about GraphQL in the official GraphQL documentation . You can also read more about each those libraries described above in their links.","title":"Learn More"},{"location":"advanced/middleware/","text":"Advanced Middleware \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In the main tutorial you read how to add Custom Middleware to your application. And then you also read how to handle CORS with the CORSMiddleware . In this section we'll see how to use other middlewares. Adding ASGI middlewares \u00b6 As FastAPI is based on Starlette and implements the ASGI specification, you can use any ASGI middleware. A middleware doesn't have to be made for FastAPI or Starlette to work, as long as it follows the ASGI spec. In general, ASGI middlewares are classes that expect to receive an ASGI app as the first argument. So, in the documentation for third-party ASGI middlewares they will probably tell you to do something like: from unicorn import UnicornMiddleware app = SomeASGIApp () new_app = UnicornMiddleware ( app , some_config = \"rainbow\" ) But FastAPI (actually Starlette) provides a simpler way to do it that makes sure that the internal middlewares to handle server errors and custom exception handlers work properly. For that, you use app.add_middleware() (as in the example for CORS). from fastapi import FastAPI from unicorn import UnicornMiddleware app = FastAPI () app . add_middleware ( UnicornMiddleware , some_config = \"rainbow\" ) app.add_middleware() receives a middleware class as the first argument and any additional arguments to be passed to the middleware. Integrated middlewares \u00b6 FastAPI includes several middlewares for common use cases, we'll see next how to use them. Technical Details For the next examples, you could also use from starlette.middleware.something import SomethingMiddleware . FastAPI provides several middlewares in fastapi.middleware just as a convenience for you, the developer. But most of the available middlewares come directly from Starlette. HTTPSRedirectMiddleware \u00b6 Enforces that all incoming requests must either be https or wss . Any incoming requests to http or ws will be redirected to the secure scheme instead. from fastapi import FastAPI from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware app = FastAPI () app . add_middleware ( HTTPSRedirectMiddleware ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } TrustedHostMiddleware \u00b6 Enforces that all incoming requests have a correctly set Host header, in order to guard against HTTP Host Header attacks. from fastapi import FastAPI from fastapi.middleware.trustedhost import TrustedHostMiddleware app = FastAPI () app . add_middleware ( TrustedHostMiddleware , allowed_hosts = [ \"example.com\" , \"*.example.com\" ] ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } The following arguments are supported: allowed_hosts - A list of domain names that should be allowed as hostnames. Wildcard domains such as *.example.com are supported for matching subdomains to allow any hostname either use allowed_hosts=[\"*\"] or omit the middleware. If an incoming request does not validate correctly then a 400 response will be sent. GZipMiddleware \u00b6 Handles GZip responses for any request that includes \"gzip\" in the Accept-Encoding header. The middleware will handle both standard and streaming responses. from fastapi import FastAPI from fastapi.middleware.gzip import GZipMiddleware app = FastAPI () app . add_middleware ( GZipMiddleware , minimum_size = 1000 ) @app . get ( \"/\" ) async def main (): return \"somebigcontent\" The following arguments are supported: minimum_size - Do not GZip responses that are smaller than this minimum size in bytes. Defaults to 500 . Other middlewares \u00b6 There are many other ASGI middlewares. For example: Sentry Uvicorn's ProxyHeadersMiddleware MessagePack To see other available middlewares check Starlette's Middleware docs and the ASGI Awesome List .","title":"Advanced Middleware"},{"location":"advanced/middleware/#advanced-middleware","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In the main tutorial you read how to add Custom Middleware to your application. And then you also read how to handle CORS with the CORSMiddleware . In this section we'll see how to use other middlewares.","title":"Advanced Middleware"},{"location":"advanced/middleware/#adding-asgi-middlewares","text":"As FastAPI is based on Starlette and implements the ASGI specification, you can use any ASGI middleware. A middleware doesn't have to be made for FastAPI or Starlette to work, as long as it follows the ASGI spec. In general, ASGI middlewares are classes that expect to receive an ASGI app as the first argument. So, in the documentation for third-party ASGI middlewares they will probably tell you to do something like: from unicorn import UnicornMiddleware app = SomeASGIApp () new_app = UnicornMiddleware ( app , some_config = \"rainbow\" ) But FastAPI (actually Starlette) provides a simpler way to do it that makes sure that the internal middlewares to handle server errors and custom exception handlers work properly. For that, you use app.add_middleware() (as in the example for CORS). from fastapi import FastAPI from unicorn import UnicornMiddleware app = FastAPI () app . add_middleware ( UnicornMiddleware , some_config = \"rainbow\" ) app.add_middleware() receives a middleware class as the first argument and any additional arguments to be passed to the middleware.","title":"Adding ASGI middlewares"},{"location":"advanced/middleware/#integrated-middlewares","text":"FastAPI includes several middlewares for common use cases, we'll see next how to use them. Technical Details For the next examples, you could also use from starlette.middleware.something import SomethingMiddleware . FastAPI provides several middlewares in fastapi.middleware just as a convenience for you, the developer. But most of the available middlewares come directly from Starlette.","title":"Integrated middlewares"},{"location":"advanced/middleware/#httpsredirectmiddleware","text":"Enforces that all incoming requests must either be https or wss . Any incoming requests to http or ws will be redirected to the secure scheme instead. from fastapi import FastAPI from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware app = FastAPI () app . add_middleware ( HTTPSRedirectMiddleware ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" }","title":"HTTPSRedirectMiddleware"},{"location":"advanced/middleware/#trustedhostmiddleware","text":"Enforces that all incoming requests have a correctly set Host header, in order to guard against HTTP Host Header attacks. from fastapi import FastAPI from fastapi.middleware.trustedhost import TrustedHostMiddleware app = FastAPI () app . add_middleware ( TrustedHostMiddleware , allowed_hosts = [ \"example.com\" , \"*.example.com\" ] ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } The following arguments are supported: allowed_hosts - A list of domain names that should be allowed as hostnames. Wildcard domains such as *.example.com are supported for matching subdomains to allow any hostname either use allowed_hosts=[\"*\"] or omit the middleware. If an incoming request does not validate correctly then a 400 response will be sent.","title":"TrustedHostMiddleware"},{"location":"advanced/middleware/#gzipmiddleware","text":"Handles GZip responses for any request that includes \"gzip\" in the Accept-Encoding header. The middleware will handle both standard and streaming responses. from fastapi import FastAPI from fastapi.middleware.gzip import GZipMiddleware app = FastAPI () app . add_middleware ( GZipMiddleware , minimum_size = 1000 ) @app . get ( \"/\" ) async def main (): return \"somebigcontent\" The following arguments are supported: minimum_size - Do not GZip responses that are smaller than this minimum size in bytes. Defaults to 500 .","title":"GZipMiddleware"},{"location":"advanced/middleware/#other-middlewares","text":"There are many other ASGI middlewares. For example: Sentry Uvicorn's ProxyHeadersMiddleware MessagePack To see other available middlewares check Starlette's Middleware docs and the ASGI Awesome List .","title":"Other middlewares"},{"location":"advanced/nosql-databases/","text":"NoSQL (Distributed / Big Data) Databases \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI can also be integrated with any NoSQL . Here we'll see an example using Couchbase , a document based NoSQL database. You can adapt it to any other NoSQL database like: MongoDB Cassandra CouchDB ArangoDB ElasticSearch , etc. Tip There is an official project generator with FastAPI and Couchbase , all based on Docker , including a frontend and more tools: https://github.com/tiangolo/full-stack-fastapi-couchbase Import Couchbase components \u00b6 For now, don't pay attention to the rest, only the imports: from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user Define a constant to use as a \"document type\" \u00b6 We will use it later as a fixed field type in our documents. This is not required by Couchbase, but is a good practice that will help you afterwards. from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user Add a function to get a Bucket \u00b6 In Couchbase , a bucket is a set of documents, that can be of different types. They are generally all related to the same application. The analogy in the relational database world would be a \"database\" (a specific database, not the database server). The analogy in MongoDB would be a \"collection\". In the code, a Bucket represents the main entrypoint of communication with the database. This utility function will: Connect to a Couchbase cluster (that might be a single machine). Set defaults for timeouts. Authenticate in the cluster. Get a Bucket instance. Set defaults for timeouts. Return it. from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user Create Pydantic models \u00b6 As Couchbase \"documents\" are actually just \"JSON objects\", we can model them with Pydantic. User model \u00b6 First, let's create a User model: from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user We will use this model in our path operation function , so, we don't include in it the hashed_password . UserInDB model \u00b6 Now, let's create a UserInDB model. This will have the data that is actually stored in the database. We don't create it as a subclass of Pydantic's BaseModel but as a subclass of our own User , because it will have all the attributes in User plus a couple more: from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user Note Notice that we have a hashed_password and a type field that will be stored in the database. But it is not part of the general User model (the one we will return in the path operation ). Get the user \u00b6 Now create a function that will: Take a username. Generate a document ID from it. Get the document with that ID. Put the contents of the document in a UserInDB model. By creating a function that is only dedicated to getting your user from a username (or any other parameter) independent of your path operation function , you can more easily re-use it in multiple parts and also add unit tests for it: from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user f-strings \u00b6 If you are not familiar with the f\"userprofile::{username}\" , it is a Python \" f-string \". Any variable that is put inside of {} in an f-string will be expanded / injected in the string. dict unpacking \u00b6 If you are not familiar with the UserInDB(**result.value) , it is using dict \"unpacking\" . It will take the dict at result.value , and take each of its keys and values and pass them as key-values to UserInDB as keyword arguments. So, if the dict contains: { \"username\" : \"johndoe\" , \"hashed_password\" : \"some_hash\" , } It will be passed to UserInDB as: UserInDB ( username = \"johndoe\" , hashed_password = \"some_hash\" ) Create your FastAPI code \u00b6 Create the FastAPI app \u00b6 from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user Create the path operation function \u00b6 As our code is calling Couchbase and we are not using the experimental Python await support , we should declare our function with normal def instead of async def . Also, Couchbase recommends not using a single Bucket object in multiple \" thread s\", so, we can just get the bucket directly and pass it to our utility functions: from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user Recap \u00b6 You can integrate any third party NoSQL database, just using their standard packages. The same applies to any other external tool, system or API.","title":"NoSQL (Distributed / Big Data) Databases"},{"location":"advanced/nosql-databases/#nosql-distributed-big-data-databases","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI can also be integrated with any NoSQL . Here we'll see an example using Couchbase , a document based NoSQL database. You can adapt it to any other NoSQL database like: MongoDB Cassandra CouchDB ArangoDB ElasticSearch , etc. Tip There is an official project generator with FastAPI and Couchbase , all based on Docker , including a frontend and more tools: https://github.com/tiangolo/full-stack-fastapi-couchbase","title":"NoSQL (Distributed / Big Data) Databases"},{"location":"advanced/nosql-databases/#import-couchbase-components","text":"For now, don't pay attention to the rest, only the imports: from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"Import Couchbase components"},{"location":"advanced/nosql-databases/#define-a-constant-to-use-as-a-document-type","text":"We will use it later as a fixed field type in our documents. This is not required by Couchbase, but is a good practice that will help you afterwards. from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"Define a constant to use as a \"document type\""},{"location":"advanced/nosql-databases/#add-a-function-to-get-a-bucket","text":"In Couchbase , a bucket is a set of documents, that can be of different types. They are generally all related to the same application. The analogy in the relational database world would be a \"database\" (a specific database, not the database server). The analogy in MongoDB would be a \"collection\". In the code, a Bucket represents the main entrypoint of communication with the database. This utility function will: Connect to a Couchbase cluster (that might be a single machine). Set defaults for timeouts. Authenticate in the cluster. Get a Bucket instance. Set defaults for timeouts. Return it. from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"Add a function to get a Bucket"},{"location":"advanced/nosql-databases/#create-pydantic-models","text":"As Couchbase \"documents\" are actually just \"JSON objects\", we can model them with Pydantic.","title":"Create Pydantic models"},{"location":"advanced/nosql-databases/#user-model","text":"First, let's create a User model: from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user We will use this model in our path operation function , so, we don't include in it the hashed_password .","title":"User model"},{"location":"advanced/nosql-databases/#userindb-model","text":"Now, let's create a UserInDB model. This will have the data that is actually stored in the database. We don't create it as a subclass of Pydantic's BaseModel but as a subclass of our own User , because it will have all the attributes in User plus a couple more: from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user Note Notice that we have a hashed_password and a type field that will be stored in the database. But it is not part of the general User model (the one we will return in the path operation ).","title":"UserInDB model"},{"location":"advanced/nosql-databases/#get-the-user","text":"Now create a function that will: Take a username. Generate a document ID from it. Get the document with that ID. Put the contents of the document in a UserInDB model. By creating a function that is only dedicated to getting your user from a username (or any other parameter) independent of your path operation function , you can more easily re-use it in multiple parts and also add unit tests for it: from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"Get the user"},{"location":"advanced/nosql-databases/#f-strings","text":"If you are not familiar with the f\"userprofile::{username}\" , it is a Python \" f-string \". Any variable that is put inside of {} in an f-string will be expanded / injected in the string.","title":"f-strings"},{"location":"advanced/nosql-databases/#dict-unpacking","text":"If you are not familiar with the UserInDB(**result.value) , it is using dict \"unpacking\" . It will take the dict at result.value , and take each of its keys and values and pass them as key-values to UserInDB as keyword arguments. So, if the dict contains: { \"username\" : \"johndoe\" , \"hashed_password\" : \"some_hash\" , } It will be passed to UserInDB as: UserInDB ( username = \"johndoe\" , hashed_password = \"some_hash\" )","title":"dict unpacking"},{"location":"advanced/nosql-databases/#create-your-fastapi-code","text":"","title":"Create your FastAPI code"},{"location":"advanced/nosql-databases/#create-the-fastapi-app","text":"from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"Create the FastAPI app"},{"location":"advanced/nosql-databases/#create-the-path-operation-function","text":"As our code is calling Couchbase and we are not using the experimental Python await support , we should declare our function with normal def instead of async def . Also, Couchbase recommends not using a single Bucket object in multiple \" thread s\", so, we can just get the bucket directly and pass it to our utility functions: from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"Create the path operation function"},{"location":"advanced/nosql-databases/#recap","text":"You can integrate any third party NoSQL database, just using their standard packages. The same applies to any other external tool, system or API.","title":"Recap"},{"location":"advanced/openapi-callbacks/","text":"OpenAPI Callbacks \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You could create an API with a path operation that could trigger a request to an external API created by someone else (probably the same developer that would be using your API). The process that happens when your API app calls the external API is named a \"callback\". Because the software that the external developer wrote sends a request to your API and then your API calls back , sending a request to an external API (that was probably created by the same developer). In this case, you could want to document how that external API should look like. What path operation it should have, what body it should expect, what response it should return, etc. An app with callbacks \u00b6 Let's see all this with an example. Imagine you develop an app that allows creating invoices. These invoices will have an id , title (optional), customer , and total . The user of your API (an external developer) will create an invoice in your API with a POST request. Then your API will (let's imagine): Send the invoice to some customer of the external developer. Collect the money. Send a notification back to the API user (the external developer). This will be done by sending a POST request (from your API ) to some external API provided by that external developer (this is the \"callback\"). The normal FastAPI app \u00b6 Let's first see how the normal API app would look like before adding the callback. It will have a path operation that will receive an Invoice body, and a query parameter callback_url that will contain the URL for the callback. This part is pretty normal, most of the code is probably already familiar to you: from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } Tip The callback_url query parameter uses a Pydantic URL type. The only new thing is the callbacks=messages_callback_router.routes as an argument to the path operation decorator . We'll see what that is next. Documenting the callback \u00b6 The actual callback code will depend heavily on your own API app. And it will probably vary a lot from one app to the next. It could be just one or two lines of code, like: callback_url = \"https://example.com/api/v1/invoices/events/\" requests . post ( callback_url , json = { \"description\" : \"Invoice paid\" , \"paid\" : True }) But possibly the most important part of the callback is making sure that your API user (the external developer) implements the external API correctly, according to the data that your API is going to send in the request body of the callback, etc. So, what we will do next is add the code to document how that external API should look like to receive the callback from your API . That documentation will show up in the Swagger UI at /docs in your API, and it will let external developers know how to build the external API . This example doesn't implement the callback itself (that could be just a line of code), only the documentation part. Tip The actual callback is just an HTTP request. When implementing the callback yourself, you could use something like HTTPX or Requests . Write the callback documentation code \u00b6 This code won't be executed in your app, we only need it to document how that external API should look like. But, you already know how to easily create automatic documentation for an API with FastAPI . So we are going to use that same knowledge to document how the external API should look like... by creating the path operation(s) that the external API should implement (the ones your API will call). Tip When writing the code to document a callback, it might be useful to imagine that you are that external developer . And that you are currently implementing the external API , not your API . Temporarily adopting this point of view (of the external developer ) can help you feel like it's more obvious where to put the parameters, the Pydantic model for the body, for the response, etc. for that external API . Create a callback APIRouter \u00b6 First create a new APIRouter that will contain one or more callbacks. from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } Create the callback path operation \u00b6 To create the callback path operation use the same APIRouter you created above. It should look just like a normal FastAPI path operation : It should probably have a declaration of the body it should receive, e.g. body: InvoiceEvent . And it could also have a declaration of the response it should return, e.g. response_model=InvoiceEventReceived . from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } There are 2 main differences from a normal path operation : It doesn't need to have any actual code, because your app will never call this code. It's only used to document the external API . So, the function could just have pass . The path can contain an OpenAPI 3 expression (see more below) where it can use variables with parameters and parts of the original request sent to your API . The callback path expression \u00b6 The callback path can have an OpenAPI 3 expression that can contain parts of the original request sent to your API . In this case, it's the str : \"{$callback_url}/invoices/{$request.body.id}\" So, if your API user (the external developer) sends a request to your API to: https://yourapi.com/invoices/?callback_url=https://www.external.org/events with a JSON body of: { \"id\" : \"2expen51ve\" , \"customer\" : \"Mr. Richie Rich\" , \"total\" : \"9999\" } Then your API will process the invoice, and at some point later, send a callback request to the callback_url (the external API ): https://www.external.org/events/invoices/2expen51ve with a JSON body containing something like: { \"description\" : \"Payment celebration\" , \"paid\" : true } and it would expect a response from that external API with a JSON body like: { \"ok\" : true } Tip Notice how the callback URL used contains the URL received as a query parameter in callback_url ( https://www.external.org/events ) and also the invoice id from inside of the JSON body ( 2expen51ve ). Add the callback router \u00b6 At this point you have the callback path operation(s) needed (the one(s) that the external developer should implement in the external API ) in the callback router you created above. Now use the parameter callbacks in your API's path operation decorator to pass the attribute .routes (that's actually just a list of routes/ path operations ) from that callback router: from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } Tip Notice that you are not passing the router itself ( invoices_callback_router ) to callback= , but the attribute .routes , as in invoices_callback_router.routes . Check the docs \u00b6 Now you can start your app with Uvicorn and go to http://127.0.0.1:8000/docs . You will see your docs including a \"Callback\" section for your path operation that shows how the external API should look like:","title":"OpenAPI Callbacks"},{"location":"advanced/openapi-callbacks/#openapi-callbacks","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You could create an API with a path operation that could trigger a request to an external API created by someone else (probably the same developer that would be using your API). The process that happens when your API app calls the external API is named a \"callback\". Because the software that the external developer wrote sends a request to your API and then your API calls back , sending a request to an external API (that was probably created by the same developer). In this case, you could want to document how that external API should look like. What path operation it should have, what body it should expect, what response it should return, etc.","title":"OpenAPI Callbacks"},{"location":"advanced/openapi-callbacks/#an-app-with-callbacks","text":"Let's see all this with an example. Imagine you develop an app that allows creating invoices. These invoices will have an id , title (optional), customer , and total . The user of your API (an external developer) will create an invoice in your API with a POST request. Then your API will (let's imagine): Send the invoice to some customer of the external developer. Collect the money. Send a notification back to the API user (the external developer). This will be done by sending a POST request (from your API ) to some external API provided by that external developer (this is the \"callback\").","title":"An app with callbacks"},{"location":"advanced/openapi-callbacks/#the-normal-fastapi-app","text":"Let's first see how the normal API app would look like before adding the callback. It will have a path operation that will receive an Invoice body, and a query parameter callback_url that will contain the URL for the callback. This part is pretty normal, most of the code is probably already familiar to you: from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } Tip The callback_url query parameter uses a Pydantic URL type. The only new thing is the callbacks=messages_callback_router.routes as an argument to the path operation decorator . We'll see what that is next.","title":"The normal FastAPI app"},{"location":"advanced/openapi-callbacks/#documenting-the-callback","text":"The actual callback code will depend heavily on your own API app. And it will probably vary a lot from one app to the next. It could be just one or two lines of code, like: callback_url = \"https://example.com/api/v1/invoices/events/\" requests . post ( callback_url , json = { \"description\" : \"Invoice paid\" , \"paid\" : True }) But possibly the most important part of the callback is making sure that your API user (the external developer) implements the external API correctly, according to the data that your API is going to send in the request body of the callback, etc. So, what we will do next is add the code to document how that external API should look like to receive the callback from your API . That documentation will show up in the Swagger UI at /docs in your API, and it will let external developers know how to build the external API . This example doesn't implement the callback itself (that could be just a line of code), only the documentation part. Tip The actual callback is just an HTTP request. When implementing the callback yourself, you could use something like HTTPX or Requests .","title":"Documenting the callback"},{"location":"advanced/openapi-callbacks/#write-the-callback-documentation-code","text":"This code won't be executed in your app, we only need it to document how that external API should look like. But, you already know how to easily create automatic documentation for an API with FastAPI . So we are going to use that same knowledge to document how the external API should look like... by creating the path operation(s) that the external API should implement (the ones your API will call). Tip When writing the code to document a callback, it might be useful to imagine that you are that external developer . And that you are currently implementing the external API , not your API . Temporarily adopting this point of view (of the external developer ) can help you feel like it's more obvious where to put the parameters, the Pydantic model for the body, for the response, etc. for that external API .","title":"Write the callback documentation code"},{"location":"advanced/openapi-callbacks/#create-a-callback-apirouter","text":"First create a new APIRouter that will contain one or more callbacks. from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" }","title":"Create a callback APIRouter"},{"location":"advanced/openapi-callbacks/#create-the-callback-path-operation","text":"To create the callback path operation use the same APIRouter you created above. It should look just like a normal FastAPI path operation : It should probably have a declaration of the body it should receive, e.g. body: InvoiceEvent . And it could also have a declaration of the response it should return, e.g. response_model=InvoiceEventReceived . from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } There are 2 main differences from a normal path operation : It doesn't need to have any actual code, because your app will never call this code. It's only used to document the external API . So, the function could just have pass . The path can contain an OpenAPI 3 expression (see more below) where it can use variables with parameters and parts of the original request sent to your API .","title":"Create the callback path operation"},{"location":"advanced/openapi-callbacks/#the-callback-path-expression","text":"The callback path can have an OpenAPI 3 expression that can contain parts of the original request sent to your API . In this case, it's the str : \"{$callback_url}/invoices/{$request.body.id}\" So, if your API user (the external developer) sends a request to your API to: https://yourapi.com/invoices/?callback_url=https://www.external.org/events with a JSON body of: { \"id\" : \"2expen51ve\" , \"customer\" : \"Mr. Richie Rich\" , \"total\" : \"9999\" } Then your API will process the invoice, and at some point later, send a callback request to the callback_url (the external API ): https://www.external.org/events/invoices/2expen51ve with a JSON body containing something like: { \"description\" : \"Payment celebration\" , \"paid\" : true } and it would expect a response from that external API with a JSON body like: { \"ok\" : true } Tip Notice how the callback URL used contains the URL received as a query parameter in callback_url ( https://www.external.org/events ) and also the invoice id from inside of the JSON body ( 2expen51ve ).","title":"The callback path expression"},{"location":"advanced/openapi-callbacks/#add-the-callback-router","text":"At this point you have the callback path operation(s) needed (the one(s) that the external developer should implement in the external API ) in the callback router you created above. Now use the parameter callbacks in your API's path operation decorator to pass the attribute .routes (that's actually just a list of routes/ path operations ) from that callback router: from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } Tip Notice that you are not passing the router itself ( invoices_callback_router ) to callback= , but the attribute .routes , as in invoices_callback_router.routes .","title":"Add the callback router"},{"location":"advanced/openapi-callbacks/#check-the-docs","text":"Now you can start your app with Uvicorn and go to http://127.0.0.1:8000/docs . You will see your docs including a \"Callback\" section for your path operation that shows how the external API should look like:","title":"Check the docs"},{"location":"advanced/path-operation-advanced-configuration/","text":"Path Operation Advanced Configuration \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . OpenAPI operationId \u00b6 Warning If you are not an \"expert\" in OpenAPI, you probably don't need this. You can set the OpenAPI operationId to be used in your path operation with the parameter operation_id . You would have to make sure that it is unique for each operation. from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , operation_id = \"some_specific_id_you_define\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] Using the path operation function name as the operationId \u00b6 If you want to use your APIs' function names as operationId s, you can iterate over all of them and override each path operation's operation_id using their APIRoute.name . You should do it after adding all your path operations . from fastapi import FastAPI from fastapi.routing import APIRoute app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] def use_route_names_as_operation_ids ( app : FastAPI ) -> None : \"\"\" Simplify operation IDs so that generated API clients have simpler function names. Should be called only after all routes have been added. \"\"\" for route in app . routes : if isinstance ( route , APIRoute ): route . operation_id = route . name # in this case, 'read_items' use_route_names_as_operation_ids ( app ) Tip If you manually call app.openapi() , you should update the operationId s before that. Warning If you do this, you have to make sure each one of your path operation functions has a unique name. Even if they are in different modules (Python files). Exclude from OpenAPI \u00b6 To exclude a path operation from the generated OpenAPI schema (and thus, from the automatic documentation systems), use the parameter include_in_schema and set it to False : from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , include_in_schema = False ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] Advanced description from docstring \u00b6 You can limit the lines used from the docstring of a path operation function for OpenAPI. Adding an \\f (an escaped \"form feed\" character) causes FastAPI to truncate the output used for OpenAPI at this point. It won't show up in the documentation, but other tools (such as Sphinx) will be able to use the rest. from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \\f :param item: User input. \"\"\" return item Additional Responses \u00b6 You probably have seen how to declare the response_model and status_code for a path operation . That defines the metadata about the main response of a path operation . You can also declare additional responses with their models, status codes, etc. There's a whole chapter here in the documentation about it, you can read it at Additional Responses in OpenAPI . OpenAPI Extra \u00b6 When you declare a path operation in your application, FastAPI automatically generates the relevant metadata about that path operation to be included in the OpenAPI schema. Technical details In the OpenAPI specification it is called the Operation Object . It has all the information about the path operation and is used to generate the automatic documentation. It includes the tags , parameters , requestBody , responses , etc. This path operation -specific OpenAPI schema is normally generated automatically by FastAPI , but you can also extend it. Tip This is a low level extension point. If you only need to declare additional responses, a more convenient way to do it is with Additional Responses in OpenAPI . You can extend the OpenAPI schema for a path operation using the parameter openapi_extra . OpenAPI Extensions \u00b6 This openapi_extra can be helpful, for example, to declare OpenAPI Extensions : from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , openapi_extra = { \"x-aperture-labs-portal\" : \"blue\" }) async def read_items (): return [{ \"item_id\" : \"portal-gun\" }] If you open the automatic API docs, your extension will show up at the bottom of the specific path operation . And if you see the resulting OpenAPI (at /openapi.json in your API), you will see your extension as part of the specific path operation too: { \"openapi\" : \"3.0.2\" , \"info\" : { \"title\" : \"FastAPI\" , \"version\" : \"0.1.0\" }, \"paths\" : { \"/items/\" : { \"get\" : { \"summary\" : \"Read Items\" , \"operationId\" : \"read_items_items__get\" , \"responses\" : { \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { \"schema\" : {} } } } }, \"x-aperture-labs-portal\" : \"blue\" } } } } Custom OpenAPI path operation schema \u00b6 The dictionary in openapi_extra will be deeply merged with the automatically generated OpenAPI schema for the path operation . So, you could add additional data to the automatically generated schema. For example, you could decide to read and validate the request with your own code, without using the automatic features of FastAPI with Pydantic, but you could still want to define the request in the OpenAPI schema. You could do that with openapi_extra : from fastapi import FastAPI , Request app = FastAPI () def magic_data_reader ( raw_body : bytes ): return { \"size\" : len ( raw_body ), \"content\" : { \"name\" : \"Maaaagic\" , \"price\" : 42 , \"description\" : \"Just kiddin', no magic here. \u2728\" , }, } @app . post ( \"/items/\" , openapi_extra = { \"requestBody\" : { \"content\" : { \"application/json\" : { \"schema\" : { \"required\" : [ \"name\" , \"price\" ], \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" }, \"price\" : { \"type\" : \"number\" }, \"description\" : { \"type\" : \"string\" }, }, } } }, \"required\" : True , }, }, ) async def create_item ( request : Request ): raw_body = await request . body () data = magic_data_reader ( raw_body ) return data In this example, we didn't declare any Pydantic model. In fact, the request body is not even parsed as JSON, it is read directly as bytes , and the function magic_data_reader() would be in charge of parsing it in some way. Nevertheless, we can declare the expected schema for the request body. Custom OpenAPI content type \u00b6 Using this same trick, you could use a Pydantic model to define the JSON Schema that is then included in the custom OpenAPI schema section for the path operation . And you could do this even if the data type in the request is not JSON. For example, in this application we don't use FastAPI's integrated functionality to extract the JSON Schema from Pydantic models nor the automatic validation for JSON. In fact, we are declaring the request content type as YAML, not JSON: from typing import List import yaml from fastapi import FastAPI , HTTPException , Request from pydantic import BaseModel , ValidationError app = FastAPI () class Item ( BaseModel ): name : str tags : List [ str ] @app . post ( \"/items/\" , openapi_extra = { \"requestBody\" : { \"content\" : { \"application/x-yaml\" : { \"schema\" : Item . schema ()}}, \"required\" : True , }, }, ) async def create_item ( request : Request ): raw_body = await request . body () try : data = yaml . safe_load ( raw_body ) except yaml . YAMLError : raise HTTPException ( status_code = 422 , detail = \"Invalid YAML\" ) try : item = Item . parse_obj ( data ) except ValidationError as e : raise HTTPException ( status_code = 422 , detail = e . errors ()) return item Nevertheless, although we are not using the default integrated functionality, we are still using a Pydantic model to manually generate the JSON Schema for the data that we want to receive in YAML. Then we use the request directly, and extract the body as bytes . This means that FastAPI won't even try to parse the request payload as JSON. And then in our code, we parse that YAML content directly, and then we are again using the same Pydantic model to validate the YAML content: from typing import List import yaml from fastapi import FastAPI , HTTPException , Request from pydantic import BaseModel , ValidationError app = FastAPI () class Item ( BaseModel ): name : str tags : List [ str ] @app . post ( \"/items/\" , openapi_extra = { \"requestBody\" : { \"content\" : { \"application/x-yaml\" : { \"schema\" : Item . schema ()}}, \"required\" : True , }, }, ) async def create_item ( request : Request ): raw_body = await request . body () try : data = yaml . safe_load ( raw_body ) except yaml . YAMLError : raise HTTPException ( status_code = 422 , detail = \"Invalid YAML\" ) try : item = Item . parse_obj ( data ) except ValidationError as e : raise HTTPException ( status_code = 422 , detail = e . errors ()) return item Tip Here we re-use the same Pydantic model. But the same way, we could have validated it in some other way.","title":"Path Operation Advanced Configuration"},{"location":"advanced/path-operation-advanced-configuration/#path-operation-advanced-configuration","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing .","title":"Path Operation Advanced Configuration"},{"location":"advanced/path-operation-advanced-configuration/#openapi-operationid","text":"Warning If you are not an \"expert\" in OpenAPI, you probably don't need this. You can set the OpenAPI operationId to be used in your path operation with the parameter operation_id . You would have to make sure that it is unique for each operation. from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , operation_id = \"some_specific_id_you_define\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }]","title":"OpenAPI operationId"},{"location":"advanced/path-operation-advanced-configuration/#using-the-path-operation-function-name-as-the-operationid","text":"If you want to use your APIs' function names as operationId s, you can iterate over all of them and override each path operation's operation_id using their APIRoute.name . You should do it after adding all your path operations . from fastapi import FastAPI from fastapi.routing import APIRoute app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] def use_route_names_as_operation_ids ( app : FastAPI ) -> None : \"\"\" Simplify operation IDs so that generated API clients have simpler function names. Should be called only after all routes have been added. \"\"\" for route in app . routes : if isinstance ( route , APIRoute ): route . operation_id = route . name # in this case, 'read_items' use_route_names_as_operation_ids ( app ) Tip If you manually call app.openapi() , you should update the operationId s before that. Warning If you do this, you have to make sure each one of your path operation functions has a unique name. Even if they are in different modules (Python files).","title":"Using the path operation function name as the operationId"},{"location":"advanced/path-operation-advanced-configuration/#exclude-from-openapi","text":"To exclude a path operation from the generated OpenAPI schema (and thus, from the automatic documentation systems), use the parameter include_in_schema and set it to False : from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , include_in_schema = False ) async def read_items (): return [{ \"item_id\" : \"Foo\" }]","title":"Exclude from OpenAPI"},{"location":"advanced/path-operation-advanced-configuration/#advanced-description-from-docstring","text":"You can limit the lines used from the docstring of a path operation function for OpenAPI. Adding an \\f (an escaped \"form feed\" character) causes FastAPI to truncate the output used for OpenAPI at this point. It won't show up in the documentation, but other tools (such as Sphinx) will be able to use the rest. from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \\f :param item: User input. \"\"\" return item","title":"Advanced description from docstring"},{"location":"advanced/path-operation-advanced-configuration/#additional-responses","text":"You probably have seen how to declare the response_model and status_code for a path operation . That defines the metadata about the main response of a path operation . You can also declare additional responses with their models, status codes, etc. There's a whole chapter here in the documentation about it, you can read it at Additional Responses in OpenAPI .","title":"Additional Responses"},{"location":"advanced/path-operation-advanced-configuration/#openapi-extra","text":"When you declare a path operation in your application, FastAPI automatically generates the relevant metadata about that path operation to be included in the OpenAPI schema. Technical details In the OpenAPI specification it is called the Operation Object . It has all the information about the path operation and is used to generate the automatic documentation. It includes the tags , parameters , requestBody , responses , etc. This path operation -specific OpenAPI schema is normally generated automatically by FastAPI , but you can also extend it. Tip This is a low level extension point. If you only need to declare additional responses, a more convenient way to do it is with Additional Responses in OpenAPI . You can extend the OpenAPI schema for a path operation using the parameter openapi_extra .","title":"OpenAPI Extra"},{"location":"advanced/path-operation-advanced-configuration/#openapi-extensions","text":"This openapi_extra can be helpful, for example, to declare OpenAPI Extensions : from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , openapi_extra = { \"x-aperture-labs-portal\" : \"blue\" }) async def read_items (): return [{ \"item_id\" : \"portal-gun\" }] If you open the automatic API docs, your extension will show up at the bottom of the specific path operation . And if you see the resulting OpenAPI (at /openapi.json in your API), you will see your extension as part of the specific path operation too: { \"openapi\" : \"3.0.2\" , \"info\" : { \"title\" : \"FastAPI\" , \"version\" : \"0.1.0\" }, \"paths\" : { \"/items/\" : { \"get\" : { \"summary\" : \"Read Items\" , \"operationId\" : \"read_items_items__get\" , \"responses\" : { \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { \"schema\" : {} } } } }, \"x-aperture-labs-portal\" : \"blue\" } } } }","title":"OpenAPI Extensions"},{"location":"advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema","text":"The dictionary in openapi_extra will be deeply merged with the automatically generated OpenAPI schema for the path operation . So, you could add additional data to the automatically generated schema. For example, you could decide to read and validate the request with your own code, without using the automatic features of FastAPI with Pydantic, but you could still want to define the request in the OpenAPI schema. You could do that with openapi_extra : from fastapi import FastAPI , Request app = FastAPI () def magic_data_reader ( raw_body : bytes ): return { \"size\" : len ( raw_body ), \"content\" : { \"name\" : \"Maaaagic\" , \"price\" : 42 , \"description\" : \"Just kiddin', no magic here. \u2728\" , }, } @app . post ( \"/items/\" , openapi_extra = { \"requestBody\" : { \"content\" : { \"application/json\" : { \"schema\" : { \"required\" : [ \"name\" , \"price\" ], \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" }, \"price\" : { \"type\" : \"number\" }, \"description\" : { \"type\" : \"string\" }, }, } } }, \"required\" : True , }, }, ) async def create_item ( request : Request ): raw_body = await request . body () data = magic_data_reader ( raw_body ) return data In this example, we didn't declare any Pydantic model. In fact, the request body is not even parsed as JSON, it is read directly as bytes , and the function magic_data_reader() would be in charge of parsing it in some way. Nevertheless, we can declare the expected schema for the request body.","title":"Custom OpenAPI path operation schema"},{"location":"advanced/path-operation-advanced-configuration/#custom-openapi-content-type","text":"Using this same trick, you could use a Pydantic model to define the JSON Schema that is then included in the custom OpenAPI schema section for the path operation . And you could do this even if the data type in the request is not JSON. For example, in this application we don't use FastAPI's integrated functionality to extract the JSON Schema from Pydantic models nor the automatic validation for JSON. In fact, we are declaring the request content type as YAML, not JSON: from typing import List import yaml from fastapi import FastAPI , HTTPException , Request from pydantic import BaseModel , ValidationError app = FastAPI () class Item ( BaseModel ): name : str tags : List [ str ] @app . post ( \"/items/\" , openapi_extra = { \"requestBody\" : { \"content\" : { \"application/x-yaml\" : { \"schema\" : Item . schema ()}}, \"required\" : True , }, }, ) async def create_item ( request : Request ): raw_body = await request . body () try : data = yaml . safe_load ( raw_body ) except yaml . YAMLError : raise HTTPException ( status_code = 422 , detail = \"Invalid YAML\" ) try : item = Item . parse_obj ( data ) except ValidationError as e : raise HTTPException ( status_code = 422 , detail = e . errors ()) return item Nevertheless, although we are not using the default integrated functionality, we are still using a Pydantic model to manually generate the JSON Schema for the data that we want to receive in YAML. Then we use the request directly, and extract the body as bytes . This means that FastAPI won't even try to parse the request payload as JSON. And then in our code, we parse that YAML content directly, and then we are again using the same Pydantic model to validate the YAML content: from typing import List import yaml from fastapi import FastAPI , HTTPException , Request from pydantic import BaseModel , ValidationError app = FastAPI () class Item ( BaseModel ): name : str tags : List [ str ] @app . post ( \"/items/\" , openapi_extra = { \"requestBody\" : { \"content\" : { \"application/x-yaml\" : { \"schema\" : Item . schema ()}}, \"required\" : True , }, }, ) async def create_item ( request : Request ): raw_body = await request . body () try : data = yaml . safe_load ( raw_body ) except yaml . YAMLError : raise HTTPException ( status_code = 422 , detail = \"Invalid YAML\" ) try : item = Item . parse_obj ( data ) except ValidationError as e : raise HTTPException ( status_code = 422 , detail = e . errors ()) return item Tip Here we re-use the same Pydantic model. But the same way, we could have validated it in some other way.","title":"Custom OpenAPI content type"},{"location":"advanced/response-change-status-code/","text":"Response - Change Status Code \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You probably read before that you can set a default Response Status Code . But in some cases you need to return a different status code than the default. Use case \u00b6 For example, imagine that you want to return an HTTP status code of \"OK\" 200 by default. But if the data didn't exist, you want to create it, and return an HTTP status code of \"CREATED\" 201 . But you still want to be able to filter and convert the data you return with a response_model . For those cases, you can use a Response parameter. Use a Response parameter \u00b6 You can declare a parameter of type Response in your path operation function (as you can do for cookies and headers). And then you can set the status_code in that temporal response object. from fastapi import FastAPI , Response , status app = FastAPI () tasks = { \"foo\" : \"Listen to the Bar Fighters\" } @app . put ( \"/get-or-create-task/ {task_id} \" , status_code = 200 ) def get_or_create_task ( task_id : str , response : Response ): if task_id not in tasks : tasks [ task_id ] = \"This didn't exist before\" response . status_code = status . HTTP_201_CREATED return tasks [ task_id ] And then you can return any object you need, as you normally would (a dict , a database model, etc). And if you declared a response_model , it will still be used to filter and convert the object you returned. FastAPI will use that temporal response to extract the status code (also cookies and headers), and will put them in the final response that contains the value you returned, filtered by any response_model . You can also declare the Response parameter in dependencies, and set the status code in them. But have in mind that the last one to be set will win.","title":"Response - Change Status Code"},{"location":"advanced/response-change-status-code/#response-change-status-code","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You probably read before that you can set a default Response Status Code . But in some cases you need to return a different status code than the default.","title":"Response - Change Status Code"},{"location":"advanced/response-change-status-code/#use-case","text":"For example, imagine that you want to return an HTTP status code of \"OK\" 200 by default. But if the data didn't exist, you want to create it, and return an HTTP status code of \"CREATED\" 201 . But you still want to be able to filter and convert the data you return with a response_model . For those cases, you can use a Response parameter.","title":"Use case"},{"location":"advanced/response-change-status-code/#use-a-response-parameter","text":"You can declare a parameter of type Response in your path operation function (as you can do for cookies and headers). And then you can set the status_code in that temporal response object. from fastapi import FastAPI , Response , status app = FastAPI () tasks = { \"foo\" : \"Listen to the Bar Fighters\" } @app . put ( \"/get-or-create-task/ {task_id} \" , status_code = 200 ) def get_or_create_task ( task_id : str , response : Response ): if task_id not in tasks : tasks [ task_id ] = \"This didn't exist before\" response . status_code = status . HTTP_201_CREATED return tasks [ task_id ] And then you can return any object you need, as you normally would (a dict , a database model, etc). And if you declared a response_model , it will still be used to filter and convert the object you returned. FastAPI will use that temporal response to extract the status code (also cookies and headers), and will put them in the final response that contains the value you returned, filtered by any response_model . You can also declare the Response parameter in dependencies, and set the status code in them. But have in mind that the last one to be set will win.","title":"Use a Response parameter"},{"location":"advanced/response-cookies/","text":"Response Cookies \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Use a Response parameter \u00b6 You can declare a parameter of type Response in your path operation function . And then you can set cookies in that temporal response object. from fastapi import FastAPI , Response app = FastAPI () @app . post ( \"/cookie-and-object/\" ) def create_cookie ( response : Response ): response . set_cookie ( key = \"fakesession\" , value = \"fake-cookie-session-value\" ) return { \"message\" : \"Come to the dark side, we have cookies\" } And then you can return any object you need, as you normally would (a dict , a database model, etc). And if you declared a response_model , it will still be used to filter and convert the object you returned. FastAPI will use that temporal response to extract the cookies (also headers and status code), and will put them in the final response that contains the value you returned, filtered by any response_model . You can also declare the Response parameter in dependencies, and set cookies (and headers) in them. Return a Response directly \u00b6 You can also create cookies when returning a Response directly in your code. To do that, you can create a response as described in Return a Response Directly . Then set Cookies in it, and then return it: from fastapi import FastAPI from fastapi.responses import JSONResponse app = FastAPI () @app . post ( \"/cookie/\" ) def create_cookie (): content = { \"message\" : \"Come to the dark side, we have cookies\" } response = JSONResponse ( content = content ) response . set_cookie ( key = \"fakesession\" , value = \"fake-cookie-session-value\" ) return response Tip Have in mind that if you return a response directly instead of using the Response parameter, FastAPI will return it directly. So, you will have to make sure your data is of the correct type. E.g. it is compatible with JSON, if you are returning a JSONResponse . And also that you are not sending any data that should have been filtered by a response_model . More info \u00b6 Technical Details You could also use from starlette.responses import Response or from starlette.responses import JSONResponse . FastAPI provides the same starlette.responses as fastapi.responses just as a convenience for you, the developer. But most of the available responses come directly from Starlette. And as the Response can be used frequently to set headers and cookies, FastAPI also provides it at fastapi.Response . To see all the available parameters and options, check the documentation in Starlette .","title":"Response Cookies"},{"location":"advanced/response-cookies/#response-cookies","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing .","title":"Response Cookies"},{"location":"advanced/response-cookies/#use-a-response-parameter","text":"You can declare a parameter of type Response in your path operation function . And then you can set cookies in that temporal response object. from fastapi import FastAPI , Response app = FastAPI () @app . post ( \"/cookie-and-object/\" ) def create_cookie ( response : Response ): response . set_cookie ( key = \"fakesession\" , value = \"fake-cookie-session-value\" ) return { \"message\" : \"Come to the dark side, we have cookies\" } And then you can return any object you need, as you normally would (a dict , a database model, etc). And if you declared a response_model , it will still be used to filter and convert the object you returned. FastAPI will use that temporal response to extract the cookies (also headers and status code), and will put them in the final response that contains the value you returned, filtered by any response_model . You can also declare the Response parameter in dependencies, and set cookies (and headers) in them.","title":"Use a Response parameter"},{"location":"advanced/response-cookies/#return-a-response-directly","text":"You can also create cookies when returning a Response directly in your code. To do that, you can create a response as described in Return a Response Directly . Then set Cookies in it, and then return it: from fastapi import FastAPI from fastapi.responses import JSONResponse app = FastAPI () @app . post ( \"/cookie/\" ) def create_cookie (): content = { \"message\" : \"Come to the dark side, we have cookies\" } response = JSONResponse ( content = content ) response . set_cookie ( key = \"fakesession\" , value = \"fake-cookie-session-value\" ) return response Tip Have in mind that if you return a response directly instead of using the Response parameter, FastAPI will return it directly. So, you will have to make sure your data is of the correct type. E.g. it is compatible with JSON, if you are returning a JSONResponse . And also that you are not sending any data that should have been filtered by a response_model .","title":"Return a Response directly"},{"location":"advanced/response-cookies/#more-info","text":"Technical Details You could also use from starlette.responses import Response or from starlette.responses import JSONResponse . FastAPI provides the same starlette.responses as fastapi.responses just as a convenience for you, the developer. But most of the available responses come directly from Starlette. And as the Response can be used frequently to set headers and cookies, FastAPI also provides it at fastapi.Response . To see all the available parameters and options, check the documentation in Starlette .","title":"More info"},{"location":"advanced/response-directly/","text":"Return a Response Directly \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . When you create a FastAPI path operation you can normally return any data from it: a dict , a list , a Pydantic model, a database model, etc. By default, FastAPI would automatically convert that return value to JSON using the jsonable_encoder explained in JSON Compatible Encoder . Then, behind the scenes, it would put that JSON-compatible data (e.g. a dict ) inside of a JSONResponse that would be used to send the response to the client. But you can return a JSONResponse directly from your path operations . It might be useful, for example, to return custom headers or cookies. Return a Response \u00b6 In fact, you can return any Response or any sub-class of it. Tip JSONResponse itself is a sub-class of Response . And when you return a Response , FastAPI will pass it directly. It won't do any data conversion with Pydantic models, it won't convert the contents to any type, etc. This gives you a lot of flexibility. You can return any data type, override any data declaration or validation, etc. Using the jsonable_encoder in a Response \u00b6 Because FastAPI doesn't do any change to a Response you return, you have to make sure it's contents are ready for it. For example, you cannot put a Pydantic model in a JSONResponse without first converting it to a dict with all the data types (like datetime , UUID , etc) converted to JSON-compatible types. For those cases, you can use the jsonable_encoder to convert your data before passing it to a response: from datetime import datetime from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): title : str timestamp : datetime description : Union [ str , None ] = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) return JSONResponse ( content = json_compatible_item_data ) Technical Details You could also use from starlette.responses import JSONResponse . FastAPI provides the same starlette.responses as fastapi.responses just as a convenience for you, the developer. But most of the available responses come directly from Starlette. Returning a custom Response \u00b6 The example above shows all the parts you need, but it's not very useful yet, as you could have just returned the item directly, and FastAPI would put it in a JSONResponse for you, converting it to a dict , etc. All that by default. Now, let's see how you could use that to return a custom response. Let's say that you want to return an XML response. You could put your XML content in a string, put it in a Response , and return it: from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/legacy/\" ) def get_legacy_data (): data = \"\"\"<?xml version=\"1.0\"?> <shampoo> <Header> Apply shampoo here. </Header> <Body> You'll have to use soap here. </Body> </shampoo> \"\"\" return Response ( content = data , media_type = \"application/xml\" ) Notes \u00b6 When you return a Response directly its data is not validated, converted (serialized), nor documented automatically. But you can still document it as described in Additional Responses in OpenAPI . You can see in later sections how to use/declare these custom Response s while still having automatic data conversion, documentation, etc.","title":"Return a Response Directly"},{"location":"advanced/response-directly/#return-a-response-directly","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . When you create a FastAPI path operation you can normally return any data from it: a dict , a list , a Pydantic model, a database model, etc. By default, FastAPI would automatically convert that return value to JSON using the jsonable_encoder explained in JSON Compatible Encoder . Then, behind the scenes, it would put that JSON-compatible data (e.g. a dict ) inside of a JSONResponse that would be used to send the response to the client. But you can return a JSONResponse directly from your path operations . It might be useful, for example, to return custom headers or cookies.","title":"Return a Response Directly"},{"location":"advanced/response-directly/#return-a-response","text":"In fact, you can return any Response or any sub-class of it. Tip JSONResponse itself is a sub-class of Response . And when you return a Response , FastAPI will pass it directly. It won't do any data conversion with Pydantic models, it won't convert the contents to any type, etc. This gives you a lot of flexibility. You can return any data type, override any data declaration or validation, etc.","title":"Return a Response"},{"location":"advanced/response-directly/#using-the-jsonable_encoder-in-a-response","text":"Because FastAPI doesn't do any change to a Response you return, you have to make sure it's contents are ready for it. For example, you cannot put a Pydantic model in a JSONResponse without first converting it to a dict with all the data types (like datetime , UUID , etc) converted to JSON-compatible types. For those cases, you can use the jsonable_encoder to convert your data before passing it to a response: from datetime import datetime from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): title : str timestamp : datetime description : Union [ str , None ] = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) return JSONResponse ( content = json_compatible_item_data ) Technical Details You could also use from starlette.responses import JSONResponse . FastAPI provides the same starlette.responses as fastapi.responses just as a convenience for you, the developer. But most of the available responses come directly from Starlette.","title":"Using the jsonable_encoder in a Response"},{"location":"advanced/response-directly/#returning-a-custom-response","text":"The example above shows all the parts you need, but it's not very useful yet, as you could have just returned the item directly, and FastAPI would put it in a JSONResponse for you, converting it to a dict , etc. All that by default. Now, let's see how you could use that to return a custom response. Let's say that you want to return an XML response. You could put your XML content in a string, put it in a Response , and return it: from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/legacy/\" ) def get_legacy_data (): data = \"\"\"<?xml version=\"1.0\"?> <shampoo> <Header> Apply shampoo here. </Header> <Body> You'll have to use soap here. </Body> </shampoo> \"\"\" return Response ( content = data , media_type = \"application/xml\" )","title":"Returning a custom Response"},{"location":"advanced/response-directly/#notes","text":"When you return a Response directly its data is not validated, converted (serialized), nor documented automatically. But you can still document it as described in Additional Responses in OpenAPI . You can see in later sections how to use/declare these custom Response s while still having automatic data conversion, documentation, etc.","title":"Notes"},{"location":"advanced/response-headers/","text":"\uc751\ub2f5 \ud5e4\ub354 \u00b6 Response \ub9e4\uac1c\ubcc0\uc218 \uc0ac\uc6a9\ud558\uae30 \u00b6 \uacbd\ub85c \uc5f0\uc0b0 \ud568\uc218 \uc5d0\uc11c Response \ud0c0\uc785\uc758 \ub9e4\uac1c \ubcc0\uc218\ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uc751\ub2f5 \ucfe0\ud0a4\uc5d0\uc11c \ucc98\ub7fc). \uadf8\ub7f0 \ub2e4\uc74c \uc784\uc2dc \uc751\ub2f5 \uac1d\uccb4\uc5d0 \ud5e4\ub354\ub97c \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/headers-and-object/\" ) def get_headers ( response : Response ): response . headers [ \"X-Cat-Dog\" ] = \"alone in the world\" return { \"message\" : \"Hello World\" } \uadf8\ub7f0 \ub2e4\uc74c \ud3c9\uc18c\ucc98\ub7fc \ud544\uc694\ud55c \uac1d\uccb4\ub97c \ubc18\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 ( dict , \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378, \uae30\ud0c0 \ub4f1\ub4f1). response_model \ub97c \uc120\uc5b8\ud588\ub2e4\uba74, \ubc18\ud658\ub420 \uac1d\uccb4\ub97c \ud544\ud130\ub9c1, \ubcc0\ud658\ud558\ub294\ub370 \uc5ec\uc804\ud788 \uc0ac\uc6a9\ub420\uac81\ub2c8\ub2e4. FastAPI \ub294 \uc784\uc2dc \uc751\ub2f5 \uac1d\uccb4\ub97c \uc774\uc6a9\ud574 \ud5e4\ub354(\uadf8\ub9ac\uace0 \ucfe0\ud0a4, \uc751\ub2f5 \ucf54\ub4dc)\ub97c \ucd94\ucd9c\ud558\uace0, response_model \ub85c \ud544\ud130\ub9c1 \ub41c \ucd5c\uc885 \uac12\ub4e4\uc774 \ucd5c\uc885 \uc751\ub2f5\uc5d0 \ud3ec\ud568\ub420 \uac83\uc785\ub2c8\ub2e4. \ub610\ub294 Response \ub9e4\uac1c\ubcc0\uc218\ub97c \uc885\uc18d\uc131\uc5d0\uc11c \uc120\uc5b8\ud558\uace0, \uac70\uae30\uc5d0 \ud5e4\ub354(\uadf8\ub9ac\uace0 \ucfe0\ud0a4)\ub97c \uc124\uc815\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. Response \uc9c1\uc811\uc801\uc73c\ub85c \ubc18\ud658\ud558\uae30 \u00b6 Response \ub97c \uc9c1\uc811\uc801\uc73c\ub85c \ubc18\ud658\ud560 \ub54c \ud5e4\ub354\ub97c \ucd94\uac00\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc751\ub2f5 \uc9c1\uc811 \ubc18\ud658\ud558\uae30 \uc5d0 \uc124\uba85\ub41c \uac83 \ucc98\ub7fc \uc751\ub2f5\uc744 \ub9cc\ub4e4\uc5b4 \ucd94\uac00\uc801\uc778 \ub9e4\uac1c \ubcc0\uc218\uc640 \ud568\uaed8 \ud5e4\ub354\ub97c \ub118\uae30\uba74 \ub429\ub2c8\ub2e4. Create a response as described in Return a Response Directly and pass the headers as an additional parameter: from fastapi import FastAPI from fastapi.responses import JSONResponse app = FastAPI () @app . get ( \"/headers/\" ) def get_headers (): content = { \"message\" : \"Hello World\" } headers = { \"X-Cat-Dog\" : \"alone in the world\" , \"Content-Language\" : \"en-US\" } return JSONResponse ( content = content , headers = headers ) \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d from starlette.responses import Response \ud639\uc740 from starlette.responses import JSONResponse \ub97c \uc0ac\uc6a9\ud558\ub3c4 \ub429\ub2c8\ub2e4. FastAPI \ub294 starlette.responses \ub97c \uac1c\ubc1c\uc790\uc758 \ud3b8\ub9ac\ud568\uc744 \uc704\ud574 fastapi.responses \ub85c \uc774\ub984\uc744 \ubc14\uafd4 \uc81c\uacf5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uac00\ub2a5\ud55c \uc751\ub2f5\uc740 Starlette\uc5d0\uc11c \uc9c1\uc811 \uc81c\uacf5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 Response \ub294 \ud5e4\ub354\uc640 \ucfe0\ud0a4\ub97c \uc124\uc815\ud558\ub294 \ub370 \uc790\uc8fc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc73c\ubbc0\ub85c, FastAPI \ub610\ud55c \uc774\uac78 fastapi.Response \ub85c \uc81c\uacf5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ucee4\uc2a4\ud140 \ud5e4\ub354 \u00b6 'X-' \uc811\ub450\uc0ac\ub97c \uc774\uc6a9\ud574 \uc0ac\uc6a9\uc790 \uc815\uc758 \ub3c5\uc810 \ud5e4\ub354\ub97c \ucd94\uac00\ud560 \uc218\ub3c4 \uc788\uc74c\uc744 \uc5fc\ub450\uc5d0 \ub450\uc2ed\uc2dc\uc624. \ud558\uc9c0\ub9cc \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \ubcfc \uc218 \uc788\ub294 \ucee4\uc2a4\ud140 \ud5e4\ub354\ub97c \uac16\uac8c \ud560\ub824\uba74 CORS \uc124\uc815\uc5d0\uc11c \uc774\ub97c \ucd94\uac00\ud574\uc57c \ub429\ub2c8\ub2e4. ( CORS (Cross-Origin Resource Sharing) \uc5d0\uc11c \uc790\uc138\ud788 \uc77d\uc5b4\ubcf4\uc138\uc694.) Starlette's CORS docs \uc5d0\uc11c \uc124\uba85\ub41c expose_headers \ub97c \uc0ac\uc6a9\ud558\uc138\uc694.","title":"\uc751\ub2f5 \ud5e4\ub354"},{"location":"advanced/response-headers/#_1","text":"","title":"\uc751\ub2f5 \ud5e4\ub354"},{"location":"advanced/response-headers/#response","text":"\uacbd\ub85c \uc5f0\uc0b0 \ud568\uc218 \uc5d0\uc11c Response \ud0c0\uc785\uc758 \ub9e4\uac1c \ubcc0\uc218\ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uc751\ub2f5 \ucfe0\ud0a4\uc5d0\uc11c \ucc98\ub7fc). \uadf8\ub7f0 \ub2e4\uc74c \uc784\uc2dc \uc751\ub2f5 \uac1d\uccb4\uc5d0 \ud5e4\ub354\ub97c \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/headers-and-object/\" ) def get_headers ( response : Response ): response . headers [ \"X-Cat-Dog\" ] = \"alone in the world\" return { \"message\" : \"Hello World\" } \uadf8\ub7f0 \ub2e4\uc74c \ud3c9\uc18c\ucc98\ub7fc \ud544\uc694\ud55c \uac1d\uccb4\ub97c \ubc18\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 ( dict , \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378, \uae30\ud0c0 \ub4f1\ub4f1). response_model \ub97c \uc120\uc5b8\ud588\ub2e4\uba74, \ubc18\ud658\ub420 \uac1d\uccb4\ub97c \ud544\ud130\ub9c1, \ubcc0\ud658\ud558\ub294\ub370 \uc5ec\uc804\ud788 \uc0ac\uc6a9\ub420\uac81\ub2c8\ub2e4. FastAPI \ub294 \uc784\uc2dc \uc751\ub2f5 \uac1d\uccb4\ub97c \uc774\uc6a9\ud574 \ud5e4\ub354(\uadf8\ub9ac\uace0 \ucfe0\ud0a4, \uc751\ub2f5 \ucf54\ub4dc)\ub97c \ucd94\ucd9c\ud558\uace0, response_model \ub85c \ud544\ud130\ub9c1 \ub41c \ucd5c\uc885 \uac12\ub4e4\uc774 \ucd5c\uc885 \uc751\ub2f5\uc5d0 \ud3ec\ud568\ub420 \uac83\uc785\ub2c8\ub2e4. \ub610\ub294 Response \ub9e4\uac1c\ubcc0\uc218\ub97c \uc885\uc18d\uc131\uc5d0\uc11c \uc120\uc5b8\ud558\uace0, \uac70\uae30\uc5d0 \ud5e4\ub354(\uadf8\ub9ac\uace0 \ucfe0\ud0a4)\ub97c \uc124\uc815\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.","title":"Response \ub9e4\uac1c\ubcc0\uc218 \uc0ac\uc6a9\ud558\uae30"},{"location":"advanced/response-headers/#response_1","text":"Response \ub97c \uc9c1\uc811\uc801\uc73c\ub85c \ubc18\ud658\ud560 \ub54c \ud5e4\ub354\ub97c \ucd94\uac00\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc751\ub2f5 \uc9c1\uc811 \ubc18\ud658\ud558\uae30 \uc5d0 \uc124\uba85\ub41c \uac83 \ucc98\ub7fc \uc751\ub2f5\uc744 \ub9cc\ub4e4\uc5b4 \ucd94\uac00\uc801\uc778 \ub9e4\uac1c \ubcc0\uc218\uc640 \ud568\uaed8 \ud5e4\ub354\ub97c \ub118\uae30\uba74 \ub429\ub2c8\ub2e4. Create a response as described in Return a Response Directly and pass the headers as an additional parameter: from fastapi import FastAPI from fastapi.responses import JSONResponse app = FastAPI () @app . get ( \"/headers/\" ) def get_headers (): content = { \"message\" : \"Hello World\" } headers = { \"X-Cat-Dog\" : \"alone in the world\" , \"Content-Language\" : \"en-US\" } return JSONResponse ( content = content , headers = headers ) \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d from starlette.responses import Response \ud639\uc740 from starlette.responses import JSONResponse \ub97c \uc0ac\uc6a9\ud558\ub3c4 \ub429\ub2c8\ub2e4. FastAPI \ub294 starlette.responses \ub97c \uac1c\ubc1c\uc790\uc758 \ud3b8\ub9ac\ud568\uc744 \uc704\ud574 fastapi.responses \ub85c \uc774\ub984\uc744 \ubc14\uafd4 \uc81c\uacf5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uac00\ub2a5\ud55c \uc751\ub2f5\uc740 Starlette\uc5d0\uc11c \uc9c1\uc811 \uc81c\uacf5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 Response \ub294 \ud5e4\ub354\uc640 \ucfe0\ud0a4\ub97c \uc124\uc815\ud558\ub294 \ub370 \uc790\uc8fc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc73c\ubbc0\ub85c, FastAPI \ub610\ud55c \uc774\uac78 fastapi.Response \ub85c \uc81c\uacf5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.","title":"Response \uc9c1\uc811\uc801\uc73c\ub85c \ubc18\ud658\ud558\uae30"},{"location":"advanced/response-headers/#_2","text":"'X-' \uc811\ub450\uc0ac\ub97c \uc774\uc6a9\ud574 \uc0ac\uc6a9\uc790 \uc815\uc758 \ub3c5\uc810 \ud5e4\ub354\ub97c \ucd94\uac00\ud560 \uc218\ub3c4 \uc788\uc74c\uc744 \uc5fc\ub450\uc5d0 \ub450\uc2ed\uc2dc\uc624. \ud558\uc9c0\ub9cc \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \ubcfc \uc218 \uc788\ub294 \ucee4\uc2a4\ud140 \ud5e4\ub354\ub97c \uac16\uac8c \ud560\ub824\uba74 CORS \uc124\uc815\uc5d0\uc11c \uc774\ub97c \ucd94\uac00\ud574\uc57c \ub429\ub2c8\ub2e4. ( CORS (Cross-Origin Resource Sharing) \uc5d0\uc11c \uc790\uc138\ud788 \uc77d\uc5b4\ubcf4\uc138\uc694.) Starlette's CORS docs \uc5d0\uc11c \uc124\uba85\ub41c expose_headers \ub97c \uc0ac\uc6a9\ud558\uc138\uc694.","title":"\ucee4\uc2a4\ud140 \ud5e4\ub354"},{"location":"advanced/settings/","text":"Settings and Environment Variables \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In many cases your application could need some external settings or configurations, for example secret keys, database credentials, credentials for email services, etc. Most of these settings are variable (can change), like database URLs. And many could be sensitive, like secrets. For this reason it's common to provide them in environment variables that are read by the application. Environment Variables \u00b6 Tip If you already know what \"environment variables\" are and how to use them, feel free to skip to the next section below. An environment variable (also known as \"env var\") is a variable that lives outside of the Python code, in the operating system, and could be read by your Python code (or by other programs as well). You can create and use environment variables in the shell, without needing Python: Linux, macOS, Windows Bash Windows PowerShell // You could create an env var MY_NAME with $ export MY_NAME = \"Wade Wilson\" // Then you could use it with other programs, like $ echo \"Hello $MY_NAME \" Hello Wade Wilson // Create an env var MY_NAME $ $Env :MY_NAME = \"Wade Wilson\" // Use it with other programs, like $ echo \"Hello $Env :MY_NAME\" Hello Wade Wilson Read env vars in Python \u00b6 You could also create environment variables outside of Python, in the terminal (or with any other method), and then read them in Python. For example you could have a file main.py with: import os name = os . getenv ( \"MY_NAME\" , \"World\" ) print ( f \"Hello { name } from Python\" ) Tip The second argument to os.getenv() is the default value to return. If not provided, it's None by default, here we provide \"World\" as the default value to use. Then you could call that Python program: // Here we don't set the env var yet $ python main.py // As we didn't set the env var, we get the default value Hello World from Python // But if we create an environment variable first $ export MY_NAME = \"Wade Wilson\" // And then call the program again $ python main.py // Now it can read the environment variable Hello Wade Wilson from Python As environment variables can be set outside of the code, but can be read by the code, and don't have to be stored (committed to git ) with the rest of the files, it's common to use them for configurations or settings. You can also create an environment variable only for a specific program invocation, that is only available to that program, and only for its duration. To do that, create it right before the program itself, on the same line: // Create an env var MY_NAME in line for this program call $ MY_NAME = \"Wade Wilson\" python main.py // Now it can read the environment variable Hello Wade Wilson from Python // The env var no longer exists afterwards $ python main.py Hello World from Python Tip You can read more about it at The Twelve-Factor App: Config . Types and validation \u00b6 These environment variables can only handle text strings, as they are external to Python and have to be compatible with other programs and the rest of the system (and even with different operating systems, as Linux, Windows, macOS). That means that any value read in Python from an environment variable will be a str , and any conversion to a different type or validation has to be done in code. Pydantic Settings \u00b6 Fortunately, Pydantic provides a great utility to handle these settings coming from environment variables with Pydantic: Settings management . Create the Settings object \u00b6 Import BaseSettings from Pydantic and create a sub-class, very much like with a Pydantic model. The same way as with Pydantic models, you declare class attributes with type annotations, and possibly default values. You can use all the same validation features and tools you use for Pydantic models, like different data types and additional validations with Field() . from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Tip If you want something quick to copy and paste, don't use this example, use the last one below. Then, when you create an instance of that Settings class (in this case, in the settings object), Pydantic will read the environment variables in a case-insensitive way, so, an upper-case variable APP_NAME will still be read for the attribute app_name . Next it will convert and validate the data. So, when you use that settings object, you will have data of the types you declared (e.g. items_per_user will be an int ). Use the settings \u00b6 Then you can use the new settings object in your application: from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Run the server \u00b6 Next, you would run the server passing the configurations as environment variables, for example you could set an ADMIN_EMAIL and APP_NAME with: $ ADMIN_EMAIL = \"deadpool@example.com\" APP_NAME = \"ChimichangApp\" uvicorn main:app <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Tip To set multiple env vars for a single command just separate them with a space, and put them all before the command. And then the admin_email setting would be set to \"deadpool@example.com\" . The app_name would be \"ChimichangApp\" . And the items_per_user would keep its default value of 50 . Settings in another module \u00b6 You could put those settings in another module file as you saw in Bigger Applications - Multiple Files . For example, you could have a file config.py with: from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () And then use it in a file main.py : from fastapi import FastAPI from .config import settings app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Tip You would also need a file __init__.py as you saw on Bigger Applications - Multiple Files . Settings in a dependency \u00b6 In some occasions it might be useful to provide the settings from a dependency, instead of having a global object with settings that is used everywhere. This could be especially useful during testing, as it's very easy to override a dependency with your own custom settings. The config file \u00b6 Coming from the previous example, your config.py file could look like: from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 Notice that now we don't create a default instance settings = Settings() . The main app file \u00b6 Now we create a dependency that returns a new config.Settings() . from functools import lru_cache from fastapi import Depends , FastAPI from .config import Settings app = FastAPI () @lru_cache () def get_settings (): return Settings () @app . get ( \"/info\" ) async def info ( settings : Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Tip We'll discuss the @lru_cache() in a bit. For now you can assume get_settings() is a normal function. And then we can require it from the path operation function as a dependency and use it anywhere we need it. from functools import lru_cache from fastapi import Depends , FastAPI from .config import Settings app = FastAPI () @lru_cache () def get_settings (): return Settings () @app . get ( \"/info\" ) async def info ( settings : Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Settings and testing \u00b6 Then it would be very easy to provide a different settings object during testing by creating a dependency override for get_settings : from fastapi.testclient import TestClient from .config import Settings from .main import app , get_settings client = TestClient ( app ) def get_settings_override (): return Settings ( admin_email = \"testing_admin@example.com\" ) app . dependency_overrides [ get_settings ] = get_settings_override def test_app (): response = client . get ( \"/info\" ) data = response . json () assert data == { \"app_name\" : \"Awesome API\" , \"admin_email\" : \"testing_admin@example.com\" , \"items_per_user\" : 50 , } In the dependency override we set a new value for the admin_email when creating the new Settings object, and then we return that new object. Then we can test that it is used. Reading a .env file \u00b6 If you have many settings that possibly change a lot, maybe in different environments, it might be useful to put them on a file and then read them from it as if they were environment variables. This practice is common enough that it has a name, these environment variables are commonly placed in a file .env , and the file is called a \"dotenv\". Tip A file starting with a dot ( . ) is a hidden file in Unix-like systems, like Linux and macOS. But a dotenv file doesn't really have to have that exact filename. Pydantic has support for reading from these types of files using an external library. You can read more at Pydantic Settings: Dotenv (.env) support . Tip For this to work, you need to pip install python-dotenv . The .env file \u00b6 You could have a .env file with: ADMIN_EMAIL = \"deadpool@example.com\" APP_NAME = \"ChimichangApp\" Read settings from .env \u00b6 And then update your config.py with: from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 class Config : env_file = \".env\" Here we create a class Config inside of your Pydantic Settings class, and set the env_file to the filename with the dotenv file we want to use. Tip The Config class is used just for Pydantic configuration. You can read more at Pydantic Model Config Creating the Settings only once with lru_cache \u00b6 Reading a file from disk is normally a costly (slow) operation, so you probably want to do it only once and then re-use the same settings object, instead of reading it for each request. But every time we do: Settings () a new Settings object would be created, and at creation it would read the .env file again. If the dependency function was just like: def get_settings (): return Settings () we would create that object for each request, and we would be reading the .env file for each request. \u26a0\ufe0f But as we are using the @lru_cache() decorator on top, the Settings object will be created only once, the first time it's called. \u2714\ufe0f from functools import lru_cache from fastapi import Depends , FastAPI from . import config app = FastAPI () @lru_cache () def get_settings (): return config . Settings () @app . get ( \"/info\" ) async def info ( settings : config . Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Then for any subsequent calls of get_settings() in the dependencies for the next requests, instead of executing the internal code of get_settings() and creating a new Settings object, it will return the same object that was returned on the first call, again and again. lru_cache Technical Details \u00b6 @lru_cache() modifies the function it decorates to return the same value that was returned the first time, instead of computing it again, executing the code of the function every time. So, the function below it will be executed once for each combination of arguments. And then the values returned by each of those combinations of arguments will be used again and again whenever the function is called with exactly the same combination of arguments. For example, if you have a function: @lru_cache () def say_hi ( name : str , salutation : str = \"Ms.\" ): return f \"Hello { salutation } { name } \" your program could execute like this: sequenceDiagram participant code as Code participant function as say_hi() participant execute as Execute function rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Camila\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Camila\") function ->> code: return stored result end rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Rick\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Rick\", salutation=\"Mr.\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Rick\") function ->> code: return stored result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Camila\") function ->> code: return stored result end In the case of our dependency get_settings() , the function doesn't even take any arguments, so it always returns the same value. That way, it behaves almost as if it was just a global variable. But as it uses a dependency function, then we can override it easily for testing. @lru_cache() is part of functools which is part of Python's standard library, you can read more about it in the Python docs for @lru_cache() . Recap \u00b6 You can use Pydantic Settings to handle the settings or configurations for your application, with all the power of Pydantic models. By using a dependency you can simplify testing. You can use .env files with it. Using @lru_cache() lets you avoid reading the dotenv file again and again for each request, while allowing you to override it during testing.","title":"Settings and Environment Variables"},{"location":"advanced/settings/#settings-and-environment-variables","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In many cases your application could need some external settings or configurations, for example secret keys, database credentials, credentials for email services, etc. Most of these settings are variable (can change), like database URLs. And many could be sensitive, like secrets. For this reason it's common to provide them in environment variables that are read by the application.","title":"Settings and Environment Variables"},{"location":"advanced/settings/#environment-variables","text":"Tip If you already know what \"environment variables\" are and how to use them, feel free to skip to the next section below. An environment variable (also known as \"env var\") is a variable that lives outside of the Python code, in the operating system, and could be read by your Python code (or by other programs as well). You can create and use environment variables in the shell, without needing Python: Linux, macOS, Windows Bash Windows PowerShell // You could create an env var MY_NAME with $ export MY_NAME = \"Wade Wilson\" // Then you could use it with other programs, like $ echo \"Hello $MY_NAME \" Hello Wade Wilson // Create an env var MY_NAME $ $Env :MY_NAME = \"Wade Wilson\" // Use it with other programs, like $ echo \"Hello $Env :MY_NAME\" Hello Wade Wilson","title":"Environment Variables"},{"location":"advanced/settings/#read-env-vars-in-python","text":"You could also create environment variables outside of Python, in the terminal (or with any other method), and then read them in Python. For example you could have a file main.py with: import os name = os . getenv ( \"MY_NAME\" , \"World\" ) print ( f \"Hello { name } from Python\" ) Tip The second argument to os.getenv() is the default value to return. If not provided, it's None by default, here we provide \"World\" as the default value to use. Then you could call that Python program: // Here we don't set the env var yet $ python main.py // As we didn't set the env var, we get the default value Hello World from Python // But if we create an environment variable first $ export MY_NAME = \"Wade Wilson\" // And then call the program again $ python main.py // Now it can read the environment variable Hello Wade Wilson from Python As environment variables can be set outside of the code, but can be read by the code, and don't have to be stored (committed to git ) with the rest of the files, it's common to use them for configurations or settings. You can also create an environment variable only for a specific program invocation, that is only available to that program, and only for its duration. To do that, create it right before the program itself, on the same line: // Create an env var MY_NAME in line for this program call $ MY_NAME = \"Wade Wilson\" python main.py // Now it can read the environment variable Hello Wade Wilson from Python // The env var no longer exists afterwards $ python main.py Hello World from Python Tip You can read more about it at The Twelve-Factor App: Config .","title":"Read env vars in Python"},{"location":"advanced/settings/#types-and-validation","text":"These environment variables can only handle text strings, as they are external to Python and have to be compatible with other programs and the rest of the system (and even with different operating systems, as Linux, Windows, macOS). That means that any value read in Python from an environment variable will be a str , and any conversion to a different type or validation has to be done in code.","title":"Types and validation"},{"location":"advanced/settings/#pydantic-settings","text":"Fortunately, Pydantic provides a great utility to handle these settings coming from environment variables with Pydantic: Settings management .","title":"Pydantic Settings"},{"location":"advanced/settings/#create-the-settings-object","text":"Import BaseSettings from Pydantic and create a sub-class, very much like with a Pydantic model. The same way as with Pydantic models, you declare class attributes with type annotations, and possibly default values. You can use all the same validation features and tools you use for Pydantic models, like different data types and additional validations with Field() . from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Tip If you want something quick to copy and paste, don't use this example, use the last one below. Then, when you create an instance of that Settings class (in this case, in the settings object), Pydantic will read the environment variables in a case-insensitive way, so, an upper-case variable APP_NAME will still be read for the attribute app_name . Next it will convert and validate the data. So, when you use that settings object, you will have data of the types you declared (e.g. items_per_user will be an int ).","title":"Create the Settings object"},{"location":"advanced/settings/#use-the-settings","text":"Then you can use the new settings object in your application: from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , }","title":"Use the settings"},{"location":"advanced/settings/#run-the-server","text":"Next, you would run the server passing the configurations as environment variables, for example you could set an ADMIN_EMAIL and APP_NAME with: $ ADMIN_EMAIL = \"deadpool@example.com\" APP_NAME = \"ChimichangApp\" uvicorn main:app <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Tip To set multiple env vars for a single command just separate them with a space, and put them all before the command. And then the admin_email setting would be set to \"deadpool@example.com\" . The app_name would be \"ChimichangApp\" . And the items_per_user would keep its default value of 50 .","title":"Run the server"},{"location":"advanced/settings/#settings-in-another-module","text":"You could put those settings in another module file as you saw in Bigger Applications - Multiple Files . For example, you could have a file config.py with: from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () And then use it in a file main.py : from fastapi import FastAPI from .config import settings app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Tip You would also need a file __init__.py as you saw on Bigger Applications - Multiple Files .","title":"Settings in another module"},{"location":"advanced/settings/#settings-in-a-dependency","text":"In some occasions it might be useful to provide the settings from a dependency, instead of having a global object with settings that is used everywhere. This could be especially useful during testing, as it's very easy to override a dependency with your own custom settings.","title":"Settings in a dependency"},{"location":"advanced/settings/#the-config-file","text":"Coming from the previous example, your config.py file could look like: from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 Notice that now we don't create a default instance settings = Settings() .","title":"The config file"},{"location":"advanced/settings/#the-main-app-file","text":"Now we create a dependency that returns a new config.Settings() . from functools import lru_cache from fastapi import Depends , FastAPI from .config import Settings app = FastAPI () @lru_cache () def get_settings (): return Settings () @app . get ( \"/info\" ) async def info ( settings : Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Tip We'll discuss the @lru_cache() in a bit. For now you can assume get_settings() is a normal function. And then we can require it from the path operation function as a dependency and use it anywhere we need it. from functools import lru_cache from fastapi import Depends , FastAPI from .config import Settings app = FastAPI () @lru_cache () def get_settings (): return Settings () @app . get ( \"/info\" ) async def info ( settings : Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , }","title":"The main app file"},{"location":"advanced/settings/#settings-and-testing","text":"Then it would be very easy to provide a different settings object during testing by creating a dependency override for get_settings : from fastapi.testclient import TestClient from .config import Settings from .main import app , get_settings client = TestClient ( app ) def get_settings_override (): return Settings ( admin_email = \"testing_admin@example.com\" ) app . dependency_overrides [ get_settings ] = get_settings_override def test_app (): response = client . get ( \"/info\" ) data = response . json () assert data == { \"app_name\" : \"Awesome API\" , \"admin_email\" : \"testing_admin@example.com\" , \"items_per_user\" : 50 , } In the dependency override we set a new value for the admin_email when creating the new Settings object, and then we return that new object. Then we can test that it is used.","title":"Settings and testing"},{"location":"advanced/settings/#reading-a-env-file","text":"If you have many settings that possibly change a lot, maybe in different environments, it might be useful to put them on a file and then read them from it as if they were environment variables. This practice is common enough that it has a name, these environment variables are commonly placed in a file .env , and the file is called a \"dotenv\". Tip A file starting with a dot ( . ) is a hidden file in Unix-like systems, like Linux and macOS. But a dotenv file doesn't really have to have that exact filename. Pydantic has support for reading from these types of files using an external library. You can read more at Pydantic Settings: Dotenv (.env) support . Tip For this to work, you need to pip install python-dotenv .","title":"Reading a .env file"},{"location":"advanced/settings/#the-env-file","text":"You could have a .env file with: ADMIN_EMAIL = \"deadpool@example.com\" APP_NAME = \"ChimichangApp\"","title":"The .env file"},{"location":"advanced/settings/#read-settings-from-env","text":"And then update your config.py with: from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 class Config : env_file = \".env\" Here we create a class Config inside of your Pydantic Settings class, and set the env_file to the filename with the dotenv file we want to use. Tip The Config class is used just for Pydantic configuration. You can read more at Pydantic Model Config","title":"Read settings from .env"},{"location":"advanced/settings/#creating-the-settings-only-once-with-lru_cache","text":"Reading a file from disk is normally a costly (slow) operation, so you probably want to do it only once and then re-use the same settings object, instead of reading it for each request. But every time we do: Settings () a new Settings object would be created, and at creation it would read the .env file again. If the dependency function was just like: def get_settings (): return Settings () we would create that object for each request, and we would be reading the .env file for each request. \u26a0\ufe0f But as we are using the @lru_cache() decorator on top, the Settings object will be created only once, the first time it's called. \u2714\ufe0f from functools import lru_cache from fastapi import Depends , FastAPI from . import config app = FastAPI () @lru_cache () def get_settings (): return config . Settings () @app . get ( \"/info\" ) async def info ( settings : config . Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Then for any subsequent calls of get_settings() in the dependencies for the next requests, instead of executing the internal code of get_settings() and creating a new Settings object, it will return the same object that was returned on the first call, again and again.","title":"Creating the Settings only once with lru_cache"},{"location":"advanced/settings/#lru_cache-technical-details","text":"@lru_cache() modifies the function it decorates to return the same value that was returned the first time, instead of computing it again, executing the code of the function every time. So, the function below it will be executed once for each combination of arguments. And then the values returned by each of those combinations of arguments will be used again and again whenever the function is called with exactly the same combination of arguments. For example, if you have a function: @lru_cache () def say_hi ( name : str , salutation : str = \"Ms.\" ): return f \"Hello { salutation } { name } \" your program could execute like this: sequenceDiagram participant code as Code participant function as say_hi() participant execute as Execute function rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Camila\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Camila\") function ->> code: return stored result end rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Rick\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Rick\", salutation=\"Mr.\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Rick\") function ->> code: return stored result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Camila\") function ->> code: return stored result end In the case of our dependency get_settings() , the function doesn't even take any arguments, so it always returns the same value. That way, it behaves almost as if it was just a global variable. But as it uses a dependency function, then we can override it easily for testing. @lru_cache() is part of functools which is part of Python's standard library, you can read more about it in the Python docs for @lru_cache() .","title":"lru_cache Technical Details"},{"location":"advanced/settings/#recap","text":"You can use Pydantic Settings to handle the settings or configurations for your application, with all the power of Pydantic models. By using a dependency you can simplify testing. You can use .env files with it. Using @lru_cache() lets you avoid reading the dotenv file again and again for each request, while allowing you to override it during testing.","title":"Recap"},{"location":"advanced/sql-databases-peewee/","text":"SQL (Relational) Databases with Peewee \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Warning If you are just starting, the tutorial SQL (Relational) Databases that uses SQLAlchemy should be enough. Feel free to skip this. If you are starting a project from scratch, you are probably better off with SQLAlchemy ORM ( SQL (Relational) Databases ), or any other async ORM. If you already have a code base that uses Peewee ORM , you can check here how to use it with FastAPI . Python 3.7+ required You will need Python 3.7 or above to safely use Peewee with FastAPI. Peewee for async \u00b6 Peewee was not designed for async frameworks, or with them in mind. Peewee has some heavy assumptions about its defaults and about how it should be used. If you are developing an application with an older non-async framework, and can work with all its defaults, it can be a great tool . But if you need to change some of the defaults, support more than one predefined database, work with an async framework (like FastAPI), etc, you will need to add quite some complex extra code to override those defaults. Nevertheless, it's possible to do it, and here you'll see exactly what code you have to add to be able to use Peewee with FastAPI. Technical Details You can read more about Peewee's stand about async in Python in the docs , an issue , a PR . The same app \u00b6 We are going to create the same application as in the SQLAlchemy tutorial ( SQL (Relational) Databases ). Most of the code is actually the same. So, we are going to focus only on the differences. File structure \u00b6 Let's say you have a directory named my_super_project that contains a sub-directory called sql_app with a structure like this: . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u2514\u2500\u2500 schemas.py This is almost the same structure as we had for the SQLAlchemy tutorial. Now let's see what each file/module does. Create the Peewee parts \u00b6 Let's refer to the file sql_app/database.py . The standard Peewee code \u00b6 Let's first check all the normal Peewee code, create a Peewee database: from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () Tip Have in mind that if you wanted to use a different database, like PostgreSQL, you couldn't just change the string. You would need to use a different Peewee database class. Note \u00b6 The argument: check_same_thread = False is equivalent to the one in the SQLAlchemy tutorial: connect_args = { \"check_same_thread\" : False } ...it is needed only for SQLite . Technical Details Exactly the same technical details as in SQL (Relational) Databases apply. Make Peewee async-compatible PeeweeConnectionState \u00b6 The main issue with Peewee and FastAPI is that Peewee relies heavily on Python's threading.local , and it doesn't have a direct way to override it or let you handle connections/sessions directly (as is done in the SQLAlchemy tutorial). And threading.local is not compatible with the new async features of modern Python. Technical Details threading.local is used to have a \"magic\" variable that has a different value for each thread. This was useful in older frameworks designed to have one single thread per request, no more, no less. Using this, each request would have its own database connection/session, which is the actual final goal. But FastAPI, using the new async features, could handle more than one request on the same thread. And at the same time, for a single request, it could run multiple things in different threads (in a threadpool), depending on if you use async def or normal def . This is what gives all the performance improvements to FastAPI. But Python 3.7 and above provide a more advanced alternative to threading.local , that can also be used in the places where threading.local would be used, but is compatible with the new async features. We are going to use that. It's called contextvars . We are going to override the internal parts of Peewee that use threading.local and replace them with contextvars , with the corresponding updates. This might seem a bit complex (and it actually is), you don't really need to completely understand how it works to use it. We will create a PeeweeConnectionState : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () This class inherits from a special internal class used by Peewee. It has all the logic to make Peewee use contextvars instead of threading.local . contextvars works a bit differently than threading.local . But the rest of Peewee's internal code assumes that this class works with threading.local . So, we need to do some extra tricks to make it work as if it was just using threading.local . The __init__ , __setattr__ , and __getattr__ implement all the required tricks for this to be used by Peewee without knowing that it is now compatible with FastAPI. Tip This will just make Peewee behave correctly when used with FastAPI. Not randomly opening or closing connections that are being used, creating errors, etc. But it doesn't give Peewee async super-powers. You should still use normal def functions and not async def . Use the custom PeeweeConnectionState class \u00b6 Now, overwrite the ._state internal attribute in the Peewee database db object using the new PeeweeConnectionState : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () Tip Make sure you overwrite db._state after creating db . Tip You would do the same for any other Peewee database, including PostgresqlDatabase , MySQLDatabase , etc. Create the database models \u00b6 Let's now see the file sql_app/models.py . Create Peewee models for our data \u00b6 Now create the Peewee models (classes) for User and Item . This is the same you would do if you followed the Peewee tutorial and updated the models to have the same data as in the SQLAlchemy tutorial. Tip Peewee also uses the term \" model \" to refer to these classes and instances that interact with the database. But Pydantic also uses the term \" model \" to refer to something different, the data validation, conversion, and documentation classes and instances. Import db from database (the file database.py from above) and use it here. import peewee from .database import db class User ( peewee . Model ): email = peewee . CharField ( unique = True , index = True ) hashed_password = peewee . CharField () is_active = peewee . BooleanField ( default = True ) class Meta : database = db class Item ( peewee . Model ): title = peewee . CharField ( index = True ) description = peewee . CharField ( index = True ) owner = peewee . ForeignKeyField ( User , backref = \"items\" ) class Meta : database = db Tip Peewee creates several magic attributes. It will automatically add an id attribute as an integer to be the primary key. It will chose the name of the tables based on the class names. For the Item , it will create an attribute owner_id with the integer ID of the User . But we don't declare it anywhere. Create the Pydantic models \u00b6 Now let's check the file sql_app/schemas.py . Tip To avoid confusion between the Peewee models and the Pydantic models , we will have the file models.py with the Peewee models, and the file schemas.py with the Pydantic models. These Pydantic models define more or less a \"schema\" (a valid data shape). So this will help us avoiding confusion while using both. Create the Pydantic models / schemas \u00b6 Create all the same Pydantic models as in the SQLAlchemy tutorial: from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict Tip Here we are creating the models with an id . We didn't explicitly specify an id attribute in the Peewee models, but Peewee adds one automatically. We are also adding the magic owner_id attribute to Item . Create a PeeweeGetterDict for the Pydantic models / schemas \u00b6 When you access a relationship in a Peewee object, like in some_user.items , Peewee doesn't provide a list of Item . It provides a special custom object of class ModelSelect . It's possible to create a list of its items with list(some_user.items) . But the object itself is not a list . And it's also not an actual Python generator . Because of this, Pydantic doesn't know by default how to convert it to a list of Pydantic models / schemas. But recent versions of Pydantic allow providing a custom class that inherits from pydantic.utils.GetterDict , to provide the functionality used when using the orm_mode = True to retrieve the values for ORM model attributes. We are going to create a custom PeeweeGetterDict class and use it in all the same Pydantic models / schemas that use orm_mode : from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict Here we are checking if the attribute that is being accessed (e.g. .items in some_user.items ) is an instance of peewee.ModelSelect . And if that's the case, just return a list with it. And then we use it in the Pydantic models / schemas that use orm_mode = True , with the configuration variable getter_dict = PeeweeGetterDict . Tip We only need to create one PeeweeGetterDict class, and we can use it in all the Pydantic models / schemas. CRUD utils \u00b6 Now let's see the file sql_app/crud.py . Create all the CRUD utils \u00b6 Create all the same CRUD utils as in the SQLAlchemy tutorial, all the code is very similar: from . import models , schemas def get_user ( user_id : int ): return models . User . filter ( models . User . id == user_id ) . first () def get_user_by_email ( email : str ): return models . User . filter ( models . User . email == email ) . first () def get_users ( skip : int = 0 , limit : int = 100 ): return list ( models . User . select () . offset ( skip ) . limit ( limit )) def create_user ( user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db_user . save () return db_user def get_items ( skip : int = 0 , limit : int = 100 ): return list ( models . Item . select () . offset ( skip ) . limit ( limit )) def create_user_item ( item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db_item . save () return db_item There are some differences with the code for the SQLAlchemy tutorial. We don't pass a db attribute around. Instead we use the models directly. This is because the db object is a global object, that includes all the connection logic. That's why we had to do all the contextvars updates above. Aso, when returning several objects, like in get_users , we directly call list , like in: list ( models . User . select ()) This is for the same reason that we had to create a custom PeeweeGetterDict . But by returning something that is already a list instead of the peewee.ModelSelect the response_model in the path operation with List[models.User] (that we'll see later) will work correctly. Main FastAPI app \u00b6 And now in the file sql_app/main.py let's integrate and use all the other parts we created before. Create the database tables \u00b6 In a very simplistic way create the database tables: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Create a dependency \u00b6 Create a dependency that will connect the database right at the beginning of a request and disconnect it at the end: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Here we have an empty yield because we are actually not using the database object directly. It is connecting to the database and storing the connection data in an internal variable that is independent for each request (using the contextvars tricks from above). Because the database connection is potentially I/O blocking, this dependency is created with a normal def function. And then, in each path operation function that needs to access the database we add it as a dependency. But we are not using the value given by this dependency (it actually doesn't give any value, as it has an empty yield ). So, we don't add it to the path operation function but to the path operation decorator in the dependencies parameter: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Context variable sub-dependency \u00b6 For all the contextvars parts to work, we need to make sure we have an independent value in the ContextVar for each request that uses the database, and that value will be used as the database state (connection, transactions, etc) for the whole request. For that, we need to create another async dependency reset_db_state() that is used as a sub-dependency in get_db() . It will set the value for the context variable (with just a default dict ) that will be used as the database state for the whole request. And then the dependency get_db() will store in it the database state (connection, transactions, etc). import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users For the next request , as we will reset that context variable again in the async dependency reset_db_state() and then create a new connection in the get_db() dependency, that new request will have its own database state (connection, transactions, etc). Tip As FastAPI is an async framework, one request could start being processed, and before finishing, another request could be received and start processing as well, and it all could be processed in the same thread. But context variables are aware of these async features, so, a Peewee database state set in the async dependency reset_db_state() will keep its own data throughout the entire request. And at the same time, the other concurrent request will have its own database state that will be independent for the whole request. Peewee Proxy \u00b6 If you are using a Peewee Proxy , the actual database is at db.obj . So, you would reset it with: async def reset_db_state (): database . db . obj . _state . _state . set ( db_state_default . copy ()) database . db . obj . _state . reset () Create your FastAPI path operations \u00b6 Now, finally, here's the standard FastAPI path operations code. import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users About def vs async def \u00b6 The same as with SQLAlchemy, we are not doing something like: user = await models . User . select () . first () ...but instead we are using: user = models . User . select () . first () So, again, we should declare the path operation functions and the dependency without async def , just with a normal def , as: # Something goes here def read_users ( skip : int = 0 , limit : int = 100 ): # Something goes here Testing Peewee with async \u00b6 This example includes an extra path operation that simulates a long processing request with time.sleep(sleep_time) . It will have the database connection open at the beginning and will just wait some seconds before replying back. And each new request will wait one second less. This will easily let you test that your app with Peewee and FastAPI is behaving correctly with all the stuff about threads. If you want to check how Peewee would break your app if used without modification, go the the sql_app/database.py file and comment the line: # db._state = PeeweeConnectionState() And in the file sql_app/main.py file, comment the body of the async dependency reset_db_state() and replace it with a pass : async def reset_db_state (): # database.db._state._state.set(db_state_default.copy()) # database.db._state.reset() pass Then run your app with Uvicorn: $ uvicorn sql_app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Open your browser at http://127.0.0.1:8000/docs and create a couple of users. Then open 10 tabs at http://127.0.0.1:8000/docs#/default/read_slow_users_slowusers__get at the same time. Go to the path operation \"Get /slowusers/ \" in all of the tabs. Use the \"Try it out\" button and execute the request in each tab, one right after the other. The tabs will wait for a bit and then some of them will show Internal Server Error . What happens \u00b6 The first tab will make your app create a connection to the database and wait for some seconds before replying back and closing the database connection. Then, for the request in the next tab, your app will wait for one second less, and so on. This means that it will end up finishing some of the last tabs' requests earlier than some of the previous ones. Then one the last requests that wait less seconds will try to open a database connection, but as one of those previous requests for the other tabs will probably be handled in the same thread as the first one, it will have the same database connection that is already open, and Peewee will throw an error and you will see it in the terminal, and the response will have an Internal Server Error . This will probably happen for more than one of those tabs. If you had multiple clients talking to your app exactly at the same time, this is what could happen. And as your app starts to handle more and more clients at the same time, the waiting time in a single request needs to be shorter and shorter to trigger the error. Fix Peewee with FastAPI \u00b6 Now go back to the file sql_app/database.py , and uncomment the line: db . _state = PeeweeConnectionState () And in the file sql_app/main.py file, uncomment the body of the async dependency reset_db_state() : async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () Terminate your running app and start it again. Repeat the same process with the 10 tabs. This time all of them will wait and you will get all the results without errors. ...You fixed it! Review all the files \u00b6 Remember you should have a directory named my_super_project (or however you want) that contains a sub-directory called sql_app . sql_app should have the following files: sql_app/__init__.py : is an empty file. sql_app/database.py : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () sql_app/models.py : import peewee from .database import db class User ( peewee . Model ): email = peewee . CharField ( unique = True , index = True ) hashed_password = peewee . CharField () is_active = peewee . BooleanField ( default = True ) class Meta : database = db class Item ( peewee . Model ): title = peewee . CharField ( index = True ) description = peewee . CharField ( index = True ) owner = peewee . ForeignKeyField ( User , backref = \"items\" ) class Meta : database = db sql_app/schemas.py : from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict sql_app/crud.py : from . import models , schemas def get_user ( user_id : int ): return models . User . filter ( models . User . id == user_id ) . first () def get_user_by_email ( email : str ): return models . User . filter ( models . User . email == email ) . first () def get_users ( skip : int = 0 , limit : int = 100 ): return list ( models . User . select () . offset ( skip ) . limit ( limit )) def create_user ( user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db_user . save () return db_user def get_items ( skip : int = 0 , limit : int = 100 ): return list ( models . Item . select () . offset ( skip ) . limit ( limit )) def create_user_item ( item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db_item . save () return db_item sql_app/main.py : import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Technical Details \u00b6 Warning These are very technical details that you probably don't need. The problem \u00b6 Peewee uses threading.local by default to store it's database \"state\" data (connection, transactions, etc). threading.local creates a value exclusive to the current thread, but an async framework would run all the code (e.g. for each request) in the same thread, and possibly not in order. On top of that, an async framework could run some sync code in a threadpool (using asyncio.run_in_executor ), but belonging to the same request. This means that, with Peewee's current implementation, multiple tasks could be using the same threading.local variable and end up sharing the same connection and data (that they shouldn't), and at the same time, if they execute sync I/O-blocking code in a threadpool (as with normal def functions in FastAPI, in path operations and dependencies), that code won't have access to the database state variables, even while it's part of the same request and it should be able to get access to the same database state. Context variables \u00b6 Python 3.7 has contextvars that can create a local variable very similar to threading.local , but also supporting these async features. There are several things to have in mind. The ContextVar has to be created at the top of the module, like: some_var = ContextVar ( \"some_var\" , default = \"default value\" ) To set a value used in the current \"context\" (e.g. for the current request) use: some_var . set ( \"new value\" ) To get a value anywhere inside of the context (e.g. in any part handling the current request) use: some_var . get () Set context variables in the async dependency reset_db_state() \u00b6 If some part of the async code sets the value with some_var.set(\"updated in function\") (e.g. like the async dependency), the rest of the code in it and the code that goes after (including code inside of async functions called with await ) will see that new value. So, in our case, if we set the Peewee state variable (with a default dict ) in the async dependency, all the rest of the internal code in our app will see this value and will be able to reuse it for the whole request. And the context variable would be set again for the next request, even if they are concurrent. Set database state in the dependency get_db() \u00b6 As get_db() is a normal def function, FastAPI will make it run in a threadpool, with a copy of the \"context\", holding the same value for the context variable (the dict with the reset database state). Then it can add database state to that dict , like the connection, etc. But if the value of the context variable (the default dict ) was set in that normal def function, it would create a new value that would stay only in that thread of the threadpool, and the rest of the code (like the path operation functions ) wouldn't have access to it. In get_db() we can only set values in the dict , but not the entire dict itself. So, we need to have the async dependency reset_db_state() to set the dict in the context variable. That way, all the code has access to the same dict for the database state for a single request. Connect and disconnect in the dependency get_db() \u00b6 Then the next question would be, why not just connect and disconnect the database in the async dependency itself, instead of in get_db() ? The async dependency has to be async for the context variable to be preserved for the rest of the request, but creating and closing the database connection is potentially blocking, so it could degrade performance if it was there. So we also need the normal def dependency get_db() .","title":"SQL (Relational) Databases with Peewee"},{"location":"advanced/sql-databases-peewee/#sql-relational-databases-with-peewee","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Warning If you are just starting, the tutorial SQL (Relational) Databases that uses SQLAlchemy should be enough. Feel free to skip this. If you are starting a project from scratch, you are probably better off with SQLAlchemy ORM ( SQL (Relational) Databases ), or any other async ORM. If you already have a code base that uses Peewee ORM , you can check here how to use it with FastAPI . Python 3.7+ required You will need Python 3.7 or above to safely use Peewee with FastAPI.","title":"SQL (Relational) Databases with Peewee"},{"location":"advanced/sql-databases-peewee/#peewee-for-async","text":"Peewee was not designed for async frameworks, or with them in mind. Peewee has some heavy assumptions about its defaults and about how it should be used. If you are developing an application with an older non-async framework, and can work with all its defaults, it can be a great tool . But if you need to change some of the defaults, support more than one predefined database, work with an async framework (like FastAPI), etc, you will need to add quite some complex extra code to override those defaults. Nevertheless, it's possible to do it, and here you'll see exactly what code you have to add to be able to use Peewee with FastAPI. Technical Details You can read more about Peewee's stand about async in Python in the docs , an issue , a PR .","title":"Peewee for async"},{"location":"advanced/sql-databases-peewee/#the-same-app","text":"We are going to create the same application as in the SQLAlchemy tutorial ( SQL (Relational) Databases ). Most of the code is actually the same. So, we are going to focus only on the differences.","title":"The same app"},{"location":"advanced/sql-databases-peewee/#file-structure","text":"Let's say you have a directory named my_super_project that contains a sub-directory called sql_app with a structure like this: . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u2514\u2500\u2500 schemas.py This is almost the same structure as we had for the SQLAlchemy tutorial. Now let's see what each file/module does.","title":"File structure"},{"location":"advanced/sql-databases-peewee/#create-the-peewee-parts","text":"Let's refer to the file sql_app/database.py .","title":"Create the Peewee parts"},{"location":"advanced/sql-databases-peewee/#the-standard-peewee-code","text":"Let's first check all the normal Peewee code, create a Peewee database: from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () Tip Have in mind that if you wanted to use a different database, like PostgreSQL, you couldn't just change the string. You would need to use a different Peewee database class.","title":"The standard Peewee code"},{"location":"advanced/sql-databases-peewee/#note","text":"The argument: check_same_thread = False is equivalent to the one in the SQLAlchemy tutorial: connect_args = { \"check_same_thread\" : False } ...it is needed only for SQLite . Technical Details Exactly the same technical details as in SQL (Relational) Databases apply.","title":"Note"},{"location":"advanced/sql-databases-peewee/#make-peewee-async-compatible-peeweeconnectionstate","text":"The main issue with Peewee and FastAPI is that Peewee relies heavily on Python's threading.local , and it doesn't have a direct way to override it or let you handle connections/sessions directly (as is done in the SQLAlchemy tutorial). And threading.local is not compatible with the new async features of modern Python. Technical Details threading.local is used to have a \"magic\" variable that has a different value for each thread. This was useful in older frameworks designed to have one single thread per request, no more, no less. Using this, each request would have its own database connection/session, which is the actual final goal. But FastAPI, using the new async features, could handle more than one request on the same thread. And at the same time, for a single request, it could run multiple things in different threads (in a threadpool), depending on if you use async def or normal def . This is what gives all the performance improvements to FastAPI. But Python 3.7 and above provide a more advanced alternative to threading.local , that can also be used in the places where threading.local would be used, but is compatible with the new async features. We are going to use that. It's called contextvars . We are going to override the internal parts of Peewee that use threading.local and replace them with contextvars , with the corresponding updates. This might seem a bit complex (and it actually is), you don't really need to completely understand how it works to use it. We will create a PeeweeConnectionState : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () This class inherits from a special internal class used by Peewee. It has all the logic to make Peewee use contextvars instead of threading.local . contextvars works a bit differently than threading.local . But the rest of Peewee's internal code assumes that this class works with threading.local . So, we need to do some extra tricks to make it work as if it was just using threading.local . The __init__ , __setattr__ , and __getattr__ implement all the required tricks for this to be used by Peewee without knowing that it is now compatible with FastAPI. Tip This will just make Peewee behave correctly when used with FastAPI. Not randomly opening or closing connections that are being used, creating errors, etc. But it doesn't give Peewee async super-powers. You should still use normal def functions and not async def .","title":"Make Peewee async-compatible PeeweeConnectionState"},{"location":"advanced/sql-databases-peewee/#use-the-custom-peeweeconnectionstate-class","text":"Now, overwrite the ._state internal attribute in the Peewee database db object using the new PeeweeConnectionState : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () Tip Make sure you overwrite db._state after creating db . Tip You would do the same for any other Peewee database, including PostgresqlDatabase , MySQLDatabase , etc.","title":"Use the custom PeeweeConnectionState class"},{"location":"advanced/sql-databases-peewee/#create-the-database-models","text":"Let's now see the file sql_app/models.py .","title":"Create the database models"},{"location":"advanced/sql-databases-peewee/#create-peewee-models-for-our-data","text":"Now create the Peewee models (classes) for User and Item . This is the same you would do if you followed the Peewee tutorial and updated the models to have the same data as in the SQLAlchemy tutorial. Tip Peewee also uses the term \" model \" to refer to these classes and instances that interact with the database. But Pydantic also uses the term \" model \" to refer to something different, the data validation, conversion, and documentation classes and instances. Import db from database (the file database.py from above) and use it here. import peewee from .database import db class User ( peewee . Model ): email = peewee . CharField ( unique = True , index = True ) hashed_password = peewee . CharField () is_active = peewee . BooleanField ( default = True ) class Meta : database = db class Item ( peewee . Model ): title = peewee . CharField ( index = True ) description = peewee . CharField ( index = True ) owner = peewee . ForeignKeyField ( User , backref = \"items\" ) class Meta : database = db Tip Peewee creates several magic attributes. It will automatically add an id attribute as an integer to be the primary key. It will chose the name of the tables based on the class names. For the Item , it will create an attribute owner_id with the integer ID of the User . But we don't declare it anywhere.","title":"Create Peewee models for our data"},{"location":"advanced/sql-databases-peewee/#create-the-pydantic-models","text":"Now let's check the file sql_app/schemas.py . Tip To avoid confusion between the Peewee models and the Pydantic models , we will have the file models.py with the Peewee models, and the file schemas.py with the Pydantic models. These Pydantic models define more or less a \"schema\" (a valid data shape). So this will help us avoiding confusion while using both.","title":"Create the Pydantic models"},{"location":"advanced/sql-databases-peewee/#create-the-pydantic-models-schemas","text":"Create all the same Pydantic models as in the SQLAlchemy tutorial: from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict Tip Here we are creating the models with an id . We didn't explicitly specify an id attribute in the Peewee models, but Peewee adds one automatically. We are also adding the magic owner_id attribute to Item .","title":"Create the Pydantic models / schemas"},{"location":"advanced/sql-databases-peewee/#create-a-peeweegetterdict-for-the-pydantic-models-schemas","text":"When you access a relationship in a Peewee object, like in some_user.items , Peewee doesn't provide a list of Item . It provides a special custom object of class ModelSelect . It's possible to create a list of its items with list(some_user.items) . But the object itself is not a list . And it's also not an actual Python generator . Because of this, Pydantic doesn't know by default how to convert it to a list of Pydantic models / schemas. But recent versions of Pydantic allow providing a custom class that inherits from pydantic.utils.GetterDict , to provide the functionality used when using the orm_mode = True to retrieve the values for ORM model attributes. We are going to create a custom PeeweeGetterDict class and use it in all the same Pydantic models / schemas that use orm_mode : from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict Here we are checking if the attribute that is being accessed (e.g. .items in some_user.items ) is an instance of peewee.ModelSelect . And if that's the case, just return a list with it. And then we use it in the Pydantic models / schemas that use orm_mode = True , with the configuration variable getter_dict = PeeweeGetterDict . Tip We only need to create one PeeweeGetterDict class, and we can use it in all the Pydantic models / schemas.","title":"Create a PeeweeGetterDict for the Pydantic models / schemas"},{"location":"advanced/sql-databases-peewee/#crud-utils","text":"Now let's see the file sql_app/crud.py .","title":"CRUD utils"},{"location":"advanced/sql-databases-peewee/#create-all-the-crud-utils","text":"Create all the same CRUD utils as in the SQLAlchemy tutorial, all the code is very similar: from . import models , schemas def get_user ( user_id : int ): return models . User . filter ( models . User . id == user_id ) . first () def get_user_by_email ( email : str ): return models . User . filter ( models . User . email == email ) . first () def get_users ( skip : int = 0 , limit : int = 100 ): return list ( models . User . select () . offset ( skip ) . limit ( limit )) def create_user ( user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db_user . save () return db_user def get_items ( skip : int = 0 , limit : int = 100 ): return list ( models . Item . select () . offset ( skip ) . limit ( limit )) def create_user_item ( item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db_item . save () return db_item There are some differences with the code for the SQLAlchemy tutorial. We don't pass a db attribute around. Instead we use the models directly. This is because the db object is a global object, that includes all the connection logic. That's why we had to do all the contextvars updates above. Aso, when returning several objects, like in get_users , we directly call list , like in: list ( models . User . select ()) This is for the same reason that we had to create a custom PeeweeGetterDict . But by returning something that is already a list instead of the peewee.ModelSelect the response_model in the path operation with List[models.User] (that we'll see later) will work correctly.","title":"Create all the CRUD utils"},{"location":"advanced/sql-databases-peewee/#main-fastapi-app","text":"And now in the file sql_app/main.py let's integrate and use all the other parts we created before.","title":"Main FastAPI app"},{"location":"advanced/sql-databases-peewee/#create-the-database-tables","text":"In a very simplistic way create the database tables: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users","title":"Create the database tables"},{"location":"advanced/sql-databases-peewee/#create-a-dependency","text":"Create a dependency that will connect the database right at the beginning of a request and disconnect it at the end: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Here we have an empty yield because we are actually not using the database object directly. It is connecting to the database and storing the connection data in an internal variable that is independent for each request (using the contextvars tricks from above). Because the database connection is potentially I/O blocking, this dependency is created with a normal def function. And then, in each path operation function that needs to access the database we add it as a dependency. But we are not using the value given by this dependency (it actually doesn't give any value, as it has an empty yield ). So, we don't add it to the path operation function but to the path operation decorator in the dependencies parameter: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users","title":"Create a dependency"},{"location":"advanced/sql-databases-peewee/#context-variable-sub-dependency","text":"For all the contextvars parts to work, we need to make sure we have an independent value in the ContextVar for each request that uses the database, and that value will be used as the database state (connection, transactions, etc) for the whole request. For that, we need to create another async dependency reset_db_state() that is used as a sub-dependency in get_db() . It will set the value for the context variable (with just a default dict ) that will be used as the database state for the whole request. And then the dependency get_db() will store in it the database state (connection, transactions, etc). import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users For the next request , as we will reset that context variable again in the async dependency reset_db_state() and then create a new connection in the get_db() dependency, that new request will have its own database state (connection, transactions, etc). Tip As FastAPI is an async framework, one request could start being processed, and before finishing, another request could be received and start processing as well, and it all could be processed in the same thread. But context variables are aware of these async features, so, a Peewee database state set in the async dependency reset_db_state() will keep its own data throughout the entire request. And at the same time, the other concurrent request will have its own database state that will be independent for the whole request.","title":"Context variable sub-dependency"},{"location":"advanced/sql-databases-peewee/#peewee-proxy","text":"If you are using a Peewee Proxy , the actual database is at db.obj . So, you would reset it with: async def reset_db_state (): database . db . obj . _state . _state . set ( db_state_default . copy ()) database . db . obj . _state . reset ()","title":"Peewee Proxy"},{"location":"advanced/sql-databases-peewee/#create-your-fastapi-path-operations","text":"Now, finally, here's the standard FastAPI path operations code. import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users","title":"Create your FastAPI path operations"},{"location":"advanced/sql-databases-peewee/#about-def-vs-async-def","text":"The same as with SQLAlchemy, we are not doing something like: user = await models . User . select () . first () ...but instead we are using: user = models . User . select () . first () So, again, we should declare the path operation functions and the dependency without async def , just with a normal def , as: # Something goes here def read_users ( skip : int = 0 , limit : int = 100 ): # Something goes here","title":"About def vs async def"},{"location":"advanced/sql-databases-peewee/#testing-peewee-with-async","text":"This example includes an extra path operation that simulates a long processing request with time.sleep(sleep_time) . It will have the database connection open at the beginning and will just wait some seconds before replying back. And each new request will wait one second less. This will easily let you test that your app with Peewee and FastAPI is behaving correctly with all the stuff about threads. If you want to check how Peewee would break your app if used without modification, go the the sql_app/database.py file and comment the line: # db._state = PeeweeConnectionState() And in the file sql_app/main.py file, comment the body of the async dependency reset_db_state() and replace it with a pass : async def reset_db_state (): # database.db._state._state.set(db_state_default.copy()) # database.db._state.reset() pass Then run your app with Uvicorn: $ uvicorn sql_app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Open your browser at http://127.0.0.1:8000/docs and create a couple of users. Then open 10 tabs at http://127.0.0.1:8000/docs#/default/read_slow_users_slowusers__get at the same time. Go to the path operation \"Get /slowusers/ \" in all of the tabs. Use the \"Try it out\" button and execute the request in each tab, one right after the other. The tabs will wait for a bit and then some of them will show Internal Server Error .","title":"Testing Peewee with async"},{"location":"advanced/sql-databases-peewee/#what-happens","text":"The first tab will make your app create a connection to the database and wait for some seconds before replying back and closing the database connection. Then, for the request in the next tab, your app will wait for one second less, and so on. This means that it will end up finishing some of the last tabs' requests earlier than some of the previous ones. Then one the last requests that wait less seconds will try to open a database connection, but as one of those previous requests for the other tabs will probably be handled in the same thread as the first one, it will have the same database connection that is already open, and Peewee will throw an error and you will see it in the terminal, and the response will have an Internal Server Error . This will probably happen for more than one of those tabs. If you had multiple clients talking to your app exactly at the same time, this is what could happen. And as your app starts to handle more and more clients at the same time, the waiting time in a single request needs to be shorter and shorter to trigger the error.","title":"What happens"},{"location":"advanced/sql-databases-peewee/#fix-peewee-with-fastapi","text":"Now go back to the file sql_app/database.py , and uncomment the line: db . _state = PeeweeConnectionState () And in the file sql_app/main.py file, uncomment the body of the async dependency reset_db_state() : async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () Terminate your running app and start it again. Repeat the same process with the 10 tabs. This time all of them will wait and you will get all the results without errors. ...You fixed it!","title":"Fix Peewee with FastAPI"},{"location":"advanced/sql-databases-peewee/#review-all-the-files","text":"Remember you should have a directory named my_super_project (or however you want) that contains a sub-directory called sql_app . sql_app should have the following files: sql_app/__init__.py : is an empty file. sql_app/database.py : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () sql_app/models.py : import peewee from .database import db class User ( peewee . Model ): email = peewee . CharField ( unique = True , index = True ) hashed_password = peewee . CharField () is_active = peewee . BooleanField ( default = True ) class Meta : database = db class Item ( peewee . Model ): title = peewee . CharField ( index = True ) description = peewee . CharField ( index = True ) owner = peewee . ForeignKeyField ( User , backref = \"items\" ) class Meta : database = db sql_app/schemas.py : from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict sql_app/crud.py : from . import models , schemas def get_user ( user_id : int ): return models . User . filter ( models . User . id == user_id ) . first () def get_user_by_email ( email : str ): return models . User . filter ( models . User . email == email ) . first () def get_users ( skip : int = 0 , limit : int = 100 ): return list ( models . User . select () . offset ( skip ) . limit ( limit )) def create_user ( user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db_user . save () return db_user def get_items ( skip : int = 0 , limit : int = 100 ): return list ( models . Item . select () . offset ( skip ) . limit ( limit )) def create_user_item ( item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db_item . save () return db_item sql_app/main.py : import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users","title":"Review all the files"},{"location":"advanced/sql-databases-peewee/#technical-details","text":"Warning These are very technical details that you probably don't need.","title":"Technical Details"},{"location":"advanced/sql-databases-peewee/#the-problem","text":"Peewee uses threading.local by default to store it's database \"state\" data (connection, transactions, etc). threading.local creates a value exclusive to the current thread, but an async framework would run all the code (e.g. for each request) in the same thread, and possibly not in order. On top of that, an async framework could run some sync code in a threadpool (using asyncio.run_in_executor ), but belonging to the same request. This means that, with Peewee's current implementation, multiple tasks could be using the same threading.local variable and end up sharing the same connection and data (that they shouldn't), and at the same time, if they execute sync I/O-blocking code in a threadpool (as with normal def functions in FastAPI, in path operations and dependencies), that code won't have access to the database state variables, even while it's part of the same request and it should be able to get access to the same database state.","title":"The problem"},{"location":"advanced/sql-databases-peewee/#context-variables","text":"Python 3.7 has contextvars that can create a local variable very similar to threading.local , but also supporting these async features. There are several things to have in mind. The ContextVar has to be created at the top of the module, like: some_var = ContextVar ( \"some_var\" , default = \"default value\" ) To set a value used in the current \"context\" (e.g. for the current request) use: some_var . set ( \"new value\" ) To get a value anywhere inside of the context (e.g. in any part handling the current request) use: some_var . get ()","title":"Context variables"},{"location":"advanced/sql-databases-peewee/#set-context-variables-in-the-async-dependency-reset_db_state","text":"If some part of the async code sets the value with some_var.set(\"updated in function\") (e.g. like the async dependency), the rest of the code in it and the code that goes after (including code inside of async functions called with await ) will see that new value. So, in our case, if we set the Peewee state variable (with a default dict ) in the async dependency, all the rest of the internal code in our app will see this value and will be able to reuse it for the whole request. And the context variable would be set again for the next request, even if they are concurrent.","title":"Set context variables in the async dependency reset_db_state()"},{"location":"advanced/sql-databases-peewee/#set-database-state-in-the-dependency-get_db","text":"As get_db() is a normal def function, FastAPI will make it run in a threadpool, with a copy of the \"context\", holding the same value for the context variable (the dict with the reset database state). Then it can add database state to that dict , like the connection, etc. But if the value of the context variable (the default dict ) was set in that normal def function, it would create a new value that would stay only in that thread of the threadpool, and the rest of the code (like the path operation functions ) wouldn't have access to it. In get_db() we can only set values in the dict , but not the entire dict itself. So, we need to have the async dependency reset_db_state() to set the dict in the context variable. That way, all the code has access to the same dict for the database state for a single request.","title":"Set database state in the dependency get_db()"},{"location":"advanced/sql-databases-peewee/#connect-and-disconnect-in-the-dependency-get_db","text":"Then the next question would be, why not just connect and disconnect the database in the async dependency itself, instead of in get_db() ? The async dependency has to be async for the context variable to be preserved for the rest of the request, but creating and closing the database connection is potentially blocking, so it could degrade performance if it was there. So we also need the normal def dependency get_db() .","title":"Connect and disconnect in the dependency get_db()"},{"location":"advanced/sub-applications/","text":"\ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 - \ub9c8\uc6b4\ud2b8 \u00b6 \ub9cc\uc57d \uac01\uac01\uc758 \ub3c5\ub9bd\uc801\uc778 OpenAPI\uc640 \ubb38\uc11c UI\ub97c \uac16\ub294 \ub450 \uac1c\uc758 \ub3c5\ub9bd\uc801\uc778 FastAPI \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc774 \ud544\uc694\ud558\ub2e4\uba74, \uba54\uc778 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ud558\ub098 (\ub610\ub294 \uadf8 \uc774\uc0c1\uc758) \ud558\uc704-\uc751\uc6a9\ud504\ub85c\uadf8\ub7a8(\ub4e4)\uc744 \u201c\ub9c8\uc6b4\ud2b8\"\ud574\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 \ub9c8\uc6b4\ud2b8 \u00b6 \u201c\ub9c8\uc6b4\ud2b8\"\uc774\ub780 \uc644\uc804\ud788 \u201c\ub3c5\ub9bd\uc801\uc778\" \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \ud2b9\uc815 \uacbd\ub85c\uc5d0 \ucd94\uac00\ud558\uc5ec \ud574\ub2f9 \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc120\uc5b8\ub41c \uacbd\ub85c \ub3d9\uc791 \uc744 \ud1b5\ud574 \ud574\ub2f9 \uacbd\ub85c \uc544\ub798\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \uc791\uc5c5\ub4e4\uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ucd5c\uc0c1\ub2e8 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 \u00b6 \uba3c\uc800, \uba54\uc778, \ucd5c\uc0c1\ub2e8\uc758 FastAPI \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uacfc \uc774\uac83\uc758 \uacbd\ub85c \ub3d9\uc791 \uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi ) \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 \u00b6 \ub2e4\uc74c\uc73c\ub85c, \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uacfc \uc774\uac83\uc758 \uacbd\ub85c \ub3d9\uc791 \uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4: \uc774 \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc740 \ub610 \ub2e4\ub978 \ud45c\uc900 FastAPI \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \ub2e4\ub9cc \uc774\uac83\uc740 \u201c\ub9c8\uc6b4\ud2b8\u201d\ub420 \uac83\uc785\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi ) \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 \ub9c8\uc6b4\ud2b8 \u00b6 \ucd5c\uc0c1\ub2e8 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8, app \uc5d0 \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8, subapi \ub97c \ub9c8\uc6b4\ud2b8\ud569\ub2c8\ub2e4. \uc774 \uc608\uc2dc\uc5d0\uc11c, \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc158\uc740 /subapi \uacbd\ub85c\uc5d0 \ub9c8\uc6b4\ud2b8 \ub420 \uac83\uc785\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi ) \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub41c API \ubb38\uc11c \ud655\uc778 \u00b6 \uc774\uc81c, uvicorn \uc73c\ub85c \uba54\uc778 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud558\uc2ed\uc2dc\uc624. \ub2f9\uc2e0\uc758 \ud30c\uc77c\uc774 main.py \ub77c\uba74, \uc774\ub807\uac8c \uc2e4\ud589\ud569\ub2c8\ub2e4: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \uadf8\ub9ac\uace0 http://127.0.0.1:8000/docs \uc5d0\uc11c \ubb38\uc11c\ub97c \uc5ec\uc2ed\uc2dc\uc624. \uba54\uc778 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc758 \uacbd\ub85c \ub3d9\uc791 \ub9cc\uc744 \ud3ec\ud568\ud558\ub294, \uba54\uc778 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 \ub300\ud55c \uc790\ub3d9 API \ubb38\uc11c\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ub2e4\uc74c\uc73c\ub85c, http://127.0.0.1:8000/subapi/docs \uc5d0\uc11c \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc758 \ubb38\uc11c\ub97c \uc5ec\uc2ed\uc2dc\uc624. \ud558\uc704 \uacbd\ub85c \uc811\ub450\uc0ac /subapi \uc544\ub798\uc5d0 \uc120\uc5b8\ub41c \uacbd\ub85c \ub3d9\uc791 \uc744 \ud3ec\ud568\ud558\ub294, \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 \ub300\ud55c \uc790\ub3d9 API \ubb38\uc11c\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ub450 \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4 \uc911 \uc5b4\ub290 \ud558\ub098\ub97c \uc0ac\uc6a9\ud574\uc57c\ud558\ub294 \uacbd\uc6b0, \ube0c\ub77c\uc6b0\uc800\ub294 \ud2b9\uc815 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 \ub610\ub294 \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uacfc \uac01\uac01 \ud1b5\uc2e0\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc62c\ubc14\ub974\uac8c \ub3d9\uc791\ud560 \uac83\uc785\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d: root_path \u00b6 \uc704\uc5d0 \uc124\uba85\ub41c \uac83\uacfc \uac19\uc774 \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \ub9c8\uc6b4\ud2b8\ud558\ub294 \uacbd\uc6b0, FastAPI\ub294 root_path \ub77c\uace0 \ud558\ub294 ASGI \uba85\uc138\uc758 \ub9e4\ucee4\ub2c8\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 \ub300\ud55c \ub9c8\uc6b4\ud2b8 \uacbd\ub85c \ud1b5\uc2e0\uc744 \ucc98\ub9ac\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574, \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc740 \ubb38\uc11c UI\ub97c \uc704\ud574 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc778\uc9c0\ud569\ub2c8\ub2e4. \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0\ub3c4 \uc5ed\uc2dc \ub2e4\ub978 \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \ub9c8\uc6b4\ud2b8\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\uba70 FastAPI\uac00 \ubaa8\ub4e0 root_path \ub4e4\uc744 \uc790\ub3d9\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\uae30 \ub54c\ubb38\uc5d0 \ubaa8\ub4e0 \uac83\uc740 \uc62c\ubc14\ub974\uac8c \ub3d9\uc791\ud560 \uac83\uc785\ub2c8\ub2e4. root_path \uc640 \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574\uc11c\ub294 \ud504\ub85d\uc2dc\uc758 \ub4b7\ub2e8 \uc139\uc158\uc5d0\uc11c \ubc30\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 - \ub9c8\uc6b4\ud2b8"},{"location":"advanced/sub-applications/#-","text":"\ub9cc\uc57d \uac01\uac01\uc758 \ub3c5\ub9bd\uc801\uc778 OpenAPI\uc640 \ubb38\uc11c UI\ub97c \uac16\ub294 \ub450 \uac1c\uc758 \ub3c5\ub9bd\uc801\uc778 FastAPI \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc774 \ud544\uc694\ud558\ub2e4\uba74, \uba54\uc778 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ud558\ub098 (\ub610\ub294 \uadf8 \uc774\uc0c1\uc758) \ud558\uc704-\uc751\uc6a9\ud504\ub85c\uadf8\ub7a8(\ub4e4)\uc744 \u201c\ub9c8\uc6b4\ud2b8\"\ud574\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 - \ub9c8\uc6b4\ud2b8"},{"location":"advanced/sub-applications/#fastapi","text":"\u201c\ub9c8\uc6b4\ud2b8\"\uc774\ub780 \uc644\uc804\ud788 \u201c\ub3c5\ub9bd\uc801\uc778\" \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \ud2b9\uc815 \uacbd\ub85c\uc5d0 \ucd94\uac00\ud558\uc5ec \ud574\ub2f9 \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc120\uc5b8\ub41c \uacbd\ub85c \ub3d9\uc791 \uc744 \ud1b5\ud574 \ud574\ub2f9 \uacbd\ub85c \uc544\ub798\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \uc791\uc5c5\ub4e4\uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.","title":"FastAPI \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 \ub9c8\uc6b4\ud2b8"},{"location":"advanced/sub-applications/#_1","text":"\uba3c\uc800, \uba54\uc778, \ucd5c\uc0c1\ub2e8\uc758 FastAPI \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uacfc \uc774\uac83\uc758 \uacbd\ub85c \ub3d9\uc791 \uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi )","title":"\ucd5c\uc0c1\ub2e8 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8"},{"location":"advanced/sub-applications/#_2","text":"\ub2e4\uc74c\uc73c\ub85c, \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uacfc \uc774\uac83\uc758 \uacbd\ub85c \ub3d9\uc791 \uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4: \uc774 \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc740 \ub610 \ub2e4\ub978 \ud45c\uc900 FastAPI \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \ub2e4\ub9cc \uc774\uac83\uc740 \u201c\ub9c8\uc6b4\ud2b8\u201d\ub420 \uac83\uc785\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi )","title":"\ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8"},{"location":"advanced/sub-applications/#_3","text":"\ucd5c\uc0c1\ub2e8 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8, app \uc5d0 \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8, subapi \ub97c \ub9c8\uc6b4\ud2b8\ud569\ub2c8\ub2e4. \uc774 \uc608\uc2dc\uc5d0\uc11c, \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc158\uc740 /subapi \uacbd\ub85c\uc5d0 \ub9c8\uc6b4\ud2b8 \ub420 \uac83\uc785\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi )","title":"\ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 \ub9c8\uc6b4\ud2b8"},{"location":"advanced/sub-applications/#api","text":"\uc774\uc81c, uvicorn \uc73c\ub85c \uba54\uc778 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud558\uc2ed\uc2dc\uc624. \ub2f9\uc2e0\uc758 \ud30c\uc77c\uc774 main.py \ub77c\uba74, \uc774\ub807\uac8c \uc2e4\ud589\ud569\ub2c8\ub2e4: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \uadf8\ub9ac\uace0 http://127.0.0.1:8000/docs \uc5d0\uc11c \ubb38\uc11c\ub97c \uc5ec\uc2ed\uc2dc\uc624. \uba54\uc778 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc758 \uacbd\ub85c \ub3d9\uc791 \ub9cc\uc744 \ud3ec\ud568\ud558\ub294, \uba54\uc778 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 \ub300\ud55c \uc790\ub3d9 API \ubb38\uc11c\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ub2e4\uc74c\uc73c\ub85c, http://127.0.0.1:8000/subapi/docs \uc5d0\uc11c \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc758 \ubb38\uc11c\ub97c \uc5ec\uc2ed\uc2dc\uc624. \ud558\uc704 \uacbd\ub85c \uc811\ub450\uc0ac /subapi \uc544\ub798\uc5d0 \uc120\uc5b8\ub41c \uacbd\ub85c \ub3d9\uc791 \uc744 \ud3ec\ud568\ud558\ub294, \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 \ub300\ud55c \uc790\ub3d9 API \ubb38\uc11c\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ub450 \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4 \uc911 \uc5b4\ub290 \ud558\ub098\ub97c \uc0ac\uc6a9\ud574\uc57c\ud558\ub294 \uacbd\uc6b0, \ube0c\ub77c\uc6b0\uc800\ub294 \ud2b9\uc815 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 \ub610\ub294 \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uacfc \uac01\uac01 \ud1b5\uc2e0\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc62c\ubc14\ub974\uac8c \ub3d9\uc791\ud560 \uac83\uc785\ub2c8\ub2e4.","title":"\uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub41c API \ubb38\uc11c \ud655\uc778"},{"location":"advanced/sub-applications/#root_path","text":"\uc704\uc5d0 \uc124\uba85\ub41c \uac83\uacfc \uac19\uc774 \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \ub9c8\uc6b4\ud2b8\ud558\ub294 \uacbd\uc6b0, FastAPI\ub294 root_path \ub77c\uace0 \ud558\ub294 ASGI \uba85\uc138\uc758 \ub9e4\ucee4\ub2c8\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 \ub300\ud55c \ub9c8\uc6b4\ud2b8 \uacbd\ub85c \ud1b5\uc2e0\uc744 \ucc98\ub9ac\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574, \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc740 \ubb38\uc11c UI\ub97c \uc704\ud574 \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc778\uc9c0\ud569\ub2c8\ub2e4. \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0\ub3c4 \uc5ed\uc2dc \ub2e4\ub978 \ud558\uc704 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc744 \ub9c8\uc6b4\ud2b8\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\uba70 FastAPI\uac00 \ubaa8\ub4e0 root_path \ub4e4\uc744 \uc790\ub3d9\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\uae30 \ub54c\ubb38\uc5d0 \ubaa8\ub4e0 \uac83\uc740 \uc62c\ubc14\ub974\uac8c \ub3d9\uc791\ud560 \uac83\uc785\ub2c8\ub2e4. root_path \uc640 \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574\uc11c\ub294 \ud504\ub85d\uc2dc\uc758 \ub4b7\ub2e8 \uc139\uc158\uc5d0\uc11c \ubc30\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d: root_path"},{"location":"advanced/templates/","text":"Templates \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use any template engine you want with FastAPI . A common choice is Jinja2, the same one used by Flask and other tools. There are utilities to configure it easily that you can use directly in your FastAPI application (provided by Starlette). Install dependencies \u00b6 Install jinja2 : $ pip install jinja2 ---> 100% Using Jinja2Templates \u00b6 Import Jinja2Templates . Create a templates object that you can re-use later. Declare a Request parameter in the path operation that will return a template. Use the templates you created to render and return a TemplateResponse , passing the request as one of the key-value pairs in the Jinja2 \"context\". from fastapi import FastAPI , Request from fastapi.responses import HTMLResponse from fastapi.staticfiles import StaticFiles from fastapi.templating import Jinja2Templates app = FastAPI () app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) templates = Jinja2Templates ( directory = \"templates\" ) @app . get ( \"/items/ {id} \" , response_class = HTMLResponse ) async def read_item ( request : Request , id : str ): return templates . TemplateResponse ( \"item.html\" , { \"request\" : request , \"id\" : id }) Note Notice that you have to pass the request as part of the key-value pairs in the context for Jinja2. So, you also have to declare it in your path operation . Tip By declaring response_class=HTMLResponse the docs UI will be able to know that the response will be HTML. Technical Details You could also use from starlette.templating import Jinja2Templates . FastAPI provides the same starlette.templating as fastapi.templating just as a convenience for you, the developer. But most of the available responses come directly from Starlette. The same with Request and StaticFiles . Writing templates \u00b6 Then you can write a template at templates/item.html with: <html> <head> <title>Item Details</title> <link href=\" {{ url_for ( 'static' , path = '/styles.css' ) }} \" rel=\"stylesheet\"> </head> <body> <h1>Item ID: {{ id }} </h1> </body> </html> It will show the id taken from the \"context\" dict you passed: { \"request\" : request , \"id\" : id } Templates and static files \u00b6 And you can also use url_for() inside of the template, and use it, for example, with the StaticFiles you mounted. <html> <head> <title>Item Details</title> <link href=\" {{ url_for ( 'static' , path = '/styles.css' ) }} \" rel=\"stylesheet\"> </head> <body> <h1>Item ID: {{ id }} </h1> </body> </html> In this example, it would link to a CSS file at static/styles.css with: h1 { color : green ; } And because you are using StaticFiles , that CSS file would be served automatically by your FastAPI application at the URL /static/styles.css . More details \u00b6 For more details, including how to test templates, check Starlette's docs on templates .","title":"Templates"},{"location":"advanced/templates/#templates","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use any template engine you want with FastAPI . A common choice is Jinja2, the same one used by Flask and other tools. There are utilities to configure it easily that you can use directly in your FastAPI application (provided by Starlette).","title":"Templates"},{"location":"advanced/templates/#install-dependencies","text":"Install jinja2 : $ pip install jinja2 ---> 100%","title":"Install dependencies"},{"location":"advanced/templates/#using-jinja2templates","text":"Import Jinja2Templates . Create a templates object that you can re-use later. Declare a Request parameter in the path operation that will return a template. Use the templates you created to render and return a TemplateResponse , passing the request as one of the key-value pairs in the Jinja2 \"context\". from fastapi import FastAPI , Request from fastapi.responses import HTMLResponse from fastapi.staticfiles import StaticFiles from fastapi.templating import Jinja2Templates app = FastAPI () app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) templates = Jinja2Templates ( directory = \"templates\" ) @app . get ( \"/items/ {id} \" , response_class = HTMLResponse ) async def read_item ( request : Request , id : str ): return templates . TemplateResponse ( \"item.html\" , { \"request\" : request , \"id\" : id }) Note Notice that you have to pass the request as part of the key-value pairs in the context for Jinja2. So, you also have to declare it in your path operation . Tip By declaring response_class=HTMLResponse the docs UI will be able to know that the response will be HTML. Technical Details You could also use from starlette.templating import Jinja2Templates . FastAPI provides the same starlette.templating as fastapi.templating just as a convenience for you, the developer. But most of the available responses come directly from Starlette. The same with Request and StaticFiles .","title":"Using Jinja2Templates"},{"location":"advanced/templates/#writing-templates","text":"Then you can write a template at templates/item.html with: <html> <head> <title>Item Details</title> <link href=\" {{ url_for ( 'static' , path = '/styles.css' ) }} \" rel=\"stylesheet\"> </head> <body> <h1>Item ID: {{ id }} </h1> </body> </html> It will show the id taken from the \"context\" dict you passed: { \"request\" : request , \"id\" : id }","title":"Writing templates"},{"location":"advanced/templates/#templates-and-static-files","text":"And you can also use url_for() inside of the template, and use it, for example, with the StaticFiles you mounted. <html> <head> <title>Item Details</title> <link href=\" {{ url_for ( 'static' , path = '/styles.css' ) }} \" rel=\"stylesheet\"> </head> <body> <h1>Item ID: {{ id }} </h1> </body> </html> In this example, it would link to a CSS file at static/styles.css with: h1 { color : green ; } And because you are using StaticFiles , that CSS file would be served automatically by your FastAPI application at the URL /static/styles.css .","title":"Templates and static files"},{"location":"advanced/templates/#more-details","text":"For more details, including how to test templates, check Starlette's docs on templates .","title":"More details"},{"location":"advanced/testing-database/","text":"Testing a Database \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use the same dependency overrides from Testing Dependencies with Overrides to alter a database for testing. You could want to set up a different database for testing, rollback the data after the tests, pre-fill it with some testing data, etc. The main idea is exactly the same you saw in that previous chapter. Add tests for the SQL app \u00b6 Let's update the example from SQL (Relational) Databases to use a testing database. All the app code is the same, you can go back to that chapter check how it was. The only changes here are in the new testing file. Your normal dependency get_db() would return a database session. In the test, you could use a dependency override to return your custom database session instead of the one that would be used normally. In this example we'll create a temporary database only for the tests. File structure \u00b6 We create a new file at sql_app/tests/test_sql_app.py . So the new file structure looks like: . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 models.py \u251c\u2500\u2500 schemas.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_sql_app.py Create the new database session \u00b6 First, we create a new database session with the new database. For the tests we'll use a file test.db instead of sql_app.db . But the rest of the session code is more or less the same, we just copy it. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id Tip You could reduce duplication in that code by putting it in a function and using it from both database.py and tests/test_sql_app.py . For simplicity and to focus on the specific testing code, we are just copying it. Create the database \u00b6 Because now we are going to use a new database in a new file, we need to make sure we create the database with: Base . metadata . create_all ( bind = engine ) That is normally called in main.py , but the line in main.py uses the database file sql_app.db , and we need to make sure we create test.db for the tests. So we add that line here, with the new file. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id Dependency override \u00b6 Now we create the dependency override and add it to the overrides for our app. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id Tip The code for override_get_db() is almost exactly the same as for get_db() , but in override_get_db() we use the TestingSessionLocal for the testing database instead. Test the app \u00b6 Then we can just test the app as normally. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id And all the modifications we made in the database during the tests will be in the test.db database instead of the main sql_app.db .","title":"Testing a Database"},{"location":"advanced/testing-database/#testing-a-database","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use the same dependency overrides from Testing Dependencies with Overrides to alter a database for testing. You could want to set up a different database for testing, rollback the data after the tests, pre-fill it with some testing data, etc. The main idea is exactly the same you saw in that previous chapter.","title":"Testing a Database"},{"location":"advanced/testing-database/#add-tests-for-the-sql-app","text":"Let's update the example from SQL (Relational) Databases to use a testing database. All the app code is the same, you can go back to that chapter check how it was. The only changes here are in the new testing file. Your normal dependency get_db() would return a database session. In the test, you could use a dependency override to return your custom database session instead of the one that would be used normally. In this example we'll create a temporary database only for the tests.","title":"Add tests for the SQL app"},{"location":"advanced/testing-database/#file-structure","text":"We create a new file at sql_app/tests/test_sql_app.py . So the new file structure looks like: . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 models.py \u251c\u2500\u2500 schemas.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_sql_app.py","title":"File structure"},{"location":"advanced/testing-database/#create-the-new-database-session","text":"First, we create a new database session with the new database. For the tests we'll use a file test.db instead of sql_app.db . But the rest of the session code is more or less the same, we just copy it. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id Tip You could reduce duplication in that code by putting it in a function and using it from both database.py and tests/test_sql_app.py . For simplicity and to focus on the specific testing code, we are just copying it.","title":"Create the new database session"},{"location":"advanced/testing-database/#create-the-database","text":"Because now we are going to use a new database in a new file, we need to make sure we create the database with: Base . metadata . create_all ( bind = engine ) That is normally called in main.py , but the line in main.py uses the database file sql_app.db , and we need to make sure we create test.db for the tests. So we add that line here, with the new file. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id","title":"Create the database"},{"location":"advanced/testing-database/#dependency-override","text":"Now we create the dependency override and add it to the overrides for our app. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id Tip The code for override_get_db() is almost exactly the same as for get_db() , but in override_get_db() we use the TestingSessionLocal for the testing database instead.","title":"Dependency override"},{"location":"advanced/testing-database/#test-the-app","text":"Then we can just test the app as normally. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id And all the modifications we made in the database during the tests will be in the test.db database instead of the main sql_app.db .","title":"Test the app"},{"location":"advanced/testing-dependencies/","text":"Testing Dependencies with Overrides \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Overriding dependencies during testing \u00b6 There are some scenarios where you might want to override a dependency during testing. You don't want the original dependency to run (nor any of the sub-dependencies it might have). Instead, you want to provide a different dependency that will be used only during tests (possibly only some specific tests), and will provide a value that can be used where the value of the original dependency was used. Use cases: external service \u00b6 An example could be that you have an external authentication provider that you need to call. You send it a token and it returns an authenticated user. This provider might be charging you per request, and calling it might take some extra time than if you had a fixed mock user for tests. You probably want to test the external provider once, but not necessarily call it for every test that runs. In this case, you can override the dependency that calls that provider, and use a custom dependency that returns a mock user, only for your tests. Use the app.dependency_overrides attribute \u00b6 For these cases, your FastAPI application has an attribute app.dependency_overrides , it is a simple dict . To override a dependency for testing, you put as a key the original dependency (a function), and as the value, your dependency override (another function). And then FastAPI will call that override instead of the original dependency. from typing import Union from fastapi import Depends , FastAPI from fastapi.testclient import TestClient app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return { \"message\" : \"Hello Items!\" , \"params\" : commons } @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return { \"message\" : \"Hello Users!\" , \"params\" : commons } client = TestClient ( app ) async def override_dependency ( q : Union [ str , None ] = None ): return { \"q\" : q , \"skip\" : 5 , \"limit\" : 10 } app . dependency_overrides [ common_parameters ] = override_dependency def test_override_in_items (): response = client . get ( \"/items/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : None , \"skip\" : 5 , \"limit\" : 10 }, } def test_override_in_items_with_q (): response = client . get ( \"/items/?q=foo\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : \"foo\" , \"skip\" : 5 , \"limit\" : 10 }, } def test_override_in_items_with_params (): response = client . get ( \"/items/?q=foo&skip=100&limit=200\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : \"foo\" , \"skip\" : 5 , \"limit\" : 10 }, } Tip You can set a dependency override for a dependency used anywhere in your FastAPI application. The original dependency could be used in a path operation function , a path operation decorator (when you don't use the return value), a .include_router() call, etc. FastAPI will still be able to override it. Then you can reset your overrides (remove them) by setting app.dependency_overrides to be an empty dict : app . dependency_overrides = {} Tip If you want to override a dependency only during some tests, you can set the override at the beginning of the test (inside the test function) and reset it at the end (at the end of the test function).","title":"Testing Dependencies with Overrides"},{"location":"advanced/testing-dependencies/#testing-dependencies-with-overrides","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing .","title":"Testing Dependencies with Overrides"},{"location":"advanced/testing-dependencies/#overriding-dependencies-during-testing","text":"There are some scenarios where you might want to override a dependency during testing. You don't want the original dependency to run (nor any of the sub-dependencies it might have). Instead, you want to provide a different dependency that will be used only during tests (possibly only some specific tests), and will provide a value that can be used where the value of the original dependency was used.","title":"Overriding dependencies during testing"},{"location":"advanced/testing-dependencies/#use-cases-external-service","text":"An example could be that you have an external authentication provider that you need to call. You send it a token and it returns an authenticated user. This provider might be charging you per request, and calling it might take some extra time than if you had a fixed mock user for tests. You probably want to test the external provider once, but not necessarily call it for every test that runs. In this case, you can override the dependency that calls that provider, and use a custom dependency that returns a mock user, only for your tests.","title":"Use cases: external service"},{"location":"advanced/testing-dependencies/#use-the-appdependency_overrides-attribute","text":"For these cases, your FastAPI application has an attribute app.dependency_overrides , it is a simple dict . To override a dependency for testing, you put as a key the original dependency (a function), and as the value, your dependency override (another function). And then FastAPI will call that override instead of the original dependency. from typing import Union from fastapi import Depends , FastAPI from fastapi.testclient import TestClient app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return { \"message\" : \"Hello Items!\" , \"params\" : commons } @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return { \"message\" : \"Hello Users!\" , \"params\" : commons } client = TestClient ( app ) async def override_dependency ( q : Union [ str , None ] = None ): return { \"q\" : q , \"skip\" : 5 , \"limit\" : 10 } app . dependency_overrides [ common_parameters ] = override_dependency def test_override_in_items (): response = client . get ( \"/items/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : None , \"skip\" : 5 , \"limit\" : 10 }, } def test_override_in_items_with_q (): response = client . get ( \"/items/?q=foo\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : \"foo\" , \"skip\" : 5 , \"limit\" : 10 }, } def test_override_in_items_with_params (): response = client . get ( \"/items/?q=foo&skip=100&limit=200\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : \"foo\" , \"skip\" : 5 , \"limit\" : 10 }, } Tip You can set a dependency override for a dependency used anywhere in your FastAPI application. The original dependency could be used in a path operation function , a path operation decorator (when you don't use the return value), a .include_router() call, etc. FastAPI will still be able to override it. Then you can reset your overrides (remove them) by setting app.dependency_overrides to be an empty dict : app . dependency_overrides = {} Tip If you want to override a dependency only during some tests, you can set the override at the beginning of the test (inside the test function) and reset it at the end (at the end of the test function).","title":"Use the app.dependency_overrides attribute"},{"location":"advanced/testing-events/","text":"Testing Events: startup - shutdown \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . When you need your event handlers ( startup and shutdown ) to run in your tests, you can use the TestClient with a with statement: from fastapi import FastAPI from fastapi.testclient import TestClient app = FastAPI () items = {} @app . on_event ( \"startup\" ) async def startup_event (): items [ \"foo\" ] = { \"name\" : \"Fighters\" } items [ \"bar\" ] = { \"name\" : \"Tenders\" } @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : str ): return items [ item_id ] def test_read_items (): with TestClient ( app ) as client : response = client . get ( \"/items/foo\" ) assert response . status_code == 200 assert response . json () == { \"name\" : \"Fighters\" }","title":"Testing Events: startup - shutdown"},{"location":"advanced/testing-events/#testing-events-startup-shutdown","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . When you need your event handlers ( startup and shutdown ) to run in your tests, you can use the TestClient with a with statement: from fastapi import FastAPI from fastapi.testclient import TestClient app = FastAPI () items = {} @app . on_event ( \"startup\" ) async def startup_event (): items [ \"foo\" ] = { \"name\" : \"Fighters\" } items [ \"bar\" ] = { \"name\" : \"Tenders\" } @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : str ): return items [ item_id ] def test_read_items (): with TestClient ( app ) as client : response = client . get ( \"/items/foo\" ) assert response . status_code == 200 assert response . json () == { \"name\" : \"Fighters\" }","title":"Testing Events: startup - shutdown"},{"location":"advanced/testing-websockets/","text":"Testing WebSockets \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use the same TestClient to test WebSockets. For this, you use the TestClient in a with statement, connecting to the WebSocket: from fastapi import FastAPI from fastapi.testclient import TestClient from fastapi.websockets import WebSocket app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } @app . websocket_route ( \"/ws\" ) async def websocket ( websocket : WebSocket ): await websocket . accept () await websocket . send_json ({ \"msg\" : \"Hello WebSocket\" }) await websocket . close () def test_read_main (): client = TestClient ( app ) response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } def test_websocket (): client = TestClient ( app ) with client . websocket_connect ( \"/ws\" ) as websocket : data = websocket . receive_json () assert data == { \"msg\" : \"Hello WebSocket\" } Note For more details, check Starlette's documentation for testing WebSockets .","title":"Testing WebSockets"},{"location":"advanced/testing-websockets/#testing-websockets","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use the same TestClient to test WebSockets. For this, you use the TestClient in a with statement, connecting to the WebSocket: from fastapi import FastAPI from fastapi.testclient import TestClient from fastapi.websockets import WebSocket app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } @app . websocket_route ( \"/ws\" ) async def websocket ( websocket : WebSocket ): await websocket . accept () await websocket . send_json ({ \"msg\" : \"Hello WebSocket\" }) await websocket . close () def test_read_main (): client = TestClient ( app ) response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } def test_websocket (): client = TestClient ( app ) with client . websocket_connect ( \"/ws\" ) as websocket : data = websocket . receive_json () assert data == { \"msg\" : \"Hello WebSocket\" } Note For more details, check Starlette's documentation for testing WebSockets .","title":"Testing WebSockets"},{"location":"advanced/using-request-directly/","text":"Using the Request Directly \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Up to now, you have been declaring the parts of the request that you need with their types. Taking data from: The path as parameters. Headers. Cookies. etc. And by doing so, FastAPI is validating that data, converting it and generating documentation for your API automatically. But there are situations where you might need to access the Request object directly. Details about the Request object \u00b6 As FastAPI is actually Starlette underneath, with a layer of several tools on top, you can use Starlette's Request object directly when you need to. It would also mean that if you get data from the Request object directly (for example, read the body) it won't be validated, converted or documented (with OpenAPI, for the automatic API user interface) by FastAPI. Although any other parameter declared normally (for example, the body with a Pydantic model) would still be validated, converted, annotated, etc. But there are specific cases where it's useful to get the Request object. Use the Request object directly \u00b6 Let's imagine you want to get the client's IP address/host inside of your path operation function . For that you need to access the request directly. from fastapi import FastAPI , Request app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def read_root ( item_id : str , request : Request ): client_host = request . client . host return { \"client_host\" : client_host , \"item_id\" : item_id } By declaring a path operation function parameter with the type being the Request FastAPI will know to pass the Request in that parameter. Tip Note that in this case, we are declaring a path parameter beside the request parameter. So, the path parameter will be extracted, validated, converted to the specified type and annotated with OpenAPI. The same way, you can declare any other parameter as normally, and additionally, get the Request too. Request documentation \u00b6 You can read more details about the Request object in the official Starlette documentation site . Technical Details You could also use from starlette.requests import Request . FastAPI provides it directly just as a convenience for you, the developer. But it comes directly from Starlette.","title":"Using the Request Directly"},{"location":"advanced/using-request-directly/#using-the-request-directly","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Up to now, you have been declaring the parts of the request that you need with their types. Taking data from: The path as parameters. Headers. Cookies. etc. And by doing so, FastAPI is validating that data, converting it and generating documentation for your API automatically. But there are situations where you might need to access the Request object directly.","title":"Using the Request Directly"},{"location":"advanced/using-request-directly/#details-about-the-request-object","text":"As FastAPI is actually Starlette underneath, with a layer of several tools on top, you can use Starlette's Request object directly when you need to. It would also mean that if you get data from the Request object directly (for example, read the body) it won't be validated, converted or documented (with OpenAPI, for the automatic API user interface) by FastAPI. Although any other parameter declared normally (for example, the body with a Pydantic model) would still be validated, converted, annotated, etc. But there are specific cases where it's useful to get the Request object.","title":"Details about the Request object"},{"location":"advanced/using-request-directly/#use-the-request-object-directly","text":"Let's imagine you want to get the client's IP address/host inside of your path operation function . For that you need to access the request directly. from fastapi import FastAPI , Request app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def read_root ( item_id : str , request : Request ): client_host = request . client . host return { \"client_host\" : client_host , \"item_id\" : item_id } By declaring a path operation function parameter with the type being the Request FastAPI will know to pass the Request in that parameter. Tip Note that in this case, we are declaring a path parameter beside the request parameter. So, the path parameter will be extracted, validated, converted to the specified type and annotated with OpenAPI. The same way, you can declare any other parameter as normally, and additionally, get the Request too.","title":"Use the Request object directly"},{"location":"advanced/using-request-directly/#request-documentation","text":"You can read more details about the Request object in the official Starlette documentation site . Technical Details You could also use from starlette.requests import Request . FastAPI provides it directly just as a convenience for you, the developer. But it comes directly from Starlette.","title":"Request documentation"},{"location":"advanced/websockets/","text":"WebSockets \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use WebSockets with FastAPI . WebSockets client \u00b6 In production \u00b6 In your production system, you probably have a frontend created with a modern framework like React, Vue.js or Angular. And to communicate using WebSockets with your backend you would probably use your frontend's utilities. Or you might have a native mobile application that communicates with your WebSocket backend directly, in native code. Or you might have any other way to communicate with the WebSocket endpoint. But for this example, we'll use a very simple HTML document with some JavaScript, all inside a long string. This, of course, is not optimal and you wouldn't use it for production. In production you would have one of the options above. But it's the simplest way to focus on the server-side of WebSockets and have a working example: from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) Create a websocket \u00b6 In your FastAPI application, create a websocket : from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) Technical Details You could also use from starlette.websockets import WebSocket . FastAPI provides the same WebSocket directly just as a convenience for you, the developer. But it comes directly from Starlette. Await for messages and send messages \u00b6 In your WebSocket route you can await for messages and send messages. from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) You can receive and send binary, text, and JSON data. Try it \u00b6 If your file is named main.py , run your application with: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Open your browser at http://127.0.0.1:8000 . You will see a simple page like: You can type messages in the input box, and send them: And your FastAPI application with WebSockets will respond back: You can send (and receive) many messages: And all of them will use the same WebSocket connection. Using Depends and others \u00b6 In WebSocket endpoints you can import from fastapi and use: Depends Security Cookie Header Path Query They work the same way as for other FastAPI endpoints/ path operations : from typing import Union from fastapi import Cookie , Depends , FastAPI , Query , WebSocket , status from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label> <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label> <button onclick=\"connect(event)\">Connect</button> <hr> <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = null; function connect(event) { var itemId = document.getElementById(\"itemId\") var token = document.getElementById(\"token\") ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; event.preventDefault() } function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) async def get_cookie_or_token ( websocket : WebSocket , session : Union [ str , None ] = Cookie ( default = None ), token : Union [ str , None ] = Query ( default = None ), ): if session is None and token is None : await websocket . close ( code = status . WS_1008_POLICY_VIOLATION ) return session or token @app . websocket ( \"/items/ {item_id} /ws\" ) async def websocket_endpoint ( websocket : WebSocket , item_id : str , q : Union [ int , None ] = None , cookie_or_token : str = Depends ( get_cookie_or_token ), ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Session cookie or query token value is: { cookie_or_token } \" ) if q is not None : await websocket . send_text ( f \"Query parameter q is: { q } \" ) await websocket . send_text ( f \"Message text was: { data } , for item ID: { item_id } \" ) Info In a WebSocket it doesn't really make sense to raise an HTTPException . So it's better to close the WebSocket connection directly. You can use a closing code from the valid codes defined in the specification . In the future, there will be a WebSocketException that you will be able to raise from anywhere, and add exception handlers for it. It depends on the PR #527 in Starlette. Try the WebSockets with dependencies \u00b6 If your file is named main.py , run your application with: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Open your browser at http://127.0.0.1:8000 . There you can set: The \"Item ID\", used in the path. The \"Token\" used as a query parameter. Tip Notice that the query token will be handled by a dependency. With that you can connect the WebSocket and then send and receive messages: Handling disconnections and multiple clients \u00b6 When a WebSocket connection is closed, the await websocket.receive_text() will raise a WebSocketDisconnect exception, which you can then catch and handle like in this example. from typing import List from fastapi import FastAPI , WebSocket , WebSocketDisconnect from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <h2>Your ID: <span id=\"ws-id\"></span></h2> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var client_id = Date.now() document.querySelector(\"#ws-id\").textContent = client_id; var ws = new WebSocket(`ws://localhost:8000/ws/$ {client_id} `); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" class ConnectionManager : def __init__ ( self ): self . active_connections : List [ WebSocket ] = [] async def connect ( self , websocket : WebSocket ): await websocket . accept () self . active_connections . append ( websocket ) def disconnect ( self , websocket : WebSocket ): self . active_connections . remove ( websocket ) async def send_personal_message ( self , message : str , websocket : WebSocket ): await websocket . send_text ( message ) async def broadcast ( self , message : str ): for connection in self . active_connections : await connection . send_text ( message ) manager = ConnectionManager () @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws/ {client_id} \" ) async def websocket_endpoint ( websocket : WebSocket , client_id : int ): await manager . connect ( websocket ) try : while True : data = await websocket . receive_text () await manager . send_personal_message ( f \"You wrote: { data } \" , websocket ) await manager . broadcast ( f \"Client # { client_id } says: { data } \" ) except WebSocketDisconnect : manager . disconnect ( websocket ) await manager . broadcast ( f \"Client # { client_id } left the chat\" ) To try it out: Open the app with several browser tabs. Write messages from them. Then close one of the tabs. That will raise the WebSocketDisconnect exception, and all the other clients will receive a message like: Client #1596980209979 left the chat Tip The app above is a minimal and simple example to demonstrate how to handle and broadcast messages to several WebSocket connections. But have in mind that, as everything is handled in memory, in a single list, it will only work while the process is running, and will only work with a single process. If you need something easy to integrate with FastAPI but that is more robust, supported by Redis, PostgreSQL or others, check encode/broadcaster . More info \u00b6 To learn more about the options, check Starlette's documentation for: The WebSocket class . Class-based WebSocket handling .","title":"WebSockets"},{"location":"advanced/websockets/#websockets","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use WebSockets with FastAPI .","title":"WebSockets"},{"location":"advanced/websockets/#websockets-client","text":"","title":"WebSockets client"},{"location":"advanced/websockets/#in-production","text":"In your production system, you probably have a frontend created with a modern framework like React, Vue.js or Angular. And to communicate using WebSockets with your backend you would probably use your frontend's utilities. Or you might have a native mobile application that communicates with your WebSocket backend directly, in native code. Or you might have any other way to communicate with the WebSocket endpoint. But for this example, we'll use a very simple HTML document with some JavaScript, all inside a long string. This, of course, is not optimal and you wouldn't use it for production. In production you would have one of the options above. But it's the simplest way to focus on the server-side of WebSockets and have a working example: from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" )","title":"In production"},{"location":"advanced/websockets/#create-a-websocket","text":"In your FastAPI application, create a websocket : from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) Technical Details You could also use from starlette.websockets import WebSocket . FastAPI provides the same WebSocket directly just as a convenience for you, the developer. But it comes directly from Starlette.","title":"Create a websocket"},{"location":"advanced/websockets/#await-for-messages-and-send-messages","text":"In your WebSocket route you can await for messages and send messages. from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) You can receive and send binary, text, and JSON data.","title":"Await for messages and send messages"},{"location":"advanced/websockets/#try-it","text":"If your file is named main.py , run your application with: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Open your browser at http://127.0.0.1:8000 . You will see a simple page like: You can type messages in the input box, and send them: And your FastAPI application with WebSockets will respond back: You can send (and receive) many messages: And all of them will use the same WebSocket connection.","title":"Try it"},{"location":"advanced/websockets/#using-depends-and-others","text":"In WebSocket endpoints you can import from fastapi and use: Depends Security Cookie Header Path Query They work the same way as for other FastAPI endpoints/ path operations : from typing import Union from fastapi import Cookie , Depends , FastAPI , Query , WebSocket , status from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label> <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label> <button onclick=\"connect(event)\">Connect</button> <hr> <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = null; function connect(event) { var itemId = document.getElementById(\"itemId\") var token = document.getElementById(\"token\") ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; event.preventDefault() } function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) async def get_cookie_or_token ( websocket : WebSocket , session : Union [ str , None ] = Cookie ( default = None ), token : Union [ str , None ] = Query ( default = None ), ): if session is None and token is None : await websocket . close ( code = status . WS_1008_POLICY_VIOLATION ) return session or token @app . websocket ( \"/items/ {item_id} /ws\" ) async def websocket_endpoint ( websocket : WebSocket , item_id : str , q : Union [ int , None ] = None , cookie_or_token : str = Depends ( get_cookie_or_token ), ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Session cookie or query token value is: { cookie_or_token } \" ) if q is not None : await websocket . send_text ( f \"Query parameter q is: { q } \" ) await websocket . send_text ( f \"Message text was: { data } , for item ID: { item_id } \" ) Info In a WebSocket it doesn't really make sense to raise an HTTPException . So it's better to close the WebSocket connection directly. You can use a closing code from the valid codes defined in the specification . In the future, there will be a WebSocketException that you will be able to raise from anywhere, and add exception handlers for it. It depends on the PR #527 in Starlette.","title":"Using Depends and others"},{"location":"advanced/websockets/#try-the-websockets-with-dependencies","text":"If your file is named main.py , run your application with: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Open your browser at http://127.0.0.1:8000 . There you can set: The \"Item ID\", used in the path. The \"Token\" used as a query parameter. Tip Notice that the query token will be handled by a dependency. With that you can connect the WebSocket and then send and receive messages:","title":"Try the WebSockets with dependencies"},{"location":"advanced/websockets/#handling-disconnections-and-multiple-clients","text":"When a WebSocket connection is closed, the await websocket.receive_text() will raise a WebSocketDisconnect exception, which you can then catch and handle like in this example. from typing import List from fastapi import FastAPI , WebSocket , WebSocketDisconnect from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <h2>Your ID: <span id=\"ws-id\"></span></h2> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var client_id = Date.now() document.querySelector(\"#ws-id\").textContent = client_id; var ws = new WebSocket(`ws://localhost:8000/ws/$ {client_id} `); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" class ConnectionManager : def __init__ ( self ): self . active_connections : List [ WebSocket ] = [] async def connect ( self , websocket : WebSocket ): await websocket . accept () self . active_connections . append ( websocket ) def disconnect ( self , websocket : WebSocket ): self . active_connections . remove ( websocket ) async def send_personal_message ( self , message : str , websocket : WebSocket ): await websocket . send_text ( message ) async def broadcast ( self , message : str ): for connection in self . active_connections : await connection . send_text ( message ) manager = ConnectionManager () @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws/ {client_id} \" ) async def websocket_endpoint ( websocket : WebSocket , client_id : int ): await manager . connect ( websocket ) try : while True : data = await websocket . receive_text () await manager . send_personal_message ( f \"You wrote: { data } \" , websocket ) await manager . broadcast ( f \"Client # { client_id } says: { data } \" ) except WebSocketDisconnect : manager . disconnect ( websocket ) await manager . broadcast ( f \"Client # { client_id } left the chat\" ) To try it out: Open the app with several browser tabs. Write messages from them. Then close one of the tabs. That will raise the WebSocketDisconnect exception, and all the other clients will receive a message like: Client #1596980209979 left the chat Tip The app above is a minimal and simple example to demonstrate how to handle and broadcast messages to several WebSocket connections. But have in mind that, as everything is handled in memory, in a single list, it will only work while the process is running, and will only work with a single process. If you need something easy to integrate with FastAPI but that is more robust, supported by Redis, PostgreSQL or others, check encode/broadcaster .","title":"Handling disconnections and multiple clients"},{"location":"advanced/websockets/#more-info","text":"To learn more about the options, check Starlette's documentation for: The WebSocket class . Class-based WebSocket handling .","title":"More info"},{"location":"advanced/wsgi/","text":"Including WSGI - Flask, Django, others \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can mount WSGI applications as you saw with Sub Applications - Mounts , Behind a Proxy . For that, you can use the WSGIMiddleware and use it to wrap your WSGI application, for example, Flask, Django, etc. Using WSGIMiddleware \u00b6 You need to import WSGIMiddleware . Then wrap the WSGI (e.g. Flask) app with the middleware. And then mount that under a path. from fastapi import FastAPI from fastapi.middleware.wsgi import WSGIMiddleware from flask import Flask , escape , request flask_app = Flask ( __name__ ) @flask_app . route ( \"/\" ) def flask_main (): name = request . args . get ( \"name\" , \"World\" ) return f \"Hello, { escape ( name ) } from Flask!\" app = FastAPI () @app . get ( \"/v2\" ) def read_main (): return { \"message\" : \"Hello World\" } app . mount ( \"/v1\" , WSGIMiddleware ( flask_app )) Check it \u00b6 Now, every request under the path /v1/ will be handled by the Flask application. And the rest will be handled by FastAPI . If you run it with Uvicorn and go to http://localhost:8000/v1/ you will see the response from Flask: Hello, World from Flask! And if you go to http://localhost:8000/v2 you will see the response from FastAPI: { \"message\" : \"Hello World\" }","title":"Including WSGI - Flask, Django, others"},{"location":"advanced/wsgi/#including-wsgi-flask-django-others","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can mount WSGI applications as you saw with Sub Applications - Mounts , Behind a Proxy . For that, you can use the WSGIMiddleware and use it to wrap your WSGI application, for example, Flask, Django, etc.","title":"Including WSGI - Flask, Django, others"},{"location":"advanced/wsgi/#using-wsgimiddleware","text":"You need to import WSGIMiddleware . Then wrap the WSGI (e.g. Flask) app with the middleware. And then mount that under a path. from fastapi import FastAPI from fastapi.middleware.wsgi import WSGIMiddleware from flask import Flask , escape , request flask_app = Flask ( __name__ ) @flask_app . route ( \"/\" ) def flask_main (): name = request . args . get ( \"name\" , \"World\" ) return f \"Hello, { escape ( name ) } from Flask!\" app = FastAPI () @app . get ( \"/v2\" ) def read_main (): return { \"message\" : \"Hello World\" } app . mount ( \"/v1\" , WSGIMiddleware ( flask_app ))","title":"Using WSGIMiddleware"},{"location":"advanced/wsgi/#check-it","text":"Now, every request under the path /v1/ will be handled by the Flask application. And the rest will be handled by FastAPI . If you run it with Uvicorn and go to http://localhost:8000/v1/ you will see the response from Flask: Hello, World from Flask! And if you go to http://localhost:8000/v2 you will see the response from FastAPI: { \"message\" : \"Hello World\" }","title":"Check it"},{"location":"advanced/security/","text":"Advanced Security - Intro \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Additional Features \u00b6 There are some extra features to handle security apart from the ones covered in the Tutorial - User Guide: Security . Tip The next sections are not necessarily \"advanced\" . And it's possible that for your use case, the solution is in one of them. Read the Tutorial first \u00b6 The next sections assume you already read the main Tutorial - User Guide: Security . They are all based on the same concepts, but allow some extra functionalities.","title":"Advanced Security - Intro"},{"location":"advanced/security/#advanced-security-intro","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing .","title":"Advanced Security - Intro"},{"location":"advanced/security/#additional-features","text":"There are some extra features to handle security apart from the ones covered in the Tutorial - User Guide: Security . Tip The next sections are not necessarily \"advanced\" . And it's possible that for your use case, the solution is in one of them.","title":"Additional Features"},{"location":"advanced/security/#read-the-tutorial-first","text":"The next sections assume you already read the main Tutorial - User Guide: Security . They are all based on the same concepts, but allow some extra functionalities.","title":"Read the Tutorial first"},{"location":"advanced/security/http-basic-auth/","text":"HTTP Basic Auth \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . For the simplest cases, you can use HTTP Basic Auth. In HTTP Basic Auth, the application expects a header that contains a username and a password. If it doesn't receive it, it returns an HTTP 401 \"Unauthorized\" error. And returns a header WWW-Authenticate with a value of Basic , and an optional realm parameter. That tells the browser to show the integrated prompt for a username and password. Then, when you type that username and password, the browser sends them in the header automatically. Simple HTTP Basic Auth \u00b6 Import HTTPBasic and HTTPBasicCredentials . Create a \" security scheme\" using HTTPBasic . Use that security with a dependency in your path operation . It returns an object of type HTTPBasicCredentials : It contains the username and password sent. from fastapi import Depends , FastAPI from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () @app . get ( \"/users/me\" ) def read_current_user ( credentials : HTTPBasicCredentials = Depends ( security )): return { \"username\" : credentials . username , \"password\" : credentials . password } When you try to open the URL for the first time (or click the \"Execute\" button in the docs) the browser will ask you for your username and password: Check the username \u00b6 Here's a more complete example. Use a dependency to check if the username and password are correct. For this, use the Python standard module secrets to check the username and password: import secrets from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () def get_current_username ( credentials : HTTPBasicCredentials = Depends ( security )): correct_username = secrets . compare_digest ( credentials . username , \"stanleyjobson\" ) correct_password = secrets . compare_digest ( credentials . password , \"swordfish\" ) if not ( correct_username and correct_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect email or password\" , headers = { \"WWW-Authenticate\" : \"Basic\" }, ) return credentials . username @app . get ( \"/users/me\" ) def read_current_user ( username : str = Depends ( get_current_username )): return { \"username\" : username } This will ensure that credentials.username is \"stanleyjobson\" , and that credentials.password is \"swordfish\" . This would be similar to: if not ( credentials . username == \"stanleyjobson\" ) or not ( credentials . password == \"swordfish\" ): # Return some error ... But by using the secrets.compare_digest() it will be secure against a type of attacks called \"timing attacks\". Timing Attacks \u00b6 But what's a \"timing attack\"? Let's imagine some attackers are trying to guess the username and password. And they send a request with a username johndoe and a password love123 . Then the Python code in your application would be equivalent to something like: if \"johndoe\" == \"stanleyjobson\" and \"love123\" == \"swordfish\" : ... But right at the moment Python compares the first j in johndoe to the first s in stanleyjobson , it will return False , because it already knows that those two strings are not the same, thinking that \"there's no need to waste more computation comparing the rest of the letters\". And your application will say \"incorrect user or password\". But then the attackers try with username stanleyjobsox and password love123 . And your application code does something like: if \"stanleyjobsox\" == \"stanleyjobson\" and \"love123\" == \"swordfish\" : ... Python will have to compare the whole stanleyjobso in both stanleyjobsox and stanleyjobson before realizing that both strings are not the same. So it will take some extra microseconds to reply back \"incorrect user or password\". The time to answer helps the attackers \u00b6 At that point, by noticing that the server took some microseconds longer to send the \"incorrect user or password\" response, the attackers will know that they got something right, some of the initial letters were right. And then they can try again knowing that it's probably something more similar to stanleyjobsox than to johndoe . A \"professional\" attack \u00b6 Of course, the attackers would not try all this by hand, they would write a program to do it, possibly with thousands or millions of tests per second. And would get just one extra correct letter at a time. But doing that, in some minutes or hours the attackers would have guessed the correct username and password, with the \"help\" of our application, just using the time taken to answer. Fix it with secrets.compare_digest() \u00b6 But in our code we are actually using secrets.compare_digest() . In short, it will take the same time to compare stanleyjobsox to stanleyjobson than it takes to compare johndoe to stanleyjobson . And the same for the password. That way, using secrets.compare_digest() in your application code, it will be safe against this whole range of security attacks. Return the error \u00b6 After detecting that the credentials are incorrect, return an HTTPException with a status code 401 (the same returned when no credentials are provided) and add the header WWW-Authenticate to make the browser show the login prompt again: import secrets from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () def get_current_username ( credentials : HTTPBasicCredentials = Depends ( security )): correct_username = secrets . compare_digest ( credentials . username , \"stanleyjobson\" ) correct_password = secrets . compare_digest ( credentials . password , \"swordfish\" ) if not ( correct_username and correct_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect email or password\" , headers = { \"WWW-Authenticate\" : \"Basic\" }, ) return credentials . username @app . get ( \"/users/me\" ) def read_current_user ( username : str = Depends ( get_current_username )): return { \"username\" : username }","title":"HTTP Basic Auth"},{"location":"advanced/security/http-basic-auth/#http-basic-auth","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . For the simplest cases, you can use HTTP Basic Auth. In HTTP Basic Auth, the application expects a header that contains a username and a password. If it doesn't receive it, it returns an HTTP 401 \"Unauthorized\" error. And returns a header WWW-Authenticate with a value of Basic , and an optional realm parameter. That tells the browser to show the integrated prompt for a username and password. Then, when you type that username and password, the browser sends them in the header automatically.","title":"HTTP Basic Auth"},{"location":"advanced/security/http-basic-auth/#simple-http-basic-auth","text":"Import HTTPBasic and HTTPBasicCredentials . Create a \" security scheme\" using HTTPBasic . Use that security with a dependency in your path operation . It returns an object of type HTTPBasicCredentials : It contains the username and password sent. from fastapi import Depends , FastAPI from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () @app . get ( \"/users/me\" ) def read_current_user ( credentials : HTTPBasicCredentials = Depends ( security )): return { \"username\" : credentials . username , \"password\" : credentials . password } When you try to open the URL for the first time (or click the \"Execute\" button in the docs) the browser will ask you for your username and password:","title":"Simple HTTP Basic Auth"},{"location":"advanced/security/http-basic-auth/#check-the-username","text":"Here's a more complete example. Use a dependency to check if the username and password are correct. For this, use the Python standard module secrets to check the username and password: import secrets from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () def get_current_username ( credentials : HTTPBasicCredentials = Depends ( security )): correct_username = secrets . compare_digest ( credentials . username , \"stanleyjobson\" ) correct_password = secrets . compare_digest ( credentials . password , \"swordfish\" ) if not ( correct_username and correct_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect email or password\" , headers = { \"WWW-Authenticate\" : \"Basic\" }, ) return credentials . username @app . get ( \"/users/me\" ) def read_current_user ( username : str = Depends ( get_current_username )): return { \"username\" : username } This will ensure that credentials.username is \"stanleyjobson\" , and that credentials.password is \"swordfish\" . This would be similar to: if not ( credentials . username == \"stanleyjobson\" ) or not ( credentials . password == \"swordfish\" ): # Return some error ... But by using the secrets.compare_digest() it will be secure against a type of attacks called \"timing attacks\".","title":"Check the username"},{"location":"advanced/security/http-basic-auth/#timing-attacks","text":"But what's a \"timing attack\"? Let's imagine some attackers are trying to guess the username and password. And they send a request with a username johndoe and a password love123 . Then the Python code in your application would be equivalent to something like: if \"johndoe\" == \"stanleyjobson\" and \"love123\" == \"swordfish\" : ... But right at the moment Python compares the first j in johndoe to the first s in stanleyjobson , it will return False , because it already knows that those two strings are not the same, thinking that \"there's no need to waste more computation comparing the rest of the letters\". And your application will say \"incorrect user or password\". But then the attackers try with username stanleyjobsox and password love123 . And your application code does something like: if \"stanleyjobsox\" == \"stanleyjobson\" and \"love123\" == \"swordfish\" : ... Python will have to compare the whole stanleyjobso in both stanleyjobsox and stanleyjobson before realizing that both strings are not the same. So it will take some extra microseconds to reply back \"incorrect user or password\".","title":"Timing Attacks"},{"location":"advanced/security/http-basic-auth/#the-time-to-answer-helps-the-attackers","text":"At that point, by noticing that the server took some microseconds longer to send the \"incorrect user or password\" response, the attackers will know that they got something right, some of the initial letters were right. And then they can try again knowing that it's probably something more similar to stanleyjobsox than to johndoe .","title":"The time to answer helps the attackers"},{"location":"advanced/security/http-basic-auth/#a-professional-attack","text":"Of course, the attackers would not try all this by hand, they would write a program to do it, possibly with thousands or millions of tests per second. And would get just one extra correct letter at a time. But doing that, in some minutes or hours the attackers would have guessed the correct username and password, with the \"help\" of our application, just using the time taken to answer.","title":"A \"professional\" attack"},{"location":"advanced/security/http-basic-auth/#fix-it-with-secretscompare_digest","text":"But in our code we are actually using secrets.compare_digest() . In short, it will take the same time to compare stanleyjobsox to stanleyjobson than it takes to compare johndoe to stanleyjobson . And the same for the password. That way, using secrets.compare_digest() in your application code, it will be safe against this whole range of security attacks.","title":"Fix it with secrets.compare_digest()"},{"location":"advanced/security/http-basic-auth/#return-the-error","text":"After detecting that the credentials are incorrect, return an HTTPException with a status code 401 (the same returned when no credentials are provided) and add the header WWW-Authenticate to make the browser show the login prompt again: import secrets from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () def get_current_username ( credentials : HTTPBasicCredentials = Depends ( security )): correct_username = secrets . compare_digest ( credentials . username , \"stanleyjobson\" ) correct_password = secrets . compare_digest ( credentials . password , \"swordfish\" ) if not ( correct_username and correct_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect email or password\" , headers = { \"WWW-Authenticate\" : \"Basic\" }, ) return credentials . username @app . get ( \"/users/me\" ) def read_current_user ( username : str = Depends ( get_current_username )): return { \"username\" : username }","title":"Return the error"},{"location":"advanced/security/oauth2-scopes/","text":"OAuth2 scopes \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use OAuth2 scopes directly with FastAPI , they are integrated to work seamlessly. This would allow you to have a more fine-grained permission system, following the OAuth2 standard, integrated into your OpenAPI application (and the API docs). OAuth2 with scopes is the mechanism used by many big authentication providers, like Facebook, Google, GitHub, Microsoft, Twitter, etc. They use it to provide specific permissions to users and applications. Every time you \"log in with\" Facebook, Google, GitHub, Microsoft, Twitter, that application is using OAuth2 with scopes. In this section you will see how to manage authentication and authorization with the same OAuth2 with scopes in your FastAPI application. Warning This is a more or less advanced section. If you are just starting, you can skip it. You don't necessarily need OAuth2 scopes, and you can handle authentication and authorization however you want. But OAuth2 with scopes can be nicely integrated into your API (with OpenAPI) and your API docs. Nevertheless, you still enforce those scopes, or any other security/authorization requirement, however you need, in your code. In many cases, OAuth2 with scopes can be an overkill. But if you know you need it, or you are curious, keep reading. OAuth2 scopes and OpenAPI \u00b6 The OAuth2 specification defines \"scopes\" as a list of strings separated by spaces. The content of each of these strings can have any format, but should not contain spaces. These scopes represent \"permissions\". In OpenAPI (e.g. the API docs), you can define \"security schemes\". When one of these security schemes uses OAuth2, you can also declare and use scopes. Each \"scope\" is just a string (without spaces). They are normally used to declare specific security permissions, for example: users:read or users:write are common examples. instagram_basic is used by Facebook / Instagram. https://www.googleapis.com/auth/drive is used by Google. Info In OAuth2 a \"scope\" is just a string that declares a specific permission required. It doesn't matter if it has other characters like : or if it is a URL. Those details are implementation specific. For OAuth2 they are just strings. Global view \u00b6 First, let's quickly see the parts that change from the examples in the main Tutorial - User Guide for OAuth2 with Password (and hashing), Bearer with JWT tokens . Now using OAuth2 scopes: from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Now let's review those changes step by step. OAuth2 Security scheme \u00b6 The first change is that now we are declaring the OAuth2 security scheme with two available scopes, me and items . The scopes parameter receives a dict with each scope as a key and the description as the value: from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Because we are now declaring those scopes, they will show up in the API docs when you log-in/authorize. And you will be able to select which scopes you want to give access to: me and items . This is the same mechanism used when you give permissions while logging in with Facebook, Google, GitHub, etc: JWT token with scopes \u00b6 Now, modify the token path operation to return the scopes requested. We are still using the same OAuth2PasswordRequestForm . It includes a property scopes with a list of str , with each scope it received in the request. And we return the scopes as part of the JWT token. Danger For simplicity, here we are just adding the scopes received directly to the token. But in your application, for security, you should make sure you only add the scopes that the user is actually able to have, or the ones you have predefined. from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Declare scopes in path operations and dependencies \u00b6 Now we declare that the path operation for /users/me/items/ requires the scope items . For this, we import and use Security from fastapi . You can use Security to declare dependencies (just like Depends ), but Security also receives a parameter scopes with a list of scopes (strings). In this case, we pass a dependency function get_current_active_user to Security (the same way we would do with Depends ). But we also pass a list of scopes, in this case with just one scope: items (it could have more). And the dependency function get_current_active_user can also declare sub-dependencies, not only with Depends but also with Security . Declaring its own sub-dependency function ( get_current_user ), and more scope requirements. In this case, it requires the scope me (it could require more than one scope). Note You don't necessarily need to add different scopes in different places. We are doing it here to demonstrate how FastAPI handles scopes declared at different levels. from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Technical Details Security is actually a subclass of Depends , and it has just one extra parameter that we'll see later. But by using Security instead of Depends , FastAPI will know that it can declare security scopes, use them internally, and document the API with OpenAPI. But when you import Query , Path , Depends , Security and others from fastapi , those are actually functions that return special classes. Use SecurityScopes \u00b6 Now update the dependency get_current_user . This is the one used by the dependencies above. Here's were we are using the same OAuth2 scheme we created before, declaring it as a dependency: oauth2_scheme . Because this dependency function doesn't have any scope requirements itself, we can use Depends with oauth2_scheme , we don't have to use Security when we don't need to specify security scopes. We also declare a special parameter of type SecurityScopes , imported from fastapi.security . This SecurityScopes class is similar to Request ( Request was used to get the request object directly). from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Use the scopes \u00b6 The parameter security_scopes will be of type SecurityScopes . It will have a property scopes with a list containing all the scopes required by itself and all the dependencies that use this as a sub-dependency. That means, all the \"dependants\"... this might sound confusing, it is explained again later below. The security_scopes object (of class SecurityScopes ) also provides a scope_str attribute with a single string, containing those scopes separated by spaces (we are going to use it). We create an HTTPException that we can re-use ( raise ) later at several points. In this exception, we include the scopes required (if any) as a string separated by spaces (using scope_str ). We put that string containing the scopes in the WWW-Authenticate header (this is part of the spec). from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Verify the username and data shape \u00b6 We verify that we get a username , and extract the scopes. And then we validate that data with the Pydantic model (catching the ValidationError exception), and if we get an error reading the JWT token or validating the data with Pydantic, we raise the HTTPException we created before. For that, we update the Pydantic model TokenData with a new property scopes . By validating the data with Pydantic we can make sure that we have, for example, exactly a list of str with the scopes and a str with the username . Instead of, for example, a dict , or something else, as it could break the application at some point later, making it a security risk. We also verify that we have a user with that username, and if not, we raise that same exception we created before. from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Verify the scopes \u00b6 We now verify that all the scopes required, by this dependency and all the dependants (including path operations ), are included in the scopes provided in the token received, otherwise raise an HTTPException . For this, we use security_scopes.scopes , that contains a list with all these scopes as str . from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Dependency tree and scopes \u00b6 Let's review again this dependency tree and the scopes. As the get_current_active_user dependency has as a sub-dependency on get_current_user , the scope \"me\" declared at get_current_active_user will be included in the list of required scopes in the security_scopes.scopes passed to get_current_user . The path operation itself also declares a scope, \"items\" , so this will also be in the list of security_scopes.scopes passed to get_current_user . Here's how the hierarchy of dependencies and scopes looks like: The path operation read_own_items has: Required scopes [\"items\"] with the dependency: get_current_active_user : The dependency function get_current_active_user has: Required scopes [\"me\"] with the dependency: get_current_user : The dependency function get_current_user has: No scopes required by itself. A dependency using oauth2_scheme . A security_scopes parameter of type SecurityScopes : This security_scopes parameter has a property scopes with a list containing all these scopes declared above, so: security_scopes.scopes will contain [\"me\", \"items\"] for the path operation read_own_items . security_scopes.scopes will contain [\"me\"] for the path operation read_users_me , because it is declared in the dependency get_current_active_user . security_scopes.scopes will contain [] (nothing) for the path operation read_system_status , because it didn't declare any Security with scopes , and its dependency, get_current_user , doesn't declare any scope either. Tip The important and \"magic\" thing here is that get_current_user will have a different list of scopes to check for each path operation . All depending on the scopes declared in each path operation and each dependency in the dependency tree for that specific path operation . More details about SecurityScopes \u00b6 You can use SecurityScopes at any point, and in multiple places, it doesn't have to be at the \"root\" dependency. It will always have the security scopes declared in the current Security dependencies and all the dependants for that specific path operation and that specific dependency tree. Because the SecurityScopes will have all the scopes declared by dependants, you can use it to verify that a token has the required scopes in a central dependency function, and then declare different scope requirements in different path operations . They will be checked independently for each path operation . Check it \u00b6 If you open the API docs, you can authenticate and specify which scopes you want to authorize. If you don't select any scope, you will be \"authenticated\", but when you try to access /users/me/ or /users/me/items/ you will get an error saying that you don't have enough permissions. You will still be able to access /status/ . And if you select the scope me but not the scope items , you will be able to access /users/me/ but not /users/me/items/ . That's what would happen to a third party application that tried to access one of these path operations with a token provided by a user, depending on how many permissions the user gave the application. About third party integrations \u00b6 In this example we are using the OAuth2 \"password\" flow. This is appropriate when we are logging in to our own application, probably with our own frontend. Because we can trust it to receive the username and password , as we control it. But if you are building an OAuth2 application that others would connect to (i.e., if you are building an authentication provider equivalent to Facebook, Google, GitHub, etc.) you should use one of the other flows. The most common is the implicit flow. The most secure is the code flow, but is more complex to implement as it requires more steps. As it is more complex, many providers end up suggesting the implicit flow. Note It's common that each authentication provider names their flows in a different way, to make it part of their brand. But in the end, they are implementing the same OAuth2 standard. FastAPI includes utilities for all these OAuth2 authentication flows in fastapi.security.oauth2 . Security in decorator dependencies \u00b6 The same way you can define a list of Depends in the decorator's dependencies parameter (as explained in Dependencies in path operation decorators ), you could also use Security with scopes there.","title":"OAuth2 scopes"},{"location":"advanced/security/oauth2-scopes/#oauth2-scopes","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use OAuth2 scopes directly with FastAPI , they are integrated to work seamlessly. This would allow you to have a more fine-grained permission system, following the OAuth2 standard, integrated into your OpenAPI application (and the API docs). OAuth2 with scopes is the mechanism used by many big authentication providers, like Facebook, Google, GitHub, Microsoft, Twitter, etc. They use it to provide specific permissions to users and applications. Every time you \"log in with\" Facebook, Google, GitHub, Microsoft, Twitter, that application is using OAuth2 with scopes. In this section you will see how to manage authentication and authorization with the same OAuth2 with scopes in your FastAPI application. Warning This is a more or less advanced section. If you are just starting, you can skip it. You don't necessarily need OAuth2 scopes, and you can handle authentication and authorization however you want. But OAuth2 with scopes can be nicely integrated into your API (with OpenAPI) and your API docs. Nevertheless, you still enforce those scopes, or any other security/authorization requirement, however you need, in your code. In many cases, OAuth2 with scopes can be an overkill. But if you know you need it, or you are curious, keep reading.","title":"OAuth2 scopes"},{"location":"advanced/security/oauth2-scopes/#oauth2-scopes-and-openapi","text":"The OAuth2 specification defines \"scopes\" as a list of strings separated by spaces. The content of each of these strings can have any format, but should not contain spaces. These scopes represent \"permissions\". In OpenAPI (e.g. the API docs), you can define \"security schemes\". When one of these security schemes uses OAuth2, you can also declare and use scopes. Each \"scope\" is just a string (without spaces). They are normally used to declare specific security permissions, for example: users:read or users:write are common examples. instagram_basic is used by Facebook / Instagram. https://www.googleapis.com/auth/drive is used by Google. Info In OAuth2 a \"scope\" is just a string that declares a specific permission required. It doesn't matter if it has other characters like : or if it is a URL. Those details are implementation specific. For OAuth2 they are just strings.","title":"OAuth2 scopes and OpenAPI"},{"location":"advanced/security/oauth2-scopes/#global-view","text":"First, let's quickly see the parts that change from the examples in the main Tutorial - User Guide for OAuth2 with Password (and hashing), Bearer with JWT tokens . Now using OAuth2 scopes: from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Now let's review those changes step by step.","title":"Global view"},{"location":"advanced/security/oauth2-scopes/#oauth2-security-scheme","text":"The first change is that now we are declaring the OAuth2 security scheme with two available scopes, me and items . The scopes parameter receives a dict with each scope as a key and the description as the value: from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Because we are now declaring those scopes, they will show up in the API docs when you log-in/authorize. And you will be able to select which scopes you want to give access to: me and items . This is the same mechanism used when you give permissions while logging in with Facebook, Google, GitHub, etc:","title":"OAuth2 Security scheme"},{"location":"advanced/security/oauth2-scopes/#jwt-token-with-scopes","text":"Now, modify the token path operation to return the scopes requested. We are still using the same OAuth2PasswordRequestForm . It includes a property scopes with a list of str , with each scope it received in the request. And we return the scopes as part of the JWT token. Danger For simplicity, here we are just adding the scopes received directly to the token. But in your application, for security, you should make sure you only add the scopes that the user is actually able to have, or the ones you have predefined. from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"JWT token with scopes"},{"location":"advanced/security/oauth2-scopes/#declare-scopes-in-path-operations-and-dependencies","text":"Now we declare that the path operation for /users/me/items/ requires the scope items . For this, we import and use Security from fastapi . You can use Security to declare dependencies (just like Depends ), but Security also receives a parameter scopes with a list of scopes (strings). In this case, we pass a dependency function get_current_active_user to Security (the same way we would do with Depends ). But we also pass a list of scopes, in this case with just one scope: items (it could have more). And the dependency function get_current_active_user can also declare sub-dependencies, not only with Depends but also with Security . Declaring its own sub-dependency function ( get_current_user ), and more scope requirements. In this case, it requires the scope me (it could require more than one scope). Note You don't necessarily need to add different scopes in different places. We are doing it here to demonstrate how FastAPI handles scopes declared at different levels. from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Technical Details Security is actually a subclass of Depends , and it has just one extra parameter that we'll see later. But by using Security instead of Depends , FastAPI will know that it can declare security scopes, use them internally, and document the API with OpenAPI. But when you import Query , Path , Depends , Security and others from fastapi , those are actually functions that return special classes.","title":"Declare scopes in path operations and dependencies"},{"location":"advanced/security/oauth2-scopes/#use-securityscopes","text":"Now update the dependency get_current_user . This is the one used by the dependencies above. Here's were we are using the same OAuth2 scheme we created before, declaring it as a dependency: oauth2_scheme . Because this dependency function doesn't have any scope requirements itself, we can use Depends with oauth2_scheme , we don't have to use Security when we don't need to specify security scopes. We also declare a special parameter of type SecurityScopes , imported from fastapi.security . This SecurityScopes class is similar to Request ( Request was used to get the request object directly). from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"Use SecurityScopes"},{"location":"advanced/security/oauth2-scopes/#use-the-scopes","text":"The parameter security_scopes will be of type SecurityScopes . It will have a property scopes with a list containing all the scopes required by itself and all the dependencies that use this as a sub-dependency. That means, all the \"dependants\"... this might sound confusing, it is explained again later below. The security_scopes object (of class SecurityScopes ) also provides a scope_str attribute with a single string, containing those scopes separated by spaces (we are going to use it). We create an HTTPException that we can re-use ( raise ) later at several points. In this exception, we include the scopes required (if any) as a string separated by spaces (using scope_str ). We put that string containing the scopes in the WWW-Authenticate header (this is part of the spec). from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"Use the scopes"},{"location":"advanced/security/oauth2-scopes/#verify-the-username-and-data-shape","text":"We verify that we get a username , and extract the scopes. And then we validate that data with the Pydantic model (catching the ValidationError exception), and if we get an error reading the JWT token or validating the data with Pydantic, we raise the HTTPException we created before. For that, we update the Pydantic model TokenData with a new property scopes . By validating the data with Pydantic we can make sure that we have, for example, exactly a list of str with the scopes and a str with the username . Instead of, for example, a dict , or something else, as it could break the application at some point later, making it a security risk. We also verify that we have a user with that username, and if not, we raise that same exception we created before. from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"Verify the username and data shape"},{"location":"advanced/security/oauth2-scopes/#verify-the-scopes","text":"We now verify that all the scopes required, by this dependency and all the dependants (including path operations ), are included in the scopes provided in the token received, otherwise raise an HTTPException . For this, we use security_scopes.scopes , that contains a list with all these scopes as str . from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"Verify the scopes"},{"location":"advanced/security/oauth2-scopes/#dependency-tree-and-scopes","text":"Let's review again this dependency tree and the scopes. As the get_current_active_user dependency has as a sub-dependency on get_current_user , the scope \"me\" declared at get_current_active_user will be included in the list of required scopes in the security_scopes.scopes passed to get_current_user . The path operation itself also declares a scope, \"items\" , so this will also be in the list of security_scopes.scopes passed to get_current_user . Here's how the hierarchy of dependencies and scopes looks like: The path operation read_own_items has: Required scopes [\"items\"] with the dependency: get_current_active_user : The dependency function get_current_active_user has: Required scopes [\"me\"] with the dependency: get_current_user : The dependency function get_current_user has: No scopes required by itself. A dependency using oauth2_scheme . A security_scopes parameter of type SecurityScopes : This security_scopes parameter has a property scopes with a list containing all these scopes declared above, so: security_scopes.scopes will contain [\"me\", \"items\"] for the path operation read_own_items . security_scopes.scopes will contain [\"me\"] for the path operation read_users_me , because it is declared in the dependency get_current_active_user . security_scopes.scopes will contain [] (nothing) for the path operation read_system_status , because it didn't declare any Security with scopes , and its dependency, get_current_user , doesn't declare any scope either. Tip The important and \"magic\" thing here is that get_current_user will have a different list of scopes to check for each path operation . All depending on the scopes declared in each path operation and each dependency in the dependency tree for that specific path operation .","title":"Dependency tree and scopes"},{"location":"advanced/security/oauth2-scopes/#more-details-about-securityscopes","text":"You can use SecurityScopes at any point, and in multiple places, it doesn't have to be at the \"root\" dependency. It will always have the security scopes declared in the current Security dependencies and all the dependants for that specific path operation and that specific dependency tree. Because the SecurityScopes will have all the scopes declared by dependants, you can use it to verify that a token has the required scopes in a central dependency function, and then declare different scope requirements in different path operations . They will be checked independently for each path operation .","title":"More details about SecurityScopes"},{"location":"advanced/security/oauth2-scopes/#check-it","text":"If you open the API docs, you can authenticate and specify which scopes you want to authorize. If you don't select any scope, you will be \"authenticated\", but when you try to access /users/me/ or /users/me/items/ you will get an error saying that you don't have enough permissions. You will still be able to access /status/ . And if you select the scope me but not the scope items , you will be able to access /users/me/ but not /users/me/items/ . That's what would happen to a third party application that tried to access one of these path operations with a token provided by a user, depending on how many permissions the user gave the application.","title":"Check it"},{"location":"advanced/security/oauth2-scopes/#about-third-party-integrations","text":"In this example we are using the OAuth2 \"password\" flow. This is appropriate when we are logging in to our own application, probably with our own frontend. Because we can trust it to receive the username and password , as we control it. But if you are building an OAuth2 application that others would connect to (i.e., if you are building an authentication provider equivalent to Facebook, Google, GitHub, etc.) you should use one of the other flows. The most common is the implicit flow. The most secure is the code flow, but is more complex to implement as it requires more steps. As it is more complex, many providers end up suggesting the implicit flow. Note It's common that each authentication provider names their flows in a different way, to make it part of their brand. But in the end, they are implementing the same OAuth2 standard. FastAPI includes utilities for all these OAuth2 authentication flows in fastapi.security.oauth2 .","title":"About third party integrations"},{"location":"advanced/security/oauth2-scopes/#security-in-decorator-dependencies","text":"The same way you can define a list of Depends in the decorator's dependencies parameter (as explained in Dependencies in path operation decorators ), you could also use Security with scopes there.","title":"Security in decorator dependencies"},{"location":"deployment/","text":"\ubc30\ud3ec\ud558\uae30 - \ub4e4\uc5b4\uac00\uba74\uc11c \u00b6 FastAPI \uc744 \ubc30\ud3ec\ud558\ub294 \uac83\uc740 \ube44\uad50\uc801 \uc27d\uc2b5\ub2c8\ub2e4. \ubc30\ud3ec\uc758 \uc758\ubbf8 \u00b6 \ubc30\ud3ec \ub780 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc0ac\uc6a9\uc790\uac00 \uc0ac\uc6a9 \ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294 \ub370 \ud544\uc694\ud55c \ub2e8\uacc4\ub97c \uc218\ud589\ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc6f9 API \uc758 \uacbd\uc6b0, \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\uc790 \uac00 \uc911\ub2e8\uc774\ub098 \uc624\ub958 \uc5c6\uc774 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ud6a8\uc728\uc801\uc73c\ub85c \uc811\uadfc \ud560 \uc218 \uc788\ub3c4\ub85d \uc88b\uc740 \uc131\ub2a5, \uc548\uc815\uc131 \ub4f1\uc744 \uc81c\uacf5\ud558\ub294 \uc11c\ubc84 \ud504\ub85c\uadf8\ub7a8\uacfc \ud568\uaed8 \uc6d0\uaca9 \uc2dc\uc2a4\ud15c \uc5d0 \uc774\ub97c \uc124\uce58\ud558\ub294 \uc791\uc5c5\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774\ub294 \uc9c0\uc18d\uc801\uc73c\ub85c \ucf54\ub4dc\ub97c \ubcc0\uacbd\ud558\uace0, \uc9c0\uc6b0\uace0, \uc218\uc815\ud558\uace0, \uac1c\ubc1c \uc11c\ubc84\ub97c \uc911\uc9c0\ud588\ub2e4\uac00 \ub2e4\uc2dc \uc2dc\uc791\ud558\ub294 \ub4f1\uc758 \uac1c\ubc1c \ub2e8\uacc4\uc640 \ub300\uc870\ub429\ub2c8\ub2e4. \ubc30\ud3ec \uc804\ub7b5 \u00b6 \uc0ac\uc6a9\ud558\ub294 \ub3c4\uad6c\ub098 \ud2b9\uc815 \uc0ac\ub840\uc5d0 \ub530\ub77c \uc5ec\ub7ec \uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ubc30\ud3ec\ub3c4\uad6c\ub4e4\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc9c1\uc811 \uc11c\ubc84\uc5d0 \ubc30\ud3ec \ud558\uac70\ub098, \ubc30\ud3ec\uc791\uc5c5\uc758 \uc77c\ubd80\ub97c \uc218\ud589\ud558\ub294 \ud074\ub77c\uc6b0\ub4dc \uc11c\ube44\uc2a4 \ub610\ub294 \ub2e4\ub978 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ubc30\ud3ec\ud560 \ub54c \uc120\ud0dd\ud560 \uc218 \uc788\ub294 \uba87 \uac00\uc9c0 \uc8fc\uc694 \ubc29\ubc95\uc744 \ubcf4\uc5ec \ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4 (\ub300\ubd80\ubd84 \ub2e4\ub978 \uc720\ud615\uc758 \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\ub3c4 \uc801\uc6a9\ub429\ub2c8\ub2e4). \ub2e4\uc74c \ucc28\ub840\uc5d0 \uc790\uc138\ud55c \ub0b4\uc6a9\uacfc \uc774\ub97c \uc704\ud55c \uba87 \uac00\uc9c0 \uae30\uc220\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \u2728","title":"\ubc30\ud3ec\ud558\uae30 - \ub4e4\uc5b4\uac00\uba74\uc11c"},{"location":"deployment/#-","text":"FastAPI \uc744 \ubc30\ud3ec\ud558\ub294 \uac83\uc740 \ube44\uad50\uc801 \uc27d\uc2b5\ub2c8\ub2e4.","title":"\ubc30\ud3ec\ud558\uae30 - \ub4e4\uc5b4\uac00\uba74\uc11c"},{"location":"deployment/#_1","text":"\ubc30\ud3ec \ub780 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc0ac\uc6a9\uc790\uac00 \uc0ac\uc6a9 \ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294 \ub370 \ud544\uc694\ud55c \ub2e8\uacc4\ub97c \uc218\ud589\ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc6f9 API \uc758 \uacbd\uc6b0, \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\uc790 \uac00 \uc911\ub2e8\uc774\ub098 \uc624\ub958 \uc5c6\uc774 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ud6a8\uc728\uc801\uc73c\ub85c \uc811\uadfc \ud560 \uc218 \uc788\ub3c4\ub85d \uc88b\uc740 \uc131\ub2a5, \uc548\uc815\uc131 \ub4f1\uc744 \uc81c\uacf5\ud558\ub294 \uc11c\ubc84 \ud504\ub85c\uadf8\ub7a8\uacfc \ud568\uaed8 \uc6d0\uaca9 \uc2dc\uc2a4\ud15c \uc5d0 \uc774\ub97c \uc124\uce58\ud558\ub294 \uc791\uc5c5\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774\ub294 \uc9c0\uc18d\uc801\uc73c\ub85c \ucf54\ub4dc\ub97c \ubcc0\uacbd\ud558\uace0, \uc9c0\uc6b0\uace0, \uc218\uc815\ud558\uace0, \uac1c\ubc1c \uc11c\ubc84\ub97c \uc911\uc9c0\ud588\ub2e4\uac00 \ub2e4\uc2dc \uc2dc\uc791\ud558\ub294 \ub4f1\uc758 \uac1c\ubc1c \ub2e8\uacc4\uc640 \ub300\uc870\ub429\ub2c8\ub2e4.","title":"\ubc30\ud3ec\uc758 \uc758\ubbf8"},{"location":"deployment/#_2","text":"\uc0ac\uc6a9\ud558\ub294 \ub3c4\uad6c\ub098 \ud2b9\uc815 \uc0ac\ub840\uc5d0 \ub530\ub77c \uc5ec\ub7ec \uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ubc30\ud3ec\ub3c4\uad6c\ub4e4\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc9c1\uc811 \uc11c\ubc84\uc5d0 \ubc30\ud3ec \ud558\uac70\ub098, \ubc30\ud3ec\uc791\uc5c5\uc758 \uc77c\ubd80\ub97c \uc218\ud589\ud558\ub294 \ud074\ub77c\uc6b0\ub4dc \uc11c\ube44\uc2a4 \ub610\ub294 \ub2e4\ub978 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ubc30\ud3ec\ud560 \ub54c \uc120\ud0dd\ud560 \uc218 \uc788\ub294 \uba87 \uac00\uc9c0 \uc8fc\uc694 \ubc29\ubc95\uc744 \ubcf4\uc5ec \ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4 (\ub300\ubd80\ubd84 \ub2e4\ub978 \uc720\ud615\uc758 \uc6f9 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\ub3c4 \uc801\uc6a9\ub429\ub2c8\ub2e4). \ub2e4\uc74c \ucc28\ub840\uc5d0 \uc790\uc138\ud55c \ub0b4\uc6a9\uacfc \uc774\ub97c \uc704\ud55c \uba87 \uac00\uc9c0 \uae30\uc220\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \u2728","title":"\ubc30\ud3ec \uc804\ub7b5"},{"location":"deployment/concepts/","text":"Deployments Concepts \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . When deploying a FastAPI application, or actually, any type of web API, there are several concepts that you probably care about, and using them you can find the most appropriate way to deploy your application . Some of the important concepts are: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting We'll see how they would affect deployments . In the end, the ultimate objective is to be able to serve your API clients in a way that is secure , to avoid disruptions , and to use the compute resources (for example remote servers/virtual machines) as efficiently as possible. \ud83d\ude80 I'll tell you a bit more about these concepts here, and that would hopefully give you the intuition you would need to decide how to deploy your API in very different environments, possibly even in future ones that don't exist yet. By considering these concepts, you will be able to evaluate and design the best way to deploy your own APIs . In the next chapters, I'll give you more concrete recipes to deploy FastAPI applications. But for now, let's check these important conceptual ideas . These concepts also apply to any other type of web API. \ud83d\udca1 Security - HTTPS \u00b6 In the previous chapter about HTTPS we learned about how HTTPS provides encryption for your API. We also saw that HTTPS is normally provided by a component external to your application server, a TLS Termination Proxy . And there has to be something in charge of renewing the HTTPS certificates , it could be the same component or it could be something different. Example Tools for HTTPS \u00b6 Some of the tools you could use as a TLS Termination Proxy are: Traefik Automatically handles certificates renewals \u2728 Caddy Automatically handles certificates renewals \u2728 Nginx With an external component like Certbot for certificate renewals HAProxy With an external component like Certbot for certificate renewals Kubernetes with an Ingress Controller like Nginx With an external component like cert-manager for certificate renewals Handled internally by a cloud provider as part of their services (read below \ud83d\udc47) Another option is that you could use a cloud service that does more of the work including setting up HTTPS. It could have some restrictions or charge you more, etc. But in that case, you wouldn't have to set up a TLS Termination Proxy yourself. I'll show you some concrete examples in the next chapters. Then the next concepts to consider are all about the program running your actual API (e.g. Uvicorn). Program and Process \u00b6 We will talk a lot about the running \" process \", so it's useful to have clarity about what it means, and what's the difference with the word \" program \". What is a Program \u00b6 The word program is commonly used to describe many things: The code that you write, the Python files . The file that can be executed by the operating system, for example: python , python.exe or uvicorn . A particular program while it is running on the operating system, using the CPU, and storing things on memory. This is also called a process . What is a Process \u00b6 The word process is normally used in a more specific way, only referring to the thing that is running in the operating system (like in the last point above): A particular program while it is running on the operating system. This doesn't refer to the file, nor to the code, it refers specifically to the thing that is being executed and managed by the operating system. Any program, any code, can only do things when it is being executed . So, when there's a process running . The process can be terminated (or \"killed\") by you, or by the operating system. At that point, it stops running/being executed, and it can no longer do things . Each application that you have running on your computer has some process behind it, each running program, each window, etc. And there are normally many processes running at the same time while a computer is on. There can be multiple processes of the same program running at the same time. If you check out the \"task manager\" or \"system monitor\" (or similar tools) in your operating system, you will be able to see many of those processes running. And, for example, you will probably see that there are multiple processes running the same browser program (Firefox, Chrome, Edge, etc). They normally run one process per tab, plus some other extra processes. Now that we know the difference between the terms process and program , let's continue talking about deployments. Running on Startup \u00b6 In most cases, when you create a web API, you want it to be always running , uninterrupted, so that your clients can always access it. This is of course, unless you have a specific reason why you want it to run only in certain situations, but most of the time you want it constantly running and available . In a Remote Server \u00b6 When you set up a remote server (a cloud server, a virtual machine, etc.) the simplest thing you can do is to run Uvicorn (or similar) manually, the same way you do when developing locally. And it will work and will be useful during development . But if your connection to the server is lost, the running process will probably die. And if the server is restarted (for example after updates, or migrations from the cloud provider) you probably won't notice it . And because of that, you won't even know that you have to restart the process manually. So, your API will just stay dead. \ud83d\ude31 Run Automatically on Startup \u00b6 In general, you will probably want the server program (e.g. Uvicorn) to be started automatically on server startup, and without needing any human intervention , to have a process always running with your API (e.g. Uvicorn running your FastAPI app). Separate Program \u00b6 To achieve this, you will normally have a separate program that would make sure your application is run on startup. And in many cases, it would also make sure other components or applications are also run, for example, a database. Example Tools to Run at Startup \u00b6 Some examples of the tools that can do this job are: Docker Kubernetes Docker Compose Docker in Swarm Mode Systemd Supervisor Handled internally by a cloud provider as part of their services Others... I'll give you more concrete examples in the next chapters. Restarts \u00b6 Similar to making sure your application is run on startup, you probably also want to make sure it is restarted after failures. We Make Mistakes \u00b6 We, as humans, make mistakes , all the time. Software almost always has bugs hidden in different places. \ud83d\udc1b And we as developers keep improving the code as we find those bugs and as we implement new features (possibly adding new bugs too \ud83d\ude05). Small Errors Automatically Handled \u00b6 When building web APIs with FastAPI, if there's an error in our code, FastAPI will normally contain it to the single request that triggered the error. \ud83d\udee1 The client will get a 500 Internal Server Error for that request, but the application will continue working for the next requests instead of just crashing completely. Bigger Errors - Crashes \u00b6 Nevertheless, there might be cases where we write some code that crashes the entire application making Uvicorn and Python crash. \ud83d\udca5 And still, you would probably not want the application to stay dead because there was an error in one place, you probably want it to continue running at least for the path operations that are not broken. Restart After Crash \u00b6 But in those cases with really bad errors that crash the running process , you would want an external component that is in charge of restarting the process, at least a couple of times... Tip ...Although if the whole application is just crashing immediately it probably doesn't make sense to keep restarting it forever. But in those cases, you will probably notice it during development, or at least right after deployment. So let's focus on the main cases, where it could crash entirely in some particular cases in the future , and it still makes sense to restart it. You would probably want to have the thing in charge of restarting your application as an external component , because by that point, the same application with Uvicorn and Python already crashed, so there's nothing in the same code of the same app that could do anything about it. Example Tools to Restart Automatically \u00b6 In most cases, the same tool that is used to run the program on startup is also used to handle automatic restarts . For example, this could be handled by: Docker Kubernetes Docker Compose Docker in Swarm Mode Systemd Supervisor Handled internally by a cloud provider as part of their services Others... Replication - Processes and Memory \u00b6 With a FastAPI application, using a server program like Uvicorn, running it once in one process can serve multiple clients concurrently. But in many cases, you will want to run several worker processes at the same time. Multiple Processes - Workers \u00b6 If you have more clients than what a single process can handle (for example if the virtual machine is not too big) and you have multiple cores in the server's CPU, then you could have multiple processes running with the same application at the same time, and distribute all the requests among them. When you run multiple processes of the same API program, they are commonly called workers . Worker Processes and Ports \u00b6 Remember from the docs About HTTPS that only one process can be listening on one combination of port and IP address in a server? This is still true. So, to be able to have multiple processes at the same time, there has to be a single process listening on a port that then transmits the communication to each worker process in some way. Memory per Process \u00b6 Now, when the program loads things in memory, for example, a machine learning model in a variable, or the contents of a large file in a variable, all that consumes a bit of the memory (RAM) of the server. And multiple processes normally don't share any memory . This means that each running process has its own things, variables, and memory. And if you are consuming a large amount of memory in your code, each process will consume an equivalent amount of memory. Server Memory \u00b6 For example, if your code loads a Machine Learning model with 1 GB in size , when you run one process with your API, it will consume at least 1 GB of RAM. And if you start 4 processes (4 workers), each will consume 1 GB of RAM. So in total, your API will consume 4 GB of RAM . And if your remote server or virtual machine only has 3 GB of RAM, trying to load more than 4 GB of RAM will cause problems. \ud83d\udea8 Multiple Processes - An Example \u00b6 In this example, there's a Manager Process that starts and controls two Worker Processes . This Manager Process would probably be the one listening on the port in the IP. And it would transmit all the communication to the worker processes. Those worker processes would be the ones running your application, they would perform the main computations to receive a request and return a response , and they would load anything you put in variables in RAM. And of course, the same machine would probably have other processes running as well, apart from your application. An interesting detail is that the percentage of the CPU used by each process can vary a lot over time, but the memory (RAM) normally stays more or less stable . If you have an API that does a comparable amount of computations every time and you have a lot of clients, then the CPU utilization will probably also be stable (instead of constantly going up and down quickly). Examples of Replication Tools and Strategies \u00b6 There can be several approaches to achieve this, and I'll tell you more about specific strategies in the next chapters, for example when talking about Docker and containers. The main constraint to consider is that there has to be a single component handling the port in the public IP . And then it has to have a way to transmit the communication to the replicated processes/workers . Here are some possible combinations and strategies: Gunicorn managing Uvicorn workers Gunicorn would be the process manager listening on the IP and port , the replication would be by having multiple Uvicorn worker processes Uvicorn managing Uvicorn workers One Uvicorn process manager would listen on the IP and port , and it would start multiple Uvicorn worker processes Kubernetes and other distributed container systems Something in the Kubernetes layer would listen on the IP and port . The replication would be by having multiple containers , each with one Uvicorn process running Cloud services that handle this for your The cloud service will probably handle replication for you . It would possibly let you define a process to run , or a container image to use, in any case, it would most probably be a single Uvicorn process , and the cloud service would be in charge of replicating it. Tip Don't worry if some of these items about containers , Docker, or Kubernetes don't make a lot of sense yet. I'll tell you more about container images, Docker, Kubernetes, etc. in a future chapter: FastAPI in Containers - Docker . Previous Steps Before Starting \u00b6 There are many cases where you want to perform some steps before starting your application. For example, you might want to run database migrations . But in most cases, you will want to perform these steps only once . So, you will want to have a single process to perform those previous steps , before starting the application. And you will have to make sure that it's a single process running those previous steps even if afterwards, you start multiple processes (multiple workers) for the application itself. If those steps were run by multiple processes , they would duplicate the work by running it on parallel , and if the steps were something delicate like a database migration, they could cause conflicts with each other. Of course, there are some cases where there's no problem in running the previous steps multiple times, in that case, it's a lot easier to handle. Tip Also, have in mind that depending on your setup, in some cases you might not even need any previous steps before starting your application. In that case, you wouldn't have to worry about any of this. \ud83e\udd37 Examples of Previous Steps Strategies \u00b6 This will depend heavily on the way you deploy your system , and it would probably be connected to the way you start programs, handling restarts, etc. Here are some possible ideas: An \"Init Container\" in Kubernetes that runs before your app container A bash script that runs the previous steps and then starts your application You would still need a way to start/restart that bash script, detect errors, etc. Tip I'll give you more concrete examples for doing this with containers in a future chapter: FastAPI in Containers - Docker . Resource Utilization \u00b6 Your server(s) is (are) a resource , you can consume or utilize , with your programs, the computation time on the CPUs, and the RAM memory available. How much of the system resources do you want to be consuming/utilizing? It might be easy to think \"not much\", but in reality, you will probably want to consume as much as possible without crashing . If you are paying for 3 servers but you are using only a little bit of their RAM and CPU, you are probably wasting money \ud83d\udcb8, and probably wasting server electric power \ud83c\udf0e, etc. In that case, it could be better to have only 2 servers and use a higher percentage of their resources (CPU, memory, disk, network bandwidth, etc). On the other hand, if you have 2 servers and you are using 100% of their CPU and RAM , at some point one process will ask for more memory, and the server will have to use the disk as \"memory\" (which can be thousands of times slower), or even crash . Or one process might need to do some computation and would have to wait until the CPU is free again. In this case, it would be better to get one extra server and run some processes on it so that they all have enough RAM and CPU time . There's also the chance that for some reason you have a spike of usage of your API. Maybe it went viral, or maybe some other services or bots start using it. And you might want to have extra resources to be safe in those cases. You could put an arbitrary number to target, for example, something between 50% to 90% of resource utilization. The point is that those are probably the main things you will want to measure and use to tweak your deployments. You can use simple tools like htop to see the CPU and RAM used in your server or the amount used by each process. Or you can use more complex monitoring tools, which may be distributed across servers, etc. Recap \u00b6 You have been reading here some of the main concepts that you would probably need to have in mind when deciding how to deploy your application: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting Understanding these ideas and how to apply them should give you the intuition necessary to take any decisions when configuring and tweaking your deployments. \ud83e\udd13 In the next sections, I'll give you more concrete examples of possible strategies you can follow. \ud83d\ude80","title":"Deployments Concepts"},{"location":"deployment/concepts/#deployments-concepts","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . When deploying a FastAPI application, or actually, any type of web API, there are several concepts that you probably care about, and using them you can find the most appropriate way to deploy your application . Some of the important concepts are: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting We'll see how they would affect deployments . In the end, the ultimate objective is to be able to serve your API clients in a way that is secure , to avoid disruptions , and to use the compute resources (for example remote servers/virtual machines) as efficiently as possible. \ud83d\ude80 I'll tell you a bit more about these concepts here, and that would hopefully give you the intuition you would need to decide how to deploy your API in very different environments, possibly even in future ones that don't exist yet. By considering these concepts, you will be able to evaluate and design the best way to deploy your own APIs . In the next chapters, I'll give you more concrete recipes to deploy FastAPI applications. But for now, let's check these important conceptual ideas . These concepts also apply to any other type of web API. \ud83d\udca1","title":"Deployments Concepts"},{"location":"deployment/concepts/#security-https","text":"In the previous chapter about HTTPS we learned about how HTTPS provides encryption for your API. We also saw that HTTPS is normally provided by a component external to your application server, a TLS Termination Proxy . And there has to be something in charge of renewing the HTTPS certificates , it could be the same component or it could be something different.","title":"Security - HTTPS"},{"location":"deployment/concepts/#example-tools-for-https","text":"Some of the tools you could use as a TLS Termination Proxy are: Traefik Automatically handles certificates renewals \u2728 Caddy Automatically handles certificates renewals \u2728 Nginx With an external component like Certbot for certificate renewals HAProxy With an external component like Certbot for certificate renewals Kubernetes with an Ingress Controller like Nginx With an external component like cert-manager for certificate renewals Handled internally by a cloud provider as part of their services (read below \ud83d\udc47) Another option is that you could use a cloud service that does more of the work including setting up HTTPS. It could have some restrictions or charge you more, etc. But in that case, you wouldn't have to set up a TLS Termination Proxy yourself. I'll show you some concrete examples in the next chapters. Then the next concepts to consider are all about the program running your actual API (e.g. Uvicorn).","title":"Example Tools for HTTPS"},{"location":"deployment/concepts/#program-and-process","text":"We will talk a lot about the running \" process \", so it's useful to have clarity about what it means, and what's the difference with the word \" program \".","title":"Program and Process"},{"location":"deployment/concepts/#what-is-a-program","text":"The word program is commonly used to describe many things: The code that you write, the Python files . The file that can be executed by the operating system, for example: python , python.exe or uvicorn . A particular program while it is running on the operating system, using the CPU, and storing things on memory. This is also called a process .","title":"What is a Program"},{"location":"deployment/concepts/#what-is-a-process","text":"The word process is normally used in a more specific way, only referring to the thing that is running in the operating system (like in the last point above): A particular program while it is running on the operating system. This doesn't refer to the file, nor to the code, it refers specifically to the thing that is being executed and managed by the operating system. Any program, any code, can only do things when it is being executed . So, when there's a process running . The process can be terminated (or \"killed\") by you, or by the operating system. At that point, it stops running/being executed, and it can no longer do things . Each application that you have running on your computer has some process behind it, each running program, each window, etc. And there are normally many processes running at the same time while a computer is on. There can be multiple processes of the same program running at the same time. If you check out the \"task manager\" or \"system monitor\" (or similar tools) in your operating system, you will be able to see many of those processes running. And, for example, you will probably see that there are multiple processes running the same browser program (Firefox, Chrome, Edge, etc). They normally run one process per tab, plus some other extra processes. Now that we know the difference between the terms process and program , let's continue talking about deployments.","title":"What is a Process"},{"location":"deployment/concepts/#running-on-startup","text":"In most cases, when you create a web API, you want it to be always running , uninterrupted, so that your clients can always access it. This is of course, unless you have a specific reason why you want it to run only in certain situations, but most of the time you want it constantly running and available .","title":"Running on Startup"},{"location":"deployment/concepts/#in-a-remote-server","text":"When you set up a remote server (a cloud server, a virtual machine, etc.) the simplest thing you can do is to run Uvicorn (or similar) manually, the same way you do when developing locally. And it will work and will be useful during development . But if your connection to the server is lost, the running process will probably die. And if the server is restarted (for example after updates, or migrations from the cloud provider) you probably won't notice it . And because of that, you won't even know that you have to restart the process manually. So, your API will just stay dead. \ud83d\ude31","title":"In a Remote Server"},{"location":"deployment/concepts/#run-automatically-on-startup","text":"In general, you will probably want the server program (e.g. Uvicorn) to be started automatically on server startup, and without needing any human intervention , to have a process always running with your API (e.g. Uvicorn running your FastAPI app).","title":"Run Automatically on Startup"},{"location":"deployment/concepts/#separate-program","text":"To achieve this, you will normally have a separate program that would make sure your application is run on startup. And in many cases, it would also make sure other components or applications are also run, for example, a database.","title":"Separate Program"},{"location":"deployment/concepts/#example-tools-to-run-at-startup","text":"Some examples of the tools that can do this job are: Docker Kubernetes Docker Compose Docker in Swarm Mode Systemd Supervisor Handled internally by a cloud provider as part of their services Others... I'll give you more concrete examples in the next chapters.","title":"Example Tools to Run at Startup"},{"location":"deployment/concepts/#restarts","text":"Similar to making sure your application is run on startup, you probably also want to make sure it is restarted after failures.","title":"Restarts"},{"location":"deployment/concepts/#we-make-mistakes","text":"We, as humans, make mistakes , all the time. Software almost always has bugs hidden in different places. \ud83d\udc1b And we as developers keep improving the code as we find those bugs and as we implement new features (possibly adding new bugs too \ud83d\ude05).","title":"We Make Mistakes"},{"location":"deployment/concepts/#small-errors-automatically-handled","text":"When building web APIs with FastAPI, if there's an error in our code, FastAPI will normally contain it to the single request that triggered the error. \ud83d\udee1 The client will get a 500 Internal Server Error for that request, but the application will continue working for the next requests instead of just crashing completely.","title":"Small Errors Automatically Handled"},{"location":"deployment/concepts/#bigger-errors-crashes","text":"Nevertheless, there might be cases where we write some code that crashes the entire application making Uvicorn and Python crash. \ud83d\udca5 And still, you would probably not want the application to stay dead because there was an error in one place, you probably want it to continue running at least for the path operations that are not broken.","title":"Bigger Errors - Crashes"},{"location":"deployment/concepts/#restart-after-crash","text":"But in those cases with really bad errors that crash the running process , you would want an external component that is in charge of restarting the process, at least a couple of times... Tip ...Although if the whole application is just crashing immediately it probably doesn't make sense to keep restarting it forever. But in those cases, you will probably notice it during development, or at least right after deployment. So let's focus on the main cases, where it could crash entirely in some particular cases in the future , and it still makes sense to restart it. You would probably want to have the thing in charge of restarting your application as an external component , because by that point, the same application with Uvicorn and Python already crashed, so there's nothing in the same code of the same app that could do anything about it.","title":"Restart After Crash"},{"location":"deployment/concepts/#example-tools-to-restart-automatically","text":"In most cases, the same tool that is used to run the program on startup is also used to handle automatic restarts . For example, this could be handled by: Docker Kubernetes Docker Compose Docker in Swarm Mode Systemd Supervisor Handled internally by a cloud provider as part of their services Others...","title":"Example Tools to Restart Automatically"},{"location":"deployment/concepts/#replication-processes-and-memory","text":"With a FastAPI application, using a server program like Uvicorn, running it once in one process can serve multiple clients concurrently. But in many cases, you will want to run several worker processes at the same time.","title":"Replication - Processes and Memory"},{"location":"deployment/concepts/#multiple-processes-workers","text":"If you have more clients than what a single process can handle (for example if the virtual machine is not too big) and you have multiple cores in the server's CPU, then you could have multiple processes running with the same application at the same time, and distribute all the requests among them. When you run multiple processes of the same API program, they are commonly called workers .","title":"Multiple Processes - Workers"},{"location":"deployment/concepts/#worker-processes-and-ports","text":"Remember from the docs About HTTPS that only one process can be listening on one combination of port and IP address in a server? This is still true. So, to be able to have multiple processes at the same time, there has to be a single process listening on a port that then transmits the communication to each worker process in some way.","title":"Worker Processes and Ports"},{"location":"deployment/concepts/#memory-per-process","text":"Now, when the program loads things in memory, for example, a machine learning model in a variable, or the contents of a large file in a variable, all that consumes a bit of the memory (RAM) of the server. And multiple processes normally don't share any memory . This means that each running process has its own things, variables, and memory. And if you are consuming a large amount of memory in your code, each process will consume an equivalent amount of memory.","title":"Memory per Process"},{"location":"deployment/concepts/#server-memory","text":"For example, if your code loads a Machine Learning model with 1 GB in size , when you run one process with your API, it will consume at least 1 GB of RAM. And if you start 4 processes (4 workers), each will consume 1 GB of RAM. So in total, your API will consume 4 GB of RAM . And if your remote server or virtual machine only has 3 GB of RAM, trying to load more than 4 GB of RAM will cause problems. \ud83d\udea8","title":"Server Memory"},{"location":"deployment/concepts/#multiple-processes-an-example","text":"In this example, there's a Manager Process that starts and controls two Worker Processes . This Manager Process would probably be the one listening on the port in the IP. And it would transmit all the communication to the worker processes. Those worker processes would be the ones running your application, they would perform the main computations to receive a request and return a response , and they would load anything you put in variables in RAM. And of course, the same machine would probably have other processes running as well, apart from your application. An interesting detail is that the percentage of the CPU used by each process can vary a lot over time, but the memory (RAM) normally stays more or less stable . If you have an API that does a comparable amount of computations every time and you have a lot of clients, then the CPU utilization will probably also be stable (instead of constantly going up and down quickly).","title":"Multiple Processes - An Example"},{"location":"deployment/concepts/#examples-of-replication-tools-and-strategies","text":"There can be several approaches to achieve this, and I'll tell you more about specific strategies in the next chapters, for example when talking about Docker and containers. The main constraint to consider is that there has to be a single component handling the port in the public IP . And then it has to have a way to transmit the communication to the replicated processes/workers . Here are some possible combinations and strategies: Gunicorn managing Uvicorn workers Gunicorn would be the process manager listening on the IP and port , the replication would be by having multiple Uvicorn worker processes Uvicorn managing Uvicorn workers One Uvicorn process manager would listen on the IP and port , and it would start multiple Uvicorn worker processes Kubernetes and other distributed container systems Something in the Kubernetes layer would listen on the IP and port . The replication would be by having multiple containers , each with one Uvicorn process running Cloud services that handle this for your The cloud service will probably handle replication for you . It would possibly let you define a process to run , or a container image to use, in any case, it would most probably be a single Uvicorn process , and the cloud service would be in charge of replicating it. Tip Don't worry if some of these items about containers , Docker, or Kubernetes don't make a lot of sense yet. I'll tell you more about container images, Docker, Kubernetes, etc. in a future chapter: FastAPI in Containers - Docker .","title":"Examples of Replication Tools and Strategies"},{"location":"deployment/concepts/#previous-steps-before-starting","text":"There are many cases where you want to perform some steps before starting your application. For example, you might want to run database migrations . But in most cases, you will want to perform these steps only once . So, you will want to have a single process to perform those previous steps , before starting the application. And you will have to make sure that it's a single process running those previous steps even if afterwards, you start multiple processes (multiple workers) for the application itself. If those steps were run by multiple processes , they would duplicate the work by running it on parallel , and if the steps were something delicate like a database migration, they could cause conflicts with each other. Of course, there are some cases where there's no problem in running the previous steps multiple times, in that case, it's a lot easier to handle. Tip Also, have in mind that depending on your setup, in some cases you might not even need any previous steps before starting your application. In that case, you wouldn't have to worry about any of this. \ud83e\udd37","title":"Previous Steps Before Starting"},{"location":"deployment/concepts/#examples-of-previous-steps-strategies","text":"This will depend heavily on the way you deploy your system , and it would probably be connected to the way you start programs, handling restarts, etc. Here are some possible ideas: An \"Init Container\" in Kubernetes that runs before your app container A bash script that runs the previous steps and then starts your application You would still need a way to start/restart that bash script, detect errors, etc. Tip I'll give you more concrete examples for doing this with containers in a future chapter: FastAPI in Containers - Docker .","title":"Examples of Previous Steps Strategies"},{"location":"deployment/concepts/#resource-utilization","text":"Your server(s) is (are) a resource , you can consume or utilize , with your programs, the computation time on the CPUs, and the RAM memory available. How much of the system resources do you want to be consuming/utilizing? It might be easy to think \"not much\", but in reality, you will probably want to consume as much as possible without crashing . If you are paying for 3 servers but you are using only a little bit of their RAM and CPU, you are probably wasting money \ud83d\udcb8, and probably wasting server electric power \ud83c\udf0e, etc. In that case, it could be better to have only 2 servers and use a higher percentage of their resources (CPU, memory, disk, network bandwidth, etc). On the other hand, if you have 2 servers and you are using 100% of their CPU and RAM , at some point one process will ask for more memory, and the server will have to use the disk as \"memory\" (which can be thousands of times slower), or even crash . Or one process might need to do some computation and would have to wait until the CPU is free again. In this case, it would be better to get one extra server and run some processes on it so that they all have enough RAM and CPU time . There's also the chance that for some reason you have a spike of usage of your API. Maybe it went viral, or maybe some other services or bots start using it. And you might want to have extra resources to be safe in those cases. You could put an arbitrary number to target, for example, something between 50% to 90% of resource utilization. The point is that those are probably the main things you will want to measure and use to tweak your deployments. You can use simple tools like htop to see the CPU and RAM used in your server or the amount used by each process. Or you can use more complex monitoring tools, which may be distributed across servers, etc.","title":"Resource Utilization"},{"location":"deployment/concepts/#recap","text":"You have been reading here some of the main concepts that you would probably need to have in mind when deciding how to deploy your application: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting Understanding these ideas and how to apply them should give you the intuition necessary to take any decisions when configuring and tweaking your deployments. \ud83e\udd13 In the next sections, I'll give you more concrete examples of possible strategies you can follow. \ud83d\ude80","title":"Recap"},{"location":"deployment/deta/","text":"Deploy FastAPI on Deta \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In this section you will learn how to easily deploy a FastAPI application on Deta using the free plan. \ud83c\udf81 It will take you about 10 minutes . Info Deta is a FastAPI sponsor. \ud83c\udf89 A basic FastAPI app \u00b6 Create a directory for your app, for example, ./fastapideta/ and enter into it. FastAPI code \u00b6 Create a main.py file with: from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int ): return { \"item_id\" : item_id } Requirements \u00b6 Now, in the same directory create a file requirements.txt with: fastapi Tip You don't need to install Uvicorn to deploy on Deta, although you would probably want to install it locally to test your app. Directory structure \u00b6 You will now have one directory ./fastapideta/ with two files: . \u2514\u2500\u2500 main.py \u2514\u2500\u2500 requirements.txt Create a free Deta account \u00b6 Now create a free account on Deta , you just need an email and password. You don't even need a credit card. Install the CLI \u00b6 Once you have your account, install the Deta CLI : Linux, macOS Windows PowerShell $ curl -fsSL https://get.deta.dev/cli.sh | sh $ iwr https://get.deta.dev/cli.ps1 -useb | iex After installing it, open a new terminal so that the installed CLI is detected. In a new terminal, confirm that it was correctly installed with: $ deta --help Deta command line interface for managing deta micros. Complete documentation available at https://docs.deta.sh Usage: deta [flags] deta [command] Available Commands: auth Change auth settings for a deta micro ... Tip If you have problems installing the CLI, check the official Deta docs . Login with the CLI \u00b6 Now login to Deta from the CLI with: $ deta login Please, log in from the web page. Waiting.. Logged in successfully. This will open a web browser and authenticate automatically. Deploy with Deta \u00b6 Next, deploy your application with the Deta CLI: $ deta new Successfully created a new micro // Notice the \"endpoint\" \ud83d\udd0d { \"name\": \"fastapideta\", \"runtime\": \"python3.7\", \"endpoint\": \"https://qltnci.deta.dev\", \"visor\": \"enabled\", \"http_auth\": \"enabled\" } Adding dependencies... ---> 100% Successfully installed fastapi-0.61.1 pydantic-1.7.2 starlette-0.13.6 You will see a JSON message similar to: { \"name\" : \"fastapideta\" , \"runtime\" : \"python3.7\" , \"endpoint\" : \"https://qltnci.deta.dev\" , \"visor\" : \"enabled\" , \"http_auth\" : \"enabled\" } Tip Your deployment will have a different \"endpoint\" URL. Check it \u00b6 Now open your browser in your endpoint URL. In the example above it was https://qltnci.deta.dev , but yours will be different. You will see the JSON response from your FastAPI app: { \"Hello\" : \"World\" } And now go to the /docs for your API, in the example above it would be https://qltnci.deta.dev/docs . It will show your docs like: Enable public access \u00b6 By default, Deta will handle authentication using cookies for your account. But once you are ready, you can make it public with: $ deta auth disable Successfully disabled http auth Now you can share that URL with anyone and they will be able to access your API. \ud83d\ude80 HTTPS \u00b6 Congrats! You deployed your FastAPI app to Deta! \ud83c\udf89 \ud83c\udf70 Also, notice that Deta correctly handles HTTPS for you, so you don't have to take care of that and can be sure that your clients will have a secure encrypted connection. \u2705 \ud83d\udd12 Check the Visor \u00b6 From your docs UI (they will be in a URL like https://qltnci.deta.dev/docs ) send a request to your path operation /items/{item_id} . For example with ID 5 . Now go to https://web.deta.sh . You will see there's a section to the left called \"Micros\" with each of your apps. You will see a tab with \"Details\", and also a tab \"Visor\", go to the tab \"Visor\". In there you can inspect the recent requests sent to your app. You can also edit them and re-play them. Learn more \u00b6 At some point, you will probably want to store some data for your app in a way that persists through time. For that you can use Deta Base , it also has a generous free tier . You can also read more in the Deta Docs . Deployment Concepts \u00b6 Coming back to the concepts we discussed in Deployments Concepts , here's how each of them would be handled with Deta: HTTPS : Handled by Deta, they will give you a subdomain and handle HTTPS automatically. Running on startup : Handled by Deta, as part of their service. Restarts : Handled by Deta, as part of their service. Replication : Handled by Deta, as part of their service. Memory : Limit predefined by Deta, you could contact them to increase it. Previous steps before starting : Not directly supported, you could make it work with their Cron system or additional scripts. Note Deta is designed to make it easy (and free) to deploy simple applications quickly. It can simplify several use cases, but at the same time, it doesn't support others, like using external databases (apart from Deta's own NoSQL database system), custom virtual machines, etc. You can read more details in the Deta docs to see if it's the right choice for you.","title":"Deploy FastAPI on Deta"},{"location":"deployment/deta/#deploy-fastapi-on-deta","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In this section you will learn how to easily deploy a FastAPI application on Deta using the free plan. \ud83c\udf81 It will take you about 10 minutes . Info Deta is a FastAPI sponsor. \ud83c\udf89","title":"Deploy FastAPI on Deta"},{"location":"deployment/deta/#a-basic-fastapi-app","text":"Create a directory for your app, for example, ./fastapideta/ and enter into it.","title":"A basic FastAPI app"},{"location":"deployment/deta/#fastapi-code","text":"Create a main.py file with: from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int ): return { \"item_id\" : item_id }","title":"FastAPI code"},{"location":"deployment/deta/#requirements","text":"Now, in the same directory create a file requirements.txt with: fastapi Tip You don't need to install Uvicorn to deploy on Deta, although you would probably want to install it locally to test your app.","title":"Requirements"},{"location":"deployment/deta/#directory-structure","text":"You will now have one directory ./fastapideta/ with two files: . \u2514\u2500\u2500 main.py \u2514\u2500\u2500 requirements.txt","title":"Directory structure"},{"location":"deployment/deta/#create-a-free-deta-account","text":"Now create a free account on Deta , you just need an email and password. You don't even need a credit card.","title":"Create a free Deta account"},{"location":"deployment/deta/#install-the-cli","text":"Once you have your account, install the Deta CLI : Linux, macOS Windows PowerShell $ curl -fsSL https://get.deta.dev/cli.sh | sh $ iwr https://get.deta.dev/cli.ps1 -useb | iex After installing it, open a new terminal so that the installed CLI is detected. In a new terminal, confirm that it was correctly installed with: $ deta --help Deta command line interface for managing deta micros. Complete documentation available at https://docs.deta.sh Usage: deta [flags] deta [command] Available Commands: auth Change auth settings for a deta micro ... Tip If you have problems installing the CLI, check the official Deta docs .","title":"Install the CLI"},{"location":"deployment/deta/#login-with-the-cli","text":"Now login to Deta from the CLI with: $ deta login Please, log in from the web page. Waiting.. Logged in successfully. This will open a web browser and authenticate automatically.","title":"Login with the CLI"},{"location":"deployment/deta/#deploy-with-deta","text":"Next, deploy your application with the Deta CLI: $ deta new Successfully created a new micro // Notice the \"endpoint\" \ud83d\udd0d { \"name\": \"fastapideta\", \"runtime\": \"python3.7\", \"endpoint\": \"https://qltnci.deta.dev\", \"visor\": \"enabled\", \"http_auth\": \"enabled\" } Adding dependencies... ---> 100% Successfully installed fastapi-0.61.1 pydantic-1.7.2 starlette-0.13.6 You will see a JSON message similar to: { \"name\" : \"fastapideta\" , \"runtime\" : \"python3.7\" , \"endpoint\" : \"https://qltnci.deta.dev\" , \"visor\" : \"enabled\" , \"http_auth\" : \"enabled\" } Tip Your deployment will have a different \"endpoint\" URL.","title":"Deploy with Deta"},{"location":"deployment/deta/#check-it","text":"Now open your browser in your endpoint URL. In the example above it was https://qltnci.deta.dev , but yours will be different. You will see the JSON response from your FastAPI app: { \"Hello\" : \"World\" } And now go to the /docs for your API, in the example above it would be https://qltnci.deta.dev/docs . It will show your docs like:","title":"Check it"},{"location":"deployment/deta/#enable-public-access","text":"By default, Deta will handle authentication using cookies for your account. But once you are ready, you can make it public with: $ deta auth disable Successfully disabled http auth Now you can share that URL with anyone and they will be able to access your API. \ud83d\ude80","title":"Enable public access"},{"location":"deployment/deta/#https","text":"Congrats! You deployed your FastAPI app to Deta! \ud83c\udf89 \ud83c\udf70 Also, notice that Deta correctly handles HTTPS for you, so you don't have to take care of that and can be sure that your clients will have a secure encrypted connection. \u2705 \ud83d\udd12","title":"HTTPS"},{"location":"deployment/deta/#check-the-visor","text":"From your docs UI (they will be in a URL like https://qltnci.deta.dev/docs ) send a request to your path operation /items/{item_id} . For example with ID 5 . Now go to https://web.deta.sh . You will see there's a section to the left called \"Micros\" with each of your apps. You will see a tab with \"Details\", and also a tab \"Visor\", go to the tab \"Visor\". In there you can inspect the recent requests sent to your app. You can also edit them and re-play them.","title":"Check the Visor"},{"location":"deployment/deta/#learn-more","text":"At some point, you will probably want to store some data for your app in a way that persists through time. For that you can use Deta Base , it also has a generous free tier . You can also read more in the Deta Docs .","title":"Learn more"},{"location":"deployment/deta/#deployment-concepts","text":"Coming back to the concepts we discussed in Deployments Concepts , here's how each of them would be handled with Deta: HTTPS : Handled by Deta, they will give you a subdomain and handle HTTPS automatically. Running on startup : Handled by Deta, as part of their service. Restarts : Handled by Deta, as part of their service. Replication : Handled by Deta, as part of their service. Memory : Limit predefined by Deta, you could contact them to increase it. Previous steps before starting : Not directly supported, you could make it work with their Cron system or additional scripts. Note Deta is designed to make it easy (and free) to deploy simple applications quickly. It can simplify several use cases, but at the same time, it doesn't support others, like using external databases (apart from Deta's own NoSQL database system), custom virtual machines, etc. You can read more details in the Deta docs to see if it's the right choice for you.","title":"Deployment Concepts"},{"location":"deployment/docker/","text":"\ucee8\ud14c\uc774\ub108\uc758 FastAPI - \ub3c4\ucee4 \u00b6 FastAPI \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ubc30\ud3ec\ud560 \ub54c \uc77c\ubc18\uc801\uc778 \uc811\uadfc \ubc29\ubc95\uc740 \ub9ac\ub205\uc2a4 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \ub97c \uc0dd\uc131\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774 \ubc29\ubc95\uc740 \uc8fc\ub85c \ub3c4\ucee4 \ub97c \uc0ac\uc6a9\ud574 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \ud574\ub2f9 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \uba87\uac00\uc9c0 \ubc29\ubc95\uc73c\ub85c \ubc30\ud3ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9ac\ub205\uc2a4 \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud558\ub294 \ub370\uc5d0\ub294 \ubcf4\uc548 , \ubc18\ubcf5 \uac00\ub2a5\uc131 , \ub2e8\uc21c\ud568 \ub4f1\uc758 \uc7a5\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud301 \uc2dc\uac04\uc5d0 \ucad3\uae30\uace0 \uc788\uace0 \uc774\ubbf8 \uc774\ub7f0\uac83\ub4e4\uc744 \uc54c\uace0 \uc788\ub2e4\uba74 Dockerfile \ud83d\udc47 \ub85c \uc810\ud504\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub3c4\ucee4\ud30c\uc77c \ubbf8\ub9ac\ubcf4\uae30 \ud83d\udc40 FROM python:3.9 WORKDIR /code COPY ./requirements.txt /code/requirements.txt RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt COPY ./app /code/app CMD [ \"uvicorn\" , \"app.main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] # If running behind a proxy like Nginx or Traefik add --proxy-headers # CMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\", \"--proxy-headers\"] \ucee8\ud14c\uc774\ub108\ub780 \u00b6 \ucee8\ud14c\uc774\ub108(\uc8fc\ub85c \ub9ac\ub205\uc2a4 \ucee8\ud14c\uc774\ub108)\ub294 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uc758\uc874\uc131\uacfc \ud544\uc694\ud55c \ud30c\uc77c\ub4e4\uc744 \ubaa8\ub450 \ud328\ud0a4\uc9d5\ud558\ub294 \ub9e4\uc6b0 \uac00\ubcbc\uc6b4 \ubc29\ubc95\uc785\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108\ub294 \uac19\uc740 \uc2dc\uc2a4\ud15c\uc5d0 \uc788\ub294 \ub2e4\ub978 \ucee8\ud14c\uc774\ub108(\ub2e4\ub978 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774\ub098 \uc694\uc18c\ub4e4)\uc640 \ub3c5\ub9bd\uc801\uc73c\ub85c \uc720\uc9c0\ub429\ub2c8\ub2e4. \ub9ac\ub205\uc2a4 \ucee8\ud14c\uc774\ub108\ub294 \ud638\uc2a4\ud2b8(\uba38\uc2e0, \uac00\uc0c1 \uba38\uc2e0, \ud074\ub77c\uc6b0\ub4dc \uc11c\ubc84 \ub4f1)\uc640 \uac19\uc740 \ub9ac\ub205\uc2a4 \ucee4\ub110\uc744 \uc0ac\uc6a9\ud574 \uc2e4\ud589\ub429\ub2c8\ub2e4. \uc774\ub9d0\uc740 \ub9ac\ub205\uc2a4 \ucee8\ud14c\uc774\ub108\uac00 (\uc804\uccb4 \uc6b4\uc601\uccb4\uc81c\ub97c \ubaa8\ubc29\ud558\ub294 \ub2e4\ub978 \uac00\uc0c1 \uba38\uc2e0\uacfc \ube44\uad50\ud588\uc744 \ub54c) \ub9e4\uc6b0 \uac00\ubccd\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774 \ubc29\ubc95\uc744 \ud1b5\ud574, \ucee8\ud14c\uc774\ub108\ub294 \uc9c1\uc811 \ud504\ub85c\uc138\uc2a4\ub97c \uc2e4\ud589\ud558\ub294 \uac83\uacfc \ube44\uc2b7\ud55c \uc815\ub3c4\uc758 \uc801\uc740 \uc790\uc6d0 \uc744 \uc18c\ube44\ud569\ub2c8\ub2e4 (\uac00\uc0c1 \uba38\uc2e0\uc740 \ud6e8\uc52c \ub9ce\uc740 \uc790\uc6d0\uc744 \uc18c\ube44\ud560 \uac83\uc785\ub2c8\ub2e4). \ucee8\ud14c\uc774\ub108\ub294 \ub610\ud55c \uadf8\ub4e4\ub9cc\uc758 \ub3c5\ub9bd\ub41c \uc2e4\ud589 \ud504\ub85c\uc138\uc2a4 (\uc77c\ubc18\uc801\uc73c\ub85c \ud558\ub098\uc758 \ud504\ub85c\uc138\uc2a4\ub85c \ucda9\ubd84\ud569\ub2c8\ub2e4), \ud30c\uc77c \uc2dc\uc2a4\ud15c, \uadf8\ub9ac\uace0 \ub124\ud2b8\uc6cc\ud06c\ub97c \uac00\uc9c0\ubbc0\ub85c \ubc30\ud3ec, \ubcf4\uc548, \uac1c\ubc1c \ubc0f \uae30\ud0c0 \uacfc\uc815\uc744 \ub2e8\uc21c\ud654 \ud569\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub780 \u00b6 \ucee8\ud14c\uc774\ub108 \ub294 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \ub97c \uc2e4\ud589\ud55c \uac83 \uc785\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub780 \ucee8\ud14c\uc774\ub108\uc5d0 \ud544\uc694\ud55c \ubaa8\ub4e0 \ud30c\uc77c, \ud658\uacbd \ubcc0\uc218 \uadf8\ub9ac\uace0 \ub514\ud3f4\ud2b8 \uba85\ub839/\ud504\ub85c\uadf8\ub7a8\uc758 \uc815\uc801 \ubc84\uc804\uc785\ub2c8\ub2e4. \uc5ec\uae30\uc11c \uc815\uc801 \uc774\ub780 \ub9d0\uc740 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \uac00 \uc791\ub3d9\ub418\uac70\ub098 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc73c\uba70, \ub2e8\uc9c0 \ud328\ud0a4\uc9c0 \ud30c\uc77c\uacfc \uba54\ud0c0 \ub370\uc774\ud130\ub77c\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc800\uc7a5\ub41c \uc815\uc801 \ucee8\ud150\uce20\uc778 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \uc640 \ub300\uc870\ub418\uac8c, \ucee8\ud14c\uc774\ub108 \ub780 \ubcf4\ud1b5 \uc2e4\ud589\ub420 \uc218 \uc788\ub294 \uc791\ub3d9 \uc778\uc2a4\ud134\uc2a4\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108 \uac00 ( \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \ub85c \ubd80\ud130) \uc2dc\uc791\ub418\uace0 \uc2e4\ud589\ub418\uba74, \ucee8\ud14c\uc774\ub108\ub294 \ud30c\uc77c\uc774\ub098 \ud658\uacbd \ubcc0\uc218\ub97c \uc0dd\uc131\ud558\uac70\ub098 \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ubcc0\ud654\ub294 \uc624\uc9c1 \ucee8\ud14c\uc774\ub108\uc5d0\uc11c\ub9cc \uc874\uc7ac\ud558\uba70, \uadf8 \uae30\ubc18\uc774 \ub418\ub294 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\uc5d0\ub294 \uc9c0\uc18d\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4 (\uc989 \ub514\uc2a4\ud06c\uc5d0\ub294 \uc800\uc7a5\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4). \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub294 \ud504\ub85c\uadf8\ub7a8 \ud30c\uc77c\uacfc \ucee8\ud150\uce20, \uc989 python \uacfc \uc5b4\ub5a4 \ud30c\uc77c main.py \uc5d0 \ube44\uad50\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 ( \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \uc640 \ub300\ube44\ud574\uc11c) \ucee8\ud14c\uc774\ub108 \ub294 \uc774\ubbf8\uc9c0\uc758 \uc2e4\uc81c \uc2e4\ud589 \uc778\uc2a4\ud134\uc2a4\ub85c \ud504\ub85c\uc138\uc2a4 \uc5d0 \ube44\uad50\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc2e4, \ucee8\ud14c\uc774\ub108\ub294 \ud504\ub85c\uc138\uc2a4 \ub7ec\ub2dd \uc774 \uc788\uc744 \ub54c\ub9cc \uc2e4\ud589\ub429\ub2c8\ub2e4 (\uadf8\ub9ac\uace0 \ubcf4\ud1b5 \ud558\ub098\uc758 \ud504\ub85c\uc138\uc2a4 \uc785\ub2c8\ub2e4). \ucee8\ud14c\uc774\ub108\ub294 \ub0b4\ubd80\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ud504\ub85c\uc138\uc2a4\uac00 \uc5c6\uc73c\uba74 \uc885\ub8cc\ub429\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \u00b6 \ub3c4\ucee4\ub294 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \uc640 \ucee8\ud14c\uc774\ub108 \ub97c \uc0dd\uc131\ud558\uace0 \uad00\ub9ac\ud558\ub294\ub370 \uc8fc\uc694 \ub3c4\uad6c \uc911 \ud558\ub098\uac00 \ub418\uc5b4\uc654\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub3c4\ucee4 \ud5c8\ube0c \uc5d0 \ub2e4\uc591\ud55c \ub3c4\uad6c, \ud658\uacbd, \ub370\uc774\ud130\ubca0\uc774\uc2a4, \uadf8\ub9ac\uace0 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ub300\ud574 \ubbf8\ub9ac \ub9cc\ub4e4\uc5b4\uc9c4 \uacf5\uc2dd \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \uac00 \uacf5\uac1c\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uacf5\uc2dd \ud30c\uc774\uc36c \uc774\ubbf8\uc9c0 \uac00 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \ub2e4\ub978 \ub300\uc0c1, \uc608\ub97c \ub4e4\uba74 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc704\ud55c \uc774\ubbf8\uc9c0\ub4e4\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: PostgreSQL MySQL MongoDB Redis \ub4f1 \ubbf8\ub9ac \ub9cc\ub4e4\uc5b4\uc9c4 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \uc0ac\uc6a9\ud558\uba74 \uc11c\ub85c \ub2e4\ub978 \ub3c4\uad6c\ub4e4\uc744 \uacb0\ud569 \ud558\uae30 \uc27d\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0, \uacf5\uc2dd \uc774\ubbf8\uc9c0\ub4e4 \uc744 \uc0ac\uc6a9\ud558\uace0 \ud658\uacbd \ubcc0\uc218\ub97c \ud1b5\ud574 \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \ubc29\ubc95\uc73c\ub85c \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 \ucee8\ud14c\uc774\ub108\uc640 \ub3c4\ucee4\uc5d0 \ub300\ud574 \ubc30\uc6b8 \uc218 \uc788\uc73c\uba70 \ub2e4\uc591\ud55c \ub3c4\uad6c\uc640 \uc694\uc18c\ub4e4\uc5d0 \ub300\ud55c \uc9c0\uc2dd\uc744 \uc7ac\uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc11c\ub85c \ub2e4\ub978 \ub2e4\uc911 \ucee8\ud14c\uc774\ub108 \ub97c \uc0dd\uc131\ud55c \ub2e4\uc74c \uc774\ub4e4\uc744 \uc5f0\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ub370\uc774\ud130\ubca0\uc774\uc2a4, \ud30c\uc774\uc36c \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158, \ub9ac\uc561\ud2b8 \ud504\ub860\ud2b8\uc5d4\ub4dc \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc0ac\uc6a9\ud558\ub294 \uc6f9 \uc11c\ubc84\uc5d0 \ub300\ud55c \ucee8\ud14c\uc774\ub108\ub97c \ub9cc\ub4e4\uc5b4 \uc774\ub4e4\uc758 \ub0b4\ubd80 \ub124\ud2b8\uc6cc\ud06c\ub85c \uac01 \ucee8\ud14c\uc774\ub108\ub97c \uc5f0\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \ucee8\ud14c\uc774\ub108 \uad00\ub9ac \uc2dc\uc2a4\ud15c(\ub3c4\ucee4\ub098 \ucfe0\ubc84\ub124\ud2f0\uc2a4)\uc740 \uc774\ub7ec\ud55c \ub124\ud2b8\uc6cc\ud0b9 \ud2b9\uc131\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108\uc640 \ud504\ub85c\uc138\uc2a4 \u00b6 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \ub294 \ubcf4\ud1b5 \ucee8\ud14c\uc774\ub108 \ub97c \uc2dc\uc791\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \uba54\ud0c0\ub370\uc774\ud130\uc640 \ub514\ud3f4\ud2b8 \ucee4\ub9e8\ub4dc/\ud504\ub85c\uadf8\ub7a8\uacfc \uadf8 \ud504\ub85c\uadf8\ub7a8\uc5d0 \uc804\ub2ec\ud558\uae30 \uc704\ud55c \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4. \uc774\ub294 \ucee4\ub9e8\ub4dc \ub77c\uc778\uc5d0\uc11c \ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud560 \ub54c \ud544\uc694\ud55c \uac12\ub4e4\uacfc \uc720\uc0ac\ud569\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108 \uac00 \uc2dc\uc791\ub418\uba74, \ud574\ub2f9 \ucee4\ub9e8\ub4dc/\ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\ud589\ub429\ub2c8\ub2e4 (\uadf8\ub7ec\ub098 \ub2e4\ub978 \ucee4\ub9e8\ub4dc/\ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud558\ub3c4\ub85d \uc624\ubc84\ub77c\uc774\ub4dc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4). \ucee8\ud14c\uc774\ub108\ub294 \uba54\uc778 \ud504\ub85c\uc138\uc2a4 (\ucee4\ub9e8\ub4dc \ub610\ub294 \ud504\ub85c\uadf8\ub7a8)\uc774 \uc2e4\ud589\ub418\ub294 \ub3d9\uc548 \uc2e4\ud589\ub429\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ub2e8\uc77c \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\uace0 \uc788\uc9c0\ub9cc, \uba54\uc778 \ud504\ub85c\uc138\uc2a4\uc758 \uc11c\ube0c \ud504\ub85c\uc138\uc2a4\ub97c \uc2dc\uc791\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud558\uba70, \uc774 \ubc29\ubc95\uc73c\ub85c \ud558\ub098\uc758 \ucee8\ud14c\uc774\ub108\uc5d0 \ub2e4\uc911 \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ucd5c\uc18c\ud55c \ud558\ub098\uc758 \uc2e4\ud589\uc911\uc778 \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\uc9c0 \uc54a\uace0\uc11c\ub294 \uc2e4\ud589\uc911\uc778 \ucee8\ud14c\uc774\ub108\ub97c \uac00\uc9c8 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \uba54\uc778 \ud504\ub85c\uc138\uc2a4\uac00 \uc911\ub2e8\ub418\uba74, \ucee8\ud14c\uc774\ub108\ub3c4 \uc911\ub2e8\ub429\ub2c8\ub2e4. FastAPI\ub97c \uc704\ud55c \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \ube4c\ub4dc\ud558\uae30 \u00b6 \uc774\uc81c \ubb34\uc5b8\uac00\ub97c \ub9cc\ub4e4\uc5b4 \ubd05\uc2dc\ub2e4! \ud83d\ude80 \uacf5\uc2dd \ud30c\uc774\uc36c \uc774\ubbf8\uc9c0\uc5d0 \uae30\ubc18\ud558\uc5ec, FastAPI\ub97c \uc704\ud55c \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \ub97c \ub9e8 \ucc98\uc74c\ubd80\ud130 \uc0dd\uc131\ud558\ub294 \ubc29\ubc95\uc744 \ubcf4\uc774\uaca0\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uc5d0 \ub2e4\uc74c\uacfc \uac19\uc740 \uac83\ub4e4\uc744 \ud558\uac8c \ub429\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74: \ucfe0\ubc84\ub124\ud2f0\uc2a4 \ub610\ub294 \uc720\uc0ac\ud55c \ub3c4\uad6c \uc0ac\uc6a9\ud558\uae30 \ub77c\uc988\ubca0\ub9ac \ud30c\uc774 \ub85c \uc2e4\ud589\ud558\uae30 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \uc2e4\ud589\ud560 \ud074\ub77c\uc6b0\ub4dc \uc11c\ube44\uc2a4 \uc0ac\uc6a9\ud558\uae30 \ub4f1 \uc694\uad6c \ud328\ud0a4\uc9c0 \u00b6 \uc77c\ubc18\uc801\uc73c\ub85c\ub294 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ud2b9\uc815 \ud30c\uc77c\uc744 \uc704\ud55c \ud328\ud0a4\uc9c0 \uc694\uad6c \uc870\uac74 \uc774 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uadf8 \uc694\uad6c \uc870\uac74\uc744 \uc124\uce58 \ud558\ub294 \ubc29\ubc95\uc740 \uc5ec\ub7ec\ubd84\uc774 \uc0ac\uc6a9\ud558\ub294 \ub3c4\uad6c\uc5d0 \ub530\ub77c \ub2e4\ub97c \uac83\uc785\ub2c8\ub2e4. \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \ubc29\ubc95\uc740 \ud328\ud0a4\uc9c0 \uc774\ub984\uacfc \ubc84\uc804\uc774 \uc904 \ubcc4\ub85c \uae30\ub85d\ub41c requirements.txt \ud30c\uc77c\uc744 \ub9cc\ub4dc\ub294 \uac83\uc785\ub2c8\ub2e4. \ubc84\uc804\uc758 \ubc94\uc704\ub97c \uc124\uc815\ud558\uae30 \uc704\ud574\uc11c\ub294 FastAPI \ubc84\uc804\ub4e4\uc5d0 \ub300\ud558\uc5ec \uc5d0 \uc4f0\uc5ec\uc9c4 \uac83\uacfc \uac19\uc740 \uc544\uc774\ub514\uc5b4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, requirements.txt \ud30c\uc77c\uc740 \ub2e4\uc74c\uacfc \uac19\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: fastapi>=0.68.0,<0.69.0 pydantic>=1.8.0,<2.0.0 uvicorn>=0.15.0,<0.16.0 \uadf8\ub9ac\uace0 \uc77c\ubc18\uc801\uc73c\ub85c \ud328\ud0a4\uc9c0 \uc885\uc18d\uc131\uc740 pip \ub85c \uc124\uce58\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4: $ pip install -r requirements.txt ---> 100% Successfully installed fastapi pydantic uvicorn \uc815\ubcf4 \ud328\ud0a4\uc9c0 \uc885\uc18d\uc131\uc744 \uc815\uc758\ud558\uace0 \uc124\uce58\ud558\uae30 \uc704\ud55c \ubc29\ubc95\uacfc \ub3c4\uad6c\ub294 \ub2e4\uc591\ud569\ub2c8\ub2e4. \ub098\uc911\uc5d0 \uc544\ub798 \uc138\uc158\uc5d0\uc11c Poetry\ub97c \uc0ac\uc6a9\ud55c \uc608\uc2dc\ub97c \ubcf4\uc774\uaca0\uc2b5\ub2c8\ub2e4. \ud83d\udc47 FastAPI \ucf54\ub4dc \uc0dd\uc131\ud558\uae30 \u00b6 app \ub514\ub809\ud130\ub9ac\ub97c \uc0dd\uc131\ud558\uace0 \uc774\ub3d9\ud569\ub2c8\ub2e4. \ube48 \ud30c\uc77c __init__.py \uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 main.py \uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } \ub3c4\ucee4\ud30c\uc77c \u00b6 \uc774\uc81c \uac19\uc740 \ud504\ub85c\uc81d\ud2b8 \ub514\ub809\ud130\ub9ac\uc5d0 \ub2e4\uc74c\uacfc \uac19\uc740 \ud30c\uc77c Dockerfile \uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4: # (1) FROM python:3.9 # (2) WORKDIR /code # (3) COPY ./requirements.txt /code/requirements.txt # (4) RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt # (5) COPY ./app /code/app # (6) CMD [ \"uvicorn\" , \"app.main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] \uacf5\uc2dd \ud30c\uc774\uc36c \ubca0\uc774\uc2a4 \uc774\ubbf8\uc9c0\uc5d0\uc11c \uc2dc\uc791\ud569\ub2c8\ub2e4. \ud604\uc7ac \uc6cc\ud0b9 \ub514\ub809\ud130\ub9ac\ub97c /code \ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc5d0 requirements.txt \ud30c\uc77c\uacfc app \ub514\ub809\ud130\ub9ac\ub97c \uc704\uce58\uc2dc\ud0ac \uac83\uc785\ub2c8\ub2e4. \uc694\uad6c \uc870\uac74\uacfc \ud30c\uc77c\uc744 /code \ub514\ub809\ud130\ub9ac\ub85c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \ucc98\uc74c\uc5d0\ub294 \uc624\uc9c1 \uc694\uad6c \uc870\uac74\uc774 \ud544\uc694\ud55c \ud30c\uc77c\ub9cc \ubcf5\uc0ac\ud558\uace0, \uc774\uc678\uc758 \ucf54\ub4dc\ub294 \uadf8\ub300\ub85c \ub461\ub2c8\ub2e4. \uc774 \ud30c\uc77c\uc774 \uc790\uc8fc \ubc14\ub00c\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 , \ub3c4\ucee4\ub294 \ud30c\uc77c\uc744 \ud0d0\uc9c0\ud558\uc5ec \uc774 \ub2e8\uacc4\uc758 \uce90\uc2dc \ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc74c \ub2e8\uacc4\uc5d0\uc11c\ub3c4 \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc694\uad6c \uc870\uac74 \ud30c\uc77c\uc5d0 \uc788\ub294 \ud328\ud0a4\uc9c0 \uc885\uc18d\uc131\uc744 \uc124\uce58\ud569\ub2c8\ub2e4. --no-cache-dir \uc635\uc158\uc740 pip \uc5d0\uac8c \ub2e4\uc6b4\ub85c\ub4dc\ud55c \ud328\ud0a4\uc9c0\ub4e4\uc744 \ub85c\uceec \ud658\uacbd\uc5d0 \uc800\uc7a5\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc804\ub2ec\ud569\ub2c8\ub2e4. \uc774\ub294 \ub9c8\uce58 \uac19\uc740 \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\ud558\uae30 \uc704\ud574 \uc624\uc9c1 pip \ub9cc \ub2e4\uc2dc \uc2e4\ud589\ud558\uba74 \ub420 \uac83 \uac19\uc9c0\ub9cc, \ucee8\ud14c\uc774\ub108\ub85c \uc791\uc5c5\ud558\ub294 \uacbd\uc6b0 \uadf8\ub807\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \ub178\ud2b8 --no-cache-dir \ub294 \uc624\uc9c1 pip \uc640 \uad00\ub828\ub418\uc5b4 \uc788\uc73c\uba70, \ub3c4\ucee4\ub098 \ucee8\ud14c\uc774\ub108\uc640\ub294 \ubb34\uad00\ud569\ub2c8\ub2e4. --upgrade \uc635\uc158\uc740 pip \uc5d0\uac8c \uc124\uce58\ub41c \ud328\ud0a4\uc9c0\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc774\uc804 \ub2e8\uacc4\uc5d0\uc11c \ud30c\uc77c\uc744 \ubcf5\uc0ac\ud55c \uac83\uc774 \ub3c4\ucee4 \uce90\uc2dc \uc5d0 \uc758\ud574 \ud0d0\uc9c0\ub418\uae30 \ub54c\ubb38\uc5d0, \uc774 \ub2e8\uacc4\uc5d0\uc11c\ub3c4 \uac00\ub2a5\ud55c \ud55c \ub3c4\ucee4 \uce90\uc2dc \ub97c \uc0ac\uc6a9\ud558\uac8c \ub429\ub2c8\ub2e4. \uc774 \ub2e8\uacc4\uc5d0\uc11c \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud558\uba74 \ub9e4\ubc88 \ubaa8\ub4e0 \uc885\uc18d\uc131\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uace0 \uc124\uce58\ud560 \ud544\uc694\uac00 \uc5c6\uc5b4, \uac1c\ubc1c \uacfc\uc815\uc5d0\uc11c \uc774\ubbf8\uc9c0\ub97c \uc9c0\uc18d\uc801\uc73c\ub85c \uc0dd\uc131\ud558\ub294 \ub370\uc5d0 \ub4dc\ub294 \uc2dc\uac04 \uc744 \ub9ce\uc774 \uc808\uc57d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. /code \ub514\ub809\ud130\ub9ac\uc5d0 ./app \ub514\ub809\ud130\ub9ac\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \uc790\uc8fc \ubcc0\uacbd\ub418\ub294 \ubaa8\ub4e0 \ucf54\ub4dc\ub97c \ud3ec\ud568\ud558\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \ub3c4\ucee4 \uce90\uc2dc \ub294 \uc774 \ub2e8\uacc4\ub098 \uc774\ud6c4\uc758 \ub2e8\uacc4\uc5d0\uc11c \uc798 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \ube4c\ub4dc \uc2dc\uac04\uc744 \ucd5c\uc801\ud654\ud558\uae30 \uc704\ud574 Dockerfile \uc758 \uac70\uc758 \ub05d \ubd80\ubd84 \uc5d0 \uc785\ub825\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. uvicorn \uc11c\ubc84\ub97c \uc2e4\ud589\ud558\uae30 \uc704\ud574 \ucee4\ub9e8\ub4dc \ub97c \uc124\uc815\ud569\ub2c8\ub2e4. CMD \ub294 \ubb38\uc790\uc5f4 \ub9ac\uc2a4\ud2b8\ub97c \uc785\ub825\ubc1b\uace0, \uac01 \ubb38\uc790\uc5f4\uc740 \ucee4\ub9e8\ub4dc \ub77c\uc778\uc758 \uac01 \uc904\uc5d0 \uc785\ub825\ud560 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4. \uc774 \ucee4\ub9e8\ub4dc\ub294 \ud604\uc7ac \uc6cc\ud0b9 \ub514\ub809\ud130\ub9ac \uc5d0\uc11c \uc2e4\ud589\ub418\uba70, \uc774\ub294 \uc704\uc5d0\uc11c WORKDIR /code \ub85c \uc124\uc815\ud55c /code \ub514\ub809\ud130\ub9ac\uc640 \uac19\uc2b5\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc774 /code \uc5d0\uc11c \uc2dc\uc791\ud558\uace0 \uadf8 \uc18d\uc5d0 ./app \ub514\ub809\ud130\ub9ac\uac00 \uc5ec\ub7ec\ubd84\uc758 \ucf54\ub4dc\uc640 \ud568\uaed8 \ub4e4\uc5b4\uc788\uae30 \ub54c\ubb38\uc5d0, Uvicorn \uc740 \uc774\ub97c \ubcf4\uace0 app \uc744 app.main \uc73c\ub85c\ubd80\ud130 \ubd88\ub7ec \uc62c \uac83\uc785\ub2c8\ub2e4. \ud301 \uac01 \ucf54\ub4dc \ub77c\uc778\uc744 \ucf54\ub4dc\uc758 \uc22b\uc790 \ubc84\ube14\uc744 \ud074\ub9ad\ud558\uc5ec \ub9ac\ubdf0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\udc46 \uc774\uc81c \uc5ec\ub7ec\ubd84\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ub514\ub809\ud130\ub9ac \uad6c\uc870\ub97c \uac00\uc9c0\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 requirements.txt TLS \uc885\ub8cc \ud504\ub85d\uc2dc\uc758 \ubc30\ud6c4 \u00b6 \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ucee8\ud14c\uc774\ub108\ub97c Nginx \ub610\ub294 Traefik\uacfc \uac19\uc740 TLS \uc885\ub8cc \ud504\ub85d\uc2dc (\ub85c\ub4dc \ubc38\ub7f0\uc11c) \ub4a4\uc5d0\uc11c \uc2e4\ud589\ud558\uace0 \uc788\ub2e4\uba74, --proxy-headers \uc635\uc158\uc744 \ub354\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uc774 \uc635\uc158\uc740 Uvicorn\uc5d0\uac8c \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 HTTPS \ub4f1\uc758 \ub4a4\uc5d0\uc11c \uc2e4\ud589\ub418\uace0 \uc788\uc73c\ubbc0\ub85c \ud504\ub85d\uc2dc\uc5d0\uc11c \uc804\uc1a1\ub41c \ud5e4\ub354\ub97c \uc2e0\ub8b0\ud560 \uc218 \uc788\ub2e4\uace0 \uc54c\ub9bd\ub2c8\ub2e4. CMD [ \"uvicorn\" , \"app.main:app\" , \"--proxy-headers\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] \ub3c4\ucee4 \uce90\uc2dc \u00b6 \uc774 Dockerfile \uc5d0\ub294 \uc911\uc694\ud55c \ud2b8\ub9ad\uc774 \uc788\ub294\ub370, \ucc98\uc74c\uc5d0\ub294 \uc758\uc874\uc131\uc774 \uc788\ub294 \ud30c\uc77c\ub9cc \ubcf5\uc0ac\ud558\uace0, \ub098\uba38\uc9c0 \ucf54\ub4dc\ub294 \uadf8\ub300\ub85c \ub461\ub2c8\ub2e4. \uc65c \uc774\ub7f0 \ubc29\ubc95\uc744 \uc368\uc57c\ud558\ub294\uc9c0 \uc124\uba85\ud558\uaca0\uc2b5\ub2c8\ub2e4. COPY ./requirements.txt /code/requirements.txt \ub3c4\ucee4\uc640 \ub2e4\ub978 \ub3c4\uad6c\ub4e4\uc740 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \uc99d\uac00\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ube4c\ub4dc \ud569\ub2c8\ub2e4. Dockerfile \uc758 \ub9e8 \uc717 \ubd80\ubd84\ubd80\ud130 \uc2dc\uc791\ud574, \ub808\uc774\uc5b4 \uc704\uc5d0 \uc0c8\ub85c\uc6b4 \ub808\uc774\uc5b4\ub97c \ub354\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c, Dockerfile \uc758 \uac01 \uc9c0\uc2dc \uc0ac\ud56d\uc73c\ub85c \ubd80\ud130 \uc0dd\uc131\ub41c \uc5b4\ub5a4 \ud30c\uc77c\uc774\ub4e0 \ub354\ud574\uac11\ub2c8\ub2e4. \ub3c4\ucee4 \uadf8\ub9ac\uace0 \uc774\uc640 \uc720\uc0ac\ud55c \ub3c4\uad6c\ub4e4\uc740 \uc774\ubbf8\uc9c0 \uc0dd\uc131 \uc2dc\uc5d0 \ub0b4\ubd80 \uce90\uc2dc \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub9cc\uc57d \uc5b4\ub5a4 \ud30c\uc77c\uc774 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud55c \ub54c\ub85c\ubd80\ud130 \ubc14\ub00c\uc9c0 \uc54a\uc558\ub2e4\uba74, \ud30c\uc77c\uc744 \ub2e4\uc2dc \ubcf5\uc0ac\ud558\uc5ec \uc0c8\ub85c\uc6b4 \ub808\uc774\uc5b4\ub97c \ucc98\uc74c\ubd80\ud130 \uc0dd\uc131\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \ub9c8\uc9c0\ub9c9\uc5d0 \uc0dd\uc131\ud588\ub358 \uac19\uc740 \ub808\uc774\uc5b4\ub97c \uc7ac\uc0ac\uc6a9 \ud569\ub2c8\ub2e4. \ub2e8\uc9c0 \ud30c\uc77c \ubcf5\uc0ac\ub97c \uc9c0\uc591\ud558\ub294 \uac83\uc73c\ub85c \ud6a8\uc728\uc774 \ub9ce\uc774 \ud5a5\uc0c1\ub418\ub294 \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc, \uadf8 \ub2e8\uacc4\uc5d0\uc11c \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud588\uae30 \ub54c\ubb38\uc5d0, \ub2e4\uc74c \ub2e8\uacc4\uc5d0\uc11c\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uce90\uc2dc\ub97c \uc0ac\uc6a9 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub2e4\uc74c\uacfc \uac19\uc740 \uc758\uc874\uc131\uc744 \uc124\uce58\ud558\ub294 \uc9c0\uc2dc \uc0ac\ud56d\uc744 \uc704\ud55c \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt \ud328\ud0a4\uc9c0\ub97c \ud3ec\ud568\ud558\ub294 \ud30c\uc77c\uc740 \uc790\uc8fc \ubcc0\uacbd\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4 . \ub530\ub77c\uc11c \ud574\ub2f9 \ud30c\uc77c\ub9cc \ubcf5\uc0ac\ud558\ubbc0\ub85c\uc11c, \ub3c4\ucee4\ub294 \uadf8 \ub2e8\uacc4\uc758 \uce90\uc2dc\ub97c \uc0ac\uc6a9 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8 \ub2e4\uc74c\uc73c\ub85c, \ub3c4\ucee4\ub294 \ub2e4\uc74c \ub2e8\uacc4\uc5d0\uc11c \uc758\uc874\uc131\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uace0 \uc124\uce58\ud558\ub294 \uce90\uc2dc\ub97c \uc0ac\uc6a9 \ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. \ubc14\ub85c \uc774 \uacfc\uc815\uc5d0\uc11c \uc6b0\ub9ac\ub294 \ub9ce\uc740 \uc2dc\uac04\uc744 \uc808\uc57d \ud558\uac8c \ub429\ub2c8\ub2e4. \u2728 ...\uadf8\ub9ac\uace0 \uae30\ub2e4\ub9ac\ub294 \uc9c0\ub8e8\ud568\ub3c4 \ud53c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\ude2a\ud83d\ude06 \ud328\ud0a4\uc9c0 \uc758\uc874\uc131\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uace0 \uc124\uce58\ud558\ub294 \ub370\uc774\ub294 \uc218 \ubd84\uc774 \uac78\ub9b4 \uc218 \uc788\uc9c0\ub9cc , \uce90\uc2dc \ub97c \uc0ac\uc6a9\ud558\uba74 \ucd5c\ub300 \uc218 \ucd08\ub9cc\uc5d0 \ub05d\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uc5ec\ub7ec\ubd84\uc774 \uac1c\ubc1c \uacfc\uc815\uc5d0\uc11c \ucf54\ub4dc\uc758 \ubcc0\uacbd \uc0ac\ud56d\uc774 \ubc18\uc601\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud574 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \uacc4\uc18d\ud574\uc11c \ube4c\ub4dc\ud558\uba74, \uc808\uc57d\ub41c \uc2dc\uac04\uc740 \ucd95\uc801\ub418\uc5b4 \ub354\uc6b1 \ucee4\uc9c8 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc11c Dockerfile \uc758 \uac70\uc758 \ub05d \ubd80\ubd84\uc5d0\uc11c, \ubaa8\ub4e0 \ucf54\ub4dc\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \uc774\uac83\uc774 \uac00\uc7a5 \ube48\ubc88\ud558\uac8c \ubcc0\uacbd \ub418\ub294 \ubd80\ubd84\uc774\uba70, \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 \uc774 \ub2e4\uc74c \ub2e8\uacc4\uc5d0\uc11c\ub294 \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uac00\uc7a5 \ub9c8\uc9c0\ub9c9\uc5d0 \ub461\ub2c8\ub2e4. COPY ./app /code/app \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \uc0dd\uc131\ud558\uae30 \u00b6 \uc774\uc81c \ubaa8\ub4e0 \ud30c\uc77c\uc774 \uc81c\uc790\ub9ac\uc5d0 \uc788\uc73c\ub2c8, \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud569\ub2c8\ub2e4. (\uc5ec\ub7ec\ubd84\uc758 Dockerfile \uacfc app \ub514\ub809\ud130\ub9ac\uac00 \uc704\uce58\ud55c) \ud504\ub85c\uc81d\ud2b8 \ub514\ub809\ud130\ub9ac\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. FastAPI \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud569\ub2c8\ub2e4: $ docker build -t myimage . ---> 100% \ud301 \ub9e8 \ub05d\uc5d0 \uc788\ub294 . \uc5d0 \uc8fc\ubaa9\ud569\uc2dc\ub2e4. \uc774\ub294 ./ \uc640 \ub3d9\ub4f1\ud558\uba70, \ub3c4\ucee4\uc5d0\uac8c \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud558\uae30 \uc704\ud55c \ub514\ub809\ud130\ub9ac\ub97c \uc54c\ub824\uc90d\ub2c8\ub2e4. \uc774 \uacbd\uc6b0\uc5d0\ub294 \ud604\uc7ac \ub514\ub809\ud130\ub9ac( . )\uc640 \uac19\uc2b5\ub2c8\ub2e4. \ub3c4\ucee4 \ucee8\ud14c\uc774\ub108 \uc2dc\uc791\ud558\uae30 \u00b6 \uc5ec\ub7ec\ubd84\uc758 \uc774\ubbf8\uc9c0\uc5d0 \uae30\ubc18\ud558\uc5ec \ucee8\ud14c\uc774\ub108\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4: $ docker run -d --name mycontainer -p 80 :80 myimage \uccb4\ud06c\ud558\uae30 \u00b6 \uc5ec\ub7ec\ubd84\uc758 \ub3c4\ucee4 \ucee8\ud14c\uc774\ub108 URL\uc5d0\uc11c \uc2e4\ud589 \uc0ac\ud56d\uc744 \uccb4\ud06c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4: http://192.168.99.100/items/5?q=somequery \ub610\ub294 http://127.0.0.1/items/5?q=somequery (\ub610\ub294 \ub3d9\uc77c\ud558\uac8c, \uc5ec\ub7ec\ubd84\uc758 \ub3c4\ucee4 \ud638\uc2a4\ud2b8\ub97c \uc774\uc6a9\ud574\uc11c \uccb4\ud06c\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4). \uc544\ub798\uc640 \ube44\uc2b7\ud55c \uac83\uc744 \ubcf4\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4: { \"item_id\" : 5 , \"q\" : \"somequery\" } \uc778\ud130\ub799\ud2f0\ube0c API \ubb38\uc11c \u00b6 \uc774\uc81c \uc5ec\ub7ec\ubd84\uc740 http://192.168.99.100/docs \ub610\ub294 http://127.0.0.1/docs \ub85c \uc774\ub3d9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4(\ub610\ub294, \uc5ec\ub7ec\ubd84\uc758 \ub3c4\ucee4 \ud638\uc2a4\ud2b8\ub97c \uc774\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4). \uc5ec\ub7ec\ubd84\uc740 \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub41c \uc778\ud130\ub799\ud2f0\ube0c API( Swagger UI \uc5d0\uc11c \uc81c\uacf5\ub41c)\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ub300\uc548 API \ubb38\uc11c \u00b6 \ub610\ud55c \uc5ec\ub7ec\ubd84\uc740 http://192.168.99.100/redoc \ub610\ub294 http://127.0.0.1/redoc \uc73c\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4(\ub610\ub294, \uc5ec\ub7ec\ubd84\uc758 \ub3c4\ucee4 \ud638\uc2a4\ud2b8\ub97c \uc774\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4). \uc5ec\ub7ec\ubd84\uc740 \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub41c \ub300\uc548 \ubb38\uc11c( ReDoc \uc5d0\uc11c \uc81c\uacf5\ub41c)\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ub2e8\uc77c \ud30c\uc77c FastAPI\ub85c \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \uc0dd\uc131\ud558\uae30 \u00b6 \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc758 FastAPI\uac00 \ud558\ub098\uc758 \ud30c\uc77c\uc774\ub77c\uba74, \uc608\ub97c \ub4e4\uc5b4 ./app \ub514\ub809\ud130\ub9ac \uc5c6\uc774 main.py \ud30c\uc77c\ub9cc\uc73c\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4\uba74, \ud30c\uc77c \uad6c\uc870\ub294 \ub2e4\uc74c\uacfc \uc720\uc0ac\ud560 \uac83\uc785\ub2c8\ub2e4: . \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 main.py \u2514\u2500\u2500 requirements.txt \uadf8\ub7ec\uba74 \uc5ec\ub7ec\ubd84\ub4e4\uc740 Dockerfile \ub0b4\uc5d0 \uc788\ub294 \ud30c\uc77c\uc744 \ubcf5\uc0ac\ud558\uae30 \uc704\ud574 \uadf8\uc800 \uc0c1\uc751\ud558\ub294 \uacbd\ub85c\ub97c \ubc14\uafb8\uae30\ub9cc \ud558\uba74 \ub429\ub2c8\ub2e4: FROM python:3.9 WORKDIR /code COPY ./requirements.txt /code/requirements.txt RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt # (1) COPY ./main.py /code/ # (2) CMD [ \"uvicorn\" , \"main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] main.py \ud30c\uc77c\uc744 /code \ub514\ub809\ud130\ub9ac\ub85c \uace7\ubc14\ub85c \ubcf5\uc0ac\ud569\ub2c8\ub2e4( ./app \ub514\ub809\ud130\ub9ac\ub294 \uace0\ub824\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4). Uvicorn\uc744 \uc2e4\ud589\ud574 app \uac1d\uccb4\ub97c ( app.main \ub300\uc2e0) main \uc73c\ub85c \ubd80\ud130 \ubd88\ub7ec\uc624\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uadf8 \ub2e4\uc74c Uvicorn \ucee4\ub9e8\ub4dc\ub97c \uc870\uc815\ud574\uc11c FastAPI \uac1d\uccb4\ub97c \ubd88\ub7ec\uc624\ub294\ub370 app.main \ub300\uc2e0\uc5d0 \uc0c8\ub85c\uc6b4 \ubaa8\ub4c8 main \uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. \ubc30\ud3ec \uac1c\ub150 \u00b6 \uc774\uc81c \ucee8\ud14c\uc774\ub108\uc758 \uce21\uba74\uc5d0\uc11c \ubc30\ud3ec \uac1c\ub150 \uc5d0\uc11c \ub2e4\ub8e8\uc5c8\ub358 \uac83\uacfc \uac19\uc740 \ubc30\ud3ec \uac1c\ub150\uc5d0 \ub300\ud574 \uc774\uc57c\uae30\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108\ub294 \uc8fc\ub85c \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ube4c\ub4dc\ud558\uace0 \ubc30\ud3ec\ud558\uae30 \uc704\ud55c \uacfc\uc815\uc744 \ub2e8\uc21c\ud654\ud558\ub294 \ub3c4\uad6c\uc774\uc9c0\ub9cc, \ubc30\ud3ec \uac1c\ub150 \uc5d0 \ub300\ud55c \ud2b9\uc815\ud55c \uc811\uadfc\ubc95\uc744 \uac15\uc694\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uac00\ub2a5\ud55c \ubc30\ud3ec \uc804\ub7b5\uc5d0\ub294 \uc5ec\ub7ec\uac00\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc88b\uc740 \uc18c\uc2dd \uc740 \uc11c\ub85c \ub2e4\ub978 \uc804\ub7b5\ub4e4\uc744 \ud3ec\uad04\ud558\ub294 \ubc30\ud3ec \uac1c\ub150\uc774 \uc788\ub2e4\ub294 \uc810\uc785\ub2c8\ub2e4. \ud83c\udf89 \ucee8\ud14c\uc774\ub108 \uce21\uba74\uc5d0\uc11c \ubc30\ud3ec \uac1c\ub150 \uc744 \ub9ac\ubdf0\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: HTTPS \uad6c\ub3d9\ud558\uae30 \uc7ac\uc2dc\uc791 \ubcf5\uc81c (\uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uc138\uc2a4 \uac1c\uc218) \uba54\ubaa8\ub9ac \uc2dc\uc791\ud558\uae30 \uc804 \ub2e8\uacc4\ub4e4 HTTPS \u00b6 \ub9cc\uc57d \uc6b0\ub9ac\uac00 FastAPI \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc704\ud55c \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \uc5d0\ub9cc \uc9d1\uc911\ud55c\ub2e4\uba74 (\uadf8\ub9ac\uace0 \ub098\uc911\uc5d0 \uc2e4\ud589\ub420 \ucee8\ud14c\uc774\ub108 \uc5d0), HTTPS\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ub2e4\ub978 \ub3c4\uad6c\uc5d0 \uc758\ud574 \uc678\ubd80\uc801\uc73c\ub85c \ub2e4\ub8e8\uc5b4\uc9c8 \uac83 \uc785\ub2c8\ub2e4. HTTPS \uc640 \uc778\uc99d\uc11c \uc758 \uc790\ub3d9 \ucde8\ub4dd\uc744 \ub2e4\ub8e8\ub294 \uac83\uc740 \ub2e4\ub978 \ucee8\ud14c\uc774\ub108\uac00 \ub420 \uc218 \uc788\ub294\ub370, \uc608\ub97c \ub4e4\uc5b4 Traefik \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ud301 Traefik\uc740 \ub3c4\ucee4, \ucfe0\ubc84\ub124\ud2f0\uc2a4, \uadf8\ub9ac\uace0 \ub2e4\ub978 \ub3c4\uad6c\uc640 \ud1b5\ud569\ub418\uc5b4 \uc788\uc5b4 \uc5ec\ub7ec\ubd84\uc758 \ucee8\ud14c\uc774\ub108\ub97c \ud3ec\ud568\ud558\ub294 HTTPS\ub97c \uc14b\uc5c5\ud558\uace0 \uc124\uc815\ud558\ub294 \uac83\uc774 \ub9e4\uc6b0 \uc27d\uc2b5\ub2c8\ub2e4. \ub300\uc548\uc801\uc73c\ub85c, HTTPS\ub294 \ud074\ub77c\uc6b0\ub4dc \uc81c\uacf5\uc790\uc5d0 \uc758\ud574 \uc11c\ube44\uc2a4\uc758 \uc77c\ud658\uc73c\ub85c \ub2e4\ub8e8\uc5b4\uc9c8 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4 (\uc774\ub54c\ub3c4 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc740 \uc5ec\uc804\ud788 \ucee8\ud14c\uc774\ub108\uc5d0\uc11c \uc2e4\ud589\ub420 \uac83\uc785\ub2c8\ub2e4). \uad6c\ub3d9\uacfc \uc7ac\uc2dc\uc791 \u00b6 \uc5ec\ub7ec\ubd84\uc758 \ucee8\ud14c\uc774\ub108\ub97c \uc2dc\uc791\ud558\uace0 \uc2e4\ud589\ud558\ub294 \ub370\uc5d0 \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \ub3c4\uad6c\ub294 \ub530\ub85c \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \ub3c4\ucee4 \uc790\uccb4\uc77c \uc218\ub3c4 \uc788\uace0, \ub3c4\ucee4 \ucef4\ud3ec\uc988 , \ucfe0\ubc84\ub124\ud2f0\uc2a4 , \ud074\ub77c\uc6b0\ub4dc \uc11c\ube44\uc2a4 \ub4f1\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84 (\ub610\ub294 \uc804\uccb4) \uacbd\uc6b0\uc5d0, \ucee8\ud14c\uc774\ub108\ub97c \uad6c\ub3d9\ud558\uac70\ub098 \uace0\uc7a5\uc2dc\uc5d0 \uc7ac\uc2dc\uc791\ud558\ub3c4\ub85d \ud558\ub294 \uac04\ub2e8\ud55c \uc635\uc158\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub3c4\ucee4\uc5d0\uc11c\ub294, \ucee4\ub9e8\ub4dc \ub77c\uc778 \uc635\uc158 --restart \uc785\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0\uc11c\ub294, \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uad6c\ub3d9\ud558\uace0 \uc7ac\uc2dc\uc791\ud558\ub294 \uac83\uc774 \ub9e4\uc6b0 \ubc88\uac70\ub86d\uace0 \uc5b4\ub824\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 \uc774\ub7f0 \uae30\ub2a5\uc740 \uae30\ubcf8\uc801\uc73c\ub85c \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \u2728 \ubcf5\uc81c - \ud504\ub85c\uc138\uc2a4 \uac1c\uc218 \u00b6 \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ucfe0\ubc84\ub124\ud2f0\uc2a4 \uc640 \uba38\uc2e0 \ud074\ub7ec\uc2a4\ud130 , \ub3c4\ucee4 \uc2a4\uc650 \ubaa8\ub4dc, \ub178\ub9c8\ub4dc, \ub610\ub294 \ub2e4\ub978 \uc5ec\ub7ec \uba38\uc2e0 \uc704\uc5d0 \ubd84\uc0b0 \ucee8\ud14c\uc774\ub108\ub97c \uad00\ub9ac\ud558\ub294 \ubcf5\uc7a1\ud55c \uc2dc\uc2a4\ud15c\uc744 \ub2e4\ub8e8\uace0 \uc788\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc740 \uac01 \ucee8\ud14c\uc774\ub108\uc5d0\uc11c (\uc6cc\ucee4\uc640 \ud568\uaed8 \uc0ac\uc6a9\ud558\ub294 Gunicorn \uac19\uc740) \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800 \ub300\uc2e0 \ud074\ub7ec\uc2a4\ud130 \ub808\ubca8 \uc5d0\uc11c \ubcf5\uc81c\ub97c \ub2e4\ub8e8 \uace0 \uc2f6\uc744 \uac83\uc785\ub2c8\ub2e4. \ucfe0\ubc84\ub124\ud2f0\uc2a4\uc640 \uac19\uc740 \ubd84\uc0b0 \ucee8\ud14c\uc774\ub108 \uad00\ub9ac \uc2dc\uc2a4\ud15c \uc911 \uc77c\ubd80\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ub4e4\uc5b4\uc624\ub294 \uc694\uccad\uc5d0 \ub300\ud55c \ub85c\ub4dc \ubc38\ub7f0\uc2f1 \uc744 \uc9c0\uc6d0\ud558\uba74\uc11c \ucee8\ud14c\uc774\ub108 \ubcf5\uc81c \ub97c \ub2e4\ub8e8\ub294 \ud1b5\ud569\ub41c \ubc29\ubc95\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub450 \ud074\ub7ec\uc2a4\ud130 \ub808\ubca8 \uc5d0\uc11c \ub9d0\uc774\uc8e0. \uc774\ub7f0 \uacbd\uc6b0\uc5d0, \uc5ec\ub7ec\ubd84\uc740 \uc704\uc5d0\uc11c \ubb18\uc0ac\ub41c \uac83 \ucc98\ub7fc \ucc98\uc74c\ubd80\ud130 \ub3c4\ucee4 \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud574\uc11c, \uc758\uc874\uc131\uc744 \uc124\uce58\ud558\uace0, Uvicorn \uc6cc\ucee4\ub97c \uad00\ub9ac\ud558\ub294 Gunicorn \ub300\uc2e0 \ub2e8\uc77c Uvicorn \ud504\ub85c\uc138\uc2a4 \ub97c \uc2e4\ud589\ud558\uace0 \uc2f6\uc744 \uac83\uc785\ub2c8\ub2e4. \ub85c\ub4dc \ubc38\ub7f0\uc11c \u00b6 \ucee8\ud14c\uc774\ub108\ub85c \uc791\uc5c5\ud560 \ub54c, \uc5ec\ub7ec\ubd84\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uba54\uc778 \ud3ec\ud2b8\uc758 \uc0c1\ud669\uc744 \uac10\uc9c0\ud558\ub294 \uc694\uc18c\ub97c \uac00\uc9c0\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uc774\ub294 HTTPS \ub97c \ub2e4\ub8e8\ub294 TLS \uc885\ub8cc \ud504\ub85d\uc2dc \uc640 \uac19\uc740 \ub2e4\ub978 \ucee8\ud14c\uc774\ub108\uc77c \uc218\ub3c4 \uc788\uace0, \uc720\uc0ac\ud55c \ub2e4\ub978 \ub3c4\uad6c\uc77c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc694\uc18c\uac00 \uc694\uccad\ub4e4\uc758 \ub85c\ub4dc \ub97c \uc77d\uc5b4\ub4e4\uc774\uace0 \uac01 \uc6cc\ucee4\uc5d0\uac8c (\ubc14\ub77c\uac74\ub300) \uade0\ud615\uc801\uc73c\ub85c \ubd84\ubc30\ud55c\ub2e4\uba74, \uc774 \uc694\uc18c\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ub85c\ub4dc \ubc38\ub7f0\uc11c \ub77c\uace0 \ubd88\ub9bd\ub2c8\ub2e4. \ud301 HTTPS\ub97c \uc704\ud574 \uc0ac\uc6a9\ub41c TLS \uc885\ub8cc \ud504\ub85d\uc2dc \uc694\uc18c \ub610\ud55c \ub85c\ub4dc \ubc38\ub7f0\uc11c \uac00 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \ucee8\ud14c\uc774\ub108\ub85c \uc791\uc5c5\ud560 \ub54c, \ucee8\ud14c\uc774\ub108\ub97c \uc2dc\uc791\ud558\uace0 \uad00\ub9ac\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud55c \uac83\uacfc \ub3d9\uc77c\ud55c \uc2dc\uc2a4\ud15c\uc740 \uc774\ubbf8 \ud574\ub2f9 \ub85c\ub4dc \ubc38\ub7f0\uc11c \ub85c \ubd80\ud130 \uc5ec\ub7ec\ubd84\uc758 \uc571\uc5d0 \ud574\ub2f9\ud558\ub294 \ucee8\ud14c\uc774\ub108\ub85c \ub124\ud2b8\uc6cc\ud06c \ud1b5\uc2e0 (\uc608\ub97c \ub4e4\uc5b4, HTTP \uc694\uccad)\uc744 \uc804\uc1a1\ud558\ub294 \ub0b4\ubd80\uc801\uc778 \ub3c4\uad6c\ub97c \uac00\uc9c0\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4 (\uc5ec\uae30\uc11c\ub3c4 \ub85c\ub4dc \ubc38\ub7f0\uc11c\ub294 TLS \uc885\ub8cc \ud504\ub85d\uc2dc \uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4). \ud558\ub098\uc758 \ub85c\ub4dc \ubc38\ub7f0\uc11c - \ub2e4\uc911 \uc6cc\ucee4 \ucee8\ud14c\uc774\ub108 \u00b6 \ucfe0\ubc84\ub124\ud2f0\uc2a4 \ub098 \ub610\ub294 \ub2e4\ub978 \ubd84\uc0b0 \ucee8\ud14c\uc774\ub108 \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc73c\ub85c \uc791\uc5c5\ud560 \ub54c, \uc2dc\uc2a4\ud15c \ub0b4\ubd80\uc758 \ub124\ud2b8\uc6cc\ud0b9 \uba54\ucee4\ub2c8\uc998\uc744 \uc774\uc6a9\ud568\uc73c\ub85c\uc368 \uba54\uc778 \ud3ec\ud2b8 \ub97c \uac10\uc9c0\ud558\uace0 \uc788\ub294 \ub2e8\uc77c \ub85c\ub4dc \ubc38\ub7f0\uc11c \ub294 \uc5ec\ub7ec\ubd84\uc758 \uc571\uc5d0\uc11c \uc2e4\ud589\ub418\uace0 \uc788\ub294 \uc5ec\ub7ec\uac1c\uc758 \ucee8\ud14c\uc774\ub108 \uc5d0 \ud1b5\uc2e0(\uc694\uccad\ub4e4)\uc744 \uc804\uc1a1\ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc758 \uc571\uc5d0\uc11c \uc2e4\ud589\ub418\uace0 \uc788\ub294 \uac01\uac01\uc758 \ucee8\ud14c\uc774\ub108\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ud558\ub098\uc758 \ud504\ub85c\uc138\uc2a4 \ub9cc \uac00\uc9c8 \uac83\uc785\ub2c8\ub2e4 (\uc608\ub97c \ub4e4\uc5b4, FastAPI \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ud558\ub098\uc758 Uvicorn \ud504\ub85c\uc138\uc2a4\ucc98\ub7fc). \uc774 \ucee8\ud14c\uc774\ub108\ub4e4\uc740 \ubaa8\ub450 \uac19\uc740 \uac83\uc744 \uc2e4\ud589\ud558\ub294 \uc810\uc5d0\uc11c \ub3d9\uc77c\ud55c \ucee8\ud14c\uc774\ub108 \uc774\uc9c0\ub9cc, \ud504\ub85c\uc138\uc2a4, \uba54\ubaa8\ub9ac \ub4f1\uc740 \uacf5\uc720\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774 \ubc29\uc2dd\uc73c\ub85c \uc5ec\ub7ec\ubd84\uc740 CPU\uc758 \uc11c\ub85c \ub2e4\ub978 \ucf54\uc5b4\ub4e4 \ub610\ub294 \uc11c\ub85c \ub2e4\ub978 \uba38\uc2e0\ub4e4 \uc744 \ubcd1\ub82c\ud654 \ud558\ub294 \uc774\uc810\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \ub85c\ub4dc \ubc38\ub7f0\uc11c \uac00 \uc788\ub294 \ubd84\uc0b0 \ucee8\ud14c\uc774\ub108 \uc2dc\uc2a4\ud15c\uc740 \uc5ec\ub7ec\ubd84\uc758 \uc571\uc5d0 \uc788\ub294 \ucee8\ud14c\uc774\ub108 \uac01\uac01\uc5d0 \ucc28\ub840\ub300\ub85c \uc694\uccad\uc744 \ubd84\uc0b0 \uc2dc\ud0ac \uac83 \uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \uac01 \uc694\uccad\uc740 \uc5ec\ub7ec\ubd84\uc758 \uc571\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \uc5ec\ub7ec\uac1c\uc758 \ubcf5\uc81c\ub41c \ucee8\ud14c\uc774\ub108\ub4e4 \uc911 \ud558\ub098\uc5d0 \uc758\ud574 \ub2e4\ub8e8\uc5b4\uc9c8 \uac83 \uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc77c\ubc18\uc801\uc73c\ub85c \ub85c\ub4dc \ubc38\ub7f0\uc11c \ub294 \uc5ec\ub7ec\ubd84\uc758 \ud074\ub7ec\uc2a4\ud130\uc5d0 \uc788\ub294 \ub2e4\ub978 \uc571\uc73c\ub85c \uac00\ub294 \uc694\uccad\ub4e4\ub3c4 \ub2e4\ub8f0 \uc218 \uc788\uc73c\uba70 (\uc608\ub97c \ub4e4\uc5b4, \ub2e4\ub978 \ub3c4\uba54\uc778\uc73c\ub85c \uac00\uac70\ub098 \ub2e4\ub978 URL \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac00\uc9c0\ub294 \uacbd\uc6b0), \uc774 \ud1b5\uc2e0\ub4e4\uc744 \ud074\ub7ec\uc2a4\ud130\uc5d0 \uc788\ub294 \ubc14\ub85c \uadf8 \ub2e4\ub978 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc73c\ub85c \uc81c\ub300\ub85c \uc804\uc1a1\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e8\uc77c \ud504\ub85c\uc138\uc2a4\ub97c \uac00\uc9c0\ub294 \ucee8\ud14c\uc774\ub108 \u00b6 \uc774 \uc2dc\ub098\ub9ac\uc624\uc758 \uacbd\uc6b0, \uc5ec\ub7ec\ubd84\uc740 \uc774\ubbf8 \ud074\ub7ec\uc2a4\ud130 \ub808\ubca8\uc5d0\uc11c \ubcf5\uc81c\ub97c \ub2e4\ub8e8\uace0 \uc788\uc744 \uac83\uc774\ubbc0\ub85c \ucee8\ud14c\uc774\ub108 \ub2f9 \ub2e8\uc77c (Uvicorn) \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\uace0\uc790 \ud560 \uac83\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc5ec\ub7ec\ubd84\uc740 Gunicorn \uc774\ub098 Uvicorn \uc6cc\ucee4, \ub610\ub294 Uvicorn \uc6cc\ucee4\ub97c \uc0ac\uc6a9\ud558\ub294 Uvicorn \ub9e4\ub2c8\uc800\uc640 \uac19\uc740 \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800\ub97c \uac00\uc9c0\uace0 \uc2f6\uc5b4\ud558\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \ucee8\ud14c\uc774\ub108 \ub2f9 \ub2e8\uc77c Uvicorn \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\uace0 \uc2f6\uc5b4\ud560 \uac83\uc785\ub2c8\ub2e4 (\uadf8\ub7ec\ub098 \uc544\ub9c8\ub3c4 \ub2e4\uc911 \ucee8\ud14c\uc774\ub108\ub97c \uac00\uc9c8 \uac83\uc785\ub2c8\ub2e4). \uc774\ubbf8 \uc5ec\ub7ec\ubd84\uc774 \ud074\ub7ec\uc2a4\ud130 \uc2dc\uc2a4\ud15c\uc744 \uad00\ub9ac\ud558\uace0 \uc788\uc73c\ubbc0\ub85c, (Uvicorn \uc6cc\ucee4\ub97c \uad00\ub9ac\ud558\ub294 Gunicorn \uc774\ub098 Uvicorn \ucc98\ub7fc) \ucee8\ud14c\uc774\ub108 \ub0b4\uc5d0 \ub2e4\ub978 \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800\ub97c \uac00\uc9c0\ub294 \uac83\uc740 \ubd88\ud544\uc694\ud55c \ubcf5\uc7a1\uc131 \ub9cc \ub354\ud558\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4. \ub2e4\uc911 \ud504\ub85c\uc138\uc2a4\ub97c \uac00\uc9c0\ub294 \ucee8\ud14c\uc774\ub108\uc640 \ud2b9\uc218\ud55c \uacbd\uc6b0\ub4e4 \u00b6 \ub2f9\uc5f0\ud55c \ub9d0\uc774\uc9c0\ub9cc, \uc5ec\ub7ec\ubd84\uc774 \ub0b4\ubd80\uc801\uc73c\ub85c Uvicorn \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\ub4e4 \ub97c \uc2dc\uc791\ud558\ub294 Gunicorn \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800 \ub97c \uac00\uc9c0\ub294 \ub2e8\uc77c \ucee8\ud14c\uc774\ub108\ub97c \uc6d0\ud558\ub294 \ud2b9\uc218\ud55c \uacbd\uc6b0 \ub3c4 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7f0 \uacbd\uc6b0\uc5d0, \uc5ec\ub7ec\ubd84\ub4e4\uc740 Gunicorn \uc744 \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800\ub85c \ud3ec\ud568\ud558\ub294 \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800\ub294 \ub2e4\uc911 Uvicorn \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\ub4e4 \uc744 \uc2e4\ud589\ud558\uba70, \ub514\ud3f4\ud2b8 \uc138\ud305\uc73c\ub85c \ud604\uc7ac CPU \ucf54\uc5b4\uc5d0 \uae30\ubc18\ud558\uc5ec \uc790\ub3d9\uc73c\ub85c \uc6cc\ucee4 \uac1c\uc218\ub97c \uc870\uc815\ud569\ub2c8\ub2e4. \uc774 \uc0ac\ud56d\uc5d0 \ub300\ud574\uc11c\ub294 \uc544\ub798\uc758 Gunicorn\uacfc \ud568\uaed8\ud558\ub294 \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0 - Uvicorn \uc5d0\uc11c \ub354 \ub2e4\ub8e8\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\uc5d0 \ud574\ub2f9\ud558\ub294 \uba87\uac00\uc9c0 \uc608\uc2dc\uac00 \uc788\uc2b5\ub2c8\ub2e4: \ub2e8\uc21c\ud55c \uc571 \u00b6 \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc758 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \ucda9\ubd84\ud788 \ub2e8\uc21c \ud574\uc11c (\uc801\uc5b4\ub3c4 \uc544\uc9c1\uc740) \ud504\ub85c\uc138\uc2a4 \uac1c\uc218\ub97c \ud30c\uc778-\ud2a0 \ud560 \ud544\uc694\uac00 \uc5c6\uac70\ub098 \ud074\ub7ec\uc2a4\ud130\uac00 \uc544\ub2cc \ub2e8\uc77c \uc11c\ubc84 \uc5d0\uc11c \uc2e4\ud589\ud558\uace0 \uc788\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc740 \ucee8\ud14c\uc774\ub108 \ub0b4\uc5d0 \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800\ub97c \uc0ac\uc6a9\ud558\uac70\ub098 (\uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0\uc5d0\uc11c) \uc790\ub3d9\uc73c\ub85c \uc124\uc815\ub418\ub294 \ub514\ud3f4\ud2b8 \uac12\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub3c4\ucee4 \uad6c\uc131 \u00b6 \uc5ec\ub7ec\ubd84\uc740 \ub3c4\ucee4 \ucef4\ud3ec\uc988 \ub85c (\ud074\ub7ec\uc2a4\ud130\uac00 \uc544\ub2cc) \ub2e8\uc77c \uc11c\ubc84\ub85c \ubc30\ud3ec\ud560 \uc218 \uc788\uc73c\uba70, \uc774 \uacbd\uc6b0\uc5d0 \uacf5\uc720\ub41c \ub124\ud2b8\uc6cc\ud06c\uc640 \ub85c\ub4dc \ubc38\ub7f0\uc2f1 \uc744 \ud3ec\ud568\ud558\ub294 (\ub3c4\ucee4 \ucef4\ud3ec\uc988\ub85c) \ucee8\ud14c\uc774\ub108\uc758 \ubcf5\uc81c\ub97c \uad00\ub9ac\ud558\ub294 \ub2e8\uc21c\ud55c \ubc29\ubc95\uc774 \uc5c6\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc5ec\ub7ec\ubd84\uc740 \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800 \uc640 \ud568\uaed8 \ub0b4\ubd80\uc5d0 \uba87\uac1c\uc758 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\ub4e4 \uc744 \uc2dc\uc791\ud558\ub294 \ub2e8\uc77c \ucee8\ud14c\uc774\ub108 \ub97c \ud544\uc694\ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Prometheus\uc640 \ub2e4\ub978 \uc774\uc720\ub4e4 \u00b6 \uc5ec\ub7ec\ubd84\uc740 \ub2e8\uc77c \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\ub294 \ub2e4\uc911 \ucee8\ud14c\uc774\ub108 \ub300\uc2e0 \ub2e4\uc911 \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\ub294 \ub2e8\uc77c \ucee8\ud14c\uc774\ub108 \ub97c \ucc44\ud0dd\ud558\ub294 \ub2e4\ub978 \uc774\uc720 \uac00 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 (\uc5ec\ub7ec\ubd84\uc758 \uc7a5\uce58 \uc124\uc815\uc5d0 \ub530\ub77c) Prometheus \uc775\uc2a4\ud3ec\ud130\uc640 \uac19\uc774 \uac19\uc740 \ucee8\ud14c\uc774\ub108\uc5d0 \ub4e4\uc5b4\uc624\ub294 \uac01 \uc694\uccad\uc5d0 \ub300\ud574 \uc811\uadfc\uad8c\ud55c\uc744 \uac00\uc9c0\ub294 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uacbd\uc6b0\uc5d0 \uc5ec\ub7ec\ubd84\uc774 \uc5ec\ub7ec\uac1c\uc758 \ucee8\ud14c\uc774\ub108\ub4e4 \uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, Prometheus\uac00 \uba54\ud2b8\ub9ad\uc744 \uc77d\uc5b4 \ub4e4\uc77c \ub54c , \ub514\ud3f4\ud2b8\ub85c \ub9e4\ubc88 \ud558\ub098\uc758 \ucee8\ud14c\uc774\ub108 (\ud2b9\uc815 \ub9ac\ud018\uc2a4\ud2b8\ub97c \uad00\ub9ac\ud558\ub294 \ubc14\ub85c \uadf8 \ucee8\ud14c\uc774\ub108)\ub85c \ubd80\ud130 \uc77d\uc5b4\ub4e4\uc77c \uac83\uc785\ub2c8\ub2e4. \uc774\ub294 \ubaa8\ub4e0 \ubcf5\uc81c\ub41c \ucee8\ud14c\uc774\ub108\uc5d0 \ub300\ud574 \ucd95\uc801\ub41c \uba54\ud2b8\ub9ad\ub4e4 \uc744 \uc77d\uc5b4\ub4e4\uc774\ub294 \uac83\uacfc \ub300\ube44\ub429\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc774 \uacbd\uc6b0\uc5d0\ub294 \ub2e4\uc911 \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\ub294 \ud558\ub098\uc758 \ucee8\ud14c\uc774\ub108 \ub97c \ub450\uc5b4\uc11c \uac19\uc740 \ucee8\ud14c\uc774\ub108\uc5d0\uc11c \ubaa8\ub4e0 \ub0b4\ubd80 \ud504\ub85c\uc138\uc2a4\uc5d0 \ub300\ud55c Prometheus \uba54\ud2b8\ub9ad\uc744 \uc218\uc9d1\ud558\ub294 \ub85c\uceec \ub3c4\uad6c(\uc608\ub97c \ub4e4\uc5b4 Prometheus \uc775\uc2a4\ud3ec\ud130 \uac19\uc740)\ub97c \ub450\uc5b4\uc11c \uc774 \uba54\uadf8\ub9ad\ub4e4\uc744 \ud558\ub098\uc758 \ucee8\ud14c\uc774\ub108\uc5d0 \ub0b4\uc5d0\uc11c \uacf5\uc720\ud558\ub294 \ubc29\ubc95\uc774 \ub354 \ub2e8\uc21c\ud560 \uac83\uc785\ub2c8\ub2e4. \uc694\uc810\uc740, \uc774 \uc911\uc758 \uc5b4\ub290\uac83\ub3c4 \uc5ec\ub7ec\ubd84\ub4e4\uc774 \ubc18\ub4dc\uc2dc \ub530\ub77c\uc57c\ud558\ub294 \ud655\uc815\ub41c \uc0ac\uc2e4 \uc774 \uc544\ub2c8\ub77c\ub294 \uac83\uc785\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \uc774 \uc544\uc774\ub514\uc5b4\ub4e4\uc744 \uc5ec\ub7ec\ubd84\uc758 \uace0\uc720\ud55c \uc774\uc6a9 \uc0ac\ub840\ub97c \ud3c9\uac00 \ud558\ub294\ub370 \uc0ac\uc6a9\ud558\uace0, \uc5ec\ub7ec\ubd84\uc758 \uc2dc\uc2a4\ud15c\uc5d0 \uac00\uc7a5 \uc801\ud569\ud55c \uc811\uadfc\ubc95\uc774 \uc5b4\ub5a4 \uac83\uc778\uc9c0 \uacb0\uc815\ud558\uba70, \ub2e4\uc74c\uc758 \uac1c\ub150\ub4e4\uc744 \uad00\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ubcf4\uc548 - HTTPS \uad6c\ub3d9\ud558\uae30 \uc7ac\uc2dc\uc791 \ubcf5\uc81c (\uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uc138\uc2a4 \uac1c\uc218) \uba54\ubaa8\ub9ac \uc2dc\uc791\ud558\uae30 \uc804 \ub2e8\uacc4\ub4e4 \uba54\ubaa8\ub9ac \u00b6 \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ucee8\ud14c\uc774\ub108 \ub2f9 \ub2e8\uc77c \ud504\ub85c\uc138\uc2a4 \ub97c \uc2e4\ud589\ud55c\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc740 \uac01 \ucee8\ud14c\uc774\ub108(\ubcf5\uc81c\ub41c \uacbd\uc6b0\uc5d0\ub294 \uc5ec\ub7ec\uac1c\uc758 \ucee8\ud14c\uc774\ub108\ub4e4)\uc5d0 \ub300\ud574 \uc798 \uc815\uc758\ub418\uace0, \uc548\uc815\uc801\uc774\uba70, \uc81c\ud55c\ub41c \uc6a9\ub7c9\uc758 \uba54\ubaa8\ub9ac \uc18c\ube44\ub7c9\uc744 \uac00\uc9c0\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc5ec\ub7ec\ubd84\uc758 \ucee8\ud14c\uc774\ub108 \uad00\ub9ac \uc2dc\uc2a4\ud15c(\uc608\ub97c \ub4e4\uc5b4 \ucfe0\ubc84\ub124\ud2f0\uc2a4 ) \uc124\uc815\uc5d0\uc11c \uc55e\uc11c \uc815\uc758\ub41c \uac83\uacfc \uac19\uc740 \uba54\ubaa8\ub9ac \uc81c\ud55c\uacfc \uc694\uad6c\uc0ac\ud56d\uc744 \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \ubc29\ubc95\uc73c\ub85c \uac00\uc6a9 \uba38\uc2e0 \uc774 \ud544\uc694\ub85c\ud558\ub294 \uba54\ubaa8\ub9ac\uc640 \ud074\ub7ec\uc2a4\ud130\uc5d0 \uc788\ub294 \uac00\uc6a9 \uba38\uc2e0\ub4e4\uc744 \uc5fc\ub450\uc5d0 \ub450\uace0 \ucee8\ud14c\uc774\ub108\ub97c \ubcf5\uc81c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc758 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \ub2e8\uc21c \ud558\ub2e4\uba74, \uc774\uac83\uc740 \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\uc744 \uac83\uc774\uace0, \uace0\uc815\ub41c \uba54\ubaa8\ub9ac \uc81c\ud55c\uc744 \uad6c\uccb4\ud654\ud560 \ud544\uc694\ub3c4 \uc5c6\uc744 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc5ec\ub7ec\ubd84\uc758 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 (\uc608\ub97c \ub4e4\uc5b4 \uba38\uc2e0 \ub7ec\ub2dd \ubaa8\ub378\uac19\uc774) \ub9ce\uc740 \uba54\ubaa8\ub9ac\ub97c \uc18c\uc694\ud55c\ub2e4\uba74 , \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \uc5bc\ub9c8\ub098 \ub9ce\uc740 \uc591\uc758 \uba54\ubaa8\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294\uc9c0 \ud655\uc778\ud558\uace0 \uac01 \uba38\uc2e0\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ucee8\ud14c\uc774\ub108\uc758 \uc218 \ub97c \uc870\uc815\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4 (\uadf8\ub9ac\uace0 \ud544\uc694\uc5d0 \ub530\ub77c \uc5ec\ub7ec\ubd84\uc758 \ud074\ub7ec\uc2a4\ud130\uc5d0 \uba38\uc2e0\uc744 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4). \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ucee8\ud14c\uc774\ub108 \ub2f9 \uc5ec\ub7ec\uac1c\uc758 \ud504\ub85c\uc138\uc2a4 \ub97c \uc2e4\ud589\ud55c\ub2e4\uba74 (\uc608\ub97c \ub4e4\uc5b4 \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \ucc98\ub7fc), \uc5ec\ub7ec\ubd84\uc740 \uc2dc\uc791\ub41c \ud504\ub85c\uc138\uc2a4 \uac1c\uc218\uac00 \uac00\uc6a9\ud55c \uac83 \ubcf4\ub2e4 \ub354 \ub9ce\uc740 \uba54\ubaa8\ub9ac\ub97c \uc18c\ube44 \ud558\uc9c0 \uc54a\ub294\uc9c0 \ud655\uc778\ud574\uc57c \ud569\ub2c8\ub2e4. \uc2dc\uc791\ud558\uae30 \uc804 \ub2e8\uacc4\ub4e4\uacfc \ucee8\ud14c\uc774\ub108 \u00b6 \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ucee8\ud14c\uc774\ub108(\uc608\ub97c \ub4e4\uc5b4 \ub3c4\ucee4, \ucfe0\ubc84\ub124\ud2f0\uc2a4)\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc774 \uc811\uadfc\ud560 \uc218 \uc788\ub294 \uc8fc\uc694 \ubc29\ubc95\uc740 \ud06c\uac8c \ub450\uac00\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc911 \ucee8\ud14c\uc774\ub108 \u00b6 \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \uc5ec\ub7ec\uac1c\uc758 \ucee8\ud14c\uc774\ub108 \ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \uc544\ub9c8\ub3c4 \uac01\uac01\uc758 \ucee8\ud14c\uc774\ub108\ub294 \ud558\ub098\uc758 \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4(\uc608\ub97c \ub4e4\uc5b4, \ucfe0\ubc84\ub124\ud2f0\uc2a4 \ud074\ub7ec\uc2a4\ud130\uc5d0\uc11c). \uadf8\ub7ec\uba74 \uc5ec\ub7ec\ubd84\uc740 \ubcf5\uc81c\ub41c \uc6cc\ucee4 \ucee8\ud14c\uc774\ub108\ub97c \uc2e4\ud589\ud558\uae30 \uc774\uc804\uc5d0 , \ud558\ub098\uc758 \ucee8\ud14c\uc774\ub108\uc5d0 \uc788\ub294 \uc774\uc804\uc758 \ub2e8\uacc4\ub4e4\uc744 \uc218\ud589\ud558\ub294 \ub2e8\uc77c \ud504\ub85c\uc138\uc2a4\ub97c \uac00\uc9c0\ub294 \ubcc4\ub3c4\uc758 \ucee8\ud14c\uc774\ub108\ub4e4 \uc744 \uac00\uc9c0\uace0 \uc2f6\uc744 \uac83\uc785\ub2c8\ub2e4. \uc815\ubcf4 \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ucfe0\ubc84\ub124\ud2f0\uc2a4\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74, \uc544\ub9c8\ub3c4 \uc774\ub294 Init Container \uc77c \uac83\uc785\ub2c8\ub2e4. \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc758 \uc774\uc6a9 \uc0ac\ub840\uc5d0\uc11c \uc774\uc804 \ub2e8\uacc4\ub4e4\uc744 \ubcd1\ub82c\uc801\uc73c\ub85c \uc5ec\ub7ec\ubc88 \uc218\ud589\ud558\ub294\ub370\uc5d0 \ubb38\uc81c\uac00 \uc5c6\ub2e4\uba74 (\uc608\ub97c \ub4e4\uc5b4 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc774\uc804\uc744 \uc2e4\ud589\ud558\uc9c0 \uc54a\uace0 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uac00 \uc900\ube44\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ub9cc \ud558\ub294 \uacbd\uc6b0), \uba54\uc778 \ud504\ub85c\uc138\uc2a4\ub97c \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \uc774 \ub2e8\uacc4\ub4e4\uc744 \uac01 \ucee8\ud14c\uc774\ub108\uc5d0 \ub123\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e8\uc77c \ucee8\ud14c\uc774\ub108 \u00b6 \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc758 \uc14b\uc5c5\uc774 \ub2e4\uc911 \ud504\ub85c\uc138\uc2a4 (\ub610\ub294 \ud558\ub098\uc758 \ud504\ub85c\uc138\uc2a4)\ub97c \uc2dc\uc791\ud558\ub294 \ud558\ub098\uc758 \ucee8\ud14c\uc774\ub108 \ub97c \uac00\uc9c0\ub294 \ub2e8\uc21c\ud55c \uc14b\uc5c5\uc774\ub77c\uba74, \uc0ac\uc804 \ub2e8\uacc4\ub4e4\uc744 \uc571\uc744 \ud3ec\ud568\ud558\ub294 \ud504\ub85c\uc138\uc2a4\ub97c \uc2dc\uc791\ud558\uae30 \uc9c1\uc804\uc5d0 \uac19\uc740 \ucee8\ud14c\uc774\ub108\uc5d0\uc11c \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0\ub294 \uc774\ub97c \ub0b4\ubd80\uc801\uc73c\ub85c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. Gunicorn\uacfc \ud568\uaed8\ud558\ub294 \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0 - Uvicorn \u00b6 \uc55e \ucc55\ud130\uc5d0\uc11c \uc790\uc138\ud558\uac8c \uc124\uba85\ub41c \uac83 \ucc98\ub7fc, Uvicorn \uc6cc\ucee4\uc640 \uac19\uc774 \uc2e4\ud589\ub418\ub294 Gunicorn\uc744 \ud3ec\ud568\ud558\ub294 \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4: \uc11c\ubc84 \uc6cc\ucee4 - Uvicorn\uacfc \ud568\uaed8\ud558\ub294 Gunicorn . \uc774 \uc774\ubbf8\uc9c0\ub294 \uc8fc\ub85c \uc704\uc5d0\uc11c \uc124\uba85\ub41c \uc0c1\ud669\uc5d0\uc11c \uc720\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4: \ub2e4\uc911 \ud504\ub85c\uc138\uc2a4\ub97c \uac00\uc9c0\ub294 \ucee8\ud14c\uc774\ub108\uc640 \ud2b9\uc218\ud55c \uacbd\uc6b0\ub4e4 . tiangolo/uvicorn-gunicorn-fastapi . \uacbd\uace0 \uc5ec\ub7ec\ubd84\uc774 \uc774 \ubca0\uc774\uc2a4 \uc774\ubbf8\uc9c0 \ub610\ub294 \ub2e4\ub978 \uc720\uc0ac\ud55c \uc774\ubbf8\uc9c0\ub97c \ud544\uc694\ub85c \ud558\uc9c0 \uc54a\uc744 \ub192\uc740 \uac00\ub2a5\uc131\uc774 \uc788\uc73c\uba70, \uc704\uc5d0\uc11c \uc124\uba85\ub41c \uac83\ucc98\ub7fc: FastAPI\ub97c \uc704\ud55c \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \ube4c\ub4dc\ud558\uae30 \ucc98\uc74c\ubd80\ud130 \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud558\ub294 \uac83\uc774 \ub354 \ub098\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc774\ubbf8\uc9c0\ub294 \uac00\ub2a5\ud55c CPU \ucf54\uc5b4\uc5d0 \uae30\ubc18\ud55c \uba87\uac1c\uc758 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \ub97c \uc124\uc815\ud558\ub294 \uc790\ub3d9-\ud29c\ub2dd \uba54\ucee4\ub2c8\uc998\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc774\ubbf8\uc9c0\ub294 \ubbfc\uac10\ud55c \ub514\ud3f4\ud2b8 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc9c0\ub9cc, \uc5ec\ub7ec\ubd84\ub4e4\uc740 \uc5ec\uc804\ud788 \ud658\uacbd \ubcc0\uc218 \ub610\ub294 \uc124\uc815 \ud30c\uc77c\uc744 \ud1b5\ud574 \uc124\uc815\uac12\uc744 \uc218\uc815\ud558\uace0 \uc5c5\ub370\uc774\ud2b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uc2a4\ud06c\ub9bd\ud2b8\ub97c \ud1b5\ud574 \uc2dc\uc791\ud558\uae30 \uc804 \uc0ac\uc804 \ub2e8\uacc4 \ub97c \uc2e4\ud589\ud558\ub294 \uac83\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \ud301 \ubaa8\ub4e0 \uc124\uc815\uacfc \uc635\uc158\uc744 \ubcf4\ub824\uba74, \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \ud398\uc774\uc9c0\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4: tiangolo/uvicorn-gunicorn-fastapi . \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0\uc5d0 \uc788\ub294 \ud504\ub85c\uc138\uc2a4 \uac1c\uc218 \u00b6 \uc774 \uc774\ubbf8\uc9c0\uc5d0 \uc788\ub294 \ud504\ub85c\uc138\uc2a4 \uac1c\uc218 \ub294 \uac00\uc6a9\ud55c CPU \ucf54\uc5b4\ub4e4 \ub85c \ubd80\ud130 \uc790\ub3d9\uc73c\ub85c \uacc4\uc0b0 \ub429\ub2c8\ub2e4. \uc774\uac83\uc774 \uc758\ubbf8\ud558\ub294 \ubc14\ub294 \uc774\ubbf8\uc9c0\uac00 CPU\ub85c\ubd80\ud130 \ucd5c\ub300\ud55c\uc758 \uc131\ub2a5 \uc744 \uc950\uc5b4\uc9dc\ub0b8\ub2e4 \ub294 \uac83\uc785\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \uc774 \uc124\uc815 \uac12\uc744 \ud658\uacbd \ubcc0\uc218 \ub098 \uae30\ud0c0 \ubc29\ubc95\ub4e4\ub85c \uc870\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ud504\ub85c\uc138\uc2a4\uc758 \uac1c\uc218\uac00 \ucee8\ud14c\uc774\ub108\uac00 \uc2e4\ud589\ub418\uace0 \uc788\ub294 CPU\uc5d0 \uc758\uc874\ud55c\ub2e4\ub294 \uac83\uc740 \ub610\ud55c \uc18c\uc694\ub418\ub294 \uba54\ubaa8\ub9ac\uc758 \ud06c\uae30 \ub610\ud55c \uc774\uc5d0 \uc758\uc874\ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0, \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc758 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \ub9ce\uc740 \uba54\ubaa8\ub9ac\ub97c \uc694\uad6c\ud558\uace0 (\uc608\ub97c \ub4e4\uc5b4 \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378\ucc98\ub7fc), \uc5ec\ub7ec\ubd84\uc758 \uc11c\ubc84\uac00 CPU \ucf54\uc5b4 \uc218\ub294 \ub9ce\uc9c0\ub9cc \uc801\uc740 \uba54\ubaa8\ub9ac \ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc758 \ucee8\ud14c\uc774\ub108\ub294 \uac00\uc6a9\ud55c \uba54\ubaa8\ub9ac\ubcf4\ub2e4 \ub9ce\uc740 \uba54\ubaa8\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub824\uace0 \uc2dc\ub3c4\ud560 \uc218 \uc788\uc73c\uba70, \uacb0\uad6d \ud37c\ud3ec\uba3c\uc2a4\ub97c \ud06c\uac8c \ub5a8\uc5b4\ub728\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4(\uc2ec\uc9c0\uc5b4 \uace0\uc7a5\uc774 \ub0a0 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4). \ud83d\udea8 Dockerfile \uc0dd\uc131\ud558\uae30 \u00b6 \uc774 \uc774\ubbf8\uc9c0\uc5d0 \uae30\ubc18\ud574 Dockerfile \uc744 \uc0dd\uc131\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9 COPY ./requirements.txt /app/requirements.txt RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt COPY ./app /app \ub354 \ud070 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158 \u00b6 \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ub2e4\uc911 \ud30c\uc77c\uc744 \uac00\uc9c0\ub294 \ub354 \ud070 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158 \uc744 \uc0dd\uc131\ud558\ub294 \uc139\uc158\uc744 \ub530\ub790\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc758 Dockerfile \uc740 \ub300\uc2e0 \uc774\ub807\uac8c \uc0dd\uacbc\uc744 \uac83\uc785\ub2c8\ub2e4: FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9 COPY ./requirements.txt /app/requirements.txt RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt COPY ./app /app/app \uc5b8\uc81c \uc0ac\uc6a9\ud560\uae4c \u00b6 \uc5ec\ub7ec\ubd84\ub4e4\uc774 \ucfe0\ubc84\ub124\ud2f0\uc2a4 (\ub610\ub294 \uc720\uc0ac\ud55c \ub2e4\ub978 \ub3c4\uad6c) \uc0ac\uc6a9\ud558\uac70\ub098 \ud074\ub7ec\uc2a4\ud130 \ub808\ubca8\uc5d0\uc11c \ub2e4\uc911 \ucee8\ud14c\uc774\ub108\ub97c \uc774\uc6a9\ud574 \uc774\ubbf8 \uc0ac\ubcf8 \uc744 \uc124\uc815\ud558\uace0 \uc788\ub2e4\uba74, \uacf5\uc2dd \ubca0\uc774\uc2a4 \uc774\ubbf8\uc9c0(\ub610\ub294 \uc720\uc0ac\ud55c \ub2e4\ub978 \uc774\ubbf8\uc9c0)\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83 \uc88b\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0 \uacbd\uc6b0\uc5d0 \uc5ec\ub7ec\ubd84\uc740 \ub2e4\uc74c\uc5d0 \uc124\uba85\ub41c \uac83 \ucc98\ub7fc \ucc98\uc74c\ubd80\ud130 \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud558\ub294 \uac83 \uc774 \ub354 \ub0ab\uc2b5\ub2c8\ub2e4: FastAPI\ub97c \uc704\ud55c \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \ube4c\ub4dc\ud558\uae30 . \uc774 \uc774\ubbf8\uc9c0\ub294 \uc704\uc758 \ub2e4\uc911 \ud504\ub85c\uc138\uc2a4\ub97c \uac00\uc9c0\ub294 \ucee8\ud14c\uc774\ub108\uc640 \ud2b9\uc218\ud55c \uacbd\uc6b0\ub4e4 \uc5d0\uc11c \uc124\uba85\ub41c \ud2b9\uc218\ud55c \uacbd\uc6b0\uc5d0 \ub300\ud574\uc11c\ub9cc \uc8fc\ub85c \uc720\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc758 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \ucda9\ubd84\ud788 \ub2e8\uc21c \ud574\uc11c CPU\uc5d0 \uae30\ubc18\ud55c \ub514\ud3f4\ud2b8 \ud504\ub85c\uc138\uc2a4 \uac1c\uc218\ub97c \uc124\uc815\ud558\ub294 \uac83\uc774 \uc798 \uc791\ub3d9\ud55c\ub2e4\uba74, \ud074\ub7ec\uc2a4\ud130 \ub808\ubca8\uc5d0\uc11c \uc218\ub3d9\uc73c\ub85c \uc0ac\ubcf8\uc744 \uc124\uc815\ud560 \ud544\uc694\uac00 \uc5c6\uc744 \uac83\uc774\uace0, \uc5ec\ub7ec\ubd84\uc758 \uc571\uc5d0\uc11c \ud558\ub098 \uc774\uc0c1\uc758 \ucee8\ud14c\uc774\ub108\ub97c \uc2e4\ud589\ud558\uc9c0\ub3c4 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. \ub610\ub294 \ub9cc\uc57d\uc5d0 \uc5ec\ub7ec\ubd84\uc774 \ub3c4\ucee4 \ucef4\ud3ec\uc988 \ub85c \ubc30\ud3ec\ud558\uac70\ub098, \ub2e8\uc77c \uc11c\ubc84\uc5d0\uc11c \uc2e4\ud589\ud558\uac70\ub098 \ud558\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\uc785\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \ubc30\ud3ec\ud558\uae30 \u00b6 \ucee8\ud14c\uc774\ub108 (\ub3c4\ucee4) \uc774\ubbf8\uc9c0\ub97c \uc644\uc131\ud55c \ub4a4\uc5d0 \uc774\ub97c \ubc30\ud3ec\ud558\ub294 \ubc29\ubc95\uc5d0\ub294 \uc5ec\ub7ec\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4: \ub2e8\uc77c \uc11c\ubc84\uc5d0\uc11c \ub3c4\ucee4 \ucef4\ud3ec\uc988 \ub85c \ubc30\ud3ec\ud558\uae30 \ucfe0\ubc84\ub124\ud2f0\uc2a4 \ud074\ub7ec\uc2a4\ud130\ub85c \ubc30\ud3ec\ud558\uae30 \ub3c4\ucee4 \uc2a4\uc650 \ubaa8\ub4dc \ud074\ub7ec\uc2a4\ud130\ub85c \ubc30\ud3ec\ud558\uae30 \ub178\ub9c8\ub4dc \uac19\uc740 \ub2e4\ub978 \ub3c4\uad6c\ub85c \ubc30\ud3ec\ud558\uae30 \uc5ec\ub7ec\ubd84\uc758 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \ubc30\ud3ec\ud574\uc8fc\ub294 \ud074\ub77c\uc6b0\ub4dc \uc11c\ube44\uc2a4\ub85c \ubc30\ud3ec\ud558\uae30 Poetry\uc758 \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \u00b6 \ub9cc\uc57d \uc5ec\ub7ec\ubd84\ub4e4\uc774 \ud504\ub85c\uc81d\ud2b8 \uc758\uc874\uc131\uc744 \uad00\ub9ac\ud558\uae30 \uc704\ud574 Poetry \ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74, \ub3c4\ucee4\uc758 \uba40\ud2f0-\uc2a4\ud14c\uc774\uc9c0 \ube4c\ub529\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: # (1) FROM python:3.9 as requirements-stage # (2) WORKDIR /tmp # (3) RUN pip install poetry # (4) COPY ./pyproject.toml ./poetry.lock* /tmp/ # (5) RUN poetry export -f requirements.txt --output requirements.txt --without-hashes # (6) FROM python:3.9 # (7) WORKDIR /code # (8) COPY --from = requirements-stage /tmp/requirements.txt /code/requirements.txt # (9) RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt # (10) COPY ./app /code/app # (11) CMD [ \"uvicorn\" , \"app.main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] \uccab \uc2a4\ud14c\uc774\uc9c0\ub85c, requirements-stage \ub77c\uace0 \uc774\ub984 \ubd99\uc600\uc2b5\ub2c8\ub2e4. /tmp \ub97c \ud604\uc7ac\uc758 \uc6cc\ud0b9 \ub514\ub809\ud130\ub9ac\ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \uc774 \uc704\uce58\uc5d0 \uc6b0\ub9ac\ub294 requirements.txt \ud30c\uc77c\uc744 \uc0dd\uc131\ud560 \uac83\uc785\ub2c8\ub2e4. \uc774 \ub3c4\ucee4 \uc2a4\ud14c\uc774\uc9c0\uc5d0\uc11c Poetry\ub97c \uc124\uce58\ud569\ub2c8\ub2e4. \ud30c\uc77c pyproject.toml \uc640 poetry.lock \ub97c /tmp \ub514\ub809\ud130\ub9ac\ub85c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. ./poetry.lock* ( * \ub85c \ub05d\ub098\ub294) \ud30c\uc77c\uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0, \ud30c\uc77c\uc774 \uc544\uc9c1 \uc0ac\uc6a9\uac00\ub2a5\ud558\uc9c0 \uc54a\ub354\ub77c\ub3c4 \uace0\uc7a5\ub098\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. requirements.txt \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc774\uac83\uc774 \ub9c8\uc9c0\ub9c9 \uc2a4\ud14c\uc774\uc9c0\ub85c, \uc5ec\uae30\uc5d0 \uc704\uce58\ud55c \ubaa8\ub4e0 \uac83\uc774 \ub9c8\uc9c0\ub9c9 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\uc5d0 \ud3ec\ud568\ub420 \uac83\uc785\ub2c8\ub2e4. \ud604\uc7ac\uc758 \uc6cc\ud0b9 \ub514\ub809\ud130\ub9ac\ub97c /code \ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \ud30c\uc77c requirements.txt \ub97c /code \ub514\ub809\ud130\ub9ac\ub85c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \uc774 \ud30c\uc77c\uc740 \uc624\uc9c1 \uc774\uc804\uc758 \ub3c4\ucee4 \uc2a4\ud14c\uc774\uc9c0\uc5d0\ub9cc \uc874\uc7ac\ud558\uba70, \ub54c\ubb38\uc5d0 \ubcf5\uc0ac\ud558\uae30 \uc704\ud574\uc11c --from-requirements-stage \uc635\uc158\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \uc0dd\uc131\ub41c requirements.txt \ud30c\uc77c\uc5d0 \ud328\ud0a4\uc9c0 \uc758\uc874\uc131\uc744 \uc124\uce58\ud569\ub2c8\ub2e4. app \ub514\ub809\ud130\ub9ac\ub97c /code \ub514\ub809\ud130\ub9ac\ub85c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. uvicorn \ucee4\ub9e8\ub4dc\ub97c \uc2e4\ud589\ud558\uc5ec, app.main \uc5d0\uc11c \ubd88\ub7ec\uc628 app \uac1d\uccb4\ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. \ud301 \ubc84\ube14 \uc22b\uc790\ub97c \ud074\ub9ad\ud574 \uac01 \uc904\uc774 \ud558\ub294 \uc77c\uc744 \uc54c\uc544\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub3c4\ucee4 \uc2a4\ud14c\uc774\uc9c0 \ub780 Dockefile \uc758 \uc77c\ubd80\ub85c\uc11c \ub098\uc911\uc5d0 \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ud30c\uc77c\ub4e4\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud55c \uc77c\uc2dc\uc801\uc778 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \ub85c \uc791\ub3d9\ud569\ub2c8\ub2e4. \uccab \uc2a4\ud14c\uc774\uc9c0\ub294 \uc624\uc9c1 Poetry\ub97c \uc124\uce58 \ud558\uace0 Poetry\uc758 pyproject.toml \ud30c\uc77c\ub85c\ubd80\ud130 \ud504\ub85c\uc81d\ud2b8 \uc758\uc874\uc131\uc744 \uc704\ud55c requirements.txt \ub97c \uc0dd\uc131 \ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc774 requirements.txt \ud30c\uc77c\uc740 \ub2e4\uc74c \uc2a4\ud14c\uc774\uc9c0 \uc5d0\uc11c pip \ub85c \uc0ac\uc6a9\ub420 \uac83\uc785\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\uc5d0\ub294 \uc624\uc9c1 \ub9c8\uc9c0\ub9c9 \uc2a4\ud14c\uc774\uc9c0\ub9cc \ubcf4\uc874\ub429\ub2c8\ub2e4. \uc774\uc804 \uc2a4\ud14c\uc774\uc9c0(\ub4e4)\uc740 \ubc84\ub824\uc9d1\ub2c8\ub2e4. Poetry\ub97c \uc0ac\uc6a9\ud560 \ub54c \ub3c4\ucee4 \uba40\ud2f0-\uc2a4\ud14c\uc774\uc9c0 \ube4c\ub4dc \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc740\ub370, \uc5ec\ub7ec\ubd84\ub4e4\uc758 \ud504\ub85c\uc81d\ud2b8 \uc758\uc874\uc131\uc744 \uc124\uce58\ud558\uae30 \uc704\ud574 \ub9c8\uc9c0\ub9c9 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\uc5d0 \uc624\uc9c1 requirements.txt \ud30c\uc77c\ub9cc \ud544\uc694\ud558\uc9c0, Poetry\uc640 \uadf8 \uc758\uc874\uc131\uc740 \uc788\uc744 \ud544\uc694\uac00 \uc5c6\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc774 \ub2e4\uc74c (\ub610\ud55c \ub9c8\uc9c0\ub9c9) \uc2a4\ud14c\uc774\uc9c0\uc5d0\uc11c \uc5ec\ub7ec\ubd84\ub4e4\uc740 \uc774\uc804\uc5d0 \uc124\uba85\ub41c \uac83\uacfc \ube44\uc2b7\ud55c \ubc29\uc2dd\uc73c\ub85c \ubc29\uc2dd\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. TLS \uc885\ub8cc \ud504\ub85d\uc2dc\uc758 \ubc30\ud6c4 - Poetry \u00b6 \uc774\uc804\uc5d0 \uc5b8\uae09\ud55c \uac83\uacfc \uac19\uc774, \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ucee8\ud14c\uc774\ub108\ub97c Nginx \ub610\ub294 Traefik\uacfc \uac19\uc740 TLS \uc885\ub8cc \ud504\ub85d\uc2dc (\ub85c\ub4dc \ubc38\ub7f0\uc11c) \ub4a4\uc5d0\uc11c \uc2e4\ud589\ud558\uace0 \uc788\ub2e4\uba74, \ucee4\ub9e8\ub4dc\uc5d0 --proxy-headers \uc635\uc158\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4: CMD [ \"uvicorn\" , \"app.main:app\" , \"--proxy-headers\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] \uc694\uc57d \u00b6 \ucee8\ud14c\uc774\ub108 \uc2dc\uc2a4\ud15c(\uc608\ub97c \ub4e4\uc5b4 \ub3c4\ucee4 \ub098 \ucfe0\ubc84\ub124\ud2f0\uc2a4 )\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub4e0 \ubc30\ud3ec \uac1c\ub150 \uc744 \ub2e4\ub8e8\ub294 \uac83\uc740 \uaf64 \uac04\ub2e8\ud569\ub2c8\ub2e4: HTTPS \uad6c\ub3d9\ud558\uae30 \uc7ac\uc2dc\uc791 \ubcf5\uc81c (\uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uc138\uc2a4 \uac1c\uc218) \uba54\ubaa8\ub9ac \uc2dc\uc791\ud558\uae30 \uc804 \ub2e8\uacc4\ub4e4 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0\uc11c \uc5ec\ub7ec\ubd84\uc740 \uc5b4\ub5a4 \ubca0\uc774\uc2a4 \uc774\ubbf8\uc9c0\ub3c4 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uacf5\uc2dd \ud30c\uc774\uc36c \ub3c4\ucee4 \uc774\ubbf8\uc9c0\uc5d0 \uae30\ubc18\ud574 \ucc98\uc74c\ubd80\ud130 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc \ud560 \uac83\uc785\ub2c8\ub2e4. Dockerfile \uc5d0 \uc788\ub294 \uc9c0\uc2dc \uc0ac\ud56d\uc744 \uc21c\uc11c\ub300\ub85c \ub2e4\ub8e8\uace0 \ub3c4\ucee4 \uce90\uc2dc \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc73c\ub85c \uc5ec\ub7ec\ubd84\uc740 \ube4c\ub4dc \uc2dc\uac04\uc744 \ucd5c\uc18c\ud654 \ud560 \uc218 \uc788\uc73c\uba70, \uc774\ub85c\uc368 \uc0dd\uc0b0\uc131\uc744 \ucd5c\ub300\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\uadf8\ub9ac\uace0 \uc9c0\ub8e8\ud568\uc744 \ud53c\ud560 \uc218 \uc788\uc8e0) \ud83d\ude0e \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uc5d0\ub294, FastAPI\ub97c \uc704\ud55c \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ud83e\udd13","title":"\ucee8\ud14c\uc774\ub108\uc758 FastAPI - \ub3c4\ucee4"},{"location":"deployment/docker/#fastapi-","text":"FastAPI \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ubc30\ud3ec\ud560 \ub54c \uc77c\ubc18\uc801\uc778 \uc811\uadfc \ubc29\ubc95\uc740 \ub9ac\ub205\uc2a4 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \ub97c \uc0dd\uc131\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774 \ubc29\ubc95\uc740 \uc8fc\ub85c \ub3c4\ucee4 \ub97c \uc0ac\uc6a9\ud574 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \ud574\ub2f9 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \uba87\uac00\uc9c0 \ubc29\ubc95\uc73c\ub85c \ubc30\ud3ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9ac\ub205\uc2a4 \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud558\ub294 \ub370\uc5d0\ub294 \ubcf4\uc548 , \ubc18\ubcf5 \uac00\ub2a5\uc131 , \ub2e8\uc21c\ud568 \ub4f1\uc758 \uc7a5\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud301 \uc2dc\uac04\uc5d0 \ucad3\uae30\uace0 \uc788\uace0 \uc774\ubbf8 \uc774\ub7f0\uac83\ub4e4\uc744 \uc54c\uace0 \uc788\ub2e4\uba74 Dockerfile \ud83d\udc47 \ub85c \uc810\ud504\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub3c4\ucee4\ud30c\uc77c \ubbf8\ub9ac\ubcf4\uae30 \ud83d\udc40 FROM python:3.9 WORKDIR /code COPY ./requirements.txt /code/requirements.txt RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt COPY ./app /code/app CMD [ \"uvicorn\" , \"app.main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] # If running behind a proxy like Nginx or Traefik add --proxy-headers # CMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\", \"--proxy-headers\"]","title":"\ucee8\ud14c\uc774\ub108\uc758 FastAPI - \ub3c4\ucee4"},{"location":"deployment/docker/#_1","text":"\ucee8\ud14c\uc774\ub108(\uc8fc\ub85c \ub9ac\ub205\uc2a4 \ucee8\ud14c\uc774\ub108)\ub294 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uc758\uc874\uc131\uacfc \ud544\uc694\ud55c \ud30c\uc77c\ub4e4\uc744 \ubaa8\ub450 \ud328\ud0a4\uc9d5\ud558\ub294 \ub9e4\uc6b0 \uac00\ubcbc\uc6b4 \ubc29\ubc95\uc785\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108\ub294 \uac19\uc740 \uc2dc\uc2a4\ud15c\uc5d0 \uc788\ub294 \ub2e4\ub978 \ucee8\ud14c\uc774\ub108(\ub2e4\ub978 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774\ub098 \uc694\uc18c\ub4e4)\uc640 \ub3c5\ub9bd\uc801\uc73c\ub85c \uc720\uc9c0\ub429\ub2c8\ub2e4. \ub9ac\ub205\uc2a4 \ucee8\ud14c\uc774\ub108\ub294 \ud638\uc2a4\ud2b8(\uba38\uc2e0, \uac00\uc0c1 \uba38\uc2e0, \ud074\ub77c\uc6b0\ub4dc \uc11c\ubc84 \ub4f1)\uc640 \uac19\uc740 \ub9ac\ub205\uc2a4 \ucee4\ub110\uc744 \uc0ac\uc6a9\ud574 \uc2e4\ud589\ub429\ub2c8\ub2e4. \uc774\ub9d0\uc740 \ub9ac\ub205\uc2a4 \ucee8\ud14c\uc774\ub108\uac00 (\uc804\uccb4 \uc6b4\uc601\uccb4\uc81c\ub97c \ubaa8\ubc29\ud558\ub294 \ub2e4\ub978 \uac00\uc0c1 \uba38\uc2e0\uacfc \ube44\uad50\ud588\uc744 \ub54c) \ub9e4\uc6b0 \uac00\ubccd\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774 \ubc29\ubc95\uc744 \ud1b5\ud574, \ucee8\ud14c\uc774\ub108\ub294 \uc9c1\uc811 \ud504\ub85c\uc138\uc2a4\ub97c \uc2e4\ud589\ud558\ub294 \uac83\uacfc \ube44\uc2b7\ud55c \uc815\ub3c4\uc758 \uc801\uc740 \uc790\uc6d0 \uc744 \uc18c\ube44\ud569\ub2c8\ub2e4 (\uac00\uc0c1 \uba38\uc2e0\uc740 \ud6e8\uc52c \ub9ce\uc740 \uc790\uc6d0\uc744 \uc18c\ube44\ud560 \uac83\uc785\ub2c8\ub2e4). \ucee8\ud14c\uc774\ub108\ub294 \ub610\ud55c \uadf8\ub4e4\ub9cc\uc758 \ub3c5\ub9bd\ub41c \uc2e4\ud589 \ud504\ub85c\uc138\uc2a4 (\uc77c\ubc18\uc801\uc73c\ub85c \ud558\ub098\uc758 \ud504\ub85c\uc138\uc2a4\ub85c \ucda9\ubd84\ud569\ub2c8\ub2e4), \ud30c\uc77c \uc2dc\uc2a4\ud15c, \uadf8\ub9ac\uace0 \ub124\ud2b8\uc6cc\ud06c\ub97c \uac00\uc9c0\ubbc0\ub85c \ubc30\ud3ec, \ubcf4\uc548, \uac1c\ubc1c \ubc0f \uae30\ud0c0 \uacfc\uc815\uc744 \ub2e8\uc21c\ud654 \ud569\ub2c8\ub2e4.","title":"\ucee8\ud14c\uc774\ub108\ub780"},{"location":"deployment/docker/#_2","text":"\ucee8\ud14c\uc774\ub108 \ub294 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \ub97c \uc2e4\ud589\ud55c \uac83 \uc785\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub780 \ucee8\ud14c\uc774\ub108\uc5d0 \ud544\uc694\ud55c \ubaa8\ub4e0 \ud30c\uc77c, \ud658\uacbd \ubcc0\uc218 \uadf8\ub9ac\uace0 \ub514\ud3f4\ud2b8 \uba85\ub839/\ud504\ub85c\uadf8\ub7a8\uc758 \uc815\uc801 \ubc84\uc804\uc785\ub2c8\ub2e4. \uc5ec\uae30\uc11c \uc815\uc801 \uc774\ub780 \ub9d0\uc740 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \uac00 \uc791\ub3d9\ub418\uac70\ub098 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc73c\uba70, \ub2e8\uc9c0 \ud328\ud0a4\uc9c0 \ud30c\uc77c\uacfc \uba54\ud0c0 \ub370\uc774\ud130\ub77c\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc800\uc7a5\ub41c \uc815\uc801 \ucee8\ud150\uce20\uc778 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \uc640 \ub300\uc870\ub418\uac8c, \ucee8\ud14c\uc774\ub108 \ub780 \ubcf4\ud1b5 \uc2e4\ud589\ub420 \uc218 \uc788\ub294 \uc791\ub3d9 \uc778\uc2a4\ud134\uc2a4\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108 \uac00 ( \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \ub85c \ubd80\ud130) \uc2dc\uc791\ub418\uace0 \uc2e4\ud589\ub418\uba74, \ucee8\ud14c\uc774\ub108\ub294 \ud30c\uc77c\uc774\ub098 \ud658\uacbd \ubcc0\uc218\ub97c \uc0dd\uc131\ud558\uac70\ub098 \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ubcc0\ud654\ub294 \uc624\uc9c1 \ucee8\ud14c\uc774\ub108\uc5d0\uc11c\ub9cc \uc874\uc7ac\ud558\uba70, \uadf8 \uae30\ubc18\uc774 \ub418\ub294 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\uc5d0\ub294 \uc9c0\uc18d\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4 (\uc989 \ub514\uc2a4\ud06c\uc5d0\ub294 \uc800\uc7a5\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4). \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub294 \ud504\ub85c\uadf8\ub7a8 \ud30c\uc77c\uacfc \ucee8\ud150\uce20, \uc989 python \uacfc \uc5b4\ub5a4 \ud30c\uc77c main.py \uc5d0 \ube44\uad50\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 ( \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \uc640 \ub300\ube44\ud574\uc11c) \ucee8\ud14c\uc774\ub108 \ub294 \uc774\ubbf8\uc9c0\uc758 \uc2e4\uc81c \uc2e4\ud589 \uc778\uc2a4\ud134\uc2a4\ub85c \ud504\ub85c\uc138\uc2a4 \uc5d0 \ube44\uad50\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc2e4, \ucee8\ud14c\uc774\ub108\ub294 \ud504\ub85c\uc138\uc2a4 \ub7ec\ub2dd \uc774 \uc788\uc744 \ub54c\ub9cc \uc2e4\ud589\ub429\ub2c8\ub2e4 (\uadf8\ub9ac\uace0 \ubcf4\ud1b5 \ud558\ub098\uc758 \ud504\ub85c\uc138\uc2a4 \uc785\ub2c8\ub2e4). \ucee8\ud14c\uc774\ub108\ub294 \ub0b4\ubd80\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ud504\ub85c\uc138\uc2a4\uac00 \uc5c6\uc73c\uba74 \uc885\ub8cc\ub429\ub2c8\ub2e4.","title":"\ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub780"},{"location":"deployment/docker/#_3","text":"\ub3c4\ucee4\ub294 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \uc640 \ucee8\ud14c\uc774\ub108 \ub97c \uc0dd\uc131\ud558\uace0 \uad00\ub9ac\ud558\ub294\ub370 \uc8fc\uc694 \ub3c4\uad6c \uc911 \ud558\ub098\uac00 \ub418\uc5b4\uc654\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub3c4\ucee4 \ud5c8\ube0c \uc5d0 \ub2e4\uc591\ud55c \ub3c4\uad6c, \ud658\uacbd, \ub370\uc774\ud130\ubca0\uc774\uc2a4, \uadf8\ub9ac\uace0 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ub300\ud574 \ubbf8\ub9ac \ub9cc\ub4e4\uc5b4\uc9c4 \uacf5\uc2dd \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \uac00 \uacf5\uac1c\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uacf5\uc2dd \ud30c\uc774\uc36c \uc774\ubbf8\uc9c0 \uac00 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \ub2e4\ub978 \ub300\uc0c1, \uc608\ub97c \ub4e4\uba74 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc704\ud55c \uc774\ubbf8\uc9c0\ub4e4\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: PostgreSQL MySQL MongoDB Redis \ub4f1 \ubbf8\ub9ac \ub9cc\ub4e4\uc5b4\uc9c4 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \uc0ac\uc6a9\ud558\uba74 \uc11c\ub85c \ub2e4\ub978 \ub3c4\uad6c\ub4e4\uc744 \uacb0\ud569 \ud558\uae30 \uc27d\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0, \uacf5\uc2dd \uc774\ubbf8\uc9c0\ub4e4 \uc744 \uc0ac\uc6a9\ud558\uace0 \ud658\uacbd \ubcc0\uc218\ub97c \ud1b5\ud574 \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \ubc29\ubc95\uc73c\ub85c \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 \ucee8\ud14c\uc774\ub108\uc640 \ub3c4\ucee4\uc5d0 \ub300\ud574 \ubc30\uc6b8 \uc218 \uc788\uc73c\uba70 \ub2e4\uc591\ud55c \ub3c4\uad6c\uc640 \uc694\uc18c\ub4e4\uc5d0 \ub300\ud55c \uc9c0\uc2dd\uc744 \uc7ac\uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc11c\ub85c \ub2e4\ub978 \ub2e4\uc911 \ucee8\ud14c\uc774\ub108 \ub97c \uc0dd\uc131\ud55c \ub2e4\uc74c \uc774\ub4e4\uc744 \uc5f0\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ub370\uc774\ud130\ubca0\uc774\uc2a4, \ud30c\uc774\uc36c \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158, \ub9ac\uc561\ud2b8 \ud504\ub860\ud2b8\uc5d4\ub4dc \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc0ac\uc6a9\ud558\ub294 \uc6f9 \uc11c\ubc84\uc5d0 \ub300\ud55c \ucee8\ud14c\uc774\ub108\ub97c \ub9cc\ub4e4\uc5b4 \uc774\ub4e4\uc758 \ub0b4\ubd80 \ub124\ud2b8\uc6cc\ud06c\ub85c \uac01 \ucee8\ud14c\uc774\ub108\ub97c \uc5f0\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \ucee8\ud14c\uc774\ub108 \uad00\ub9ac \uc2dc\uc2a4\ud15c(\ub3c4\ucee4\ub098 \ucfe0\ubc84\ub124\ud2f0\uc2a4)\uc740 \uc774\ub7ec\ud55c \ub124\ud2b8\uc6cc\ud0b9 \ud2b9\uc131\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0"},{"location":"deployment/docker/#_4","text":"\ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \ub294 \ubcf4\ud1b5 \ucee8\ud14c\uc774\ub108 \ub97c \uc2dc\uc791\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \uba54\ud0c0\ub370\uc774\ud130\uc640 \ub514\ud3f4\ud2b8 \ucee4\ub9e8\ub4dc/\ud504\ub85c\uadf8\ub7a8\uacfc \uadf8 \ud504\ub85c\uadf8\ub7a8\uc5d0 \uc804\ub2ec\ud558\uae30 \uc704\ud55c \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4. \uc774\ub294 \ucee4\ub9e8\ub4dc \ub77c\uc778\uc5d0\uc11c \ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud560 \ub54c \ud544\uc694\ud55c \uac12\ub4e4\uacfc \uc720\uc0ac\ud569\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108 \uac00 \uc2dc\uc791\ub418\uba74, \ud574\ub2f9 \ucee4\ub9e8\ub4dc/\ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\ud589\ub429\ub2c8\ub2e4 (\uadf8\ub7ec\ub098 \ub2e4\ub978 \ucee4\ub9e8\ub4dc/\ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud558\ub3c4\ub85d \uc624\ubc84\ub77c\uc774\ub4dc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4). \ucee8\ud14c\uc774\ub108\ub294 \uba54\uc778 \ud504\ub85c\uc138\uc2a4 (\ucee4\ub9e8\ub4dc \ub610\ub294 \ud504\ub85c\uadf8\ub7a8)\uc774 \uc2e4\ud589\ub418\ub294 \ub3d9\uc548 \uc2e4\ud589\ub429\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ub2e8\uc77c \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\uace0 \uc788\uc9c0\ub9cc, \uba54\uc778 \ud504\ub85c\uc138\uc2a4\uc758 \uc11c\ube0c \ud504\ub85c\uc138\uc2a4\ub97c \uc2dc\uc791\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud558\uba70, \uc774 \ubc29\ubc95\uc73c\ub85c \ud558\ub098\uc758 \ucee8\ud14c\uc774\ub108\uc5d0 \ub2e4\uc911 \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ucd5c\uc18c\ud55c \ud558\ub098\uc758 \uc2e4\ud589\uc911\uc778 \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\uc9c0 \uc54a\uace0\uc11c\ub294 \uc2e4\ud589\uc911\uc778 \ucee8\ud14c\uc774\ub108\ub97c \uac00\uc9c8 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \uba54\uc778 \ud504\ub85c\uc138\uc2a4\uac00 \uc911\ub2e8\ub418\uba74, \ucee8\ud14c\uc774\ub108\ub3c4 \uc911\ub2e8\ub429\ub2c8\ub2e4.","title":"\ucee8\ud14c\uc774\ub108\uc640 \ud504\ub85c\uc138\uc2a4"},{"location":"deployment/docker/#fastapi","text":"\uc774\uc81c \ubb34\uc5b8\uac00\ub97c \ub9cc\ub4e4\uc5b4 \ubd05\uc2dc\ub2e4! \ud83d\ude80 \uacf5\uc2dd \ud30c\uc774\uc36c \uc774\ubbf8\uc9c0\uc5d0 \uae30\ubc18\ud558\uc5ec, FastAPI\ub97c \uc704\ud55c \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \ub97c \ub9e8 \ucc98\uc74c\ubd80\ud130 \uc0dd\uc131\ud558\ub294 \ubc29\ubc95\uc744 \ubcf4\uc774\uaca0\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uc5d0 \ub2e4\uc74c\uacfc \uac19\uc740 \uac83\ub4e4\uc744 \ud558\uac8c \ub429\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74: \ucfe0\ubc84\ub124\ud2f0\uc2a4 \ub610\ub294 \uc720\uc0ac\ud55c \ub3c4\uad6c \uc0ac\uc6a9\ud558\uae30 \ub77c\uc988\ubca0\ub9ac \ud30c\uc774 \ub85c \uc2e4\ud589\ud558\uae30 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \uc2e4\ud589\ud560 \ud074\ub77c\uc6b0\ub4dc \uc11c\ube44\uc2a4 \uc0ac\uc6a9\ud558\uae30 \ub4f1","title":"FastAPI\ub97c \uc704\ud55c \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \ube4c\ub4dc\ud558\uae30"},{"location":"deployment/docker/#_5","text":"\uc77c\ubc18\uc801\uc73c\ub85c\ub294 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \ud2b9\uc815 \ud30c\uc77c\uc744 \uc704\ud55c \ud328\ud0a4\uc9c0 \uc694\uad6c \uc870\uac74 \uc774 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uadf8 \uc694\uad6c \uc870\uac74\uc744 \uc124\uce58 \ud558\ub294 \ubc29\ubc95\uc740 \uc5ec\ub7ec\ubd84\uc774 \uc0ac\uc6a9\ud558\ub294 \ub3c4\uad6c\uc5d0 \ub530\ub77c \ub2e4\ub97c \uac83\uc785\ub2c8\ub2e4. \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \ubc29\ubc95\uc740 \ud328\ud0a4\uc9c0 \uc774\ub984\uacfc \ubc84\uc804\uc774 \uc904 \ubcc4\ub85c \uae30\ub85d\ub41c requirements.txt \ud30c\uc77c\uc744 \ub9cc\ub4dc\ub294 \uac83\uc785\ub2c8\ub2e4. \ubc84\uc804\uc758 \ubc94\uc704\ub97c \uc124\uc815\ud558\uae30 \uc704\ud574\uc11c\ub294 FastAPI \ubc84\uc804\ub4e4\uc5d0 \ub300\ud558\uc5ec \uc5d0 \uc4f0\uc5ec\uc9c4 \uac83\uacfc \uac19\uc740 \uc544\uc774\ub514\uc5b4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, requirements.txt \ud30c\uc77c\uc740 \ub2e4\uc74c\uacfc \uac19\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: fastapi>=0.68.0,<0.69.0 pydantic>=1.8.0,<2.0.0 uvicorn>=0.15.0,<0.16.0 \uadf8\ub9ac\uace0 \uc77c\ubc18\uc801\uc73c\ub85c \ud328\ud0a4\uc9c0 \uc885\uc18d\uc131\uc740 pip \ub85c \uc124\uce58\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4: $ pip install -r requirements.txt ---> 100% Successfully installed fastapi pydantic uvicorn \uc815\ubcf4 \ud328\ud0a4\uc9c0 \uc885\uc18d\uc131\uc744 \uc815\uc758\ud558\uace0 \uc124\uce58\ud558\uae30 \uc704\ud55c \ubc29\ubc95\uacfc \ub3c4\uad6c\ub294 \ub2e4\uc591\ud569\ub2c8\ub2e4. \ub098\uc911\uc5d0 \uc544\ub798 \uc138\uc158\uc5d0\uc11c Poetry\ub97c \uc0ac\uc6a9\ud55c \uc608\uc2dc\ub97c \ubcf4\uc774\uaca0\uc2b5\ub2c8\ub2e4. \ud83d\udc47","title":"\uc694\uad6c \ud328\ud0a4\uc9c0"},{"location":"deployment/docker/#fastapi_1","text":"app \ub514\ub809\ud130\ub9ac\ub97c \uc0dd\uc131\ud558\uace0 \uc774\ub3d9\ud569\ub2c8\ub2e4. \ube48 \ud30c\uc77c __init__.py \uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 main.py \uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q }","title":"FastAPI \ucf54\ub4dc \uc0dd\uc131\ud558\uae30"},{"location":"deployment/docker/#_6","text":"\uc774\uc81c \uac19\uc740 \ud504\ub85c\uc81d\ud2b8 \ub514\ub809\ud130\ub9ac\uc5d0 \ub2e4\uc74c\uacfc \uac19\uc740 \ud30c\uc77c Dockerfile \uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4: # (1) FROM python:3.9 # (2) WORKDIR /code # (3) COPY ./requirements.txt /code/requirements.txt # (4) RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt # (5) COPY ./app /code/app # (6) CMD [ \"uvicorn\" , \"app.main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] \uacf5\uc2dd \ud30c\uc774\uc36c \ubca0\uc774\uc2a4 \uc774\ubbf8\uc9c0\uc5d0\uc11c \uc2dc\uc791\ud569\ub2c8\ub2e4. \ud604\uc7ac \uc6cc\ud0b9 \ub514\ub809\ud130\ub9ac\ub97c /code \ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc5d0 requirements.txt \ud30c\uc77c\uacfc app \ub514\ub809\ud130\ub9ac\ub97c \uc704\uce58\uc2dc\ud0ac \uac83\uc785\ub2c8\ub2e4. \uc694\uad6c \uc870\uac74\uacfc \ud30c\uc77c\uc744 /code \ub514\ub809\ud130\ub9ac\ub85c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \ucc98\uc74c\uc5d0\ub294 \uc624\uc9c1 \uc694\uad6c \uc870\uac74\uc774 \ud544\uc694\ud55c \ud30c\uc77c\ub9cc \ubcf5\uc0ac\ud558\uace0, \uc774\uc678\uc758 \ucf54\ub4dc\ub294 \uadf8\ub300\ub85c \ub461\ub2c8\ub2e4. \uc774 \ud30c\uc77c\uc774 \uc790\uc8fc \ubc14\ub00c\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 , \ub3c4\ucee4\ub294 \ud30c\uc77c\uc744 \ud0d0\uc9c0\ud558\uc5ec \uc774 \ub2e8\uacc4\uc758 \uce90\uc2dc \ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc74c \ub2e8\uacc4\uc5d0\uc11c\ub3c4 \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc694\uad6c \uc870\uac74 \ud30c\uc77c\uc5d0 \uc788\ub294 \ud328\ud0a4\uc9c0 \uc885\uc18d\uc131\uc744 \uc124\uce58\ud569\ub2c8\ub2e4. --no-cache-dir \uc635\uc158\uc740 pip \uc5d0\uac8c \ub2e4\uc6b4\ub85c\ub4dc\ud55c \ud328\ud0a4\uc9c0\ub4e4\uc744 \ub85c\uceec \ud658\uacbd\uc5d0 \uc800\uc7a5\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc804\ub2ec\ud569\ub2c8\ub2e4. \uc774\ub294 \ub9c8\uce58 \uac19\uc740 \ud328\ud0a4\uc9c0\ub97c \uc124\uce58\ud558\uae30 \uc704\ud574 \uc624\uc9c1 pip \ub9cc \ub2e4\uc2dc \uc2e4\ud589\ud558\uba74 \ub420 \uac83 \uac19\uc9c0\ub9cc, \ucee8\ud14c\uc774\ub108\ub85c \uc791\uc5c5\ud558\ub294 \uacbd\uc6b0 \uadf8\ub807\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \ub178\ud2b8 --no-cache-dir \ub294 \uc624\uc9c1 pip \uc640 \uad00\ub828\ub418\uc5b4 \uc788\uc73c\uba70, \ub3c4\ucee4\ub098 \ucee8\ud14c\uc774\ub108\uc640\ub294 \ubb34\uad00\ud569\ub2c8\ub2e4. --upgrade \uc635\uc158\uc740 pip \uc5d0\uac8c \uc124\uce58\ub41c \ud328\ud0a4\uc9c0\ub4e4\uc744 \uc5c5\ub370\uc774\ud2b8\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc774\uc804 \ub2e8\uacc4\uc5d0\uc11c \ud30c\uc77c\uc744 \ubcf5\uc0ac\ud55c \uac83\uc774 \ub3c4\ucee4 \uce90\uc2dc \uc5d0 \uc758\ud574 \ud0d0\uc9c0\ub418\uae30 \ub54c\ubb38\uc5d0, \uc774 \ub2e8\uacc4\uc5d0\uc11c\ub3c4 \uac00\ub2a5\ud55c \ud55c \ub3c4\ucee4 \uce90\uc2dc \ub97c \uc0ac\uc6a9\ud558\uac8c \ub429\ub2c8\ub2e4. \uc774 \ub2e8\uacc4\uc5d0\uc11c \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud558\uba74 \ub9e4\ubc88 \ubaa8\ub4e0 \uc885\uc18d\uc131\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uace0 \uc124\uce58\ud560 \ud544\uc694\uac00 \uc5c6\uc5b4, \uac1c\ubc1c \uacfc\uc815\uc5d0\uc11c \uc774\ubbf8\uc9c0\ub97c \uc9c0\uc18d\uc801\uc73c\ub85c \uc0dd\uc131\ud558\ub294 \ub370\uc5d0 \ub4dc\ub294 \uc2dc\uac04 \uc744 \ub9ce\uc774 \uc808\uc57d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. /code \ub514\ub809\ud130\ub9ac\uc5d0 ./app \ub514\ub809\ud130\ub9ac\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \uc790\uc8fc \ubcc0\uacbd\ub418\ub294 \ubaa8\ub4e0 \ucf54\ub4dc\ub97c \ud3ec\ud568\ud558\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \ub3c4\ucee4 \uce90\uc2dc \ub294 \uc774 \ub2e8\uacc4\ub098 \uc774\ud6c4\uc758 \ub2e8\uacc4\uc5d0\uc11c \uc798 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \ube4c\ub4dc \uc2dc\uac04\uc744 \ucd5c\uc801\ud654\ud558\uae30 \uc704\ud574 Dockerfile \uc758 \uac70\uc758 \ub05d \ubd80\ubd84 \uc5d0 \uc785\ub825\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4. uvicorn \uc11c\ubc84\ub97c \uc2e4\ud589\ud558\uae30 \uc704\ud574 \ucee4\ub9e8\ub4dc \ub97c \uc124\uc815\ud569\ub2c8\ub2e4. CMD \ub294 \ubb38\uc790\uc5f4 \ub9ac\uc2a4\ud2b8\ub97c \uc785\ub825\ubc1b\uace0, \uac01 \ubb38\uc790\uc5f4\uc740 \ucee4\ub9e8\ub4dc \ub77c\uc778\uc758 \uac01 \uc904\uc5d0 \uc785\ub825\ud560 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4. \uc774 \ucee4\ub9e8\ub4dc\ub294 \ud604\uc7ac \uc6cc\ud0b9 \ub514\ub809\ud130\ub9ac \uc5d0\uc11c \uc2e4\ud589\ub418\uba70, \uc774\ub294 \uc704\uc5d0\uc11c WORKDIR /code \ub85c \uc124\uc815\ud55c /code \ub514\ub809\ud130\ub9ac\uc640 \uac19\uc2b5\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc774 /code \uc5d0\uc11c \uc2dc\uc791\ud558\uace0 \uadf8 \uc18d\uc5d0 ./app \ub514\ub809\ud130\ub9ac\uac00 \uc5ec\ub7ec\ubd84\uc758 \ucf54\ub4dc\uc640 \ud568\uaed8 \ub4e4\uc5b4\uc788\uae30 \ub54c\ubb38\uc5d0, Uvicorn \uc740 \uc774\ub97c \ubcf4\uace0 app \uc744 app.main \uc73c\ub85c\ubd80\ud130 \ubd88\ub7ec \uc62c \uac83\uc785\ub2c8\ub2e4. \ud301 \uac01 \ucf54\ub4dc \ub77c\uc778\uc744 \ucf54\ub4dc\uc758 \uc22b\uc790 \ubc84\ube14\uc744 \ud074\ub9ad\ud558\uc5ec \ub9ac\ubdf0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\udc46 \uc774\uc81c \uc5ec\ub7ec\ubd84\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ub514\ub809\ud130\ub9ac \uad6c\uc870\ub97c \uac00\uc9c0\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 requirements.txt","title":"\ub3c4\ucee4\ud30c\uc77c"},{"location":"deployment/docker/#tls","text":"\ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ucee8\ud14c\uc774\ub108\ub97c Nginx \ub610\ub294 Traefik\uacfc \uac19\uc740 TLS \uc885\ub8cc \ud504\ub85d\uc2dc (\ub85c\ub4dc \ubc38\ub7f0\uc11c) \ub4a4\uc5d0\uc11c \uc2e4\ud589\ud558\uace0 \uc788\ub2e4\uba74, --proxy-headers \uc635\uc158\uc744 \ub354\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uc774 \uc635\uc158\uc740 Uvicorn\uc5d0\uac8c \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 HTTPS \ub4f1\uc758 \ub4a4\uc5d0\uc11c \uc2e4\ud589\ub418\uace0 \uc788\uc73c\ubbc0\ub85c \ud504\ub85d\uc2dc\uc5d0\uc11c \uc804\uc1a1\ub41c \ud5e4\ub354\ub97c \uc2e0\ub8b0\ud560 \uc218 \uc788\ub2e4\uace0 \uc54c\ub9bd\ub2c8\ub2e4. CMD [ \"uvicorn\" , \"app.main:app\" , \"--proxy-headers\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ]","title":"TLS \uc885\ub8cc \ud504\ub85d\uc2dc\uc758 \ubc30\ud6c4"},{"location":"deployment/docker/#_7","text":"\uc774 Dockerfile \uc5d0\ub294 \uc911\uc694\ud55c \ud2b8\ub9ad\uc774 \uc788\ub294\ub370, \ucc98\uc74c\uc5d0\ub294 \uc758\uc874\uc131\uc774 \uc788\ub294 \ud30c\uc77c\ub9cc \ubcf5\uc0ac\ud558\uace0, \ub098\uba38\uc9c0 \ucf54\ub4dc\ub294 \uadf8\ub300\ub85c \ub461\ub2c8\ub2e4. \uc65c \uc774\ub7f0 \ubc29\ubc95\uc744 \uc368\uc57c\ud558\ub294\uc9c0 \uc124\uba85\ud558\uaca0\uc2b5\ub2c8\ub2e4. COPY ./requirements.txt /code/requirements.txt \ub3c4\ucee4\uc640 \ub2e4\ub978 \ub3c4\uad6c\ub4e4\uc740 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \uc99d\uac00\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ube4c\ub4dc \ud569\ub2c8\ub2e4. Dockerfile \uc758 \ub9e8 \uc717 \ubd80\ubd84\ubd80\ud130 \uc2dc\uc791\ud574, \ub808\uc774\uc5b4 \uc704\uc5d0 \uc0c8\ub85c\uc6b4 \ub808\uc774\uc5b4\ub97c \ub354\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c, Dockerfile \uc758 \uac01 \uc9c0\uc2dc \uc0ac\ud56d\uc73c\ub85c \ubd80\ud130 \uc0dd\uc131\ub41c \uc5b4\ub5a4 \ud30c\uc77c\uc774\ub4e0 \ub354\ud574\uac11\ub2c8\ub2e4. \ub3c4\ucee4 \uadf8\ub9ac\uace0 \uc774\uc640 \uc720\uc0ac\ud55c \ub3c4\uad6c\ub4e4\uc740 \uc774\ubbf8\uc9c0 \uc0dd\uc131 \uc2dc\uc5d0 \ub0b4\ubd80 \uce90\uc2dc \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub9cc\uc57d \uc5b4\ub5a4 \ud30c\uc77c\uc774 \ub9c8\uc9c0\ub9c9\uc73c\ub85c \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud55c \ub54c\ub85c\ubd80\ud130 \ubc14\ub00c\uc9c0 \uc54a\uc558\ub2e4\uba74, \ud30c\uc77c\uc744 \ub2e4\uc2dc \ubcf5\uc0ac\ud558\uc5ec \uc0c8\ub85c\uc6b4 \ub808\uc774\uc5b4\ub97c \ucc98\uc74c\ubd80\ud130 \uc0dd\uc131\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c, \ub9c8\uc9c0\ub9c9\uc5d0 \uc0dd\uc131\ud588\ub358 \uac19\uc740 \ub808\uc774\uc5b4\ub97c \uc7ac\uc0ac\uc6a9 \ud569\ub2c8\ub2e4. \ub2e8\uc9c0 \ud30c\uc77c \ubcf5\uc0ac\ub97c \uc9c0\uc591\ud558\ub294 \uac83\uc73c\ub85c \ud6a8\uc728\uc774 \ub9ce\uc774 \ud5a5\uc0c1\ub418\ub294 \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc, \uadf8 \ub2e8\uacc4\uc5d0\uc11c \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud588\uae30 \ub54c\ubb38\uc5d0, \ub2e4\uc74c \ub2e8\uacc4\uc5d0\uc11c\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uce90\uc2dc\ub97c \uc0ac\uc6a9 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub2e4\uc74c\uacfc \uac19\uc740 \uc758\uc874\uc131\uc744 \uc124\uce58\ud558\ub294 \uc9c0\uc2dc \uc0ac\ud56d\uc744 \uc704\ud55c \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt \ud328\ud0a4\uc9c0\ub97c \ud3ec\ud568\ud558\ub294 \ud30c\uc77c\uc740 \uc790\uc8fc \ubcc0\uacbd\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4 . \ub530\ub77c\uc11c \ud574\ub2f9 \ud30c\uc77c\ub9cc \ubcf5\uc0ac\ud558\ubbc0\ub85c\uc11c, \ub3c4\ucee4\ub294 \uadf8 \ub2e8\uacc4\uc758 \uce90\uc2dc\ub97c \uc0ac\uc6a9 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8 \ub2e4\uc74c\uc73c\ub85c, \ub3c4\ucee4\ub294 \ub2e4\uc74c \ub2e8\uacc4\uc5d0\uc11c \uc758\uc874\uc131\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uace0 \uc124\uce58\ud558\ub294 \uce90\uc2dc\ub97c \uc0ac\uc6a9 \ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. \ubc14\ub85c \uc774 \uacfc\uc815\uc5d0\uc11c \uc6b0\ub9ac\ub294 \ub9ce\uc740 \uc2dc\uac04\uc744 \uc808\uc57d \ud558\uac8c \ub429\ub2c8\ub2e4. \u2728 ...\uadf8\ub9ac\uace0 \uae30\ub2e4\ub9ac\ub294 \uc9c0\ub8e8\ud568\ub3c4 \ud53c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud83d\ude2a\ud83d\ude06 \ud328\ud0a4\uc9c0 \uc758\uc874\uc131\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uace0 \uc124\uce58\ud558\ub294 \ub370\uc774\ub294 \uc218 \ubd84\uc774 \uac78\ub9b4 \uc218 \uc788\uc9c0\ub9cc , \uce90\uc2dc \ub97c \uc0ac\uc6a9\ud558\uba74 \ucd5c\ub300 \uc218 \ucd08\ub9cc\uc5d0 \ub05d\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uc5ec\ub7ec\ubd84\uc774 \uac1c\ubc1c \uacfc\uc815\uc5d0\uc11c \ucf54\ub4dc\uc758 \ubcc0\uacbd \uc0ac\ud56d\uc774 \ubc18\uc601\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud574 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \uacc4\uc18d\ud574\uc11c \ube4c\ub4dc\ud558\uba74, \uc808\uc57d\ub41c \uc2dc\uac04\uc740 \ucd95\uc801\ub418\uc5b4 \ub354\uc6b1 \ucee4\uc9c8 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc11c Dockerfile \uc758 \uac70\uc758 \ub05d \ubd80\ubd84\uc5d0\uc11c, \ubaa8\ub4e0 \ucf54\ub4dc\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \uc774\uac83\uc774 \uac00\uc7a5 \ube48\ubc88\ud558\uac8c \ubcc0\uacbd \ub418\ub294 \ubd80\ubd84\uc774\uba70, \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 \uc774 \ub2e4\uc74c \ub2e8\uacc4\uc5d0\uc11c\ub294 \uce90\uc2dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uac00\uc7a5 \ub9c8\uc9c0\ub9c9\uc5d0 \ub461\ub2c8\ub2e4. COPY ./app /code/app","title":"\ub3c4\ucee4 \uce90\uc2dc"},{"location":"deployment/docker/#_8","text":"\uc774\uc81c \ubaa8\ub4e0 \ud30c\uc77c\uc774 \uc81c\uc790\ub9ac\uc5d0 \uc788\uc73c\ub2c8, \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud569\ub2c8\ub2e4. (\uc5ec\ub7ec\ubd84\uc758 Dockerfile \uacfc app \ub514\ub809\ud130\ub9ac\uac00 \uc704\uce58\ud55c) \ud504\ub85c\uc81d\ud2b8 \ub514\ub809\ud130\ub9ac\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. FastAPI \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud569\ub2c8\ub2e4: $ docker build -t myimage . ---> 100% \ud301 \ub9e8 \ub05d\uc5d0 \uc788\ub294 . \uc5d0 \uc8fc\ubaa9\ud569\uc2dc\ub2e4. \uc774\ub294 ./ \uc640 \ub3d9\ub4f1\ud558\uba70, \ub3c4\ucee4\uc5d0\uac8c \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud558\uae30 \uc704\ud55c \ub514\ub809\ud130\ub9ac\ub97c \uc54c\ub824\uc90d\ub2c8\ub2e4. \uc774 \uacbd\uc6b0\uc5d0\ub294 \ud604\uc7ac \ub514\ub809\ud130\ub9ac( . )\uc640 \uac19\uc2b5\ub2c8\ub2e4.","title":"\ub3c4\ucee4 \uc774\ubbf8\uc9c0 \uc0dd\uc131\ud558\uae30"},{"location":"deployment/docker/#_9","text":"\uc5ec\ub7ec\ubd84\uc758 \uc774\ubbf8\uc9c0\uc5d0 \uae30\ubc18\ud558\uc5ec \ucee8\ud14c\uc774\ub108\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4: $ docker run -d --name mycontainer -p 80 :80 myimage","title":"\ub3c4\ucee4 \ucee8\ud14c\uc774\ub108 \uc2dc\uc791\ud558\uae30"},{"location":"deployment/docker/#_10","text":"\uc5ec\ub7ec\ubd84\uc758 \ub3c4\ucee4 \ucee8\ud14c\uc774\ub108 URL\uc5d0\uc11c \uc2e4\ud589 \uc0ac\ud56d\uc744 \uccb4\ud06c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4: http://192.168.99.100/items/5?q=somequery \ub610\ub294 http://127.0.0.1/items/5?q=somequery (\ub610\ub294 \ub3d9\uc77c\ud558\uac8c, \uc5ec\ub7ec\ubd84\uc758 \ub3c4\ucee4 \ud638\uc2a4\ud2b8\ub97c \uc774\uc6a9\ud574\uc11c \uccb4\ud06c\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4). \uc544\ub798\uc640 \ube44\uc2b7\ud55c \uac83\uc744 \ubcf4\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4: { \"item_id\" : 5 , \"q\" : \"somequery\" }","title":"\uccb4\ud06c\ud558\uae30"},{"location":"deployment/docker/#api","text":"\uc774\uc81c \uc5ec\ub7ec\ubd84\uc740 http://192.168.99.100/docs \ub610\ub294 http://127.0.0.1/docs \ub85c \uc774\ub3d9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4(\ub610\ub294, \uc5ec\ub7ec\ubd84\uc758 \ub3c4\ucee4 \ud638\uc2a4\ud2b8\ub97c \uc774\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4). \uc5ec\ub7ec\ubd84\uc740 \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub41c \uc778\ud130\ub799\ud2f0\ube0c API( Swagger UI \uc5d0\uc11c \uc81c\uacf5\ub41c)\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4:","title":"\uc778\ud130\ub799\ud2f0\ube0c API \ubb38\uc11c"},{"location":"deployment/docker/#api_1","text":"\ub610\ud55c \uc5ec\ub7ec\ubd84\uc740 http://192.168.99.100/redoc \ub610\ub294 http://127.0.0.1/redoc \uc73c\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4(\ub610\ub294, \uc5ec\ub7ec\ubd84\uc758 \ub3c4\ucee4 \ud638\uc2a4\ud2b8\ub97c \uc774\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4). \uc5ec\ub7ec\ubd84\uc740 \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub41c \ub300\uc548 \ubb38\uc11c( ReDoc \uc5d0\uc11c \uc81c\uacf5\ub41c)\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4:","title":"\ub300\uc548 API \ubb38\uc11c"},{"location":"deployment/docker/#fastapi_2","text":"\ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc758 FastAPI\uac00 \ud558\ub098\uc758 \ud30c\uc77c\uc774\ub77c\uba74, \uc608\ub97c \ub4e4\uc5b4 ./app \ub514\ub809\ud130\ub9ac \uc5c6\uc774 main.py \ud30c\uc77c\ub9cc\uc73c\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4\uba74, \ud30c\uc77c \uad6c\uc870\ub294 \ub2e4\uc74c\uacfc \uc720\uc0ac\ud560 \uac83\uc785\ub2c8\ub2e4: . \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 main.py \u2514\u2500\u2500 requirements.txt \uadf8\ub7ec\uba74 \uc5ec\ub7ec\ubd84\ub4e4\uc740 Dockerfile \ub0b4\uc5d0 \uc788\ub294 \ud30c\uc77c\uc744 \ubcf5\uc0ac\ud558\uae30 \uc704\ud574 \uadf8\uc800 \uc0c1\uc751\ud558\ub294 \uacbd\ub85c\ub97c \ubc14\uafb8\uae30\ub9cc \ud558\uba74 \ub429\ub2c8\ub2e4: FROM python:3.9 WORKDIR /code COPY ./requirements.txt /code/requirements.txt RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt # (1) COPY ./main.py /code/ # (2) CMD [ \"uvicorn\" , \"main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] main.py \ud30c\uc77c\uc744 /code \ub514\ub809\ud130\ub9ac\ub85c \uace7\ubc14\ub85c \ubcf5\uc0ac\ud569\ub2c8\ub2e4( ./app \ub514\ub809\ud130\ub9ac\ub294 \uace0\ub824\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4). Uvicorn\uc744 \uc2e4\ud589\ud574 app \uac1d\uccb4\ub97c ( app.main \ub300\uc2e0) main \uc73c\ub85c \ubd80\ud130 \ubd88\ub7ec\uc624\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uadf8 \ub2e4\uc74c Uvicorn \ucee4\ub9e8\ub4dc\ub97c \uc870\uc815\ud574\uc11c FastAPI \uac1d\uccb4\ub97c \ubd88\ub7ec\uc624\ub294\ub370 app.main \ub300\uc2e0\uc5d0 \uc0c8\ub85c\uc6b4 \ubaa8\ub4c8 main \uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4.","title":"\ub2e8\uc77c \ud30c\uc77c FastAPI\ub85c \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \uc0dd\uc131\ud558\uae30"},{"location":"deployment/docker/#_11","text":"\uc774\uc81c \ucee8\ud14c\uc774\ub108\uc758 \uce21\uba74\uc5d0\uc11c \ubc30\ud3ec \uac1c\ub150 \uc5d0\uc11c \ub2e4\ub8e8\uc5c8\ub358 \uac83\uacfc \uac19\uc740 \ubc30\ud3ec \uac1c\ub150\uc5d0 \ub300\ud574 \uc774\uc57c\uae30\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108\ub294 \uc8fc\ub85c \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ube4c\ub4dc\ud558\uace0 \ubc30\ud3ec\ud558\uae30 \uc704\ud55c \uacfc\uc815\uc744 \ub2e8\uc21c\ud654\ud558\ub294 \ub3c4\uad6c\uc774\uc9c0\ub9cc, \ubc30\ud3ec \uac1c\ub150 \uc5d0 \ub300\ud55c \ud2b9\uc815\ud55c \uc811\uadfc\ubc95\uc744 \uac15\uc694\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uac00\ub2a5\ud55c \ubc30\ud3ec \uc804\ub7b5\uc5d0\ub294 \uc5ec\ub7ec\uac00\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc88b\uc740 \uc18c\uc2dd \uc740 \uc11c\ub85c \ub2e4\ub978 \uc804\ub7b5\ub4e4\uc744 \ud3ec\uad04\ud558\ub294 \ubc30\ud3ec \uac1c\ub150\uc774 \uc788\ub2e4\ub294 \uc810\uc785\ub2c8\ub2e4. \ud83c\udf89 \ucee8\ud14c\uc774\ub108 \uce21\uba74\uc5d0\uc11c \ubc30\ud3ec \uac1c\ub150 \uc744 \ub9ac\ubdf0\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4: HTTPS \uad6c\ub3d9\ud558\uae30 \uc7ac\uc2dc\uc791 \ubcf5\uc81c (\uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uc138\uc2a4 \uac1c\uc218) \uba54\ubaa8\ub9ac \uc2dc\uc791\ud558\uae30 \uc804 \ub2e8\uacc4\ub4e4","title":"\ubc30\ud3ec \uac1c\ub150"},{"location":"deployment/docker/#https","text":"\ub9cc\uc57d \uc6b0\ub9ac\uac00 FastAPI \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc704\ud55c \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \uc5d0\ub9cc \uc9d1\uc911\ud55c\ub2e4\uba74 (\uadf8\ub9ac\uace0 \ub098\uc911\uc5d0 \uc2e4\ud589\ub420 \ucee8\ud14c\uc774\ub108 \uc5d0), HTTPS\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ub2e4\ub978 \ub3c4\uad6c\uc5d0 \uc758\ud574 \uc678\ubd80\uc801\uc73c\ub85c \ub2e4\ub8e8\uc5b4\uc9c8 \uac83 \uc785\ub2c8\ub2e4. HTTPS \uc640 \uc778\uc99d\uc11c \uc758 \uc790\ub3d9 \ucde8\ub4dd\uc744 \ub2e4\ub8e8\ub294 \uac83\uc740 \ub2e4\ub978 \ucee8\ud14c\uc774\ub108\uac00 \ub420 \uc218 \uc788\ub294\ub370, \uc608\ub97c \ub4e4\uc5b4 Traefik \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ud301 Traefik\uc740 \ub3c4\ucee4, \ucfe0\ubc84\ub124\ud2f0\uc2a4, \uadf8\ub9ac\uace0 \ub2e4\ub978 \ub3c4\uad6c\uc640 \ud1b5\ud569\ub418\uc5b4 \uc788\uc5b4 \uc5ec\ub7ec\ubd84\uc758 \ucee8\ud14c\uc774\ub108\ub97c \ud3ec\ud568\ud558\ub294 HTTPS\ub97c \uc14b\uc5c5\ud558\uace0 \uc124\uc815\ud558\ub294 \uac83\uc774 \ub9e4\uc6b0 \uc27d\uc2b5\ub2c8\ub2e4. \ub300\uc548\uc801\uc73c\ub85c, HTTPS\ub294 \ud074\ub77c\uc6b0\ub4dc \uc81c\uacf5\uc790\uc5d0 \uc758\ud574 \uc11c\ube44\uc2a4\uc758 \uc77c\ud658\uc73c\ub85c \ub2e4\ub8e8\uc5b4\uc9c8 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4 (\uc774\ub54c\ub3c4 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc740 \uc5ec\uc804\ud788 \ucee8\ud14c\uc774\ub108\uc5d0\uc11c \uc2e4\ud589\ub420 \uac83\uc785\ub2c8\ub2e4).","title":"HTTPS"},{"location":"deployment/docker/#_12","text":"\uc5ec\ub7ec\ubd84\uc758 \ucee8\ud14c\uc774\ub108\ub97c \uc2dc\uc791\ud558\uace0 \uc2e4\ud589\ud558\ub294 \ub370\uc5d0 \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \ub3c4\uad6c\ub294 \ub530\ub85c \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \ub3c4\ucee4 \uc790\uccb4\uc77c \uc218\ub3c4 \uc788\uace0, \ub3c4\ucee4 \ucef4\ud3ec\uc988 , \ucfe0\ubc84\ub124\ud2f0\uc2a4 , \ud074\ub77c\uc6b0\ub4dc \uc11c\ube44\uc2a4 \ub4f1\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84 (\ub610\ub294 \uc804\uccb4) \uacbd\uc6b0\uc5d0, \ucee8\ud14c\uc774\ub108\ub97c \uad6c\ub3d9\ud558\uac70\ub098 \uace0\uc7a5\uc2dc\uc5d0 \uc7ac\uc2dc\uc791\ud558\ub3c4\ub85d \ud558\ub294 \uac04\ub2e8\ud55c \uc635\uc158\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub3c4\ucee4\uc5d0\uc11c\ub294, \ucee4\ub9e8\ub4dc \ub77c\uc778 \uc635\uc158 --restart \uc785\ub2c8\ub2e4. \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0\uc11c\ub294, \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uad6c\ub3d9\ud558\uace0 \uc7ac\uc2dc\uc791\ud558\ub294 \uac83\uc774 \ub9e4\uc6b0 \ubc88\uac70\ub86d\uace0 \uc5b4\ub824\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 \uc774\ub7f0 \uae30\ub2a5\uc740 \uae30\ubcf8\uc801\uc73c\ub85c \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \u2728","title":"\uad6c\ub3d9\uacfc \uc7ac\uc2dc\uc791"},{"location":"deployment/docker/#-","text":"\ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ucfe0\ubc84\ub124\ud2f0\uc2a4 \uc640 \uba38\uc2e0 \ud074\ub7ec\uc2a4\ud130 , \ub3c4\ucee4 \uc2a4\uc650 \ubaa8\ub4dc, \ub178\ub9c8\ub4dc, \ub610\ub294 \ub2e4\ub978 \uc5ec\ub7ec \uba38\uc2e0 \uc704\uc5d0 \ubd84\uc0b0 \ucee8\ud14c\uc774\ub108\ub97c \uad00\ub9ac\ud558\ub294 \ubcf5\uc7a1\ud55c \uc2dc\uc2a4\ud15c\uc744 \ub2e4\ub8e8\uace0 \uc788\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc740 \uac01 \ucee8\ud14c\uc774\ub108\uc5d0\uc11c (\uc6cc\ucee4\uc640 \ud568\uaed8 \uc0ac\uc6a9\ud558\ub294 Gunicorn \uac19\uc740) \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800 \ub300\uc2e0 \ud074\ub7ec\uc2a4\ud130 \ub808\ubca8 \uc5d0\uc11c \ubcf5\uc81c\ub97c \ub2e4\ub8e8 \uace0 \uc2f6\uc744 \uac83\uc785\ub2c8\ub2e4. \ucfe0\ubc84\ub124\ud2f0\uc2a4\uc640 \uac19\uc740 \ubd84\uc0b0 \ucee8\ud14c\uc774\ub108 \uad00\ub9ac \uc2dc\uc2a4\ud15c \uc911 \uc77c\ubd80\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ub4e4\uc5b4\uc624\ub294 \uc694\uccad\uc5d0 \ub300\ud55c \ub85c\ub4dc \ubc38\ub7f0\uc2f1 \uc744 \uc9c0\uc6d0\ud558\uba74\uc11c \ucee8\ud14c\uc774\ub108 \ubcf5\uc81c \ub97c \ub2e4\ub8e8\ub294 \ud1b5\ud569\ub41c \ubc29\ubc95\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub450 \ud074\ub7ec\uc2a4\ud130 \ub808\ubca8 \uc5d0\uc11c \ub9d0\uc774\uc8e0. \uc774\ub7f0 \uacbd\uc6b0\uc5d0, \uc5ec\ub7ec\ubd84\uc740 \uc704\uc5d0\uc11c \ubb18\uc0ac\ub41c \uac83 \ucc98\ub7fc \ucc98\uc74c\ubd80\ud130 \ub3c4\ucee4 \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud574\uc11c, \uc758\uc874\uc131\uc744 \uc124\uce58\ud558\uace0, Uvicorn \uc6cc\ucee4\ub97c \uad00\ub9ac\ud558\ub294 Gunicorn \ub300\uc2e0 \ub2e8\uc77c Uvicorn \ud504\ub85c\uc138\uc2a4 \ub97c \uc2e4\ud589\ud558\uace0 \uc2f6\uc744 \uac83\uc785\ub2c8\ub2e4.","title":"\ubcf5\uc81c - \ud504\ub85c\uc138\uc2a4 \uac1c\uc218"},{"location":"deployment/docker/#_13","text":"\ucee8\ud14c\uc774\ub108\ub85c \uc791\uc5c5\ud560 \ub54c, \uc5ec\ub7ec\ubd84\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uba54\uc778 \ud3ec\ud2b8\uc758 \uc0c1\ud669\uc744 \uac10\uc9c0\ud558\ub294 \uc694\uc18c\ub97c \uac00\uc9c0\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uc774\ub294 HTTPS \ub97c \ub2e4\ub8e8\ub294 TLS \uc885\ub8cc \ud504\ub85d\uc2dc \uc640 \uac19\uc740 \ub2e4\ub978 \ucee8\ud14c\uc774\ub108\uc77c \uc218\ub3c4 \uc788\uace0, \uc720\uc0ac\ud55c \ub2e4\ub978 \ub3c4\uad6c\uc77c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc694\uc18c\uac00 \uc694\uccad\ub4e4\uc758 \ub85c\ub4dc \ub97c \uc77d\uc5b4\ub4e4\uc774\uace0 \uac01 \uc6cc\ucee4\uc5d0\uac8c (\ubc14\ub77c\uac74\ub300) \uade0\ud615\uc801\uc73c\ub85c \ubd84\ubc30\ud55c\ub2e4\uba74, \uc774 \uc694\uc18c\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ub85c\ub4dc \ubc38\ub7f0\uc11c \ub77c\uace0 \ubd88\ub9bd\ub2c8\ub2e4. \ud301 HTTPS\ub97c \uc704\ud574 \uc0ac\uc6a9\ub41c TLS \uc885\ub8cc \ud504\ub85d\uc2dc \uc694\uc18c \ub610\ud55c \ub85c\ub4dc \ubc38\ub7f0\uc11c \uac00 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \ucee8\ud14c\uc774\ub108\ub85c \uc791\uc5c5\ud560 \ub54c, \ucee8\ud14c\uc774\ub108\ub97c \uc2dc\uc791\ud558\uace0 \uad00\ub9ac\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud55c \uac83\uacfc \ub3d9\uc77c\ud55c \uc2dc\uc2a4\ud15c\uc740 \uc774\ubbf8 \ud574\ub2f9 \ub85c\ub4dc \ubc38\ub7f0\uc11c \ub85c \ubd80\ud130 \uc5ec\ub7ec\ubd84\uc758 \uc571\uc5d0 \ud574\ub2f9\ud558\ub294 \ucee8\ud14c\uc774\ub108\ub85c \ub124\ud2b8\uc6cc\ud06c \ud1b5\uc2e0 (\uc608\ub97c \ub4e4\uc5b4, HTTP \uc694\uccad)\uc744 \uc804\uc1a1\ud558\ub294 \ub0b4\ubd80\uc801\uc778 \ub3c4\uad6c\ub97c \uac00\uc9c0\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4 (\uc5ec\uae30\uc11c\ub3c4 \ub85c\ub4dc \ubc38\ub7f0\uc11c\ub294 TLS \uc885\ub8cc \ud504\ub85d\uc2dc \uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4).","title":"\ub85c\ub4dc \ubc38\ub7f0\uc11c"},{"location":"deployment/docker/#-_1","text":"\ucfe0\ubc84\ub124\ud2f0\uc2a4 \ub098 \ub610\ub294 \ub2e4\ub978 \ubd84\uc0b0 \ucee8\ud14c\uc774\ub108 \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc73c\ub85c \uc791\uc5c5\ud560 \ub54c, \uc2dc\uc2a4\ud15c \ub0b4\ubd80\uc758 \ub124\ud2b8\uc6cc\ud0b9 \uba54\ucee4\ub2c8\uc998\uc744 \uc774\uc6a9\ud568\uc73c\ub85c\uc368 \uba54\uc778 \ud3ec\ud2b8 \ub97c \uac10\uc9c0\ud558\uace0 \uc788\ub294 \ub2e8\uc77c \ub85c\ub4dc \ubc38\ub7f0\uc11c \ub294 \uc5ec\ub7ec\ubd84\uc758 \uc571\uc5d0\uc11c \uc2e4\ud589\ub418\uace0 \uc788\ub294 \uc5ec\ub7ec\uac1c\uc758 \ucee8\ud14c\uc774\ub108 \uc5d0 \ud1b5\uc2e0(\uc694\uccad\ub4e4)\uc744 \uc804\uc1a1\ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc758 \uc571\uc5d0\uc11c \uc2e4\ud589\ub418\uace0 \uc788\ub294 \uac01\uac01\uc758 \ucee8\ud14c\uc774\ub108\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ud558\ub098\uc758 \ud504\ub85c\uc138\uc2a4 \ub9cc \uac00\uc9c8 \uac83\uc785\ub2c8\ub2e4 (\uc608\ub97c \ub4e4\uc5b4, FastAPI \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ud558\ub098\uc758 Uvicorn \ud504\ub85c\uc138\uc2a4\ucc98\ub7fc). \uc774 \ucee8\ud14c\uc774\ub108\ub4e4\uc740 \ubaa8\ub450 \uac19\uc740 \uac83\uc744 \uc2e4\ud589\ud558\ub294 \uc810\uc5d0\uc11c \ub3d9\uc77c\ud55c \ucee8\ud14c\uc774\ub108 \uc774\uc9c0\ub9cc, \ud504\ub85c\uc138\uc2a4, \uba54\ubaa8\ub9ac \ub4f1\uc740 \uacf5\uc720\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774 \ubc29\uc2dd\uc73c\ub85c \uc5ec\ub7ec\ubd84\uc740 CPU\uc758 \uc11c\ub85c \ub2e4\ub978 \ucf54\uc5b4\ub4e4 \ub610\ub294 \uc11c\ub85c \ub2e4\ub978 \uba38\uc2e0\ub4e4 \uc744 \ubcd1\ub82c\ud654 \ud558\ub294 \uc774\uc810\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \ub85c\ub4dc \ubc38\ub7f0\uc11c \uac00 \uc788\ub294 \ubd84\uc0b0 \ucee8\ud14c\uc774\ub108 \uc2dc\uc2a4\ud15c\uc740 \uc5ec\ub7ec\ubd84\uc758 \uc571\uc5d0 \uc788\ub294 \ucee8\ud14c\uc774\ub108 \uac01\uac01\uc5d0 \ucc28\ub840\ub300\ub85c \uc694\uccad\uc744 \ubd84\uc0b0 \uc2dc\ud0ac \uac83 \uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \uac01 \uc694\uccad\uc740 \uc5ec\ub7ec\ubd84\uc758 \uc571\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \uc5ec\ub7ec\uac1c\uc758 \ubcf5\uc81c\ub41c \ucee8\ud14c\uc774\ub108\ub4e4 \uc911 \ud558\ub098\uc5d0 \uc758\ud574 \ub2e4\ub8e8\uc5b4\uc9c8 \uac83 \uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc77c\ubc18\uc801\uc73c\ub85c \ub85c\ub4dc \ubc38\ub7f0\uc11c \ub294 \uc5ec\ub7ec\ubd84\uc758 \ud074\ub7ec\uc2a4\ud130\uc5d0 \uc788\ub294 \ub2e4\ub978 \uc571\uc73c\ub85c \uac00\ub294 \uc694\uccad\ub4e4\ub3c4 \ub2e4\ub8f0 \uc218 \uc788\uc73c\uba70 (\uc608\ub97c \ub4e4\uc5b4, \ub2e4\ub978 \ub3c4\uba54\uc778\uc73c\ub85c \uac00\uac70\ub098 \ub2e4\ub978 URL \uacbd\ub85c \uc811\ub450\uc0ac\ub97c \uac00\uc9c0\ub294 \uacbd\uc6b0), \uc774 \ud1b5\uc2e0\ub4e4\uc744 \ud074\ub7ec\uc2a4\ud130\uc5d0 \uc788\ub294 \ubc14\ub85c \uadf8 \ub2e4\ub978 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc73c\ub85c \uc81c\ub300\ub85c \uc804\uc1a1\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ud558\ub098\uc758 \ub85c\ub4dc \ubc38\ub7f0\uc11c - \ub2e4\uc911 \uc6cc\ucee4 \ucee8\ud14c\uc774\ub108"},{"location":"deployment/docker/#_14","text":"\uc774 \uc2dc\ub098\ub9ac\uc624\uc758 \uacbd\uc6b0, \uc5ec\ub7ec\ubd84\uc740 \uc774\ubbf8 \ud074\ub7ec\uc2a4\ud130 \ub808\ubca8\uc5d0\uc11c \ubcf5\uc81c\ub97c \ub2e4\ub8e8\uace0 \uc788\uc744 \uac83\uc774\ubbc0\ub85c \ucee8\ud14c\uc774\ub108 \ub2f9 \ub2e8\uc77c (Uvicorn) \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\uace0\uc790 \ud560 \uac83\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc5ec\ub7ec\ubd84\uc740 Gunicorn \uc774\ub098 Uvicorn \uc6cc\ucee4, \ub610\ub294 Uvicorn \uc6cc\ucee4\ub97c \uc0ac\uc6a9\ud558\ub294 Uvicorn \ub9e4\ub2c8\uc800\uc640 \uac19\uc740 \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800\ub97c \uac00\uc9c0\uace0 \uc2f6\uc5b4\ud558\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \ucee8\ud14c\uc774\ub108 \ub2f9 \ub2e8\uc77c Uvicorn \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\uace0 \uc2f6\uc5b4\ud560 \uac83\uc785\ub2c8\ub2e4 (\uadf8\ub7ec\ub098 \uc544\ub9c8\ub3c4 \ub2e4\uc911 \ucee8\ud14c\uc774\ub108\ub97c \uac00\uc9c8 \uac83\uc785\ub2c8\ub2e4). \uc774\ubbf8 \uc5ec\ub7ec\ubd84\uc774 \ud074\ub7ec\uc2a4\ud130 \uc2dc\uc2a4\ud15c\uc744 \uad00\ub9ac\ud558\uace0 \uc788\uc73c\ubbc0\ub85c, (Uvicorn \uc6cc\ucee4\ub97c \uad00\ub9ac\ud558\ub294 Gunicorn \uc774\ub098 Uvicorn \ucc98\ub7fc) \ucee8\ud14c\uc774\ub108 \ub0b4\uc5d0 \ub2e4\ub978 \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800\ub97c \uac00\uc9c0\ub294 \uac83\uc740 \ubd88\ud544\uc694\ud55c \ubcf5\uc7a1\uc131 \ub9cc \ub354\ud558\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4.","title":"\ub2e8\uc77c \ud504\ub85c\uc138\uc2a4\ub97c \uac00\uc9c0\ub294 \ucee8\ud14c\uc774\ub108"},{"location":"deployment/docker/#_15","text":"\ub2f9\uc5f0\ud55c \ub9d0\uc774\uc9c0\ub9cc, \uc5ec\ub7ec\ubd84\uc774 \ub0b4\ubd80\uc801\uc73c\ub85c Uvicorn \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\ub4e4 \ub97c \uc2dc\uc791\ud558\ub294 Gunicorn \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800 \ub97c \uac00\uc9c0\ub294 \ub2e8\uc77c \ucee8\ud14c\uc774\ub108\ub97c \uc6d0\ud558\ub294 \ud2b9\uc218\ud55c \uacbd\uc6b0 \ub3c4 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7f0 \uacbd\uc6b0\uc5d0, \uc5ec\ub7ec\ubd84\ub4e4\uc740 Gunicorn \uc744 \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800\ub85c \ud3ec\ud568\ud558\ub294 \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800\ub294 \ub2e4\uc911 Uvicorn \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\ub4e4 \uc744 \uc2e4\ud589\ud558\uba70, \ub514\ud3f4\ud2b8 \uc138\ud305\uc73c\ub85c \ud604\uc7ac CPU \ucf54\uc5b4\uc5d0 \uae30\ubc18\ud558\uc5ec \uc790\ub3d9\uc73c\ub85c \uc6cc\ucee4 \uac1c\uc218\ub97c \uc870\uc815\ud569\ub2c8\ub2e4. \uc774 \uc0ac\ud56d\uc5d0 \ub300\ud574\uc11c\ub294 \uc544\ub798\uc758 Gunicorn\uacfc \ud568\uaed8\ud558\ub294 \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0 - Uvicorn \uc5d0\uc11c \ub354 \ub2e4\ub8e8\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\uc5d0 \ud574\ub2f9\ud558\ub294 \uba87\uac00\uc9c0 \uc608\uc2dc\uac00 \uc788\uc2b5\ub2c8\ub2e4:","title":"\ub2e4\uc911 \ud504\ub85c\uc138\uc2a4\ub97c \uac00\uc9c0\ub294 \ucee8\ud14c\uc774\ub108\uc640 \ud2b9\uc218\ud55c \uacbd\uc6b0\ub4e4"},{"location":"deployment/docker/#_16","text":"\ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc758 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \ucda9\ubd84\ud788 \ub2e8\uc21c \ud574\uc11c (\uc801\uc5b4\ub3c4 \uc544\uc9c1\uc740) \ud504\ub85c\uc138\uc2a4 \uac1c\uc218\ub97c \ud30c\uc778-\ud2a0 \ud560 \ud544\uc694\uac00 \uc5c6\uac70\ub098 \ud074\ub7ec\uc2a4\ud130\uac00 \uc544\ub2cc \ub2e8\uc77c \uc11c\ubc84 \uc5d0\uc11c \uc2e4\ud589\ud558\uace0 \uc788\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc740 \ucee8\ud14c\uc774\ub108 \ub0b4\uc5d0 \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800\ub97c \uc0ac\uc6a9\ud558\uac70\ub098 (\uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0\uc5d0\uc11c) \uc790\ub3d9\uc73c\ub85c \uc124\uc815\ub418\ub294 \ub514\ud3f4\ud2b8 \uac12\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ub2e8\uc21c\ud55c \uc571"},{"location":"deployment/docker/#_17","text":"\uc5ec\ub7ec\ubd84\uc740 \ub3c4\ucee4 \ucef4\ud3ec\uc988 \ub85c (\ud074\ub7ec\uc2a4\ud130\uac00 \uc544\ub2cc) \ub2e8\uc77c \uc11c\ubc84\ub85c \ubc30\ud3ec\ud560 \uc218 \uc788\uc73c\uba70, \uc774 \uacbd\uc6b0\uc5d0 \uacf5\uc720\ub41c \ub124\ud2b8\uc6cc\ud06c\uc640 \ub85c\ub4dc \ubc38\ub7f0\uc2f1 \uc744 \ud3ec\ud568\ud558\ub294 (\ub3c4\ucee4 \ucef4\ud3ec\uc988\ub85c) \ucee8\ud14c\uc774\ub108\uc758 \ubcf5\uc81c\ub97c \uad00\ub9ac\ud558\ub294 \ub2e8\uc21c\ud55c \ubc29\ubc95\uc774 \uc5c6\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc5ec\ub7ec\ubd84\uc740 \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800 \uc640 \ud568\uaed8 \ub0b4\ubd80\uc5d0 \uba87\uac1c\uc758 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\ub4e4 \uc744 \uc2dc\uc791\ud558\ub294 \ub2e8\uc77c \ucee8\ud14c\uc774\ub108 \ub97c \ud544\uc694\ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ub3c4\ucee4 \uad6c\uc131"},{"location":"deployment/docker/#prometheus","text":"\uc5ec\ub7ec\ubd84\uc740 \ub2e8\uc77c \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\ub294 \ub2e4\uc911 \ucee8\ud14c\uc774\ub108 \ub300\uc2e0 \ub2e4\uc911 \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\ub294 \ub2e8\uc77c \ucee8\ud14c\uc774\ub108 \ub97c \ucc44\ud0dd\ud558\ub294 \ub2e4\ub978 \uc774\uc720 \uac00 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 (\uc5ec\ub7ec\ubd84\uc758 \uc7a5\uce58 \uc124\uc815\uc5d0 \ub530\ub77c) Prometheus \uc775\uc2a4\ud3ec\ud130\uc640 \uac19\uc774 \uac19\uc740 \ucee8\ud14c\uc774\ub108\uc5d0 \ub4e4\uc5b4\uc624\ub294 \uac01 \uc694\uccad\uc5d0 \ub300\ud574 \uc811\uadfc\uad8c\ud55c\uc744 \uac00\uc9c0\ub294 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uacbd\uc6b0\uc5d0 \uc5ec\ub7ec\ubd84\uc774 \uc5ec\ub7ec\uac1c\uc758 \ucee8\ud14c\uc774\ub108\ub4e4 \uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, Prometheus\uac00 \uba54\ud2b8\ub9ad\uc744 \uc77d\uc5b4 \ub4e4\uc77c \ub54c , \ub514\ud3f4\ud2b8\ub85c \ub9e4\ubc88 \ud558\ub098\uc758 \ucee8\ud14c\uc774\ub108 (\ud2b9\uc815 \ub9ac\ud018\uc2a4\ud2b8\ub97c \uad00\ub9ac\ud558\ub294 \ubc14\ub85c \uadf8 \ucee8\ud14c\uc774\ub108)\ub85c \ubd80\ud130 \uc77d\uc5b4\ub4e4\uc77c \uac83\uc785\ub2c8\ub2e4. \uc774\ub294 \ubaa8\ub4e0 \ubcf5\uc81c\ub41c \ucee8\ud14c\uc774\ub108\uc5d0 \ub300\ud574 \ucd95\uc801\ub41c \uba54\ud2b8\ub9ad\ub4e4 \uc744 \uc77d\uc5b4\ub4e4\uc774\ub294 \uac83\uacfc \ub300\ube44\ub429\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc774 \uacbd\uc6b0\uc5d0\ub294 \ub2e4\uc911 \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\ub294 \ud558\ub098\uc758 \ucee8\ud14c\uc774\ub108 \ub97c \ub450\uc5b4\uc11c \uac19\uc740 \ucee8\ud14c\uc774\ub108\uc5d0\uc11c \ubaa8\ub4e0 \ub0b4\ubd80 \ud504\ub85c\uc138\uc2a4\uc5d0 \ub300\ud55c Prometheus \uba54\ud2b8\ub9ad\uc744 \uc218\uc9d1\ud558\ub294 \ub85c\uceec \ub3c4\uad6c(\uc608\ub97c \ub4e4\uc5b4 Prometheus \uc775\uc2a4\ud3ec\ud130 \uac19\uc740)\ub97c \ub450\uc5b4\uc11c \uc774 \uba54\uadf8\ub9ad\ub4e4\uc744 \ud558\ub098\uc758 \ucee8\ud14c\uc774\ub108\uc5d0 \ub0b4\uc5d0\uc11c \uacf5\uc720\ud558\ub294 \ubc29\ubc95\uc774 \ub354 \ub2e8\uc21c\ud560 \uac83\uc785\ub2c8\ub2e4. \uc694\uc810\uc740, \uc774 \uc911\uc758 \uc5b4\ub290\uac83\ub3c4 \uc5ec\ub7ec\ubd84\ub4e4\uc774 \ubc18\ub4dc\uc2dc \ub530\ub77c\uc57c\ud558\ub294 \ud655\uc815\ub41c \uc0ac\uc2e4 \uc774 \uc544\ub2c8\ub77c\ub294 \uac83\uc785\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \uc774 \uc544\uc774\ub514\uc5b4\ub4e4\uc744 \uc5ec\ub7ec\ubd84\uc758 \uace0\uc720\ud55c \uc774\uc6a9 \uc0ac\ub840\ub97c \ud3c9\uac00 \ud558\ub294\ub370 \uc0ac\uc6a9\ud558\uace0, \uc5ec\ub7ec\ubd84\uc758 \uc2dc\uc2a4\ud15c\uc5d0 \uac00\uc7a5 \uc801\ud569\ud55c \uc811\uadfc\ubc95\uc774 \uc5b4\ub5a4 \uac83\uc778\uc9c0 \uacb0\uc815\ud558\uba70, \ub2e4\uc74c\uc758 \uac1c\ub150\ub4e4\uc744 \uad00\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ubcf4\uc548 - HTTPS \uad6c\ub3d9\ud558\uae30 \uc7ac\uc2dc\uc791 \ubcf5\uc81c (\uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uc138\uc2a4 \uac1c\uc218) \uba54\ubaa8\ub9ac \uc2dc\uc791\ud558\uae30 \uc804 \ub2e8\uacc4\ub4e4","title":"Prometheus\uc640 \ub2e4\ub978 \uc774\uc720\ub4e4"},{"location":"deployment/docker/#_18","text":"\ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ucee8\ud14c\uc774\ub108 \ub2f9 \ub2e8\uc77c \ud504\ub85c\uc138\uc2a4 \ub97c \uc2e4\ud589\ud55c\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc740 \uac01 \ucee8\ud14c\uc774\ub108(\ubcf5\uc81c\ub41c \uacbd\uc6b0\uc5d0\ub294 \uc5ec\ub7ec\uac1c\uc758 \ucee8\ud14c\uc774\ub108\ub4e4)\uc5d0 \ub300\ud574 \uc798 \uc815\uc758\ub418\uace0, \uc548\uc815\uc801\uc774\uba70, \uc81c\ud55c\ub41c \uc6a9\ub7c9\uc758 \uba54\ubaa8\ub9ac \uc18c\ube44\ub7c9\uc744 \uac00\uc9c0\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc5ec\ub7ec\ubd84\uc758 \ucee8\ud14c\uc774\ub108 \uad00\ub9ac \uc2dc\uc2a4\ud15c(\uc608\ub97c \ub4e4\uc5b4 \ucfe0\ubc84\ub124\ud2f0\uc2a4 ) \uc124\uc815\uc5d0\uc11c \uc55e\uc11c \uc815\uc758\ub41c \uac83\uacfc \uac19\uc740 \uba54\ubaa8\ub9ac \uc81c\ud55c\uacfc \uc694\uad6c\uc0ac\ud56d\uc744 \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \ubc29\ubc95\uc73c\ub85c \uac00\uc6a9 \uba38\uc2e0 \uc774 \ud544\uc694\ub85c\ud558\ub294 \uba54\ubaa8\ub9ac\uc640 \ud074\ub7ec\uc2a4\ud130\uc5d0 \uc788\ub294 \uac00\uc6a9 \uba38\uc2e0\ub4e4\uc744 \uc5fc\ub450\uc5d0 \ub450\uace0 \ucee8\ud14c\uc774\ub108\ub97c \ubcf5\uc81c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc758 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \ub2e8\uc21c \ud558\ub2e4\uba74, \uc774\uac83\uc740 \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\uc744 \uac83\uc774\uace0, \uace0\uc815\ub41c \uba54\ubaa8\ub9ac \uc81c\ud55c\uc744 \uad6c\uccb4\ud654\ud560 \ud544\uc694\ub3c4 \uc5c6\uc744 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc5ec\ub7ec\ubd84\uc758 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 (\uc608\ub97c \ub4e4\uc5b4 \uba38\uc2e0 \ub7ec\ub2dd \ubaa8\ub378\uac19\uc774) \ub9ce\uc740 \uba54\ubaa8\ub9ac\ub97c \uc18c\uc694\ud55c\ub2e4\uba74 , \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \uc5bc\ub9c8\ub098 \ub9ce\uc740 \uc591\uc758 \uba54\ubaa8\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294\uc9c0 \ud655\uc778\ud558\uace0 \uac01 \uba38\uc2e0\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ucee8\ud14c\uc774\ub108\uc758 \uc218 \ub97c \uc870\uc815\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4 (\uadf8\ub9ac\uace0 \ud544\uc694\uc5d0 \ub530\ub77c \uc5ec\ub7ec\ubd84\uc758 \ud074\ub7ec\uc2a4\ud130\uc5d0 \uba38\uc2e0\uc744 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4). \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ucee8\ud14c\uc774\ub108 \ub2f9 \uc5ec\ub7ec\uac1c\uc758 \ud504\ub85c\uc138\uc2a4 \ub97c \uc2e4\ud589\ud55c\ub2e4\uba74 (\uc608\ub97c \ub4e4\uc5b4 \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \ucc98\ub7fc), \uc5ec\ub7ec\ubd84\uc740 \uc2dc\uc791\ub41c \ud504\ub85c\uc138\uc2a4 \uac1c\uc218\uac00 \uac00\uc6a9\ud55c \uac83 \ubcf4\ub2e4 \ub354 \ub9ce\uc740 \uba54\ubaa8\ub9ac\ub97c \uc18c\ube44 \ud558\uc9c0 \uc54a\ub294\uc9c0 \ud655\uc778\ud574\uc57c \ud569\ub2c8\ub2e4.","title":"\uba54\ubaa8\ub9ac"},{"location":"deployment/docker/#_19","text":"\ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ucee8\ud14c\uc774\ub108(\uc608\ub97c \ub4e4\uc5b4 \ub3c4\ucee4, \ucfe0\ubc84\ub124\ud2f0\uc2a4)\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc774 \uc811\uadfc\ud560 \uc218 \uc788\ub294 \uc8fc\uc694 \ubc29\ubc95\uc740 \ud06c\uac8c \ub450\uac00\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc2dc\uc791\ud558\uae30 \uc804 \ub2e8\uacc4\ub4e4\uacfc \ucee8\ud14c\uc774\ub108"},{"location":"deployment/docker/#_20","text":"\ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \uc5ec\ub7ec\uac1c\uc758 \ucee8\ud14c\uc774\ub108 \ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \uc544\ub9c8\ub3c4 \uac01\uac01\uc758 \ucee8\ud14c\uc774\ub108\ub294 \ud558\ub098\uc758 \ud504\ub85c\uc138\uc2a4 \ub97c \uac00\uc9c0\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4(\uc608\ub97c \ub4e4\uc5b4, \ucfe0\ubc84\ub124\ud2f0\uc2a4 \ud074\ub7ec\uc2a4\ud130\uc5d0\uc11c). \uadf8\ub7ec\uba74 \uc5ec\ub7ec\ubd84\uc740 \ubcf5\uc81c\ub41c \uc6cc\ucee4 \ucee8\ud14c\uc774\ub108\ub97c \uc2e4\ud589\ud558\uae30 \uc774\uc804\uc5d0 , \ud558\ub098\uc758 \ucee8\ud14c\uc774\ub108\uc5d0 \uc788\ub294 \uc774\uc804\uc758 \ub2e8\uacc4\ub4e4\uc744 \uc218\ud589\ud558\ub294 \ub2e8\uc77c \ud504\ub85c\uc138\uc2a4\ub97c \uac00\uc9c0\ub294 \ubcc4\ub3c4\uc758 \ucee8\ud14c\uc774\ub108\ub4e4 \uc744 \uac00\uc9c0\uace0 \uc2f6\uc744 \uac83\uc785\ub2c8\ub2e4. \uc815\ubcf4 \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ucfe0\ubc84\ub124\ud2f0\uc2a4\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74, \uc544\ub9c8\ub3c4 \uc774\ub294 Init Container \uc77c \uac83\uc785\ub2c8\ub2e4. \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc758 \uc774\uc6a9 \uc0ac\ub840\uc5d0\uc11c \uc774\uc804 \ub2e8\uacc4\ub4e4\uc744 \ubcd1\ub82c\uc801\uc73c\ub85c \uc5ec\ub7ec\ubc88 \uc218\ud589\ud558\ub294\ub370\uc5d0 \ubb38\uc81c\uac00 \uc5c6\ub2e4\uba74 (\uc608\ub97c \ub4e4\uc5b4 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc774\uc804\uc744 \uc2e4\ud589\ud558\uc9c0 \uc54a\uace0 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uac00 \uc900\ube44\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ub9cc \ud558\ub294 \uacbd\uc6b0), \uba54\uc778 \ud504\ub85c\uc138\uc2a4\ub97c \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \uc774 \ub2e8\uacc4\ub4e4\uc744 \uac01 \ucee8\ud14c\uc774\ub108\uc5d0 \ub123\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ub2e4\uc911 \ucee8\ud14c\uc774\ub108"},{"location":"deployment/docker/#_21","text":"\ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc758 \uc14b\uc5c5\uc774 \ub2e4\uc911 \ud504\ub85c\uc138\uc2a4 (\ub610\ub294 \ud558\ub098\uc758 \ud504\ub85c\uc138\uc2a4)\ub97c \uc2dc\uc791\ud558\ub294 \ud558\ub098\uc758 \ucee8\ud14c\uc774\ub108 \ub97c \uac00\uc9c0\ub294 \ub2e8\uc21c\ud55c \uc14b\uc5c5\uc774\ub77c\uba74, \uc0ac\uc804 \ub2e8\uacc4\ub4e4\uc744 \uc571\uc744 \ud3ec\ud568\ud558\ub294 \ud504\ub85c\uc138\uc2a4\ub97c \uc2dc\uc791\ud558\uae30 \uc9c1\uc804\uc5d0 \uac19\uc740 \ucee8\ud14c\uc774\ub108\uc5d0\uc11c \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0\ub294 \uc774\ub97c \ub0b4\ubd80\uc801\uc73c\ub85c \uc9c0\uc6d0\ud569\ub2c8\ub2e4.","title":"\ub2e8\uc77c \ucee8\ud14c\uc774\ub108"},{"location":"deployment/docker/#gunicorn-uvicorn","text":"\uc55e \ucc55\ud130\uc5d0\uc11c \uc790\uc138\ud558\uac8c \uc124\uba85\ub41c \uac83 \ucc98\ub7fc, Uvicorn \uc6cc\ucee4\uc640 \uac19\uc774 \uc2e4\ud589\ub418\ub294 Gunicorn\uc744 \ud3ec\ud568\ud558\ub294 \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4: \uc11c\ubc84 \uc6cc\ucee4 - Uvicorn\uacfc \ud568\uaed8\ud558\ub294 Gunicorn . \uc774 \uc774\ubbf8\uc9c0\ub294 \uc8fc\ub85c \uc704\uc5d0\uc11c \uc124\uba85\ub41c \uc0c1\ud669\uc5d0\uc11c \uc720\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4: \ub2e4\uc911 \ud504\ub85c\uc138\uc2a4\ub97c \uac00\uc9c0\ub294 \ucee8\ud14c\uc774\ub108\uc640 \ud2b9\uc218\ud55c \uacbd\uc6b0\ub4e4 . tiangolo/uvicorn-gunicorn-fastapi . \uacbd\uace0 \uc5ec\ub7ec\ubd84\uc774 \uc774 \ubca0\uc774\uc2a4 \uc774\ubbf8\uc9c0 \ub610\ub294 \ub2e4\ub978 \uc720\uc0ac\ud55c \uc774\ubbf8\uc9c0\ub97c \ud544\uc694\ub85c \ud558\uc9c0 \uc54a\uc744 \ub192\uc740 \uac00\ub2a5\uc131\uc774 \uc788\uc73c\uba70, \uc704\uc5d0\uc11c \uc124\uba85\ub41c \uac83\ucc98\ub7fc: FastAPI\ub97c \uc704\ud55c \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \ube4c\ub4dc\ud558\uae30 \ucc98\uc74c\ubd80\ud130 \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud558\ub294 \uac83\uc774 \ub354 \ub098\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc774\ubbf8\uc9c0\ub294 \uac00\ub2a5\ud55c CPU \ucf54\uc5b4\uc5d0 \uae30\ubc18\ud55c \uba87\uac1c\uc758 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \ub97c \uc124\uc815\ud558\ub294 \uc790\ub3d9-\ud29c\ub2dd \uba54\ucee4\ub2c8\uc998\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc774\ubbf8\uc9c0\ub294 \ubbfc\uac10\ud55c \ub514\ud3f4\ud2b8 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc9c0\ub9cc, \uc5ec\ub7ec\ubd84\ub4e4\uc740 \uc5ec\uc804\ud788 \ud658\uacbd \ubcc0\uc218 \ub610\ub294 \uc124\uc815 \ud30c\uc77c\uc744 \ud1b5\ud574 \uc124\uc815\uac12\uc744 \uc218\uc815\ud558\uace0 \uc5c5\ub370\uc774\ud2b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uc2a4\ud06c\ub9bd\ud2b8\ub97c \ud1b5\ud574 \uc2dc\uc791\ud558\uae30 \uc804 \uc0ac\uc804 \ub2e8\uacc4 \ub97c \uc2e4\ud589\ud558\ub294 \uac83\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \ud301 \ubaa8\ub4e0 \uc124\uc815\uacfc \uc635\uc158\uc744 \ubcf4\ub824\uba74, \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \ud398\uc774\uc9c0\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4: tiangolo/uvicorn-gunicorn-fastapi .","title":"Gunicorn\uacfc \ud568\uaed8\ud558\ub294 \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0 - Uvicorn"},{"location":"deployment/docker/#_22","text":"\uc774 \uc774\ubbf8\uc9c0\uc5d0 \uc788\ub294 \ud504\ub85c\uc138\uc2a4 \uac1c\uc218 \ub294 \uac00\uc6a9\ud55c CPU \ucf54\uc5b4\ub4e4 \ub85c \ubd80\ud130 \uc790\ub3d9\uc73c\ub85c \uacc4\uc0b0 \ub429\ub2c8\ub2e4. \uc774\uac83\uc774 \uc758\ubbf8\ud558\ub294 \ubc14\ub294 \uc774\ubbf8\uc9c0\uac00 CPU\ub85c\ubd80\ud130 \ucd5c\ub300\ud55c\uc758 \uc131\ub2a5 \uc744 \uc950\uc5b4\uc9dc\ub0b8\ub2e4 \ub294 \uac83\uc785\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \uc774 \uc124\uc815 \uac12\uc744 \ud658\uacbd \ubcc0\uc218 \ub098 \uae30\ud0c0 \ubc29\ubc95\ub4e4\ub85c \uc870\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ud504\ub85c\uc138\uc2a4\uc758 \uac1c\uc218\uac00 \ucee8\ud14c\uc774\ub108\uac00 \uc2e4\ud589\ub418\uace0 \uc788\ub294 CPU\uc5d0 \uc758\uc874\ud55c\ub2e4\ub294 \uac83\uc740 \ub610\ud55c \uc18c\uc694\ub418\ub294 \uba54\ubaa8\ub9ac\uc758 \ud06c\uae30 \ub610\ud55c \uc774\uc5d0 \uc758\uc874\ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0, \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc758 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \ub9ce\uc740 \uba54\ubaa8\ub9ac\ub97c \uc694\uad6c\ud558\uace0 (\uc608\ub97c \ub4e4\uc5b4 \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378\ucc98\ub7fc), \uc5ec\ub7ec\ubd84\uc758 \uc11c\ubc84\uac00 CPU \ucf54\uc5b4 \uc218\ub294 \ub9ce\uc9c0\ub9cc \uc801\uc740 \uba54\ubaa8\ub9ac \ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc758 \ucee8\ud14c\uc774\ub108\ub294 \uac00\uc6a9\ud55c \uba54\ubaa8\ub9ac\ubcf4\ub2e4 \ub9ce\uc740 \uba54\ubaa8\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub824\uace0 \uc2dc\ub3c4\ud560 \uc218 \uc788\uc73c\uba70, \uacb0\uad6d \ud37c\ud3ec\uba3c\uc2a4\ub97c \ud06c\uac8c \ub5a8\uc5b4\ub728\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4(\uc2ec\uc9c0\uc5b4 \uace0\uc7a5\uc774 \ub0a0 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4). \ud83d\udea8","title":"\uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0\uc5d0 \uc788\ub294 \ud504\ub85c\uc138\uc2a4 \uac1c\uc218"},{"location":"deployment/docker/#dockerfile","text":"\uc774 \uc774\ubbf8\uc9c0\uc5d0 \uae30\ubc18\ud574 Dockerfile \uc744 \uc0dd\uc131\ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9 COPY ./requirements.txt /app/requirements.txt RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt COPY ./app /app","title":"Dockerfile \uc0dd\uc131\ud558\uae30"},{"location":"deployment/docker/#_23","text":"\ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ub2e4\uc911 \ud30c\uc77c\uc744 \uac00\uc9c0\ub294 \ub354 \ud070 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158 \uc744 \uc0dd\uc131\ud558\ub294 \uc139\uc158\uc744 \ub530\ub790\ub2e4\uba74, \uc5ec\ub7ec\ubd84\uc758 Dockerfile \uc740 \ub300\uc2e0 \uc774\ub807\uac8c \uc0dd\uacbc\uc744 \uac83\uc785\ub2c8\ub2e4: FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9 COPY ./requirements.txt /app/requirements.txt RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt COPY ./app /app/app","title":"\ub354 \ud070 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158"},{"location":"deployment/docker/#_24","text":"\uc5ec\ub7ec\ubd84\ub4e4\uc774 \ucfe0\ubc84\ub124\ud2f0\uc2a4 (\ub610\ub294 \uc720\uc0ac\ud55c \ub2e4\ub978 \ub3c4\uad6c) \uc0ac\uc6a9\ud558\uac70\ub098 \ud074\ub7ec\uc2a4\ud130 \ub808\ubca8\uc5d0\uc11c \ub2e4\uc911 \ucee8\ud14c\uc774\ub108\ub97c \uc774\uc6a9\ud574 \uc774\ubbf8 \uc0ac\ubcf8 \uc744 \uc124\uc815\ud558\uace0 \uc788\ub2e4\uba74, \uacf5\uc2dd \ubca0\uc774\uc2a4 \uc774\ubbf8\uc9c0(\ub610\ub294 \uc720\uc0ac\ud55c \ub2e4\ub978 \uc774\ubbf8\uc9c0)\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83 \uc88b\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0 \uacbd\uc6b0\uc5d0 \uc5ec\ub7ec\ubd84\uc740 \ub2e4\uc74c\uc5d0 \uc124\uba85\ub41c \uac83 \ucc98\ub7fc \ucc98\uc74c\ubd80\ud130 \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud558\ub294 \uac83 \uc774 \ub354 \ub0ab\uc2b5\ub2c8\ub2e4: FastAPI\ub97c \uc704\ud55c \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \ube4c\ub4dc\ud558\uae30 . \uc774 \uc774\ubbf8\uc9c0\ub294 \uc704\uc758 \ub2e4\uc911 \ud504\ub85c\uc138\uc2a4\ub97c \uac00\uc9c0\ub294 \ucee8\ud14c\uc774\ub108\uc640 \ud2b9\uc218\ud55c \uacbd\uc6b0\ub4e4 \uc5d0\uc11c \uc124\uba85\ub41c \ud2b9\uc218\ud55c \uacbd\uc6b0\uc5d0 \ub300\ud574\uc11c\ub9cc \uc8fc\ub85c \uc720\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc758 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \ucda9\ubd84\ud788 \ub2e8\uc21c \ud574\uc11c CPU\uc5d0 \uae30\ubc18\ud55c \ub514\ud3f4\ud2b8 \ud504\ub85c\uc138\uc2a4 \uac1c\uc218\ub97c \uc124\uc815\ud558\ub294 \uac83\uc774 \uc798 \uc791\ub3d9\ud55c\ub2e4\uba74, \ud074\ub7ec\uc2a4\ud130 \ub808\ubca8\uc5d0\uc11c \uc218\ub3d9\uc73c\ub85c \uc0ac\ubcf8\uc744 \uc124\uc815\ud560 \ud544\uc694\uac00 \uc5c6\uc744 \uac83\uc774\uace0, \uc5ec\ub7ec\ubd84\uc758 \uc571\uc5d0\uc11c \ud558\ub098 \uc774\uc0c1\uc758 \ucee8\ud14c\uc774\ub108\ub97c \uc2e4\ud589\ud558\uc9c0\ub3c4 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. \ub610\ub294 \ub9cc\uc57d\uc5d0 \uc5ec\ub7ec\ubd84\uc774 \ub3c4\ucee4 \ucef4\ud3ec\uc988 \ub85c \ubc30\ud3ec\ud558\uac70\ub098, \ub2e8\uc77c \uc11c\ubc84\uc5d0\uc11c \uc2e4\ud589\ud558\uac70\ub098 \ud558\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\uc785\ub2c8\ub2e4.","title":"\uc5b8\uc81c \uc0ac\uc6a9\ud560\uae4c"},{"location":"deployment/docker/#_25","text":"\ucee8\ud14c\uc774\ub108 (\ub3c4\ucee4) \uc774\ubbf8\uc9c0\ub97c \uc644\uc131\ud55c \ub4a4\uc5d0 \uc774\ub97c \ubc30\ud3ec\ud558\ub294 \ubc29\ubc95\uc5d0\ub294 \uc5ec\ub7ec\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4: \ub2e8\uc77c \uc11c\ubc84\uc5d0\uc11c \ub3c4\ucee4 \ucef4\ud3ec\uc988 \ub85c \ubc30\ud3ec\ud558\uae30 \ucfe0\ubc84\ub124\ud2f0\uc2a4 \ud074\ub7ec\uc2a4\ud130\ub85c \ubc30\ud3ec\ud558\uae30 \ub3c4\ucee4 \uc2a4\uc650 \ubaa8\ub4dc \ud074\ub7ec\uc2a4\ud130\ub85c \ubc30\ud3ec\ud558\uae30 \ub178\ub9c8\ub4dc \uac19\uc740 \ub2e4\ub978 \ub3c4\uad6c\ub85c \ubc30\ud3ec\ud558\uae30 \uc5ec\ub7ec\ubd84\uc758 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \ubc30\ud3ec\ud574\uc8fc\ub294 \ud074\ub77c\uc6b0\ub4dc \uc11c\ube44\uc2a4\ub85c \ubc30\ud3ec\ud558\uae30","title":"\ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \ubc30\ud3ec\ud558\uae30"},{"location":"deployment/docker/#poetry","text":"\ub9cc\uc57d \uc5ec\ub7ec\ubd84\ub4e4\uc774 \ud504\ub85c\uc81d\ud2b8 \uc758\uc874\uc131\uc744 \uad00\ub9ac\ud558\uae30 \uc704\ud574 Poetry \ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74, \ub3c4\ucee4\uc758 \uba40\ud2f0-\uc2a4\ud14c\uc774\uc9c0 \ube4c\ub529\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: # (1) FROM python:3.9 as requirements-stage # (2) WORKDIR /tmp # (3) RUN pip install poetry # (4) COPY ./pyproject.toml ./poetry.lock* /tmp/ # (5) RUN poetry export -f requirements.txt --output requirements.txt --without-hashes # (6) FROM python:3.9 # (7) WORKDIR /code # (8) COPY --from = requirements-stage /tmp/requirements.txt /code/requirements.txt # (9) RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt # (10) COPY ./app /code/app # (11) CMD [ \"uvicorn\" , \"app.main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] \uccab \uc2a4\ud14c\uc774\uc9c0\ub85c, requirements-stage \ub77c\uace0 \uc774\ub984 \ubd99\uc600\uc2b5\ub2c8\ub2e4. /tmp \ub97c \ud604\uc7ac\uc758 \uc6cc\ud0b9 \ub514\ub809\ud130\ub9ac\ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \uc774 \uc704\uce58\uc5d0 \uc6b0\ub9ac\ub294 requirements.txt \ud30c\uc77c\uc744 \uc0dd\uc131\ud560 \uac83\uc785\ub2c8\ub2e4. \uc774 \ub3c4\ucee4 \uc2a4\ud14c\uc774\uc9c0\uc5d0\uc11c Poetry\ub97c \uc124\uce58\ud569\ub2c8\ub2e4. \ud30c\uc77c pyproject.toml \uc640 poetry.lock \ub97c /tmp \ub514\ub809\ud130\ub9ac\ub85c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. ./poetry.lock* ( * \ub85c \ub05d\ub098\ub294) \ud30c\uc77c\uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0, \ud30c\uc77c\uc774 \uc544\uc9c1 \uc0ac\uc6a9\uac00\ub2a5\ud558\uc9c0 \uc54a\ub354\ub77c\ub3c4 \uace0\uc7a5\ub098\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. requirements.txt \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc774\uac83\uc774 \ub9c8\uc9c0\ub9c9 \uc2a4\ud14c\uc774\uc9c0\ub85c, \uc5ec\uae30\uc5d0 \uc704\uce58\ud55c \ubaa8\ub4e0 \uac83\uc774 \ub9c8\uc9c0\ub9c9 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\uc5d0 \ud3ec\ud568\ub420 \uac83\uc785\ub2c8\ub2e4. \ud604\uc7ac\uc758 \uc6cc\ud0b9 \ub514\ub809\ud130\ub9ac\ub97c /code \ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \ud30c\uc77c requirements.txt \ub97c /code \ub514\ub809\ud130\ub9ac\ub85c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \uc774 \ud30c\uc77c\uc740 \uc624\uc9c1 \uc774\uc804\uc758 \ub3c4\ucee4 \uc2a4\ud14c\uc774\uc9c0\uc5d0\ub9cc \uc874\uc7ac\ud558\uba70, \ub54c\ubb38\uc5d0 \ubcf5\uc0ac\ud558\uae30 \uc704\ud574\uc11c --from-requirements-stage \uc635\uc158\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \uc0dd\uc131\ub41c requirements.txt \ud30c\uc77c\uc5d0 \ud328\ud0a4\uc9c0 \uc758\uc874\uc131\uc744 \uc124\uce58\ud569\ub2c8\ub2e4. app \ub514\ub809\ud130\ub9ac\ub97c /code \ub514\ub809\ud130\ub9ac\ub85c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. uvicorn \ucee4\ub9e8\ub4dc\ub97c \uc2e4\ud589\ud558\uc5ec, app.main \uc5d0\uc11c \ubd88\ub7ec\uc628 app \uac1d\uccb4\ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. \ud301 \ubc84\ube14 \uc22b\uc790\ub97c \ud074\ub9ad\ud574 \uac01 \uc904\uc774 \ud558\ub294 \uc77c\uc744 \uc54c\uc544\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub3c4\ucee4 \uc2a4\ud14c\uc774\uc9c0 \ub780 Dockefile \uc758 \uc77c\ubd80\ub85c\uc11c \ub098\uc911\uc5d0 \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ud30c\uc77c\ub4e4\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud55c \uc77c\uc2dc\uc801\uc778 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0 \ub85c \uc791\ub3d9\ud569\ub2c8\ub2e4. \uccab \uc2a4\ud14c\uc774\uc9c0\ub294 \uc624\uc9c1 Poetry\ub97c \uc124\uce58 \ud558\uace0 Poetry\uc758 pyproject.toml \ud30c\uc77c\ub85c\ubd80\ud130 \ud504\ub85c\uc81d\ud2b8 \uc758\uc874\uc131\uc744 \uc704\ud55c requirements.txt \ub97c \uc0dd\uc131 \ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc774 requirements.txt \ud30c\uc77c\uc740 \ub2e4\uc74c \uc2a4\ud14c\uc774\uc9c0 \uc5d0\uc11c pip \ub85c \uc0ac\uc6a9\ub420 \uac83\uc785\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\uc5d0\ub294 \uc624\uc9c1 \ub9c8\uc9c0\ub9c9 \uc2a4\ud14c\uc774\uc9c0\ub9cc \ubcf4\uc874\ub429\ub2c8\ub2e4. \uc774\uc804 \uc2a4\ud14c\uc774\uc9c0(\ub4e4)\uc740 \ubc84\ub824\uc9d1\ub2c8\ub2e4. Poetry\ub97c \uc0ac\uc6a9\ud560 \ub54c \ub3c4\ucee4 \uba40\ud2f0-\uc2a4\ud14c\uc774\uc9c0 \ube4c\ub4dc \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc740\ub370, \uc5ec\ub7ec\ubd84\ub4e4\uc758 \ud504\ub85c\uc81d\ud2b8 \uc758\uc874\uc131\uc744 \uc124\uce58\ud558\uae30 \uc704\ud574 \ub9c8\uc9c0\ub9c9 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\uc5d0 \uc624\uc9c1 requirements.txt \ud30c\uc77c\ub9cc \ud544\uc694\ud558\uc9c0, Poetry\uc640 \uadf8 \uc758\uc874\uc131\uc740 \uc788\uc744 \ud544\uc694\uac00 \uc5c6\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc774 \ub2e4\uc74c (\ub610\ud55c \ub9c8\uc9c0\ub9c9) \uc2a4\ud14c\uc774\uc9c0\uc5d0\uc11c \uc5ec\ub7ec\ubd84\ub4e4\uc740 \uc774\uc804\uc5d0 \uc124\uba85\ub41c \uac83\uacfc \ube44\uc2b7\ud55c \ubc29\uc2dd\uc73c\ub85c \ubc29\uc2dd\uc73c\ub85c \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"Poetry\uc758 \ub3c4\ucee4 \uc774\ubbf8\uc9c0"},{"location":"deployment/docker/#tls-poetry","text":"\uc774\uc804\uc5d0 \uc5b8\uae09\ud55c \uac83\uacfc \uac19\uc774, \ub9cc\uc57d \uc5ec\ub7ec\ubd84\uc774 \ucee8\ud14c\uc774\ub108\ub97c Nginx \ub610\ub294 Traefik\uacfc \uac19\uc740 TLS \uc885\ub8cc \ud504\ub85d\uc2dc (\ub85c\ub4dc \ubc38\ub7f0\uc11c) \ub4a4\uc5d0\uc11c \uc2e4\ud589\ud558\uace0 \uc788\ub2e4\uba74, \ucee4\ub9e8\ub4dc\uc5d0 --proxy-headers \uc635\uc158\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4: CMD [ \"uvicorn\" , \"app.main:app\" , \"--proxy-headers\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ]","title":"TLS \uc885\ub8cc \ud504\ub85d\uc2dc\uc758 \ubc30\ud6c4 - Poetry"},{"location":"deployment/docker/#_26","text":"\ucee8\ud14c\uc774\ub108 \uc2dc\uc2a4\ud15c(\uc608\ub97c \ub4e4\uc5b4 \ub3c4\ucee4 \ub098 \ucfe0\ubc84\ub124\ud2f0\uc2a4 )\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub4e0 \ubc30\ud3ec \uac1c\ub150 \uc744 \ub2e4\ub8e8\ub294 \uac83\uc740 \uaf64 \uac04\ub2e8\ud569\ub2c8\ub2e4: HTTPS \uad6c\ub3d9\ud558\uae30 \uc7ac\uc2dc\uc791 \ubcf5\uc81c (\uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uc138\uc2a4 \uac1c\uc218) \uba54\ubaa8\ub9ac \uc2dc\uc791\ud558\uae30 \uc804 \ub2e8\uacc4\ub4e4 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0\uc11c \uc5ec\ub7ec\ubd84\uc740 \uc5b4\ub5a4 \ubca0\uc774\uc2a4 \uc774\ubbf8\uc9c0\ub3c4 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uacf5\uc2dd \ud30c\uc774\uc36c \ub3c4\ucee4 \uc774\ubbf8\uc9c0\uc5d0 \uae30\ubc18\ud574 \ucc98\uc74c\ubd80\ud130 \ucee8\ud14c\uc774\ub108 \uc774\ubbf8\uc9c0\ub97c \ube4c\ub4dc \ud560 \uac83\uc785\ub2c8\ub2e4. Dockerfile \uc5d0 \uc788\ub294 \uc9c0\uc2dc \uc0ac\ud56d\uc744 \uc21c\uc11c\ub300\ub85c \ub2e4\ub8e8\uace0 \ub3c4\ucee4 \uce90\uc2dc \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc73c\ub85c \uc5ec\ub7ec\ubd84\uc740 \ube4c\ub4dc \uc2dc\uac04\uc744 \ucd5c\uc18c\ud654 \ud560 \uc218 \uc788\uc73c\uba70, \uc774\ub85c\uc368 \uc0dd\uc0b0\uc131\uc744 \ucd5c\ub300\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 (\uadf8\ub9ac\uace0 \uc9c0\ub8e8\ud568\uc744 \ud53c\ud560 \uc218 \uc788\uc8e0) \ud83d\ude0e \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uc5d0\ub294, FastAPI\ub97c \uc704\ud55c \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ud83e\udd13","title":"\uc694\uc57d"},{"location":"deployment/https/","text":"About HTTPS \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . It is easy to assume that HTTPS is something that is just \"enabled\" or not. But it is way more complex than that. Tip If you are in a hurry or don't care, continue with the next sections for step by step instructions to set everything up with different techniques. To learn the basics of HTTPS , from a consumer perspective, check https://howhttps.works/ . Now, from a developer's perspective , here are several things to have in mind while thinking about HTTPS: For HTTPS, the server needs to have \"certificates\" generated by a third party . Those certificates are actually acquired from the third party, not \"generated\". Certificates have a lifetime . They expire . And then they need to be renewed , acquired again from the third party. The encryption of the connection happens at the TCP level . That's one layer below HTTP . So, the certificate and encryption handling is done before HTTP . TCP doesn't know about \"domains\" . Only about IP addresses. The information about the specific domain requested goes in the HTTP data . The HTTPS certificates \"certify\" a certain domain , but the protocol and encryption happen at the TCP level, before knowing which domain is being dealt with. By default , that would mean that you can only have one HTTPS certificate per IP address . No matter how big your server is or how small each application you have on it might be. There is a solution to this, however. There's an extension to the TLS protocol (the one handling the encryption at the TCP level, before HTTP) called SNI . This SNI extension allows one single server (with a single IP address ) to have several HTTPS certificates and serve multiple HTTPS domains/applications . For this to work, a single component (program) running on the server, listening on the public IP address , must have all the HTTPS certificates in the server. After obtaining a secure connection, the communication protocol is still HTTP . The contents are encrypted , even though they are being sent with the HTTP protocol . It is a common practice to have one program/HTTP server running on the server (the machine, host, etc.) and managing all the HTTPS parts : receiving the encrypted HTTPS requests , sending the decrypted HTTP requests to the actual HTTP application running in the same server (the FastAPI application, in this case), take the HTTP response from the application, encrypt it using the appropriate HTTPS certificate and sending it back to the client using HTTPS . This server is often called a TLS Termination Proxy . Some of the options you could use as a TLS Termination Proxy are: Traefik (that can also handle certificate renewals) Caddy (that can also handle certificate renewals) Nginx HAProxy Let's Encrypt \u00b6 Before Let's Encrypt, these HTTPS certificates were sold by trusted third parties. The process to acquire one of these certificates used to be cumbersome, require quite some paperwork and the certificates were quite expensive. But then Let's Encrypt was created. It is a project from the Linux Foundation. It provides HTTPS certificates for free , in an automated way. These certificates use all the standard cryptographic security, and are short-lived (about 3 months), so the security is actually better because of their reduced lifespan. The domains are securely verified and the certificates are generated automatically. This also allows automating the renewal of these certificates. The idea is to automate the acquisition and renewal of these certificates so that you can have secure HTTPS, for free, forever . HTTPS for Developers \u00b6 Here's an example of how an HTTPS API could look like, step by step, paying attention mainly to the ideas important for developers. Domain Name \u00b6 It would probably all start by you acquiring some domain name . Then, you would configure it in a DNS server (possibly your same cloud provider). You would probably get a cloud server (a virtual machine) or something similar, and it would have a fixed public IP address . In the DNS server(s) you would configure a record (an \" A record \") to point your domain to the public IP address of your server . You would probably do this just once, the first time, when setting everything up. Tip This Domain Name part is way before HTTPS, but as everything depends on the domain and the IP address, it's worth mentioning it here. DNS \u00b6 Now let's focus on all the actual HTTPS parts. First, the browser would check with the DNS servers what is the IP for the domain , in this case, someapp.example.com . The DNS servers would tell the browser to use some specific IP address . That would be the public IP address used by your server, that you configured in the DNS servers. TLS Handshake Start \u00b6 The browser would then communicate with that IP address on port 443 (the HTTPS port). The first part of the communication is just to establish the connection between the client and the server and to decide the cryptographic keys they will use, etc. This interaction between the client and the server to establish the TLS connection is called the TLS handshake . TLS with SNI Extension \u00b6 Only one process in the server can be listening on a specific port in a specific IP address . There could be other processes listening on other ports in the same IP address, but only one for each combination of IP address and port. TLS (HTTPS) uses the specific port 443 by default. So that's the port we would need. As only one process can be listening on this port, the process that would do it would be the TLS Termination Proxy . The TLS Termination Proxy would have access to one or more TLS certificates (HTTPS certificates). Using the SNI extension discussed above, the TLS Termination Proxy would check which of the TLS (HTTPS) certificates available it should use for this connection, using the one that matches the domain expected by the client. In this case, it would use the certificate for someapp.example.com . The client already trusts the entity that generated that TLS certificate (in this case Let's Encrypt, but we'll see about that later), so it can verify that the certificate is valid. Then, using the certificate, the client and the TLS Termination Proxy decide how to encrypt the rest of the TCP communication . This completes the TLS Handshake part. After this, the client and the server have an encrypted TCP connection , this is what TLS provides. And then they can use that connection to start the actual HTTP communication . And that's what HTTPS is, it's just plain HTTP inside a secure TLS connection instead of a pure (unencrypted) TCP connection. Tip Notice that the encryption of the communication happens at the TCP level , not at the HTTP level. HTTPS Request \u00b6 Now that the client and server (specifically the browser and the TLS Termination Proxy) have an encrypted TCP connection , they can start the HTTP communication . So, the client sends an HTTPS request . This is just an HTTP request through an encrypted TLS connection. Decrypt the Request \u00b6 The TLS Termination Proxy would use the encryption agreed to decrypt the request , and would transmit the plain (decrypted) HTTP request to the process running the application (for example a process with Uvicorn running the FastAPI application). HTTP Response \u00b6 The application would process the request and send a plain (unencrypted) HTTP response to the TLS Termination Proxy. HTTPS Response \u00b6 The TLS Termination Proxy would then encrypt the response using the cryptography agreed before (that started with the certificate for someapp.example.com ), and send it back to the browser. Next, the browser would verify that the response is valid and encrypted with the right cryptographic key, etc. It would then decrypt the response and process it. The client (browser) will know that the response comes from the correct server because it is using the cryptography they agreed using the HTTPS certificate before. Multiple Applications \u00b6 In the same server (or servers), there could be multiple applications , for example, other API programs or a database. Only one process can be handling the specific IP and port (the TLS Termination Proxy in our example) but the other applications/processes can be running on the server(s) too, as long as they don't try to use the same combination of public IP and port . That way, the TLS Termination Proxy could handle HTTPS and certificates for multiple domains , for multiple applications, and then transmit the requests to the right application in each case. Certificate Renewal \u00b6 At some point in the future, each certificate would expire (about 3 months after acquiring it). And then, there would be another program (in some cases it's another program, in some cases it could be the same TLS Termination Proxy) that would talk to Let's Encrypt, and renew the certificate(s). The TLS certificates are associated with a domain name , not with an IP address. So, to renew the certificates, the renewal program needs to prove to the authority (Let's Encrypt) that it indeed \"owns\" and controls that domain . To do that, and to accommodate different application needs, there are several ways it can do it. Some popular ways are: Modify some DNS records . For this, the renewal program needs to support the APIs of the DNS provider, so, depending on the DNS provider you are using, this might or might not be an option. Run as a server (at least during the certificate acquisition process) on the public IP address associated with the domain. As we said above, only one process can be listening on a specific IP and port. This is one of the reasons why it's very useful when the same TLS Termination Proxy also takes care of the certificate renewal process. Otherwise, you might have to stop the TLS Termination Proxy momentarily, start the renewal program to acquire the certificates, then configure them with the TLS Termination Proxy, and then restart the TLS Termination Proxy. This is not ideal, as your app(s) will not be available during the time that the TLS Termination Proxy is off. All this renewal process, while still serving the app, is one of the main reasons why you would want to have a separate system to handle HTTPS with a TLS Termination Proxy instead of just using the TLS certificates with the application server directly (e.g. Uvicorn). Recap \u00b6 Having HTTPS is very important, and quite critical in most cases. Most of the effort you as a developer have to put around HTTPS is just about understanding these concepts and how they work. But once you know the basic information of HTTPS for developers you can easily combine and configure different tools to help you manage everything in a simple way. In some of the next chapters, I'll show you several concrete examples of how to set up HTTPS for FastAPI applications. \ud83d\udd12","title":"About HTTPS"},{"location":"deployment/https/#about-https","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . It is easy to assume that HTTPS is something that is just \"enabled\" or not. But it is way more complex than that. Tip If you are in a hurry or don't care, continue with the next sections for step by step instructions to set everything up with different techniques. To learn the basics of HTTPS , from a consumer perspective, check https://howhttps.works/ . Now, from a developer's perspective , here are several things to have in mind while thinking about HTTPS: For HTTPS, the server needs to have \"certificates\" generated by a third party . Those certificates are actually acquired from the third party, not \"generated\". Certificates have a lifetime . They expire . And then they need to be renewed , acquired again from the third party. The encryption of the connection happens at the TCP level . That's one layer below HTTP . So, the certificate and encryption handling is done before HTTP . TCP doesn't know about \"domains\" . Only about IP addresses. The information about the specific domain requested goes in the HTTP data . The HTTPS certificates \"certify\" a certain domain , but the protocol and encryption happen at the TCP level, before knowing which domain is being dealt with. By default , that would mean that you can only have one HTTPS certificate per IP address . No matter how big your server is or how small each application you have on it might be. There is a solution to this, however. There's an extension to the TLS protocol (the one handling the encryption at the TCP level, before HTTP) called SNI . This SNI extension allows one single server (with a single IP address ) to have several HTTPS certificates and serve multiple HTTPS domains/applications . For this to work, a single component (program) running on the server, listening on the public IP address , must have all the HTTPS certificates in the server. After obtaining a secure connection, the communication protocol is still HTTP . The contents are encrypted , even though they are being sent with the HTTP protocol . It is a common practice to have one program/HTTP server running on the server (the machine, host, etc.) and managing all the HTTPS parts : receiving the encrypted HTTPS requests , sending the decrypted HTTP requests to the actual HTTP application running in the same server (the FastAPI application, in this case), take the HTTP response from the application, encrypt it using the appropriate HTTPS certificate and sending it back to the client using HTTPS . This server is often called a TLS Termination Proxy . Some of the options you could use as a TLS Termination Proxy are: Traefik (that can also handle certificate renewals) Caddy (that can also handle certificate renewals) Nginx HAProxy","title":"About HTTPS"},{"location":"deployment/https/#lets-encrypt","text":"Before Let's Encrypt, these HTTPS certificates were sold by trusted third parties. The process to acquire one of these certificates used to be cumbersome, require quite some paperwork and the certificates were quite expensive. But then Let's Encrypt was created. It is a project from the Linux Foundation. It provides HTTPS certificates for free , in an automated way. These certificates use all the standard cryptographic security, and are short-lived (about 3 months), so the security is actually better because of their reduced lifespan. The domains are securely verified and the certificates are generated automatically. This also allows automating the renewal of these certificates. The idea is to automate the acquisition and renewal of these certificates so that you can have secure HTTPS, for free, forever .","title":"Let's Encrypt"},{"location":"deployment/https/#https-for-developers","text":"Here's an example of how an HTTPS API could look like, step by step, paying attention mainly to the ideas important for developers.","title":"HTTPS for Developers"},{"location":"deployment/https/#domain-name","text":"It would probably all start by you acquiring some domain name . Then, you would configure it in a DNS server (possibly your same cloud provider). You would probably get a cloud server (a virtual machine) or something similar, and it would have a fixed public IP address . In the DNS server(s) you would configure a record (an \" A record \") to point your domain to the public IP address of your server . You would probably do this just once, the first time, when setting everything up. Tip This Domain Name part is way before HTTPS, but as everything depends on the domain and the IP address, it's worth mentioning it here.","title":"Domain Name"},{"location":"deployment/https/#dns","text":"Now let's focus on all the actual HTTPS parts. First, the browser would check with the DNS servers what is the IP for the domain , in this case, someapp.example.com . The DNS servers would tell the browser to use some specific IP address . That would be the public IP address used by your server, that you configured in the DNS servers.","title":"DNS"},{"location":"deployment/https/#tls-handshake-start","text":"The browser would then communicate with that IP address on port 443 (the HTTPS port). The first part of the communication is just to establish the connection between the client and the server and to decide the cryptographic keys they will use, etc. This interaction between the client and the server to establish the TLS connection is called the TLS handshake .","title":"TLS Handshake Start"},{"location":"deployment/https/#tls-with-sni-extension","text":"Only one process in the server can be listening on a specific port in a specific IP address . There could be other processes listening on other ports in the same IP address, but only one for each combination of IP address and port. TLS (HTTPS) uses the specific port 443 by default. So that's the port we would need. As only one process can be listening on this port, the process that would do it would be the TLS Termination Proxy . The TLS Termination Proxy would have access to one or more TLS certificates (HTTPS certificates). Using the SNI extension discussed above, the TLS Termination Proxy would check which of the TLS (HTTPS) certificates available it should use for this connection, using the one that matches the domain expected by the client. In this case, it would use the certificate for someapp.example.com . The client already trusts the entity that generated that TLS certificate (in this case Let's Encrypt, but we'll see about that later), so it can verify that the certificate is valid. Then, using the certificate, the client and the TLS Termination Proxy decide how to encrypt the rest of the TCP communication . This completes the TLS Handshake part. After this, the client and the server have an encrypted TCP connection , this is what TLS provides. And then they can use that connection to start the actual HTTP communication . And that's what HTTPS is, it's just plain HTTP inside a secure TLS connection instead of a pure (unencrypted) TCP connection. Tip Notice that the encryption of the communication happens at the TCP level , not at the HTTP level.","title":"TLS with SNI Extension"},{"location":"deployment/https/#https-request","text":"Now that the client and server (specifically the browser and the TLS Termination Proxy) have an encrypted TCP connection , they can start the HTTP communication . So, the client sends an HTTPS request . This is just an HTTP request through an encrypted TLS connection.","title":"HTTPS Request"},{"location":"deployment/https/#decrypt-the-request","text":"The TLS Termination Proxy would use the encryption agreed to decrypt the request , and would transmit the plain (decrypted) HTTP request to the process running the application (for example a process with Uvicorn running the FastAPI application).","title":"Decrypt the Request"},{"location":"deployment/https/#http-response","text":"The application would process the request and send a plain (unencrypted) HTTP response to the TLS Termination Proxy.","title":"HTTP Response"},{"location":"deployment/https/#https-response","text":"The TLS Termination Proxy would then encrypt the response using the cryptography agreed before (that started with the certificate for someapp.example.com ), and send it back to the browser. Next, the browser would verify that the response is valid and encrypted with the right cryptographic key, etc. It would then decrypt the response and process it. The client (browser) will know that the response comes from the correct server because it is using the cryptography they agreed using the HTTPS certificate before.","title":"HTTPS Response"},{"location":"deployment/https/#multiple-applications","text":"In the same server (or servers), there could be multiple applications , for example, other API programs or a database. Only one process can be handling the specific IP and port (the TLS Termination Proxy in our example) but the other applications/processes can be running on the server(s) too, as long as they don't try to use the same combination of public IP and port . That way, the TLS Termination Proxy could handle HTTPS and certificates for multiple domains , for multiple applications, and then transmit the requests to the right application in each case.","title":"Multiple Applications"},{"location":"deployment/https/#certificate-renewal","text":"At some point in the future, each certificate would expire (about 3 months after acquiring it). And then, there would be another program (in some cases it's another program, in some cases it could be the same TLS Termination Proxy) that would talk to Let's Encrypt, and renew the certificate(s). The TLS certificates are associated with a domain name , not with an IP address. So, to renew the certificates, the renewal program needs to prove to the authority (Let's Encrypt) that it indeed \"owns\" and controls that domain . To do that, and to accommodate different application needs, there are several ways it can do it. Some popular ways are: Modify some DNS records . For this, the renewal program needs to support the APIs of the DNS provider, so, depending on the DNS provider you are using, this might or might not be an option. Run as a server (at least during the certificate acquisition process) on the public IP address associated with the domain. As we said above, only one process can be listening on a specific IP and port. This is one of the reasons why it's very useful when the same TLS Termination Proxy also takes care of the certificate renewal process. Otherwise, you might have to stop the TLS Termination Proxy momentarily, start the renewal program to acquire the certificates, then configure them with the TLS Termination Proxy, and then restart the TLS Termination Proxy. This is not ideal, as your app(s) will not be available during the time that the TLS Termination Proxy is off. All this renewal process, while still serving the app, is one of the main reasons why you would want to have a separate system to handle HTTPS with a TLS Termination Proxy instead of just using the TLS certificates with the application server directly (e.g. Uvicorn).","title":"Certificate Renewal"},{"location":"deployment/https/#recap","text":"Having HTTPS is very important, and quite critical in most cases. Most of the effort you as a developer have to put around HTTPS is just about understanding these concepts and how they work. But once you know the basic information of HTTPS for developers you can easily combine and configure different tools to help you manage everything in a simple way. In some of the next chapters, I'll show you several concrete examples of how to set up HTTPS for FastAPI applications. \ud83d\udd12","title":"Recap"},{"location":"deployment/manually/","text":"Run a Server Manually - Uvicorn \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . The main thing you need to run a FastAPI application in a remote server machine is an ASGI server program like Uvicorn . There are 3 main alternatives: Uvicorn : a high performance ASGI server. Hypercorn : an ASGI server compatible with HTTP/2 and Trio among other features. Daphne : the ASGI server built for Django Channels. Server Machine and Server Program \u00b6 There's a small detail about names to have in mind. \ud83d\udca1 The word \" server \" is commonly used to refer to both the remote/cloud computer (the physical or virtual machine) and also the program that is running on that machine (e.g. Uvicorn). Just have that in mind when you read \"server\" in general, it could refer to one of those two things. When referring to the remote machine, it's common to call it server , but also machine , VM (virtual machine), node . Those all refer to some type of remote machine, normally running Linux, where you run programs. Install the Server Program \u00b6 You can install an ASGI compatible server with: Uvicorn Hypercorn Uvicorn , a lightning-fast ASGI server, built on uvloop and httptools. $ pip install \"uvicorn[standard]\" ---> 100% Tip By adding the standard , Uvicorn will install and use some recommended extra dependencies. That including uvloop , the high-performance drop-in replacement for asyncio , that provides the big concurrency performance boost. Hypercorn , an ASGI server also compatible with HTTP/2. $ pip install hypercorn ---> 100% ...or any other ASGI server. Run the Server Program \u00b6 You can then run your application the same way you have done in the tutorials, but without the --reload option, e.g.: Uvicorn Hypercorn $ uvicorn main:app --host 0 .0.0.0 --port 80 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit) $ hypercorn main:app --bind 0 .0.0.0:80 Running on 0.0.0.0:8080 over http (CTRL + C to quit) Warning Remember to remove the --reload option if you were using it. The --reload option consumes much more resources, is more unstable, etc. It helps a lot during development , but you shouldn't use it in production . Hypercorn with Trio \u00b6 Starlette and FastAPI are based on AnyIO , which makes them compatible with both Python's standard library asyncio and Trio . Nevertheless, Uvicorn is currently only compatible with asyncio, and it normally uses uvloop , the high-performance drop-in replacement for asyncio . But if you want to directly use Trio , then you can use Hypercorn as it supports it. \u2728 Install Hypercorn with Trio \u00b6 First you need to install Hypercorn with Trio support: $ pip install \"hypercorn[trio]\" ---> 100% Run with Trio \u00b6 Then you can pass the command line option --worker-class with the value trio : $ hypercorn main:app --worker-class trio And that will start Hypercorn with your app using Trio as the backend. Now you can use Trio internally in your app. Or even better, you can use AnyIO, to keep your code compatible with both Trio and asyncio. \ud83c\udf89 Deployment Concepts \u00b6 These examples run the server program (e.g Uvicorn), starting a single process , listening on all the IPs ( 0.0.0.0 ) on a predefined port (e.g. 80 ). This is the basic idea. But you will probably want to take care of some additional things, like: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting I'll tell you more about each of these concepts, how to think about them, and some concrete examples with strategies to handle them in the next chapters. \ud83d\ude80","title":"Run a Server Manually - Uvicorn"},{"location":"deployment/manually/#run-a-server-manually-uvicorn","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . The main thing you need to run a FastAPI application in a remote server machine is an ASGI server program like Uvicorn . There are 3 main alternatives: Uvicorn : a high performance ASGI server. Hypercorn : an ASGI server compatible with HTTP/2 and Trio among other features. Daphne : the ASGI server built for Django Channels.","title":"Run a Server Manually - Uvicorn"},{"location":"deployment/manually/#server-machine-and-server-program","text":"There's a small detail about names to have in mind. \ud83d\udca1 The word \" server \" is commonly used to refer to both the remote/cloud computer (the physical or virtual machine) and also the program that is running on that machine (e.g. Uvicorn). Just have that in mind when you read \"server\" in general, it could refer to one of those two things. When referring to the remote machine, it's common to call it server , but also machine , VM (virtual machine), node . Those all refer to some type of remote machine, normally running Linux, where you run programs.","title":"Server Machine and Server Program"},{"location":"deployment/manually/#install-the-server-program","text":"You can install an ASGI compatible server with: Uvicorn Hypercorn Uvicorn , a lightning-fast ASGI server, built on uvloop and httptools. $ pip install \"uvicorn[standard]\" ---> 100% Tip By adding the standard , Uvicorn will install and use some recommended extra dependencies. That including uvloop , the high-performance drop-in replacement for asyncio , that provides the big concurrency performance boost. Hypercorn , an ASGI server also compatible with HTTP/2. $ pip install hypercorn ---> 100% ...or any other ASGI server.","title":"Install the Server Program"},{"location":"deployment/manually/#run-the-server-program","text":"You can then run your application the same way you have done in the tutorials, but without the --reload option, e.g.: Uvicorn Hypercorn $ uvicorn main:app --host 0 .0.0.0 --port 80 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit) $ hypercorn main:app --bind 0 .0.0.0:80 Running on 0.0.0.0:8080 over http (CTRL + C to quit) Warning Remember to remove the --reload option if you were using it. The --reload option consumes much more resources, is more unstable, etc. It helps a lot during development , but you shouldn't use it in production .","title":"Run the Server Program"},{"location":"deployment/manually/#hypercorn-with-trio","text":"Starlette and FastAPI are based on AnyIO , which makes them compatible with both Python's standard library asyncio and Trio . Nevertheless, Uvicorn is currently only compatible with asyncio, and it normally uses uvloop , the high-performance drop-in replacement for asyncio . But if you want to directly use Trio , then you can use Hypercorn as it supports it. \u2728","title":"Hypercorn with Trio"},{"location":"deployment/manually/#install-hypercorn-with-trio","text":"First you need to install Hypercorn with Trio support: $ pip install \"hypercorn[trio]\" ---> 100%","title":"Install Hypercorn with Trio"},{"location":"deployment/manually/#run-with-trio","text":"Then you can pass the command line option --worker-class with the value trio : $ hypercorn main:app --worker-class trio And that will start Hypercorn with your app using Trio as the backend. Now you can use Trio internally in your app. Or even better, you can use AnyIO, to keep your code compatible with both Trio and asyncio. \ud83c\udf89","title":"Run with Trio"},{"location":"deployment/manually/#deployment-concepts","text":"These examples run the server program (e.g Uvicorn), starting a single process , listening on all the IPs ( 0.0.0.0 ) on a predefined port (e.g. 80 ). This is the basic idea. But you will probably want to take care of some additional things, like: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting I'll tell you more about each of these concepts, how to think about them, and some concrete examples with strategies to handle them in the next chapters. \ud83d\ude80","title":"Deployment Concepts"},{"location":"deployment/server-workers/","text":"\uc11c\ubc84 \uc6cc\ucee4 - \uad6c\ub2c8\ucf58\uacfc \uc720\ube44\ucf58 \u00b6 \uc804\ub2e8\uacc4\uc5d0\uc11c\uc758 \ubc30\ud3ec \uac1c\ub150\ub4e4\uc744 \ub2e4\uc2dc \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4: \ubcf4\uc548 - HTTPS \uc11c\ubc84 \uc2dc\uc791\uacfc \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\ud558\uae30 \uc7ac\uc2dc\uc791 \ubcf5\uc81c\ubcf8 (\uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uc138\uc2a4\uc758 \uc22b\uc790) \uba54\ubaa8\ub9ac \uc2dc\uc791\ud558\uae30 \uc804\uc758 \uc5ec\ub7ec \ub2e8\uacc4\ub4e4 \uc9c0\uae08\uae4c\uc9c0 \ubb38\uc11c\uc758 \ubaa8\ub4e0 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ucc38\uace0\ud558\uc5ec \ub2e8\uc77c \ud504\ub85c\uc138\uc2a4 \ub85c Uvicorn\uacfc \uac19\uc740 \uc11c\ubc84 \ud504\ub85c\uadf8\ub7a8 \uc744 \uc2e4\ud589\ud588\uc744 \uac83\uc785\ub2c8\ub2e4. \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ubc30\ud3ec\ud560 \ub54c \ub2e4\uc911 \ucf54\uc5b4 \ub97c \ud65c\uc6a9\ud558\uace0 \ub354 \ub9ce\uc740 \uc694\uccad\uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \ud504\ub85c\uc138\uc2a4 \ubcf5\uc81c\ubcf8 \uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \uc804 \uacfc\uc815\uc774\uc5c8\ub358 \ubc30\ud3ec \uac1c\ub150\ub4e4 \uc5d0\uc11c \ubcf8 \uac83\ucc98\ub7fc \uc5ec\ub7ec\uac00\uc9c0 \ubc29\ubc95\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. \uc9c0\uae08\ubd80\ud130 \uad6c\ub2c8\ucf58 \uc744 \uc720\ube44\ucf58 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \uc640 \ud568\uaed8 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\ub824\ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \ub9cc\uc57d \ub3c4\ucee4\uc640 \ucfe0\ubc84\ub124\ud2f0\uc2a4 \uac19\uc740 \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74 \ub2e4\uc74c \ucc55\ud130 FastAPI\uc640 \ucee8\ud14c\uc774\ub108 - \ub3c4\ucee4 \uc5d0\uc11c \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud2b9\ud788, \ucfe0\ubc84\ub124\ud2f0\uc2a4\uc5d0\uc11c \uc2e4\ud589\ud560 \ub54c\ub294 \uad6c\ub2c8\ucf58\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \ub300\uc2e0 \ucee8\ud14c\uc774\ub108\ub2f9 \ud558\ub098\uc758 \uc720\ube44\ucf58 \ud504\ub85c\uc138\uc2a4\ub97c \uc2e4\ud589\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uc774 \uc7a5\uc758 \ub4b7\ubd80\ubd84\uc5d0\uc11c \uc124\uba85\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uad6c\ub2c8\ucf58\uacfc \uc720\ube44\ucf58 \uc6cc\ucee4 \u00b6 Gunicorn \uc740 WSGI \ud45c\uc900 \uc744 \uc8fc\ub85c \uc0ac\uc6a9\ud558\ub294 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc11c\ubc84\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \uad6c\ub2c8\ucf58\uc774 \ud50c\ub77c\uc2a4\ud06c\uc640 \uc7dd\uace0\uc640 \uac19\uc740 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc81c\uacf5\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uad6c\ub2c8\ucf58 \uc790\uccb4\ub294 \ucd5c\uc2e0 ASGI \ud45c\uc900 \uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0 FastAPI\uc640 \ud638\ud658\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uad6c\ub2c8\ucf58\uc740 \ud504\ub85c\uc138\uc2a4 \uad00\ub9ac\uc790 \uc5ed\ud560\uc744 \ud558\uace0 \uc0ac\uc6a9\uc790\uc5d0\uac8c \ud2b9\uc815 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \ud074\ub798\uc2a4 \ub97c \uc54c\ub824\uc90d\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \uad6c\ub2c8\ucf58\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud558\ub098 \uc774\uc0c1\uc758 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \ub97c \uc2dc\uc791\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc720\ube44\ucf58 \uc740 \uad6c\ub2c8\ucf58\uacfc \ud638\ud658\ub418\ub294 \uc6cc\ucee4 \ud074\ub798\uc2a4 \uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc870\ud569\uc744 \uc0ac\uc6a9\ud558\uc5ec \uad6c\ub2c8\ucf58\uc740 \ud504\ub85c\uc138\uc2a4 \uad00\ub9ac\uc790 \uc5ed\ud560\uc744 \ud558\uba70 \ud3ec\ud2b8 \uc640 IP \ub97c \uad00\ucc30\ud558\uace0, \uc720\ube44\ucf58 \ud074\ub798\uc2a4 \ub97c \uc2e4\ud589\ud558\ub294 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\ub85c \ud1b5\uc2e0 \uc815\ubcf4\ub97c \uc804\uc1a1 \ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc11c \uad6c\ub2c8\ucf58\uacfc \ud638\ud658\ub418\ub294 \uc720\ube44\ucf58 \uc6cc\ucee4 \ud074\ub798\uc2a4\ub294 \uad6c\ub2c8\ucf58\uc774 \ubcf4\ub0b8 \ub370\uc774\ud130\ub97c FastAPI\uc5d0\uc11c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c ASGI \ud45c\uc900\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \uc77c\uc744 \ub2f4\ub2f9\ud569\ub2c8\ub2e4. \uad6c\ub2c8\ucf58\uacfc \uc720\ube44\ucf58 \uc124\uce58\ud558\uae30 \u00b6 $ pip install \"uvicorn[standard]\" gunicorn ---> 100% \uc774 \uba85\ub839\uc5b4\ub294 \uc720\ube44\ucf58 standard \ucd94\uac00 \ud328\ud0a4\uc9c0(\uc88b\uc740 \uc131\ub2a5\uc744 \uc704\ud55c)\uc640 \uad6c\ub2c8\ucf58\uc744 \uc124\uce58\ud560 \uac83\uc785\ub2c8\ub2e4. \uad6c\ub2c8\ucf58\uc744 \uc720\ube44\ucf58 \uc6cc\ucee4\uc640 \ud568\uaed8 \uc2e4\ud589\ud558\uae30 \u00b6 \uc124\uce58 \ud6c4 \uad6c\ub2c8\ucf58 \uc2e4\ud589\ud558\uae30: $ gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0 .0.0.0:80 [19499] [INFO] Starting gunicorn 20.1.0 [19499] [INFO] Listening at: http://0.0.0.0:80 (19499) [19499] [INFO] Using worker: uvicorn.workers.UvicornWorker [19511] [INFO] Booting worker with pid: 19511 [19513] [INFO] Booting worker with pid: 19513 [19514] [INFO] Booting worker with pid: 19514 [19515] [INFO] Booting worker with pid: 19515 [19511] [INFO] Started server process [19511] [19511] [INFO] Waiting for application startup. [19511] [INFO] Application startup complete. [19513] [INFO] Started server process [19513] [19513] [INFO] Waiting for application startup. [19513] [INFO] Application startup complete. [19514] [INFO] Started server process [19514] [19514] [INFO] Waiting for application startup. [19514] [INFO] Application startup complete. [19515] [INFO] Started server process [19515] [19515] [INFO] Waiting for application startup. [19515] [INFO] Application startup complete. \uac01 \uc635\uc158\uc774 \ubb34\uc5c7\uc744 \uc758\ubbf8\ud558\ub294\uc9c0 \uc0b4\ud3b4\ubd05\uc2dc\ub2e4: \uc774\uac83\uc740 \uc720\ube44\ucf58\uacfc \ub611\uac19\uc740 \ubb38\ubc95\uc785\ub2c8\ub2e4. main \uc740 \ud30c\uc774\uc36c \ubaa8\ub4c8 \ub124\uc784 \" main \"\uc744 \uc758\ubbf8\ud558\ubbc0\ub85c main.py \ud30c\uc77c\uc744 \ub73b\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 app \uc740 FastAPI \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \ub4e4\uc5b4 \uc788\ub294 \ubcc0\uc218\uc758 \uc774\ub984\uc785\ub2c8\ub2e4. main:app \uc774 \ud30c\uc774\uc36c\uc758 import \ubb38\ubc95\uacfc \ud761\uc0ac\ud55c \uba74\uc774 \uc788\ub2e4\ub294 \uac78 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4: from main import app \uace7, main:app \uc548\uc5d0 \uc788\ub294 \ucf5c\ub860\uc758 \uc758\ubbf8\ub294 \ud30c\uc774\uc36c\uc5d0\uc11c from main import app \uc5d0\uc11c\uc758 import \uc640 \uac19\uc2b5\ub2c8\ub2e4. --workers : \uc0ac\uc6a9\ud560 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\uc758 \uac1c\uc218\uc774\uba70 \uc22b\uc790\ub9cc\ud07c\uc758 \uc720\ube44\ucf58 \uc6cc\ucee4\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc774 \uc608\uc81c\uc5d0\uc11c\ub294 4\uac1c\uc758 \uc6cc\ucee4\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. --worker-class : \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \uad6c\ub2c8\ucf58\uacfc \ud638\ud658\ub418\ub294 \uc6cc\ucee4\ud074\ub798\uc2a4. \uc774\ub7f0\uc2dd\uc73c\ub85c \uad6c\ub2c8\ucf58\uc774 import\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ud074\ub798\uc2a4\ub97c \uc804\ub2ec\ud574\uc90d\ub2c8\ub2e4: import uvicorn.workers.UvicornWorker --bind : \uad6c\ub2c8\ucf58\uc774 \uad00\ucc30\ud560 IP\uc640 \ud3ec\ud2b8\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \ucf5c\ub860 ( : )\uc744 \uc0ac\uc6a9\ud558\uc5ec IP\uc640 \ud3ec\ud2b8\ub97c \uad6c\ubd84\ud569\ub2c8\ub2e4. \ub9cc\uc57d\uc5d0 --bind 0.0.0.0:80 (\uad6c\ub2c8\ucf58 \uc635\uc158) \ub300\uc2e0 \uc720\ube44\ucf58\uc744 \uc9c1\uc811 \uc2e4\ud589\ud558\uace0 \uc2f6\ub2e4\uba74 --host 0.0.0.0 \uacfc --port 80 \uc744 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \ucd9c\ub825\uc5d0\uc11c \uac01 \ud504\ub85c\uc138\uc2a4\uc5d0 \ub300\ud55c PID (process ID)\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\ub2e8\uc21c\ud55c \uc22b\uc790\uc785\ub2c8\ub2e4) \ucd9c\ub825 \ub0b4\uc6a9: \uad6c\ub2c8\ucf58 \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800 \ub294 PID 19499 \ub85c \uc2e4\ud589\ub429\ub2c8\ub2e4. (\uc9c1\uc811 \uc2e4\ud589\ud560 \uacbd\uc6b0 \uc22b\uc790\uac00 \ub2e4\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4) \ub2e4\uc74c\uc73c\ub85c Listening at: http://0.0.0.0:80 \uc744 \uc2dc\uc791\ud569\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \uc0ac\uc6a9\ud574\uc57c\ud560 uvicorn.workers.UvicornWorker \uc758 \uc6cc\ucee4\ud074\ub798\uc2a4\ub97c \ud0d0\uc9c0\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 PID 19511 , 19513 , 19514 , \uadf8\ub9ac\uace0 19515 \ub97c \uac00\uc9c4 4\uac1c\uc758 \uc6cc\ucee4 \ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \ub610\ud55c \uad6c\ub2c8\ucf58\uc740 \uc6cc\ucee4\uc758 \uc218\ub97c \uc720\uc9c0\ud558\uae30 \uc704\ud574 \uc8fd\uc740 \ud504\ub85c\uc138\uc2a4 \ub97c \uad00\ub9ac\ud558\uace0 \uc7ac\uc2dc\uc791 \ud558\ub294 \uc791\uc5c5\uc744 \ucc45\uc784\uc9d1\ub2c8\ub2e4. \uc774\uac83\uc740 \uc774\ubc88 \uc7a5 \uc0c1\ub2e8 \ubaa9\ub85d\uc758 \uc7ac\uc2dc\uc791 \uac1c\ub150\uc744 \ubd80\ubd84\uc801\uc73c\ub85c \ub3c4\uc640\uc8fc\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7fc\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 \ud544\uc694\ud560 \uacbd\uc6b0 \uc678\ubd80\uc5d0\uc11c \uad6c\ub2c8\ucf58\uc744 \uc7ac\uc2dc\uc791 \ud558\uace0, \ud639\uc740 \uc11c\ubc84\ub97c \uc2dc\uc791\ud560 \ub54c \uc2e4\ud589 \ud560 \uc218 \uc788\ub3c4\ub85d \ud558\uace0 \uc2f6\uc5b4\ud560 \uac83\uc785\ub2c8\ub2e4. \uc720\ube44\ucf58\uacfc \uc6cc\ucee4 \u00b6 \uc720\ube44\ucf58\uc740 \uba87 \uac1c\uc758 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \uc640 \ud568\uaed8 \uc2e4\ud589\ud560 \uc218 \uc788\ub294 \uc120\ud0dd\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7fc\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0, \uc720\ube44\ucf58\uc740 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\ub97c \ub2e4\ub8e8\ub294 \ub370\uc5d0 \uc788\uc5b4\uc11c \uad6c\ub2c8\ucf58\ubcf4\ub2e4 \ub354 \uc81c\ud55c\uc801\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc774 \uc218\uc900(\ud30c\uc774\uc36c \uc218\uc900)\uc758 \ud504\ub85c\uc138\uc2a4 \uad00\ub9ac\uc790\ub97c \uc0ac\uc6a9\ud558\ub824\uba74 \uad6c\ub2c8\ucf58\uc744 \ud504\ub85c\uc138\uc2a4 \uad00\ub9ac\uc790\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \ubcf4\ud1b5 \uc774\ub807\uac8c \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: $ uvicorn main:app --host 0 .0.0.0 --port 8080 --workers 4 <font color=\"#A6E22E\">INFO</font>: Uvicorn running on <b>http://0.0.0.0:8080</b> (Press CTRL+C to quit) <font color=\"#A6E22E\">INFO</font>: Started parent process [<font color=\"#A1EFE4\"><b>27365</b></font>] <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27368</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27369</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27370</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27367</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. \uc0c8\ub85c\uc6b4 \uc635\uc158\uc778 --workers \uc740 \uc720\ube44\ucf58\uc5d0\uac8c 4\uac1c\uc758 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uace0 \uc54c\ub824\uc90d\ub2c8\ub2e4. \uac01 \ud504\ub85c\uc138\uc2a4\uc758 PID \ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 27365 \ub294 \uc0c1\uc704 \ud504\ub85c\uc138\uc2a4( \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800 ), \uadf8\ub9ac\uace0 \uac01\uac01\uc758 \uc6cc\ucee4\ud504\ub85c\uc138\uc2a4\ub294 27368 , 27369 , 27370 , \uadf8\ub9ac\uace0 27367 \uc785\ub2c8\ub2e4. \ubc30\ud3ec \uac1c\ub150\ub4e4 \u00b6 \uc5ec\uae30\uc5d0\uc11c\ub294 \uc720\ube44\ucf58 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \ub97c \uad00\ub9ac\ud558\ub294 \uad6c\ub2c8\ucf58 (\ub610\ub294 \uc720\ube44\ucf58)\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ubcd1\ub82c\ud654 \ud558\uace0, CPU \uba40\ud2f0 \ucf54\uc5b4 \uc758 \uc7a5\uc810\uc744 \ud65c\uc6a9\ud558\uace0, \ub354 \ub9ce\uc740 \uc694\uccad \uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc744 \uc0b4\ud3b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc6cc\ucee4\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ubc30\ud3ec \uac1c\ub150 \ubaa9\ub85d\uc5d0\uc11c \uc8fc\ub85c \ubcf5\uc81c\ubcf8 \ubd80\ubd84\uacfc \uc7ac\uc2dc\uc791 \uc5d0 \uc57d\uac04 \ub3c4\uc6c0\uc774 \ub418\uc9c0\ub9cc \ub2e4\ub978 \ubc30\ud3ec \uac1c\ub150\ub4e4\ub3c4 \ub2e4\ub8e8\uc5b4\uc57c \ud569\ub2c8\ub2e4: \ubcf4\uc548 - HTTPS \uc11c\ubc84 \uc2dc\uc791\uacfc \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\ud558\uae30 \uc7ac\uc2dc\uc791 \ubcf5\uc81c\ubcf8 (\uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uc138\uc2a4\uc758 \uc22b\uc790) \uba54\ubaa8\ub9ac \uc2dc\uc791\ud558\uae30 \uc804\uc758 \uc5ec\ub7ec \ub2e8\uacc4\ub4e4 \ucee8\ud14c\uc774\ub108\uc640 \ub3c4\ucee4 \u00b6 \ub2e4\uc74c \uc7a5\uc778 FastAPI\uc640 \ucee8\ud14c\uc774\ub108 - \ub3c4\ucee4 \uc5d0\uc11c \ub2e4\ub978 \ubc30\ud3ec \uac1c\ub150\ub4e4 \uc744 \ub2e4\ub8e8\ub294 \uc804\ub7b5\ub4e4\uc744 \uc54c\ub824\ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uac04\ub2e8\ud55c \ucf00\uc774\uc2a4\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294, \uad6c\ub2c8\ucf58\uacfc \uc720\ube44\ucf58 \uc6cc\ucee4 \uac00 \ud3ec\ud568\ub3fc \uc788\ub294 \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \uc640 \ud568\uaed8 \uba87 \uac00\uc9c0 \uae30\ubcf8 \uad6c\uc131\uc744 \ubcf4\uc5ec\ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub2e8\uc77c \uc720\ube44\ucf58 \ud504\ub85c\uc138\uc2a4(\uad6c\ub2c8\ucf58 \uc5c6\uc774)\ub97c \uc2e4\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \uc0ac\uc6a9\uc790 \uc790\uc2e0\uc758 \uc774\ubbf8\uc9c0\ub97c \ucc98\uc74c\ubd80\ud130 \uad6c\ucd95 \ud558\ub294 \ubc29\ubc95\ub3c4 \ubcf4\uc5ec\ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uac04\ub2e8\ud55c \uacfc\uc815\uc774\uba70, \ucfe0\ubc84\ub124\ud2f0\uc2a4 \uc640 \uac19\uc740 \ubd84\uc0b0 \ucee8\ud14c\uc774\ub108 \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc744 \uc0ac\uc6a9\ud560 \ub54c \uc218\ud589\ud560 \uc791\uc5c5\uc785\ub2c8\ub2e4. \uc694\uc57d \u00b6 \ub2f9\uc2e0\uc740 \uad6c\ub2c8\ucf58 (\ub610\ub294 \uc720\ube44\ucf58)\uc744 \uc720\ube44\ucf58 \uc6cc\ucee4\uc640 \ud568\uaed8 \ud504\ub85c\uc138\uc2a4 \uad00\ub9ac\uc790\ub85c \uc0ac\uc6a9\ud558\uc5ec \uba40\ud2f0-\ucf54\uc5b4 CPU \ub97c \ud65c\uc6a9\ud558\ub294 \uba40\ud2f0 \ud504\ub85c\uc138\uc2a4\ub97c \ubcd1\ub82c\ub85c \uc2e4\ud589 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\ub978 \ubc30\ud3ec \uac1c\ub150\uc744 \uc9c1\uc811 \ub2e4\ub8e8\uba74\uc11c \uc790\uc2e0\ub9cc\uc758 \ubc30\ud3ec \uc2dc\uc2a4\ud15c \uc744 \uad6c\uc131\ud558\ub294 \uacbd\uc6b0 \uc774\ub7ec\ud55c \ub3c4\uad6c\uc640 \uac1c\ub150\ub4e4\uc744 \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc7a5\uc5d0\uc11c \ucee8\ud14c\uc774\ub108(\uc608: \ub3c4\ucee4 \ubc0f \ucfe0\ubc84\ub124\ud2f0\uc2a4)\uc640 \ud568\uaed8\ud558\ub294 FastAPI \uc5d0 \ub300\ud574 \ubc30\uc6cc\ubcf4\uc138\uc694. \uc774\ub7ec\ud55c \ud234\uc5d0\ub294 \ub2e4\ub978 \ubc30\ud3ec \uac1c\ub150 \ub4e4\uc744 \uac04\ub2e8\ud788 \ud574\uacb0\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \u2728","title":"\uc11c\ubc84 \uc6cc\ucee4 - \uad6c\ub2c8\ucf58\uacfc \uc720\ube44\ucf58"},{"location":"deployment/server-workers/#-","text":"\uc804\ub2e8\uacc4\uc5d0\uc11c\uc758 \ubc30\ud3ec \uac1c\ub150\ub4e4\uc744 \ub2e4\uc2dc \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4: \ubcf4\uc548 - HTTPS \uc11c\ubc84 \uc2dc\uc791\uacfc \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\ud558\uae30 \uc7ac\uc2dc\uc791 \ubcf5\uc81c\ubcf8 (\uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uc138\uc2a4\uc758 \uc22b\uc790) \uba54\ubaa8\ub9ac \uc2dc\uc791\ud558\uae30 \uc804\uc758 \uc5ec\ub7ec \ub2e8\uacc4\ub4e4 \uc9c0\uae08\uae4c\uc9c0 \ubb38\uc11c\uc758 \ubaa8\ub4e0 \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ucc38\uace0\ud558\uc5ec \ub2e8\uc77c \ud504\ub85c\uc138\uc2a4 \ub85c Uvicorn\uacfc \uac19\uc740 \uc11c\ubc84 \ud504\ub85c\uadf8\ub7a8 \uc744 \uc2e4\ud589\ud588\uc744 \uac83\uc785\ub2c8\ub2e4. \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ubc30\ud3ec\ud560 \ub54c \ub2e4\uc911 \ucf54\uc5b4 \ub97c \ud65c\uc6a9\ud558\uace0 \ub354 \ub9ce\uc740 \uc694\uccad\uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \ud504\ub85c\uc138\uc2a4 \ubcf5\uc81c\ubcf8 \uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \uc804 \uacfc\uc815\uc774\uc5c8\ub358 \ubc30\ud3ec \uac1c\ub150\ub4e4 \uc5d0\uc11c \ubcf8 \uac83\ucc98\ub7fc \uc5ec\ub7ec\uac00\uc9c0 \ubc29\ubc95\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. \uc9c0\uae08\ubd80\ud130 \uad6c\ub2c8\ucf58 \uc744 \uc720\ube44\ucf58 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \uc640 \ud568\uaed8 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\ub824\ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \ub9cc\uc57d \ub3c4\ucee4\uc640 \ucfe0\ubc84\ub124\ud2f0\uc2a4 \uac19\uc740 \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74 \ub2e4\uc74c \ucc55\ud130 FastAPI\uc640 \ucee8\ud14c\uc774\ub108 - \ub3c4\ucee4 \uc5d0\uc11c \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud2b9\ud788, \ucfe0\ubc84\ub124\ud2f0\uc2a4\uc5d0\uc11c \uc2e4\ud589\ud560 \ub54c\ub294 \uad6c\ub2c8\ucf58\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \ub300\uc2e0 \ucee8\ud14c\uc774\ub108\ub2f9 \ud558\ub098\uc758 \uc720\ube44\ucf58 \ud504\ub85c\uc138\uc2a4\ub97c \uc2e4\ud589\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uc774 \uc7a5\uc758 \ub4b7\ubd80\ubd84\uc5d0\uc11c \uc124\uba85\ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"\uc11c\ubc84 \uc6cc\ucee4 - \uad6c\ub2c8\ucf58\uacfc \uc720\ube44\ucf58"},{"location":"deployment/server-workers/#_1","text":"Gunicorn \uc740 WSGI \ud45c\uc900 \uc744 \uc8fc\ub85c \uc0ac\uc6a9\ud558\ub294 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc11c\ubc84\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \uad6c\ub2c8\ucf58\uc774 \ud50c\ub77c\uc2a4\ud06c\uc640 \uc7dd\uace0\uc640 \uac19\uc740 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc81c\uacf5\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uad6c\ub2c8\ucf58 \uc790\uccb4\ub294 \ucd5c\uc2e0 ASGI \ud45c\uc900 \uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0 FastAPI\uc640 \ud638\ud658\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uad6c\ub2c8\ucf58\uc740 \ud504\ub85c\uc138\uc2a4 \uad00\ub9ac\uc790 \uc5ed\ud560\uc744 \ud558\uace0 \uc0ac\uc6a9\uc790\uc5d0\uac8c \ud2b9\uc815 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \ud074\ub798\uc2a4 \ub97c \uc54c\ub824\uc90d\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \uad6c\ub2c8\ucf58\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud558\ub098 \uc774\uc0c1\uc758 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \ub97c \uc2dc\uc791\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc720\ube44\ucf58 \uc740 \uad6c\ub2c8\ucf58\uacfc \ud638\ud658\ub418\ub294 \uc6cc\ucee4 \ud074\ub798\uc2a4 \uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc870\ud569\uc744 \uc0ac\uc6a9\ud558\uc5ec \uad6c\ub2c8\ucf58\uc740 \ud504\ub85c\uc138\uc2a4 \uad00\ub9ac\uc790 \uc5ed\ud560\uc744 \ud558\uba70 \ud3ec\ud2b8 \uc640 IP \ub97c \uad00\ucc30\ud558\uace0, \uc720\ube44\ucf58 \ud074\ub798\uc2a4 \ub97c \uc2e4\ud589\ud558\ub294 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\ub85c \ud1b5\uc2e0 \uc815\ubcf4\ub97c \uc804\uc1a1 \ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc11c \uad6c\ub2c8\ucf58\uacfc \ud638\ud658\ub418\ub294 \uc720\ube44\ucf58 \uc6cc\ucee4 \ud074\ub798\uc2a4\ub294 \uad6c\ub2c8\ucf58\uc774 \ubcf4\ub0b8 \ub370\uc774\ud130\ub97c FastAPI\uc5d0\uc11c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c ASGI \ud45c\uc900\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \uc77c\uc744 \ub2f4\ub2f9\ud569\ub2c8\ub2e4.","title":"\uad6c\ub2c8\ucf58\uacfc \uc720\ube44\ucf58 \uc6cc\ucee4"},{"location":"deployment/server-workers/#_2","text":"$ pip install \"uvicorn[standard]\" gunicorn ---> 100% \uc774 \uba85\ub839\uc5b4\ub294 \uc720\ube44\ucf58 standard \ucd94\uac00 \ud328\ud0a4\uc9c0(\uc88b\uc740 \uc131\ub2a5\uc744 \uc704\ud55c)\uc640 \uad6c\ub2c8\ucf58\uc744 \uc124\uce58\ud560 \uac83\uc785\ub2c8\ub2e4.","title":"\uad6c\ub2c8\ucf58\uacfc \uc720\ube44\ucf58 \uc124\uce58\ud558\uae30"},{"location":"deployment/server-workers/#_3","text":"\uc124\uce58 \ud6c4 \uad6c\ub2c8\ucf58 \uc2e4\ud589\ud558\uae30: $ gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0 .0.0.0:80 [19499] [INFO] Starting gunicorn 20.1.0 [19499] [INFO] Listening at: http://0.0.0.0:80 (19499) [19499] [INFO] Using worker: uvicorn.workers.UvicornWorker [19511] [INFO] Booting worker with pid: 19511 [19513] [INFO] Booting worker with pid: 19513 [19514] [INFO] Booting worker with pid: 19514 [19515] [INFO] Booting worker with pid: 19515 [19511] [INFO] Started server process [19511] [19511] [INFO] Waiting for application startup. [19511] [INFO] Application startup complete. [19513] [INFO] Started server process [19513] [19513] [INFO] Waiting for application startup. [19513] [INFO] Application startup complete. [19514] [INFO] Started server process [19514] [19514] [INFO] Waiting for application startup. [19514] [INFO] Application startup complete. [19515] [INFO] Started server process [19515] [19515] [INFO] Waiting for application startup. [19515] [INFO] Application startup complete. \uac01 \uc635\uc158\uc774 \ubb34\uc5c7\uc744 \uc758\ubbf8\ud558\ub294\uc9c0 \uc0b4\ud3b4\ubd05\uc2dc\ub2e4: \uc774\uac83\uc740 \uc720\ube44\ucf58\uacfc \ub611\uac19\uc740 \ubb38\ubc95\uc785\ub2c8\ub2e4. main \uc740 \ud30c\uc774\uc36c \ubaa8\ub4c8 \ub124\uc784 \" main \"\uc744 \uc758\ubbf8\ud558\ubbc0\ub85c main.py \ud30c\uc77c\uc744 \ub73b\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 app \uc740 FastAPI \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \ub4e4\uc5b4 \uc788\ub294 \ubcc0\uc218\uc758 \uc774\ub984\uc785\ub2c8\ub2e4. main:app \uc774 \ud30c\uc774\uc36c\uc758 import \ubb38\ubc95\uacfc \ud761\uc0ac\ud55c \uba74\uc774 \uc788\ub2e4\ub294 \uac78 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4: from main import app \uace7, main:app \uc548\uc5d0 \uc788\ub294 \ucf5c\ub860\uc758 \uc758\ubbf8\ub294 \ud30c\uc774\uc36c\uc5d0\uc11c from main import app \uc5d0\uc11c\uc758 import \uc640 \uac19\uc2b5\ub2c8\ub2e4. --workers : \uc0ac\uc6a9\ud560 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\uc758 \uac1c\uc218\uc774\uba70 \uc22b\uc790\ub9cc\ud07c\uc758 \uc720\ube44\ucf58 \uc6cc\ucee4\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc774 \uc608\uc81c\uc5d0\uc11c\ub294 4\uac1c\uc758 \uc6cc\ucee4\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. --worker-class : \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \uad6c\ub2c8\ucf58\uacfc \ud638\ud658\ub418\ub294 \uc6cc\ucee4\ud074\ub798\uc2a4. \uc774\ub7f0\uc2dd\uc73c\ub85c \uad6c\ub2c8\ucf58\uc774 import\ud558\uc5ec \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ud074\ub798\uc2a4\ub97c \uc804\ub2ec\ud574\uc90d\ub2c8\ub2e4: import uvicorn.workers.UvicornWorker --bind : \uad6c\ub2c8\ucf58\uc774 \uad00\ucc30\ud560 IP\uc640 \ud3ec\ud2b8\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \ucf5c\ub860 ( : )\uc744 \uc0ac\uc6a9\ud558\uc5ec IP\uc640 \ud3ec\ud2b8\ub97c \uad6c\ubd84\ud569\ub2c8\ub2e4. \ub9cc\uc57d\uc5d0 --bind 0.0.0.0:80 (\uad6c\ub2c8\ucf58 \uc635\uc158) \ub300\uc2e0 \uc720\ube44\ucf58\uc744 \uc9c1\uc811 \uc2e4\ud589\ud558\uace0 \uc2f6\ub2e4\uba74 --host 0.0.0.0 \uacfc --port 80 \uc744 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \ucd9c\ub825\uc5d0\uc11c \uac01 \ud504\ub85c\uc138\uc2a4\uc5d0 \ub300\ud55c PID (process ID)\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\ub2e8\uc21c\ud55c \uc22b\uc790\uc785\ub2c8\ub2e4) \ucd9c\ub825 \ub0b4\uc6a9: \uad6c\ub2c8\ucf58 \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800 \ub294 PID 19499 \ub85c \uc2e4\ud589\ub429\ub2c8\ub2e4. (\uc9c1\uc811 \uc2e4\ud589\ud560 \uacbd\uc6b0 \uc22b\uc790\uac00 \ub2e4\ub97c \uc218 \uc788\uc2b5\ub2c8\ub2e4) \ub2e4\uc74c\uc73c\ub85c Listening at: http://0.0.0.0:80 \uc744 \uc2dc\uc791\ud569\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \uc0ac\uc6a9\ud574\uc57c\ud560 uvicorn.workers.UvicornWorker \uc758 \uc6cc\ucee4\ud074\ub798\uc2a4\ub97c \ud0d0\uc9c0\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 PID 19511 , 19513 , 19514 , \uadf8\ub9ac\uace0 19515 \ub97c \uac00\uc9c4 4\uac1c\uc758 \uc6cc\ucee4 \ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \ub610\ud55c \uad6c\ub2c8\ucf58\uc740 \uc6cc\ucee4\uc758 \uc218\ub97c \uc720\uc9c0\ud558\uae30 \uc704\ud574 \uc8fd\uc740 \ud504\ub85c\uc138\uc2a4 \ub97c \uad00\ub9ac\ud558\uace0 \uc7ac\uc2dc\uc791 \ud558\ub294 \uc791\uc5c5\uc744 \ucc45\uc784\uc9d1\ub2c8\ub2e4. \uc774\uac83\uc740 \uc774\ubc88 \uc7a5 \uc0c1\ub2e8 \ubaa9\ub85d\uc758 \uc7ac\uc2dc\uc791 \uac1c\ub150\uc744 \ubd80\ubd84\uc801\uc73c\ub85c \ub3c4\uc640\uc8fc\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7fc\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 \ud544\uc694\ud560 \uacbd\uc6b0 \uc678\ubd80\uc5d0\uc11c \uad6c\ub2c8\ucf58\uc744 \uc7ac\uc2dc\uc791 \ud558\uace0, \ud639\uc740 \uc11c\ubc84\ub97c \uc2dc\uc791\ud560 \ub54c \uc2e4\ud589 \ud560 \uc218 \uc788\ub3c4\ub85d \ud558\uace0 \uc2f6\uc5b4\ud560 \uac83\uc785\ub2c8\ub2e4.","title":"\uad6c\ub2c8\ucf58\uc744 \uc720\ube44\ucf58 \uc6cc\ucee4\uc640 \ud568\uaed8 \uc2e4\ud589\ud558\uae30"},{"location":"deployment/server-workers/#_4","text":"\uc720\ube44\ucf58\uc740 \uba87 \uac1c\uc758 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \uc640 \ud568\uaed8 \uc2e4\ud589\ud560 \uc218 \uc788\ub294 \uc120\ud0dd\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7fc\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0, \uc720\ube44\ucf58\uc740 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\ub97c \ub2e4\ub8e8\ub294 \ub370\uc5d0 \uc788\uc5b4\uc11c \uad6c\ub2c8\ucf58\ubcf4\ub2e4 \ub354 \uc81c\ud55c\uc801\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc774 \uc218\uc900(\ud30c\uc774\uc36c \uc218\uc900)\uc758 \ud504\ub85c\uc138\uc2a4 \uad00\ub9ac\uc790\ub97c \uc0ac\uc6a9\ud558\ub824\uba74 \uad6c\ub2c8\ucf58\uc744 \ud504\ub85c\uc138\uc2a4 \uad00\ub9ac\uc790\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \ubcf4\ud1b5 \uc774\ub807\uac8c \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: $ uvicorn main:app --host 0 .0.0.0 --port 8080 --workers 4 <font color=\"#A6E22E\">INFO</font>: Uvicorn running on <b>http://0.0.0.0:8080</b> (Press CTRL+C to quit) <font color=\"#A6E22E\">INFO</font>: Started parent process [<font color=\"#A1EFE4\"><b>27365</b></font>] <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27368</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27369</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27370</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27367</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. \uc0c8\ub85c\uc6b4 \uc635\uc158\uc778 --workers \uc740 \uc720\ube44\ucf58\uc5d0\uac8c 4\uac1c\uc758 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uace0 \uc54c\ub824\uc90d\ub2c8\ub2e4. \uac01 \ud504\ub85c\uc138\uc2a4\uc758 PID \ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 27365 \ub294 \uc0c1\uc704 \ud504\ub85c\uc138\uc2a4( \ud504\ub85c\uc138\uc2a4 \ub9e4\ub2c8\uc800 ), \uadf8\ub9ac\uace0 \uac01\uac01\uc758 \uc6cc\ucee4\ud504\ub85c\uc138\uc2a4\ub294 27368 , 27369 , 27370 , \uadf8\ub9ac\uace0 27367 \uc785\ub2c8\ub2e4.","title":"\uc720\ube44\ucf58\uacfc \uc6cc\ucee4"},{"location":"deployment/server-workers/#_5","text":"\uc5ec\uae30\uc5d0\uc11c\ub294 \uc720\ube44\ucf58 \uc6cc\ucee4 \ud504\ub85c\uc138\uc2a4 \ub97c \uad00\ub9ac\ud558\ub294 \uad6c\ub2c8\ucf58 (\ub610\ub294 \uc720\ube44\ucf58)\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ubcd1\ub82c\ud654 \ud558\uace0, CPU \uba40\ud2f0 \ucf54\uc5b4 \uc758 \uc7a5\uc810\uc744 \ud65c\uc6a9\ud558\uace0, \ub354 \ub9ce\uc740 \uc694\uccad \uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc744 \uc0b4\ud3b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc6cc\ucee4\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ubc30\ud3ec \uac1c\ub150 \ubaa9\ub85d\uc5d0\uc11c \uc8fc\ub85c \ubcf5\uc81c\ubcf8 \ubd80\ubd84\uacfc \uc7ac\uc2dc\uc791 \uc5d0 \uc57d\uac04 \ub3c4\uc6c0\uc774 \ub418\uc9c0\ub9cc \ub2e4\ub978 \ubc30\ud3ec \uac1c\ub150\ub4e4\ub3c4 \ub2e4\ub8e8\uc5b4\uc57c \ud569\ub2c8\ub2e4: \ubcf4\uc548 - HTTPS \uc11c\ubc84 \uc2dc\uc791\uacfc \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\ud558\uae30 \uc7ac\uc2dc\uc791 \ubcf5\uc81c\ubcf8 (\uc2e4\ud589 \uc911\uc778 \ud504\ub85c\uc138\uc2a4\uc758 \uc22b\uc790) \uba54\ubaa8\ub9ac \uc2dc\uc791\ud558\uae30 \uc804\uc758 \uc5ec\ub7ec \ub2e8\uacc4\ub4e4","title":"\ubc30\ud3ec \uac1c\ub150\ub4e4"},{"location":"deployment/server-workers/#_6","text":"\ub2e4\uc74c \uc7a5\uc778 FastAPI\uc640 \ucee8\ud14c\uc774\ub108 - \ub3c4\ucee4 \uc5d0\uc11c \ub2e4\ub978 \ubc30\ud3ec \uac1c\ub150\ub4e4 \uc744 \ub2e4\ub8e8\ub294 \uc804\ub7b5\ub4e4\uc744 \uc54c\ub824\ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uac04\ub2e8\ud55c \ucf00\uc774\uc2a4\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294, \uad6c\ub2c8\ucf58\uacfc \uc720\ube44\ucf58 \uc6cc\ucee4 \uac00 \ud3ec\ud568\ub3fc \uc788\ub294 \uacf5\uc2dd \ub3c4\ucee4 \uc774\ubbf8\uc9c0 \uc640 \ud568\uaed8 \uba87 \uac00\uc9c0 \uae30\ubcf8 \uad6c\uc131\uc744 \ubcf4\uc5ec\ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub2e8\uc77c \uc720\ube44\ucf58 \ud504\ub85c\uc138\uc2a4(\uad6c\ub2c8\ucf58 \uc5c6\uc774)\ub97c \uc2e4\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \uc0ac\uc6a9\uc790 \uc790\uc2e0\uc758 \uc774\ubbf8\uc9c0\ub97c \ucc98\uc74c\ubd80\ud130 \uad6c\ucd95 \ud558\ub294 \ubc29\ubc95\ub3c4 \ubcf4\uc5ec\ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ub294 \uac04\ub2e8\ud55c \uacfc\uc815\uc774\uba70, \ucfe0\ubc84\ub124\ud2f0\uc2a4 \uc640 \uac19\uc740 \ubd84\uc0b0 \ucee8\ud14c\uc774\ub108 \uad00\ub9ac \uc2dc\uc2a4\ud15c\uc744 \uc0ac\uc6a9\ud560 \ub54c \uc218\ud589\ud560 \uc791\uc5c5\uc785\ub2c8\ub2e4.","title":"\ucee8\ud14c\uc774\ub108\uc640 \ub3c4\ucee4"},{"location":"deployment/server-workers/#_7","text":"\ub2f9\uc2e0\uc740 \uad6c\ub2c8\ucf58 (\ub610\ub294 \uc720\ube44\ucf58)\uc744 \uc720\ube44\ucf58 \uc6cc\ucee4\uc640 \ud568\uaed8 \ud504\ub85c\uc138\uc2a4 \uad00\ub9ac\uc790\ub85c \uc0ac\uc6a9\ud558\uc5ec \uba40\ud2f0-\ucf54\uc5b4 CPU \ub97c \ud65c\uc6a9\ud558\ub294 \uba40\ud2f0 \ud504\ub85c\uc138\uc2a4\ub97c \ubcd1\ub82c\ub85c \uc2e4\ud589 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\ub978 \ubc30\ud3ec \uac1c\ub150\uc744 \uc9c1\uc811 \ub2e4\ub8e8\uba74\uc11c \uc790\uc2e0\ub9cc\uc758 \ubc30\ud3ec \uc2dc\uc2a4\ud15c \uc744 \uad6c\uc131\ud558\ub294 \uacbd\uc6b0 \uc774\ub7ec\ud55c \ub3c4\uad6c\uc640 \uac1c\ub150\ub4e4\uc744 \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \uc7a5\uc5d0\uc11c \ucee8\ud14c\uc774\ub108(\uc608: \ub3c4\ucee4 \ubc0f \ucfe0\ubc84\ub124\ud2f0\uc2a4)\uc640 \ud568\uaed8\ud558\ub294 FastAPI \uc5d0 \ub300\ud574 \ubc30\uc6cc\ubcf4\uc138\uc694. \uc774\ub7ec\ud55c \ud234\uc5d0\ub294 \ub2e4\ub978 \ubc30\ud3ec \uac1c\ub150 \ub4e4\uc744 \uac04\ub2e8\ud788 \ud574\uacb0\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \u2728","title":"\uc694\uc57d"},{"location":"deployment/versions/","text":"FastAPI \ubc84\uc804\ub4e4\uc5d0 \ub300\ud558\uc5ec \u00b6 FastAPI \ub294 \uc774\ubbf8 \ub9ce\uc740 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uacfc \uc2dc\uc2a4\ud15c\ub4e4\uc744 \ub9cc\ub4dc\ub294\ub370 \uc0ac\uc6a9\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 100%\uc758 \ud14c\uc2a4\ud2b8 \uc815\ud655\uc131\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc740 \uc544\uc9c1\uae4c\uc9c0\ub3c4 \ube60\ub974\uac8c \ubc1c\uc804\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc0c8\ub85c\uc6b4 \ud2b9\uc9d5\ub4e4\uc774 \ube48\ubc88\ud558\uac8c \ucd94\uac00\ub418\uace0, \uc624\ub958\ub4e4\uc774 \uc9c0\uc18d\uc801\uc73c\ub85c \uc218\uc815\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ucf54\ub4dc\uac00 \uacc4\uc18d\uc801\uc73c\ub85c \ud5a5\uc0c1\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc774 \uc544\uc9c1\ub3c4 \ucd5c\uc2e0 \ubc84\uc804\uc774 0.x.x \uc778 \uc774\uc720\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \uac01\uac01\uc758 \ubc84\uc804\ub4e4\uc774 \uc7a0\uc7ac\uc801\uc73c\ub85c \ubcc0\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \uc774\ub294 \uc720\uc758\uc801 \ubc84\uc804 \uad00\uc2b5\uc744 \ub530\ub985\ub2c8\ub2e4. \uc9c0\uae08 \ubc14\ub85c FastAPI \ub85c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub54c (\uc544\ub9c8 \uc9c0\uae08\uae4c\uc9c0 \uadf8\ub798 \uc654\ub358 \uac83\ucc98\ub7fc), \uc0ac\uc6a9\ud558\ub294 \ubc84\uc804\uc774 \ucf54\ub4dc\uc640 \uc798 \ub9de\ub294\uc9c0 \ud655\uc778\ud574\uc57c\ud569\ub2c8\ub2e4. fastapi \ubc84\uc804\uc744 \ud45c\uc2dc \u00b6 \uac00\uc7a5 \uba3c\uc800 \ud574\uc57c\ud560 \uac83\uc740 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc774 \uc798 \uc791\ub3d9\ud558\ub294 \uac00\uc7a5 \ucd5c\uc2e0\uc758 \uad6c\uccb4\uc801\uc778 FastAPI \ubc84\uc804\uc744 \ud45c\uc2dc\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0 0.45.0 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud588\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4. \ub9cc\uc57d\uc5d0 requirements.txt \ud30c\uc77c\uc744 \uc0ac\uc6a9\ud588\ub2e4\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 \ubc84\uc804\uc744 \uba85\uc138\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: fastapi==0.45.0 \uc774\uac83\uc740 0.45.0 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud588\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub610\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\uc2dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: fastapi>=0.45.0,<0.46.0 \uc774\uac83\uc740 0.45.0 \ubc84\uc804\uacfc \uac19\uac70\ub098 \ub192\uc73c\uba74\uc11c 0.46.0 \ubc84\uc804 \ubcf4\ub2e4\ub294 \ub0ae\uc740 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud588\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, 0.45.2 \ubc84\uc804\uacfc \uac19\uc740 \uacbd\uc6b0\ub294 \ud574\ub2f9 \uc870\uac74\uc744 \ub9cc\uc871\ud569\ub2c8\ub2e4. \ub9cc\uc57d\uc5d0 Poetry, Pipenv, \ub610\ub294 \uadf8\ubc16\uc758 \ub2e4\uc591\ud55c \uc124\uce58 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74, \ud328\ud0a4\uc9c0\uc5d0 \uad6c\uccb4\uc801\uc778 \ubc84\uc804\uc744 \uc815\uc758\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc744 \uac00\uc9c0\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uc774\uc6a9\uac00\ub2a5\ud55c \ubc84\uc804\ub4e4 \u00b6 Release Notes \ub97c \ud1b5\ud574 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ubc84\uc804\ub4e4\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.(\uc608\ub97c \ub4e4\uc5b4, \uac00\uc7a5 \ucd5c\uc2e0\uc758 \ubc84\uc804\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.) \ubc84\uc804\ub4e4\uc5d0 \ub300\ud574 \u00b6 \uc720\uc758\uc801 \ubc84\uc804 \uad00\uc2b5\uc744 \ub530\ub77c\uc11c, 1.0.0 \uc774\ud558\uc758 \ubaa8\ub4e0 \ubc84\uc804\ub4e4\uc740 \uc7a0\uc7ac\uc801\uc73c\ub85c \uae09\ubcc0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI\ub294 \uc624\ub958\ub97c \uc218\uc815\ud558\uace0, \uc77c\ubc18\uc801\uc778 \ubcc0\uacbd\uc0ac\ud56d\uc744 \uc704\ud574 \"\ud328\uce58\"\ubc84\uc804\uc758 \uad00\uc2b5\uc744 \ub530\ub985\ub2c8\ub2e4. \ud301 \uc5ec\uae30\uc11c \ub9d0\ud558\ub294 \"\ud328\uce58\"\ub780 \ubc84\uc804\uc758 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\ub85c, \uc608\ub97c \ub4e4\uc5b4 0.2.3 \ubc84\uc804\uc5d0\uc11c \"\ud328\uce58\"\ub294 3 \uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub2e4\uc74c\uacfc \uac19\uc774 \ubc84\uc804\uc744 \ud45c\uc2dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: fastapi>=0.45.0,<0.46.0 \uc218\uc815\ub41c \uc0ac\ud56d\uacfc \uc0c8\ub85c\uc6b4 \uc694\uc18c\ub4e4\uc774 \"\ub9c8\uc774\ub108\" \ubc84\uc804\uc5d0 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud301 \"\ub9c8\uc774\ub108\"\ub780 \ubc84\uc804 \ub118\ubc84\uc758 \uac00\uc6b4\ub370 \uc22b\uc790\ub85c, \uc608\ub97c \ub4e4\uc5b4\uc11c 0.2.3 \uc758 \"\ub9c8\uc774\ub108\" \ubc84\uc804\uc740 2 \uc785\ub2c8\ub2e4. FastAPI \ubc84\uc804\uc758 \uc5c5\uadf8\ub808\uc774\ub4dc \u00b6 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc744 \uac80\uc0ac\ud574\uc57c\ud569\ub2c8\ub2e4. (Starlette \ub355\ubd84\uc5d0), FastAPI \ub97c \uc774\uc6a9\ud558\uc5ec \uad49\uc7a5\ud788 \uc27d\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Testing \ubb38\uc11c\ub97c \ud655\uc778\ud574 \ubcf4\uc2ed\uc2dc\uc624: \uac80\uc0ac\ub97c \ud574\ubcf4\uace0 \ub09c \ud6c4\uc5d0, FastAPI \ubc84\uc804\uc744 \ub354 \ucd5c\uc2e0\uc73c\ub85c \uc5c5\uadf8\ub808\uc774\ub4dc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ucf54\ub4dc\ub4e4\uc774 \ud14c\uc2a4\ud2b8\uc5d0 \uc815\uc0c1\uc801\uc73c\ub85c \uc791\ub3d9\ud558\ub294\uc9c0 \ud655\uc778\uc744 \ud574\uc57c\ud569\ub2c8\ub2e4. \ub9cc\uc57d\uc5d0 \ubaa8\ub4e0 \uac83\uc774 \uc815\uc0c1 \uc791\ub3d9\ud558\uac70\ub098 \ud544\uc694\ud55c \ubd80\ubd84\uc744 \ubcc0\uacbd\ud558\uace0, \ubaa8\ub4e0 \uac80\uc0ac\ub97c \ud1b5\uacfc\ud55c\ub2e4\uba74, \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc758 fastapi \ub97c \ud45c\uc2dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Starlette\uc5d0 \ub300\ud574 \u00b6 starlette \uc758 \ubc84\uc804\uc740 \ud45c\uc2dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc11c\ub85c\ub2e4\ub978 \ubc84\uc804\uc758 FastAPI \uac00 \uad6c\uccb4\uc801\uc774\uace0 \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc758 Starlette\uc744 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c FastAPI \uac00 \uc54c\ub9de\uc740 Starlette \ubc84\uc804\uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud558\uc2ed\uc2dc\uc624. Pydantic\uc5d0 \ub300\ud574 \u00b6 Pydantic\uc740 FastAPI \ub97c \uc704\ud55c \uac80\uc0ac\ub97c \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc758 Pydantic( 1.0.0 \uc774\uc0c1)\uc740 \ud56d\uc0c1 FastAPI\uc640 \ud638\ud658\ub429\ub2c8\ub2e4. \uc791\uc5c5\uc744 \ud558\uace0 \uc788\ub294 1.0.0 \uc774\uc0c1\uc758 \ubaa8\ub4e0 \ubc84\uc804\uacfc 2.0.0 \uc774\ud558\uc758 Pydantic \ubc84\uc804\uc744 \ud45c\uc2dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: pydantic>=1.2.0,<2.0.0","title":"FastAPI \ubc84\uc804\ub4e4\uc5d0 \ub300\ud558\uc5ec"},{"location":"deployment/versions/#fastapi","text":"FastAPI \ub294 \uc774\ubbf8 \ub9ce\uc740 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uacfc \uc2dc\uc2a4\ud15c\ub4e4\uc744 \ub9cc\ub4dc\ub294\ub370 \uc0ac\uc6a9\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 100%\uc758 \ud14c\uc2a4\ud2b8 \uc815\ud655\uc131\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc740 \uc544\uc9c1\uae4c\uc9c0\ub3c4 \ube60\ub974\uac8c \ubc1c\uc804\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc0c8\ub85c\uc6b4 \ud2b9\uc9d5\ub4e4\uc774 \ube48\ubc88\ud558\uac8c \ucd94\uac00\ub418\uace0, \uc624\ub958\ub4e4\uc774 \uc9c0\uc18d\uc801\uc73c\ub85c \uc218\uc815\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ucf54\ub4dc\uac00 \uacc4\uc18d\uc801\uc73c\ub85c \ud5a5\uc0c1\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc774 \uc544\uc9c1\ub3c4 \ucd5c\uc2e0 \ubc84\uc804\uc774 0.x.x \uc778 \uc774\uc720\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \uac01\uac01\uc758 \ubc84\uc804\ub4e4\uc774 \uc7a0\uc7ac\uc801\uc73c\ub85c \ubcc0\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \uc774\ub294 \uc720\uc758\uc801 \ubc84\uc804 \uad00\uc2b5\uc744 \ub530\ub985\ub2c8\ub2e4. \uc9c0\uae08 \ubc14\ub85c FastAPI \ub85c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub54c (\uc544\ub9c8 \uc9c0\uae08\uae4c\uc9c0 \uadf8\ub798 \uc654\ub358 \uac83\ucc98\ub7fc), \uc0ac\uc6a9\ud558\ub294 \ubc84\uc804\uc774 \ucf54\ub4dc\uc640 \uc798 \ub9de\ub294\uc9c0 \ud655\uc778\ud574\uc57c\ud569\ub2c8\ub2e4.","title":"FastAPI \ubc84\uc804\ub4e4\uc5d0 \ub300\ud558\uc5ec"},{"location":"deployment/versions/#fastapi_1","text":"\uac00\uc7a5 \uba3c\uc800 \ud574\uc57c\ud560 \uac83\uc740 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc774 \uc798 \uc791\ub3d9\ud558\ub294 \uac00\uc7a5 \ucd5c\uc2e0\uc758 \uad6c\uccb4\uc801\uc778 FastAPI \ubc84\uc804\uc744 \ud45c\uc2dc\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0 0.45.0 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud588\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4. \ub9cc\uc57d\uc5d0 requirements.txt \ud30c\uc77c\uc744 \uc0ac\uc6a9\ud588\ub2e4\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 \ubc84\uc804\uc744 \uba85\uc138\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: fastapi==0.45.0 \uc774\uac83\uc740 0.45.0 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud588\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub610\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\uc2dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: fastapi>=0.45.0,<0.46.0 \uc774\uac83\uc740 0.45.0 \ubc84\uc804\uacfc \uac19\uac70\ub098 \ub192\uc73c\uba74\uc11c 0.46.0 \ubc84\uc804 \ubcf4\ub2e4\ub294 \ub0ae\uc740 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud588\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, 0.45.2 \ubc84\uc804\uacfc \uac19\uc740 \uacbd\uc6b0\ub294 \ud574\ub2f9 \uc870\uac74\uc744 \ub9cc\uc871\ud569\ub2c8\ub2e4. \ub9cc\uc57d\uc5d0 Poetry, Pipenv, \ub610\ub294 \uadf8\ubc16\uc758 \ub2e4\uc591\ud55c \uc124\uce58 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74, \ud328\ud0a4\uc9c0\uc5d0 \uad6c\uccb4\uc801\uc778 \ubc84\uc804\uc744 \uc815\uc758\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc744 \uac00\uc9c0\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4.","title":"fastapi \ubc84\uc804\uc744 \ud45c\uc2dc"},{"location":"deployment/versions/#_1","text":"Release Notes \ub97c \ud1b5\ud574 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ubc84\uc804\ub4e4\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.(\uc608\ub97c \ub4e4\uc5b4, \uac00\uc7a5 \ucd5c\uc2e0\uc758 \ubc84\uc804\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.)","title":"\uc774\uc6a9\uac00\ub2a5\ud55c \ubc84\uc804\ub4e4"},{"location":"deployment/versions/#_2","text":"\uc720\uc758\uc801 \ubc84\uc804 \uad00\uc2b5\uc744 \ub530\ub77c\uc11c, 1.0.0 \uc774\ud558\uc758 \ubaa8\ub4e0 \ubc84\uc804\ub4e4\uc740 \uc7a0\uc7ac\uc801\uc73c\ub85c \uae09\ubcc0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI\ub294 \uc624\ub958\ub97c \uc218\uc815\ud558\uace0, \uc77c\ubc18\uc801\uc778 \ubcc0\uacbd\uc0ac\ud56d\uc744 \uc704\ud574 \"\ud328\uce58\"\ubc84\uc804\uc758 \uad00\uc2b5\uc744 \ub530\ub985\ub2c8\ub2e4. \ud301 \uc5ec\uae30\uc11c \ub9d0\ud558\ub294 \"\ud328\uce58\"\ub780 \ubc84\uc804\uc758 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\ub85c, \uc608\ub97c \ub4e4\uc5b4 0.2.3 \ubc84\uc804\uc5d0\uc11c \"\ud328\uce58\"\ub294 3 \uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub2e4\uc74c\uacfc \uac19\uc774 \ubc84\uc804\uc744 \ud45c\uc2dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: fastapi>=0.45.0,<0.46.0 \uc218\uc815\ub41c \uc0ac\ud56d\uacfc \uc0c8\ub85c\uc6b4 \uc694\uc18c\ub4e4\uc774 \"\ub9c8\uc774\ub108\" \ubc84\uc804\uc5d0 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud301 \"\ub9c8\uc774\ub108\"\ub780 \ubc84\uc804 \ub118\ubc84\uc758 \uac00\uc6b4\ub370 \uc22b\uc790\ub85c, \uc608\ub97c \ub4e4\uc5b4\uc11c 0.2.3 \uc758 \"\ub9c8\uc774\ub108\" \ubc84\uc804\uc740 2 \uc785\ub2c8\ub2e4.","title":"\ubc84\uc804\ub4e4\uc5d0 \ub300\ud574"},{"location":"deployment/versions/#fastapi_2","text":"\uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc744 \uac80\uc0ac\ud574\uc57c\ud569\ub2c8\ub2e4. (Starlette \ub355\ubd84\uc5d0), FastAPI \ub97c \uc774\uc6a9\ud558\uc5ec \uad49\uc7a5\ud788 \uc27d\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Testing \ubb38\uc11c\ub97c \ud655\uc778\ud574 \ubcf4\uc2ed\uc2dc\uc624: \uac80\uc0ac\ub97c \ud574\ubcf4\uace0 \ub09c \ud6c4\uc5d0, FastAPI \ubc84\uc804\uc744 \ub354 \ucd5c\uc2e0\uc73c\ub85c \uc5c5\uadf8\ub808\uc774\ub4dc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ucf54\ub4dc\ub4e4\uc774 \ud14c\uc2a4\ud2b8\uc5d0 \uc815\uc0c1\uc801\uc73c\ub85c \uc791\ub3d9\ud558\ub294\uc9c0 \ud655\uc778\uc744 \ud574\uc57c\ud569\ub2c8\ub2e4. \ub9cc\uc57d\uc5d0 \ubaa8\ub4e0 \uac83\uc774 \uc815\uc0c1 \uc791\ub3d9\ud558\uac70\ub098 \ud544\uc694\ud55c \ubd80\ubd84\uc744 \ubcc0\uacbd\ud558\uace0, \ubaa8\ub4e0 \uac80\uc0ac\ub97c \ud1b5\uacfc\ud55c\ub2e4\uba74, \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc758 fastapi \ub97c \ud45c\uc2dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"FastAPI \ubc84\uc804\uc758 \uc5c5\uadf8\ub808\uc774\ub4dc"},{"location":"deployment/versions/#starlette","text":"starlette \uc758 \ubc84\uc804\uc740 \ud45c\uc2dc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc11c\ub85c\ub2e4\ub978 \ubc84\uc804\uc758 FastAPI \uac00 \uad6c\uccb4\uc801\uc774\uace0 \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc758 Starlette\uc744 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c FastAPI \uac00 \uc54c\ub9de\uc740 Starlette \ubc84\uc804\uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud558\uc2ed\uc2dc\uc624.","title":"Starlette\uc5d0 \ub300\ud574"},{"location":"deployment/versions/#pydantic","text":"Pydantic\uc740 FastAPI \ub97c \uc704\ud55c \uac80\uc0ac\ub97c \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc758 Pydantic( 1.0.0 \uc774\uc0c1)\uc740 \ud56d\uc0c1 FastAPI\uc640 \ud638\ud658\ub429\ub2c8\ub2e4. \uc791\uc5c5\uc744 \ud558\uace0 \uc788\ub294 1.0.0 \uc774\uc0c1\uc758 \ubaa8\ub4e0 \ubc84\uc804\uacfc 2.0.0 \uc774\ud558\uc758 Pydantic \ubc84\uc804\uc744 \ud45c\uc2dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: pydantic>=1.2.0,<2.0.0","title":"Pydantic\uc5d0 \ub300\ud574"},{"location":"tutorial/","text":"\uc790\uc2b5\uc11c - \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c - \ub3c4\uc785\ubd80 \u00b6 \uc774 \uc790\uc2b5\uc11c\ub294 FastAPI \uc758 \ub300\ubd80\ubd84\uc758 \uae30\ub2a5\uc744 \ub2e8\uacc4\ubcc4\ub85c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \uac01 \uc139\uc158\uc740 \uc774\uc804 \uc139\uc158\uc744 \uae30\ubc18\ud574\uc11c \uc810\uc9c4\uc801\uc73c\ub85c \ub9cc\ub4e4\uc5b4 \uc84c\uc9c0\ub9cc, \uc8fc\uc81c\uc5d0 \ub530\ub77c \ub2e4\ub974\uac8c \uad6c\uc131\ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 \ud2b9\uc815 API \uc694\uad6c\uc0ac\ud56d\uc744 \ud574\uacb0\ud558\uae30 \uc704\ud574\uc11c\ub77c\uba74 \uc5b4\ub290 \ud2b9\uc815 \ud56d\ubaa9\uc73c\ub85c\ub358\uc9c0 \uc9c1\uc811 \uc774\ub3d9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \ud5a5\ud6c4 \ucc38\uc870\uac00 \ub420 \uc218 \uc788\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\uc84c\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub2e4\uc2dc \ub3cc\uc544\uc640\uc11c \uc815\ud655\ud788 \ud544\uc694\ud55c \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucf54\ub4dc \uc2e4\ud589\ud558\uae30 \u00b6 \ubaa8\ub4e0 \ucf54\ub4dc \ube14\ub85d\uc740 \ubcf5\uc0ac\ud558\uace0 \uc9c1\uc811 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4(\uc2e4\uc81c\ub85c \ud14c\uc2a4\ud2b8\ud55c \ud30c\uc774\uc36c \ud30c\uc77c\uc785\ub2c8\ub2e4). \uc608\uc81c\ub97c \uc2e4\ud589\ud558\ub824\uba74 \ucf54\ub4dc\ub97c main.py \ud30c\uc77c\uc5d0 \ubcf5\uc0ac\ud558\uace0 \ub2e4\uc74c\uc744 \uc0ac\uc6a9\ud558\uc5ec uvicorn \uc744 \uc2dc\uc791\ud569\ub2c8\ub2e4: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uac70\ub098 \ubcf5\uc0ac, \ud3b8\uc9d1\ud560 \ub54c, \ub85c\uceec\uc5d0\uc11c \uc2e4\ud589\ud558\ub294 \uac83\uc744 \uac15\ub825\ud788 \uc7a5\ub824 \ud569\ub2c8\ub2e4. \ud3b8\uc9d1\uae30\uc5d0\uc11c \uc774\ub807\uac8c \uc0ac\uc6a9\ud55c\ub2e4\uba74, \ubaa8\ub4e0 \ud0c0\uc785 \uac80\uc0ac\uc640 \uc790\ub3d9\uc644\uc131 \ub4f1 \uc791\uc131\ud574\uc57c \ud558\ub294 \ucf54\ub4dc\uac00 \uc5bc\ub9c8\ub098 \uc801\uc740\uc9c0 \ubcf4\uba74\uc11c FastAPI\uc758 \uc7a5\uc810\uc744 \uc2e4\uc81c\ub85c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \uc124\uce58 \u00b6 \uccab \ubc88\uc9f8 \ub2e8\uacc4\ub294 FastAPI \uc124\uce58\uc785\ub2c8\ub2e4. \uc790\uc2b5\uc2dc\uc5d0\ub294 \ubaa8\ub4e0 \uc120\ud0dd\uc801\uc778 \uc758\uc874\uc131 \ubc0f \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc124\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: $ pip install fastapi [ all ] ---> 100% ...\ucf54\ub4dc\ub97c \uc2e4\ud589\ud558\ub294 \uc11c\ubc84\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 uvicorn \uc5ed\uc2dc \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ucc38\uace0 \ubd80\ubd84\uc801\uc73c\ub85c \uc124\uce58\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc6b4\uc601 \ud658\uacbd\uc5d0 \ubc30\ud3ec\ud558\ub824\ub294 \uacbd\uc6b0 \ub2e4\uc74c\uacfc \uac19\uc774 \ud569\ub2c8\ub2e4: pip install fastapi \ucd94\uac00\ub85c \uc11c\ubc84 \uc5ed\ud560\uc744 \ud558\ub294 uvicorn \uc744 \uc124\uce58\ud569\ub2c8\ub2e4: pip install uvicorn \uc0ac\uc6a9\ud558\ub824\ub294 \uac01 \uc120\ud0dd\uc801\uc778 \uc758\uc874\uc131\uc5d0 \ub300\ud574\uc11c\ub3c4 \ub3d9\uc77c\ud569\ub2c8\ub2e4. \uace0\uae09 \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \u00b6 \uc774 \uc790\uc2b5\uc11c - \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \ub2e4\uc74c\uc5d0 \uc77d\uc744 \uc218 \uc788\ub294 \uace0\uae09 \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uace0\uae09 \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \ub294 \ud604\uc7ac \ubb38\uc11c\ub97c \uae30\ubc18\uc73c\ub85c \ud558\uace0, \ub3d9\uc77c\ud55c \uac1c\ub150\uc744 \uc0ac\uc6a9\ud558\uba70, \ucd94\uac00 \uae30\ub2a5\ub4e4\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. \ud558\uc9c0\ub9cc (\uc9c0\uae08 \uc77d\uace0 \uc788\ub294) \uc790\uc2b5\uc11c - \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \ub97c \uba3c\uc800 \uc77d\ub294\uac8c \uc88b\uc2b5\ub2c8\ub2e4. \uc790\uc2b5\uc11c - \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \ub9cc\uc73c\ub85c\ub3c4 \uc644\uc804\ud55c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uad6c\ucd95\ud560 \uc218 \uc788\uc73c\uba70, \ud544\uc694\uc5d0 \ub530\ub77c \uace0\uae09 \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uba87 \uac00\uc9c0 \ucd94\uac00\uc801\uc778 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc591\ud55c \ubc29\uc2dd\uc73c\ub85c \ud655\uc7a5\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4.","title":"\uc790\uc2b5\uc11c - \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c - \ub3c4\uc785\ubd80"},{"location":"tutorial/#-","text":"\uc774 \uc790\uc2b5\uc11c\ub294 FastAPI \uc758 \ub300\ubd80\ubd84\uc758 \uae30\ub2a5\uc744 \ub2e8\uacc4\ubcc4\ub85c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \uac01 \uc139\uc158\uc740 \uc774\uc804 \uc139\uc158\uc744 \uae30\ubc18\ud574\uc11c \uc810\uc9c4\uc801\uc73c\ub85c \ub9cc\ub4e4\uc5b4 \uc84c\uc9c0\ub9cc, \uc8fc\uc81c\uc5d0 \ub530\ub77c \ub2e4\ub974\uac8c \uad6c\uc131\ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 \ud2b9\uc815 API \uc694\uad6c\uc0ac\ud56d\uc744 \ud574\uacb0\ud558\uae30 \uc704\ud574\uc11c\ub77c\uba74 \uc5b4\ub290 \ud2b9\uc815 \ud56d\ubaa9\uc73c\ub85c\ub358\uc9c0 \uc9c1\uc811 \uc774\ub3d9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \ud5a5\ud6c4 \ucc38\uc870\uac00 \ub420 \uc218 \uc788\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\uc84c\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub2e4\uc2dc \ub3cc\uc544\uc640\uc11c \uc815\ud655\ud788 \ud544\uc694\ud55c \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc790\uc2b5\uc11c - \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c - \ub3c4\uc785\ubd80"},{"location":"tutorial/#_1","text":"\ubaa8\ub4e0 \ucf54\ub4dc \ube14\ub85d\uc740 \ubcf5\uc0ac\ud558\uace0 \uc9c1\uc811 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4(\uc2e4\uc81c\ub85c \ud14c\uc2a4\ud2b8\ud55c \ud30c\uc774\uc36c \ud30c\uc77c\uc785\ub2c8\ub2e4). \uc608\uc81c\ub97c \uc2e4\ud589\ud558\ub824\uba74 \ucf54\ub4dc\ub97c main.py \ud30c\uc77c\uc5d0 \ubcf5\uc0ac\ud558\uace0 \ub2e4\uc74c\uc744 \uc0ac\uc6a9\ud558\uc5ec uvicorn \uc744 \uc2dc\uc791\ud569\ub2c8\ub2e4: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uac70\ub098 \ubcf5\uc0ac, \ud3b8\uc9d1\ud560 \ub54c, \ub85c\uceec\uc5d0\uc11c \uc2e4\ud589\ud558\ub294 \uac83\uc744 \uac15\ub825\ud788 \uc7a5\ub824 \ud569\ub2c8\ub2e4. \ud3b8\uc9d1\uae30\uc5d0\uc11c \uc774\ub807\uac8c \uc0ac\uc6a9\ud55c\ub2e4\uba74, \ubaa8\ub4e0 \ud0c0\uc785 \uac80\uc0ac\uc640 \uc790\ub3d9\uc644\uc131 \ub4f1 \uc791\uc131\ud574\uc57c \ud558\ub294 \ucf54\ub4dc\uac00 \uc5bc\ub9c8\ub098 \uc801\uc740\uc9c0 \ubcf4\uba74\uc11c FastAPI\uc758 \uc7a5\uc810\uc744 \uc2e4\uc81c\ub85c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ucf54\ub4dc \uc2e4\ud589\ud558\uae30"},{"location":"tutorial/#fastapi","text":"\uccab \ubc88\uc9f8 \ub2e8\uacc4\ub294 FastAPI \uc124\uce58\uc785\ub2c8\ub2e4. \uc790\uc2b5\uc2dc\uc5d0\ub294 \ubaa8\ub4e0 \uc120\ud0dd\uc801\uc778 \uc758\uc874\uc131 \ubc0f \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc124\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: $ pip install fastapi [ all ] ---> 100% ...\ucf54\ub4dc\ub97c \uc2e4\ud589\ud558\ub294 \uc11c\ubc84\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 uvicorn \uc5ed\uc2dc \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ucc38\uace0 \ubd80\ubd84\uc801\uc73c\ub85c \uc124\uce58\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc6b4\uc601 \ud658\uacbd\uc5d0 \ubc30\ud3ec\ud558\ub824\ub294 \uacbd\uc6b0 \ub2e4\uc74c\uacfc \uac19\uc774 \ud569\ub2c8\ub2e4: pip install fastapi \ucd94\uac00\ub85c \uc11c\ubc84 \uc5ed\ud560\uc744 \ud558\ub294 uvicorn \uc744 \uc124\uce58\ud569\ub2c8\ub2e4: pip install uvicorn \uc0ac\uc6a9\ud558\ub824\ub294 \uac01 \uc120\ud0dd\uc801\uc778 \uc758\uc874\uc131\uc5d0 \ub300\ud574\uc11c\ub3c4 \ub3d9\uc77c\ud569\ub2c8\ub2e4.","title":"FastAPI \uc124\uce58"},{"location":"tutorial/#_2","text":"\uc774 \uc790\uc2b5\uc11c - \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \ub2e4\uc74c\uc5d0 \uc77d\uc744 \uc218 \uc788\ub294 \uace0\uae09 \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uace0\uae09 \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \ub294 \ud604\uc7ac \ubb38\uc11c\ub97c \uae30\ubc18\uc73c\ub85c \ud558\uace0, \ub3d9\uc77c\ud55c \uac1c\ub150\uc744 \uc0ac\uc6a9\ud558\uba70, \ucd94\uac00 \uae30\ub2a5\ub4e4\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. \ud558\uc9c0\ub9cc (\uc9c0\uae08 \uc77d\uace0 \uc788\ub294) \uc790\uc2b5\uc11c - \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \ub97c \uba3c\uc800 \uc77d\ub294\uac8c \uc88b\uc2b5\ub2c8\ub2e4. \uc790\uc2b5\uc11c - \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \ub9cc\uc73c\ub85c\ub3c4 \uc644\uc804\ud55c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uad6c\ucd95\ud560 \uc218 \uc788\uc73c\uba70, \ud544\uc694\uc5d0 \ub530\ub77c \uace0\uae09 \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uba87 \uac00\uc9c0 \ucd94\uac00\uc801\uc778 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc591\ud55c \ubc29\uc2dd\uc73c\ub85c \ud655\uc7a5\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4.","title":"\uace0\uae09 \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c"},{"location":"tutorial/background-tasks/","text":"Background Tasks \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can define background tasks to be run after returning a response. This is useful for operations that need to happen after a request, but that the client doesn't really have to be waiting for the operation to complete before receiving the response. This includes, for example: Email notifications sent after performing an action: As connecting to an email server and sending an email tends to be \"slow\" (several seconds), you can return the response right away and send the email notification in the background. Processing data: For example, let's say you receive a file that must go through a slow process, you can return a response of \"Accepted\" (HTTP 202) and process it in the background. Using BackgroundTasks \u00b6 First, import BackgroundTasks and define a parameter in your path operation function with a type declaration of BackgroundTasks : from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } FastAPI will create the object of type BackgroundTasks for you and pass it as that parameter. Create a task function \u00b6 Create a function to be run as the background task. It is just a standard function that can receive parameters. It can be an async def or normal def function, FastAPI will know how to handle it correctly. In this case, the task function will write to a file (simulating sending an email). And as the write operation doesn't use async and await , we define the function with normal def : from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } Add the background task \u00b6 Inside of your path operation function , pass your task function to the background tasks object with the method .add_task() : from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } .add_task() receives as arguments: A task function to be run in the background ( write_notification ). Any sequence of arguments that should be passed to the task function in order ( email ). Any keyword arguments that should be passed to the task function ( message=\"some notification\" ). Dependency Injection \u00b6 Using BackgroundTasks also works with the dependency injection system, you can declare a parameter of type BackgroundTasks at multiple levels: in a path operation function , in a dependency (dependable), in a sub-dependency, etc. FastAPI knows what to do in each case and how to re-use the same object, so that all the background tasks are merged together and are run in the background afterwards: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import BackgroundTasks , Depends , FastAPI app = FastAPI () def write_log ( message : str ): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( message ) def get_query ( background_tasks : BackgroundTasks , q : Union [ str , None ] = None ): if q : message = f \"found query: { q } \\n \" background_tasks . add_task ( write_log , message ) return q @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks , q : str = Depends ( get_query ) ): message = f \"message to { email } \\n \" background_tasks . add_task ( write_log , message ) return { \"message\" : \"Message sent\" } from fastapi import BackgroundTasks , Depends , FastAPI app = FastAPI () def write_log ( message : str ): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( message ) def get_query ( background_tasks : BackgroundTasks , q : str | None = None ): if q : message = f \"found query: { q } \\n \" background_tasks . add_task ( write_log , message ) return q @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks , q : str = Depends ( get_query ) ): message = f \"message to { email } \\n \" background_tasks . add_task ( write_log , message ) return { \"message\" : \"Message sent\" } In this example, the messages will be written to the log.txt file after the response is sent. If there was a query in the request, it will be written to the log in a background task. And then another background task generated at the path operation function will write a message using the email path parameter. Technical Details \u00b6 The class BackgroundTasks comes directly from starlette.background . It is imported/included directly into FastAPI so that you can import it from fastapi and avoid accidentally importing the alternative BackgroundTask (without the s at the end) from starlette.background . By only using BackgroundTasks (and not BackgroundTask ), it's then possible to use it as a path operation function parameter and have FastAPI handle the rest for you, just like when using the Request object directly. It's still possible to use BackgroundTask alone in FastAPI, but you have to create the object in your code and return a Starlette Response including it. You can see more details in Starlette's official docs for Background Tasks . Caveat \u00b6 If you need to perform heavy background computation and you don't necessarily need it to be run by the same process (for example, you don't need to share memory, variables, etc), you might benefit from using other bigger tools like Celery . They tend to require more complex configurations, a message/job queue manager, like RabbitMQ or Redis, but they allow you to run background tasks in multiple processes, and especially, in multiple servers. To see an example, check the Project Generators , they all include Celery already configured. But if you need to access variables and objects from the same FastAPI app, or you need to perform small background tasks (like sending an email notification), you can simply just use BackgroundTasks . Recap \u00b6 Import and use BackgroundTasks with parameters in path operation functions and dependencies to add background tasks.","title":"Background Tasks"},{"location":"tutorial/background-tasks/#background-tasks","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can define background tasks to be run after returning a response. This is useful for operations that need to happen after a request, but that the client doesn't really have to be waiting for the operation to complete before receiving the response. This includes, for example: Email notifications sent after performing an action: As connecting to an email server and sending an email tends to be \"slow\" (several seconds), you can return the response right away and send the email notification in the background. Processing data: For example, let's say you receive a file that must go through a slow process, you can return a response of \"Accepted\" (HTTP 202) and process it in the background.","title":"Background Tasks"},{"location":"tutorial/background-tasks/#using-backgroundtasks","text":"First, import BackgroundTasks and define a parameter in your path operation function with a type declaration of BackgroundTasks : from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } FastAPI will create the object of type BackgroundTasks for you and pass it as that parameter.","title":"Using BackgroundTasks"},{"location":"tutorial/background-tasks/#create-a-task-function","text":"Create a function to be run as the background task. It is just a standard function that can receive parameters. It can be an async def or normal def function, FastAPI will know how to handle it correctly. In this case, the task function will write to a file (simulating sending an email). And as the write operation doesn't use async and await , we define the function with normal def : from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" }","title":"Create a task function"},{"location":"tutorial/background-tasks/#add-the-background-task","text":"Inside of your path operation function , pass your task function to the background tasks object with the method .add_task() : from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } .add_task() receives as arguments: A task function to be run in the background ( write_notification ). Any sequence of arguments that should be passed to the task function in order ( email ). Any keyword arguments that should be passed to the task function ( message=\"some notification\" ).","title":"Add the background task"},{"location":"tutorial/background-tasks/#dependency-injection","text":"Using BackgroundTasks also works with the dependency injection system, you can declare a parameter of type BackgroundTasks at multiple levels: in a path operation function , in a dependency (dependable), in a sub-dependency, etc. FastAPI knows what to do in each case and how to re-use the same object, so that all the background tasks are merged together and are run in the background afterwards: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import BackgroundTasks , Depends , FastAPI app = FastAPI () def write_log ( message : str ): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( message ) def get_query ( background_tasks : BackgroundTasks , q : Union [ str , None ] = None ): if q : message = f \"found query: { q } \\n \" background_tasks . add_task ( write_log , message ) return q @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks , q : str = Depends ( get_query ) ): message = f \"message to { email } \\n \" background_tasks . add_task ( write_log , message ) return { \"message\" : \"Message sent\" } from fastapi import BackgroundTasks , Depends , FastAPI app = FastAPI () def write_log ( message : str ): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( message ) def get_query ( background_tasks : BackgroundTasks , q : str | None = None ): if q : message = f \"found query: { q } \\n \" background_tasks . add_task ( write_log , message ) return q @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks , q : str = Depends ( get_query ) ): message = f \"message to { email } \\n \" background_tasks . add_task ( write_log , message ) return { \"message\" : \"Message sent\" } In this example, the messages will be written to the log.txt file after the response is sent. If there was a query in the request, it will be written to the log in a background task. And then another background task generated at the path operation function will write a message using the email path parameter.","title":"Dependency Injection"},{"location":"tutorial/background-tasks/#technical-details","text":"The class BackgroundTasks comes directly from starlette.background . It is imported/included directly into FastAPI so that you can import it from fastapi and avoid accidentally importing the alternative BackgroundTask (without the s at the end) from starlette.background . By only using BackgroundTasks (and not BackgroundTask ), it's then possible to use it as a path operation function parameter and have FastAPI handle the rest for you, just like when using the Request object directly. It's still possible to use BackgroundTask alone in FastAPI, but you have to create the object in your code and return a Starlette Response including it. You can see more details in Starlette's official docs for Background Tasks .","title":"Technical Details"},{"location":"tutorial/background-tasks/#caveat","text":"If you need to perform heavy background computation and you don't necessarily need it to be run by the same process (for example, you don't need to share memory, variables, etc), you might benefit from using other bigger tools like Celery . They tend to require more complex configurations, a message/job queue manager, like RabbitMQ or Redis, but they allow you to run background tasks in multiple processes, and especially, in multiple servers. To see an example, check the Project Generators , they all include Celery already configured. But if you need to access variables and objects from the same FastAPI app, or you need to perform small background tasks (like sending an email notification), you can simply just use BackgroundTasks .","title":"Caveat"},{"location":"tutorial/background-tasks/#recap","text":"Import and use BackgroundTasks with parameters in path operation functions and dependencies to add background tasks.","title":"Recap"},{"location":"tutorial/bigger-applications/","text":"Bigger Applications - Multiple Files \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . If you are building an application or a web API, it's rarely the case that you can put everything on a single file. FastAPI provides a convenience tool to structure your application while keeping all the flexibility. Info If you come from Flask, this would be the equivalent of Flask's Blueprints. An example file structure \u00b6 Let's say you have a file structure like this: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 dependencies.py \u2502 \u2514\u2500\u2500 routers \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 items.py \u2502 \u2502 \u2514\u2500\u2500 users.py \u2502 \u2514\u2500\u2500 internal \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 admin.py Tip There are several __init__.py files: one in each directory or subdirectory. This is what allows importing code from one file into another. For example, in app/main.py you could have a line like: from app.routers import items The app directory contains everything. And it has an empty file app/__init__.py , so it is a \"Python package\" (a collection of \"Python modules\"): app . It contains an app/main.py file. As it is inside a Python package (a directory with a file __init__.py ), it is a \"module\" of that package: app.main . There's also an app/dependencies.py file, just like app/main.py , it is a \"module\": app.dependencies . There's a subdirectory app/routers/ with another file __init__.py , so it's a \"Python subpackage\": app.routers . The file app/routers/items.py is inside a package, app/routers/ , so, it's a submodule: app.routers.items . The same with app/routers/users.py , it's another submodule: app.routers.users . There's also a subdirectory app/internal/ with another file __init__.py , so it's another \"Python subpackage\": app.internal . And the file app/internal/admin.py is another submodule: app.internal.admin . The same file structure with comments: . \u251c\u2500\u2500 app # \"app\" is a Python package \u2502 \u251c\u2500\u2500 __init__.py # this file makes \"app\" a \"Python package\" \u2502 \u251c\u2500\u2500 main.py # \"main\" module, e.g. import app.main \u2502 \u251c\u2500\u2500 dependencies.py # \"dependencies\" module, e.g. import app.dependencies \u2502 \u2514\u2500\u2500 routers # \"routers\" is a \"Python subpackage\" \u2502 \u2502 \u251c\u2500\u2500 __init__.py # makes \"routers\" a \"Python subpackage\" \u2502 \u2502 \u251c\u2500\u2500 items.py # \"items\" submodule, e.g. import app.routers.items \u2502 \u2502 \u2514\u2500\u2500 users.py # \"users\" submodule, e.g. import app.routers.users \u2502 \u2514\u2500\u2500 internal # \"internal\" is a \"Python subpackage\" \u2502 \u251c\u2500\u2500 __init__.py # makes \"internal\" a \"Python subpackage\" \u2502 \u2514\u2500\u2500 admin.py # \"admin\" submodule, e.g. import app.internal.admin APIRouter \u00b6 Let's say the file dedicated to handling just users is the submodule at /app/routers/users.py . You want to have the path operations related to your users separated from the rest of the code, to keep it organized. But it's still part of the same FastAPI application/web API (it's part of the same \"Python Package\"). You can create the path operations for that module using APIRouter . Import APIRouter \u00b6 You import it and create an \"instance\" the same way you would with the class FastAPI : from fastapi import APIRouter router = APIRouter () @router . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] @router . get ( \"/users/me\" , tags = [ \"users\" ]) async def read_user_me (): return { \"username\" : \"fakecurrentuser\" } @router . get ( \"/users/ {username} \" , tags = [ \"users\" ]) async def read_user ( username : str ): return { \"username\" : username } Path operations with APIRouter \u00b6 And then you use it to declare your path operations . Use it the same way you would use the FastAPI class: from fastapi import APIRouter router = APIRouter () @router . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] @router . get ( \"/users/me\" , tags = [ \"users\" ]) async def read_user_me (): return { \"username\" : \"fakecurrentuser\" } @router . get ( \"/users/ {username} \" , tags = [ \"users\" ]) async def read_user ( username : str ): return { \"username\" : username } You can think of APIRouter as a \"mini FastAPI \" class. All the same options are supported. All the same parameters , responses , dependencies , tags , etc. Tip In this example, the variable is called router , but you can name it however you want. We are going to include this APIRouter in the main FastAPI app, but first, let's check the dependencies and another APIRouter . Dependencies \u00b6 We see that we are going to need some dependencies used in several places of the application. So we put them in their own dependencies module ( app/dependencies.py ). We will now use a simple dependency to read a custom X-Token header: from fastapi import Header , HTTPException async def get_token_header ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def get_query_token ( token : str ): if token != \"jessica\" : raise HTTPException ( status_code = 400 , detail = \"No Jessica token provided\" ) Tip We are using an invented header to simplify this example. But in real cases you will get better results using the integrated Security utilities . Another module with APIRouter \u00b6 Let's say you also have the endpoints dedicated to handling \"items\" from your application in the module at app/routers/items.py . You have path operations for: /items/ /items/{item_id} It's all the same structure as with app/routers/users.py . But we want to be smarter and simplify the code a bit. We know all the path operations in this module have the same: Path prefix : /items . tags : (just one tag: items ). Extra responses . dependencies : they all need that X-Token dependency we created. So, instead of adding all that to each path operation , we can add it to the APIRouter . from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } As the path of each path operation has to start with / , like in: @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): ... ...the prefix must not include a final / . So, the prefix in this case is /items . We can also add a list of tags and extra responses that will be applied to all the path operations included in this router. And we can add a list of dependencies that will be added to all the path operations in the router and will be executed/solved for each request made to them. Tip Note that, much like dependencies in path operation decorators , no value will be passed to your path operation function . The end result is that the item paths are now: /items/ /items/{item_id} ...as we intended. They will be marked with a list of tags that contain a single string \"items\" . These \"tags\" are especially useful for the automatic interactive documentation systems (using OpenAPI). All of them will include the predefined responses . All these path operations will have the list of dependencies evaluated/executed before them. If you also declare dependencies in a specific path operation , they will be executed too . The router dependencies are executed first, then the dependencies in the decorator , and then the normal parameter dependencies. You can also add Security dependencies with scopes . Tip Having dependencies in the APIRouter can be used, for example, to require authentication for a whole group of path operations . Even if the dependencies are not added individually to each one of them. Check The prefix , tags , responses , and dependencies parameters are (as in many other cases) just a feature from FastAPI to help you avoid code duplication. Import the dependencies \u00b6 This codes lives in the module app.routers.items , the file app/routers/items.py . And we need to get the dependency function from the module app.dependencies , the file app/dependencies.py . So we use a relative import with .. for the dependencies: from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } How relative imports work \u00b6 Tip If you know perfectly how imports work, continue to the next section below. A single dot . , like in: from .dependencies import get_token_header would mean: Starting in the same package that this module (the file app/routers/items.py ) lives in (the directory app/routers/ )... find the module dependencies (an imaginary file at app/routers/dependencies.py )... and from it, import the function get_token_header . But that file doesn't exist, our dependencies are in a file at app/dependencies.py . Remember how our app/file structure looks like: The two dots .. , like in: from ..dependencies import get_token_header mean: Starting in the same package that this module (the file app/routers/items.py ) lives in (the directory app/routers/ )... go to the parent package (the directory app/ )... and in there, find the module dependencies (the file at app/dependencies.py )... and from it, import the function get_token_header . That works correctly! \ud83c\udf89 The same way, if we had used three dots ... , like in: from ...dependencies import get_token_header that would mean: Starting in the same package that this module (the file app/routers/items.py ) lives in (the directory app/routers/ )... go to the parent package (the directory app/ )... then go to the parent of that package (there's no parent package, app is the top level \ud83d\ude31)... and in there, find the module dependencies (the file at app/dependencies.py )... and from it, import the function get_token_header . That would refer to some package above app/ , with its own file __init__.py , etc. But we don't have that. So, that would throw an error in our example. \ud83d\udea8 But now you know how it works, so you can use relative imports in your own apps no matter how complex they are. \ud83e\udd13 Add some custom tags , responses , and dependencies \u00b6 We are not adding the prefix /items nor the tags=[\"items\"] to each path operation because we added them to the APIRouter . But we can still add more tags that will be applied to a specific path operation , and also some extra responses specific to that path operation : from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } Tip This last path operation will have the combination of tags: [\"items\", \"custom\"] . And it will also have both responses in the documentation, one for 404 and one for 403 . The main FastAPI \u00b6 Now, let's see the module at app/main.py . Here's where you import and use the class FastAPI . This will be the main file in your application that ties everything together. And as most of your logic will now live in its own specific module, the main file will be quite simple. Import FastAPI \u00b6 You import and create a FastAPI class as normally. And we can even declare global dependencies that will be combined with the dependencies for each APIRouter : from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } Import the APIRouter \u00b6 Now we import the other submodules that have APIRouter s: from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } As the files app/routers/users.py and app/routers/items.py are submodules that are part of the same Python package app , we can use a single dot . to import them using \"relative imports\". How the importing works \u00b6 The section: from .routers import items , users Means: Starting in the same package that this module (the file app/main.py ) lives in (the directory app/ )... look for the subpackage routers (the directory at app/routers/ )... and from it, import the submodule items (the file at app/routers/items.py ) and users (the file at app/routers/users.py )... The module items will have a variable router ( items.router ). This is the same one we created in the file app/routers/items.py , it's an APIRouter object. And then we do the same for the module users . We could also import them like: from app.routers import items , users Info The first version is a \"relative import\": from .routers import items , users The second version is an \"absolute import\": from app.routers import items , users To learn more about Python Packages and Modules, read the official Python documentation about Modules . Avoid name collisions \u00b6 We are importing the submodule items directly, instead of importing just its variable router . This is because we also have another variable named router in the submodule users . If we had imported one after the other, like: from .routers.items import router from .routers.users import router The router from users would overwrite the one from items and we wouldn't be able to use them at the same time. So, to be able to use both of them in the same file, we import the submodules directly: from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } Include the APIRouter s for users and items \u00b6 Now, let's include the router s from the submodules users and items : from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } Info users.router contains the APIRouter inside of the file app/routers/users.py . And items.router contains the APIRouter inside of the file app/routers/items.py . With app.include_router() we can add each APIRouter to the main FastAPI application. It will include all the routes from that router as part of it. Technical Details It will actually internally create a path operation for each path operation that was declared in the APIRouter . So, behind the scenes, it will actually work as if everything was the same single app. Check You don't have to worry about performance when including routers. This will take microseconds and will only happen at startup. So it won't affect performance. \u26a1 Include an APIRouter with a custom prefix , tags , responses , and dependencies \u00b6 Now, let's imagine your organization gave you the app/internal/admin.py file. It contains an APIRouter with some admin path operations that your organization shares between several projects. For this example it will be super simple. But let's say that because it is shared with other projects in the organization, we cannot modify it and add a prefix , dependencies , tags , etc. directly to the APIRouter : from fastapi import APIRouter router = APIRouter () @router . post ( \"/\" ) async def update_admin (): return { \"message\" : \"Admin getting schwifty\" } But we still want to set a custom prefix when including the APIRouter so that all its path operations start with /admin , we want to secure it with the dependencies we already have for this project, and we want to include tags and responses . We can declare all that without having to modify the original APIRouter by passing those parameters to app.include_router() : from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } That way, the original APIRouter will keep unmodified, so we can still share that same app/internal/admin.py file with other projects in the organization. The result is that in our app, each of the path operations from the admin module will have: The prefix /admin . The tag admin . The dependency get_token_header . The response 418 . \ud83c\udf75 But that will only affect that APIRouter in our app, not in any other code that uses it. So, for example, other projects could use the same APIRouter with a different authentication method. Include a path operation \u00b6 We can also add path operations directly to the FastAPI app. Here we do it... just to show that we can \ud83e\udd37: from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } and it will work correctly, together with all the other path operations added with app.include_router() . Very Technical Details Note : this is a very technical detail that you probably can just skip . The APIRouter s are not \"mounted\", they are not isolated from the rest of the application. This is because we want to include their path operations in the OpenAPI schema and the user interfaces. As we cannot just isolate them and \"mount\" them independently of the rest, the path operations are \"cloned\" (re-created), not included directly. Check the automatic API docs \u00b6 Now, run uvicorn , using the module app.main and the variable app : $ uvicorn app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) And open the docs at http://127.0.0.1:8000/docs . You will see the automatic API docs, including the paths from all the submodules, using the correct paths (and prefixes) and the correct tags: Include the same router multiple times with different prefix \u00b6 You can also use .include_router() multiple times with the same router using different prefixes. This could be useful, for example, to expose the same API under different prefixes, e.g. /api/v1 and /api/latest . This is an advanced usage that you might not really need, but it's there in case you do. Include an APIRouter in another \u00b6 The same way you can include an APIRouter in a FastAPI application, you can include an APIRouter in another APIRouter using: router . include_router ( other_router ) Make sure you do it before including router in the FastAPI app, so that the path operations from other_router are also included.","title":"Bigger Applications - Multiple Files"},{"location":"tutorial/bigger-applications/#bigger-applications-multiple-files","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . If you are building an application or a web API, it's rarely the case that you can put everything on a single file. FastAPI provides a convenience tool to structure your application while keeping all the flexibility. Info If you come from Flask, this would be the equivalent of Flask's Blueprints.","title":"Bigger Applications - Multiple Files"},{"location":"tutorial/bigger-applications/#an-example-file-structure","text":"Let's say you have a file structure like this: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 dependencies.py \u2502 \u2514\u2500\u2500 routers \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 items.py \u2502 \u2502 \u2514\u2500\u2500 users.py \u2502 \u2514\u2500\u2500 internal \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 admin.py Tip There are several __init__.py files: one in each directory or subdirectory. This is what allows importing code from one file into another. For example, in app/main.py you could have a line like: from app.routers import items The app directory contains everything. And it has an empty file app/__init__.py , so it is a \"Python package\" (a collection of \"Python modules\"): app . It contains an app/main.py file. As it is inside a Python package (a directory with a file __init__.py ), it is a \"module\" of that package: app.main . There's also an app/dependencies.py file, just like app/main.py , it is a \"module\": app.dependencies . There's a subdirectory app/routers/ with another file __init__.py , so it's a \"Python subpackage\": app.routers . The file app/routers/items.py is inside a package, app/routers/ , so, it's a submodule: app.routers.items . The same with app/routers/users.py , it's another submodule: app.routers.users . There's also a subdirectory app/internal/ with another file __init__.py , so it's another \"Python subpackage\": app.internal . And the file app/internal/admin.py is another submodule: app.internal.admin . The same file structure with comments: . \u251c\u2500\u2500 app # \"app\" is a Python package \u2502 \u251c\u2500\u2500 __init__.py # this file makes \"app\" a \"Python package\" \u2502 \u251c\u2500\u2500 main.py # \"main\" module, e.g. import app.main \u2502 \u251c\u2500\u2500 dependencies.py # \"dependencies\" module, e.g. import app.dependencies \u2502 \u2514\u2500\u2500 routers # \"routers\" is a \"Python subpackage\" \u2502 \u2502 \u251c\u2500\u2500 __init__.py # makes \"routers\" a \"Python subpackage\" \u2502 \u2502 \u251c\u2500\u2500 items.py # \"items\" submodule, e.g. import app.routers.items \u2502 \u2502 \u2514\u2500\u2500 users.py # \"users\" submodule, e.g. import app.routers.users \u2502 \u2514\u2500\u2500 internal # \"internal\" is a \"Python subpackage\" \u2502 \u251c\u2500\u2500 __init__.py # makes \"internal\" a \"Python subpackage\" \u2502 \u2514\u2500\u2500 admin.py # \"admin\" submodule, e.g. import app.internal.admin","title":"An example file structure"},{"location":"tutorial/bigger-applications/#apirouter","text":"Let's say the file dedicated to handling just users is the submodule at /app/routers/users.py . You want to have the path operations related to your users separated from the rest of the code, to keep it organized. But it's still part of the same FastAPI application/web API (it's part of the same \"Python Package\"). You can create the path operations for that module using APIRouter .","title":"APIRouter"},{"location":"tutorial/bigger-applications/#import-apirouter","text":"You import it and create an \"instance\" the same way you would with the class FastAPI : from fastapi import APIRouter router = APIRouter () @router . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] @router . get ( \"/users/me\" , tags = [ \"users\" ]) async def read_user_me (): return { \"username\" : \"fakecurrentuser\" } @router . get ( \"/users/ {username} \" , tags = [ \"users\" ]) async def read_user ( username : str ): return { \"username\" : username }","title":"Import APIRouter"},{"location":"tutorial/bigger-applications/#path-operations-with-apirouter","text":"And then you use it to declare your path operations . Use it the same way you would use the FastAPI class: from fastapi import APIRouter router = APIRouter () @router . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] @router . get ( \"/users/me\" , tags = [ \"users\" ]) async def read_user_me (): return { \"username\" : \"fakecurrentuser\" } @router . get ( \"/users/ {username} \" , tags = [ \"users\" ]) async def read_user ( username : str ): return { \"username\" : username } You can think of APIRouter as a \"mini FastAPI \" class. All the same options are supported. All the same parameters , responses , dependencies , tags , etc. Tip In this example, the variable is called router , but you can name it however you want. We are going to include this APIRouter in the main FastAPI app, but first, let's check the dependencies and another APIRouter .","title":"Path operations with APIRouter"},{"location":"tutorial/bigger-applications/#dependencies","text":"We see that we are going to need some dependencies used in several places of the application. So we put them in their own dependencies module ( app/dependencies.py ). We will now use a simple dependency to read a custom X-Token header: from fastapi import Header , HTTPException async def get_token_header ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def get_query_token ( token : str ): if token != \"jessica\" : raise HTTPException ( status_code = 400 , detail = \"No Jessica token provided\" ) Tip We are using an invented header to simplify this example. But in real cases you will get better results using the integrated Security utilities .","title":"Dependencies"},{"location":"tutorial/bigger-applications/#another-module-with-apirouter","text":"Let's say you also have the endpoints dedicated to handling \"items\" from your application in the module at app/routers/items.py . You have path operations for: /items/ /items/{item_id} It's all the same structure as with app/routers/users.py . But we want to be smarter and simplify the code a bit. We know all the path operations in this module have the same: Path prefix : /items . tags : (just one tag: items ). Extra responses . dependencies : they all need that X-Token dependency we created. So, instead of adding all that to each path operation , we can add it to the APIRouter . from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } As the path of each path operation has to start with / , like in: @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): ... ...the prefix must not include a final / . So, the prefix in this case is /items . We can also add a list of tags and extra responses that will be applied to all the path operations included in this router. And we can add a list of dependencies that will be added to all the path operations in the router and will be executed/solved for each request made to them. Tip Note that, much like dependencies in path operation decorators , no value will be passed to your path operation function . The end result is that the item paths are now: /items/ /items/{item_id} ...as we intended. They will be marked with a list of tags that contain a single string \"items\" . These \"tags\" are especially useful for the automatic interactive documentation systems (using OpenAPI). All of them will include the predefined responses . All these path operations will have the list of dependencies evaluated/executed before them. If you also declare dependencies in a specific path operation , they will be executed too . The router dependencies are executed first, then the dependencies in the decorator , and then the normal parameter dependencies. You can also add Security dependencies with scopes . Tip Having dependencies in the APIRouter can be used, for example, to require authentication for a whole group of path operations . Even if the dependencies are not added individually to each one of them. Check The prefix , tags , responses , and dependencies parameters are (as in many other cases) just a feature from FastAPI to help you avoid code duplication.","title":"Another module with APIRouter"},{"location":"tutorial/bigger-applications/#import-the-dependencies","text":"This codes lives in the module app.routers.items , the file app/routers/items.py . And we need to get the dependency function from the module app.dependencies , the file app/dependencies.py . So we use a relative import with .. for the dependencies: from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" }","title":"Import the dependencies"},{"location":"tutorial/bigger-applications/#how-relative-imports-work","text":"Tip If you know perfectly how imports work, continue to the next section below. A single dot . , like in: from .dependencies import get_token_header would mean: Starting in the same package that this module (the file app/routers/items.py ) lives in (the directory app/routers/ )... find the module dependencies (an imaginary file at app/routers/dependencies.py )... and from it, import the function get_token_header . But that file doesn't exist, our dependencies are in a file at app/dependencies.py . Remember how our app/file structure looks like: The two dots .. , like in: from ..dependencies import get_token_header mean: Starting in the same package that this module (the file app/routers/items.py ) lives in (the directory app/routers/ )... go to the parent package (the directory app/ )... and in there, find the module dependencies (the file at app/dependencies.py )... and from it, import the function get_token_header . That works correctly! \ud83c\udf89 The same way, if we had used three dots ... , like in: from ...dependencies import get_token_header that would mean: Starting in the same package that this module (the file app/routers/items.py ) lives in (the directory app/routers/ )... go to the parent package (the directory app/ )... then go to the parent of that package (there's no parent package, app is the top level \ud83d\ude31)... and in there, find the module dependencies (the file at app/dependencies.py )... and from it, import the function get_token_header . That would refer to some package above app/ , with its own file __init__.py , etc. But we don't have that. So, that would throw an error in our example. \ud83d\udea8 But now you know how it works, so you can use relative imports in your own apps no matter how complex they are. \ud83e\udd13","title":"How relative imports work"},{"location":"tutorial/bigger-applications/#add-some-custom-tags-responses-and-dependencies","text":"We are not adding the prefix /items nor the tags=[\"items\"] to each path operation because we added them to the APIRouter . But we can still add more tags that will be applied to a specific path operation , and also some extra responses specific to that path operation : from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } Tip This last path operation will have the combination of tags: [\"items\", \"custom\"] . And it will also have both responses in the documentation, one for 404 and one for 403 .","title":"Add some custom tags, responses, and dependencies"},{"location":"tutorial/bigger-applications/#the-main-fastapi","text":"Now, let's see the module at app/main.py . Here's where you import and use the class FastAPI . This will be the main file in your application that ties everything together. And as most of your logic will now live in its own specific module, the main file will be quite simple.","title":"The main FastAPI"},{"location":"tutorial/bigger-applications/#import-fastapi","text":"You import and create a FastAPI class as normally. And we can even declare global dependencies that will be combined with the dependencies for each APIRouter : from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" }","title":"Import FastAPI"},{"location":"tutorial/bigger-applications/#import-the-apirouter","text":"Now we import the other submodules that have APIRouter s: from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } As the files app/routers/users.py and app/routers/items.py are submodules that are part of the same Python package app , we can use a single dot . to import them using \"relative imports\".","title":"Import the APIRouter"},{"location":"tutorial/bigger-applications/#how-the-importing-works","text":"The section: from .routers import items , users Means: Starting in the same package that this module (the file app/main.py ) lives in (the directory app/ )... look for the subpackage routers (the directory at app/routers/ )... and from it, import the submodule items (the file at app/routers/items.py ) and users (the file at app/routers/users.py )... The module items will have a variable router ( items.router ). This is the same one we created in the file app/routers/items.py , it's an APIRouter object. And then we do the same for the module users . We could also import them like: from app.routers import items , users Info The first version is a \"relative import\": from .routers import items , users The second version is an \"absolute import\": from app.routers import items , users To learn more about Python Packages and Modules, read the official Python documentation about Modules .","title":"How the importing works"},{"location":"tutorial/bigger-applications/#avoid-name-collisions","text":"We are importing the submodule items directly, instead of importing just its variable router . This is because we also have another variable named router in the submodule users . If we had imported one after the other, like: from .routers.items import router from .routers.users import router The router from users would overwrite the one from items and we wouldn't be able to use them at the same time. So, to be able to use both of them in the same file, we import the submodules directly: from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" }","title":"Avoid name collisions"},{"location":"tutorial/bigger-applications/#include-the-apirouters-for-users-and-items","text":"Now, let's include the router s from the submodules users and items : from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } Info users.router contains the APIRouter inside of the file app/routers/users.py . And items.router contains the APIRouter inside of the file app/routers/items.py . With app.include_router() we can add each APIRouter to the main FastAPI application. It will include all the routes from that router as part of it. Technical Details It will actually internally create a path operation for each path operation that was declared in the APIRouter . So, behind the scenes, it will actually work as if everything was the same single app. Check You don't have to worry about performance when including routers. This will take microseconds and will only happen at startup. So it won't affect performance. \u26a1","title":"Include the APIRouters for users and items"},{"location":"tutorial/bigger-applications/#include-an-apirouter-with-a-custom-prefix-tags-responses-and-dependencies","text":"Now, let's imagine your organization gave you the app/internal/admin.py file. It contains an APIRouter with some admin path operations that your organization shares between several projects. For this example it will be super simple. But let's say that because it is shared with other projects in the organization, we cannot modify it and add a prefix , dependencies , tags , etc. directly to the APIRouter : from fastapi import APIRouter router = APIRouter () @router . post ( \"/\" ) async def update_admin (): return { \"message\" : \"Admin getting schwifty\" } But we still want to set a custom prefix when including the APIRouter so that all its path operations start with /admin , we want to secure it with the dependencies we already have for this project, and we want to include tags and responses . We can declare all that without having to modify the original APIRouter by passing those parameters to app.include_router() : from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } That way, the original APIRouter will keep unmodified, so we can still share that same app/internal/admin.py file with other projects in the organization. The result is that in our app, each of the path operations from the admin module will have: The prefix /admin . The tag admin . The dependency get_token_header . The response 418 . \ud83c\udf75 But that will only affect that APIRouter in our app, not in any other code that uses it. So, for example, other projects could use the same APIRouter with a different authentication method.","title":"Include an APIRouter with a custom prefix, tags, responses, and dependencies"},{"location":"tutorial/bigger-applications/#include-a-path-operation","text":"We can also add path operations directly to the FastAPI app. Here we do it... just to show that we can \ud83e\udd37: from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } and it will work correctly, together with all the other path operations added with app.include_router() . Very Technical Details Note : this is a very technical detail that you probably can just skip . The APIRouter s are not \"mounted\", they are not isolated from the rest of the application. This is because we want to include their path operations in the OpenAPI schema and the user interfaces. As we cannot just isolate them and \"mount\" them independently of the rest, the path operations are \"cloned\" (re-created), not included directly.","title":"Include a path operation"},{"location":"tutorial/bigger-applications/#check-the-automatic-api-docs","text":"Now, run uvicorn , using the module app.main and the variable app : $ uvicorn app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) And open the docs at http://127.0.0.1:8000/docs . You will see the automatic API docs, including the paths from all the submodules, using the correct paths (and prefixes) and the correct tags:","title":"Check the automatic API docs"},{"location":"tutorial/bigger-applications/#include-the-same-router-multiple-times-with-different-prefix","text":"You can also use .include_router() multiple times with the same router using different prefixes. This could be useful, for example, to expose the same API under different prefixes, e.g. /api/v1 and /api/latest . This is an advanced usage that you might not really need, but it's there in case you do.","title":"Include the same router multiple times with different prefix"},{"location":"tutorial/bigger-applications/#include-an-apirouter-in-another","text":"The same way you can include an APIRouter in a FastAPI application, you can include an APIRouter in another APIRouter using: router . include_router ( other_router ) Make sure you do it before including router in the FastAPI app, so that the path operations from other_router are also included.","title":"Include an APIRouter in another"},{"location":"tutorial/body-fields/","text":"\ubcf8\ubb38 - \ud544\ub4dc \u00b6 Query , Path \ubc0f Body \ub97c \uc0ac\uc6a9\ud558\uc5ec \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\uc5d0\uc11c \ucd94\uac00 \uac80\uc99d \ubc0f \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc120\uc5b8\ud560 \uc218\uc788\ub294 \uac83\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c, Pydantic\uc758 Field \ub97c \uc0ac\uc6a9\ud558\uc5ec Pydantic \ubaa8\ub378 \ub0b4\ubd80\uc5d0\uc11c \uac80\uc99d \ubc0f \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Field \uc784\ud3ec\ud2b8 \u00b6 \uc6b0\uc120, \uc774\ub97c \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results \uacbd\uace0 Field \ub294 \ub098\uba38\uc9c0 \uac83\ub4e4( Query , Path , Body , \ub4f1)\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c fastapi \uac00 \uc544\ub2c8\ub77c pydantic \uc5d0\uc11c \uc9c1\uc811 \uc784\ud3ec\ud2b8 \ud569\ub2c8\ub2e4 \ubaa8\ub378 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8 \uc120\uc5b8 \u00b6 \ubaa8\ub378 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc640 \ud568\uaed8 Field \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results Field \ub294 Query , Path \ubc0f Body \uc640 \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c \uc791\ub3d9\ud558\uba70, \ubaa8\ub4e0 \ub9e4\uac1c\ubcc0\uc218 \ub4f1\uc774 \ub3d9\uc77c\ud569\ub2c8\ub2e4. \uae30\uc220 \uc138\ubd80\uc0ac\ud56d \uc0ac\uc2e4, Query , Path \uadf8\ub9ac\uace0 \uc5ec\ub7ec\ubd84\uc774 \ub098\uc911\uc5d0 \ubcf4\uac8c \ub420 \ub2e4\ub978 \uac83\ub4e4\uc740 FieldInfo \ud074\ub798\uc2a4\uc758 \uc11c\ube0c \ud074\ub798\uc2a4\uc778 \uacf5\ud1b5 Param \ud074\ub798\uc2a4\uc758 \uc11c\ube0c \ud074\ub798\uc2a4 \uac1d\uccb4\ub97c \ub9cc\ub4ed\ub2c8\ub2e4. \ub610\ud55c Pydantic\uc758 Field \ub294 FieldInfo \uc758 \uc778\uc2a4\ud134\uc2a4 \uc5ed\uc2dc \ubc18\ud658\ud569\ub2c8\ub2e4. Body \uc5ed\uc2dc FieldInfo \uc758 \uc11c\ube0c \ud074\ub798\uc2a4\uc758 \uac1d\uccb4\ub97c \uc9c1\uc811 \ubc18\ud658\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc911\uc5d0 \ubcf4\uac8c \ub420 Body \ud074\ub798\uc2a4\uc758 \uc11c\ube0c \ud074\ub798\uc2a4\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. fastapi \uc5d0\uc11c Query , Path \ubc0f \ub2e4\ub978 \uac83\ub4e4\uc744 \uc784\ud3ec\ud2b8\ud558\uba74, \uc774\ub4e4 \ubaa8\ub450 \ud2b9\ubcc4\ud55c \ud074\ub798\uc2a4\ub97c \ubc18\ud658\ud558\ub294 \uc2e4\uc81c \ud568\uc218\uc784\uc744 \uae30\uc5b5\ud558\uc138\uc694. \ud301 \ud0c0\uc785, \uae30\ubcf8\uac12, \uadf8\ub9ac\uace0 Field \ub97c \uac16\ub294 \uac01 \ubaa8\ub378\uc758 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uac00 Field \ub300\uc2e0 Path , Query \ubc0f Body \ub97c \uc0ac\uc6a9\ud558\uc5ec \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\uc640 \uc5b4\ub5bb\uac8c \ub3d9\uc77c\ud55c \uad6c\uc870\ub97c \uac16\ub294\uc9c0 \uc54c\uc544\ub450\uc138\uc694. \ucd94\uac00 \uc815\ubcf4 \ucd94\uac00 \u00b6 Field , Query , Body \ub4f1\uc5d0 \ucd94\uac00 \uc815\ubcf4\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774 \uc815\ubcf4\ub294 \uc0dd\uc131\ub41c JSON \uc2a4\ud0a4\ub9c8\uc5d0 \ud3ec\ud568\ub429\ub2c8\ub2e4. \uc608\uc81c \uc120\uc5b8\ud558\ub294 \uac83\uc744 \ubc30\uc6b8\ub54c \ubb38\uc11c\uc5d0 \ucd94\uac00 \uc815\ubcf4\ub97c \uc120\uc5b8\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6b8 \uac83\uc785\ub2c8\ub2e4. \uc694\uc57d \u00b6 \ubaa8\ub378 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub97c \uc704\ud55c \ucd94\uac00 \uac80\uc99d\uacfc \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc120\uc5b8\ud558\uae30 \uc704\ud574 Pydantic\uc758 Field \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucd94\uac00 JSON \uc2a4\ud0a4\ub9c8 \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc804\ub2ec\ud558\uae30 \uc704\ud574 \ucd94\uac00 \ud0a4\uc6cc\ub4dc \uc778\uc790 \ub610\ud55c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ubcf8\ubb38 - \ud544\ub4dc"},{"location":"tutorial/body-fields/#-","text":"Query , Path \ubc0f Body \ub97c \uc0ac\uc6a9\ud558\uc5ec \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\uc5d0\uc11c \ucd94\uac00 \uac80\uc99d \ubc0f \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc120\uc5b8\ud560 \uc218\uc788\ub294 \uac83\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c, Pydantic\uc758 Field \ub97c \uc0ac\uc6a9\ud558\uc5ec Pydantic \ubaa8\ub378 \ub0b4\ubd80\uc5d0\uc11c \uac80\uc99d \ubc0f \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ubcf8\ubb38 - \ud544\ub4dc"},{"location":"tutorial/body-fields/#field","text":"\uc6b0\uc120, \uc774\ub97c \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results \uacbd\uace0 Field \ub294 \ub098\uba38\uc9c0 \uac83\ub4e4( Query , Path , Body , \ub4f1)\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c fastapi \uac00 \uc544\ub2c8\ub77c pydantic \uc5d0\uc11c \uc9c1\uc811 \uc784\ud3ec\ud2b8 \ud569\ub2c8\ub2e4","title":"Field \uc784\ud3ec\ud2b8"},{"location":"tutorial/body-fields/#_1","text":"\ubaa8\ub378 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc640 \ud568\uaed8 Field \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results Field \ub294 Query , Path \ubc0f Body \uc640 \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c \uc791\ub3d9\ud558\uba70, \ubaa8\ub4e0 \ub9e4\uac1c\ubcc0\uc218 \ub4f1\uc774 \ub3d9\uc77c\ud569\ub2c8\ub2e4. \uae30\uc220 \uc138\ubd80\uc0ac\ud56d \uc0ac\uc2e4, Query , Path \uadf8\ub9ac\uace0 \uc5ec\ub7ec\ubd84\uc774 \ub098\uc911\uc5d0 \ubcf4\uac8c \ub420 \ub2e4\ub978 \uac83\ub4e4\uc740 FieldInfo \ud074\ub798\uc2a4\uc758 \uc11c\ube0c \ud074\ub798\uc2a4\uc778 \uacf5\ud1b5 Param \ud074\ub798\uc2a4\uc758 \uc11c\ube0c \ud074\ub798\uc2a4 \uac1d\uccb4\ub97c \ub9cc\ub4ed\ub2c8\ub2e4. \ub610\ud55c Pydantic\uc758 Field \ub294 FieldInfo \uc758 \uc778\uc2a4\ud134\uc2a4 \uc5ed\uc2dc \ubc18\ud658\ud569\ub2c8\ub2e4. Body \uc5ed\uc2dc FieldInfo \uc758 \uc11c\ube0c \ud074\ub798\uc2a4\uc758 \uac1d\uccb4\ub97c \uc9c1\uc811 \ubc18\ud658\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc911\uc5d0 \ubcf4\uac8c \ub420 Body \ud074\ub798\uc2a4\uc758 \uc11c\ube0c \ud074\ub798\uc2a4\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. fastapi \uc5d0\uc11c Query , Path \ubc0f \ub2e4\ub978 \uac83\ub4e4\uc744 \uc784\ud3ec\ud2b8\ud558\uba74, \uc774\ub4e4 \ubaa8\ub450 \ud2b9\ubcc4\ud55c \ud074\ub798\uc2a4\ub97c \ubc18\ud658\ud558\ub294 \uc2e4\uc81c \ud568\uc218\uc784\uc744 \uae30\uc5b5\ud558\uc138\uc694. \ud301 \ud0c0\uc785, \uae30\ubcf8\uac12, \uadf8\ub9ac\uace0 Field \ub97c \uac16\ub294 \uac01 \ubaa8\ub378\uc758 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uac00 Field \ub300\uc2e0 Path , Query \ubc0f Body \ub97c \uc0ac\uc6a9\ud558\uc5ec \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\uc640 \uc5b4\ub5bb\uac8c \ub3d9\uc77c\ud55c \uad6c\uc870\ub97c \uac16\ub294\uc9c0 \uc54c\uc544\ub450\uc138\uc694.","title":"\ubaa8\ub378 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8 \uc120\uc5b8"},{"location":"tutorial/body-fields/#_2","text":"Field , Query , Body \ub4f1\uc5d0 \ucd94\uac00 \uc815\ubcf4\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774 \uc815\ubcf4\ub294 \uc0dd\uc131\ub41c JSON \uc2a4\ud0a4\ub9c8\uc5d0 \ud3ec\ud568\ub429\ub2c8\ub2e4. \uc608\uc81c \uc120\uc5b8\ud558\ub294 \uac83\uc744 \ubc30\uc6b8\ub54c \ubb38\uc11c\uc5d0 \ucd94\uac00 \uc815\ubcf4\ub97c \uc120\uc5b8\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6b8 \uac83\uc785\ub2c8\ub2e4.","title":"\ucd94\uac00 \uc815\ubcf4 \ucd94\uac00"},{"location":"tutorial/body-fields/#_3","text":"\ubaa8\ub378 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub97c \uc704\ud55c \ucd94\uac00 \uac80\uc99d\uacfc \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc120\uc5b8\ud558\uae30 \uc704\ud574 Pydantic\uc758 Field \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucd94\uac00 JSON \uc2a4\ud0a4\ub9c8 \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc804\ub2ec\ud558\uae30 \uc704\ud574 \ucd94\uac00 \ud0a4\uc6cc\ub4dc \uc778\uc790 \ub610\ud55c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc694\uc57d"},{"location":"tutorial/body-multiple-params/","text":"\ubcf8\ubb38 - \ub2e4\uc911 \ub9e4\uac1c\ubcc0\uc218 \u00b6 \uc9c0\uae08\ubd80\ud130 Path \uc640 Query \ub97c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud558\ub294\uc9c0 \ud655\uc778\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc694\uccad \ubcf8\ubb38 \uc120\uc5b8\uc5d0 \ub300\ud55c \uc2ec\ud654 \uc0ac\uc6a9\ubc95\uc744 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Path , Query \ubc0f \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218 \ud63c\ud569 \u00b6 \ub2f9\uc5f0\ud558\uac8c Path , Query \ubc0f \uc694\uccad \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218 \uc120\uc5b8\uc744 \uc790\uc720\ub86d\uac8c \ud63c\ud569\ud574\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uace0, FastAPI \ub294 \uc5b4\ub5a4 \ub3d9\uc791\uc744 \ud560\uc9c0 \uc555\ub2c8\ub2e4. \ub610\ud55c, \uae30\ubcf8 \uac12\uc744 None \uc73c\ub85c \uc124\uc815\ud574 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\ud0dd\uc0ac\ud56d\uc73c\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI , Path from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 0 , le = 1000 ), q : Union [ str , None ] = None , item : Union [ Item , None ] = None , ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) if item : results . update ({ \"item\" : item }) return results \ucc38\uace0 \uc774 \uacbd\uc6b0\uc5d0\ub294 \ubcf8\ubb38\uc73c\ub85c \ubd80\ud130 \uac00\uc838\uc628 item \uc740 \uae30\ubcf8\uac12\uc774 None \uc774\uae30 \ub54c\ubb38\uc5d0, \uc120\ud0dd\uc0ac\ud56d\uc774\ub77c\ub294 \uc810\uc744 \uc720\uc758\ud574\uc57c \ud569\ub2c8\ub2e4. \ub2e4\uc911 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218 \u00b6 \uc774\uc804 \uc608\uc81c\uc5d0\uc11c \ubcf4\ub4ef\uc774, \uacbd\ub85c \ub3d9\uc791 \uc740 \uc544\ub798\uc640 \uac19\uc774 Item \uc18d\uc131\uc744 \uac00\uc9c4 JSON \ubcf8\ubb38\uc744 \uc608\uc0c1\ud569\ub2c8\ub2e4: { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } \ud558\uc9c0\ub9cc, \ub2e4\uc911 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218 \uc5ed\uc2dc \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608. item \uacfc user : from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user } return results \uc774 \uacbd\uc6b0\uc5d0, FastAPI \ub294 \uc774 \ud568\uc218 \uc548\uc5d0 \ud55c \uac1c \uc774\uc0c1\uc758 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218(Pydantic \ubaa8\ub378\uc778 \ub450 \ub9e4\uac1c\ubcc0\uc218)\uac00 \uc788\ub2e4\uace0 \uc54c \uac83\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c, \ubcf8\ubb38\uc758 \ub9e4\uac1c\ubcc0\uc218 \uc774\ub984\uc744 \ud0a4(\ud544\ub4dc \uba85)\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uace0, \ub2e4\uc74c\uacfc \uac19\uc740 \ubcf8\ubb38\uc744 \uc608\uce21\ud569\ub2c8\ub2e4: { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 }, \"user\" : { \"username\" : \"dave\" , \"full_name\" : \"Dave Grohl\" } } \ucc38\uace0 \uc774\uc804\uacfc \uac19\uc774 item \uc774 \uc120\uc5b8 \ub418\uc5c8\ub354\ub77c\ub3c4, \ubcf8\ubb38 \ub0b4\uc758 item \ud0a4\uac00 \uc788\uc744 \uac83\uc774\ub77c\uace0 \uc608\uce21\ud569\ub2c8\ub2e4. FastAPI\ub294 \uc694\uccad\uc744 \uc790\ub3d9\uc73c\ub85c \ubcc0\ud658\ud574, \ub9e4\uac1c\ubcc0\uc218\uc758 item \uacfc user \ub97c \ud2b9\ubcc4\ud55c \ub0b4\uc6a9\uc73c\ub85c \ubc1b\ub3c4\ub85d \ud560 \uac83\uc785\ub2c8\ub2e4. \ubcf5\ud569 \ub370\uc774\ud130\uc758 \uac80\uc99d\uc744 \uc218\ud589\ud558\uace0 OpenAPI \uc2a4\ud0a4\ub9c8 \ubc0f \uc790\ub3d9 \ubb38\uc11c\ub97c \ubb38\uc11c\ud654\ud569\ub2c8\ub2e4. \ubcf8\ubb38 \ub0b4\uc758 \ub2e8\uc77c \uac12 \u00b6 \ucffc\ub9ac \ubc0f \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub300\ud55c \ucd94\uac00 \ub370\uc774\ud130\ub97c \uc815\uc758\ud558\ub294 Query \uc640 Path \uc640 \uac19\uc774, FastAPI \ub294 \ub3d9\ub4f1\ud55c Body \ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc774\uc804\uc758 \ubaa8\ub378\uc744 \ud655\uc7a5\ud558\uba74, item \uacfc user \uc640 \ub3d9\uc77c\ud55c \ubcf8\ubb38\uc5d0 \ub610 \ub2e4\ub978 importance \ub77c\ub294 \ud0a4\ub97c \uac16\ub3c4\ub85d \ud560 \uc218\uc788\uc2b5\ub2c8\ub2e4. \ub2e8\uc77c \uac12\uc744 \uadf8\ub300\ub85c \uc120\uc5b8\ud55c\ub2e4\uba74, FastAPI \ub294 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub85c \uac00\uc815\ud560 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, FastAPI \uc758 Body \ub97c \uc0ac\uc6a9\ud574 \ub2e4\ub978 \ubcf8\ubb38 \ud0a4\ub85c \ucc98\ub9ac\ud558\ub3c4\ub85d \uc81c\uc5b4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User , importance : int = Body ()): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } return results \uc774 \uacbd\uc6b0\uc5d0\ub294 FastAPI \ub294 \ubcf8\ubb38\uc744 \uc774\uc640 \uac19\uc774 \uc608\uce21\ud560 \uac83\uc785\ub2c8\ub2e4: { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 }, \"user\" : { \"username\" : \"dave\" , \"full_name\" : \"Dave Grohl\" }, \"importance\" : 5 } \ub2e4\uc2dc \ub9d0\ud574, \ub370\uc774\ud130 \ud0c0\uc785, \uac80\uc99d, \ubb38\uc11c \ub4f1\uc744 \ubcc0\ud658\ud569\ub2c8\ub2e4. \ub2e4\uc911 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218\uc640 \ucffc\ub9ac \u00b6 \ub2f9\uc5f0\ud788, \ud544\uc694\ud560 \ub54c\ub9c8\ub2e4 \ucd94\uac00\uc801\uc778 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uace0, \uc774\ub294 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ucd94\uac00\ub429\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c \ub2e8\uc77c \uac12\uc740 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub85c \ud574\uc11d\ub418\ubbc0\ub85c, \uba85\uc2dc\uc801\uc73c\ub85c Query \ub97c \ucd94\uac00\ud560 \ud544\uc694\uac00 \uc5c6\uace0, \uc544\ub798\ucc98\ub7fc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int , item : Item , user : User , importance : int = Body ( gt = 0 ), q : Union [ str , None ] = None ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } if q : results . update ({ \"q\" : q }) return results \uc774\ub807\uac8c: q : Optional [ str ] = None \uc815\ubcf4 Body \ub610\ud55c Query , Path \uadf8\ub9ac\uace0 \uc774\ud6c4\uc5d0 \ubcfc \ub2e4\ub978 \uac83\ub4e4\ucc98\ub7fc \ub3d9\uc77c\ud55c \ucd94\uac00 \uac80\uc99d\uacfc \uba54\ud0c0\ub370\uc774\ud130 \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub2e8\uc77c \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218 \uc0bd\uc785\ud558\uae30 \u00b6 Pydantic \ubaa8\ub378 Item \uc758 item \uc744 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc624\uc9c1 \ud55c\uac1c\ub9cc \uac16\uace0\uc788\ub2e4\uace0 \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c FastAPI \ub294 \uc9c1\uc811 \ubcf8\ubb38\uc73c\ub85c \uc608\uce21\ud560 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, \ub9cc\uc57d \ubaa8\ub378 \ub0b4\uc6a9\uc5d0 item \ud0a4\ub97c \uac00\uc9c4 JSON\uc73c\ub85c \uc608\uce21\ud558\uae38 \uc6d0\ud55c\ub2e4\uba74, \ucd94\uac00\uc801\uc778 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud55c \uac83\ucc98\ub7fc Body \uc758 \ud2b9\ubcc4\ud55c \ub9e4\uac1c\ubcc0\uc218\uc778 embed \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results \uc544\ub798 \ucc98\ub7fc: item : Item = Body ( ... , embed = True ) \uc774 \uacbd\uc6b0\uc5d0 FastAPI \ub294 \ubcf8\ubb38\uc744 \uc544\ub798 \ub300\uc2e0\uc5d0: { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } \uc544\ub798 \ucc98\ub7fc \uc608\uce21\ud560 \uac83 \uc785\ub2c8\ub2e4: { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } } \uc815\ub9ac \u00b6 \uc694\uccad\uc774 \ub2e8 \ud55c\uac1c\uc758 \ubcf8\ubb38\uc744 \uac00\uc9c0\uace0 \uc788\ub354\ub77c\ub3c4, \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \ub85c \ub2e4\uc911 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, FastAPI \ub294 \uc774\ub97c \ucc98\ub9ac\ud558\uace0, \ud568\uc218\uc5d0 \uc62c\ubc14\ub978 \ub370\uc774\ud130\ub97c \uc81c\uacf5\ud558\uba70, \uacbd\ub85c\u001c \ub3d9\uc791 \uc73c\ub85c \uc62c\ubc14\ub978 \uc2a4\ud0a4\ub9c8\ub97c \uac80\uc99d\ud558\uace0 \ubb38\uc11c\ud654 \ud569\ub2c8\ub2e4\u001c. \ub610\ud55c, \ub2e8\uc77c \uac12\uc744 \ubcf8\ubb38\uc758 \uc77c\ubd80\ub85c \ubc1b\ub3c4\ub85d \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 FastAPI \ub294 \ub2e8 \ud55c\uac1c\uc758 \ub9e4\uac1c\ubcc0\uc218\uac00 \uc120\uc5b8 \ub418\ub354\ub77c\ub3c4, \ubcf8\ubb38 \ub0b4\uc758 \ud0a4\ub85c \uc0bd\uc785 \uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ubcf8\ubb38 - \ub2e4\uc911 \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/body-multiple-params/#-","text":"\uc9c0\uae08\ubd80\ud130 Path \uc640 Query \ub97c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud558\ub294\uc9c0 \ud655\uc778\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc694\uccad \ubcf8\ubb38 \uc120\uc5b8\uc5d0 \ub300\ud55c \uc2ec\ud654 \uc0ac\uc6a9\ubc95\uc744 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","title":"\ubcf8\ubb38 - \ub2e4\uc911 \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/body-multiple-params/#path-query","text":"\ub2f9\uc5f0\ud558\uac8c Path , Query \ubc0f \uc694\uccad \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218 \uc120\uc5b8\uc744 \uc790\uc720\ub86d\uac8c \ud63c\ud569\ud574\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uace0, FastAPI \ub294 \uc5b4\ub5a4 \ub3d9\uc791\uc744 \ud560\uc9c0 \uc555\ub2c8\ub2e4. \ub610\ud55c, \uae30\ubcf8 \uac12\uc744 None \uc73c\ub85c \uc124\uc815\ud574 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\ud0dd\uc0ac\ud56d\uc73c\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI , Path from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 0 , le = 1000 ), q : Union [ str , None ] = None , item : Union [ Item , None ] = None , ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) if item : results . update ({ \"item\" : item }) return results \ucc38\uace0 \uc774 \uacbd\uc6b0\uc5d0\ub294 \ubcf8\ubb38\uc73c\ub85c \ubd80\ud130 \uac00\uc838\uc628 item \uc740 \uae30\ubcf8\uac12\uc774 None \uc774\uae30 \ub54c\ubb38\uc5d0, \uc120\ud0dd\uc0ac\ud56d\uc774\ub77c\ub294 \uc810\uc744 \uc720\uc758\ud574\uc57c \ud569\ub2c8\ub2e4.","title":"Path, Query \ubc0f \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218 \ud63c\ud569"},{"location":"tutorial/body-multiple-params/#_1","text":"\uc774\uc804 \uc608\uc81c\uc5d0\uc11c \ubcf4\ub4ef\uc774, \uacbd\ub85c \ub3d9\uc791 \uc740 \uc544\ub798\uc640 \uac19\uc774 Item \uc18d\uc131\uc744 \uac00\uc9c4 JSON \ubcf8\ubb38\uc744 \uc608\uc0c1\ud569\ub2c8\ub2e4: { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } \ud558\uc9c0\ub9cc, \ub2e4\uc911 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218 \uc5ed\uc2dc \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608. item \uacfc user : from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user } return results \uc774 \uacbd\uc6b0\uc5d0, FastAPI \ub294 \uc774 \ud568\uc218 \uc548\uc5d0 \ud55c \uac1c \uc774\uc0c1\uc758 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218(Pydantic \ubaa8\ub378\uc778 \ub450 \ub9e4\uac1c\ubcc0\uc218)\uac00 \uc788\ub2e4\uace0 \uc54c \uac83\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c, \ubcf8\ubb38\uc758 \ub9e4\uac1c\ubcc0\uc218 \uc774\ub984\uc744 \ud0a4(\ud544\ub4dc \uba85)\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uace0, \ub2e4\uc74c\uacfc \uac19\uc740 \ubcf8\ubb38\uc744 \uc608\uce21\ud569\ub2c8\ub2e4: { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 }, \"user\" : { \"username\" : \"dave\" , \"full_name\" : \"Dave Grohl\" } } \ucc38\uace0 \uc774\uc804\uacfc \uac19\uc774 item \uc774 \uc120\uc5b8 \ub418\uc5c8\ub354\ub77c\ub3c4, \ubcf8\ubb38 \ub0b4\uc758 item \ud0a4\uac00 \uc788\uc744 \uac83\uc774\ub77c\uace0 \uc608\uce21\ud569\ub2c8\ub2e4. FastAPI\ub294 \uc694\uccad\uc744 \uc790\ub3d9\uc73c\ub85c \ubcc0\ud658\ud574, \ub9e4\uac1c\ubcc0\uc218\uc758 item \uacfc user \ub97c \ud2b9\ubcc4\ud55c \ub0b4\uc6a9\uc73c\ub85c \ubc1b\ub3c4\ub85d \ud560 \uac83\uc785\ub2c8\ub2e4. \ubcf5\ud569 \ub370\uc774\ud130\uc758 \uac80\uc99d\uc744 \uc218\ud589\ud558\uace0 OpenAPI \uc2a4\ud0a4\ub9c8 \ubc0f \uc790\ub3d9 \ubb38\uc11c\ub97c \ubb38\uc11c\ud654\ud569\ub2c8\ub2e4.","title":"\ub2e4\uc911 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/body-multiple-params/#_2","text":"\ucffc\ub9ac \ubc0f \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub300\ud55c \ucd94\uac00 \ub370\uc774\ud130\ub97c \uc815\uc758\ud558\ub294 Query \uc640 Path \uc640 \uac19\uc774, FastAPI \ub294 \ub3d9\ub4f1\ud55c Body \ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc774\uc804\uc758 \ubaa8\ub378\uc744 \ud655\uc7a5\ud558\uba74, item \uacfc user \uc640 \ub3d9\uc77c\ud55c \ubcf8\ubb38\uc5d0 \ub610 \ub2e4\ub978 importance \ub77c\ub294 \ud0a4\ub97c \uac16\ub3c4\ub85d \ud560 \uc218\uc788\uc2b5\ub2c8\ub2e4. \ub2e8\uc77c \uac12\uc744 \uadf8\ub300\ub85c \uc120\uc5b8\ud55c\ub2e4\uba74, FastAPI \ub294 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub85c \uac00\uc815\ud560 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, FastAPI \uc758 Body \ub97c \uc0ac\uc6a9\ud574 \ub2e4\ub978 \ubcf8\ubb38 \ud0a4\ub85c \ucc98\ub9ac\ud558\ub3c4\ub85d \uc81c\uc5b4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User , importance : int = Body ()): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } return results \uc774 \uacbd\uc6b0\uc5d0\ub294 FastAPI \ub294 \ubcf8\ubb38\uc744 \uc774\uc640 \uac19\uc774 \uc608\uce21\ud560 \uac83\uc785\ub2c8\ub2e4: { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 }, \"user\" : { \"username\" : \"dave\" , \"full_name\" : \"Dave Grohl\" }, \"importance\" : 5 } \ub2e4\uc2dc \ub9d0\ud574, \ub370\uc774\ud130 \ud0c0\uc785, \uac80\uc99d, \ubb38\uc11c \ub4f1\uc744 \ubcc0\ud658\ud569\ub2c8\ub2e4.","title":"\ubcf8\ubb38 \ub0b4\uc758 \ub2e8\uc77c \uac12"},{"location":"tutorial/body-multiple-params/#_3","text":"\ub2f9\uc5f0\ud788, \ud544\uc694\ud560 \ub54c\ub9c8\ub2e4 \ucd94\uac00\uc801\uc778 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uace0, \uc774\ub294 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ucd94\uac00\ub429\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c \ub2e8\uc77c \uac12\uc740 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub85c \ud574\uc11d\ub418\ubbc0\ub85c, \uba85\uc2dc\uc801\uc73c\ub85c Query \ub97c \ucd94\uac00\ud560 \ud544\uc694\uac00 \uc5c6\uace0, \uc544\ub798\ucc98\ub7fc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int , item : Item , user : User , importance : int = Body ( gt = 0 ), q : Union [ str , None ] = None ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } if q : results . update ({ \"q\" : q }) return results \uc774\ub807\uac8c: q : Optional [ str ] = None \uc815\ubcf4 Body \ub610\ud55c Query , Path \uadf8\ub9ac\uace0 \uc774\ud6c4\uc5d0 \ubcfc \ub2e4\ub978 \uac83\ub4e4\ucc98\ub7fc \ub3d9\uc77c\ud55c \ucd94\uac00 \uac80\uc99d\uacfc \uba54\ud0c0\ub370\uc774\ud130 \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ub2e4\uc911 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218\uc640 \ucffc\ub9ac"},{"location":"tutorial/body-multiple-params/#_4","text":"Pydantic \ubaa8\ub378 Item \uc758 item \uc744 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc624\uc9c1 \ud55c\uac1c\ub9cc \uac16\uace0\uc788\ub2e4\uace0 \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c FastAPI \ub294 \uc9c1\uc811 \ubcf8\ubb38\uc73c\ub85c \uc608\uce21\ud560 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, \ub9cc\uc57d \ubaa8\ub378 \ub0b4\uc6a9\uc5d0 item \ud0a4\ub97c \uac00\uc9c4 JSON\uc73c\ub85c \uc608\uce21\ud558\uae38 \uc6d0\ud55c\ub2e4\uba74, \ucd94\uac00\uc801\uc778 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud55c \uac83\ucc98\ub7fc Body \uc758 \ud2b9\ubcc4\ud55c \ub9e4\uac1c\ubcc0\uc218\uc778 embed \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results \uc544\ub798 \ucc98\ub7fc: item : Item = Body ( ... , embed = True ) \uc774 \uacbd\uc6b0\uc5d0 FastAPI \ub294 \ubcf8\ubb38\uc744 \uc544\ub798 \ub300\uc2e0\uc5d0: { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } \uc544\ub798 \ucc98\ub7fc \uc608\uce21\ud560 \uac83 \uc785\ub2c8\ub2e4: { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } }","title":"\ub2e8\uc77c \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218 \uc0bd\uc785\ud558\uae30"},{"location":"tutorial/body-multiple-params/#_5","text":"\uc694\uccad\uc774 \ub2e8 \ud55c\uac1c\uc758 \ubcf8\ubb38\uc744 \uac00\uc9c0\uace0 \uc788\ub354\ub77c\ub3c4, \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \ub85c \ub2e4\uc911 \ubcf8\ubb38 \ub9e4\uac1c\ubcc0\uc218\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, FastAPI \ub294 \uc774\ub97c \ucc98\ub9ac\ud558\uace0, \ud568\uc218\uc5d0 \uc62c\ubc14\ub978 \ub370\uc774\ud130\ub97c \uc81c\uacf5\ud558\uba70, \uacbd\ub85c\u001c \ub3d9\uc791 \uc73c\ub85c \uc62c\ubc14\ub978 \uc2a4\ud0a4\ub9c8\ub97c \uac80\uc99d\ud558\uace0 \ubb38\uc11c\ud654 \ud569\ub2c8\ub2e4\u001c. \ub610\ud55c, \ub2e8\uc77c \uac12\uc744 \ubcf8\ubb38\uc758 \uc77c\ubd80\ub85c \ubc1b\ub3c4\ub85d \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 FastAPI \ub294 \ub2e8 \ud55c\uac1c\uc758 \ub9e4\uac1c\ubcc0\uc218\uac00 \uc120\uc5b8 \ub418\ub354\ub77c\ub3c4, \ubcf8\ubb38 \ub0b4\uc758 \ud0a4\ub85c \uc0bd\uc785 \uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc815\ub9ac"},{"location":"tutorial/body-nested-models/","text":"\ubcf8\ubb38 - \uc911\ucca9 \ubaa8\ub378 \u00b6 FastAPI \ub97c \uc774\uc6a9\ud558\uba74 (Pydantic \ub355\ubd84\uc5d0) \ub2e8\ub3c5\uc73c\ub85c \uae4a\uc774 \uc911\ucca9\ub41c \ubaa8\ub378\uc744 \uc815\uc758, \uac80\uc99d, \ubb38\uc11c\ud654\ud558\uba70 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9ac\uc2a4\ud2b8 \ud544\ub4dc \u00b6 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub97c \uc11c\ube0c\ud0c0\uc785\uc73c\ub85c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ud30c\uc774\uc36c list \ub294: from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : list = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \uc774\ub294 tags \ub97c \ud56d\ubaa9 \ub9ac\uc2a4\ud2b8\ub85c \ub9cc\ub4ed\ub2c8\ub2e4. \uac01 \ud56d\ubaa9\uc758 \ud0c0\uc785\uc744 \uc120\uc5b8\ud558\uc9c0 \uc54a\ub354\ub77c\ub3c4\uc694. \ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub294 \ub9ac\uc2a4\ud2b8 \ud544\ub4dc \u00b6 \ud558\uc9c0\ub9cc \ud30c\uc774\uc36c\uc740 \ub0b4\ubd80\uc758 \ud0c0\uc785\uc774\ub098 \"\ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\"\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\ub294 \ud2b9\uc815 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4: typing\uc758 List \uc784\ud3ec\ud2b8 \u00b6 \uba3c\uc800, \ud30c\uc774\uc36c \ud45c\uc900 typing \ubaa8\ub4c8\uc5d0\uc11c List \ub97c \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4: from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\ub85c List \uc120\uc5b8 \u00b6 list , dict , tuple \uacfc \uac19\uc740 \ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218(\ub0b4\ubd80 \ud0c0\uc785)\ub97c \uac16\ub294 \ud0c0\uc785\uc744 \uc120\uc5b8\ud558\ub824\uba74: typing \ubaa8\ub4c8\uc5d0\uc11c \uc784\ud3ec\ud2b8 \ub300\uad04\ud638\ub97c \uc0ac\uc6a9\ud558\uc5ec \"\ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\"\ub85c \ub0b4\ubd80 \ud0c0\uc785 \uc804\ub2ec: [ \ubc0f ] from typing import List my_list : List [ str ] \uc774 \ubaa8\ub4e0 \uac83\uc740 \ud0c0\uc785 \uc120\uc5b8\uc744 \uc704\ud55c \ud45c\uc900 \ud30c\uc774\uc36c \ubb38\ubc95\uc785\ub2c8\ub2e4. \ub0b4\ubd80 \ud0c0\uc785\uc744 \uac16\ub294 \ubaa8\ub378 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc5d0 \ub300\ud574 \ub3d9\uc77c\ud55c \ud45c\uc900 \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud558\uc138\uc694. \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc608\uc81c\uc5d0\uc11c tags \ub97c \uad6c\uccb4\uc801\uc73c\ub85c \"\ubb38\uc790\uc5f4\uc758 \ub9ac\uc2a4\ud2b8\"\ub85c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \uc9d1\ud569 \ud0c0\uc785 \u00b6 \uadf8\ub7f0\ub370 \uc0dd\uac01\ud574\ubcf4\ub2c8 \ud0dc\uadf8\ub294 \ubc18\ubcf5\ub418\uba74 \uc548 \ub3fc\uace0, \uace0\uc720\ud55c(Unique) \ubb38\uc790\uc5f4\uc774\uc5b4\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud30c\uc774\uc36c\uc740 \uc9d1\ud569\uc744 \uc704\ud55c \ud2b9\ubcc4\ud55c \ub370\uc774\ud130 \ud0c0\uc785 set \uc774 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 Set \uc744 \uc784\ud3ec\ud2b8 \ud558\uace0 tags \ub97c str \uc758 set \uc73c\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \ub355\ubd84\uc5d0 \uc911\ubcf5 \ub370\uc774\ud130\uac00 \uc788\ub294 \uc694\uccad\uc744 \uc218\uc2e0\ud558\ub354\ub77c\ub3c4 \uace0\uc720\ud55c \ud56d\ubaa9\ub4e4\uc758 \uc9d1\ud569\uc73c\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud574\ub2f9 \ub370\uc774\ud130\ub97c \ucd9c\ub825 \ud560 \ub54c\ub9c8\ub2e4 \uc18c\uc2a4\uc5d0 \uc911\ubcf5\uc774 \uc788\ub354\ub77c\ub3c4 \uace0\uc720\ud55c \ud56d\ubaa9\ub4e4\uc758 \uc9d1\ud569\uc73c\ub85c \ucd9c\ub825\ub429\ub2c8\ub2e4. \ub610\ud55c \uadf8\uc5d0 \ub530\ub77c \uc8fc\uc11d\uc774 \uc0dd\uae30\uace0 \ubb38\uc11c\ud654\ub429\ub2c8\ub2e4. \uc911\ucca9 \ubaa8\ub378 \u00b6 Pydantic \ubaa8\ub378\uc758 \uac01 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub294 \ud0c0\uc785\uc744 \uac16\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ud574\ub2f9 \ud0c0\uc785 \uc790\uccb4\ub85c \ub610\ub2e4\ub978 Pydantic \ubaa8\ub378\uc758 \ud0c0\uc785\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ud2b9\uc815\ud55c \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc758 \uc774\ub984, \ud0c0\uc785, \uac80\uc99d\uc744 \uc0ac\uc6a9\ud558\uc5ec \uae4a\uac8c \uc911\ucca9\ub41c JSON \"\uac1d\uccb4\"\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \uac83\uc774 \ub2e8\ub3c5\uc73c\ub85c \uc911\ucca9\ub429\ub2c8\ub2e4. \uc11c\ube0c\ubaa8\ub378 \uc815\uc758 \u00b6 \uc608\ub97c \ub4e4\uc5b4, Image \ubaa8\ub378\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \uc11c\ube0c\ubaa8\ub4c8\uc744 \ud0c0\uc785\uc73c\ub85c \uc0ac\uc6a9 \u00b6 \uadf8\ub9ac\uace0 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc758 \ud0c0\uc785\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \uc774\ub294 FastAPI \uac00 \ub2e4\uc74c\uacfc \uc720\uc0ac\ud55c \ubcf8\ubb38\uc744 \uae30\ub300\ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4: { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 , \"tags\" : [ \"rock\" , \"metal\" , \"bar\" ], \"image\" : { \"url\" : \"http://example.com/baz.jpg\" , \"name\" : \"The Foo live\" } } \ub2e4\uc2dc \ud55c\ubc88, FastAPI \ub97c \uc0ac\uc6a9\ud558\uc5ec \ud574\ub2f9 \uc120\uc5b8\uc744 \ud568\uc73c\ub85c\uc368 \uc5bb\ub294 \uac83\uc740: \uc911\ucca9 \ubaa8\ub378\ub3c4 \ud3b8\uc9d1\uae30 \uc9c0\uc6d0(\uc790\ub3d9\uc644\uc131 \ub4f1) \ub370\uc774\ud130 \ubcc0\ud658 \ub370\uc774\ud130 \uac80\uc99d \uc790\ub3d9 \ubb38\uc11c\ud654 \ud2b9\ubcc4\ud55c \ud0c0\uc785\uacfc \uac80\uc99d \u00b6 str , int , float \ub4f1\uacfc \uac19\uc740 \ub2e8\uc77c \ud0c0\uc785\uacfc\ub294 \ubcc4\uac1c\ub85c, str \uc744 \uc0c1\uc18d\ud558\ub294 \ub354 \ubcf5\uc7a1\ud55c \ub2e8\uc77c \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \uc635\uc158\uc744 \ubcf4\ub824\uba74, Pydantic's exotic types \ubb38\uc11c\ub97c \ud655\uc778\ud558\uc138\uc694. \ub2e4\uc74c \uc7a5\uc5d0\uc11c \uba87\uac00\uc9c0 \uc608\uc81c\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 Image \ubaa8\ub378 \uc548\uc5d0 url \ud544\ub4dc\ub97c str \ub300\uc2e0 Pydantic\uc758 HttpUrl \ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \uc774 \ubb38\uc790\uc5f4\uc774 \uc720\ud6a8\ud55c URL\uc778\uc9c0 \uac80\uc0ac\ud558\uace0 JSON \uc2a4\ud0a4\ub9c8/OpenAPI\ub85c \ubb38\uc11c\ud654 \ub429\ub2c8\ub2e4. \uc11c\ube0c\ubaa8\ub378 \ub9ac\uc2a4\ud2b8\ub97c \uac16\ub294 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8 \u00b6 list , set \ub4f1\uc758 \uc11c\ube0c\ud0c0\uc785\uc73c\ub85c Pydantic \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: from typing import List , Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () images : Union [ List [ Image ], None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \uc544\ub798\uc640 \uac19\uc740 JSON \ubcf8\ubb38\uc73c\ub85c \uc608\uc0c1(\ubcc0\ud658, \uac80\uc99d, \ubb38\uc11c\ud654 \ub4f1\uc744)\ud569\ub2c8\ub2e4: { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 , \"tags\" : [ \"rock\" , \"metal\" , \"bar\" ], \"images\" : [ { \"url\" : \"http://example.com/baz.jpg\" , \"name\" : \"The Foo live\" }, { \"url\" : \"http://example.com/dave.jpg\" , \"name\" : \"The Baz\" } ] } \uc815\ubcf4 images \ud0a4\uac00 \uc5b4\ub5bb\uac8c \uc774\ubbf8\uc9c0 \uac1d\uccb4 \ub9ac\uc2a4\ud2b8\ub97c \uac16\ub294\uc9c0 \uc8fc\ubaa9\ud558\uc138\uc694. \uae4a\uac8c \uc911\ucca9\ub41c \ubaa8\ub378 \u00b6 \ub2e8\ub3c5\uc73c\ub85c \uae4a\uac8c \uc911\ucca9\ub41c \ubaa8\ub378\uc744 \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import List , Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () images : Union [ List [ Image ], None ] = None class Offer ( BaseModel ): name : str description : Union [ str , None ] = None price : float items : List [ Item ] @app . post ( \"/offers/\" ) async def create_offer ( offer : Offer ): return offer \uc815\ubcf4 Offer \uac00 \uc120\ud0dd\uc0ac\ud56d Image \ub9ac\uc2a4\ud2b8\ub97c \ucc28\ub840\ub85c \uac16\ub294 Item \ub9ac\uc2a4\ud2b8\ub97c \uc5b4\ub5bb\uac8c \uac00\uc9c0\uace0 \uc788\ub294\uc9c0 \uc8fc\ubaa9\ud558\uc138\uc694 \uc21c\uc218 \ub9ac\uc2a4\ud2b8\uc758 \ubcf8\ubb38 \u00b6 \uc608\uc0c1\ub418\ub294 JSON \ubcf8\ubb38\uc758 \ucd5c\uc0c1\uc704 \uac12\uc774 JSON array (\ud30c\uc774\uc36c list )\uba74, Pydantic \ubaa8\ub378\uc5d0\uc11c\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \ud568\uc218\uc758 \ub9e4\uac1c\ubcc0\uc218\uc5d0\uc11c \ud0c0\uc785\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: images : List [ Image ] \uc774\ub97c \uc544\ub798\ucc98\ub7fc: from typing import List from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str @app . post ( \"/images/multiple/\" ) async def create_multiple_images ( images : List [ Image ]): return images \uc5b4\ub514\uc11c\ub098 \ud3b8\uc9d1\uae30 \uc9c0\uc6d0 \u00b6 \uadf8\ub9ac\uace0 \uc5b4\ub514\uc11c\ub098 \ud3b8\uc9d1\uae30 \uc9c0\uc6d0\uc744 \ubc1b\uc744\uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9ac\uc2a4\ud2b8 \ub0b4\ubd80 \ud56d\ubaa9\uc758 \uacbd\uc6b0\uc5d0\ub3c4: Pydantic \ubaa8\ub378 \ub300\uc2e0\uc5d0 dict \ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud558\uc5ec \uc791\uc5c5\ud560 \uacbd\uc6b0, \uc774\ub7ec\ud55c \ud3b8\uc9d1\uae30 \uc9c0\uc6d0\uc744 \ubc1b\uc744\uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc218\uc2e0\ud55c \ub515\uc154\ub108\ub9ac\uac00 \uc790\ub3d9\uc73c\ub85c \ubcc0\ud658\ub418\uace0 \ucd9c\ub825\ub3c4 \uc790\ub3d9\uc73c\ub85c JSON\uc73c\ub85c \ubcc0\ud658\ub418\ubbc0\ub85c \uac71\uc815\ud560 \ud544\uc694\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \ub2e8\ub3c5 dict \uc758 \ubcf8\ubb38 \u00b6 \uc77c\ubd80 \ud0c0\uc785\uc758 \ud0a4\uc640 \ub2e4\ub978 \ud0c0\uc785\uc758 \uac12\uc744 \uc0ac\uc6a9\ud558\uc5ec dict \ub85c \ubcf8\ubb38\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (Pydantic\uc744 \uc0ac\uc6a9\ud55c \uacbd\uc6b0\ucc98\ub7fc) \uc720\ud6a8\ud55c \ud544\ub4dc/\uc5b4\ud2b8\ub9ac\ubdf0\ud2b8 \uc774\ub984\uc774 \ubb34\uc5c7\uc778\uc9c0 \uc54c \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uc544\uc9c1 \ubaa8\ub974\ub294 \ud0a4\ub97c \ubc1b\uc73c\ub824\ub294 \uacbd\uc6b0 \uc720\uc6a9\ud569\ub2c8\ub2e4. \ub2e4\ub978 \uc720\uc6a9\ud55c \uacbd\uc6b0\ub294 \ub2e4\ub978 \ud0c0\uc785\uc758 \ud0a4\ub97c \uac00\uc9c8 \ub54c\uc785\ub2c8\ub2e4. \uc608. int . \uc5ec\uae30\uc11c \uadf8 \uacbd\uc6b0\ub97c \ubcfc \uac83\uc785\ub2c8\ub2e4. \uc774 \uacbd\uc6b0, float \uac12\uc744 \uac00\uc9c4 int \ud0a4\uac00 \uc788\ub294 \ubaa8\ub4e0 dict \ub97c \ubc1b\uc544\ub4e4\uc785\ub2c8\ub2e4: from typing import Dict from fastapi import FastAPI app = FastAPI () @app . post ( \"/index-weights/\" ) async def create_index_weights ( weights : Dict [ int , float ]): return weights \ud301 JSON\uc740 \uc624\uc9c1 str \ud615 \ud0a4\ub9cc \uc9c0\uc6d0\ud55c\ub2e4\ub294 \uac83\uc744 \uc5fc\ub450\uc5d0 \ub450\uc138\uc694. \ud558\uc9c0\ub9cc Pydantic\uc740 \uc790\ub3d9 \ub370\uc774\ud130 \ubcc0\ud658\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc989, API \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \ubb38\uc790\uc5f4\uc744 \ud0a4\ub85c \ubcf4\ub0b4\ub354\ub77c\ub3c4 \ud574\ub2f9 \ubb38\uc790\uc5f4\uc774 \uc21c\uc218\ud55c \uc815\uc218\ub97c \ud3ec\ud568\ud558\ub294\ud55c Pydantic\uc740 \uc774\ub97c \ubcc0\ud658\ud558\uace0 \uac80\uc99d\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c weights \ub85c \ubc1b\uc740 dict \ub294 \uc2e4\uc81c\ub85c int \ud0a4\uc640 float \uac12\uc744 \uac00\uc9d1\ub2c8\ub2e4. \uc694\uc57d \u00b6 FastAPI \ub97c \uc0ac\uc6a9\ud558\uba74 Pydantic \ubaa8\ub378\uc774 \uc81c\uacf5\ud558\ub294 \ucd5c\ub300 \uc720\uc5f0\uc131\uc744 \ud655\ubcf4\ud558\uba74\uc11c \ucf54\ub4dc\ub97c \uac04\ub2e8\ud558\uace0 \uc9e7\uac8c, \uadf8\ub9ac\uace0 \uc6b0\uc544\ud558\uac8c \uc720\uc9c0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubb3c\ub860 \uc544\ub798\uc758 \uc774\uc810\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: \ud3b8\uc9d1\uae30 \uc9c0\uc6d0 (\uc790\ub3d9\uc644\uc131\uc774 \uc5b4\ub514\uc11c\ub098!) \ub370\uc774\ud130 \ubcc0\ud658 (\uc77c\uba85 \ud30c\uc2f1/\uc9c1\ub82c\ud654) \ub370\uc774\ud130 \uac80\uc99d \uc2a4\ud0a4\ub9c8 \ubb38\uc11c\ud654 \uc790\ub3d9 \ubb38\uc11c","title":"\ubcf8\ubb38 - \uc911\ucca9 \ubaa8\ub378"},{"location":"tutorial/body-nested-models/#-","text":"FastAPI \ub97c \uc774\uc6a9\ud558\uba74 (Pydantic \ub355\ubd84\uc5d0) \ub2e8\ub3c5\uc73c\ub85c \uae4a\uc774 \uc911\ucca9\ub41c \ubaa8\ub378\uc744 \uc815\uc758, \uac80\uc99d, \ubb38\uc11c\ud654\ud558\uba70 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ubcf8\ubb38 - \uc911\ucca9 \ubaa8\ub378"},{"location":"tutorial/body-nested-models/#_1","text":"\uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub97c \uc11c\ube0c\ud0c0\uc785\uc73c\ub85c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ud30c\uc774\uc36c list \ub294: from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : list = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \uc774\ub294 tags \ub97c \ud56d\ubaa9 \ub9ac\uc2a4\ud2b8\ub85c \ub9cc\ub4ed\ub2c8\ub2e4. \uac01 \ud56d\ubaa9\uc758 \ud0c0\uc785\uc744 \uc120\uc5b8\ud558\uc9c0 \uc54a\ub354\ub77c\ub3c4\uc694.","title":"\ub9ac\uc2a4\ud2b8 \ud544\ub4dc"},{"location":"tutorial/body-nested-models/#_2","text":"\ud558\uc9c0\ub9cc \ud30c\uc774\uc36c\uc740 \ub0b4\ubd80\uc758 \ud0c0\uc785\uc774\ub098 \"\ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\"\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\ub294 \ud2b9\uc815 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4:","title":"\ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub294 \ub9ac\uc2a4\ud2b8 \ud544\ub4dc"},{"location":"tutorial/body-nested-models/#typing-list","text":"\uba3c\uc800, \ud30c\uc774\uc36c \ud45c\uc900 typing \ubaa8\ub4c8\uc5d0\uc11c List \ub97c \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4: from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results","title":"typing\uc758 List \uc784\ud3ec\ud2b8"},{"location":"tutorial/body-nested-models/#list","text":"list , dict , tuple \uacfc \uac19\uc740 \ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218(\ub0b4\ubd80 \ud0c0\uc785)\ub97c \uac16\ub294 \ud0c0\uc785\uc744 \uc120\uc5b8\ud558\ub824\uba74: typing \ubaa8\ub4c8\uc5d0\uc11c \uc784\ud3ec\ud2b8 \ub300\uad04\ud638\ub97c \uc0ac\uc6a9\ud558\uc5ec \"\ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\"\ub85c \ub0b4\ubd80 \ud0c0\uc785 \uc804\ub2ec: [ \ubc0f ] from typing import List my_list : List [ str ] \uc774 \ubaa8\ub4e0 \uac83\uc740 \ud0c0\uc785 \uc120\uc5b8\uc744 \uc704\ud55c \ud45c\uc900 \ud30c\uc774\uc36c \ubb38\ubc95\uc785\ub2c8\ub2e4. \ub0b4\ubd80 \ud0c0\uc785\uc744 \uac16\ub294 \ubaa8\ub378 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc5d0 \ub300\ud574 \ub3d9\uc77c\ud55c \ud45c\uc900 \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud558\uc138\uc694. \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc608\uc81c\uc5d0\uc11c tags \ub97c \uad6c\uccb4\uc801\uc73c\ub85c \"\ubb38\uc790\uc5f4\uc758 \ub9ac\uc2a4\ud2b8\"\ub85c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results","title":"\ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\ub85c List \uc120\uc5b8"},{"location":"tutorial/body-nested-models/#_3","text":"\uadf8\ub7f0\ub370 \uc0dd\uac01\ud574\ubcf4\ub2c8 \ud0dc\uadf8\ub294 \ubc18\ubcf5\ub418\uba74 \uc548 \ub3fc\uace0, \uace0\uc720\ud55c(Unique) \ubb38\uc790\uc5f4\uc774\uc5b4\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud30c\uc774\uc36c\uc740 \uc9d1\ud569\uc744 \uc704\ud55c \ud2b9\ubcc4\ud55c \ub370\uc774\ud130 \ud0c0\uc785 set \uc774 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 Set \uc744 \uc784\ud3ec\ud2b8 \ud558\uace0 tags \ub97c str \uc758 set \uc73c\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \ub355\ubd84\uc5d0 \uc911\ubcf5 \ub370\uc774\ud130\uac00 \uc788\ub294 \uc694\uccad\uc744 \uc218\uc2e0\ud558\ub354\ub77c\ub3c4 \uace0\uc720\ud55c \ud56d\ubaa9\ub4e4\uc758 \uc9d1\ud569\uc73c\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud574\ub2f9 \ub370\uc774\ud130\ub97c \ucd9c\ub825 \ud560 \ub54c\ub9c8\ub2e4 \uc18c\uc2a4\uc5d0 \uc911\ubcf5\uc774 \uc788\ub354\ub77c\ub3c4 \uace0\uc720\ud55c \ud56d\ubaa9\ub4e4\uc758 \uc9d1\ud569\uc73c\ub85c \ucd9c\ub825\ub429\ub2c8\ub2e4. \ub610\ud55c \uadf8\uc5d0 \ub530\ub77c \uc8fc\uc11d\uc774 \uc0dd\uae30\uace0 \ubb38\uc11c\ud654\ub429\ub2c8\ub2e4.","title":"\uc9d1\ud569 \ud0c0\uc785"},{"location":"tutorial/body-nested-models/#_4","text":"Pydantic \ubaa8\ub378\uc758 \uac01 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub294 \ud0c0\uc785\uc744 \uac16\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ud574\ub2f9 \ud0c0\uc785 \uc790\uccb4\ub85c \ub610\ub2e4\ub978 Pydantic \ubaa8\ub378\uc758 \ud0c0\uc785\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ud2b9\uc815\ud55c \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc758 \uc774\ub984, \ud0c0\uc785, \uac80\uc99d\uc744 \uc0ac\uc6a9\ud558\uc5ec \uae4a\uac8c \uc911\ucca9\ub41c JSON \"\uac1d\uccb4\"\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \uac83\uc774 \ub2e8\ub3c5\uc73c\ub85c \uc911\ucca9\ub429\ub2c8\ub2e4.","title":"\uc911\ucca9 \ubaa8\ub378"},{"location":"tutorial/body-nested-models/#_5","text":"\uc608\ub97c \ub4e4\uc5b4, Image \ubaa8\ub378\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results","title":"\uc11c\ube0c\ubaa8\ub378 \uc815\uc758"},{"location":"tutorial/body-nested-models/#_6","text":"\uadf8\ub9ac\uace0 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc758 \ud0c0\uc785\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \uc774\ub294 FastAPI \uac00 \ub2e4\uc74c\uacfc \uc720\uc0ac\ud55c \ubcf8\ubb38\uc744 \uae30\ub300\ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4: { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 , \"tags\" : [ \"rock\" , \"metal\" , \"bar\" ], \"image\" : { \"url\" : \"http://example.com/baz.jpg\" , \"name\" : \"The Foo live\" } } \ub2e4\uc2dc \ud55c\ubc88, FastAPI \ub97c \uc0ac\uc6a9\ud558\uc5ec \ud574\ub2f9 \uc120\uc5b8\uc744 \ud568\uc73c\ub85c\uc368 \uc5bb\ub294 \uac83\uc740: \uc911\ucca9 \ubaa8\ub378\ub3c4 \ud3b8\uc9d1\uae30 \uc9c0\uc6d0(\uc790\ub3d9\uc644\uc131 \ub4f1) \ub370\uc774\ud130 \ubcc0\ud658 \ub370\uc774\ud130 \uac80\uc99d \uc790\ub3d9 \ubb38\uc11c\ud654","title":"\uc11c\ube0c\ubaa8\ub4c8\uc744 \ud0c0\uc785\uc73c\ub85c \uc0ac\uc6a9"},{"location":"tutorial/body-nested-models/#_7","text":"str , int , float \ub4f1\uacfc \uac19\uc740 \ub2e8\uc77c \ud0c0\uc785\uacfc\ub294 \ubcc4\uac1c\ub85c, str \uc744 \uc0c1\uc18d\ud558\ub294 \ub354 \ubcf5\uc7a1\ud55c \ub2e8\uc77c \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \uc635\uc158\uc744 \ubcf4\ub824\uba74, Pydantic's exotic types \ubb38\uc11c\ub97c \ud655\uc778\ud558\uc138\uc694. \ub2e4\uc74c \uc7a5\uc5d0\uc11c \uba87\uac00\uc9c0 \uc608\uc81c\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 Image \ubaa8\ub378 \uc548\uc5d0 url \ud544\ub4dc\ub97c str \ub300\uc2e0 Pydantic\uc758 HttpUrl \ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \uc774 \ubb38\uc790\uc5f4\uc774 \uc720\ud6a8\ud55c URL\uc778\uc9c0 \uac80\uc0ac\ud558\uace0 JSON \uc2a4\ud0a4\ub9c8/OpenAPI\ub85c \ubb38\uc11c\ud654 \ub429\ub2c8\ub2e4.","title":"\ud2b9\ubcc4\ud55c \ud0c0\uc785\uacfc \uac80\uc99d"},{"location":"tutorial/body-nested-models/#_8","text":"list , set \ub4f1\uc758 \uc11c\ube0c\ud0c0\uc785\uc73c\ub85c Pydantic \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: from typing import List , Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () images : Union [ List [ Image ], None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \uc544\ub798\uc640 \uac19\uc740 JSON \ubcf8\ubb38\uc73c\ub85c \uc608\uc0c1(\ubcc0\ud658, \uac80\uc99d, \ubb38\uc11c\ud654 \ub4f1\uc744)\ud569\ub2c8\ub2e4: { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 , \"tags\" : [ \"rock\" , \"metal\" , \"bar\" ], \"images\" : [ { \"url\" : \"http://example.com/baz.jpg\" , \"name\" : \"The Foo live\" }, { \"url\" : \"http://example.com/dave.jpg\" , \"name\" : \"The Baz\" } ] } \uc815\ubcf4 images \ud0a4\uac00 \uc5b4\ub5bb\uac8c \uc774\ubbf8\uc9c0 \uac1d\uccb4 \ub9ac\uc2a4\ud2b8\ub97c \uac16\ub294\uc9c0 \uc8fc\ubaa9\ud558\uc138\uc694.","title":"\uc11c\ube0c\ubaa8\ub378 \ub9ac\uc2a4\ud2b8\ub97c \uac16\ub294 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8"},{"location":"tutorial/body-nested-models/#_9","text":"\ub2e8\ub3c5\uc73c\ub85c \uae4a\uac8c \uc911\ucca9\ub41c \ubaa8\ub378\uc744 \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import List , Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () images : Union [ List [ Image ], None ] = None class Offer ( BaseModel ): name : str description : Union [ str , None ] = None price : float items : List [ Item ] @app . post ( \"/offers/\" ) async def create_offer ( offer : Offer ): return offer \uc815\ubcf4 Offer \uac00 \uc120\ud0dd\uc0ac\ud56d Image \ub9ac\uc2a4\ud2b8\ub97c \ucc28\ub840\ub85c \uac16\ub294 Item \ub9ac\uc2a4\ud2b8\ub97c \uc5b4\ub5bb\uac8c \uac00\uc9c0\uace0 \uc788\ub294\uc9c0 \uc8fc\ubaa9\ud558\uc138\uc694","title":"\uae4a\uac8c \uc911\ucca9\ub41c \ubaa8\ub378"},{"location":"tutorial/body-nested-models/#_10","text":"\uc608\uc0c1\ub418\ub294 JSON \ubcf8\ubb38\uc758 \ucd5c\uc0c1\uc704 \uac12\uc774 JSON array (\ud30c\uc774\uc36c list )\uba74, Pydantic \ubaa8\ub378\uc5d0\uc11c\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \ud568\uc218\uc758 \ub9e4\uac1c\ubcc0\uc218\uc5d0\uc11c \ud0c0\uc785\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: images : List [ Image ] \uc774\ub97c \uc544\ub798\ucc98\ub7fc: from typing import List from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str @app . post ( \"/images/multiple/\" ) async def create_multiple_images ( images : List [ Image ]): return images","title":"\uc21c\uc218 \ub9ac\uc2a4\ud2b8\uc758 \ubcf8\ubb38"},{"location":"tutorial/body-nested-models/#_11","text":"\uadf8\ub9ac\uace0 \uc5b4\ub514\uc11c\ub098 \ud3b8\uc9d1\uae30 \uc9c0\uc6d0\uc744 \ubc1b\uc744\uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9ac\uc2a4\ud2b8 \ub0b4\ubd80 \ud56d\ubaa9\uc758 \uacbd\uc6b0\uc5d0\ub3c4: Pydantic \ubaa8\ub378 \ub300\uc2e0\uc5d0 dict \ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud558\uc5ec \uc791\uc5c5\ud560 \uacbd\uc6b0, \uc774\ub7ec\ud55c \ud3b8\uc9d1\uae30 \uc9c0\uc6d0\uc744 \ubc1b\uc744\uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc218\uc2e0\ud55c \ub515\uc154\ub108\ub9ac\uac00 \uc790\ub3d9\uc73c\ub85c \ubcc0\ud658\ub418\uace0 \ucd9c\ub825\ub3c4 \uc790\ub3d9\uc73c\ub85c JSON\uc73c\ub85c \ubcc0\ud658\ub418\ubbc0\ub85c \uac71\uc815\ud560 \ud544\uc694\ub294 \uc5c6\uc2b5\ub2c8\ub2e4.","title":"\uc5b4\ub514\uc11c\ub098 \ud3b8\uc9d1\uae30 \uc9c0\uc6d0"},{"location":"tutorial/body-nested-models/#dict","text":"\uc77c\ubd80 \ud0c0\uc785\uc758 \ud0a4\uc640 \ub2e4\ub978 \ud0c0\uc785\uc758 \uac12\uc744 \uc0ac\uc6a9\ud558\uc5ec dict \ub85c \ubcf8\ubb38\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (Pydantic\uc744 \uc0ac\uc6a9\ud55c \uacbd\uc6b0\ucc98\ub7fc) \uc720\ud6a8\ud55c \ud544\ub4dc/\uc5b4\ud2b8\ub9ac\ubdf0\ud2b8 \uc774\ub984\uc774 \ubb34\uc5c7\uc778\uc9c0 \uc54c \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uc544\uc9c1 \ubaa8\ub974\ub294 \ud0a4\ub97c \ubc1b\uc73c\ub824\ub294 \uacbd\uc6b0 \uc720\uc6a9\ud569\ub2c8\ub2e4. \ub2e4\ub978 \uc720\uc6a9\ud55c \uacbd\uc6b0\ub294 \ub2e4\ub978 \ud0c0\uc785\uc758 \ud0a4\ub97c \uac00\uc9c8 \ub54c\uc785\ub2c8\ub2e4. \uc608. int . \uc5ec\uae30\uc11c \uadf8 \uacbd\uc6b0\ub97c \ubcfc \uac83\uc785\ub2c8\ub2e4. \uc774 \uacbd\uc6b0, float \uac12\uc744 \uac00\uc9c4 int \ud0a4\uac00 \uc788\ub294 \ubaa8\ub4e0 dict \ub97c \ubc1b\uc544\ub4e4\uc785\ub2c8\ub2e4: from typing import Dict from fastapi import FastAPI app = FastAPI () @app . post ( \"/index-weights/\" ) async def create_index_weights ( weights : Dict [ int , float ]): return weights \ud301 JSON\uc740 \uc624\uc9c1 str \ud615 \ud0a4\ub9cc \uc9c0\uc6d0\ud55c\ub2e4\ub294 \uac83\uc744 \uc5fc\ub450\uc5d0 \ub450\uc138\uc694. \ud558\uc9c0\ub9cc Pydantic\uc740 \uc790\ub3d9 \ub370\uc774\ud130 \ubcc0\ud658\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc989, API \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \ubb38\uc790\uc5f4\uc744 \ud0a4\ub85c \ubcf4\ub0b4\ub354\ub77c\ub3c4 \ud574\ub2f9 \ubb38\uc790\uc5f4\uc774 \uc21c\uc218\ud55c \uc815\uc218\ub97c \ud3ec\ud568\ud558\ub294\ud55c Pydantic\uc740 \uc774\ub97c \ubcc0\ud658\ud558\uace0 \uac80\uc99d\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c weights \ub85c \ubc1b\uc740 dict \ub294 \uc2e4\uc81c\ub85c int \ud0a4\uc640 float \uac12\uc744 \uac00\uc9d1\ub2c8\ub2e4.","title":"\ub2e8\ub3c5 dict\uc758 \ubcf8\ubb38"},{"location":"tutorial/body-nested-models/#_12","text":"FastAPI \ub97c \uc0ac\uc6a9\ud558\uba74 Pydantic \ubaa8\ub378\uc774 \uc81c\uacf5\ud558\ub294 \ucd5c\ub300 \uc720\uc5f0\uc131\uc744 \ud655\ubcf4\ud558\uba74\uc11c \ucf54\ub4dc\ub97c \uac04\ub2e8\ud558\uace0 \uc9e7\uac8c, \uadf8\ub9ac\uace0 \uc6b0\uc544\ud558\uac8c \uc720\uc9c0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubb3c\ub860 \uc544\ub798\uc758 \uc774\uc810\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: \ud3b8\uc9d1\uae30 \uc9c0\uc6d0 (\uc790\ub3d9\uc644\uc131\uc774 \uc5b4\ub514\uc11c\ub098!) \ub370\uc774\ud130 \ubcc0\ud658 (\uc77c\uba85 \ud30c\uc2f1/\uc9c1\ub82c\ud654) \ub370\uc774\ud130 \uac80\uc99d \uc2a4\ud0a4\ub9c8 \ubb38\uc11c\ud654 \uc790\ub3d9 \ubb38\uc11c","title":"\uc694\uc57d"},{"location":"tutorial/body-updates/","text":"\ubcf8\ubb38 - \uc218\uc815 \u00b6 PUT \uc744 \uc774\uc6a9\ud55c \uc218\uc815 \u00b6 \ud56d\ubaa9\uc744 \uc218\uc815 \ud558\uae30 \uc704\ud574 HTTP PUT \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. jsonable_encoder \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc785\ub825 \ub370\uc774\ud130\ub97c (\uc608\ub97c \ub4e4\uc5b4, NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5\ud55c) JSON\uc73c\ub85c \uc800\uc7a5 \uac00\ub2a5\ud558\uac8c \ubcc0\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74, datetime \uc790\ub8cc\ud615\uc744 str \ub85c \ubcc0\ud658\ud558\uac8c \ub429\ub2c8\ub2e4. from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . put ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): update_item_encoded = jsonable_encoder ( item ) items [ item_id ] = update_item_encoded return update_item_encoded PUT \uc740 \uae30\uc874 \ub370\uc774\ud130\ub97c \ub300\uccb4\ud558\uae30 \uc704\ud55c \ud56d\ubaa9\uc744 \uc218\uc2e0\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub370\uc774\ud130 \ub300\uccb4 \uacbd\uace0 \u00b6 \ubcf8\ubb38\uc774 \ud3ec\ud568\ub41c PUT \uc744 \uc0ac\uc6a9\ud558\uc5ec bar \ud56d\ubaa9\uc744 \uc218\uc815\ud558\ub824\uba74: { \"name\" : \"Barz\" , \"price\" : 3 , \"description\" : None , } \uc774\ubbf8 \uc800\uc7a5\ub41c \uc18d\uc131 \"tax\": 20.2 \ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uae30\ubcf8\uac12 \"tax\": 10.5 \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub370\uc774\ud130\ub294 10.5 \ub77c\ub294 \"\uc0c8\ub85c\uc6b4\" tax \ub85c \uc800\uc7a5\ub429\ub2c8\ub2e4. PATCH \ub97c \uc774\uc6a9\ud55c \ubd80\ubd84 \uc218\uc815 \u00b6 \ub370\uc774\ud130\ub97c \ubd80\ubd84\uc801\uc73c\ub85c \uc218\uc815\ud558\uae30 \uc704\ud574 HTTP PATCH \ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc989, \uc218\uc815\ud558\ub824\ub294 \ub370\uc774\ud130\ub9cc \ubcf4\ub0b4\uace0, \ub098\uba38\uc9c0\ub294 \uadf8\ub300\ub85c \ub458 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucc38\uace0 \uc77c\ubc18\uc801\uc73c\ub85c PATCH \ubcf4\ub2e4 PUT \uc774 \ub354 \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uace0, \uc798 \uc54c\ub824\uc838 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub9ce\uc740 \ud300\uc774 \ubd80\ubd84 \uc218\uc815\uc744 \ud560 \ub54c\ub3c4, PUT \ub9cc \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc6d0\ud558\ub294 \ub300\ub85c \uc790\uc720\ub86d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4, FastAPI \ub294 \uc774\ub97c \uc81c\ud55c\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774 \uc9c0\uce68\uc11c\ub294 \uac01 \uba54\uc11c\ub4dc\uac00 \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ub418\ub294 \uc9c0\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. Pydantic\uc758 exclude_unset \ub9e4\uac1c \ubcc0\uc218 \uc0ac\uc6a9 \u00b6 Pydantic \ubaa8\ub378\uc758 .dict() \uc5d0\uc11c exclude_unset \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ubd80\ubd84 \uc218\uc815\uc744 \uc704\ud574 \ub9e4\uc6b0 \uc720\uc6a9\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 item.dict(exclude_unset=True) \uc640 \uac19\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ud558\uba74 \uae30\ubcf8\uac12\uc744 \uc81c\uc678\ud558\uace0 item \ubaa8\ub378\uc744 \ub9cc\ub4e4 \ub54c \uc124\uc815\ud55c \ub370\uc774\ud130\ub9cc \uc788\ub294 dict \uac00 \uc0dd\uc131\ub429\ub2c8\ub2e4. \uc704 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc124\uc815\ub41c (\uc694\uccad\uc5d0\uc11c \uc804\uc1a1\ub41c) \ub370\uc774\ud130\ub9cc\uc73c\ub85c dict \ub97c \uc0dd\uc131\ud558\uace0 \uae30\ubcf8\uac12\uc744 \uc0dd\ub7b5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item Pydantic\uc758 update \ub9e4\uac1c \ubcc0\uc218 \uc0ac\uc6a9 \u00b6 \uc774\uc81c .copy() \ub97c \uc774\uc6a9\ud558\uc5ec \uae30\uc874 \ubaa8\ub378\uc758 \ubcf5\uc0ac\ubcf8\uc744 \ub9cc\ub4e4\uace0 \uc218\uc815\ud560 \ub370\uc774\ud130\uac00 \ud3ec\ud568\ub41c dict \uc640 \ud568\uaed8 update \ub9e4\uac1c\ubcc0\uc218\ub97c \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\uc2dc) stored_item_model.copy(update=update_data) : from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item \ubd80\ubd84 \uc218\uc815 \uc694\uc57d \u00b6 \ubd80\ubd84 \uc218\uc815\uc744 \uc801\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \uc694\uc57d\ud558\uba74: (\uc120\ud0dd) PUT \ub300\uc2e0 PATCH \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc800\uc7a5\ub41c \ub370\uc774\ud130\ub97c \uac80\uc0c9\ud569\ub2c8\ub2e4. \uc704 \ub370\uc774\ud130\ub97c Pydantic \ubaa8\ub378\uc5d0 \ub123\uc2b5\ub2c8\ub2e4. \uc704 \ubaa8\ub378\uc5d0\uc11c ( exclude_unset \uc744 \uc0ac\uc6a9\ud558\uc5ec) \uae30\ubcf8\uac12 \uc5c6\ub294 dict \ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc774\ub807\uac8c \ud558\uba74 \ubaa8\ub378\uc5d0 \uc774\ubbf8 \uae30\ubcf8\uac12\uc73c\ub85c \uc800\uc7a5\ub41c \uac12\uc744 \uc7ac\uc815\uc758\ud558\ub294 \ub300\uc2e0 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc2e4\uc81c\ub85c \uc124\uc815\ud55c \uac12\ub9cc \uc218\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc800\uc7a5\ub41c \ubaa8\ub378\uc758 \ubcf5\uc0ac\ubcf8\uc744 \ub9cc\ub4e4\uace0, ( update \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec) \uc218\uc2e0\ub41c \ubd80\ubd84 \ub370\uc774\ud130\ub85c \uc18d\uc131\uc744 \uc218\uc815\ud569\ub2c8\ub2e4. (\uc608\ub97c \ub4e4\uba74, jsonable_encoder \ub97c \uc0ac\uc6a9\ud55c \uac83\uacfc \uac19\uc774) \ubcf5\uc0ac\ub41c \ubaa8\ub378\uc744 DB\uc5d0 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \ud615\ud0dc\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \ubaa8\ub378\uc758 .dict() \uba54\uc11c\ub4dc\ub97c \ub2e4\uc2dc \uc0ac\uc6a9\ud558\ub294 \uac83\uacfc \ube44\uc2b7\ud558\uc9c0\ub9cc, \uc608\ub97c \ub4e4\uc5b4, datetime \uc744 str \ub85c \ubcc0\ud658\ud558\ub4ef, \uac12\uc744 JSON\uc73c\ub85c \ubcc0\ud658\ub420 \uc218 \uc788\ub294 \ub370\uc774\ud130 \uc790\ub8cc\ud615\uc73c\ub85c \ud655\uc778 (\ubc0f \ubcc0\ud658) \ud569\ub2c8\ub2e4. DB\uc5d0 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4. \uc218\uc815\ub41c \ub370\uc774\ud130 \ubaa8\ub378\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item \ud301 \uc2e4\uc81c\ub85c HTTP PUT \uba54\uc11c\ub4dc\ub97c \uc774\uc6a9\ud558\uc5ec \uc774\uc640 \ub3d9\uc77c\ud55c \uae30\uc220\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc774 \uc608\uc81c\ub294 \uc774\ub807\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc815\ub3c4\ub9cc \ubcf4\uc5ec\uc8fc\uae30 \uc704\ud574 \ub9cc\ub4e4\uc5b4\uc84c\uc73c\ubbc0\ub85c PATCH \ub97c \uc774\uc6a9\ud558\ub294 \uac83\uc774 \ubc14\ub78c\uc9c1\ud569\ub2c8\ub2e4. \ucc38\uace0 \uc785\ub825 \ubaa8\ub378\uc758 \uac80\uc99d\uc740 \uc5ec\uc804\ud788 \uc774\ub904\uc9d1\ub2c8\ub2e4. \ub530\ub77c\uc11c, \ubaa8\ub4e0 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub97c \uc0dd\ub7b5\ud560 \uc218 \uc788\ub294 \ubd80\ubd84 \uc218\uc815\uc744 \uc704\ud574\uc11c\ub294 \ubaa8\ub4e0 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uac00 (\uae30\ubcf8\uac12\uc744 \uc9c0\uc815\ud558\uac70\ub098 \ud639\uc740 None \uc744 \uc0ac\uc6a9\ud558\uc5ec) \uc120\ud0dd\uc0ac\ud56d\uc73c\ub85c \ud45c\uc2dc\ub41c \ubaa8\ub378\uc774 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc218\uc815 \uc744 \uc704\ud574 \ubaa8\ub4e0 \uc120\ud0dd\uc801 \uac12\uc774 \uc788\ub294 \ubaa8\ub378\uacfc \uc0dd\uc131 \uc744 \uc704\ud574 \ud544\uc218\uc801\uc73c\ub85c \uc694\uad6c\ub418\ub294 \uac12\uc774 \uc788\ub294 \ubaa8\ub378\uc744 \uad6c\ubcc4\ud558\uae30 \uc704\ud574\uc11c\ub294, \ucd94\uac00 \ubaa8\ub378 \uc5d0 \uc788\ub294 \ubc29\ubc95\uc744 \uc774\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ubcf8\ubb38 - \uc218\uc815"},{"location":"tutorial/body-updates/#-","text":"","title":"\ubcf8\ubb38 - \uc218\uc815"},{"location":"tutorial/body-updates/#put","text":"\ud56d\ubaa9\uc744 \uc218\uc815 \ud558\uae30 \uc704\ud574 HTTP PUT \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. jsonable_encoder \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc785\ub825 \ub370\uc774\ud130\ub97c (\uc608\ub97c \ub4e4\uc5b4, NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5\ud55c) JSON\uc73c\ub85c \uc800\uc7a5 \uac00\ub2a5\ud558\uac8c \ubcc0\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74, datetime \uc790\ub8cc\ud615\uc744 str \ub85c \ubcc0\ud658\ud558\uac8c \ub429\ub2c8\ub2e4. from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . put ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): update_item_encoded = jsonable_encoder ( item ) items [ item_id ] = update_item_encoded return update_item_encoded PUT \uc740 \uae30\uc874 \ub370\uc774\ud130\ub97c \ub300\uccb4\ud558\uae30 \uc704\ud55c \ud56d\ubaa9\uc744 \uc218\uc2e0\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.","title":"PUT\uc744 \uc774\uc6a9\ud55c \uc218\uc815"},{"location":"tutorial/body-updates/#_1","text":"\ubcf8\ubb38\uc774 \ud3ec\ud568\ub41c PUT \uc744 \uc0ac\uc6a9\ud558\uc5ec bar \ud56d\ubaa9\uc744 \uc218\uc815\ud558\ub824\uba74: { \"name\" : \"Barz\" , \"price\" : 3 , \"description\" : None , } \uc774\ubbf8 \uc800\uc7a5\ub41c \uc18d\uc131 \"tax\": 20.2 \ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uae30\ubcf8\uac12 \"tax\": 10.5 \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub370\uc774\ud130\ub294 10.5 \ub77c\ub294 \"\uc0c8\ub85c\uc6b4\" tax \ub85c \uc800\uc7a5\ub429\ub2c8\ub2e4.","title":"\ub370\uc774\ud130 \ub300\uccb4 \uacbd\uace0"},{"location":"tutorial/body-updates/#patch","text":"\ub370\uc774\ud130\ub97c \ubd80\ubd84\uc801\uc73c\ub85c \uc218\uc815\ud558\uae30 \uc704\ud574 HTTP PATCH \ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc989, \uc218\uc815\ud558\ub824\ub294 \ub370\uc774\ud130\ub9cc \ubcf4\ub0b4\uace0, \ub098\uba38\uc9c0\ub294 \uadf8\ub300\ub85c \ub458 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucc38\uace0 \uc77c\ubc18\uc801\uc73c\ub85c PATCH \ubcf4\ub2e4 PUT \uc774 \ub354 \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uace0, \uc798 \uc54c\ub824\uc838 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub9ce\uc740 \ud300\uc774 \ubd80\ubd84 \uc218\uc815\uc744 \ud560 \ub54c\ub3c4, PUT \ub9cc \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc6d0\ud558\ub294 \ub300\ub85c \uc790\uc720\ub86d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4, FastAPI \ub294 \uc774\ub97c \uc81c\ud55c\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774 \uc9c0\uce68\uc11c\ub294 \uac01 \uba54\uc11c\ub4dc\uac00 \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ub418\ub294 \uc9c0\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.","title":"PATCH\ub97c \uc774\uc6a9\ud55c \ubd80\ubd84 \uc218\uc815"},{"location":"tutorial/body-updates/#pydantic-exclude_unset","text":"Pydantic \ubaa8\ub378\uc758 .dict() \uc5d0\uc11c exclude_unset \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ubd80\ubd84 \uc218\uc815\uc744 \uc704\ud574 \ub9e4\uc6b0 \uc720\uc6a9\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 item.dict(exclude_unset=True) \uc640 \uac19\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ud558\uba74 \uae30\ubcf8\uac12\uc744 \uc81c\uc678\ud558\uace0 item \ubaa8\ub378\uc744 \ub9cc\ub4e4 \ub54c \uc124\uc815\ud55c \ub370\uc774\ud130\ub9cc \uc788\ub294 dict \uac00 \uc0dd\uc131\ub429\ub2c8\ub2e4. \uc704 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc124\uc815\ub41c (\uc694\uccad\uc5d0\uc11c \uc804\uc1a1\ub41c) \ub370\uc774\ud130\ub9cc\uc73c\ub85c dict \ub97c \uc0dd\uc131\ud558\uace0 \uae30\ubcf8\uac12\uc744 \uc0dd\ub7b5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item","title":"Pydantic\uc758 exclude_unset \ub9e4\uac1c \ubcc0\uc218 \uc0ac\uc6a9"},{"location":"tutorial/body-updates/#pydantic-update","text":"\uc774\uc81c .copy() \ub97c \uc774\uc6a9\ud558\uc5ec \uae30\uc874 \ubaa8\ub378\uc758 \ubcf5\uc0ac\ubcf8\uc744 \ub9cc\ub4e4\uace0 \uc218\uc815\ud560 \ub370\uc774\ud130\uac00 \ud3ec\ud568\ub41c dict \uc640 \ud568\uaed8 update \ub9e4\uac1c\ubcc0\uc218\ub97c \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\uc2dc) stored_item_model.copy(update=update_data) : from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item","title":"Pydantic\uc758 update \ub9e4\uac1c \ubcc0\uc218 \uc0ac\uc6a9"},{"location":"tutorial/body-updates/#_2","text":"\ubd80\ubd84 \uc218\uc815\uc744 \uc801\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \uc694\uc57d\ud558\uba74: (\uc120\ud0dd) PUT \ub300\uc2e0 PATCH \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc800\uc7a5\ub41c \ub370\uc774\ud130\ub97c \uac80\uc0c9\ud569\ub2c8\ub2e4. \uc704 \ub370\uc774\ud130\ub97c Pydantic \ubaa8\ub378\uc5d0 \ub123\uc2b5\ub2c8\ub2e4. \uc704 \ubaa8\ub378\uc5d0\uc11c ( exclude_unset \uc744 \uc0ac\uc6a9\ud558\uc5ec) \uae30\ubcf8\uac12 \uc5c6\ub294 dict \ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc774\ub807\uac8c \ud558\uba74 \ubaa8\ub378\uc5d0 \uc774\ubbf8 \uae30\ubcf8\uac12\uc73c\ub85c \uc800\uc7a5\ub41c \uac12\uc744 \uc7ac\uc815\uc758\ud558\ub294 \ub300\uc2e0 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc2e4\uc81c\ub85c \uc124\uc815\ud55c \uac12\ub9cc \uc218\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc800\uc7a5\ub41c \ubaa8\ub378\uc758 \ubcf5\uc0ac\ubcf8\uc744 \ub9cc\ub4e4\uace0, ( update \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec) \uc218\uc2e0\ub41c \ubd80\ubd84 \ub370\uc774\ud130\ub85c \uc18d\uc131\uc744 \uc218\uc815\ud569\ub2c8\ub2e4. (\uc608\ub97c \ub4e4\uba74, jsonable_encoder \ub97c \uc0ac\uc6a9\ud55c \uac83\uacfc \uac19\uc774) \ubcf5\uc0ac\ub41c \ubaa8\ub378\uc744 DB\uc5d0 \uc800\uc7a5\ud560 \uc218 \uc788\ub294 \ud615\ud0dc\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \ubaa8\ub378\uc758 .dict() \uba54\uc11c\ub4dc\ub97c \ub2e4\uc2dc \uc0ac\uc6a9\ud558\ub294 \uac83\uacfc \ube44\uc2b7\ud558\uc9c0\ub9cc, \uc608\ub97c \ub4e4\uc5b4, datetime \uc744 str \ub85c \ubcc0\ud658\ud558\ub4ef, \uac12\uc744 JSON\uc73c\ub85c \ubcc0\ud658\ub420 \uc218 \uc788\ub294 \ub370\uc774\ud130 \uc790\ub8cc\ud615\uc73c\ub85c \ud655\uc778 (\ubc0f \ubcc0\ud658) \ud569\ub2c8\ub2e4. DB\uc5d0 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4. \uc218\uc815\ub41c \ub370\uc774\ud130 \ubaa8\ub378\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4. from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item \ud301 \uc2e4\uc81c\ub85c HTTP PUT \uba54\uc11c\ub4dc\ub97c \uc774\uc6a9\ud558\uc5ec \uc774\uc640 \ub3d9\uc77c\ud55c \uae30\uc220\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc774 \uc608\uc81c\ub294 \uc774\ub807\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc815\ub3c4\ub9cc \ubcf4\uc5ec\uc8fc\uae30 \uc704\ud574 \ub9cc\ub4e4\uc5b4\uc84c\uc73c\ubbc0\ub85c PATCH \ub97c \uc774\uc6a9\ud558\ub294 \uac83\uc774 \ubc14\ub78c\uc9c1\ud569\ub2c8\ub2e4. \ucc38\uace0 \uc785\ub825 \ubaa8\ub378\uc758 \uac80\uc99d\uc740 \uc5ec\uc804\ud788 \uc774\ub904\uc9d1\ub2c8\ub2e4. \ub530\ub77c\uc11c, \ubaa8\ub4e0 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub97c \uc0dd\ub7b5\ud560 \uc218 \uc788\ub294 \ubd80\ubd84 \uc218\uc815\uc744 \uc704\ud574\uc11c\ub294 \ubaa8\ub4e0 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uac00 (\uae30\ubcf8\uac12\uc744 \uc9c0\uc815\ud558\uac70\ub098 \ud639\uc740 None \uc744 \uc0ac\uc6a9\ud558\uc5ec) \uc120\ud0dd\uc0ac\ud56d\uc73c\ub85c \ud45c\uc2dc\ub41c \ubaa8\ub378\uc774 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc218\uc815 \uc744 \uc704\ud574 \ubaa8\ub4e0 \uc120\ud0dd\uc801 \uac12\uc774 \uc788\ub294 \ubaa8\ub378\uacfc \uc0dd\uc131 \uc744 \uc704\ud574 \ud544\uc218\uc801\uc73c\ub85c \uc694\uad6c\ub418\ub294 \uac12\uc774 \uc788\ub294 \ubaa8\ub378\uc744 \uad6c\ubcc4\ud558\uae30 \uc704\ud574\uc11c\ub294, \ucd94\uac00 \ubaa8\ub378 \uc5d0 \uc788\ub294 \ubc29\ubc95\uc744 \uc774\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ubd80\ubd84 \uc218\uc815 \uc694\uc57d"},{"location":"tutorial/body/","text":"\uc694\uccad \ubcf8\ubb38 \u00b6 \ud074\ub77c\uc774\uc5b8\ud2b8(\ube0c\ub77c\uc6b0\uc800\ub77c\uace0 \ud569\uc2dc\ub2e4)\uc5d0\uc11c API\ub85c \ub370\uc774\ud130\ub97c \ubcf4\ub0b4\uc57c \ud560 \ub54c, \uc694\uccad \ubcf8\ubb38 \uc744 \ubcf4\ub0c5\ub2c8\ub2e4. \uc694\uccad \ubcf8\ubb38\uc740 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uc11c API\ub85c \ubcf4\ub0b4\ub294 \ub370\uc774\ud130\uc785\ub2c8\ub2e4. \uc751\ub2f5 \ubcf8\ubb38\uc740 API\uc5d0\uc11c \ud074\ub77c\uc774\uc5b8\ud2b8\ub85c \ubcf4\ub0b4\ub294 \ub370\uc774\ud130\uc785\ub2c8\ub2e4. API\ub294 \ub300\ubd80\ubd84 \uc751\ub2f5 \ubcf8\ubb38\uc744 \ubcf4\ub0c5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \ud56d\uc0c1 \uc694\uccad \ubcf8\ubb38\uc744 \ubcf4\ub0bc \ud544\uc694\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \uc694\uccad \ubcf8\ubb38\uc744 \uc120\uc5b8\ud558\ub824\uba74, \uac15\ub825\ud55c \ud798\uacfc \uc7a5\uc810\uc744 \uac00\uc9c4 Pydantic \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4. \uc815\ubcf4 \ub370\uc774\ud130\ub97c \ubcf4\ub0b4\uae30 \uc704\ud574\uc11c \ub2e4\uc74c \uc911 \ud558\ub098\ub97c \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4: POST (\uc880 \ub354 \uc77c\ubc18\uc801), PUT , DELETE \ub610\ub294 PATCH . GET \uc694\uccad\uc73c\ub85c \ubcf8\ubb38\uc744 \ubcf4\ub0b4\ub294 \uac83\uc740 \uc0ac\uc591\uc5d0 \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \ub3d9\uc791\uc774 \uc788\uc9c0\ub9cc, \uadf8\ub7fc\uc5d0\ub3c4 FastAPI\ub294 \ub9e4\uc6b0 \ubcf5\uc7a1/\uadf9\ub2e8\uc801 \uc0ac\uc6a9 \uc0ac\ub840\uc5d0 \ub300\ud574\uc11c\ub9cc \uc9c0\uc6d0\ub429\ub2c8\ub2e4. \uc774\uac83\uc740 \uad8c\uc7a5\ub418\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 Swagger UI \ub300\ud654\ud615 \ubb38\uc11c\ub294 GET \uc744 \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \ubcf8\ubb38\uc5d0 \ub300\ud55c \ubb38\uc11c\ub97c \ubcf4\uc5ec\uc8fc\uc9c0 \uc54a\uace0, \uc911\uac04\uc5d0 \uc788\ub294 \ud504\ub85d\uc2dc\uac00 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc744\uc218 \uc788\uc2b5\ub2c8\ub2e4. Pydantic\uc758 BaseModel \uc784\ud3ec\ud2b8 \u00b6 \uc6b0\uc120, pydantic \uc5d0\uc11c BaseModel \ub97c \uc784\ud3ec\ud2b8\ud574\uc57c \ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \ub370\uc774\ud130 \ubaa8\ub378 \uc0dd\uc131 \u00b6 \uc774\uc81c BaseModel \uc744 \uc0c1\uc18d\ud558\ub294 \ud074\ub798\uc2a4\ub85c \ub370\uc774\ud130 \ubaa8\ub378\uc744 \uc120\uc5b8\ud569\ub2c8\ub2e4. \ubaa8\ub4e0 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc5d0 \ud45c\uc900 \ud30c\uc774\uc36c \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud560 \ub54c\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c, \ubaa8\ub378 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc5d0 \uae30\ubcf8\uac12\uc774 \uc788\uc73c\uba74 \ud544\uc218\uac00 \uc544\ub2d9\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ud544\uc218\uc785\ub2c8\ub2e4. \uc120\ud0dd\uc801\uc73c\ub85c \ub9cc\ub4e4\ub824\uba74 None \uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc704\uc5d0\uc11c \uc774 \ubaa8\ub378\uc740 JSON \" object \"(\ub610\ub294 \ud30c\uc774\uc36c dict )\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc120\uc5b8\ud569\ub2c8\ub2e4: { \"name\" : \"Foo\" , \"description\" : \"An optional description\" , \"price\" : 45.2 , \"tax\" : 3.5 } ... description \uacfc tax \ub294 ( None \uac12\uc744 \uae30\ubcf8\uac12\uc73c\ub85c \ud558\uba74\uc11c) \uc120\ud0dd\uc801\uc774\uba70, \uc774 JSON \" object \" \ub610\ud55c \uc720\ud6a8\ud569\ub2c8\ub2e4: { \"name\" : \"Foo\" , \"price\" : 45.2 } \ub9e4\uac1c\ubcc0\uc218\ub85c \uc120\uc5b8 \u00b6 \uc774\ub97c \uacbd\ub85c \ub3d9\uc791 \uc5d0 \ucd94\uac00\ud558\ub824\uba74 \uacbd\ub85c \ubc0f \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud55c \uac83\uacfc \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c \uc120\uc5b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item ...\uadf8\ub9ac\uace0 \uc0dd\uc131\ud55c Item \ubaa8\ub378\ub85c \ud0c0\uc785\uc744 \uc120\uc5b8\ud569\ub2c8\ub2e4. \uacb0\uacfc \u00b6 \ud30c\uc774\uc120 \ud0c0\uc785 \uc120\uc5b8\ub9cc\uc73c\ub85c FastAPI \ub294: \uc694\uccad \ubcf8\ubb38\uc744 JSON\uc73c\ub85c \uc77d\uc2b5\ub2c8\ub2e4. (\ud544\uc694\ud558\ub2e4\uba74) \ud574\ub2f9 \ud0c0\uc785\uc744 \ubcc0\ud658\ud569\ub2c8\ub2e4. \ub370\uc774\ud130\ub97c \uac80\uc99d\ud569\ub2c8\ub2e4. \ub370\uc774\ud130\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\ub2e4\uba74, \uc798\ubabb\ub41c \ub370\uc774\ud130\uac00 \uc5b4\ub514\uc5d0\uc11c \ubb34\uc5c7\uc778\uc9c0 \uc815\ud655\ud558\uac8c \ud45c\uc2dc\ud558\ub294 \uba4b\uc9c0\uace0 \uba85\ud655\ud55c \uc624\ub958\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \ub9e4\uac1c\ubcc0\uc218 item \uc5d0 \uc218\uc2e0\ud55c \ub370\uc774\ud130\ub97c \uc804\ub2ec\ud569\ub2c8\ub2e4. \ud568\uc218\uc5d0 Item \ud0c0\uc785\uc73c\ub85c \uc120\uc5b8\ud568\uc73c\ub85c\uc368, \ubaa8\ub4e0 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc640 \uadf8 \ud0c0\uc785\uc5d0 \ub300\ud55c \ud3b8\uc9d1\uae30 \uc9c0\uc6d0(\uc790\ub3d9\uc644\uc131 \ub4f1) \uc5ed\uc2dc \uc81c\uacf5\ud569\ub2c8\ub2e4. \ubaa8\ub378\uc758 JSON \uc2a4\ud0a4\ub9c8 \uc815\uc758\ub97c \uc0dd\uc131\ud558\uace0, \ud504\ub85c\uc81d\ud2b8\uc5d0 \uc801\ud569\ud55c \uacbd\uc6b0 \uc6d0\ud558\ub294 \uacf3 \uc5b4\ub514\uc5d0\uc11c\ub098 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc2a4\ud0a4\ub9c8\ub4e4\uc740 \uc0dd\uc131\ud55c OpenAPI \uc2a4\ud0a4\ub9c8\uc758 \uc77c\ubd80\uac00 \ub418\uba70 \uc790\ub3d9 UI \ubb38\uc11c\ud654\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc790\ub3d9 \ubb38\uc11c \u00b6 \ubaa8\ub378\uc758 JSON \uc2a4\ud0a4\ub9c8\ub294 OpenAPI \uc0dd\uc131 \uc2a4\ud0a4\ub9c8\uc758 \uc77c\ubd80\uac00 \ub418\uba70 \ub300\ud654\ud615 API \ubb38\uc11c\uc5d0 \ud45c\uc2dc\ub429\ub2c8\ub2e4: \uadf8\ub9ac\uace0 \uc774\ub97c \ud544\uc694\ub85c \ud558\ub294 \uac01 \uacbd\ub85c \ub3d9\uc791 \ub0b4\uc758 API \ubb38\uc11c\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9\ub429\ub2c8\ub2e4: \ud3b8\uc9d1\uae30 \uc9c0\uc6d0 \u00b6 \ud3b8\uc9d1\uae30\uc5d0\uc11c \ud568\uc218 \ub0b4\ubd80 \ubaa8\ub4e0 \uacf3(Pydantic \ubaa8\ub378 \ub300\uc2e0 dict \ub97c \ubc1b\uc740 \uacbd\uc6b0\uc5d0\ub294 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4)\uc5d0\uc11c \ud0c0\uc785 \ud78c\ud2b8\uc640 \uc790\ub3d9\uc644\uc131\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uc798\ubabb\ub41c \ud0c0\uc785 \uc791\uc5c5\uc5d0 \ub300\ud55c \uc624\ub958 \uac80\uc0ac\ub3c4 \ubc1b\uc2b5\ub2c8\ub2e4: \uc774\ub294 \uc6b0\uc5f0\uc774 \uc544\ub2c8\uba70, \uc804\uccb4 \ud504\ub808\uc784\uc6cc\ud06c\ub294 \uc774\ub7ec\ud55c \uc124\uacc4\ub97c \uc911\uc2ec\uc73c\ub85c \uad6c\ucd95\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uad6c\ud604\ud558\uae30 \uc804\uc5d0 \uc124\uacc4 \ub2e8\uacc4\uc5d0\uc11c \ucca0\uc800\ud788 \ud14c\uc2a4\ud2b8\ud558\uc5ec \ubaa8\ub4e0 \ud3b8\uc9d1\uc790\uc640 \ud568\uaed8 \uc791\ub3d9\ud558\ub294\uc9c0 \ud655\uc778\ud588\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc9c0\uc6d0\ud558\uae30 \uc704\ud574 Pydantic \uc790\uccb4\uc5d0\ub3c4 \uc57d\uac04\uc758 \ubcc0\uacbd\uc774 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\uc804 \uc2a4\ud06c\ub9b0\uc0f7\uc740 \ube44\uc8fc\uc5bc \uc2a4\ud29c\ub514\uc624 \ucf54\ub4dc \uc5d0\uc11c \ucc0d\uc740 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc PyCharm \ubc0f \ub300\ubd80\ubd84\uc758 \ub2e4\ub978 \ud30c\uc774\uc36c \ud3b8\uc9d1\uae30\uc5d0\uc11c \ub3d9\uc77c\ud55c \ud3b8\uc9d1\uae30 \uc9c0\uc6d0\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ud301 PyCharm \uc744 \ud3b8\uc9d1\uae30\ub85c \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74, Pydantic PyCharm \ud50c\ub7ec\uadf8\uc778 \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc744 \ud1b5\ud574 Pydantic \ubaa8\ub378\uc5d0 \ub300\ud55c \ud3b8\uc9d1\uae30 \uc9c0\uc6d0\uc744 \uac1c\uc120\ud569\ub2c8\ub2e4: \uc790\ub3d9\uc644\uc131 \ud0c0\uc785 \uac80\uc0ac \ub9ac\ud329\ud1a0\ub9c1 \uac80\uc0c9 \uac80\uc0ac(Inspection) \ubaa8\ub378 \uc0ac\uc6a9 \u00b6 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \ubaa8\ub378 \uac1d\uccb4\uc758 \ubaa8\ub4e0 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc5d0 \uc9c1\uc811 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): item_dict = item . dict () if item . tax : price_with_tax = item . price + item . tax item_dict . update ({ \"price_with_tax\" : price_with_tax }) return item_dict \uc694\uccad \ubcf8\ubb38 + \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \u00b6 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc640 \uc694\uccad \ubcf8\ubb38\uc744 \ub3d9\uc2dc\uc5d0 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc640 \uc77c\uce58\ud558\ub294 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\ub294 \uacbd\ub85c\uc5d0\uc11c \uac00\uc838\uc640\uc57c \ud568 \uc744, Pydantic \ubaa8\ub378\ub85c \uc120\uc5b8\ud55c \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\ub294 \uc694\uccad \ubcf8\ubb38\uc5d0\uc11c \uac00\uc838\uc640\uc57c \ud568 \uc744 \uc778\uc9c0\ud569\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item ): return { \"item_id\" : item_id , ** item . dict ()} \uc694\uccad \ubcf8\ubb38 + \uacbd\ub85c + \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \u00b6 \ubcf8\ubb38 , \uacbd\ub85c \uadf8\ub9ac\uace0 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \uc804\ubd80\ub97c \ub3d9\uc2dc\uc5d0 \uc120\uc5b8\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac01\uac01\uc744 \uc778\uc2dd\ud558\uace0 \uc62c\ubc14\ub978 \uc704\uce58\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uac00\uc838\uc635\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item , q : Union [ str , None ] = None ): result = { \"item_id\" : item_id , ** item . dict ()} if q : result . update ({ \"q\" : q }) return result \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\ub294 \ub2e4\uc74c\uc73c\ub85c \uc778\uc2dd\ub429\ub2c8\ub2e4: \ub9e4\uac1c\ubcc0\uc218\uac00 \uacbd\ub85c \uc5d0\ub3c4 \uc120\uc5b8\ub418\uc5c8\ub2e4\uba74 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub9e4\uac1c\ubcc0\uc218\uac00 \ub2e8\uc218\ud615 ( int , float , str , bool \ub4f1)\uc774\uba74 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub85c \ud574\uc11d\ub429\ub2c8\ub2e4. \ub9e4\uac1c\ubcc0\uc218\uac00 Pydantic \ubaa8\ub378 \ud0c0\uc785\uc73c\ub85c \uc120\uc5b8\ub418\uc5c8\ub2e4\uba74 \uc694\uccad \ubcf8\ubb38 \uc73c\ub85c \ud574\uc11d\ub429\ub2c8\ub2e4. \ucc38\uace0 FastAPI\ub294 q \uac00 = None \uc774\ubbc0\ub85c \uc120\ud0dd\uc801\uc774\ub77c\ub294 \uac83\uc744 \uc778\uc9c0\ud569\ub2c8\ub2e4. Optional[str] \uc5d0 \uc788\ub294 Optional \uc740 FastAPI(FastAPI\ub294 str \ubd80\ubd84\ub9cc \uc0ac\uc6a9\ud569\ub2c8\ub2e4)\uac00 \uc0ac\uc6a9\ud558\ub294\uac8c \uc544\ub2c8\uc9c0\ub9cc, Optional[str] \uc740 \ud3b8\uc9d1\uae30\uc5d0\uac8c \ucf54\ub4dc\uc5d0\uc11c \uc624\ub958\ub97c \ucc3e\uc544\ub0bc \uc218 \uc788\uac8c \ub3c4\uc640\uc90d\ub2c8\ub2e4. Pydantic \uc5c6\uc774 \uc0ac\uc6a9\ud558\uae30 \u00b6 Pydantic \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uace0 \uc2f6\uc9c0 \uc54a\ub2e4\uba74, \ubcf8\ubb38(Body) \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcf8\ubb38 - \ub2e4\uc911 \ub9e4\uac1c\ubcc0\uc218: \ubcf8\ubb38\uc758 \ub2e8\uc218\ud615 \uac12 \ubb38\uc11c\ub97c \ubcf4\uc138\uc694.","title":"\uc694\uccad \ubcf8\ubb38"},{"location":"tutorial/body/#_1","text":"\ud074\ub77c\uc774\uc5b8\ud2b8(\ube0c\ub77c\uc6b0\uc800\ub77c\uace0 \ud569\uc2dc\ub2e4)\uc5d0\uc11c API\ub85c \ub370\uc774\ud130\ub97c \ubcf4\ub0b4\uc57c \ud560 \ub54c, \uc694\uccad \ubcf8\ubb38 \uc744 \ubcf4\ub0c5\ub2c8\ub2e4. \uc694\uccad \ubcf8\ubb38\uc740 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uc11c API\ub85c \ubcf4\ub0b4\ub294 \ub370\uc774\ud130\uc785\ub2c8\ub2e4. \uc751\ub2f5 \ubcf8\ubb38\uc740 API\uc5d0\uc11c \ud074\ub77c\uc774\uc5b8\ud2b8\ub85c \ubcf4\ub0b4\ub294 \ub370\uc774\ud130\uc785\ub2c8\ub2e4. API\ub294 \ub300\ubd80\ubd84 \uc751\ub2f5 \ubcf8\ubb38\uc744 \ubcf4\ub0c5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \ud56d\uc0c1 \uc694\uccad \ubcf8\ubb38\uc744 \ubcf4\ub0bc \ud544\uc694\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \uc694\uccad \ubcf8\ubb38\uc744 \uc120\uc5b8\ud558\ub824\uba74, \uac15\ub825\ud55c \ud798\uacfc \uc7a5\uc810\uc744 \uac00\uc9c4 Pydantic \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4. \uc815\ubcf4 \ub370\uc774\ud130\ub97c \ubcf4\ub0b4\uae30 \uc704\ud574\uc11c \ub2e4\uc74c \uc911 \ud558\ub098\ub97c \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4: POST (\uc880 \ub354 \uc77c\ubc18\uc801), PUT , DELETE \ub610\ub294 PATCH . GET \uc694\uccad\uc73c\ub85c \ubcf8\ubb38\uc744 \ubcf4\ub0b4\ub294 \uac83\uc740 \uc0ac\uc591\uc5d0 \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \ub3d9\uc791\uc774 \uc788\uc9c0\ub9cc, \uadf8\ub7fc\uc5d0\ub3c4 FastAPI\ub294 \ub9e4\uc6b0 \ubcf5\uc7a1/\uadf9\ub2e8\uc801 \uc0ac\uc6a9 \uc0ac\ub840\uc5d0 \ub300\ud574\uc11c\ub9cc \uc9c0\uc6d0\ub429\ub2c8\ub2e4. \uc774\uac83\uc740 \uad8c\uc7a5\ub418\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 Swagger UI \ub300\ud654\ud615 \ubb38\uc11c\ub294 GET \uc744 \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \ubcf8\ubb38\uc5d0 \ub300\ud55c \ubb38\uc11c\ub97c \ubcf4\uc5ec\uc8fc\uc9c0 \uc54a\uace0, \uc911\uac04\uc5d0 \uc788\ub294 \ud504\ub85d\uc2dc\uac00 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc744\uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc694\uccad \ubcf8\ubb38"},{"location":"tutorial/body/#pydantic-basemodel","text":"\uc6b0\uc120, pydantic \uc5d0\uc11c BaseModel \ub97c \uc784\ud3ec\ud2b8\ud574\uc57c \ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item","title":"Pydantic\uc758 BaseModel \uc784\ud3ec\ud2b8"},{"location":"tutorial/body/#_2","text":"\uc774\uc81c BaseModel \uc744 \uc0c1\uc18d\ud558\ub294 \ud074\ub798\uc2a4\ub85c \ub370\uc774\ud130 \ubaa8\ub378\uc744 \uc120\uc5b8\ud569\ub2c8\ub2e4. \ubaa8\ub4e0 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc5d0 \ud45c\uc900 \ud30c\uc774\uc36c \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud560 \ub54c\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c, \ubaa8\ub378 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc5d0 \uae30\ubcf8\uac12\uc774 \uc788\uc73c\uba74 \ud544\uc218\uac00 \uc544\ub2d9\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ud544\uc218\uc785\ub2c8\ub2e4. \uc120\ud0dd\uc801\uc73c\ub85c \ub9cc\ub4e4\ub824\uba74 None \uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc704\uc5d0\uc11c \uc774 \ubaa8\ub378\uc740 JSON \" object \"(\ub610\ub294 \ud30c\uc774\uc36c dict )\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc120\uc5b8\ud569\ub2c8\ub2e4: { \"name\" : \"Foo\" , \"description\" : \"An optional description\" , \"price\" : 45.2 , \"tax\" : 3.5 } ... description \uacfc tax \ub294 ( None \uac12\uc744 \uae30\ubcf8\uac12\uc73c\ub85c \ud558\uba74\uc11c) \uc120\ud0dd\uc801\uc774\uba70, \uc774 JSON \" object \" \ub610\ud55c \uc720\ud6a8\ud569\ub2c8\ub2e4: { \"name\" : \"Foo\" , \"price\" : 45.2 }","title":"\ub370\uc774\ud130 \ubaa8\ub378 \uc0dd\uc131"},{"location":"tutorial/body/#_3","text":"\uc774\ub97c \uacbd\ub85c \ub3d9\uc791 \uc5d0 \ucd94\uac00\ud558\ub824\uba74 \uacbd\ub85c \ubc0f \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud55c \uac83\uacfc \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c \uc120\uc5b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item ...\uadf8\ub9ac\uace0 \uc0dd\uc131\ud55c Item \ubaa8\ub378\ub85c \ud0c0\uc785\uc744 \uc120\uc5b8\ud569\ub2c8\ub2e4.","title":"\ub9e4\uac1c\ubcc0\uc218\ub85c \uc120\uc5b8"},{"location":"tutorial/body/#_4","text":"\ud30c\uc774\uc120 \ud0c0\uc785 \uc120\uc5b8\ub9cc\uc73c\ub85c FastAPI \ub294: \uc694\uccad \ubcf8\ubb38\uc744 JSON\uc73c\ub85c \uc77d\uc2b5\ub2c8\ub2e4. (\ud544\uc694\ud558\ub2e4\uba74) \ud574\ub2f9 \ud0c0\uc785\uc744 \ubcc0\ud658\ud569\ub2c8\ub2e4. \ub370\uc774\ud130\ub97c \uac80\uc99d\ud569\ub2c8\ub2e4. \ub370\uc774\ud130\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\ub2e4\uba74, \uc798\ubabb\ub41c \ub370\uc774\ud130\uac00 \uc5b4\ub514\uc5d0\uc11c \ubb34\uc5c7\uc778\uc9c0 \uc815\ud655\ud558\uac8c \ud45c\uc2dc\ud558\ub294 \uba4b\uc9c0\uace0 \uba85\ud655\ud55c \uc624\ub958\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \ub9e4\uac1c\ubcc0\uc218 item \uc5d0 \uc218\uc2e0\ud55c \ub370\uc774\ud130\ub97c \uc804\ub2ec\ud569\ub2c8\ub2e4. \ud568\uc218\uc5d0 Item \ud0c0\uc785\uc73c\ub85c \uc120\uc5b8\ud568\uc73c\ub85c\uc368, \ubaa8\ub4e0 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc640 \uadf8 \ud0c0\uc785\uc5d0 \ub300\ud55c \ud3b8\uc9d1\uae30 \uc9c0\uc6d0(\uc790\ub3d9\uc644\uc131 \ub4f1) \uc5ed\uc2dc \uc81c\uacf5\ud569\ub2c8\ub2e4. \ubaa8\ub378\uc758 JSON \uc2a4\ud0a4\ub9c8 \uc815\uc758\ub97c \uc0dd\uc131\ud558\uace0, \ud504\ub85c\uc81d\ud2b8\uc5d0 \uc801\ud569\ud55c \uacbd\uc6b0 \uc6d0\ud558\ub294 \uacf3 \uc5b4\ub514\uc5d0\uc11c\ub098 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc2a4\ud0a4\ub9c8\ub4e4\uc740 \uc0dd\uc131\ud55c OpenAPI \uc2a4\ud0a4\ub9c8\uc758 \uc77c\ubd80\uac00 \ub418\uba70 \uc790\ub3d9 UI \ubb38\uc11c\ud654\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.","title":"\uacb0\uacfc"},{"location":"tutorial/body/#_5","text":"\ubaa8\ub378\uc758 JSON \uc2a4\ud0a4\ub9c8\ub294 OpenAPI \uc0dd\uc131 \uc2a4\ud0a4\ub9c8\uc758 \uc77c\ubd80\uac00 \ub418\uba70 \ub300\ud654\ud615 API \ubb38\uc11c\uc5d0 \ud45c\uc2dc\ub429\ub2c8\ub2e4: \uadf8\ub9ac\uace0 \uc774\ub97c \ud544\uc694\ub85c \ud558\ub294 \uac01 \uacbd\ub85c \ub3d9\uc791 \ub0b4\uc758 API \ubb38\uc11c\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9\ub429\ub2c8\ub2e4:","title":"\uc790\ub3d9 \ubb38\uc11c"},{"location":"tutorial/body/#_6","text":"\ud3b8\uc9d1\uae30\uc5d0\uc11c \ud568\uc218 \ub0b4\ubd80 \ubaa8\ub4e0 \uacf3(Pydantic \ubaa8\ub378 \ub300\uc2e0 dict \ub97c \ubc1b\uc740 \uacbd\uc6b0\uc5d0\ub294 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4)\uc5d0\uc11c \ud0c0\uc785 \ud78c\ud2b8\uc640 \uc790\ub3d9\uc644\uc131\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uc798\ubabb\ub41c \ud0c0\uc785 \uc791\uc5c5\uc5d0 \ub300\ud55c \uc624\ub958 \uac80\uc0ac\ub3c4 \ubc1b\uc2b5\ub2c8\ub2e4: \uc774\ub294 \uc6b0\uc5f0\uc774 \uc544\ub2c8\uba70, \uc804\uccb4 \ud504\ub808\uc784\uc6cc\ud06c\ub294 \uc774\ub7ec\ud55c \uc124\uacc4\ub97c \uc911\uc2ec\uc73c\ub85c \uad6c\ucd95\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uad6c\ud604\ud558\uae30 \uc804\uc5d0 \uc124\uacc4 \ub2e8\uacc4\uc5d0\uc11c \ucca0\uc800\ud788 \ud14c\uc2a4\ud2b8\ud558\uc5ec \ubaa8\ub4e0 \ud3b8\uc9d1\uc790\uc640 \ud568\uaed8 \uc791\ub3d9\ud558\ub294\uc9c0 \ud655\uc778\ud588\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc9c0\uc6d0\ud558\uae30 \uc704\ud574 Pydantic \uc790\uccb4\uc5d0\ub3c4 \uc57d\uac04\uc758 \ubcc0\uacbd\uc774 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\uc804 \uc2a4\ud06c\ub9b0\uc0f7\uc740 \ube44\uc8fc\uc5bc \uc2a4\ud29c\ub514\uc624 \ucf54\ub4dc \uc5d0\uc11c \ucc0d\uc740 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc PyCharm \ubc0f \ub300\ubd80\ubd84\uc758 \ub2e4\ub978 \ud30c\uc774\uc36c \ud3b8\uc9d1\uae30\uc5d0\uc11c \ub3d9\uc77c\ud55c \ud3b8\uc9d1\uae30 \uc9c0\uc6d0\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ud301 PyCharm \uc744 \ud3b8\uc9d1\uae30\ub85c \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74, Pydantic PyCharm \ud50c\ub7ec\uadf8\uc778 \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc744 \ud1b5\ud574 Pydantic \ubaa8\ub378\uc5d0 \ub300\ud55c \ud3b8\uc9d1\uae30 \uc9c0\uc6d0\uc744 \uac1c\uc120\ud569\ub2c8\ub2e4: \uc790\ub3d9\uc644\uc131 \ud0c0\uc785 \uac80\uc0ac \ub9ac\ud329\ud1a0\ub9c1 \uac80\uc0c9 \uac80\uc0ac(Inspection)","title":"\ud3b8\uc9d1\uae30 \uc9c0\uc6d0"},{"location":"tutorial/body/#_7","text":"\ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \ubaa8\ub378 \uac1d\uccb4\uc758 \ubaa8\ub4e0 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc5d0 \uc9c1\uc811 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): item_dict = item . dict () if item . tax : price_with_tax = item . price + item . tax item_dict . update ({ \"price_with_tax\" : price_with_tax }) return item_dict","title":"\ubaa8\ub378 \uc0ac\uc6a9"},{"location":"tutorial/body/#_8","text":"\uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc640 \uc694\uccad \ubcf8\ubb38\uc744 \ub3d9\uc2dc\uc5d0 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc640 \uc77c\uce58\ud558\ub294 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\ub294 \uacbd\ub85c\uc5d0\uc11c \uac00\uc838\uc640\uc57c \ud568 \uc744, Pydantic \ubaa8\ub378\ub85c \uc120\uc5b8\ud55c \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\ub294 \uc694\uccad \ubcf8\ubb38\uc5d0\uc11c \uac00\uc838\uc640\uc57c \ud568 \uc744 \uc778\uc9c0\ud569\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item ): return { \"item_id\" : item_id , ** item . dict ()}","title":"\uc694\uccad \ubcf8\ubb38 + \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/body/#_9","text":"\ubcf8\ubb38 , \uacbd\ub85c \uadf8\ub9ac\uace0 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \uc804\ubd80\ub97c \ub3d9\uc2dc\uc5d0 \uc120\uc5b8\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac01\uac01\uc744 \uc778\uc2dd\ud558\uace0 \uc62c\ubc14\ub978 \uc704\uce58\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uac00\uc838\uc635\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item , q : Union [ str , None ] = None ): result = { \"item_id\" : item_id , ** item . dict ()} if q : result . update ({ \"q\" : q }) return result \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\ub294 \ub2e4\uc74c\uc73c\ub85c \uc778\uc2dd\ub429\ub2c8\ub2e4: \ub9e4\uac1c\ubcc0\uc218\uac00 \uacbd\ub85c \uc5d0\ub3c4 \uc120\uc5b8\ub418\uc5c8\ub2e4\uba74 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub9e4\uac1c\ubcc0\uc218\uac00 \ub2e8\uc218\ud615 ( int , float , str , bool \ub4f1)\uc774\uba74 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub85c \ud574\uc11d\ub429\ub2c8\ub2e4. \ub9e4\uac1c\ubcc0\uc218\uac00 Pydantic \ubaa8\ub378 \ud0c0\uc785\uc73c\ub85c \uc120\uc5b8\ub418\uc5c8\ub2e4\uba74 \uc694\uccad \ubcf8\ubb38 \uc73c\ub85c \ud574\uc11d\ub429\ub2c8\ub2e4. \ucc38\uace0 FastAPI\ub294 q \uac00 = None \uc774\ubbc0\ub85c \uc120\ud0dd\uc801\uc774\ub77c\ub294 \uac83\uc744 \uc778\uc9c0\ud569\ub2c8\ub2e4. Optional[str] \uc5d0 \uc788\ub294 Optional \uc740 FastAPI(FastAPI\ub294 str \ubd80\ubd84\ub9cc \uc0ac\uc6a9\ud569\ub2c8\ub2e4)\uac00 \uc0ac\uc6a9\ud558\ub294\uac8c \uc544\ub2c8\uc9c0\ub9cc, Optional[str] \uc740 \ud3b8\uc9d1\uae30\uc5d0\uac8c \ucf54\ub4dc\uc5d0\uc11c \uc624\ub958\ub97c \ucc3e\uc544\ub0bc \uc218 \uc788\uac8c \ub3c4\uc640\uc90d\ub2c8\ub2e4.","title":"\uc694\uccad \ubcf8\ubb38 + \uacbd\ub85c + \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/body/#pydantic","text":"Pydantic \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uace0 \uc2f6\uc9c0 \uc54a\ub2e4\uba74, \ubcf8\ubb38(Body) \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcf8\ubb38 - \ub2e4\uc911 \ub9e4\uac1c\ubcc0\uc218: \ubcf8\ubb38\uc758 \ub2e8\uc218\ud615 \uac12 \ubb38\uc11c\ub97c \ubcf4\uc138\uc694.","title":"Pydantic \uc5c6\uc774 \uc0ac\uc6a9\ud558\uae30"},{"location":"tutorial/cookie-params/","text":"\ucfe0\ud0a4 \ub9e4\uac1c\ubcc0\uc218 \u00b6 Query \ubc0f Path \ub9e4\uac1c\ubcc0\uc218\ub97c \uc815\uc758\ud55c \ubc29\ubc95\uacfc \ub3d9\uc77c\ud558\uac8c \ucfe0\ud0a4 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Cookie \uc784\ud3ec\ud2b8 \u00b6 \uba3c\uc800 Cookie \ub97c \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : Union [ str , None ] = Cookie ( default = None )): return { \"ads_id\" : ads_id } Cookie \ub9e4\uac1c\ubcc0\uc218 \uc120\uc5b8 \u00b6 \uc774\uc81c Path \ubc0f Query \ub97c \uc0ac\uc6a9\ud55c \ub3d9\uc77c\ud55c \uad6c\uc870\ub97c \uc774\uc6a9\ud558\uc5ec \ucfe0\ud0a4 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud569\ub2c8\ub2e4. \uccab \ubc88\uc9f8 \uac12\uc740 \uae30\ubcf8\uac12\uc774\uba70, \ucd94\uac00 \uac80\uc99d\uc774\ub098 \uc5b4\ub178\ud14c\uc774\uc158 \ub9e4\uac1c\ubcc0\uc218 \ubaa8\ub450 \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : Union [ str , None ] = Cookie ( default = None )): return { \"ads_id\" : ads_id } \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d Cookie \ub294 Path \ubc0f Query \uc758 \"\uc790\ub9e4\" \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uc774 \uc5ed\uc2dc \ub3d9\uc77c\ud55c \uacf5\ud1b5 Param \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud569\ub2c8\ub2e4. Query , Path , Cookie \uadf8\ub9ac\uace0 \ub2e4\ub978 \uac83\ub4e4\uc744 fastapi \uc5d0\uc11c \uc784\ud3ec\ud2b8 \ud560 \ub54c, \uc774\ub4e4\uc740 \uc2e4\uc81c\ub85c \ud2b9\ubcc4\ud55c \ud074\ub798\uc2a4\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\uc784\uc744 \uae30\uc5b5\ud558\uc138\uc694. \uc815\ubcf4 \ucfe0\ud0a4\ub97c \uc120\uc5b8\ud558\uae30 \uc704\ud574\uc11c Cookie \ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ud574\ub2f9 \ub9e4\uac1c\ubcc0\uc218\ub97c \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub85c \ud574\uc11d\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc694\uc57d \u00b6 Cookie \ub97c Query \ubc0f Path \uc640 \ub3d9\uc77c\ud55c \uacf5\ud1b5 \ud328\ud134\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc120\uc5b8\ud569\ub2c8\ub2e4.","title":"\ucfe0\ud0a4 \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/cookie-params/#_1","text":"Query \ubc0f Path \ub9e4\uac1c\ubcc0\uc218\ub97c \uc815\uc758\ud55c \ubc29\ubc95\uacfc \ub3d9\uc77c\ud558\uac8c \ucfe0\ud0a4 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ucfe0\ud0a4 \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/cookie-params/#cookie","text":"\uba3c\uc800 Cookie \ub97c \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : Union [ str , None ] = Cookie ( default = None )): return { \"ads_id\" : ads_id }","title":"Cookie \uc784\ud3ec\ud2b8"},{"location":"tutorial/cookie-params/#cookie_1","text":"\uc774\uc81c Path \ubc0f Query \ub97c \uc0ac\uc6a9\ud55c \ub3d9\uc77c\ud55c \uad6c\uc870\ub97c \uc774\uc6a9\ud558\uc5ec \ucfe0\ud0a4 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud569\ub2c8\ub2e4. \uccab \ubc88\uc9f8 \uac12\uc740 \uae30\ubcf8\uac12\uc774\uba70, \ucd94\uac00 \uac80\uc99d\uc774\ub098 \uc5b4\ub178\ud14c\uc774\uc158 \ub9e4\uac1c\ubcc0\uc218 \ubaa8\ub450 \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : Union [ str , None ] = Cookie ( default = None )): return { \"ads_id\" : ads_id } \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d Cookie \ub294 Path \ubc0f Query \uc758 \"\uc790\ub9e4\" \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uc774 \uc5ed\uc2dc \ub3d9\uc77c\ud55c \uacf5\ud1b5 Param \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud569\ub2c8\ub2e4. Query , Path , Cookie \uadf8\ub9ac\uace0 \ub2e4\ub978 \uac83\ub4e4\uc744 fastapi \uc5d0\uc11c \uc784\ud3ec\ud2b8 \ud560 \ub54c, \uc774\ub4e4\uc740 \uc2e4\uc81c\ub85c \ud2b9\ubcc4\ud55c \ud074\ub798\uc2a4\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\uc784\uc744 \uae30\uc5b5\ud558\uc138\uc694. \uc815\ubcf4 \ucfe0\ud0a4\ub97c \uc120\uc5b8\ud558\uae30 \uc704\ud574\uc11c Cookie \ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ud574\ub2f9 \ub9e4\uac1c\ubcc0\uc218\ub97c \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub85c \ud574\uc11d\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.","title":"Cookie \ub9e4\uac1c\ubcc0\uc218 \uc120\uc5b8"},{"location":"tutorial/cookie-params/#_2","text":"Cookie \ub97c Query \ubc0f Path \uc640 \ub3d9\uc77c\ud55c \uacf5\ud1b5 \ud328\ud134\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc120\uc5b8\ud569\ub2c8\ub2e4.","title":"\uc694\uc57d"},{"location":"tutorial/cors/","text":"\uad50\ucc28 \ucd9c\ucc98 \ub9ac\uc18c\uc2a4 \uacf5\uc720 \u00b6 CORS \ub610\ub294 \"\uad50\ucc28-\ucd9c\ucc98 \ub9ac\uc18c\uc2a4 \uacf5\uc720\" \ub780, \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \ud504\ub860\ud2b8\uc5d4\ub4dc\uac00 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\ub85c \ucf54\ub4dc\ub85c \ubc31\uc5d4\ub4dc\uc640 \ud1b5\uc2e0\ud558\uace0, \ubc31\uc5d4\ub4dc\ub294 \ud574\ub2f9 \ud504\ub860\ud2b8\uc5d4\ub4dc\uc640 \ub2e4\ub978 \"\ucd9c\ucc98\"\uc5d0 \uc874\uc7ac\ud558\ub294 \uc0c1\ud669\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ucd9c\ucc98 \u00b6 \ucd9c\ucc98\ub780 \ud504\ub85c\ud1a0\ucf5c( http , https ), \ub3c4\uba54\uc778( myapp.com , localhost , localhost.tiangolo.com ), \uadf8\ub9ac\uace0 \ud3ec\ud2b8( 80 , 443 , 8080 )\uc758 \uc870\ud569\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc544\ub798\ub294 \ubaa8\ub450 \uc0c1\uc774\ud55c \ucd9c\ucc98\uc785\ub2c8\ub2e4: http://localhost https://localhost http://localhost:8080 \ubaa8\ub450 localhost \uc5d0 \uc788\uc9c0\ub9cc, \uc11c\ub85c \ub2e4\ub978 \ud504\ub85c\ud1a0\ucf5c\uacfc \ud3ec\ud2b8\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc73c\ubbc0\ub85c \ub2e4\ub978 \"\ucd9c\ucc98\"\uc785\ub2c8\ub2e4. \ub2e8\uacc4 \u00b6 \ube0c\ub77c\uc6b0\uc800 \ub0b4 http://localhost:8080 \uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \ud504\ub860\ud2b8\uc5d4\ub4dc\uac00 \uc788\uace0, \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\ub294 http://localhost \ub97c \ud1b5\ud574 \ubc31\uc5d4\ub4dc\uc640 \ud1b5\uc2e0\ud55c\ub2e4\uace0 \uac00\uc815\ud574\ubd05\uc2dc\ub2e4(\ud3ec\ud2b8\ub97c \uba85\uc2dc\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0, \ube0c\ub77c\uc6b0\uc800\ub294 80 \uc744 \uae30\ubcf8 \ud3ec\ud2b8\ub85c \uac04\uc8fc\ud569\ub2c8\ub2e4). \uadf8\ub7ec\uba74 \ube0c\ub77c\uc6b0\uc800\ub294 \ubc31\uc5d4\ub4dc\uc5d0 HTTP OPTIONS \uc694\uccad\uc744 \ubcf4\ub0b4\uace0, \ubc31\uc5d4\ub4dc\uc5d0\uc11c \uc774 \ub2e4\ub978 \ucd9c\ucc98( http://localhost:8080 )\uc640\uc758 \ud1b5\uc2e0\uc744 \ud5c8\uac00\ud558\ub294 \uc801\uc808\ud55c \ud5e4\ub354\ub97c \ubcf4\ub0b4\uba74, \ube0c\ub77c\uc6b0\uc800\ub294 \ud504\ub860\ud2b8\uc5d4\ub4dc\uc758 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\uac00 \ubc31\uc5d4\ub4dc\uc5d0 \uc694\uccad\uc744 \ubcf4\ub0bc \uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574, \ubc31\uc5d4\ub4dc\ub294 \"\ud5c8\uc6a9\ub41c \ucd9c\ucc98(allowed origins)\" \ubaa9\ub85d\uc744 \uac00\uc9c0\uace0 \uc788\uc5b4\uc57c\ub9cc \ud569\ub2c8\ub2e4. \uc774 \uacbd\uc6b0, \ud504\ub860\ud2b8\uc5d4\ub4dc\uac00 \uc81c\ub300\ub85c \ub3d9\uc791\ud558\uae30 \uc704\ud574 http://localhost:8080 \uc744 \ubaa9\ub85d\uc5d0 \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4. \uc640\uc77c\ub4dc\uce74\ub4dc \u00b6 \ubaa8\ub4e0 \ucd9c\ucc98\ub97c \ud5c8\uc6a9\ud558\uae30 \uc704\ud574 \ubaa9\ub85d\uc744 \"*\" (\"\uc640\uc77c\ub4dc\uce74\ub4dc\")\ub85c \uc120\uc5b8\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc740 \ud2b9\uc815\ud55c \uc720\ud615\uc758 \ud1b5\uc2e0\ub9cc\uc744 \ud5c8\uc6a9\ud558\uba70, \ucfe0\ud0a4 \ubc0f \uc561\uc138\uc2a4 \ud1a0\ud070\uacfc \uc0ac\uc6a9\ub418\ub294 \uc778\uc99d \ud5e4\ub354(Authoriztion header) \ub4f1\uc774 \ud3ec\ud568\ub41c \uacbd\uc6b0\uc640 \uac19\uc774 \uc790\uaca9 \uc99d\uba85(credentials)\uc774 \ud3ec\ud568\ub41c \ud1b5\uc2e0\uc740 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ubaa8\ub4e0 \uc791\uc5c5\uc744 \uc758\ub3c4\ud55c\ub300\ub85c \uc2e4\ud589\ud558\uae30 \uc704\ud574, \ud5c8\uc6a9\ub418\ub294 \ucd9c\ucc98\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc9c0\uc815\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. CORSMiddleware \uc0ac\uc6a9 \u00b6 CORSMiddleware \uc744 \uc0ac\uc6a9\ud558\uc5ec FastAPI \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc758 \uad50\ucc28 \ucd9c\ucc98 \ub9ac\uc18c\uc2a4 \uacf5\uc720 \ud658\uacbd\uc744 \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. CORSMiddleware \uc784\ud3ec\ud2b8. \ud5c8\uc6a9\ub418\ub294 \ucd9c\ucc98(\ubb38\uc790\uc5f4 \ud615\uc2dd)\uc758 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131. FastAPI \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0 \"\ubbf8\ub4e4\uc6e8\uc5b4(middleware)\"\ub85c \ucd94\uac00. \ubc31\uc5d4\ub4dc\uc5d0\uc11c \ub2e4\uc74c\uc758 \uc0ac\ud56d\uc744 \ud5c8\uc6a9\ud560\uc9c0\uc5d0 \ub300\ud574 \uc124\uc815\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: \uc790\uaca9\uc99d\uba85 (\uc778\uc99d \ud5e4\ub354, \ucfe0\ud0a4 \ub4f1). \ud2b9\uc815\ud55c HTTP \uba54\uc18c\ub4dc( POST , PUT ) \ub610\ub294 \uc640\uc77c\ub4dc\uce74\ub4dc \"*\" \ub97c \uc0ac\uc6a9\ud55c \ubaa8\ub4e0 HTTP \uba54\uc18c\ub4dc. \ud2b9\uc815\ud55c HTTP \ud5e4\ub354 \ub610\ub294 \uc640\uc77c\ub4dc\uce74\ub4dc \"*\" \ub97c \uc0ac\uc6a9\ud55c \ubaa8\ub4e0 HTTP \ud5e4\ub354. from fastapi import FastAPI from fastapi.middleware.cors import CORSMiddleware app = FastAPI () origins = [ \"http://localhost.tiangolo.com\" , \"https://localhost.tiangolo.com\" , \"http://localhost\" , \"http://localhost:8080\" , ] app . add_middleware ( CORSMiddleware , allow_origins = origins , allow_credentials = True , allow_methods = [ \"*\" ], allow_headers = [ \"*\" ], ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } CORSMiddleware \uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uae30\ubcf8 \ub9e4\uac1c\ubcc0\uc218\ub294 \uc81c\ud55c\uc801\uc774\ubbc0\ub85c, \ube0c\ub77c\uc6b0\uc800\uac00 \uad50\ucc28-\ub3c4\uba54\uc778 \uc0c1\ud669\uc5d0\uc11c \ud2b9\uc815\ud55c \ucd9c\ucc98, \uba54\uc18c\ub4dc, \ud5e4\ub354 \ub4f1\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub824\uba74 \uc774\ub4e4\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \ud5c8\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \ub2e4\uc74c\uc758 \uc778\uc790\ub4e4\uc774 \uc9c0\uc6d0\ub429\ub2c8\ub2e4: allow_origins - \uad50\ucc28-\ucd9c\ucc98 \uc694\uccad\uc744 \ubcf4\ub0bc \uc218 \uc788\ub294 \ucd9c\ucc98\uc758 \ub9ac\uc2a4\ud2b8\uc785\ub2c8\ub2e4. \uc608) ['https://example.org', 'https://www.example.org'] . \ubaa8\ub4e0 \ucd9c\ucc98\ub97c \ud5c8\uc6a9\ud558\uae30 \uc704\ud574 ['*'] \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. allow_origin_regex - \uad50\ucc28-\ucd9c\ucc98 \uc694\uccad\uc744 \ubcf4\ub0bc \uc218 \uc788\ub294 \ucd9c\ucc98\ub97c \uc815\uaddc\ud45c\ud604\uc2dd \ubb38\uc790\uc5f4\ub85c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. 'https://.*\\.example\\.org' . allow_methods - \uad50\ucc28-\ucd9c\ucc98 \uc694\uccad\uc744 \ud5c8\uc6a9\ud558\ub294 HTTP \uba54\uc18c\ub4dc\uc758 \ub9ac\uc2a4\ud2b8\uc785\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc740 ['GET'] \uc785\ub2c8\ub2e4. ['*'] \uc744 \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub4e0 \ud45c\uc900 \uba54\uc18c\ub4dc\ub4e4\uc744 \ud5c8\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. allow_headers - \uad50\ucc28-\ucd9c\ucc98\ub97c \uc9c0\uc6d0\ud558\ub294 HTTP \uc694\uccad \ud5e4\ub354\uc758 \ub9ac\uc2a4\ud2b8\uc785\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc740 [] \uc785\ub2c8\ub2e4. \ubaa8\ub4e0 \ud5e4\ub354\ub4e4\uc744 \ud5c8\uc6a9\ud558\uae30 \uc704\ud574 ['*'] \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Accept , Accept-Language , Content-Language \uadf8\ub9ac\uace0 Content-Type \ud5e4\ub354\ub294 CORS \uc694\uccad\uc2dc \uc5b8\uc81c\ub098 \ud5c8\uc6a9\ub429\ub2c8\ub2e4. allow_credentials - \uad50\ucc28-\ucd9c\ucc98 \uc694\uccad\uc2dc \ucfe0\ud0a4 \uc9c0\uc6d0 \uc5ec\ubd80\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc740 False \uc785\ub2c8\ub2e4. \ub610\ud55c \ud574\ub2f9 \ud56d\ubaa9\uc744 \ud5c8\uc6a9\ud560 \uacbd\uc6b0 allow_origins \ub294 ['*'] \ub85c \uc124\uc815\ud560 \uc218 \uc5c6\uc73c\uba70, \ucd9c\ucc98\ub97c \ubc18\ub4dc\uc2dc \ud2b9\uc815\ud574\uc57c \ud569\ub2c8\ub2e4. expose_headers - \ube0c\ub77c\uc6b0\uc800\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc5b4\uc57c \ud558\ub294 \ubaa8\ub4e0 \uc751\ub2f5 \ud5e4\ub354\ub97c \uac00\ub9ac\ud0b5\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc740 [] \uc785\ub2c8\ub2e4. max_age - \ube0c\ub77c\uc6b0\uc800\uac00 CORS \uc751\ub2f5\uc744 \uce90\uc2dc\uc5d0 \uc800\uc7a5\ud558\ub294 \ucd5c\ub300 \uc2dc\uac04\uc744 \ucd08 \ub2e8\uc704\ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc740 600 \uc785\ub2c8\ub2e4. \ubbf8\ub4e4\uc6e8\uc5b4\ub294 \ub450\uac00\uc9c0 \ud2b9\uc815\ud55c \uc885\ub958\uc758 HTTP \uc694\uccad\uc5d0 \uc751\ub2f5\ud569\ub2c8\ub2e4... CORS \uc0ac\uc804 \uc694\uccad \u00b6 Origin \ubc0f Access-Control-Request-Method \ud5e4\ub354\uc640 \ud568\uaed8 \uc804\uc1a1\ud558\ub294 \ubaa8\ub4e0 OPTIONS \uc694\uccad\uc785\ub2c8\ub2e4. \uc774 \uacbd\uc6b0 \ubbf8\ub4e4\uc6e8\uc5b4\ub294 \ub4e4\uc5b4\uc624\ub294 \uc694\uccad\uc744 \uac00\ub85c\ucc44 \uc801\uc808\ud55c CORS \ud5e4\ub354\uc640, \uc815\ubcf4 \uc81c\uacf5\uc744 \uc704\ud55c 200 \ub610\ub294 400 \uc751\ub2f5\uc73c\ub85c \uc751\ub2f5\ud569\ub2c8\ub2e4. \ub2e8\uc21c\ud55c \uc694\uccad \u00b6 Origin \ud5e4\ub354\ub97c \uac00\uc9c4 \ubaa8\ub4e0 \uc694\uccad. \uc774 \uacbd\uc6b0 \ubbf8\ub4e4\uc6e8\uc5b4\ub294 \uc694\uccad\uc744 \uc815\uc0c1\uc801\uc73c\ub85c \uc804\ub2ec\ud558\uc9c0\ub9cc, \uc801\uc808\ud55c CORS \ud5e4\ub354\ub97c \uc751\ub2f5\uc5d0 \ud3ec\ud568\uc2dc\ud0b5\ub2c8\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4 \u00b6 CORS \uc5d0 \ub300\ud55c \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc54c\uace0\uc2f6\ub2e4\uba74, Mozilla CORS \ubb38\uc11c \ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80 \uc0ac\ud56d from starlette.middleware.cors import CORSMiddleware \uc5ed\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac1c\ubc1c\uc790\uc778 \ub2f9\uc2e0\uc758 \ud3b8\uc758\ub97c \uc704\ud574 fastapi.middleware \uc5d0\uc11c \uba87\uac00\uc9c0\uc758 \ubbf8\ub4e4\uc6e8\uc5b4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \ubbf8\ub4e4\uc6e8\uc5b4\uac00 Stralette\uc73c\ub85c\ubd80\ud130 \uc9c1\uc811 \uc81c\uacf5\ub429\ub2c8\ub2e4.","title":"\uad50\ucc28 \ucd9c\ucc98 \ub9ac\uc18c\uc2a4 \uacf5\uc720"},{"location":"tutorial/cors/#_1","text":"CORS \ub610\ub294 \"\uad50\ucc28-\ucd9c\ucc98 \ub9ac\uc18c\uc2a4 \uacf5\uc720\" \ub780, \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \ud504\ub860\ud2b8\uc5d4\ub4dc\uac00 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\ub85c \ucf54\ub4dc\ub85c \ubc31\uc5d4\ub4dc\uc640 \ud1b5\uc2e0\ud558\uace0, \ubc31\uc5d4\ub4dc\ub294 \ud574\ub2f9 \ud504\ub860\ud2b8\uc5d4\ub4dc\uc640 \ub2e4\ub978 \"\ucd9c\ucc98\"\uc5d0 \uc874\uc7ac\ud558\ub294 \uc0c1\ud669\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.","title":"\uad50\ucc28 \ucd9c\ucc98 \ub9ac\uc18c\uc2a4 \uacf5\uc720"},{"location":"tutorial/cors/#_2","text":"\ucd9c\ucc98\ub780 \ud504\ub85c\ud1a0\ucf5c( http , https ), \ub3c4\uba54\uc778( myapp.com , localhost , localhost.tiangolo.com ), \uadf8\ub9ac\uace0 \ud3ec\ud2b8( 80 , 443 , 8080 )\uc758 \uc870\ud569\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc544\ub798\ub294 \ubaa8\ub450 \uc0c1\uc774\ud55c \ucd9c\ucc98\uc785\ub2c8\ub2e4: http://localhost https://localhost http://localhost:8080 \ubaa8\ub450 localhost \uc5d0 \uc788\uc9c0\ub9cc, \uc11c\ub85c \ub2e4\ub978 \ud504\ub85c\ud1a0\ucf5c\uacfc \ud3ec\ud2b8\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc73c\ubbc0\ub85c \ub2e4\ub978 \"\ucd9c\ucc98\"\uc785\ub2c8\ub2e4.","title":"\ucd9c\ucc98"},{"location":"tutorial/cors/#_3","text":"\ube0c\ub77c\uc6b0\uc800 \ub0b4 http://localhost:8080 \uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \ud504\ub860\ud2b8\uc5d4\ub4dc\uac00 \uc788\uace0, \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\ub294 http://localhost \ub97c \ud1b5\ud574 \ubc31\uc5d4\ub4dc\uc640 \ud1b5\uc2e0\ud55c\ub2e4\uace0 \uac00\uc815\ud574\ubd05\uc2dc\ub2e4(\ud3ec\ud2b8\ub97c \uba85\uc2dc\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0, \ube0c\ub77c\uc6b0\uc800\ub294 80 \uc744 \uae30\ubcf8 \ud3ec\ud2b8\ub85c \uac04\uc8fc\ud569\ub2c8\ub2e4). \uadf8\ub7ec\uba74 \ube0c\ub77c\uc6b0\uc800\ub294 \ubc31\uc5d4\ub4dc\uc5d0 HTTP OPTIONS \uc694\uccad\uc744 \ubcf4\ub0b4\uace0, \ubc31\uc5d4\ub4dc\uc5d0\uc11c \uc774 \ub2e4\ub978 \ucd9c\ucc98( http://localhost:8080 )\uc640\uc758 \ud1b5\uc2e0\uc744 \ud5c8\uac00\ud558\ub294 \uc801\uc808\ud55c \ud5e4\ub354\ub97c \ubcf4\ub0b4\uba74, \ube0c\ub77c\uc6b0\uc800\ub294 \ud504\ub860\ud2b8\uc5d4\ub4dc\uc758 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8\uac00 \ubc31\uc5d4\ub4dc\uc5d0 \uc694\uccad\uc744 \ubcf4\ub0bc \uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574, \ubc31\uc5d4\ub4dc\ub294 \"\ud5c8\uc6a9\ub41c \ucd9c\ucc98(allowed origins)\" \ubaa9\ub85d\uc744 \uac00\uc9c0\uace0 \uc788\uc5b4\uc57c\ub9cc \ud569\ub2c8\ub2e4. \uc774 \uacbd\uc6b0, \ud504\ub860\ud2b8\uc5d4\ub4dc\uac00 \uc81c\ub300\ub85c \ub3d9\uc791\ud558\uae30 \uc704\ud574 http://localhost:8080 \uc744 \ubaa9\ub85d\uc5d0 \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4.","title":"\ub2e8\uacc4"},{"location":"tutorial/cors/#_4","text":"\ubaa8\ub4e0 \ucd9c\ucc98\ub97c \ud5c8\uc6a9\ud558\uae30 \uc704\ud574 \ubaa9\ub85d\uc744 \"*\" (\"\uc640\uc77c\ub4dc\uce74\ub4dc\")\ub85c \uc120\uc5b8\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc740 \ud2b9\uc815\ud55c \uc720\ud615\uc758 \ud1b5\uc2e0\ub9cc\uc744 \ud5c8\uc6a9\ud558\uba70, \ucfe0\ud0a4 \ubc0f \uc561\uc138\uc2a4 \ud1a0\ud070\uacfc \uc0ac\uc6a9\ub418\ub294 \uc778\uc99d \ud5e4\ub354(Authoriztion header) \ub4f1\uc774 \ud3ec\ud568\ub41c \uacbd\uc6b0\uc640 \uac19\uc774 \uc790\uaca9 \uc99d\uba85(credentials)\uc774 \ud3ec\ud568\ub41c \ud1b5\uc2e0\uc740 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ubaa8\ub4e0 \uc791\uc5c5\uc744 \uc758\ub3c4\ud55c\ub300\ub85c \uc2e4\ud589\ud558\uae30 \uc704\ud574, \ud5c8\uc6a9\ub418\ub294 \ucd9c\ucc98\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc9c0\uc815\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.","title":"\uc640\uc77c\ub4dc\uce74\ub4dc"},{"location":"tutorial/cors/#corsmiddleware","text":"CORSMiddleware \uc744 \uc0ac\uc6a9\ud558\uc5ec FastAPI \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc758 \uad50\ucc28 \ucd9c\ucc98 \ub9ac\uc18c\uc2a4 \uacf5\uc720 \ud658\uacbd\uc744 \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. CORSMiddleware \uc784\ud3ec\ud2b8. \ud5c8\uc6a9\ub418\ub294 \ucd9c\ucc98(\ubb38\uc790\uc5f4 \ud615\uc2dd)\uc758 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131. FastAPI \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0 \"\ubbf8\ub4e4\uc6e8\uc5b4(middleware)\"\ub85c \ucd94\uac00. \ubc31\uc5d4\ub4dc\uc5d0\uc11c \ub2e4\uc74c\uc758 \uc0ac\ud56d\uc744 \ud5c8\uc6a9\ud560\uc9c0\uc5d0 \ub300\ud574 \uc124\uc815\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: \uc790\uaca9\uc99d\uba85 (\uc778\uc99d \ud5e4\ub354, \ucfe0\ud0a4 \ub4f1). \ud2b9\uc815\ud55c HTTP \uba54\uc18c\ub4dc( POST , PUT ) \ub610\ub294 \uc640\uc77c\ub4dc\uce74\ub4dc \"*\" \ub97c \uc0ac\uc6a9\ud55c \ubaa8\ub4e0 HTTP \uba54\uc18c\ub4dc. \ud2b9\uc815\ud55c HTTP \ud5e4\ub354 \ub610\ub294 \uc640\uc77c\ub4dc\uce74\ub4dc \"*\" \ub97c \uc0ac\uc6a9\ud55c \ubaa8\ub4e0 HTTP \ud5e4\ub354. from fastapi import FastAPI from fastapi.middleware.cors import CORSMiddleware app = FastAPI () origins = [ \"http://localhost.tiangolo.com\" , \"https://localhost.tiangolo.com\" , \"http://localhost\" , \"http://localhost:8080\" , ] app . add_middleware ( CORSMiddleware , allow_origins = origins , allow_credentials = True , allow_methods = [ \"*\" ], allow_headers = [ \"*\" ], ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } CORSMiddleware \uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uae30\ubcf8 \ub9e4\uac1c\ubcc0\uc218\ub294 \uc81c\ud55c\uc801\uc774\ubbc0\ub85c, \ube0c\ub77c\uc6b0\uc800\uac00 \uad50\ucc28-\ub3c4\uba54\uc778 \uc0c1\ud669\uc5d0\uc11c \ud2b9\uc815\ud55c \ucd9c\ucc98, \uba54\uc18c\ub4dc, \ud5e4\ub354 \ub4f1\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub824\uba74 \uc774\ub4e4\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \ud5c8\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \ub2e4\uc74c\uc758 \uc778\uc790\ub4e4\uc774 \uc9c0\uc6d0\ub429\ub2c8\ub2e4: allow_origins - \uad50\ucc28-\ucd9c\ucc98 \uc694\uccad\uc744 \ubcf4\ub0bc \uc218 \uc788\ub294 \ucd9c\ucc98\uc758 \ub9ac\uc2a4\ud2b8\uc785\ub2c8\ub2e4. \uc608) ['https://example.org', 'https://www.example.org'] . \ubaa8\ub4e0 \ucd9c\ucc98\ub97c \ud5c8\uc6a9\ud558\uae30 \uc704\ud574 ['*'] \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. allow_origin_regex - \uad50\ucc28-\ucd9c\ucc98 \uc694\uccad\uc744 \ubcf4\ub0bc \uc218 \uc788\ub294 \ucd9c\ucc98\ub97c \uc815\uaddc\ud45c\ud604\uc2dd \ubb38\uc790\uc5f4\ub85c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. 'https://.*\\.example\\.org' . allow_methods - \uad50\ucc28-\ucd9c\ucc98 \uc694\uccad\uc744 \ud5c8\uc6a9\ud558\ub294 HTTP \uba54\uc18c\ub4dc\uc758 \ub9ac\uc2a4\ud2b8\uc785\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc740 ['GET'] \uc785\ub2c8\ub2e4. ['*'] \uc744 \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub4e0 \ud45c\uc900 \uba54\uc18c\ub4dc\ub4e4\uc744 \ud5c8\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. allow_headers - \uad50\ucc28-\ucd9c\ucc98\ub97c \uc9c0\uc6d0\ud558\ub294 HTTP \uc694\uccad \ud5e4\ub354\uc758 \ub9ac\uc2a4\ud2b8\uc785\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc740 [] \uc785\ub2c8\ub2e4. \ubaa8\ub4e0 \ud5e4\ub354\ub4e4\uc744 \ud5c8\uc6a9\ud558\uae30 \uc704\ud574 ['*'] \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Accept , Accept-Language , Content-Language \uadf8\ub9ac\uace0 Content-Type \ud5e4\ub354\ub294 CORS \uc694\uccad\uc2dc \uc5b8\uc81c\ub098 \ud5c8\uc6a9\ub429\ub2c8\ub2e4. allow_credentials - \uad50\ucc28-\ucd9c\ucc98 \uc694\uccad\uc2dc \ucfe0\ud0a4 \uc9c0\uc6d0 \uc5ec\ubd80\ub97c \uc124\uc815\ud569\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc740 False \uc785\ub2c8\ub2e4. \ub610\ud55c \ud574\ub2f9 \ud56d\ubaa9\uc744 \ud5c8\uc6a9\ud560 \uacbd\uc6b0 allow_origins \ub294 ['*'] \ub85c \uc124\uc815\ud560 \uc218 \uc5c6\uc73c\uba70, \ucd9c\ucc98\ub97c \ubc18\ub4dc\uc2dc \ud2b9\uc815\ud574\uc57c \ud569\ub2c8\ub2e4. expose_headers - \ube0c\ub77c\uc6b0\uc800\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc5b4\uc57c \ud558\ub294 \ubaa8\ub4e0 \uc751\ub2f5 \ud5e4\ub354\ub97c \uac00\ub9ac\ud0b5\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc740 [] \uc785\ub2c8\ub2e4. max_age - \ube0c\ub77c\uc6b0\uc800\uac00 CORS \uc751\ub2f5\uc744 \uce90\uc2dc\uc5d0 \uc800\uc7a5\ud558\ub294 \ucd5c\ub300 \uc2dc\uac04\uc744 \ucd08 \ub2e8\uc704\ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc740 600 \uc785\ub2c8\ub2e4. \ubbf8\ub4e4\uc6e8\uc5b4\ub294 \ub450\uac00\uc9c0 \ud2b9\uc815\ud55c \uc885\ub958\uc758 HTTP \uc694\uccad\uc5d0 \uc751\ub2f5\ud569\ub2c8\ub2e4...","title":"CORSMiddleware \uc0ac\uc6a9"},{"location":"tutorial/cors/#cors","text":"Origin \ubc0f Access-Control-Request-Method \ud5e4\ub354\uc640 \ud568\uaed8 \uc804\uc1a1\ud558\ub294 \ubaa8\ub4e0 OPTIONS \uc694\uccad\uc785\ub2c8\ub2e4. \uc774 \uacbd\uc6b0 \ubbf8\ub4e4\uc6e8\uc5b4\ub294 \ub4e4\uc5b4\uc624\ub294 \uc694\uccad\uc744 \uac00\ub85c\ucc44 \uc801\uc808\ud55c CORS \ud5e4\ub354\uc640, \uc815\ubcf4 \uc81c\uacf5\uc744 \uc704\ud55c 200 \ub610\ub294 400 \uc751\ub2f5\uc73c\ub85c \uc751\ub2f5\ud569\ub2c8\ub2e4.","title":"CORS \uc0ac\uc804 \uc694\uccad"},{"location":"tutorial/cors/#_5","text":"Origin \ud5e4\ub354\ub97c \uac00\uc9c4 \ubaa8\ub4e0 \uc694\uccad. \uc774 \uacbd\uc6b0 \ubbf8\ub4e4\uc6e8\uc5b4\ub294 \uc694\uccad\uc744 \uc815\uc0c1\uc801\uc73c\ub85c \uc804\ub2ec\ud558\uc9c0\ub9cc, \uc801\uc808\ud55c CORS \ud5e4\ub354\ub97c \uc751\ub2f5\uc5d0 \ud3ec\ud568\uc2dc\ud0b5\ub2c8\ub2e4.","title":"\ub2e8\uc21c\ud55c \uc694\uccad"},{"location":"tutorial/cors/#_6","text":"CORS \uc5d0 \ub300\ud55c \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc54c\uace0\uc2f6\ub2e4\uba74, Mozilla CORS \ubb38\uc11c \ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80 \uc0ac\ud56d from starlette.middleware.cors import CORSMiddleware \uc5ed\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac1c\ubc1c\uc790\uc778 \ub2f9\uc2e0\uc758 \ud3b8\uc758\ub97c \uc704\ud574 fastapi.middleware \uc5d0\uc11c \uba87\uac00\uc9c0\uc758 \ubbf8\ub4e4\uc6e8\uc5b4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \ubbf8\ub4e4\uc6e8\uc5b4\uac00 Stralette\uc73c\ub85c\ubd80\ud130 \uc9c1\uc811 \uc81c\uacf5\ub429\ub2c8\ub2e4.","title":"\ub354 \ub9ce\uc740 \uc815\ubcf4"},{"location":"tutorial/debugging/","text":"\ub514\ubc84\uae45 \u00b6 \uc608\ub97c \ub4e4\uba74 Visual Studio Code \ub610\ub294 PyCharm\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud3b8\uc9d1\uae30\uc5d0\uc11c \ub514\ubc84\uac70\ub97c \uc5f0\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. uvicorn \ud638\ucd9c \u00b6 FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c uvicorn \uc744 \uc9c1\uc811 \uc784\ud3ec\ud2b8\ud558\uc5ec \uc2e4\ud589\ud569\ub2c8\ub2e4 import uvicorn from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def root (): a = \"a\" b = \"b\" + a return { \"hello world\" : b } if __name__ == \"__main__\" : uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) __name__ == \"__main__\" \uc5d0 \ub300\ud558\uc5ec \u00b6 __name__ == \"__main__\" \uc758 \uc8fc\uc694 \ubaa9\uc801\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud30c\uc77c\uc774 \ud638\ucd9c\ub420 \ub54c \uc2e4\ud589\ub418\ub294 \uc77c\ubd80 \ucf54\ub4dc\ub97c \uac16\ub294 \uac83\uc785\ub2c8\ub2e4. $ python myapp.py \uadf8\ub7ec\ub098 \ub2e4\uc74c\uacfc \uac19\uc774 \ub2e4\ub978 \ud30c\uc77c\uc744 \uac00\uc838\uc62c \ub54c\ub294 \ud638\ucd9c\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. from myapp import app \ucd94\uac00 \uc138\ubd80\uc0ac\ud56d \u00b6 \ud30c\uc77c \uc774\ub984\uc774 myapp.py \ub77c\uace0 \uac00\uc815\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \uc2e4\ud589\ud558\uba74 $ python myapp.py Python\uc5d0 \uc758\ud574 \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub41c \ud30c\uc77c\uc758 \ub0b4\ubd80 \ubcc0\uc218 __name__ \uc740 \ubb38\uc790\uc5f4 \"__main__\" \uc744 \uac12\uc73c\ub85c \uac16\uac8c \ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc139\uc158 uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) \uc774 \uc2e4\ud589\ub429\ub2c8\ub2e4. \ud574\ub2f9 \ubaa8\ub4c8(\ud30c\uc77c)\uc744 \uac00\uc838\uc624\uba74 \uc774\ub7f0 \uc77c\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4 \uadf8\ub798\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \ub2e4\ub978 \ud30c\uc77c importer.py \uac00 \uc788\ub294 \uacbd\uc6b0: from myapp import app # Some more code \uc774 \uacbd\uc6b0 myapp.py \ub0b4\ubd80\uc758 \uc790\ub3d9 \ubcc0\uc218\uc5d0\ub294 \uac12\uc774 \"__main__\" \uc778 \ubcc0\uc218 __name__ \uc774 \uc5c6\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub2e4\uc74c \ud589 uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) \uc740 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uacf5\uc2dd Python \ubb38\uc11c \ub97c \ud655\uc778\ud558\uc138\uc694 \ub514\ubc84\uac70\ub85c \ucf54\ub4dc \uc2e4\ud589 \u00b6 \ucf54\ub4dc\uc5d0\uc11c \uc9c1\uc811 Uvicorn \uc11c\ubc84\ub97c \uc2e4\ud589\ud558\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub514\ubc84\uac70\uc5d0\uc11c \uc9c1\uc811 Python \ud504\ub85c\uadf8\ub7a8(FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158)\uc744 \ud638\ucd9c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 Visual Studio Code\uc5d0\uc11c \ub2e4\uc74c\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \"Debug\" \ud328\ub110\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. \"Add configuration...\". \"Python\"\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4. \" Python: Current File (Integrated Terminal) \" \uc635\uc158\uc73c\ub85c \ub514\ubc84\uac70\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c FastAPI \ucf54\ub4dc\ub85c \uc11c\ubc84\ub97c \uc2dc\uc791\ud558\uace0 \uc911\ub2e8\uc810 \ub4f1\uc5d0\uc11c \uc911\uc9c0\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4. Pycharm\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \ub2e4\uc74c\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 \"Run\" \uba54\ub274\ub97c \uc5fd\ub2c8\ub2e4 \"Debug...\" \uc635\uc158\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc0c1\ud669\uc5d0 \ub9de\ub294 \uba54\ub274\uac00 \ub098\ud0c0\ub0a9\ub2c8\ub2e4. \ub514\ubc84\uadf8\ud560 \ud30c\uc77c\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4(\uc774 \uacbd\uc6b0 main.py ). \uadf8\ub7f0 \ub2e4\uc74c FastAPI \ucf54\ub4dc\ub85c \uc11c\ubc84\ub97c \uc2dc\uc791\ud558\uace0 \uc911\ub2e8\uc810 \ub4f1\uc5d0\uc11c \uc911\uc9c0\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4.","title":"\ub514\ubc84\uae45"},{"location":"tutorial/debugging/#_1","text":"\uc608\ub97c \ub4e4\uba74 Visual Studio Code \ub610\ub294 PyCharm\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud3b8\uc9d1\uae30\uc5d0\uc11c \ub514\ubc84\uac70\ub97c \uc5f0\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ub514\ubc84\uae45"},{"location":"tutorial/debugging/#uvicorn","text":"FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c uvicorn \uc744 \uc9c1\uc811 \uc784\ud3ec\ud2b8\ud558\uc5ec \uc2e4\ud589\ud569\ub2c8\ub2e4 import uvicorn from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def root (): a = \"a\" b = \"b\" + a return { \"hello world\" : b } if __name__ == \"__main__\" : uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 )","title":"uvicorn \ud638\ucd9c"},{"location":"tutorial/debugging/#__name__-__main__","text":"__name__ == \"__main__\" \uc758 \uc8fc\uc694 \ubaa9\uc801\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ud30c\uc77c\uc774 \ud638\ucd9c\ub420 \ub54c \uc2e4\ud589\ub418\ub294 \uc77c\ubd80 \ucf54\ub4dc\ub97c \uac16\ub294 \uac83\uc785\ub2c8\ub2e4. $ python myapp.py \uadf8\ub7ec\ub098 \ub2e4\uc74c\uacfc \uac19\uc774 \ub2e4\ub978 \ud30c\uc77c\uc744 \uac00\uc838\uc62c \ub54c\ub294 \ud638\ucd9c\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. from myapp import app","title":"__name__ == \"__main__\" \uc5d0 \ub300\ud558\uc5ec"},{"location":"tutorial/debugging/#_2","text":"\ud30c\uc77c \uc774\ub984\uc774 myapp.py \ub77c\uace0 \uac00\uc815\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \uc2e4\ud589\ud558\uba74 $ python myapp.py Python\uc5d0 \uc758\ud574 \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub41c \ud30c\uc77c\uc758 \ub0b4\ubd80 \ubcc0\uc218 __name__ \uc740 \ubb38\uc790\uc5f4 \"__main__\" \uc744 \uac12\uc73c\ub85c \uac16\uac8c \ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc139\uc158 uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) \uc774 \uc2e4\ud589\ub429\ub2c8\ub2e4. \ud574\ub2f9 \ubaa8\ub4c8(\ud30c\uc77c)\uc744 \uac00\uc838\uc624\uba74 \uc774\ub7f0 \uc77c\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4 \uadf8\ub798\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \ub2e4\ub978 \ud30c\uc77c importer.py \uac00 \uc788\ub294 \uacbd\uc6b0: from myapp import app # Some more code \uc774 \uacbd\uc6b0 myapp.py \ub0b4\ubd80\uc758 \uc790\ub3d9 \ubcc0\uc218\uc5d0\ub294 \uac12\uc774 \"__main__\" \uc778 \ubcc0\uc218 __name__ \uc774 \uc5c6\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub2e4\uc74c \ud589 uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) \uc740 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uacf5\uc2dd Python \ubb38\uc11c \ub97c \ud655\uc778\ud558\uc138\uc694","title":"\ucd94\uac00 \uc138\ubd80\uc0ac\ud56d"},{"location":"tutorial/debugging/#_3","text":"\ucf54\ub4dc\uc5d0\uc11c \uc9c1\uc811 Uvicorn \uc11c\ubc84\ub97c \uc2e4\ud589\ud558\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub514\ubc84\uac70\uc5d0\uc11c \uc9c1\uc811 Python \ud504\ub85c\uadf8\ub7a8(FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158)\uc744 \ud638\ucd9c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 Visual Studio Code\uc5d0\uc11c \ub2e4\uc74c\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \"Debug\" \ud328\ub110\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. \"Add configuration...\". \"Python\"\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4. \" Python: Current File (Integrated Terminal) \" \uc635\uc158\uc73c\ub85c \ub514\ubc84\uac70\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c FastAPI \ucf54\ub4dc\ub85c \uc11c\ubc84\ub97c \uc2dc\uc791\ud558\uace0 \uc911\ub2e8\uc810 \ub4f1\uc5d0\uc11c \uc911\uc9c0\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4. Pycharm\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \ub2e4\uc74c\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4 \"Run\" \uba54\ub274\ub97c \uc5fd\ub2c8\ub2e4 \"Debug...\" \uc635\uc158\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc0c1\ud669\uc5d0 \ub9de\ub294 \uba54\ub274\uac00 \ub098\ud0c0\ub0a9\ub2c8\ub2e4. \ub514\ubc84\uadf8\ud560 \ud30c\uc77c\uc744 \uc120\ud0dd\ud569\ub2c8\ub2e4(\uc774 \uacbd\uc6b0 main.py ). \uadf8\ub7f0 \ub2e4\uc74c FastAPI \ucf54\ub4dc\ub85c \uc11c\ubc84\ub97c \uc2dc\uc791\ud558\uace0 \uc911\ub2e8\uc810 \ub4f1\uc5d0\uc11c \uc911\uc9c0\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4.","title":"\ub514\ubc84\uac70\ub85c \ucf54\ub4dc \uc2e4\ud589"},{"location":"tutorial/encoder/","text":"JSON \ud638\ud658 \uac00\ub2a5 \uc778\ucf54\ub354 \u00b6 \ub370\uc774\ud130 \uc720\ud615(\uc608: Pydantic \ubaa8\ub378)\uc744 JSON\uacfc \ud638\ud658\ub41c \ud615\ud0dc\ub85c \ubc18\ud658\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. (\uc608: dict , list \ub4f1) \uc608\ub97c \ub4e4\uba74, \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc800\uc7a5\ud574\uc57c\ud558\ub294 \uacbd\uc6b0\uc785\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574, FastAPI \uc5d0\uc11c\ub294 jsonable_encoder() \ud568\uc218\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. jsonable_encoder \uc0ac\uc6a9 \u00b6 JSON \ud638\ud658 \uac00\ub2a5 \ub370\uc774\ud130\ub9cc \uc218\uc2e0\ud558\ub294 fake_db \ub370\uc774\ud130\ubca0\uc774\uc2a4\uac00 \uc874\uc7ac\ud55c\ub2e4\uace0 \uac00\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74, datetime \uac1d\uccb4\ub294 JSON\uacfc \ud638\ud658\ub418\ub294 \ub370\uc774\ud130\uac00 \uc544\ub2c8\ubbc0\ub85c \uc774 \ub370\uc774\ud130\ub294 \ubc1b\uc544\ub4e4\uc5ec\uc9c0\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c datetime \uac1d\uccb4\ub294 ISO format \ub370\uc774\ud130\ub97c \ud3ec\ud568\ud558\ub294 str \ub85c \ubcc0\ud658\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \uc774 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub294 Pydantic \ubaa8\ub378(\uc18d\uc131\uc774 \uc788\ub294 \uac1d\uccb4)\uc744 \ubc1b\uc9c0 \uc54a\uace0, dict \ub9cc\uc744 \ubc1b\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 jsonable_encoder \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Pydantic \ubaa8\ub378\uacfc \uac19\uc740 \uac1d\uccb4\ub97c \ubc1b\uace0 JSON \ud638\ud658 \uac00\ub2a5\ud55c \ubc84\uc804\uc73c\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4: from datetime import datetime from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel fake_db = {} class Item ( BaseModel ): title : str timestamp : datetime description : Union [ str , None ] = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) fake_db [ id ] = json_compatible_item_data \uc774 \uc608\uc2dc\ub294 Pydantic \ubaa8\ub378\uc744 dict \ub85c, datetime \ud615\uc2dd\uc744 str \ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \uc774\ub807\uac8c \ud638\ucd9c\ud55c \uacb0\uacfc\ub294 \ud30c\uc774\uc36c \ud45c\uc900\uc778 json.dumps() \ub85c \uc778\ucf54\ub529 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae38\uc774\uac00 \uae34 \ubb38\uc790\uc5f4 \ud615\ud0dc\uc758 JSON \ud615\uc2dd(\ubb38\uc790\uc5f4)\uc758 \ub370\uc774\ud130\uac00 \ub4e4\uc5b4\uc788\ub294 \uc0c1\ud669\uc5d0\uc11c\ub294 str \ub85c \ubc18\ud658\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. JSON\uacfc \ubaa8\ub450 \ud638\ud658\ub418\ub294 \uac12\uacfc \ud558\uc704 \uac12\uc774 \uc788\ub294 Python \ud45c\uc900 \ub370\uc774\ud130 \uad6c\uc870 (\uc608: dict )\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \ucc38\uace0 \uc2e4\uc81c\ub85c jsonable_encoder \ub294 FastAPI \uc5d0\uc11c \ub0b4\ubd80\uc801\uc73c\ub85c \ub370\uc774\ud130\ub97c \ubcc0\ud658\ud558\ub294 \ub370 \uc0ac\uc6a9\ud558\uc9c0\ub9cc, \ub2e4\ub978 \ub9ce\uc740 \uacf3\uc5d0\uc11c\ub3c4 \uc774\ub294 \uc720\uc6a9\ud569\ub2c8\ub2e4.","title":"JSON \ud638\ud658 \uac00\ub2a5 \uc778\ucf54\ub354"},{"location":"tutorial/encoder/#json","text":"\ub370\uc774\ud130 \uc720\ud615(\uc608: Pydantic \ubaa8\ub378)\uc744 JSON\uacfc \ud638\ud658\ub41c \ud615\ud0dc\ub85c \ubc18\ud658\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. (\uc608: dict , list \ub4f1) \uc608\ub97c \ub4e4\uba74, \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc800\uc7a5\ud574\uc57c\ud558\ub294 \uacbd\uc6b0\uc785\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574, FastAPI \uc5d0\uc11c\ub294 jsonable_encoder() \ud568\uc218\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.","title":"JSON \ud638\ud658 \uac00\ub2a5 \uc778\ucf54\ub354"},{"location":"tutorial/encoder/#jsonable_encoder","text":"JSON \ud638\ud658 \uac00\ub2a5 \ub370\uc774\ud130\ub9cc \uc218\uc2e0\ud558\ub294 fake_db \ub370\uc774\ud130\ubca0\uc774\uc2a4\uac00 \uc874\uc7ac\ud55c\ub2e4\uace0 \uac00\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74, datetime \uac1d\uccb4\ub294 JSON\uacfc \ud638\ud658\ub418\ub294 \ub370\uc774\ud130\uac00 \uc544\ub2c8\ubbc0\ub85c \uc774 \ub370\uc774\ud130\ub294 \ubc1b\uc544\ub4e4\uc5ec\uc9c0\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c datetime \uac1d\uccb4\ub294 ISO format \ub370\uc774\ud130\ub97c \ud3ec\ud568\ud558\ub294 str \ub85c \ubcc0\ud658\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \uc774 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub294 Pydantic \ubaa8\ub378(\uc18d\uc131\uc774 \uc788\ub294 \uac1d\uccb4)\uc744 \ubc1b\uc9c0 \uc54a\uace0, dict \ub9cc\uc744 \ubc1b\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 jsonable_encoder \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Pydantic \ubaa8\ub378\uacfc \uac19\uc740 \uac1d\uccb4\ub97c \ubc1b\uace0 JSON \ud638\ud658 \uac00\ub2a5\ud55c \ubc84\uc804\uc73c\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4: from datetime import datetime from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel fake_db = {} class Item ( BaseModel ): title : str timestamp : datetime description : Union [ str , None ] = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) fake_db [ id ] = json_compatible_item_data \uc774 \uc608\uc2dc\ub294 Pydantic \ubaa8\ub378\uc744 dict \ub85c, datetime \ud615\uc2dd\uc744 str \ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \uc774\ub807\uac8c \ud638\ucd9c\ud55c \uacb0\uacfc\ub294 \ud30c\uc774\uc36c \ud45c\uc900\uc778 json.dumps() \ub85c \uc778\ucf54\ub529 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae38\uc774\uac00 \uae34 \ubb38\uc790\uc5f4 \ud615\ud0dc\uc758 JSON \ud615\uc2dd(\ubb38\uc790\uc5f4)\uc758 \ub370\uc774\ud130\uac00 \ub4e4\uc5b4\uc788\ub294 \uc0c1\ud669\uc5d0\uc11c\ub294 str \ub85c \ubc18\ud658\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. JSON\uacfc \ubaa8\ub450 \ud638\ud658\ub418\ub294 \uac12\uacfc \ud558\uc704 \uac12\uc774 \uc788\ub294 Python \ud45c\uc900 \ub370\uc774\ud130 \uad6c\uc870 (\uc608: dict )\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \ucc38\uace0 \uc2e4\uc81c\ub85c jsonable_encoder \ub294 FastAPI \uc5d0\uc11c \ub0b4\ubd80\uc801\uc73c\ub85c \ub370\uc774\ud130\ub97c \ubcc0\ud658\ud558\ub294 \ub370 \uc0ac\uc6a9\ud558\uc9c0\ub9cc, \ub2e4\ub978 \ub9ce\uc740 \uacf3\uc5d0\uc11c\ub3c4 \uc774\ub294 \uc720\uc6a9\ud569\ub2c8\ub2e4.","title":"jsonable_encoder \uc0ac\uc6a9"},{"location":"tutorial/extra-data-types/","text":"\ucd94\uac00 \ub370\uc774\ud130 \ud0c0\uc785\ub4e4 \u00b6 \uc9c0\uae08\uae4c\uc9c0, \uc77c\ubc18\uc801\uc778 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4: int float str bool \ud558\uc9c0\ub9cc \ubcf4\ub2e4 \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \ud0c0\uc785 \ub610\ud55c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc9c0\uae08\uae4c\uc9c0\uc640 \uac19\uc740 \uae30\ub2a5\ub4e4\uc744 \uacc4\uc18d\ud574\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud6cc\ub96d\ud55c \uc5d0\ub514\ud130 \ub3c4\uc6c0\u001e. \uc218\uc2e0\ud55c \uc694\uccad\uc758 \ub370\uc774\ud130 \ubcc0\ud658. \uc751\ub2f5 \ub370\uc774\ud130\uc758 \ub370\uc774\ud130 \ubcc0\ud658. \ub370\uc774\ud130 \uac80\uc99d. \uc790\ub3d9 \uc5b4\ub178\ud14c\uc774\uc158\uacfc \ubb38\uc11c\ud654. \ub2e4\ub978 \ub370\uc774\ud130 \ud0c0\uc785\ub4e4 \u00b6 \uc5ec\uae30\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uba87 \uac00\uc9c0 \ucd94\uac00\uc801\uc778 \ub370\uc774\ud130 \ud0c0\uc785\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4: UUID : \"\ubc94\uc6a9 \uace0\uc720 \uc2dd\ubcc4\uc790\"\uc758 \ud45c\uc900\uc73c\ub85c, \ub9ce\uc740 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \uc2dc\uc2a4\ud15c\uc5d0\uc11c ID\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c str \ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. datetime.datetime : \ud30c\uc774\uc36c\uc758 datetime.datetime . ISO 8601 \ud615\uc2dd\uc5d0 \ub530\ub77c, \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c str \ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \uc608\uc2dc: 2008-09-15T15:53:00+05:00 datetime.date : \ud30c\uc774\uc36c\uc758 datetime.date . ISO 8601 \ud615\uc2dd\uc5d0 \ub530\ub77c, \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c str \ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \uc608\uc2dc: 2008-09-15 . datetime.time : \ud30c\uc774\uc36c\uc758 datetime.time . ISO 8601 \ud615\uc2dd\uc5d0 \ub530\ub77c, \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c str \ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \uc608\uc2dc: 14:23:55.003 . datetime.timedelta : \ud30c\uc774\uc36c\uc758 datetime.timedelta . \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c \uc804\uccb4 \ucd08\uc758 float \uc73c\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \ub610\ud55c Pydantic\uc740 \"ISO 8601 \uc2dc\ucc28 \uc778\ucf54\ub529\"\uc73c\ub85c \ud45c\ud604\ud558\ub294 \uac83\uc744 \ud5c8\uc6a9\ud569\ub2c8\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uac00\uc9c4 \ubb38\uc11c \ubcf4\uae30 . frozenset : \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c set \ub85c \ub3d9\uc77c\ud558\uac8c \ucc98\ub9ac\ub429\ub2c8\ub2e4: \uc694\uccad\uc5d0\uc11c, \ub9ac\uc2a4\ud2b8\ub97c \uc77d\uace0 \uc911\ubcf5\uc744 \uc81c\uac70\ud574 set \ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \uc751\ub2f5\uc5d0\uc11c, set \ub294 list \ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4. \uc0dd\uc131\ub41c \uc2a4\ud0a4\ub9c8\ub294 (JSON \uc2a4\ud0a4\ub9c8\uc758 uniqueItems \ub97c \uc774\uc6a9\ud574\uc11c) set \uc758 \uac12\uc774 \uace0\uc720\ud568 \uba85\uc2dc\ud569\ub2c8\ub2e4. bytes : \ud45c\uc900 \ud30c\uc774\uc36c\uc758 bytes . \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c str \ub85c \ucc98\ub9ac\ub429\ub2c8\ub2e4. \uc0dd\uc131\ub41c \uc2a4\ud0a4\ub9c8\ub294 binary \"\ud615\ud0dc\"\uc758 str \ub85c \uba85\uc2dc\ud569\ub2c8\ub2e4. Decimal : \ud45c\uc900 \ud30c\uc774\uc36c\uc758 Decimal . \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c, float \uacfc \ub3d9\uc77c\ud558\uac8c \ucde8\uae09\ub429\ub2c8\ub2e4. \ubaa8\ub4e0 \uc720\ud6a8\ud55c pydantic \ub370\uc774\ud130 \ud0c0\uc785\uc5d0 \ub300\ud574 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: Pydantic \ub370\uc774\ud130 \ud0c0\uc785 . \uc608\uc2dc \u00b6 \ub2e4\uc74c\uc740 \uc704\uc758 \ub098\uc628 \uba87\uba87 \ud0c0\uc785\uc758 \ub9e4\uac1c\ubcc0\uc218\ub97c \ud65c\uc6a9\ud55c \uacbd\ub85c \ub3d9\uc791 \uc608\uc2dc\uc785\ub2c8\ub2e4. from datetime import datetime , time , timedelta from typing import Union from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : Union [ datetime , None ] = Body ( default = None ), end_datetime : Union [ datetime , None ] = Body ( default = None ), repeat_at : Union [ time , None ] = Body ( default = None ), process_after : Union [ timedelta , None ] = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , } \ud568\uc218 \uc548\uc758 \ub9e4\uac1c\ubcc0\uc218\uac00 \uadf8\ub4e4\ub9cc\uc758 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uac16\uace0 \uc788\uace0, \ub610\ud55c \ub2e4\uc74c\uacfc \uac19\uc740 \ub0a0\uc9dc \uc870\uc791\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\uc2dc: from datetime import datetime , time , timedelta from typing import Union from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : Union [ datetime , None ] = Body ( default = None ), end_datetime : Union [ datetime , None ] = Body ( default = None ), repeat_at : Union [ time , None ] = Body ( default = None ), process_after : Union [ timedelta , None ] = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , }","title":"\ucd94\uac00 \ub370\uc774\ud130 \ud0c0\uc785\ub4e4"},{"location":"tutorial/extra-data-types/#_1","text":"\uc9c0\uae08\uae4c\uc9c0, \uc77c\ubc18\uc801\uc778 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4: int float str bool \ud558\uc9c0\ub9cc \ubcf4\ub2e4 \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \ud0c0\uc785 \ub610\ud55c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc9c0\uae08\uae4c\uc9c0\uc640 \uac19\uc740 \uae30\ub2a5\ub4e4\uc744 \uacc4\uc18d\ud574\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud6cc\ub96d\ud55c \uc5d0\ub514\ud130 \ub3c4\uc6c0\u001e. \uc218\uc2e0\ud55c \uc694\uccad\uc758 \ub370\uc774\ud130 \ubcc0\ud658. \uc751\ub2f5 \ub370\uc774\ud130\uc758 \ub370\uc774\ud130 \ubcc0\ud658. \ub370\uc774\ud130 \uac80\uc99d. \uc790\ub3d9 \uc5b4\ub178\ud14c\uc774\uc158\uacfc \ubb38\uc11c\ud654.","title":"\ucd94\uac00 \ub370\uc774\ud130 \ud0c0\uc785\ub4e4"},{"location":"tutorial/extra-data-types/#_2","text":"\uc5ec\uae30\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uba87 \uac00\uc9c0 \ucd94\uac00\uc801\uc778 \ub370\uc774\ud130 \ud0c0\uc785\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4: UUID : \"\ubc94\uc6a9 \uace0\uc720 \uc2dd\ubcc4\uc790\"\uc758 \ud45c\uc900\uc73c\ub85c, \ub9ce\uc740 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \uc2dc\uc2a4\ud15c\uc5d0\uc11c ID\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c str \ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. datetime.datetime : \ud30c\uc774\uc36c\uc758 datetime.datetime . ISO 8601 \ud615\uc2dd\uc5d0 \ub530\ub77c, \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c str \ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \uc608\uc2dc: 2008-09-15T15:53:00+05:00 datetime.date : \ud30c\uc774\uc36c\uc758 datetime.date . ISO 8601 \ud615\uc2dd\uc5d0 \ub530\ub77c, \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c str \ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \uc608\uc2dc: 2008-09-15 . datetime.time : \ud30c\uc774\uc36c\uc758 datetime.time . ISO 8601 \ud615\uc2dd\uc5d0 \ub530\ub77c, \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c str \ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \uc608\uc2dc: 14:23:55.003 . datetime.timedelta : \ud30c\uc774\uc36c\uc758 datetime.timedelta . \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c \uc804\uccb4 \ucd08\uc758 float \uc73c\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \ub610\ud55c Pydantic\uc740 \"ISO 8601 \uc2dc\ucc28 \uc778\ucf54\ub529\"\uc73c\ub85c \ud45c\ud604\ud558\ub294 \uac83\uc744 \ud5c8\uc6a9\ud569\ub2c8\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uac00\uc9c4 \ubb38\uc11c \ubcf4\uae30 . frozenset : \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c set \ub85c \ub3d9\uc77c\ud558\uac8c \ucc98\ub9ac\ub429\ub2c8\ub2e4: \uc694\uccad\uc5d0\uc11c, \ub9ac\uc2a4\ud2b8\ub97c \uc77d\uace0 \uc911\ubcf5\uc744 \uc81c\uac70\ud574 set \ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \uc751\ub2f5\uc5d0\uc11c, set \ub294 list \ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4. \uc0dd\uc131\ub41c \uc2a4\ud0a4\ub9c8\ub294 (JSON \uc2a4\ud0a4\ub9c8\uc758 uniqueItems \ub97c \uc774\uc6a9\ud574\uc11c) set \uc758 \uac12\uc774 \uace0\uc720\ud568 \uba85\uc2dc\ud569\ub2c8\ub2e4. bytes : \ud45c\uc900 \ud30c\uc774\uc36c\uc758 bytes . \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c str \ub85c \ucc98\ub9ac\ub429\ub2c8\ub2e4. \uc0dd\uc131\ub41c \uc2a4\ud0a4\ub9c8\ub294 binary \"\ud615\ud0dc\"\uc758 str \ub85c \uba85\uc2dc\ud569\ub2c8\ub2e4. Decimal : \ud45c\uc900 \ud30c\uc774\uc36c\uc758 Decimal . \uc694\uccad\uacfc \uc751\ub2f5\uc5d0\uc11c, float \uacfc \ub3d9\uc77c\ud558\uac8c \ucde8\uae09\ub429\ub2c8\ub2e4. \ubaa8\ub4e0 \uc720\ud6a8\ud55c pydantic \ub370\uc774\ud130 \ud0c0\uc785\uc5d0 \ub300\ud574 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: Pydantic \ub370\uc774\ud130 \ud0c0\uc785 .","title":"\ub2e4\ub978 \ub370\uc774\ud130 \ud0c0\uc785\ub4e4"},{"location":"tutorial/extra-data-types/#_3","text":"\ub2e4\uc74c\uc740 \uc704\uc758 \ub098\uc628 \uba87\uba87 \ud0c0\uc785\uc758 \ub9e4\uac1c\ubcc0\uc218\ub97c \ud65c\uc6a9\ud55c \uacbd\ub85c \ub3d9\uc791 \uc608\uc2dc\uc785\ub2c8\ub2e4. from datetime import datetime , time , timedelta from typing import Union from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : Union [ datetime , None ] = Body ( default = None ), end_datetime : Union [ datetime , None ] = Body ( default = None ), repeat_at : Union [ time , None ] = Body ( default = None ), process_after : Union [ timedelta , None ] = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , } \ud568\uc218 \uc548\uc758 \ub9e4\uac1c\ubcc0\uc218\uac00 \uadf8\ub4e4\ub9cc\uc758 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uac16\uace0 \uc788\uace0, \ub610\ud55c \ub2e4\uc74c\uacfc \uac19\uc740 \ub0a0\uc9dc \uc870\uc791\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\uc2dc: from datetime import datetime , time , timedelta from typing import Union from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : Union [ datetime , None ] = Body ( default = None ), end_datetime : Union [ datetime , None ] = Body ( default = None ), repeat_at : Union [ time , None ] = Body ( default = None ), process_after : Union [ timedelta , None ] = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , }","title":"\uc608\uc2dc"},{"location":"tutorial/extra-models/","text":"\ucd94\uac00 \ubaa8\ub378 \u00b6 \uc774\uc804\uc758 \uc608\uc81c\uc5d0 \uc774\uc5b4\uc11c, \uc77c\ubc18\uc801\uc73c\ub85c\ub294 \ud55c \uac00\uc9c0 \uc774\uc0c1\uc758 \uad00\uacc4 \ubaa8\ub378\uc744 \uac00\uc9c8 \uac83\uc785\ub2c8\ub2e4. \uc0ac\uc6a9\uc790 \ubaa8\ub378\uc758 \uacbd\uc6b0\uac00 \ud2b9\ud788 \uadf8\ub807\uc2b5\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74: \uc785\ub825 \ubaa8\ub378 \uc740 \ube44\ubc00\ubc88\ud638\ub97c \uac00\uc9c8 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ucd9c\ub825 \ubaa8\ub378 \uc740 \ube44\ubc00\ubc88\ud638\uac00 \uc5c6\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378 \uc740 \ud574\uc2dc \ub41c \ube44\ubc00\ubc88\ud638\uac00 \ud544\uc694\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc704\ud5d8 \uc0ac\uc6a9\uc790\uc758 \ud3c9\ubb38 \ube44\ubc00\ubc88\ud638\ub97c \uc808\ub300 \uc800\uc7a5\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624. \ud56d\uc0c1 \uac80\uc99d\ud560 \uc218 \uc788\ub294 \"\uc548\uc804\ud55c \ud574\uc2dc\"\ub85c \uc800\uc7a5\ud558\uc2ed\uc2dc\uc624. \ub9cc\uc57d \ub2f9\uc2e0\uc774 \ubaa8\ub978\ub2e4\uba74 \ubcf4\uc548 \ucc55\ud130 \uc5d0\uc11c \"\ube44\ubc00\ubc88\ud638 \ud574\uc2dc\"\uac00 \ubb34\uc5c7\uc778\uc9c0 \ubc30\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcf5\ud569 \ubaa8\ub378\ub4e4 \u00b6 \ubaa8\ub378\ub4e4\uc774 \ube44\ubc00\ubc88\ud638 \ud544\ub4dc\uc640 \uadf8\uac83\uc774 \uc0ac\uc6a9\ub418\ub294 \uc704\uce58\uc5d0\uc11c \uc5b4\ub5bb\uac8c \ubcf4\uc77c \uc218 \uc788\ub294\uc9c0\uc5d0 \ub300\ud55c \uc77c\ubc18\uc801\uc778 \uc544\uc774\ub514\uc5b4\ub97c \uc18c\uac1c\ud569\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None class UserInDB ( BaseModel ): username : str hashed_password : str email : EmailStr full_name : Union [ str , None ] = None def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved **user_in.dict() \uc5d0 \uad00\ud574 \u00b6 Pydantic\uc5d0\uc11c\uc758 .dict() \u00b6 user_in \uc740 UserIn \ud074\ub798\uc2a4\uc758 Pydantic \ubaa8\ub378\uc785\ub2c8\ub2e4. Pydantic \ubaa8\ub378\uc740 \ubaa8\ub378 \ub370\uc774\ud130\uc758 dict \ub97c \ubc18\ud658\ud558\ub294 .dict() \uba54\uc18c\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c, \ub9cc\uc57d \uc6b0\ub9ac\uac00 Pydantic \uac1d\uccb4\uc778 user_in \uc744 \uc0dd\uc131\ud574\ubcf4\uba74: user_in = UserIn ( username = \"john\" , password = \"secret\" , email = \"john.doe@example.com\" ) \uadf8\ub9ac\uace0 \uc6b0\ub9ac\ub294 \uc774\ub807\uac8c \ud638\ucd9c\ud569\ub2c8\ub2e4: user_dict = user_in . dict () \uc6b0\ub9ac\ub294 user_dict (Pydantic \ubaa8\ub378 \uac1d\uccb4 \ub300\uc2e0 dict \uc785\ub2c8\ub2e4) \ubcc0\uc218 \ub0b4\ubd80\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c dict \ub85c \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub9cc\uc57d \uc6b0\ub9ac\uac00 \uc774\ub807\uac8c \ud638\ucd9c\ud55c\ub2e4\uba74: print ( user_dict ) \uc6b0\ub9ac\ub294 \ud30c\uc774\uc36c dict \ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: { 'username' : 'john' , 'password' : 'secret' , 'email' : 'john.doe@example.com' , 'full_name' : None , } dict \ub97c \ud480\uae30 \u00b6 \uc6b0\ub9ac\uac00 user_dict \uac19\uc740 dict \ub97c \uc5bb\uc5b4\uc624\uac70\ub098 **user_dict \uc758 \ud615\ud0dc\ub85c \ud568\uc218\ub098 \ud074\ub798\uc2a4\ub85c \uc804\ub2ec\ud560\ub54c, \ud30c\uc774\uc36c\uc740 \uc774\uac83\uc744 \"\ud480\uae30(unwrap)\"\ub97c \ud569\ub2c8\ub2e4. \uc774\uac83\uc740 user_dict \uc758 \ud0a4\uc640 \uac12\uc744 \ud0a4-\uac12 \uc778\uc790(arguments)\ub85c \uc9c1\uc811\uc801\uc73c\ub85c \ub118\uae41\ub2c8\ub2e4. \uadf8\ub798\uc11c, \uc704\uc5d0\uc11c \uc124\uba85\ud588\ub358 user_dict \ub85c \uacc4\uc18d \uc9c4\ud589\ud558\uaca0\uc2b5\ub2c8\ub2e4: UserInDB ( ** user_dict ) \uc544\ub798\uc640 \ub3d9\ub4f1\ud55c \uacb0\uacfc\ub97c \uc904 \uac83\uc785\ub2c8\ub2e4. UserInDB ( username = \"john\" , password = \"secret\" , email = \"john.doe@example.com\" , full_name = None , ) \ub610\ub294 \ub354 \uc815\ud655\ud558\uac8c\ub294 \ub098\uc911\uc5d0 \uc5b4\ub5a4\ub0b4\uc6a9\uc744 \ub2f4\uac8c \ub418\ub354\ub77c\ub3c4 user_dict \ub97c \uc9c1\uc811\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4: UserInDB ( username = user_dict [ \"username\" ], password = user_dict [ \"password\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], ) \ub610 \ub2e4\ub978 \ub0b4\uc6a9\uc73c\ub85c\ubd80\ud130 Pydantic \ubaa8\ub378 \u00b6 \uc704\uc758 \uc608\uc81c\uc5d0\uc11c\ub294 user_in.dict() \uc5d0\uc11c user_dict \ub97c \uc5bb\uc744 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc774 \ucf54\ub4dc\uc785\ub2c8\ub2e4: user_dict = user_in . dict () UserInDB ( ** user_dict ) \uc774\uac83\uacfc \ub3d9\ub4f1\ud560 \uac83\uc785\ub2c8\ub2e4: UserInDB ( ** user_in . dict ()) ... \uc65c\ub0d0\ud558\uba74 user_in.dict() \ub294 dict \uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc6b0\ub9ac\ub294 UserInDB \uc55e\uc5d0 ** \ub97c \ubd99\uc5ec\uc11c \uc804\ub2ec\ud568\uc73c\ub85c\uc368 Python\uc774 \"\ud480\uae30\"\ub97c \ud558\ub3c4\ub85d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c, \uc6b0\ub9ac\ub294 \ub610\ub2e4\ub978 Pydantic \ubaa8\ub378\uc5d0 \uc788\ub294 \ub370\uc774\ud130\uc5d0\uc11c Pydantic \ubaa8\ub378\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. dict \ub97c \ud480\uae30 \uadf8\ub9ac\uace0 \ucd94\uac00 \ud0a4\uc6cc\ub4dc\ub4e4 \u00b6 \uadf8\ub9ac\uace0 \ucd94\uac00 \ud0a4\uc6cc\ub4dc \uc18d\uc131\uc778 hashed_password=hashed_password \uc744 \ucd94\uac00\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4: UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) ... \uacb0\uad6d\uc5d0\ub294 \uc774\ub807\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4: UserInDB ( username = user_dict [ \"username\" ], password = user_dict [ \"password\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], hashed_password = hashed_password , ) \uacbd\uace0 \ucd94\uac00\uc801\uc778 \ud568\uc218 \uc9c0\uc6d0\uc740 \uac00\ub2a5\ud55c \ub370\uc774\ud130 \ud750\ub984\uc744 \ubcf4\uc5ec\uc8fc\ub294 \ub370\ubaa8\uc77c \ubfd0\uc774\uba70, \ub2f9\uc5f0\ud788 \uadf8 \uc5b4\ub5a4 \uc2e4\uc81c \ubcf4\uc548\ub3c4 \uc81c\uacf5\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc911\ubcf5 \uc904\uc774\uae30 \u00b6 \uc911\ubcf5 \ucf54\ub4dc \uc904\uc774\uae30\ub294 FASTAPI \uc758 \ud575\uc2ec \uac1c\ub150 \uc911 \ud558\ub098\uc785\ub2c8\ub2e4. \ucf54\ub4dc \uc911\ubcf5\uc740 \ubc84\uadf8\uc758 \uac00\ub2a5\uc131, \ubcf4\uc548 \uc774\uc288, \ucf54\ub4dc \ube44\ub3d9\uae30\ud654 \ubb38\uc81c(\ud55c \uc7a5\uc18c\uc5d0\ub294 \uc5c5\ub370\uc774\ud2b8 \ud558\uc9c0\ub9cc \ub2e4\ub978 \uacf3\uc5d0\uc11c\ub294 \uadf8\ub807\uc9c0 \ubabb\ud560\ub54c) \ub4f1\uc744 \uc99d\uac00\uc2dc\ud0b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\ub7ec\ud55c \ubaa8\ub378\ub4e4\uc740 \ub9ce\uc740 \ub370\uc774\ud130\ub97c \uacf5\uc720\ud558\uace0 \ud0c0\uc785\uacfc \uc778\uc790 \uc774\ub984\ub4e4\uc744 \ubc18\ubcf5\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\uac8c \ub429\ub2c8\ub2e4. \ub354 \uc798\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\ub978 \ubaa8\ub378\ub4e4\uc758 \uae30\ucd08\uac00 \ub418\ub294 UserBase \ubaa8\ub378\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc6b0\ub9ac\ub294 \uc774 \uc778\uc790\ub4e4(\ud0c0\uc785 \uc120\uc5b8, \uac80\uc99d \ub4f1)\uc744 \uc0c1\uc18d\ubc1b\uc740 \ubaa8\ub378\uc778 \uc11c\ube0c\ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \ub370\uc774\ud130\uc758 \ubcc0\ud658, \uac80\uc99d, \ubb38\uc11c\ud654 \ub4f1\uc740 \uc5ec\uc804\ud788 \uc815\uc0c1\uc801\uc73c\ub85c \ub3d9\uc791\ud560 \uac83\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ubc29\ubc95\uc73c\ub85c \uc6b0\ub9ac\ub294 \ubaa8\ub378\ub4e4 \uc0ac\uc774\uc758 \ucc28\uc774\ub9cc\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.(\ud3c9\ubb38 password \uc640 \ud568\uaed8, hashed_password \uc640 \ud568\uaed8, \ube44\ubc00\ubc88\ud638\ub294 \uc5c6\uc774) from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserBase ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None class UserIn ( UserBase ): password : str class UserOut ( UserBase ): pass class UserInDB ( UserBase ): hashed_password : str def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved Union \ub610\ub294 anyOf \u00b6 Union \uc744 \ud1b5\ud574 \ub450 \uac00\uc9c0 \ud0c0\uc785\uc758 \uc751\ub2f5\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8 \ub9d0\uc740, \uc751\ub2f5\uc740 \uadf8 \ub450 \uac00\uc9c0 \uc911 \uc544\ubb34\uac70\ub098 \ub420 \uc218 \uc788\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \uc774\ub294 OpenAPI\uc5d0\uc11c anyOf \ub85c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ud558\uae30 \uc704\ud574\uc11c\ub294 \ud45c\uc900 \ud30c\uc774\uc36c \ud0c0\uc785 \ud78c\ud2b8 typing.Union \ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624: \ucc38\uace0 Union \uc744 \uc120\uc5b8\ud560 \ub54c, \uac00\uc7a5 \ud2b9\uc815\ud55c \ud0c0\uc785\uc744 \uccab \ubc88\uc9f8\ub85c \ud3ec\ud568\ud558\uace0, \ub35c \ud2b9\uc815\ud55c \ud0c0\uc785\uc744 \ub4a4\uc5d0 \ubd99\uc774\uc2ed\uc2dc\uc624. \uc608\ub97c \ub4e4\uc5b4, Union[PlaneItem, CarItem] \uc5d0\uc11c \ub354 \ud2b9\uc815\ud55c PlaneItem \uc740 CarItem \ubcf4\ub2e4 \ub354 \uc55e\uc5d0 \uc635\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class BaseItem ( BaseModel ): description : str type : str class CarItem ( BaseItem ): type = \"car\" class PlaneItem ( BaseItem ): type = \"plane\" size : int items = { \"item1\" : { \"description\" : \"All my friends drive a low rider\" , \"type\" : \"car\" }, \"item2\" : { \"description\" : \"Music is my aeroplane, it's my aeroplane\" , \"type\" : \"plane\" , \"size\" : 5 , }, } @app . get ( \"/items/ {item_id} \" , response_model = Union [ PlaneItem , CarItem ]) async def read_item ( item_id : str ): return items [ item_id ] \ubaa8\ub378\ub4e4\uc758 \ub9ac\uc2a4\ud2b8 \u00b6 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c, \uac1d\uccb4\uc758 \ub9ac\uc2a4\ud2b8\ub97c \uc751\ub2f5\uc73c\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc744 \uc704\ud574\uc11c \ud45c\uc900 \ud30c\uc774\uc36c typing.List \ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624: from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str items = [ { \"name\" : \"Foo\" , \"description\" : \"There comes my hero\" }, { \"name\" : \"Red\" , \"description\" : \"It's my aeroplane\" }, ] @app . get ( \"/items/\" , response_model = List [ Item ]) async def read_items (): return items \uc784\uc758\uc758 dict \ub85c \uc751\ub2f5\ud558\uae30 \u00b6 Pydantic \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \ub2e8\uc21c\ud788 \ud0a4\uc640 \uac12\uc758 \ud0c0\uc785\uc73c\ub85c \uc120\uc5b8\ud558\ub294 \ud3c9\ubc94\ud55c \uc784\uc758\uc758 dict \ub85c \uc751\ub2f5\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubbf8\ub9ac \uc720\ud6a8\ud55c \ud544\ub4dc\uc640 \uc18d\uc131\uc758 \uc774\ub984(\uc774\uac83\uc740 \uc544\ub9c8 Pydantic \ubaa8\ub378\uc5d0 \ud544\uc694\ud560 \uac83\uc785\ub2c8\ub2e4)\uc744 \uc54c\uc9c0 \ubabb\ud560\ub54c \uc720\uc6a9\ud569\ub2c8\ub2e4. \uc774 \uc0c1\ud669\uc5d0\uc11c typing.Dict \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.: from typing import Dict from fastapi import FastAPI app = FastAPI () @app . get ( \"/keyword-weights/\" , response_model = Dict [ str , float ]) async def read_keyword_weights (): return { \"foo\" : 2.3 , \"bar\" : 3.4 } \uc815\ub9ac \u00b6 \uac01\uac01\uc758 \uc0c1\ud669\uc5d0\uc11c \ub2e4\uc218\uc758 Pydantic \ubaa8\ub378\ub4e4\uc744 \uc0ac\uc6a9\ud558\uace0 \uc790\uc720\ub86d\uac8c \uc0c1\uc18d\ud558\uc2ed\uc2dc\uc624. \ub9cc\uc57d \uac1c\uccb4\uac00 \ub2e4\ub978 \"\uc0c1\ud0dc\"\ub97c \uac00\uc9c8 \uc218\ubc16\uc5d0 \uc5c6\ub2e4\uba74, \uad73\uc774 \ud558\ub098\uc758 \uac1c\uccb4\ub2f9 \ud558\ub098\uc758 \ub370\uc774\ud130 \ubaa8\ub378\uc744 \uac00\uc9c8 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. password , password_hash \ub294 \uc788\uc73c\ub098 \ube44\ubc00\ubc88\ud638\ub294 \uc5c6\ub294 \uc0ac\uc6a9\uc790 \"entity\" \uc0c1\ud669\uc774 \uadf8\ub807\uc2b5\ub2c8\ub2e4.","title":"\ucd94\uac00 \ubaa8\ub378"},{"location":"tutorial/extra-models/#_1","text":"\uc774\uc804\uc758 \uc608\uc81c\uc5d0 \uc774\uc5b4\uc11c, \uc77c\ubc18\uc801\uc73c\ub85c\ub294 \ud55c \uac00\uc9c0 \uc774\uc0c1\uc758 \uad00\uacc4 \ubaa8\ub378\uc744 \uac00\uc9c8 \uac83\uc785\ub2c8\ub2e4. \uc0ac\uc6a9\uc790 \ubaa8\ub378\uc758 \uacbd\uc6b0\uac00 \ud2b9\ud788 \uadf8\ub807\uc2b5\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74: \uc785\ub825 \ubaa8\ub378 \uc740 \ube44\ubc00\ubc88\ud638\ub97c \uac00\uc9c8 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ucd9c\ub825 \ubaa8\ub378 \uc740 \ube44\ubc00\ubc88\ud638\uac00 \uc5c6\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378 \uc740 \ud574\uc2dc \ub41c \ube44\ubc00\ubc88\ud638\uac00 \ud544\uc694\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc704\ud5d8 \uc0ac\uc6a9\uc790\uc758 \ud3c9\ubb38 \ube44\ubc00\ubc88\ud638\ub97c \uc808\ub300 \uc800\uc7a5\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624. \ud56d\uc0c1 \uac80\uc99d\ud560 \uc218 \uc788\ub294 \"\uc548\uc804\ud55c \ud574\uc2dc\"\ub85c \uc800\uc7a5\ud558\uc2ed\uc2dc\uc624. \ub9cc\uc57d \ub2f9\uc2e0\uc774 \ubaa8\ub978\ub2e4\uba74 \ubcf4\uc548 \ucc55\ud130 \uc5d0\uc11c \"\ube44\ubc00\ubc88\ud638 \ud574\uc2dc\"\uac00 \ubb34\uc5c7\uc778\uc9c0 \ubc30\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ucd94\uac00 \ubaa8\ub378"},{"location":"tutorial/extra-models/#_2","text":"\ubaa8\ub378\ub4e4\uc774 \ube44\ubc00\ubc88\ud638 \ud544\ub4dc\uc640 \uadf8\uac83\uc774 \uc0ac\uc6a9\ub418\ub294 \uc704\uce58\uc5d0\uc11c \uc5b4\ub5bb\uac8c \ubcf4\uc77c \uc218 \uc788\ub294\uc9c0\uc5d0 \ub300\ud55c \uc77c\ubc18\uc801\uc778 \uc544\uc774\ub514\uc5b4\ub97c \uc18c\uac1c\ud569\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None class UserInDB ( BaseModel ): username : str hashed_password : str email : EmailStr full_name : Union [ str , None ] = None def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved","title":"\ubcf5\ud569 \ubaa8\ub378\ub4e4"},{"location":"tutorial/extra-models/#user_indict","text":"","title":"**user_in.dict()\uc5d0 \uad00\ud574"},{"location":"tutorial/extra-models/#pydantic-dict","text":"user_in \uc740 UserIn \ud074\ub798\uc2a4\uc758 Pydantic \ubaa8\ub378\uc785\ub2c8\ub2e4. Pydantic \ubaa8\ub378\uc740 \ubaa8\ub378 \ub370\uc774\ud130\uc758 dict \ub97c \ubc18\ud658\ud558\ub294 .dict() \uba54\uc18c\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c, \ub9cc\uc57d \uc6b0\ub9ac\uac00 Pydantic \uac1d\uccb4\uc778 user_in \uc744 \uc0dd\uc131\ud574\ubcf4\uba74: user_in = UserIn ( username = \"john\" , password = \"secret\" , email = \"john.doe@example.com\" ) \uadf8\ub9ac\uace0 \uc6b0\ub9ac\ub294 \uc774\ub807\uac8c \ud638\ucd9c\ud569\ub2c8\ub2e4: user_dict = user_in . dict () \uc6b0\ub9ac\ub294 user_dict (Pydantic \ubaa8\ub378 \uac1d\uccb4 \ub300\uc2e0 dict \uc785\ub2c8\ub2e4) \ubcc0\uc218 \ub0b4\ubd80\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c dict \ub85c \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub9cc\uc57d \uc6b0\ub9ac\uac00 \uc774\ub807\uac8c \ud638\ucd9c\ud55c\ub2e4\uba74: print ( user_dict ) \uc6b0\ub9ac\ub294 \ud30c\uc774\uc36c dict \ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: { 'username' : 'john' , 'password' : 'secret' , 'email' : 'john.doe@example.com' , 'full_name' : None , }","title":"Pydantic\uc5d0\uc11c\uc758 .dict()"},{"location":"tutorial/extra-models/#dict","text":"\uc6b0\ub9ac\uac00 user_dict \uac19\uc740 dict \ub97c \uc5bb\uc5b4\uc624\uac70\ub098 **user_dict \uc758 \ud615\ud0dc\ub85c \ud568\uc218\ub098 \ud074\ub798\uc2a4\ub85c \uc804\ub2ec\ud560\ub54c, \ud30c\uc774\uc36c\uc740 \uc774\uac83\uc744 \"\ud480\uae30(unwrap)\"\ub97c \ud569\ub2c8\ub2e4. \uc774\uac83\uc740 user_dict \uc758 \ud0a4\uc640 \uac12\uc744 \ud0a4-\uac12 \uc778\uc790(arguments)\ub85c \uc9c1\uc811\uc801\uc73c\ub85c \ub118\uae41\ub2c8\ub2e4. \uadf8\ub798\uc11c, \uc704\uc5d0\uc11c \uc124\uba85\ud588\ub358 user_dict \ub85c \uacc4\uc18d \uc9c4\ud589\ud558\uaca0\uc2b5\ub2c8\ub2e4: UserInDB ( ** user_dict ) \uc544\ub798\uc640 \ub3d9\ub4f1\ud55c \uacb0\uacfc\ub97c \uc904 \uac83\uc785\ub2c8\ub2e4. UserInDB ( username = \"john\" , password = \"secret\" , email = \"john.doe@example.com\" , full_name = None , ) \ub610\ub294 \ub354 \uc815\ud655\ud558\uac8c\ub294 \ub098\uc911\uc5d0 \uc5b4\ub5a4\ub0b4\uc6a9\uc744 \ub2f4\uac8c \ub418\ub354\ub77c\ub3c4 user_dict \ub97c \uc9c1\uc811\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4: UserInDB ( username = user_dict [ \"username\" ], password = user_dict [ \"password\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], )","title":"dict\ub97c \ud480\uae30"},{"location":"tutorial/extra-models/#pydantic","text":"\uc704\uc758 \uc608\uc81c\uc5d0\uc11c\ub294 user_in.dict() \uc5d0\uc11c user_dict \ub97c \uc5bb\uc744 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc774 \ucf54\ub4dc\uc785\ub2c8\ub2e4: user_dict = user_in . dict () UserInDB ( ** user_dict ) \uc774\uac83\uacfc \ub3d9\ub4f1\ud560 \uac83\uc785\ub2c8\ub2e4: UserInDB ( ** user_in . dict ()) ... \uc65c\ub0d0\ud558\uba74 user_in.dict() \ub294 dict \uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc6b0\ub9ac\ub294 UserInDB \uc55e\uc5d0 ** \ub97c \ubd99\uc5ec\uc11c \uc804\ub2ec\ud568\uc73c\ub85c\uc368 Python\uc774 \"\ud480\uae30\"\ub97c \ud558\ub3c4\ub85d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c, \uc6b0\ub9ac\ub294 \ub610\ub2e4\ub978 Pydantic \ubaa8\ub378\uc5d0 \uc788\ub294 \ub370\uc774\ud130\uc5d0\uc11c Pydantic \ubaa8\ub378\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ub610 \ub2e4\ub978 \ub0b4\uc6a9\uc73c\ub85c\ubd80\ud130 Pydantic \ubaa8\ub378"},{"location":"tutorial/extra-models/#dict_1","text":"\uadf8\ub9ac\uace0 \ucd94\uac00 \ud0a4\uc6cc\ub4dc \uc18d\uc131\uc778 hashed_password=hashed_password \uc744 \ucd94\uac00\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4: UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) ... \uacb0\uad6d\uc5d0\ub294 \uc774\ub807\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4: UserInDB ( username = user_dict [ \"username\" ], password = user_dict [ \"password\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], hashed_password = hashed_password , ) \uacbd\uace0 \ucd94\uac00\uc801\uc778 \ud568\uc218 \uc9c0\uc6d0\uc740 \uac00\ub2a5\ud55c \ub370\uc774\ud130 \ud750\ub984\uc744 \ubcf4\uc5ec\uc8fc\ub294 \ub370\ubaa8\uc77c \ubfd0\uc774\uba70, \ub2f9\uc5f0\ud788 \uadf8 \uc5b4\ub5a4 \uc2e4\uc81c \ubcf4\uc548\ub3c4 \uc81c\uacf5\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"dict\ub97c \ud480\uae30 \uadf8\ub9ac\uace0 \ucd94\uac00 \ud0a4\uc6cc\ub4dc\ub4e4"},{"location":"tutorial/extra-models/#_3","text":"\uc911\ubcf5 \ucf54\ub4dc \uc904\uc774\uae30\ub294 FASTAPI \uc758 \ud575\uc2ec \uac1c\ub150 \uc911 \ud558\ub098\uc785\ub2c8\ub2e4. \ucf54\ub4dc \uc911\ubcf5\uc740 \ubc84\uadf8\uc758 \uac00\ub2a5\uc131, \ubcf4\uc548 \uc774\uc288, \ucf54\ub4dc \ube44\ub3d9\uae30\ud654 \ubb38\uc81c(\ud55c \uc7a5\uc18c\uc5d0\ub294 \uc5c5\ub370\uc774\ud2b8 \ud558\uc9c0\ub9cc \ub2e4\ub978 \uacf3\uc5d0\uc11c\ub294 \uadf8\ub807\uc9c0 \ubabb\ud560\ub54c) \ub4f1\uc744 \uc99d\uac00\uc2dc\ud0b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\ub7ec\ud55c \ubaa8\ub378\ub4e4\uc740 \ub9ce\uc740 \ub370\uc774\ud130\ub97c \uacf5\uc720\ud558\uace0 \ud0c0\uc785\uacfc \uc778\uc790 \uc774\ub984\ub4e4\uc744 \ubc18\ubcf5\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\uac8c \ub429\ub2c8\ub2e4. \ub354 \uc798\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\ub978 \ubaa8\ub378\ub4e4\uc758 \uae30\ucd08\uac00 \ub418\ub294 UserBase \ubaa8\ub378\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc6b0\ub9ac\ub294 \uc774 \uc778\uc790\ub4e4(\ud0c0\uc785 \uc120\uc5b8, \uac80\uc99d \ub4f1)\uc744 \uc0c1\uc18d\ubc1b\uc740 \ubaa8\ub378\uc778 \uc11c\ube0c\ud074\ub798\uc2a4\ub97c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \ub370\uc774\ud130\uc758 \ubcc0\ud658, \uac80\uc99d, \ubb38\uc11c\ud654 \ub4f1\uc740 \uc5ec\uc804\ud788 \uc815\uc0c1\uc801\uc73c\ub85c \ub3d9\uc791\ud560 \uac83\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ubc29\ubc95\uc73c\ub85c \uc6b0\ub9ac\ub294 \ubaa8\ub378\ub4e4 \uc0ac\uc774\uc758 \ucc28\uc774\ub9cc\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.(\ud3c9\ubb38 password \uc640 \ud568\uaed8, hashed_password \uc640 \ud568\uaed8, \ube44\ubc00\ubc88\ud638\ub294 \uc5c6\uc774) from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserBase ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None class UserIn ( UserBase ): password : str class UserOut ( UserBase ): pass class UserInDB ( UserBase ): hashed_password : str def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved","title":"\uc911\ubcf5 \uc904\uc774\uae30"},{"location":"tutorial/extra-models/#union-anyof","text":"Union \uc744 \ud1b5\ud574 \ub450 \uac00\uc9c0 \ud0c0\uc785\uc758 \uc751\ub2f5\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8 \ub9d0\uc740, \uc751\ub2f5\uc740 \uadf8 \ub450 \uac00\uc9c0 \uc911 \uc544\ubb34\uac70\ub098 \ub420 \uc218 \uc788\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \uc774\ub294 OpenAPI\uc5d0\uc11c anyOf \ub85c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ud558\uae30 \uc704\ud574\uc11c\ub294 \ud45c\uc900 \ud30c\uc774\uc36c \ud0c0\uc785 \ud78c\ud2b8 typing.Union \ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624: \ucc38\uace0 Union \uc744 \uc120\uc5b8\ud560 \ub54c, \uac00\uc7a5 \ud2b9\uc815\ud55c \ud0c0\uc785\uc744 \uccab \ubc88\uc9f8\ub85c \ud3ec\ud568\ud558\uace0, \ub35c \ud2b9\uc815\ud55c \ud0c0\uc785\uc744 \ub4a4\uc5d0 \ubd99\uc774\uc2ed\uc2dc\uc624. \uc608\ub97c \ub4e4\uc5b4, Union[PlaneItem, CarItem] \uc5d0\uc11c \ub354 \ud2b9\uc815\ud55c PlaneItem \uc740 CarItem \ubcf4\ub2e4 \ub354 \uc55e\uc5d0 \uc635\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class BaseItem ( BaseModel ): description : str type : str class CarItem ( BaseItem ): type = \"car\" class PlaneItem ( BaseItem ): type = \"plane\" size : int items = { \"item1\" : { \"description\" : \"All my friends drive a low rider\" , \"type\" : \"car\" }, \"item2\" : { \"description\" : \"Music is my aeroplane, it's my aeroplane\" , \"type\" : \"plane\" , \"size\" : 5 , }, } @app . get ( \"/items/ {item_id} \" , response_model = Union [ PlaneItem , CarItem ]) async def read_item ( item_id : str ): return items [ item_id ]","title":"Union \ub610\ub294 anyOf"},{"location":"tutorial/extra-models/#_4","text":"\uac19\uc740 \ubc29\ubc95\uc73c\ub85c, \uac1d\uccb4\uc758 \ub9ac\uc2a4\ud2b8\ub97c \uc751\ub2f5\uc73c\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc744 \uc704\ud574\uc11c \ud45c\uc900 \ud30c\uc774\uc36c typing.List \ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624: from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str items = [ { \"name\" : \"Foo\" , \"description\" : \"There comes my hero\" }, { \"name\" : \"Red\" , \"description\" : \"It's my aeroplane\" }, ] @app . get ( \"/items/\" , response_model = List [ Item ]) async def read_items (): return items","title":"\ubaa8\ub378\ub4e4\uc758 \ub9ac\uc2a4\ud2b8"},{"location":"tutorial/extra-models/#dict_2","text":"Pydantic \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \ub2e8\uc21c\ud788 \ud0a4\uc640 \uac12\uc758 \ud0c0\uc785\uc73c\ub85c \uc120\uc5b8\ud558\ub294 \ud3c9\ubc94\ud55c \uc784\uc758\uc758 dict \ub85c \uc751\ub2f5\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubbf8\ub9ac \uc720\ud6a8\ud55c \ud544\ub4dc\uc640 \uc18d\uc131\uc758 \uc774\ub984(\uc774\uac83\uc740 \uc544\ub9c8 Pydantic \ubaa8\ub378\uc5d0 \ud544\uc694\ud560 \uac83\uc785\ub2c8\ub2e4)\uc744 \uc54c\uc9c0 \ubabb\ud560\ub54c \uc720\uc6a9\ud569\ub2c8\ub2e4. \uc774 \uc0c1\ud669\uc5d0\uc11c typing.Dict \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.: from typing import Dict from fastapi import FastAPI app = FastAPI () @app . get ( \"/keyword-weights/\" , response_model = Dict [ str , float ]) async def read_keyword_weights (): return { \"foo\" : 2.3 , \"bar\" : 3.4 }","title":"\uc784\uc758\uc758 dict\ub85c \uc751\ub2f5\ud558\uae30"},{"location":"tutorial/extra-models/#_5","text":"\uac01\uac01\uc758 \uc0c1\ud669\uc5d0\uc11c \ub2e4\uc218\uc758 Pydantic \ubaa8\ub378\ub4e4\uc744 \uc0ac\uc6a9\ud558\uace0 \uc790\uc720\ub86d\uac8c \uc0c1\uc18d\ud558\uc2ed\uc2dc\uc624. \ub9cc\uc57d \uac1c\uccb4\uac00 \ub2e4\ub978 \"\uc0c1\ud0dc\"\ub97c \uac00\uc9c8 \uc218\ubc16\uc5d0 \uc5c6\ub2e4\uba74, \uad73\uc774 \ud558\ub098\uc758 \uac1c\uccb4\ub2f9 \ud558\ub098\uc758 \ub370\uc774\ud130 \ubaa8\ub378\uc744 \uac00\uc9c8 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. password , password_hash \ub294 \uc788\uc73c\ub098 \ube44\ubc00\ubc88\ud638\ub294 \uc5c6\ub294 \uc0ac\uc6a9\uc790 \"entity\" \uc0c1\ud669\uc774 \uadf8\ub807\uc2b5\ub2c8\ub2e4.","title":"\uc815\ub9ac"},{"location":"tutorial/first-steps/","text":"\uccab\uac78\uc74c \u00b6 \uac00\uc7a5 \ub2e8\uc21c\ud55c FastAPI \ud30c\uc77c\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ubcf4\uc77c \uac81\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \uc704\ub97c main.py \uc5d0 \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \ub77c\uc774\ube0c \uc11c\ubc84\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. \ucc38\uace0 uvicorn main:app \uba85\ub839\uc740 \ub2e4\uc74c\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4: main : \ud30c\uc77c main.py (\ud30c\uc774\uc36c \"\ubaa8\ub4c8\"). app : main.py \ub0b4\ubd80\uc758 app = FastAPI() \uc904\uc5d0\uc11c \uc0dd\uc131\ud55c \uc624\ube0c\uc81d\ud2b8. --reload : \ucf54\ub4dc \ubcc0\uacbd \ud6c4 \uc11c\ubc84 \uc7ac\uc2dc\uc791. \uac1c\ubc1c\uc5d0\ub9cc \uc0ac\uc6a9. \ucd9c\ub825\uc5d0 \uc544\ub798\uc640 \uac19\uc740 \uc904\uc774 \uc788\uc2b5\ub2c8\ub2e4: INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \ud574\ub2f9 \uc904\uc740 \ub85c\uceec\uc5d0\uc11c \uc571\uc774 \uc11c\ube44\uc2a4\ub418\ub294 URL\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \ud655\uc778\ud558\uae30 \u00b6 \ube0c\ub77c\uc6b0\uc800\ub85c http://127.0.0.1:8000 \ub97c \uc5ec\uc2ed\uc2dc\uc624. \uc544\ub798\uc640 \uac19\uc740 JSON \uc751\ub2f5\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"message\" : \"Hello World\" } \ub300\ud654\ud615 API \ubb38\uc11c \u00b6 \uc774\uc81c http://127.0.0.1:8000/docs \ub85c \uac00\ubd05\ub2c8\ub2e4. \uc790\ub3d9 \ub300\ud654\ud615 API \ubb38\uc11c\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4 ( Swagger UI \uc81c\uacf5): \ub300\uc548 API \ubb38\uc11c \u00b6 \uadf8\ub9ac\uace0 \uc774\uc81c, http://127.0.0.1:8000/redoc \ub85c \uac00\ubd05\ub2c8\ub2e4. \ub300\uc548 \uc790\ub3d9 \ubb38\uc11c\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4 ( ReDoc \uc81c\uacf5): OpenAPI \u00b6 FastAPI \ub294 API\ub97c \uc815\uc758\ud558\uae30 \uc704\ud55c OpenAPI \ud45c\uc900\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc5ec\ub7ec\ubd84\uc758 \ubaa8\ub4e0 API\ub97c \uc774\uc6a9\ud574 \"\uc2a4\ud0a4\ub9c8\"\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \"\uc2a4\ud0a4\ub9c8\" \u00b6 \"\uc2a4\ud0a4\ub9c8\"\ub294 \ubb34\uc5b8\uac00\uc758 \uc815\uc758 \ub610\ub294 \uc124\uba85\uc785\ub2c8\ub2e4. \uc774\ub97c \uad6c\ud604\ud558\ub294 \ucf54\ub4dc\uac00 \uc544\ub2c8\ub77c \ucd94\uc0c1\uc801\uc778 \uc124\uba85\uc77c \ubfd0\uc785\ub2c8\ub2e4. API \"\uc2a4\ud0a4\ub9c8\" \u00b6 \uc774 \uacbd\uc6b0, OpenAPI \ub294 API\uc758 \uc2a4\ud0a4\ub9c8\ub97c \uc5b4\ub5bb\uac8c \uc815\uc758\ud558\ub294\uc9c0 \uc9c0\uc2dc\ud558\ub294 \uaddc\uaca9\uc785\ub2c8\ub2e4. \uc774 \uc2a4\ud0a4\ub9c8 \uc815\uc758\ub294 API \uacbd\ub85c, \uac00\ub2a5\ud55c \ub9e4\uac1c\ubcc0\uc218 \ub4f1\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4. \ub370\uc774\ud130 \"\uc2a4\ud0a4\ub9c8\" \u00b6 \"\uc2a4\ud0a4\ub9c8\"\ub77c\ub294 \uc6a9\uc5b4\ub294 JSON\ucc98\ub7fc \uc5b4\ub5a4 \ub370\uc774\ud130\uc758 \ud615\ud0dc\ub97c \ub098\ud0c0\ub0bc \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uacbd\uc6b0 JSON \uc18d\uc131, \uac00\uc9c0\uace0 \uc788\ub294 \ub370\uc774\ud130 \ud0c0\uc785 \ub4f1\uc744 \ub73b\ud569\ub2c8\ub2e4. OpenAPI\uc640 JSON \uc2a4\ud0a4\ub9c8 \u00b6 OpenAPI\ub294 API\uc5d0 \ub300\ud55c API \uc2a4\ud0a4\ub9c8\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. \ub610\ud55c \uc774 \uc2a4\ud0a4\ub9c8\uc5d0\ub294 JSON \ub370\uc774\ud130 \uc2a4\ud0a4\ub9c8\uc758 \ud45c\uc900\uc778 JSON \uc2a4\ud0a4\ub9c8 \ub97c \uc0ac\uc6a9\ud558\uc5ec API\uc5d0\uc11c \ubcf4\ub0b4\uace0 \ubc1b\uc740 \ub370\uc774\ud130\uc758 \uc815\uc758(\ub610\ub294 \"\uc2a4\ud0a4\ub9c8\")\ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4. openapi.json \ud655\uc778 \u00b6 \uac00\uacf5\ub418\uc9c0 \uc54a\uc740 OpenAPI \uc2a4\ud0a4\ub9c8\uac00 \uc5b4\ub5bb\uac8c \uc0dd\uacbc\ub294\uc9c0 \uad81\uae08\ud558\ub2e4\uba74, FastAPI\ub294 \uc790\ub3d9\uc73c\ub85c API\uc758 \uc124\uba85\uacfc \ud568\uaed8 JSON (\uc2a4\ud0a4\ub9c8)\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c \uc9c1\uc811 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: http://127.0.0.1:8000/openapi.json . \ub2e4\uc74c\uacfc \uac19\uc774 \uc2dc\uc791\ud558\ub294 JSON\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"openapi\" : \"3.0.2\" , \"info\" : { \"title\" : \"FastAPI\" , \"version\" : \"0.1.0\" }, \"paths\" : { \"/items/\" : { \"get\" : { \"responses\" : { \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { ... OpenAPI\uc758 \uc6a9\ub3c4 \u00b6 OpenAPI \uc2a4\ud0a4\ub9c8\ub294 \ud3ec\ud568\ub41c \ub450 \uac1c\uc758 \ub300\ud654\ud615 \ubb38\uc11c \uc2dc\uc2a4\ud15c\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 OpenAPI\uc758 \ubaa8\ub4e0 \uac83\uc744 \uae30\ubc18\uc73c\ub85c \ud558\ub294 \uc218\uc2ed \uac00\uc9c0 \ub300\uc548\uc774 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub85c \ube4c\ub4dc\ud55c \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 \uc774\ub7ec\ud55c \ub300\uc548\uc744 \uc27d\uac8c \ucd94\uac00 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. API\uc640 \ud1b5\uc2e0\ud558\ub294 \ud074\ub77c\uc774\uc5b8\ud2b8\ub97c \uc704\ud574 \ucf54\ub4dc\ub97c \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ud558\ub294 \ub370\ub3c4 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub85c \ud504\ub860\ud2b8\uc5d4\ub4dc, \ubaa8\ubc14\uc77c, IoT \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ub2e8\uacc4\ubcc4 \uc694\uc57d \u00b6 1 \ub2e8\uacc4: FastAPI \uc784\ud3ec\ud2b8 \u00b6 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } FastAPI \ub294 API\uc5d0 \ub300\ud55c \ubaa8\ub4e0 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\ub294 \ud30c\uc774\uc36c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uae30\uc220 \uc138\ubd80\uc0ac\ud56d FastAPI \ub294 Starlette \ub97c \uc9c1\uc811 \uc0c1\uc18d\ud558\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. FastAPI \ub85c Starlette \uc758 \ubaa8\ub4e0 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 2 \ub2e8\uacc4: FastAPI \"\uc778\uc2a4\ud134\uc2a4\" \uc0dd\uc131 \u00b6 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \uc5ec\uae30 \uc788\ub294 app \ubcc0\uc218\ub294 FastAPI \ud074\ub798\uc2a4\uc758 \"\uc778\uc2a4\ud134\uc2a4\"\uac00 \ub429\ub2c8\ub2e4. \uc774\uac83\uc740 \ubaa8\ub4e0 API\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud55c \uc0c1\ud638\uc791\uc6a9\uc758 \uc8fc\uc694 \uc9c0\uc810\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. \uc774 app \uc740 \ub2e4\uc74c \uba85\ub839\uc5d0\uc11c uvicorn \uc774 \ucc38\uc870\ud558\uace0 \uac83\uacfc \ub3d9\uc77c\ud569\ub2c8\ub2e4: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \uc544\ub798\ucc98\ub7fc \uc571\uc744 \ub9cc\ub4e0\ub2e4\uba74: from fastapi import FastAPI my_awesome_api = FastAPI () @my_awesome_api . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \uc774\ub97c main.py \ud30c\uc77c\uc5d0 \ub123\uace0, uvicorn \uc744 \uc544\ub798\ucc98\ub7fc \ud638\ucd9c\ud574\uc57c \ud569\ub2c8\ub2e4: $ uvicorn main:my_awesome_api --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) 3 \ub2e8\uacc4: \uacbd\ub85c \ub3d9\uc791 \uc0dd\uc131 \u00b6 \uacbd\ub85c \u00b6 \uc5ec\uae30\uc11c \"\uacbd\ub85c\"\ub294 \uccab \ubc88\uc9f8 / \uc5d0\uc11c \uc2dc\uc791\ud558\ub294 URL\uc758 \ub9c8\uc9c0\ub9c9 \ubd80\ubd84\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc544\ub798\uc640 \uac19\uc740 URL\uc5d0\uc11c: https://example.com/items/foo ...\uacbd\ub85c\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: /items/foo \uc815\ubcf4 \"\uacbd\ub85c\"\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \"\uc564\ub4dc\ud3ec\uc778\ud2b8\" \ub610\ub294 \"\ub77c\uc6b0\ud2b8\"\ub77c\uace0\ub3c4 \ubd88\ub9bd\ub2c8\ub2e4. API\ub97c \ube4c\ub4dc\ud558\ub294 \ub3d9\uc548 \"\uacbd\ub85c\"\ub294 \"\uad00\uc2ec\uc0ac\"\uc640 \"\ub9ac\uc18c\uc2a4\"\ub97c \ubd84\ub9ac\ud558\ub294 \uc8fc\uc694 \ubc29\ubc95\uc785\ub2c8\ub2e4. \ub3d9\uc791 \u00b6 \uc5ec\uae30\uc11c \"\ub3d9\uc791(Operation)\"\uc740 HTTP \"\uba54\uc18c\ub4dc\" \uc911 \ud558\ub098\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \ub2e4\uc74c \uc911 \ud558\ub098\uc774\uba70: POST GET PUT DELETE ...\uc774\uad6d\uc801\uc778 \uac83\ub4e4\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: OPTIONS HEAD PATCH TRACE HTTP \ud504\ub85c\ud1a0\ucf5c\uc5d0\uc11c\ub294 \uc774\ub7ec\ud55c \"\uba54\uc18c\ub4dc\"\ub97c \ud558\ub098(\ub610\ub294 \uc774\uc0c1) \uc0ac\uc6a9\ud558\uc5ec \uac01 \uacbd\ub85c\uc640 \ud1b5\uc2e0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. API\ub97c \ube4c\ub4dc\ud558\ub294 \ub3d9\uc548 \uc77c\ubc18\uc801\uc73c\ub85c \ud2b9\uc815 \ud589\ub3d9\uc744 \uc218\ud589\ud558\uae30 \uc704\ud574 \ud2b9\uc815 HTTP \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \ub2e4\uc74c\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4: POST : \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574. GET : \ub370\uc774\ud130\ub97c \uc77d\uae30 \uc704\ud574. PUT : \ub370\uc774\ud130\ub97c \uc5c5\ub370\uc774\ud2b8\ud558\uae30 \uc704\ud574. DELETE : \ub370\uc774\ud130\ub97c \uc0ad\uc81c\ud558\uae30 \uc704\ud574. \uadf8\ub798\uc11c OpenAPI\uc5d0\uc11c\ub294 \uac01 HTTP \uba54\uc18c\ub4dc\ub4e4\uc744 \"\ub3d9\uc791\"\uc774\ub77c \ubd80\ub985\ub2c8\ub2e4. \uc774\uc81c\ubd80\ud130 \uc6b0\ub9ac\ub294 \uba54\uc18c\ub4dc\ub97c \" \ub3d9\uc791 \"\uc774\ub77c\uace0\ub3c4 \ubd80\ub97c\uac81\ub2c8\ub2e4. \uacbd\ub85c \ub3d9\uc791 \ub370\ucf54\ub808\uc774\ud130 \uc815\uc758 \u00b6 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } @app.get(\"/\") \uc740 FastAPI \uc5d0\uac8c \ubc14\ub85c \uc544\ub798\uc5d0 \uc788\ub294 \ud568\uc218\uac00 \ub2e4\uc74c\uc73c\ub85c \uc774\ub3d9\ud558\ub294 \uc694\uccad\uc744 \ucc98\ub9ac\ud55c\ub2e4\ub294 \uac83\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. \uacbd\ub85c / get \ub3d9\uc791 \uc0ac\uc6a9 @decorator \uc815\ubcf4 \uc774 @something \ubb38\ubc95\uc740 \ud30c\uc774\uc36c\uc5d0\uc11c \"\ub370\ucf54\ub808\uc774\ud130\"\ub77c \ubd80\ub985\ub2c8\ub2e4. \ud568\uc218 \ub9e8 \uc704\uc5d0 \ub193\uc2b5\ub2c8\ub2e4. \ub9c8\uce58 \uc608\uc05c \uc7a5\uc2dd\uc6a9(Decorative) \ubaa8\uc790\ucc98\ub7fc(\uac1c\uc778\uc801\uc73c\ub85c \uc774 \uc6a9\uc5b4\uac00 \uc5ec\uae30\uc11c \uc720\ub798\ud55c\uac70 \uac19\uc2b5\ub2c8\ub2e4). \"\ub370\ucf54\ub808\uc774\ud130\" \uc544\ub798 \uc788\ub294 \ud568\uc218\ub97c \ubc1b\uace0 \uadf8\uac78 \uc774\uc6a9\ud574 \ubb34\uc5b8\uac00 \ud569\ub2c8\ub2e4. \uc6b0\ub9ac\uc758 \uacbd\uc6b0, \uc774 \ub370\ucf54\ub808\uc774\ud130\ub294 FastAPI \uc5d0\uac8c \uc544\ub798 \ud568\uc218\uac00 \uacbd\ub85c / \uc5d0 \ud574\ub2f9\ud558\ub294 get \ub3d9\uc791 \ud558\ub77c\uace0 \uc54c\ub824\uc90d\ub2c8\ub2e4. \uc774\uac83\uc774 \" \uacbd\ub85c \ub3d9\uc791 \ub370\ucf54\ub808\uc774\ud130 \"\uc785\ub2c8\ub2e4. \ub2e4\ub978 \ub3d9\uc791\ub3c4 \uc4f8 \uc218 \uc788\uc2b5\ub2c8\ub2e4: @app.post() @app.put() @app.delete() \uc775\uc219\ud558\uc9c0 \uc54a\uc740 \uac83\ub4e4\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: @app.options() @app.head() @app.patch() @app.trace() \ud301 \uac01 \ub3d9\uc791(HTTP \uba54\uc18c\ub4dc)\uc744 \uc6d0\ud558\ub294 \ub300\ub85c \uc0ac\uc6a9\ud574\ub3c4 \ub429\ub2c8\ub2e4. FastAPI \ub294 \ud2b9\uc815 \uc758\ubbf8\ub97c \uac15\uc81c\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c \uc815\ubcf4\ub294 \uc9c0\uce68\uc11c\uc77c\ubfd0 \uc694\uad6c\uc0ac\ud56d\uc774 \uc544\ub2d9\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 GraphQL\uc744 \uc0ac\uc6a9\ud560\ub54c \uc77c\ubc18\uc801\uc73c\ub85c POST \ub3d9\uc791\ub9cc \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub4e0 \ud589\ub3d9\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. 4 \ub2e8\uacc4: \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \uc815\uc758 \u00b6 \ub2e4\uc74c\uc740 \uc6b0\ub9ac\uc758 \" \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \"\uc785\ub2c8\ub2e4: \uacbd\ub85c : \ub294 / \uc785\ub2c8\ub2e4. \ub3d9\uc791 : \uc740 get \uc785\ub2c8\ub2e4. \ud568\uc218 : \ub294 \"\ub370\ucf54\ub808\uc774\ud130\" \uc544\ub798\uc5d0 \uc788\ub294 \ud568\uc218\uc785\ub2c8\ub2e4 ( @app.get(\"/\") \uc544\ub798). from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \uc774\uac83\uc740 \ud30c\uc774\uc36c \ud568\uc218\uc785\ub2c8\ub2e4. GET \ub3d9\uc791\uc744 \uc0ac\uc6a9\ud558\uc5ec URL \" / \"\uc5d0 \ub300\ud55c \uc694\uccad\uc744 \ubc1b\uc744 \ub54c\ub9c8\ub2e4 FastAPI \uc5d0 \uc758\ud574 \ud638\ucd9c\ub429\ub2c8\ub2e4. \uc704\uc758 \uacbd\uc6b0 async \ud568\uc218\uc785\ub2c8\ub2e4. async def \ub300\uc2e0 \uc77c\ubc18 \ud568\uc218\ub85c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } Note \ucc28\uc774\uc810\uc744 \ubaa8\ub974\uaca0\ub2e4\uba74 Async: \"In a hurry?\" \uc744 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. 5 \ub2e8\uacc4: \ucf58\ud150\uce20 \ubc18\ud658 \u00b6 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } dict , list , \ub2e8\uc77c\uac12\uc744 \uac00\uc9c4 str , int \ub4f1\uc744 \ubc18\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Pydantic \ubaa8\ub378\uc744 \ubc18\ud658\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4(\ub098\uc911\uc5d0 \ub354 \uc790\uc138\ud788 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4). JSON\uc73c\ub85c \uc790\ub3d9 \ubcc0\ud658\ub418\ub294 \uac1d\uccb4\ub4e4\uacfc \ubaa8\ub378\ub4e4\uc774 \ub9ce\uc774 \uc788\uc2b5\ub2c8\ub2e4(ORM \ub4f1\uc744 \ud3ec\ud568\ud558\uc5ec). \uac00\uc7a5 \ub9c8\uc74c\uc5d0 \ub4dc\ub294 \uac83\uc744 \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624, \uc774\ubbf8 \uc9c0\uc6d0\ub418\uace0 \uc788\uc744 \uac81\ub2c8\ub2e4. \uc694\uc57d \u00b6 FastAPI \uc784\ud3ec\ud2b8. app \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131. ( @app.get(\"/\") \ucc98\ub7fc) \uacbd\ub85c \ub3d9\uc791 \ub370\ucf54\ub808\uc774\ud130 \uc791\uc131. (\uc704\uc5d0 \uc788\ub294 def root(): ... \ucc98\ub7fc) \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \uc791\uc131. ( uvicorn main:app --reload \ucc98\ub7fc) \uac1c\ubc1c \uc11c\ubc84 \uc2e4\ud589.","title":"\uccab\uac78\uc74c"},{"location":"tutorial/first-steps/#_1","text":"\uac00\uc7a5 \ub2e8\uc21c\ud55c FastAPI \ud30c\uc77c\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \ubcf4\uc77c \uac81\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \uc704\ub97c main.py \uc5d0 \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \ub77c\uc774\ube0c \uc11c\ubc84\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. \ucc38\uace0 uvicorn main:app \uba85\ub839\uc740 \ub2e4\uc74c\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4: main : \ud30c\uc77c main.py (\ud30c\uc774\uc36c \"\ubaa8\ub4c8\"). app : main.py \ub0b4\ubd80\uc758 app = FastAPI() \uc904\uc5d0\uc11c \uc0dd\uc131\ud55c \uc624\ube0c\uc81d\ud2b8. --reload : \ucf54\ub4dc \ubcc0\uacbd \ud6c4 \uc11c\ubc84 \uc7ac\uc2dc\uc791. \uac1c\ubc1c\uc5d0\ub9cc \uc0ac\uc6a9. \ucd9c\ub825\uc5d0 \uc544\ub798\uc640 \uac19\uc740 \uc904\uc774 \uc788\uc2b5\ub2c8\ub2e4: INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \ud574\ub2f9 \uc904\uc740 \ub85c\uceec\uc5d0\uc11c \uc571\uc774 \uc11c\ube44\uc2a4\ub418\ub294 URL\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.","title":"\uccab\uac78\uc74c"},{"location":"tutorial/first-steps/#_2","text":"\ube0c\ub77c\uc6b0\uc800\ub85c http://127.0.0.1:8000 \ub97c \uc5ec\uc2ed\uc2dc\uc624. \uc544\ub798\uc640 \uac19\uc740 JSON \uc751\ub2f5\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"message\" : \"Hello World\" }","title":"\ud655\uc778\ud558\uae30"},{"location":"tutorial/first-steps/#api","text":"\uc774\uc81c http://127.0.0.1:8000/docs \ub85c \uac00\ubd05\ub2c8\ub2e4. \uc790\ub3d9 \ub300\ud654\ud615 API \ubb38\uc11c\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4 ( Swagger UI \uc81c\uacf5):","title":"\ub300\ud654\ud615 API \ubb38\uc11c"},{"location":"tutorial/first-steps/#api_1","text":"\uadf8\ub9ac\uace0 \uc774\uc81c, http://127.0.0.1:8000/redoc \ub85c \uac00\ubd05\ub2c8\ub2e4. \ub300\uc548 \uc790\ub3d9 \ubb38\uc11c\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4 ( ReDoc \uc81c\uacf5):","title":"\ub300\uc548 API \ubb38\uc11c"},{"location":"tutorial/first-steps/#openapi","text":"FastAPI \ub294 API\ub97c \uc815\uc758\ud558\uae30 \uc704\ud55c OpenAPI \ud45c\uc900\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc5ec\ub7ec\ubd84\uc758 \ubaa8\ub4e0 API\ub97c \uc774\uc6a9\ud574 \"\uc2a4\ud0a4\ub9c8\"\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.","title":"OpenAPI"},{"location":"tutorial/first-steps/#_3","text":"\"\uc2a4\ud0a4\ub9c8\"\ub294 \ubb34\uc5b8\uac00\uc758 \uc815\uc758 \ub610\ub294 \uc124\uba85\uc785\ub2c8\ub2e4. \uc774\ub97c \uad6c\ud604\ud558\ub294 \ucf54\ub4dc\uac00 \uc544\ub2c8\ub77c \ucd94\uc0c1\uc801\uc778 \uc124\uba85\uc77c \ubfd0\uc785\ub2c8\ub2e4.","title":"\"\uc2a4\ud0a4\ub9c8\""},{"location":"tutorial/first-steps/#api_2","text":"\uc774 \uacbd\uc6b0, OpenAPI \ub294 API\uc758 \uc2a4\ud0a4\ub9c8\ub97c \uc5b4\ub5bb\uac8c \uc815\uc758\ud558\ub294\uc9c0 \uc9c0\uc2dc\ud558\ub294 \uaddc\uaca9\uc785\ub2c8\ub2e4. \uc774 \uc2a4\ud0a4\ub9c8 \uc815\uc758\ub294 API \uacbd\ub85c, \uac00\ub2a5\ud55c \ub9e4\uac1c\ubcc0\uc218 \ub4f1\uc744 \ud3ec\ud568\ud569\ub2c8\ub2e4.","title":"API \"\uc2a4\ud0a4\ub9c8\""},{"location":"tutorial/first-steps/#_4","text":"\"\uc2a4\ud0a4\ub9c8\"\ub77c\ub294 \uc6a9\uc5b4\ub294 JSON\ucc98\ub7fc \uc5b4\ub5a4 \ub370\uc774\ud130\uc758 \ud615\ud0dc\ub97c \ub098\ud0c0\ub0bc \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uacbd\uc6b0 JSON \uc18d\uc131, \uac00\uc9c0\uace0 \uc788\ub294 \ub370\uc774\ud130 \ud0c0\uc785 \ub4f1\uc744 \ub73b\ud569\ub2c8\ub2e4.","title":"\ub370\uc774\ud130 \"\uc2a4\ud0a4\ub9c8\""},{"location":"tutorial/first-steps/#openapi-json","text":"OpenAPI\ub294 API\uc5d0 \ub300\ud55c API \uc2a4\ud0a4\ub9c8\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. \ub610\ud55c \uc774 \uc2a4\ud0a4\ub9c8\uc5d0\ub294 JSON \ub370\uc774\ud130 \uc2a4\ud0a4\ub9c8\uc758 \ud45c\uc900\uc778 JSON \uc2a4\ud0a4\ub9c8 \ub97c \uc0ac\uc6a9\ud558\uc5ec API\uc5d0\uc11c \ubcf4\ub0b4\uace0 \ubc1b\uc740 \ub370\uc774\ud130\uc758 \uc815\uc758(\ub610\ub294 \"\uc2a4\ud0a4\ub9c8\")\ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4.","title":"OpenAPI\uc640 JSON \uc2a4\ud0a4\ub9c8"},{"location":"tutorial/first-steps/#openapijson","text":"\uac00\uacf5\ub418\uc9c0 \uc54a\uc740 OpenAPI \uc2a4\ud0a4\ub9c8\uac00 \uc5b4\ub5bb\uac8c \uc0dd\uacbc\ub294\uc9c0 \uad81\uae08\ud558\ub2e4\uba74, FastAPI\ub294 \uc790\ub3d9\uc73c\ub85c API\uc758 \uc124\uba85\uacfc \ud568\uaed8 JSON (\uc2a4\ud0a4\ub9c8)\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c \uc9c1\uc811 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: http://127.0.0.1:8000/openapi.json . \ub2e4\uc74c\uacfc \uac19\uc774 \uc2dc\uc791\ud558\ub294 JSON\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"openapi\" : \"3.0.2\" , \"info\" : { \"title\" : \"FastAPI\" , \"version\" : \"0.1.0\" }, \"paths\" : { \"/items/\" : { \"get\" : { \"responses\" : { \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { ...","title":"openapi.json \ud655\uc778"},{"location":"tutorial/first-steps/#openapi_1","text":"OpenAPI \uc2a4\ud0a4\ub9c8\ub294 \ud3ec\ud568\ub41c \ub450 \uac1c\uc758 \ub300\ud654\ud615 \ubb38\uc11c \uc2dc\uc2a4\ud15c\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 OpenAPI\uc758 \ubaa8\ub4e0 \uac83\uc744 \uae30\ubc18\uc73c\ub85c \ud558\ub294 \uc218\uc2ed \uac00\uc9c0 \ub300\uc548\uc774 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub85c \ube4c\ub4dc\ud55c \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc5d0 \uc774\ub7ec\ud55c \ub300\uc548\uc744 \uc27d\uac8c \ucd94\uac00 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. API\uc640 \ud1b5\uc2e0\ud558\ub294 \ud074\ub77c\uc774\uc5b8\ud2b8\ub97c \uc704\ud574 \ucf54\ub4dc\ub97c \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ud558\ub294 \ub370\ub3c4 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub85c \ud504\ub860\ud2b8\uc5d4\ub4dc, \ubaa8\ubc14\uc77c, IoT \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc774 \uc788\uc2b5\ub2c8\ub2e4.","title":"OpenAPI\uc758 \uc6a9\ub3c4"},{"location":"tutorial/first-steps/#_5","text":"","title":"\ub2e8\uacc4\ubcc4 \uc694\uc57d"},{"location":"tutorial/first-steps/#1-fastapi","text":"from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } FastAPI \ub294 API\uc5d0 \ub300\ud55c \ubaa8\ub4e0 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\ub294 \ud30c\uc774\uc36c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uae30\uc220 \uc138\ubd80\uc0ac\ud56d FastAPI \ub294 Starlette \ub97c \uc9c1\uc811 \uc0c1\uc18d\ud558\ub294 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. FastAPI \ub85c Starlette \uc758 \ubaa8\ub4e0 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"1 \ub2e8\uacc4: FastAPI \uc784\ud3ec\ud2b8"},{"location":"tutorial/first-steps/#2-fastapi","text":"from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \uc5ec\uae30 \uc788\ub294 app \ubcc0\uc218\ub294 FastAPI \ud074\ub798\uc2a4\uc758 \"\uc778\uc2a4\ud134\uc2a4\"\uac00 \ub429\ub2c8\ub2e4. \uc774\uac83\uc740 \ubaa8\ub4e0 API\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud55c \uc0c1\ud638\uc791\uc6a9\uc758 \uc8fc\uc694 \uc9c0\uc810\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. \uc774 app \uc740 \ub2e4\uc74c \uba85\ub839\uc5d0\uc11c uvicorn \uc774 \ucc38\uc870\ud558\uace0 \uac83\uacfc \ub3d9\uc77c\ud569\ub2c8\ub2e4: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \uc544\ub798\ucc98\ub7fc \uc571\uc744 \ub9cc\ub4e0\ub2e4\uba74: from fastapi import FastAPI my_awesome_api = FastAPI () @my_awesome_api . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \uc774\ub97c main.py \ud30c\uc77c\uc5d0 \ub123\uace0, uvicorn \uc744 \uc544\ub798\ucc98\ub7fc \ud638\ucd9c\ud574\uc57c \ud569\ub2c8\ub2e4: $ uvicorn main:my_awesome_api --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"2 \ub2e8\uacc4: FastAPI \"\uc778\uc2a4\ud134\uc2a4\" \uc0dd\uc131"},{"location":"tutorial/first-steps/#3","text":"","title":"3 \ub2e8\uacc4: \uacbd\ub85c \ub3d9\uc791 \uc0dd\uc131"},{"location":"tutorial/first-steps/#_6","text":"\uc5ec\uae30\uc11c \"\uacbd\ub85c\"\ub294 \uccab \ubc88\uc9f8 / \uc5d0\uc11c \uc2dc\uc791\ud558\ub294 URL\uc758 \ub9c8\uc9c0\ub9c9 \ubd80\ubd84\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc544\ub798\uc640 \uac19\uc740 URL\uc5d0\uc11c: https://example.com/items/foo ...\uacbd\ub85c\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: /items/foo \uc815\ubcf4 \"\uacbd\ub85c\"\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \"\uc564\ub4dc\ud3ec\uc778\ud2b8\" \ub610\ub294 \"\ub77c\uc6b0\ud2b8\"\ub77c\uace0\ub3c4 \ubd88\ub9bd\ub2c8\ub2e4. API\ub97c \ube4c\ub4dc\ud558\ub294 \ub3d9\uc548 \"\uacbd\ub85c\"\ub294 \"\uad00\uc2ec\uc0ac\"\uc640 \"\ub9ac\uc18c\uc2a4\"\ub97c \ubd84\ub9ac\ud558\ub294 \uc8fc\uc694 \ubc29\ubc95\uc785\ub2c8\ub2e4.","title":"\uacbd\ub85c"},{"location":"tutorial/first-steps/#_7","text":"\uc5ec\uae30\uc11c \"\ub3d9\uc791(Operation)\"\uc740 HTTP \"\uba54\uc18c\ub4dc\" \uc911 \ud558\ub098\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \ub2e4\uc74c \uc911 \ud558\ub098\uc774\uba70: POST GET PUT DELETE ...\uc774\uad6d\uc801\uc778 \uac83\ub4e4\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: OPTIONS HEAD PATCH TRACE HTTP \ud504\ub85c\ud1a0\ucf5c\uc5d0\uc11c\ub294 \uc774\ub7ec\ud55c \"\uba54\uc18c\ub4dc\"\ub97c \ud558\ub098(\ub610\ub294 \uc774\uc0c1) \uc0ac\uc6a9\ud558\uc5ec \uac01 \uacbd\ub85c\uc640 \ud1b5\uc2e0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. API\ub97c \ube4c\ub4dc\ud558\ub294 \ub3d9\uc548 \uc77c\ubc18\uc801\uc73c\ub85c \ud2b9\uc815 \ud589\ub3d9\uc744 \uc218\ud589\ud558\uae30 \uc704\ud574 \ud2b9\uc815 HTTP \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \ub2e4\uc74c\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4: POST : \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574. GET : \ub370\uc774\ud130\ub97c \uc77d\uae30 \uc704\ud574. PUT : \ub370\uc774\ud130\ub97c \uc5c5\ub370\uc774\ud2b8\ud558\uae30 \uc704\ud574. DELETE : \ub370\uc774\ud130\ub97c \uc0ad\uc81c\ud558\uae30 \uc704\ud574. \uadf8\ub798\uc11c OpenAPI\uc5d0\uc11c\ub294 \uac01 HTTP \uba54\uc18c\ub4dc\ub4e4\uc744 \"\ub3d9\uc791\"\uc774\ub77c \ubd80\ub985\ub2c8\ub2e4. \uc774\uc81c\ubd80\ud130 \uc6b0\ub9ac\ub294 \uba54\uc18c\ub4dc\ub97c \" \ub3d9\uc791 \"\uc774\ub77c\uace0\ub3c4 \ubd80\ub97c\uac81\ub2c8\ub2e4.","title":"\ub3d9\uc791"},{"location":"tutorial/first-steps/#_8","text":"from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } @app.get(\"/\") \uc740 FastAPI \uc5d0\uac8c \ubc14\ub85c \uc544\ub798\uc5d0 \uc788\ub294 \ud568\uc218\uac00 \ub2e4\uc74c\uc73c\ub85c \uc774\ub3d9\ud558\ub294 \uc694\uccad\uc744 \ucc98\ub9ac\ud55c\ub2e4\ub294 \uac83\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. \uacbd\ub85c / get \ub3d9\uc791 \uc0ac\uc6a9 @decorator \uc815\ubcf4 \uc774 @something \ubb38\ubc95\uc740 \ud30c\uc774\uc36c\uc5d0\uc11c \"\ub370\ucf54\ub808\uc774\ud130\"\ub77c \ubd80\ub985\ub2c8\ub2e4. \ud568\uc218 \ub9e8 \uc704\uc5d0 \ub193\uc2b5\ub2c8\ub2e4. \ub9c8\uce58 \uc608\uc05c \uc7a5\uc2dd\uc6a9(Decorative) \ubaa8\uc790\ucc98\ub7fc(\uac1c\uc778\uc801\uc73c\ub85c \uc774 \uc6a9\uc5b4\uac00 \uc5ec\uae30\uc11c \uc720\ub798\ud55c\uac70 \uac19\uc2b5\ub2c8\ub2e4). \"\ub370\ucf54\ub808\uc774\ud130\" \uc544\ub798 \uc788\ub294 \ud568\uc218\ub97c \ubc1b\uace0 \uadf8\uac78 \uc774\uc6a9\ud574 \ubb34\uc5b8\uac00 \ud569\ub2c8\ub2e4. \uc6b0\ub9ac\uc758 \uacbd\uc6b0, \uc774 \ub370\ucf54\ub808\uc774\ud130\ub294 FastAPI \uc5d0\uac8c \uc544\ub798 \ud568\uc218\uac00 \uacbd\ub85c / \uc5d0 \ud574\ub2f9\ud558\ub294 get \ub3d9\uc791 \ud558\ub77c\uace0 \uc54c\ub824\uc90d\ub2c8\ub2e4. \uc774\uac83\uc774 \" \uacbd\ub85c \ub3d9\uc791 \ub370\ucf54\ub808\uc774\ud130 \"\uc785\ub2c8\ub2e4. \ub2e4\ub978 \ub3d9\uc791\ub3c4 \uc4f8 \uc218 \uc788\uc2b5\ub2c8\ub2e4: @app.post() @app.put() @app.delete() \uc775\uc219\ud558\uc9c0 \uc54a\uc740 \uac83\ub4e4\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: @app.options() @app.head() @app.patch() @app.trace() \ud301 \uac01 \ub3d9\uc791(HTTP \uba54\uc18c\ub4dc)\uc744 \uc6d0\ud558\ub294 \ub300\ub85c \uc0ac\uc6a9\ud574\ub3c4 \ub429\ub2c8\ub2e4. FastAPI \ub294 \ud2b9\uc815 \uc758\ubbf8\ub97c \uac15\uc81c\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c \uc815\ubcf4\ub294 \uc9c0\uce68\uc11c\uc77c\ubfd0 \uc694\uad6c\uc0ac\ud56d\uc774 \uc544\ub2d9\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 GraphQL\uc744 \uc0ac\uc6a9\ud560\ub54c \uc77c\ubc18\uc801\uc73c\ub85c POST \ub3d9\uc791\ub9cc \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub4e0 \ud589\ub3d9\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.","title":"\uacbd\ub85c \ub3d9\uc791 \ub370\ucf54\ub808\uc774\ud130 \uc815\uc758"},{"location":"tutorial/first-steps/#4","text":"\ub2e4\uc74c\uc740 \uc6b0\ub9ac\uc758 \" \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \"\uc785\ub2c8\ub2e4: \uacbd\ub85c : \ub294 / \uc785\ub2c8\ub2e4. \ub3d9\uc791 : \uc740 get \uc785\ub2c8\ub2e4. \ud568\uc218 : \ub294 \"\ub370\ucf54\ub808\uc774\ud130\" \uc544\ub798\uc5d0 \uc788\ub294 \ud568\uc218\uc785\ub2c8\ub2e4 ( @app.get(\"/\") \uc544\ub798). from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \uc774\uac83\uc740 \ud30c\uc774\uc36c \ud568\uc218\uc785\ub2c8\ub2e4. GET \ub3d9\uc791\uc744 \uc0ac\uc6a9\ud558\uc5ec URL \" / \"\uc5d0 \ub300\ud55c \uc694\uccad\uc744 \ubc1b\uc744 \ub54c\ub9c8\ub2e4 FastAPI \uc5d0 \uc758\ud574 \ud638\ucd9c\ub429\ub2c8\ub2e4. \uc704\uc758 \uacbd\uc6b0 async \ud568\uc218\uc785\ub2c8\ub2e4. async def \ub300\uc2e0 \uc77c\ubc18 \ud568\uc218\ub85c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } Note \ucc28\uc774\uc810\uc744 \ubaa8\ub974\uaca0\ub2e4\uba74 Async: \"In a hurry?\" \uc744 \ud655\uc778\ud558\uc2ed\uc2dc\uc624.","title":"4 \ub2e8\uacc4: \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \uc815\uc758"},{"location":"tutorial/first-steps/#5","text":"from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } dict , list , \ub2e8\uc77c\uac12\uc744 \uac00\uc9c4 str , int \ub4f1\uc744 \ubc18\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Pydantic \ubaa8\ub378\uc744 \ubc18\ud658\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4(\ub098\uc911\uc5d0 \ub354 \uc790\uc138\ud788 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4). JSON\uc73c\ub85c \uc790\ub3d9 \ubcc0\ud658\ub418\ub294 \uac1d\uccb4\ub4e4\uacfc \ubaa8\ub378\ub4e4\uc774 \ub9ce\uc774 \uc788\uc2b5\ub2c8\ub2e4(ORM \ub4f1\uc744 \ud3ec\ud568\ud558\uc5ec). \uac00\uc7a5 \ub9c8\uc74c\uc5d0 \ub4dc\ub294 \uac83\uc744 \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624, \uc774\ubbf8 \uc9c0\uc6d0\ub418\uace0 \uc788\uc744 \uac81\ub2c8\ub2e4.","title":"5 \ub2e8\uacc4: \ucf58\ud150\uce20 \ubc18\ud658"},{"location":"tutorial/first-steps/#_9","text":"FastAPI \uc784\ud3ec\ud2b8. app \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131. ( @app.get(\"/\") \ucc98\ub7fc) \uacbd\ub85c \ub3d9\uc791 \ub370\ucf54\ub808\uc774\ud130 \uc791\uc131. (\uc704\uc5d0 \uc788\ub294 def root(): ... \ucc98\ub7fc) \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \uc791\uc131. ( uvicorn main:app --reload \ucc98\ub7fc) \uac1c\ubc1c \uc11c\ubc84 \uc2e4\ud589.","title":"\uc694\uc57d"},{"location":"tutorial/handling-errors/","text":"\uc624\ub958 \ucc98\ub9ac \u00b6 \ub2f9\uc2e0\uc758 API\ub97c \uc0ac\uc6a9\ud558\ub294 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \uc624\ub958\ub97c \uc54c\ub824\uc57c\ud558\ub294 \ub2e4\uc591\ud55c \uc0c1\ud669\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \ud504\ub860\ud2b8\uc5d4\ub4dc\uac00 \uc788\ub294 \ube0c\ub77c\uc6b0\uc800, \ub2e4\ub978 \uc0ac\ub78c\uc774 \uc791\uc131\ud55c \ucf54\ub4dc, IoT \uae30\uae30 \ub4f1\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \ub2e4\uc74c\uc758 \uc0ac\uc2e4\uc744 \uc804\ub2ec\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4: \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \ud574\ub2f9 \uc791\uc5c5\uc744 \uc218\ud589\ud558\uae30\uc5d0 \ucda9\ubd84\ud55c \uad8c\ud55c\uc744 \uac00\uc9c0\uc9c0 \uc54a\uc558\ub2e4\ub294 \uc0ac\uc2e4 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc790\uc6d0\uc5d0 \uc811\uadfc\ud560 \uc218 \uc5c6\ub2e4\ub294 \uc0ac\uc2e4 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc811\uadfc\ud558\ub824\uace0 \ud558\ub294 \ud56d\ubaa9\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uc0ac\uc2e4 \uae30\ud0c0 \ub4f1\ub4f1 \uc774\ub7ec\ud55c \uacbd\uc6b0 \uc77c\ubc18\uc801\uc73c\ub85c 4xx (400\uc5d0\uc11c 499\uae4c\uc9c0)\uc758 HTTP \uc0c1\ud0dc \ucf54\ub4dc \ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 2xx(200\uc5d0\uc11c 299\uae4c\uc9c0)\uc758 HTTP \uc0c1\ud0dc \ucf54\ub4dc\uc640 \uc720\uc0ac\ud569\ub2c8\ub2e4. \"2xx\" \uc0c1\ud0dc \ucf54\ub4dc\ub4e4\uc740 \uc694\uccad\uc774 \"\uc131\uacf5\"\uc801\uc774\uc5c8\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. 400\ubc88\ub300\uc758 \uc0c1\ud0dc \ucf54\ub4dc\ub4e4\uc740 \ud074\ub77c\uc774\uc5b8\ud2b8\ub85c\ubd80\ud130 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc74c\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc9c0\uae08\uae4c\uc9c0 \ubcf8 \"404 Not Found\" \uc624\ub958\ub4e4\uc744 \ub5a0\uc62c\ub824\ubcf4\uc138\uc694(\uadf8\ub9ac\uace0 \uadf8\uc5d0 \ub300\ud55c \ub18d\ub2f4\ub4e4\ub3c4\uc694)! HTTPException \uc0ac\uc6a9 \u00b6 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c HTTP \uc751\ub2f5\uc744 \ubc18\ud658\ud558\uae30 \uc704\ud574 HTTPException \uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. HTTPException \uc784\ud3ec\ud2b8 \u00b6 from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"item\" : items [ item_id ]} \ucf54\ub4dc\uc5d0\uc11c HTTPException \ubc1c\uc0dd\uc2dc\ud0a4\uae30 \u00b6 HTTPException \uc740 API\uc5d0 \ub300\ud55c \ucd94\uac00\uc801\uc778 \ub370\uc774\ud130\ub97c \ud3ec\ud568\ud55c \uc77c\ubc18\uc801\uc778 \ud30c\uc774\uc36c \uc608\uc678\uc785\ub2c8\ub2e4. \ud30c\uc774\uc36c \uc608\uc678\uc774\uae30 \ub54c\ubb38\uc5d0, \ubc18\ud658( return )\ud558\uc9c0 \uc54a\uace0 \ubc1c\uc0dd( raise )\uc2dc\ud0b5\ub2c8\ub2e4. \uc774\uac83\uc740 \ub9cc\uc57d \ub2f9\uc2e0\uc774 \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \uc758 \ub0b4\ubd80\uc5d0\uc11c \ud638\ucd9c\ud558\ub294 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218 \ub0b4\ubd80\uc5d0 \uc788\uace0, \ud574\ub2f9 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c HTTPException \uc744 \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \uacbd\uc6b0, \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \uc758 \ub098\uba38\uc9c0 \ubd80\ubd84\uc744 \uc2e4\ud589\ud558\ub294 \ub300\uc2e0 \uc989\uc2dc \uc694\uccad\uc5d0 \ub300\ud55c \uc791\uc5c5\uc744 \uc911\ub2e8\ud558\uace0 HTTPException \uc5d0 \ub530\ub978 HTTP \uc624\ub958\ub97c \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \uc804\uc1a1\ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc608\uc678 \ucc98\ub9ac\ub97c \ud568\uc5d0 \uc788\uc5b4 \uac12\uc744 \ubc18\ud658( return )\ud558\ub294 \uac83\ubcf4\ub2e4 \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \uac83\uc758 \uc774\uc810\uc740 \uc885\uc18d \ubc0f \ubcf4\uc548(Dependencies and Security) \uc139\uc158\uc5d0\uc11c \uae4a\uac8c \ub2e4\ub8f0 \uac83\uc785\ub2c8\ub2e4. \uc77c\ub840\ub85c, \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \ud56d\ubaa9\uc758 ID\ub97c \uc694\uccad\ud558\ub294 \uacbd\uc6b0, \ub2e4\uc74c\uacfc \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc0c1\ud0dc \ucf54\ub4dc 404 \uc640 \ud568\uaed8 \uc608\uc678 \ucc98\ub9ac\ub97c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"item\" : items [ item_id ]} \uacb0\uacfc \uc751\ub2f5 \u00b6 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 http://example.com/items/foo ( item_id \uac00 \"foo\" \uc778 \ud56d\ubaa9)\ub85c \uc694\uccad\uc744 \ubcf4\ub0c8\ub2e4\uba74, \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 HTTP \uc0c1\ud0dc\ucf54\ub4dc 200\uacfc \ub2e4\uc74c\uacfc \uac19\uc740 JSON \uc751\ub2f5\uc744 \ubc1b\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4: { \"item\" : \"The Foo Wrestlers\" } \ud558\uc9c0\ub9cc \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 http://example.com/items/bar ( item_id \uac00 \"bar\" \uc778 \ud56d\ubaa9 \uc5c6\uc74c)\ub85c \uc694\uccad\uc744 \ubcf4\ub0b8\ub2e4\uba74, \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 HTTP \uc0c1\ud0dc\ucf54\ub4dc 404(\"\ucc3e\uc744 \uc218 \uc5c6\uc74c(not found)\" \uc624\ub958)\uc640 \ub2e4\uc74c\uc758 JSON \uc751\ub2f5\uc744 \ubc1b\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4: { \"detail\" : \"Item not found\" } \ud301 HTTPException \uc744 \ubc1c\uc0dd\uc2dc\ud0ac \ub54c, str \ubfd0 \uc544\ub2c8\ub77c JSON\uc73c\ub85c \ubcc0\ud658 \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uac12\uc744 detail \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. dict , list \ub4f1\uc744 \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub4e4\uc740 FastAPI \uc5d0 \uc758\ud574 \uc790\ub3d9\uc801\uc73c\ub85c \ucc98\ub9ac\ub418\uace0 JSON\uc73c\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4. \uc0ac\uc6a9\uc790 \uc815\uc758 \ud5e4\ub354 \ucd94\uac00 \u00b6 HTTP \uc624\ub958\uc5d0 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud5e4\ub354\ub97c \ucd94\uac00\ud558\ub294 \uac83\uc774 \uc720\uc6a9\ud55c \uacbd\uc6b0\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c\ub4e4\uc5b4, \uba87\uba87 \ubcf4\uc548 \ubb38\uc81c\uc758 \uacbd\uc6b0 \uadf8\ub7ec\ud569\ub2c8\ub2e4. \ucf54\ub4dc\uc5d0\uc11c \uc774\uac83\uc744 \uc9c1\uc811 \uc0ac\uc6a9\ud560 \ud544\uc694\ub294 \uc5c6\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uace0\uae09 \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c \ud544\uc694\ud55c \uacbd\uc6b0, \uc0ac\uc6a9\uc790 \uc815\uc758 \ud5e4\ub354\ub97c \ucd94\uac00\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items-header/ {item_id} \" ) async def read_item_header ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" , headers = { \"X-Error\" : \"There goes my error\" }, ) return { \"item\" : items [ item_id ]} \uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678 \ucc98\ub9ac\uae30(exception handler) \uc124\uce58 \u00b6 Starlette\uacfc \ub3d9\uc77c\ud55c \uc608\uc678 \uc720\ud2f8\ub9ac\ud2f0 \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678 \ucc98\ub9ac\uae30\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2f9\uc2e0 \ub610\ub294 \ub2f9\uc2e0\uc774 \uc0ac\uc6a9\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678\uc778 UnicornException \uc744 \ubc1c\uc0dd( raise ) \uc2dc\ud0a4\uace0\uc790 \ud55c\ub2e4\uace0 \uac00\uc815\ud574\ubd05\uc2dc\ub2e4. \uadf8\ub9ac\uace0 \ub2f9\uc2e0\uc740 FastAPI\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud574\ub2f9 \uc608\uc678\ub97c \uc804\uc5ed\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\uace0\uc790 \ud569\ub2c8\ub2e4. @app.exception_handler() \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0ac\uc6a9\uc790 \uc608\uc678\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI , Request from fastapi.responses import JSONResponse class UnicornException ( Exception ): def __init__ ( self , name : str ): self . name = name app = FastAPI () @app . exception_handler ( UnicornException ) async def unicorn_exception_handler ( request : Request , exc : UnicornException ): return JSONResponse ( status_code = 418 , content = { \"message\" : f \"Oops! { exc . name } did something. There goes a rainbow...\" }, ) @app . get ( \"/unicorns/ {name} \" ) async def read_unicorn ( name : str ): if name == \"yolo\" : raise UnicornException ( name = name ) return { \"unicorn_name\" : name } \uc5ec\uae30\uc11c /unicorns/yolo \ub97c \uc694\uccad\ud558\uba74, \uacbd\ub85c \ub3d9\uc791 \uc740 UnicornException \uc744 \ubc1c\uc0dd( raise )\uc2dc\ud0ac \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc740 unicorn_exception_handler \uc5d0 \uc758\ud574 \ucc98\ub9ac\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub2f9\uc2e0\uc740 HTTP \uc0c1\ud0dc\ucf54\ub4dc\uac00 418 \uc774\uace0, \ub2e4\uc74c\uacfc \uac19\uc740 JSON \ub0b4\uc6a9\uc744 \uac00\uc9c4 \uc624\ub958\ub97c \ubc1b\uac8c\ub429\ub2c8\ub2e4: { \"message\" : \"Oops! yolo did something. There goes a rainbow...\" } \uae30\uc220 \uc138\ubd80\uc0ac\ud56d from starlette.requests import Request \uc640 from starlette.responses import JSONResponse \uc5ed\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac1c\ubc1c\uc790\uc778 \ub2f9\uc2e0\uc758 \ud3b8\uc758\ub97c \uc704\ud574 fastapi.responses \uc640 \ub3d9\uc77c\ud55c starlette.responses \ub3c4 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \uc751\ub2f5\ub4e4\uc740 Starlette\ub85c\ubd80\ud130 \uc9c1\uc811 \uc81c\uacf5\ub429\ub2c8\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c Request \ub3c4 \uadf8\ub7ec\ud569\ub2c8\ub2e4. \uae30\ubcf8 \uc608\uc678 \ucc98\ub9ac\uae30 \uc7ac\uc815\uc758 \u00b6 FastAPI \uc5d0\ub294 \uae30\ubcf8 \uc608\uc678 \ucc98\ub9ac\uae30\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc608\uc678 \ucc98\ub9ac\uae30\ub4e4\uc740 \ub2f9\uc2e0\uc774 HTTPException \uc744 \ubc1c\uc0dd( raise )\uc2dc\ud0a4\uac70\ub098 \uc694\uccad\uc5d0 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ub370\uc774\ud130\uac00 \uc788\uc744 \ub54c \uae30\ubcf8 JSON \uc751\ub2f5\ub4e4\uc744 \ubc18\ud658\ud558\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. \uc774 \uc608\uc678 \ucc98\ub9ac\uae30\ub4e4\uc744 \uc9c1\uc811 \uc7ac\uc815\uc758 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc694\uccad \uc720\ud6a8\uc131 \uac80\uc0ac \uc608\uc678 \uc7ac\uc815\uc758 \u00b6 \uc694\uccad\uc5d0 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ub370\uc774\ud130\uac00 \uc788\uc744 \ub54c, FastAPI \ub294 \ub0b4\ubd80\uc801\uc73c\ub85c RequestValidationError \ub97c \ubc1c\uc0dd\uc2dc\ud0b5\ub2c8\ub2e4. \ub610\ud55c \uc774\uc5d0 \ub300\ud55c \uae30\ubcf8\uc801\uc778 \uc608\uc678 \ucc98\ub9ac\uae30\ub3c4 \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc7ac\uc815\uc758 \ud558\uae30 \uc704\ud574, RequestValidationError \ub97c \uc784\ud3ec\ud2b8\ud55c \ud6c4 @app.exception_handler(RequestValidationError) \ub370\ucf54\ub808\uc774\ud130\uc640 \ud568\uaed8 \uc608\uc678 \ucc98\ub9ac\uae30\uc5d0 \uc0ac\uc6a9\ud558\uc138\uc694. \uc608\uc678 \ucc98\ub9ac\uae30\ub294 Request \uc640 \uc608\uc678\ub97c \uc804\ub2ec\ubc1b\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , HTTPException from fastapi.exceptions import RequestValidationError from fastapi.responses import PlainTextResponse from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def http_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc . detail ), status_code = exc . status_code ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc ), status_code = 400 ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \uc774\uc81c /items/foo \ub85c \uc694\uccad\uc744 \ubcf4\ub0b4\uba74, \uae30\ubcf8 JSON \uc624\ub958\ub97c \ubc1b\ub294 \ub300\uc2e0: { \"detail\" : [ { \"loc\" : [ \"path\" , \"item_id\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] } \ub2e4\uc74c\uacfc \uac19\uc740 \ud14d\uc2a4\ud2b8\ub97c \ubc1b\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4: 1 validation error path -> item_id value is not a valid integer (type=type_error.integer) RequestValidationError vs ValidationError \u00b6 \uc8fc\uc758 \uc774 \ubd80\ubd84\uc740 \ub2f9\uc2e0\uc5d0\uac8c \uc9c0\uae08 \uc911\uc694\ud558\uc9c0 \uc54a\ub2e4\uba74 \ub118\uc5b4\uac00\ub3c4 \ubb34\uad00\ud55c \uae30\uc220 \uc138\ubd80\uc0ac\ud56d\uc785\ub2c8\ub2e4. RequestValidationError \ub294 Pydantic\uc758 ValidationError \uc758 \ud558\uc704 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. FastAPI \uac00 \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0 \ub2f9\uc2e0\uc774 response_model \uc5d0\uc11c Pydantic \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uace0, \ub2f9\uc2e0\uc758 \ub370\uc774\ud130\uc5d0 \uc624\ub958\uac00 \uc788\ub294 \uacbd\uc6b0 \ub85c\uadf8\uc5d0\uc11c \uc624\ub958\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ud074\ub77c\uc774\uc5b8\ud2b8\uc640 \uc0ac\uc6a9\uc790\ub294 \uc774\ub97c \ubcfc \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ub300\uc2e0, \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 HTTP \uc0c1\ud0dc \ucf54\ub4dc 500 \uacfc \ud568\uaed8 \"\ub0b4\ubd80 \uc11c\ubc84 \uc624\ub958(Internal Server Error)\"\ub97c \uc804\ub2ec \ubc1b\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \ud074\ub77c\uc774\uc5b8\ud2b8\uc758 \uc694\uccad(request) \uc774 \uc544\ub2cc \uc751\ub2f5(response) \uc774\ub098 \ucf54\ub4dc \uc5b4\ub518\uac00\uc5d0 Pydantic\uc758 ValidationError \uac00 \uc788\ub294 \uacbd\uc6b0, \uc774\uac83\uc740 \ucf54\ub4dc \ub0b4\uc5d0 \ubc84\uadf8\uac00 \uc788\uc74c\uc744 \uc758\ubbf8\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub2f9\uc2e0\uc774 \ud574\ub2f9 \ubc84\uadf8\ub97c \ud574\uacb0\ud558\ub294 \ub3d9\uc548 \ubcf4\uc548 \ucde8\uc57d\uc810\uc774 \ub178\ucd9c\ub418\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574 \ud074\ub77c\uc774\uc5b8\ud2b8\uc640 \uc0ac\uc6a9\uc790\ub294 \uc624\ub958\uc5d0 \uad00\ud55c \ub0b4\ubd80 \uc815\ubcf4\uc5d0 \uc811\uadfc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. HTTPException \uc608\uc678 \ucc98\ub9ac\uae30 \uc7ac\uc815\uc758 \u00b6 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c HTTPException \ucc98\ub9ac\uae30\ub97c \uc7ac\uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc774 \uc624\ub958\ub4e4\uc5d0 \ub300\ud574 JSON \ub300\uc2e0 \uc77c\ubc18 \ud14d\uc2a4\ud2b8\ub97c \ubc18\ud658\ud558\uace0\uc790 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI , HTTPException from fastapi.exceptions import RequestValidationError from fastapi.responses import PlainTextResponse from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def http_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc . detail ), status_code = exc . status_code ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc ), status_code = 400 ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \uae30\uc220 \uc138\ubd80\uc0ac\ud56d from starlette.responses import JSONResponse \uc5ed\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac1c\ubc1c\uc790\uc778 \ub2f9\uc2e0\uc758 \ud3b8\uc758\ub97c \uc704\ud574 fastapi.responses \uc640 \ub3d9\uc77c\ud55c starlette.responses \ub3c4 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \uc751\ub2f5\ub4e4\uc740 Starlette\ub85c\ubd80\ud130 \uc9c1\uc811 \uc81c\uacf5\ub429\ub2c8\ub2e4. RequestValidationError \ubcf8\ubb38 \uc0ac\uc6a9 \u00b6 RequestValidationError \ub294 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ub370\uc774\ud130\uc640 \ud568\uaed8 \ubc1b\uc740 body \ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uac1c\ubc1c\ud558\ub294 \ub3d9\uc548 \ubcf8\ubb38\uc744 \ub85c\uadf8\uc5d0 \uae30\ub85d\ud558\uace0, \ub514\ubc84\uae45\ud558\uace0, \uc0ac\uc6a9\uc790\uc5d0\uac8c \ubc18\ud658\ud558\ub294 \uc791\uc5c5 \ub4f1\uc744 \uc218\ud589\ud558\ub294 \ub370\uc5d0 \uc774\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , Request , status from fastapi.encoders import jsonable_encoder from fastapi.exceptions import RequestValidationError from fastapi.responses import JSONResponse from pydantic import BaseModel app = FastAPI () @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request : Request , exc : RequestValidationError ): return JSONResponse ( status_code = status . HTTP_422_UNPROCESSABLE_ENTITY , content = jsonable_encoder ({ \"detail\" : exc . errors (), \"body\" : exc . body }), ) class Item ( BaseModel ): title : str size : int @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \ub2e4\uc74c\uacfc \uac19\uc774 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ud56d\ubaa9\uc744 \uc804\uc1a1\ud558\uba74: { \"title\" : \"towel\" , \"size\" : \"XL\" } \ub370\uc774\ud130\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc74c\uc744 \uc54c\ub824\uc8fc\ub294, \uc804\ub2ec\ubc1b\uc740 \ubcf8\ubb38\uc744 \ud3ec\ud568\ud55c \uc751\ub2f5\uc744 \ubc1b\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4. { \"detail\" : [ { \"loc\" : [ \"body\" , \"size\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ], \"body\" : { \"title\" : \"towel\" , \"size\" : \"XL\" } } FastAPI\uc758 HTTPException vs Starlette\uc758 HTTPException \u00b6 FastAPI \uc5d0\ub294 \uc790\uccb4\uc801\uc778 HTTPException \uc774 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 FastAPI \uc758 HTTPException \uc624\ub958 \ud074\ub798\uc2a4\ub294 Starlette\uc758 HTTPException \uc624\ub958 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\uc2b5\ub2c8\ub2e4. \uc720\uc77c\ud55c \ucc28\uc774\uc810\uc740, FastAPI \uc758 HTTPException \uc744 \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc751\ub2f5\uc5d0 \ud5e4\ub354\ub97c \ucd94\uac00\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 OAuth 2.0 \ubc0f \uba87\uba87 \ubcf4\uc548 \uc720\ud2f8\ub9ac\ud2f0\uc5d0 \ub0b4\ubd80\uc801\uc73c\ub85c \ud544\uc694/\uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c, \ud3c9\uc18c\uc640 \uac19\uc774 \ucf54\ub4dc\uc5d0\uc11c FastAP I\uc758 HTTPException \uc744 \uacc4\uc18d \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc608\uc678 \ucc98\ub9ac\uae30\ub97c \ub4f1\ub85d\ud560 \ub54c\uc5d0\ub294, Starlette\uc758 HTTPException \uc5d0 \ub300\ud558\uc5ec \ub4f1\ub85d\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ub807\uac8c \ud558\uba74 Starlette\uc758 \ub0b4\ubd80 \ucf54\ub4dc \ub610\ub294 Starlette \ud655\uc7a5(extension) \ub610\ub294 \ud50c\ub7ec\uadf8\uc778\uc758 \uc77c\ubd80\uac00 Starlette HTTPException \uc744 \ubc1c\uc0dd\uc2dc\ud0ac \ub54c, \ud574\ub2f9 \uc608\uc678 \ucc98\ub9ac\uae30\uac00 \uc774\ub97c \ud3ec\ucc29\ud558\uace0 \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \uc608\uc2dc\uc5d0\uc11c, \ub450 \uac1c\uc758 HTTPException \uc744 \uac19\uc740 \ucf54\ub4dc\uc5d0\uc11c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574, Starlette\uc758 \uc608\uc678\ub294 StarletteHTTPException \ub85c \uc774\ub984\uc744 \ubcc0\uacbd\ud558\uc600\uc2b5\ub2c8\ub2e4. from starlette.exceptions import HTTPException as StarletteHTTPException FastAPI \uc758 \uc608\uc678 \ucc98\ub9ac\uae30 \uc7ac\uc0ac\uc6a9 \u00b6 \uc5b4\ub5a0\ud55c \ubc29\uc2dd\uc73c\ub85c\ub4e0 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uba74\uc11c, FastAPI \uc758 \ub3d9\uc77c\ud55c \uae30\ubcf8 \uc608\uc678 \ucc98\ub9ac\uae30\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. fastapi.exception_handlers \ub85c\ubd80\ud130 \uae30\ubcf8 \uc608\uc678 \ucc98\ub9ac\uae30\ub97c \uc784\ud3ec\ud2b8\ud558\uace0 \uc7ac\uc0ac\uc6a9\ud569\ub2c8\ub2e4: from fastapi import FastAPI , HTTPException from fastapi.exception_handlers import ( http_exception_handler , request_validation_exception_handler , ) from fastapi.exceptions import RequestValidationError from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def custom_http_exception_handler ( request , exc ): print ( f \"OMG! An HTTP error!: { repr ( exc ) } \" ) return await http_exception_handler ( request , exc ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): print ( f \"OMG! The client sent invalid data!: { exc } \" ) return await request_validation_exception_handler ( request , exc ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \uc0c1\uae30 \uc608\uc2dc\uc5d0\uc11c, \uac10\uc815\uc774 \ub9e4\uc6b0 \ub9ce\uc774 \uc11e\uc778 \uba54\uc2dc\uc9c0\uc640 \ud568\uaed8 \uc624\ub958\ub97c \ub2e8\uc21c\ud788 print \ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub97c \ud1b5\ud574 \uc608\uc678\ub97c \uc0ac\uc6a9\ud55c \ud6c4, \uae30\ubcf8 \uc608\uc678 \ucc98\ub9ac\uae30\ub97c \ub2e4\uc2dc \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574 \uc54c\uc558\uc744 \uac83\uc785\ub2c8\ub2e4.","title":"\uc624\ub958 \ucc98\ub9ac"},{"location":"tutorial/handling-errors/#_1","text":"\ub2f9\uc2e0\uc758 API\ub97c \uc0ac\uc6a9\ud558\ub294 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \uc624\ub958\ub97c \uc54c\ub824\uc57c\ud558\ub294 \ub2e4\uc591\ud55c \uc0c1\ud669\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \ud504\ub860\ud2b8\uc5d4\ub4dc\uac00 \uc788\ub294 \ube0c\ub77c\uc6b0\uc800, \ub2e4\ub978 \uc0ac\ub78c\uc774 \uc791\uc131\ud55c \ucf54\ub4dc, IoT \uae30\uae30 \ub4f1\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \ub2e4\uc74c\uc758 \uc0ac\uc2e4\uc744 \uc804\ub2ec\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4: \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \ud574\ub2f9 \uc791\uc5c5\uc744 \uc218\ud589\ud558\uae30\uc5d0 \ucda9\ubd84\ud55c \uad8c\ud55c\uc744 \uac00\uc9c0\uc9c0 \uc54a\uc558\ub2e4\ub294 \uc0ac\uc2e4 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc790\uc6d0\uc5d0 \uc811\uadfc\ud560 \uc218 \uc5c6\ub2e4\ub294 \uc0ac\uc2e4 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc811\uadfc\ud558\ub824\uace0 \ud558\ub294 \ud56d\ubaa9\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uc0ac\uc2e4 \uae30\ud0c0 \ub4f1\ub4f1 \uc774\ub7ec\ud55c \uacbd\uc6b0 \uc77c\ubc18\uc801\uc73c\ub85c 4xx (400\uc5d0\uc11c 499\uae4c\uc9c0)\uc758 HTTP \uc0c1\ud0dc \ucf54\ub4dc \ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 2xx(200\uc5d0\uc11c 299\uae4c\uc9c0)\uc758 HTTP \uc0c1\ud0dc \ucf54\ub4dc\uc640 \uc720\uc0ac\ud569\ub2c8\ub2e4. \"2xx\" \uc0c1\ud0dc \ucf54\ub4dc\ub4e4\uc740 \uc694\uccad\uc774 \"\uc131\uacf5\"\uc801\uc774\uc5c8\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. 400\ubc88\ub300\uc758 \uc0c1\ud0dc \ucf54\ub4dc\ub4e4\uc740 \ud074\ub77c\uc774\uc5b8\ud2b8\ub85c\ubd80\ud130 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc74c\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc9c0\uae08\uae4c\uc9c0 \ubcf8 \"404 Not Found\" \uc624\ub958\ub4e4\uc744 \ub5a0\uc62c\ub824\ubcf4\uc138\uc694(\uadf8\ub9ac\uace0 \uadf8\uc5d0 \ub300\ud55c \ub18d\ub2f4\ub4e4\ub3c4\uc694)!","title":"\uc624\ub958 \ucc98\ub9ac"},{"location":"tutorial/handling-errors/#httpexception","text":"\ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c HTTP \uc751\ub2f5\uc744 \ubc18\ud658\ud558\uae30 \uc704\ud574 HTTPException \uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","title":"HTTPException \uc0ac\uc6a9"},{"location":"tutorial/handling-errors/#httpexception_1","text":"from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"item\" : items [ item_id ]}","title":"HTTPException \uc784\ud3ec\ud2b8"},{"location":"tutorial/handling-errors/#httpexception_2","text":"HTTPException \uc740 API\uc5d0 \ub300\ud55c \ucd94\uac00\uc801\uc778 \ub370\uc774\ud130\ub97c \ud3ec\ud568\ud55c \uc77c\ubc18\uc801\uc778 \ud30c\uc774\uc36c \uc608\uc678\uc785\ub2c8\ub2e4. \ud30c\uc774\uc36c \uc608\uc678\uc774\uae30 \ub54c\ubb38\uc5d0, \ubc18\ud658( return )\ud558\uc9c0 \uc54a\uace0 \ubc1c\uc0dd( raise )\uc2dc\ud0b5\ub2c8\ub2e4. \uc774\uac83\uc740 \ub9cc\uc57d \ub2f9\uc2e0\uc774 \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \uc758 \ub0b4\ubd80\uc5d0\uc11c \ud638\ucd9c\ud558\ub294 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218 \ub0b4\ubd80\uc5d0 \uc788\uace0, \ud574\ub2f9 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c HTTPException \uc744 \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \uacbd\uc6b0, \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \uc758 \ub098\uba38\uc9c0 \ubd80\ubd84\uc744 \uc2e4\ud589\ud558\ub294 \ub300\uc2e0 \uc989\uc2dc \uc694\uccad\uc5d0 \ub300\ud55c \uc791\uc5c5\uc744 \uc911\ub2e8\ud558\uace0 HTTPException \uc5d0 \ub530\ub978 HTTP \uc624\ub958\ub97c \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \uc804\uc1a1\ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc608\uc678 \ucc98\ub9ac\ub97c \ud568\uc5d0 \uc788\uc5b4 \uac12\uc744 \ubc18\ud658( return )\ud558\ub294 \uac83\ubcf4\ub2e4 \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \uac83\uc758 \uc774\uc810\uc740 \uc885\uc18d \ubc0f \ubcf4\uc548(Dependencies and Security) \uc139\uc158\uc5d0\uc11c \uae4a\uac8c \ub2e4\ub8f0 \uac83\uc785\ub2c8\ub2e4. \uc77c\ub840\ub85c, \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \ud56d\ubaa9\uc758 ID\ub97c \uc694\uccad\ud558\ub294 \uacbd\uc6b0, \ub2e4\uc74c\uacfc \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc0c1\ud0dc \ucf54\ub4dc 404 \uc640 \ud568\uaed8 \uc608\uc678 \ucc98\ub9ac\ub97c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"item\" : items [ item_id ]}","title":"\ucf54\ub4dc\uc5d0\uc11c HTTPException \ubc1c\uc0dd\uc2dc\ud0a4\uae30"},{"location":"tutorial/handling-errors/#_2","text":"\ud074\ub77c\uc774\uc5b8\ud2b8\uac00 http://example.com/items/foo ( item_id \uac00 \"foo\" \uc778 \ud56d\ubaa9)\ub85c \uc694\uccad\uc744 \ubcf4\ub0c8\ub2e4\uba74, \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 HTTP \uc0c1\ud0dc\ucf54\ub4dc 200\uacfc \ub2e4\uc74c\uacfc \uac19\uc740 JSON \uc751\ub2f5\uc744 \ubc1b\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4: { \"item\" : \"The Foo Wrestlers\" } \ud558\uc9c0\ub9cc \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 http://example.com/items/bar ( item_id \uac00 \"bar\" \uc778 \ud56d\ubaa9 \uc5c6\uc74c)\ub85c \uc694\uccad\uc744 \ubcf4\ub0b8\ub2e4\uba74, \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 HTTP \uc0c1\ud0dc\ucf54\ub4dc 404(\"\ucc3e\uc744 \uc218 \uc5c6\uc74c(not found)\" \uc624\ub958)\uc640 \ub2e4\uc74c\uc758 JSON \uc751\ub2f5\uc744 \ubc1b\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4: { \"detail\" : \"Item not found\" } \ud301 HTTPException \uc744 \ubc1c\uc0dd\uc2dc\ud0ac \ub54c, str \ubfd0 \uc544\ub2c8\ub77c JSON\uc73c\ub85c \ubcc0\ud658 \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uac12\uc744 detail \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. dict , list \ub4f1\uc744 \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub4e4\uc740 FastAPI \uc5d0 \uc758\ud574 \uc790\ub3d9\uc801\uc73c\ub85c \ucc98\ub9ac\ub418\uace0 JSON\uc73c\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4.","title":"\uacb0\uacfc \uc751\ub2f5"},{"location":"tutorial/handling-errors/#_3","text":"HTTP \uc624\ub958\uc5d0 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud5e4\ub354\ub97c \ucd94\uac00\ud558\ub294 \uac83\uc774 \uc720\uc6a9\ud55c \uacbd\uc6b0\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c\ub4e4\uc5b4, \uba87\uba87 \ubcf4\uc548 \ubb38\uc81c\uc758 \uacbd\uc6b0 \uadf8\ub7ec\ud569\ub2c8\ub2e4. \ucf54\ub4dc\uc5d0\uc11c \uc774\uac83\uc744 \uc9c1\uc811 \uc0ac\uc6a9\ud560 \ud544\uc694\ub294 \uc5c6\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uace0\uae09 \uc2dc\ub098\ub9ac\uc624\uc5d0\uc11c \ud544\uc694\ud55c \uacbd\uc6b0, \uc0ac\uc6a9\uc790 \uc815\uc758 \ud5e4\ub354\ub97c \ucd94\uac00\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items-header/ {item_id} \" ) async def read_item_header ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" , headers = { \"X-Error\" : \"There goes my error\" }, ) return { \"item\" : items [ item_id ]}","title":"\uc0ac\uc6a9\uc790 \uc815\uc758 \ud5e4\ub354 \ucd94\uac00"},{"location":"tutorial/handling-errors/#exception-handler","text":"Starlette\uacfc \ub3d9\uc77c\ud55c \uc608\uc678 \uc720\ud2f8\ub9ac\ud2f0 \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678 \ucc98\ub9ac\uae30\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2f9\uc2e0 \ub610\ub294 \ub2f9\uc2e0\uc774 \uc0ac\uc6a9\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678\uc778 UnicornException \uc744 \ubc1c\uc0dd( raise ) \uc2dc\ud0a4\uace0\uc790 \ud55c\ub2e4\uace0 \uac00\uc815\ud574\ubd05\uc2dc\ub2e4. \uadf8\ub9ac\uace0 \ub2f9\uc2e0\uc740 FastAPI\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud574\ub2f9 \uc608\uc678\ub97c \uc804\uc5ed\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\uace0\uc790 \ud569\ub2c8\ub2e4. @app.exception_handler() \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0ac\uc6a9\uc790 \uc608\uc678\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI , Request from fastapi.responses import JSONResponse class UnicornException ( Exception ): def __init__ ( self , name : str ): self . name = name app = FastAPI () @app . exception_handler ( UnicornException ) async def unicorn_exception_handler ( request : Request , exc : UnicornException ): return JSONResponse ( status_code = 418 , content = { \"message\" : f \"Oops! { exc . name } did something. There goes a rainbow...\" }, ) @app . get ( \"/unicorns/ {name} \" ) async def read_unicorn ( name : str ): if name == \"yolo\" : raise UnicornException ( name = name ) return { \"unicorn_name\" : name } \uc5ec\uae30\uc11c /unicorns/yolo \ub97c \uc694\uccad\ud558\uba74, \uacbd\ub85c \ub3d9\uc791 \uc740 UnicornException \uc744 \ubc1c\uc0dd( raise )\uc2dc\ud0ac \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc740 unicorn_exception_handler \uc5d0 \uc758\ud574 \ucc98\ub9ac\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub2f9\uc2e0\uc740 HTTP \uc0c1\ud0dc\ucf54\ub4dc\uac00 418 \uc774\uace0, \ub2e4\uc74c\uacfc \uac19\uc740 JSON \ub0b4\uc6a9\uc744 \uac00\uc9c4 \uc624\ub958\ub97c \ubc1b\uac8c\ub429\ub2c8\ub2e4: { \"message\" : \"Oops! yolo did something. There goes a rainbow...\" } \uae30\uc220 \uc138\ubd80\uc0ac\ud56d from starlette.requests import Request \uc640 from starlette.responses import JSONResponse \uc5ed\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac1c\ubc1c\uc790\uc778 \ub2f9\uc2e0\uc758 \ud3b8\uc758\ub97c \uc704\ud574 fastapi.responses \uc640 \ub3d9\uc77c\ud55c starlette.responses \ub3c4 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \uc751\ub2f5\ub4e4\uc740 Starlette\ub85c\ubd80\ud130 \uc9c1\uc811 \uc81c\uacf5\ub429\ub2c8\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c Request \ub3c4 \uadf8\ub7ec\ud569\ub2c8\ub2e4.","title":"\uc0ac\uc6a9\uc790 \uc815\uc758 \uc608\uc678 \ucc98\ub9ac\uae30(exception handler) \uc124\uce58"},{"location":"tutorial/handling-errors/#_4","text":"FastAPI \uc5d0\ub294 \uae30\ubcf8 \uc608\uc678 \ucc98\ub9ac\uae30\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc608\uc678 \ucc98\ub9ac\uae30\ub4e4\uc740 \ub2f9\uc2e0\uc774 HTTPException \uc744 \ubc1c\uc0dd( raise )\uc2dc\ud0a4\uac70\ub098 \uc694\uccad\uc5d0 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ub370\uc774\ud130\uac00 \uc788\uc744 \ub54c \uae30\ubcf8 JSON \uc751\ub2f5\ub4e4\uc744 \ubc18\ud658\ud558\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. \uc774 \uc608\uc678 \ucc98\ub9ac\uae30\ub4e4\uc744 \uc9c1\uc811 \uc7ac\uc815\uc758 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uae30\ubcf8 \uc608\uc678 \ucc98\ub9ac\uae30 \uc7ac\uc815\uc758"},{"location":"tutorial/handling-errors/#_5","text":"\uc694\uccad\uc5d0 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ub370\uc774\ud130\uac00 \uc788\uc744 \ub54c, FastAPI \ub294 \ub0b4\ubd80\uc801\uc73c\ub85c RequestValidationError \ub97c \ubc1c\uc0dd\uc2dc\ud0b5\ub2c8\ub2e4. \ub610\ud55c \uc774\uc5d0 \ub300\ud55c \uae30\ubcf8\uc801\uc778 \uc608\uc678 \ucc98\ub9ac\uae30\ub3c4 \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc7ac\uc815\uc758 \ud558\uae30 \uc704\ud574, RequestValidationError \ub97c \uc784\ud3ec\ud2b8\ud55c \ud6c4 @app.exception_handler(RequestValidationError) \ub370\ucf54\ub808\uc774\ud130\uc640 \ud568\uaed8 \uc608\uc678 \ucc98\ub9ac\uae30\uc5d0 \uc0ac\uc6a9\ud558\uc138\uc694. \uc608\uc678 \ucc98\ub9ac\uae30\ub294 Request \uc640 \uc608\uc678\ub97c \uc804\ub2ec\ubc1b\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , HTTPException from fastapi.exceptions import RequestValidationError from fastapi.responses import PlainTextResponse from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def http_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc . detail ), status_code = exc . status_code ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc ), status_code = 400 ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \uc774\uc81c /items/foo \ub85c \uc694\uccad\uc744 \ubcf4\ub0b4\uba74, \uae30\ubcf8 JSON \uc624\ub958\ub97c \ubc1b\ub294 \ub300\uc2e0: { \"detail\" : [ { \"loc\" : [ \"path\" , \"item_id\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] } \ub2e4\uc74c\uacfc \uac19\uc740 \ud14d\uc2a4\ud2b8\ub97c \ubc1b\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4: 1 validation error path -> item_id value is not a valid integer (type=type_error.integer)","title":"\uc694\uccad \uc720\ud6a8\uc131 \uac80\uc0ac \uc608\uc678 \uc7ac\uc815\uc758"},{"location":"tutorial/handling-errors/#requestvalidationerror-vs-validationerror","text":"\uc8fc\uc758 \uc774 \ubd80\ubd84\uc740 \ub2f9\uc2e0\uc5d0\uac8c \uc9c0\uae08 \uc911\uc694\ud558\uc9c0 \uc54a\ub2e4\uba74 \ub118\uc5b4\uac00\ub3c4 \ubb34\uad00\ud55c \uae30\uc220 \uc138\ubd80\uc0ac\ud56d\uc785\ub2c8\ub2e4. RequestValidationError \ub294 Pydantic\uc758 ValidationError \uc758 \ud558\uc704 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. FastAPI \uac00 \uc774\uac83\uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0 \ub2f9\uc2e0\uc774 response_model \uc5d0\uc11c Pydantic \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uace0, \ub2f9\uc2e0\uc758 \ub370\uc774\ud130\uc5d0 \uc624\ub958\uac00 \uc788\ub294 \uacbd\uc6b0 \ub85c\uadf8\uc5d0\uc11c \uc624\ub958\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ud074\ub77c\uc774\uc5b8\ud2b8\uc640 \uc0ac\uc6a9\uc790\ub294 \uc774\ub97c \ubcfc \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \ub300\uc2e0, \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 HTTP \uc0c1\ud0dc \ucf54\ub4dc 500 \uacfc \ud568\uaed8 \"\ub0b4\ubd80 \uc11c\ubc84 \uc624\ub958(Internal Server Error)\"\ub97c \uc804\ub2ec \ubc1b\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d \ud074\ub77c\uc774\uc5b8\ud2b8\uc758 \uc694\uccad(request) \uc774 \uc544\ub2cc \uc751\ub2f5(response) \uc774\ub098 \ucf54\ub4dc \uc5b4\ub518\uac00\uc5d0 Pydantic\uc758 ValidationError \uac00 \uc788\ub294 \uacbd\uc6b0, \uc774\uac83\uc740 \ucf54\ub4dc \ub0b4\uc5d0 \ubc84\uadf8\uac00 \uc788\uc74c\uc744 \uc758\ubbf8\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub2f9\uc2e0\uc774 \ud574\ub2f9 \ubc84\uadf8\ub97c \ud574\uacb0\ud558\ub294 \ub3d9\uc548 \ubcf4\uc548 \ucde8\uc57d\uc810\uc774 \ub178\ucd9c\ub418\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574 \ud074\ub77c\uc774\uc5b8\ud2b8\uc640 \uc0ac\uc6a9\uc790\ub294 \uc624\ub958\uc5d0 \uad00\ud55c \ub0b4\ubd80 \uc815\ubcf4\uc5d0 \uc811\uadfc\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.","title":"RequestValidationError vs ValidationError"},{"location":"tutorial/handling-errors/#httpexception_3","text":"\uac19\uc740 \ubc29\uc2dd\uc73c\ub85c HTTPException \ucc98\ub9ac\uae30\ub97c \uc7ac\uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc774 \uc624\ub958\ub4e4\uc5d0 \ub300\ud574 JSON \ub300\uc2e0 \uc77c\ubc18 \ud14d\uc2a4\ud2b8\ub97c \ubc18\ud658\ud558\uace0\uc790 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI , HTTPException from fastapi.exceptions import RequestValidationError from fastapi.responses import PlainTextResponse from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def http_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc . detail ), status_code = exc . status_code ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc ), status_code = 400 ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \uae30\uc220 \uc138\ubd80\uc0ac\ud56d from starlette.responses import JSONResponse \uc5ed\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac1c\ubc1c\uc790\uc778 \ub2f9\uc2e0\uc758 \ud3b8\uc758\ub97c \uc704\ud574 fastapi.responses \uc640 \ub3d9\uc77c\ud55c starlette.responses \ub3c4 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \uc751\ub2f5\ub4e4\uc740 Starlette\ub85c\ubd80\ud130 \uc9c1\uc811 \uc81c\uacf5\ub429\ub2c8\ub2e4.","title":"HTTPException \uc608\uc678 \ucc98\ub9ac\uae30 \uc7ac\uc815\uc758"},{"location":"tutorial/handling-errors/#requestvalidationerror","text":"RequestValidationError \ub294 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ub370\uc774\ud130\uc640 \ud568\uaed8 \ubc1b\uc740 body \ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4. \ub2f9\uc2e0\uc740 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uac1c\ubc1c\ud558\ub294 \ub3d9\uc548 \ubcf8\ubb38\uc744 \ub85c\uadf8\uc5d0 \uae30\ub85d\ud558\uace0, \ub514\ubc84\uae45\ud558\uace0, \uc0ac\uc6a9\uc790\uc5d0\uac8c \ubc18\ud658\ud558\ub294 \uc791\uc5c5 \ub4f1\uc744 \uc218\ud589\ud558\ub294 \ub370\uc5d0 \uc774\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , Request , status from fastapi.encoders import jsonable_encoder from fastapi.exceptions import RequestValidationError from fastapi.responses import JSONResponse from pydantic import BaseModel app = FastAPI () @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request : Request , exc : RequestValidationError ): return JSONResponse ( status_code = status . HTTP_422_UNPROCESSABLE_ENTITY , content = jsonable_encoder ({ \"detail\" : exc . errors (), \"body\" : exc . body }), ) class Item ( BaseModel ): title : str size : int @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \ub2e4\uc74c\uacfc \uac19\uc774 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ud56d\ubaa9\uc744 \uc804\uc1a1\ud558\uba74: { \"title\" : \"towel\" , \"size\" : \"XL\" } \ub370\uc774\ud130\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc74c\uc744 \uc54c\ub824\uc8fc\ub294, \uc804\ub2ec\ubc1b\uc740 \ubcf8\ubb38\uc744 \ud3ec\ud568\ud55c \uc751\ub2f5\uc744 \ubc1b\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4. { \"detail\" : [ { \"loc\" : [ \"body\" , \"size\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ], \"body\" : { \"title\" : \"towel\" , \"size\" : \"XL\" } }","title":"RequestValidationError \ubcf8\ubb38 \uc0ac\uc6a9"},{"location":"tutorial/handling-errors/#fastapi-httpexception-vs-starlette-httpexception","text":"FastAPI \uc5d0\ub294 \uc790\uccb4\uc801\uc778 HTTPException \uc774 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 FastAPI \uc758 HTTPException \uc624\ub958 \ud074\ub798\uc2a4\ub294 Starlette\uc758 HTTPException \uc624\ub958 \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\uc2b5\ub2c8\ub2e4. \uc720\uc77c\ud55c \ucc28\uc774\uc810\uc740, FastAPI \uc758 HTTPException \uc744 \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc751\ub2f5\uc5d0 \ud5e4\ub354\ub97c \ucd94\uac00\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 OAuth 2.0 \ubc0f \uba87\uba87 \ubcf4\uc548 \uc720\ud2f8\ub9ac\ud2f0\uc5d0 \ub0b4\ubd80\uc801\uc73c\ub85c \ud544\uc694/\uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c, \ud3c9\uc18c\uc640 \uac19\uc774 \ucf54\ub4dc\uc5d0\uc11c FastAP I\uc758 HTTPException \uc744 \uacc4\uc18d \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc608\uc678 \ucc98\ub9ac\uae30\ub97c \ub4f1\ub85d\ud560 \ub54c\uc5d0\ub294, Starlette\uc758 HTTPException \uc5d0 \ub300\ud558\uc5ec \ub4f1\ub85d\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ub807\uac8c \ud558\uba74 Starlette\uc758 \ub0b4\ubd80 \ucf54\ub4dc \ub610\ub294 Starlette \ud655\uc7a5(extension) \ub610\ub294 \ud50c\ub7ec\uadf8\uc778\uc758 \uc77c\ubd80\uac00 Starlette HTTPException \uc744 \ubc1c\uc0dd\uc2dc\ud0ac \ub54c, \ud574\ub2f9 \uc608\uc678 \ucc98\ub9ac\uae30\uac00 \uc774\ub97c \ud3ec\ucc29\ud558\uace0 \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \uc608\uc2dc\uc5d0\uc11c, \ub450 \uac1c\uc758 HTTPException \uc744 \uac19\uc740 \ucf54\ub4dc\uc5d0\uc11c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574, Starlette\uc758 \uc608\uc678\ub294 StarletteHTTPException \ub85c \uc774\ub984\uc744 \ubcc0\uacbd\ud558\uc600\uc2b5\ub2c8\ub2e4. from starlette.exceptions import HTTPException as StarletteHTTPException","title":"FastAPI\uc758 HTTPException vs Starlette\uc758 HTTPException"},{"location":"tutorial/handling-errors/#fastapi","text":"\uc5b4\ub5a0\ud55c \ubc29\uc2dd\uc73c\ub85c\ub4e0 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uba74\uc11c, FastAPI \uc758 \ub3d9\uc77c\ud55c \uae30\ubcf8 \uc608\uc678 \ucc98\ub9ac\uae30\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. fastapi.exception_handlers \ub85c\ubd80\ud130 \uae30\ubcf8 \uc608\uc678 \ucc98\ub9ac\uae30\ub97c \uc784\ud3ec\ud2b8\ud558\uace0 \uc7ac\uc0ac\uc6a9\ud569\ub2c8\ub2e4: from fastapi import FastAPI , HTTPException from fastapi.exception_handlers import ( http_exception_handler , request_validation_exception_handler , ) from fastapi.exceptions import RequestValidationError from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def custom_http_exception_handler ( request , exc ): print ( f \"OMG! An HTTP error!: { repr ( exc ) } \" ) return await http_exception_handler ( request , exc ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): print ( f \"OMG! The client sent invalid data!: { exc } \" ) return await request_validation_exception_handler ( request , exc ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \uc0c1\uae30 \uc608\uc2dc\uc5d0\uc11c, \uac10\uc815\uc774 \ub9e4\uc6b0 \ub9ce\uc774 \uc11e\uc778 \uba54\uc2dc\uc9c0\uc640 \ud568\uaed8 \uc624\ub958\ub97c \ub2e8\uc21c\ud788 print \ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub97c \ud1b5\ud574 \uc608\uc678\ub97c \uc0ac\uc6a9\ud55c \ud6c4, \uae30\ubcf8 \uc608\uc678 \ucc98\ub9ac\uae30\ub97c \ub2e4\uc2dc \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574 \uc54c\uc558\uc744 \uac83\uc785\ub2c8\ub2e4.","title":"FastAPI\uc758 \uc608\uc678 \ucc98\ub9ac\uae30 \uc7ac\uc0ac\uc6a9"},{"location":"tutorial/header-params/","text":"\ud5e4\ub354 \ub9e4\uac1c\ubcc0\uc218 \u00b6 \ud5e4\ub354 \ub9e4\uac1c\ubcc0\uc218\ub97c Query , Path \uadf8\ub9ac\uace0 Cookie \ub9e4\uac1c\ubcc0\uc218\ub4e4\uacfc \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Header \uc784\ud3ec\ud2b8 \u00b6 \uba3c\uc800 Header \ub97c \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : Union [ str , None ] = Header ( default = None )): return { \"User-Agent\" : user_agent } Header \ub9e4\uac1c\ubcc0\uc218 \uc120\uc5b8 \u00b6 Path , Query \uadf8\ub9ac\uace0 Cookie \ub97c \uc0ac\uc6a9\ud55c \ub3d9\uc77c\ud55c \uad6c\uc870\ub97c \uc774\uc6a9\ud558\uc5ec \ud5e4\ub354 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud569\ub2c8\ub2e4. \uccab \ubc88\uc9f8 \uac12\uc740 \uae30\ubcf8\uac12\uc774\uba70, \ucd94\uac00 \uac80\uc99d\uc774\ub098 \uc5b4\ub178\ud14c\uc774\uc158 \ub9e4\uac1c\ubcc0\uc218 \ubaa8\ub450 \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : Union [ str , None ] = Header ( default = None )): return { \"User-Agent\" : user_agent } \uae30\uc220 \uc138\ubd80\uc0ac\ud56d Header \ub294 Path , Query \ubc0f Cookie \uc758 \"\uc790\ub9e4\"\ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uc774 \uc5ed\uc2dc \ub3d9\uc77c\ud55c \uacf5\ud1b5 Param \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud569\ub2c8\ub2e4. Query , Path , Header \uadf8\ub9ac\uace0 \ub2e4\ub978 \uac83\ub4e4\uc744 fastapi \uc5d0\uc11c \uc784\ud3ec\ud2b8 \ud560 \ub54c, \uc774\ub4e4\uc740 \uc2e4\uc81c\ub85c \ud2b9\ubcc4\ud55c \ud074\ub798\uc2a4\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\uc784\uc744 \uae30\uc5b5\ud558\uc138\uc694. \uc815\ubcf4 \ud5e4\ub354\ub97c \uc120\uc5b8\ud558\uae30 \uc704\ud574\uc11c Header \ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ud574\ub2f9 \ub9e4\uac1c\ubcc0\uc218\ub97c \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub85c \ud574\uc11d\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc790\ub3d9 \ubcc0\ud658 \u00b6 Header \ub294 Path , Query \uadf8\ub9ac\uace0 Cookie \uac00 \uc81c\uacf5\ud558\ub294 \uac83 \uc678\uc5d0 \uae30\ub2a5\uc774 \uc870\uae08 \ub354 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \ud45c\uc900 \ud5e4\ub354\ub294 \"\ub9c8\uc774\ub108\uc2a4 \uae30\ud638\" ( - )\ub77c\uace0\ub3c4 \ud558\ub294 \"\ud558\uc774\ud508\" \ubb38\uc790\ub85c \uad6c\ubd84\ub429\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ud30c\uc774\uc36c\uc5d0\uc11c user-agent \uc640 \uac19\uc740 \ud615\ud0dc\uc758 \ubcc0\uc218\ub294 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c Header \ub294 \uae30\ubcf8\uc801\uc73c\ub85c \ub9e4\uac1c\ubcc0\uc218 \uc774\ub984\uc744 \uc5b8\ub354\uc2a4\ucf54\uc5b4( _ )\uc5d0\uc11c \ud558\uc774\ud508( - )\uc73c\ub85c \ubcc0\ud658\ud558\uc5ec \ud5e4\ub354\ub97c \ucd94\ucd9c\ud558\uace0 \uae30\ub85d\ud569\ub2c8\ub2e4. \ub610\ud55c HTTP \ud5e4\ub354\ub294 \ub300\uc18c\ubb38\uc790\ub97c \uad6c\ubd84\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c \"snake_case\"\ub85c \uc54c\ub824\uc9c4 \ud45c\uc900 \ud30c\uc774\uc36c \uc2a4\ud0c0\uc77c\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, User_Agent \ub4f1\uacfc \uac19\uc774 \uccab \ubb38\uc790\ub97c \ub300\ubb38\uc790\ud654\ud560 \ud544\uc694\uc5c6\uc774 \ud30c\uc774\uc36c \ucf54\ub4dc\uc5d0\uc11c\ucc98\ub7fc user_agent \ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub9cc\uc57d \uc5b8\ub354\uc2a4\ucf54\uc5b4\ub97c \ud558\uc774\ud508\uc73c\ub85c \uc790\ub3d9 \ubcc0\ud658\uc744 \ube44\ud65c\uc131\ud654\ud574\uc57c \ud560 \uc5b4\ub5a4 \uc774\uc720\uac00 \uc788\ub2e4\uba74, Header \uc758 convert_underscores \ub9e4\uac1c\ubcc0\uc218\ub97c False \ub85c \uc124\uc815\ud558\uc2ed\uc2dc\uc624: from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( strange_header : Union [ str , None ] = Header ( default = None , convert_underscores = False ) ): return { \"strange_header\" : strange_header } \uacbd\uace0 convert_underscore \ub97c False \ub85c \uc124\uc815\ud558\uae30 \uc804\uc5d0, \uc5b4\ub5a4 HTTP \ud504\ub85d\uc2dc\ub4e4\uacfc \uc11c\ubc84\ub4e4\uc740 \uc5b8\ub354\uc2a4\ucf54\uc5b4\uac00 \ud3ec\ud568\ub41c \ud5e4\ub354 \uc0ac\uc6a9\uc744 \ud5c8\ub77d\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uba85\uc2ec\ud558\uc2ed\uc2dc\uc624. \uc911\ubcf5 \ud5e4\ub354 \u00b6 \uc911\ubcf5 \ud5e4\ub354\ub4e4\uc744 \uc218\uc2e0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989, \ub2e4\uc911\uac12\uc744 \uac16\ub294 \ub3d9\uc77c\ud55c \ud5e4\ub354\ub97c \ub73b\ud569\ub2c8\ub2e4. \ud0c0\uc785 \uc815\uc758\uc5d0\uc11c \ub9ac\uc2a4\ud2b8\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc774\ub7ec\ud55c \ucf00\uc774\uc2a4\ub97c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc911\ubcf5 \ud5e4\ub354\uc758 \ubaa8\ub4e0 \uac12\uc744 \ud30c\uc774\uc36c list \ub85c \uc218\uc2e0\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub450 \ubc88 \uc774\uc0c1 \ub098\ud0c0\ub0a0 \uc218 \uc788\ub294 X-Token \ud5e4\ub354\ub97c \uc120\uc5b8\ud558\ub824\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 \uc791\uc131\ud569\ub2c8\ub2e4: from typing import List , Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( x_token : Union [ List [ str ], None ] = Header ( default = None )): return { \"X-Token values\" : x_token } \ub2e4\uc74c\uacfc \uac19\uc740 \ub450 \uac1c\uc758 HTTP \ud5e4\ub354\ub97c \uc804\uc1a1\ud558\uc5ec \ud574\ub2f9 \uacbd\ub85c \uc640 \ud1b5\uc2e0\ud560 \uacbd\uc6b0: X-Token: foo X-Token: bar \uc751\ub2f5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: { \"X-Token values\" : [ \"bar\" , \"foo\" ] } \uc694\uc57d \u00b6 Header \ub294 Query , Path , Cookie \uc640 \ub3d9\uc77c\ud55c \ud328\ud134\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc120\uc5b8\ud569\ub2c8\ub2e4. \ubcc0\uc218\uc758 \uc5b8\ub354\uc2a4\ucf54\uc5b4\ub97c \uac71\uc815\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624, FastAPI \uac00 \ubcc0\uc218\ub97c \ubcc0\ud658\ud560 \uac83\uc785\ub2c8\ub2e4.","title":"\ud5e4\ub354 \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/header-params/#_1","text":"\ud5e4\ub354 \ub9e4\uac1c\ubcc0\uc218\ub97c Query , Path \uadf8\ub9ac\uace0 Cookie \ub9e4\uac1c\ubcc0\uc218\ub4e4\uacfc \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ud5e4\ub354 \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/header-params/#header","text":"\uba3c\uc800 Header \ub97c \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : Union [ str , None ] = Header ( default = None )): return { \"User-Agent\" : user_agent }","title":"Header \uc784\ud3ec\ud2b8"},{"location":"tutorial/header-params/#header_1","text":"Path , Query \uadf8\ub9ac\uace0 Cookie \ub97c \uc0ac\uc6a9\ud55c \ub3d9\uc77c\ud55c \uad6c\uc870\ub97c \uc774\uc6a9\ud558\uc5ec \ud5e4\ub354 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud569\ub2c8\ub2e4. \uccab \ubc88\uc9f8 \uac12\uc740 \uae30\ubcf8\uac12\uc774\uba70, \ucd94\uac00 \uac80\uc99d\uc774\ub098 \uc5b4\ub178\ud14c\uc774\uc158 \ub9e4\uac1c\ubcc0\uc218 \ubaa8\ub450 \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : Union [ str , None ] = Header ( default = None )): return { \"User-Agent\" : user_agent } \uae30\uc220 \uc138\ubd80\uc0ac\ud56d Header \ub294 Path , Query \ubc0f Cookie \uc758 \"\uc790\ub9e4\"\ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uc774 \uc5ed\uc2dc \ub3d9\uc77c\ud55c \uacf5\ud1b5 Param \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ud569\ub2c8\ub2e4. Query , Path , Header \uadf8\ub9ac\uace0 \ub2e4\ub978 \uac83\ub4e4\uc744 fastapi \uc5d0\uc11c \uc784\ud3ec\ud2b8 \ud560 \ub54c, \uc774\ub4e4\uc740 \uc2e4\uc81c\ub85c \ud2b9\ubcc4\ud55c \ud074\ub798\uc2a4\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\uc784\uc744 \uae30\uc5b5\ud558\uc138\uc694. \uc815\ubcf4 \ud5e4\ub354\ub97c \uc120\uc5b8\ud558\uae30 \uc704\ud574\uc11c Header \ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ud574\ub2f9 \ub9e4\uac1c\ubcc0\uc218\ub97c \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub85c \ud574\uc11d\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.","title":"Header \ub9e4\uac1c\ubcc0\uc218 \uc120\uc5b8"},{"location":"tutorial/header-params/#_2","text":"Header \ub294 Path , Query \uadf8\ub9ac\uace0 Cookie \uac00 \uc81c\uacf5\ud558\ub294 \uac83 \uc678\uc5d0 \uae30\ub2a5\uc774 \uc870\uae08 \ub354 \uc788\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \ud45c\uc900 \ud5e4\ub354\ub294 \"\ub9c8\uc774\ub108\uc2a4 \uae30\ud638\" ( - )\ub77c\uace0\ub3c4 \ud558\ub294 \"\ud558\uc774\ud508\" \ubb38\uc790\ub85c \uad6c\ubd84\ub429\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ud30c\uc774\uc36c\uc5d0\uc11c user-agent \uc640 \uac19\uc740 \ud615\ud0dc\uc758 \ubcc0\uc218\ub294 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c Header \ub294 \uae30\ubcf8\uc801\uc73c\ub85c \ub9e4\uac1c\ubcc0\uc218 \uc774\ub984\uc744 \uc5b8\ub354\uc2a4\ucf54\uc5b4( _ )\uc5d0\uc11c \ud558\uc774\ud508( - )\uc73c\ub85c \ubcc0\ud658\ud558\uc5ec \ud5e4\ub354\ub97c \ucd94\ucd9c\ud558\uace0 \uae30\ub85d\ud569\ub2c8\ub2e4. \ub610\ud55c HTTP \ud5e4\ub354\ub294 \ub300\uc18c\ubb38\uc790\ub97c \uad6c\ubd84\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c \"snake_case\"\ub85c \uc54c\ub824\uc9c4 \ud45c\uc900 \ud30c\uc774\uc36c \uc2a4\ud0c0\uc77c\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, User_Agent \ub4f1\uacfc \uac19\uc774 \uccab \ubb38\uc790\ub97c \ub300\ubb38\uc790\ud654\ud560 \ud544\uc694\uc5c6\uc774 \ud30c\uc774\uc36c \ucf54\ub4dc\uc5d0\uc11c\ucc98\ub7fc user_agent \ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub9cc\uc57d \uc5b8\ub354\uc2a4\ucf54\uc5b4\ub97c \ud558\uc774\ud508\uc73c\ub85c \uc790\ub3d9 \ubcc0\ud658\uc744 \ube44\ud65c\uc131\ud654\ud574\uc57c \ud560 \uc5b4\ub5a4 \uc774\uc720\uac00 \uc788\ub2e4\uba74, Header \uc758 convert_underscores \ub9e4\uac1c\ubcc0\uc218\ub97c False \ub85c \uc124\uc815\ud558\uc2ed\uc2dc\uc624: from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( strange_header : Union [ str , None ] = Header ( default = None , convert_underscores = False ) ): return { \"strange_header\" : strange_header } \uacbd\uace0 convert_underscore \ub97c False \ub85c \uc124\uc815\ud558\uae30 \uc804\uc5d0, \uc5b4\ub5a4 HTTP \ud504\ub85d\uc2dc\ub4e4\uacfc \uc11c\ubc84\ub4e4\uc740 \uc5b8\ub354\uc2a4\ucf54\uc5b4\uac00 \ud3ec\ud568\ub41c \ud5e4\ub354 \uc0ac\uc6a9\uc744 \ud5c8\ub77d\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uba85\uc2ec\ud558\uc2ed\uc2dc\uc624.","title":"\uc790\ub3d9 \ubcc0\ud658"},{"location":"tutorial/header-params/#_3","text":"\uc911\ubcf5 \ud5e4\ub354\ub4e4\uc744 \uc218\uc2e0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989, \ub2e4\uc911\uac12\uc744 \uac16\ub294 \ub3d9\uc77c\ud55c \ud5e4\ub354\ub97c \ub73b\ud569\ub2c8\ub2e4. \ud0c0\uc785 \uc815\uc758\uc5d0\uc11c \ub9ac\uc2a4\ud2b8\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc774\ub7ec\ud55c \ucf00\uc774\uc2a4\ub97c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc911\ubcf5 \ud5e4\ub354\uc758 \ubaa8\ub4e0 \uac12\uc744 \ud30c\uc774\uc36c list \ub85c \uc218\uc2e0\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub450 \ubc88 \uc774\uc0c1 \ub098\ud0c0\ub0a0 \uc218 \uc788\ub294 X-Token \ud5e4\ub354\ub97c \uc120\uc5b8\ud558\ub824\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 \uc791\uc131\ud569\ub2c8\ub2e4: from typing import List , Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( x_token : Union [ List [ str ], None ] = Header ( default = None )): return { \"X-Token values\" : x_token } \ub2e4\uc74c\uacfc \uac19\uc740 \ub450 \uac1c\uc758 HTTP \ud5e4\ub354\ub97c \uc804\uc1a1\ud558\uc5ec \ud574\ub2f9 \uacbd\ub85c \uc640 \ud1b5\uc2e0\ud560 \uacbd\uc6b0: X-Token: foo X-Token: bar \uc751\ub2f5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: { \"X-Token values\" : [ \"bar\" , \"foo\" ] }","title":"\uc911\ubcf5 \ud5e4\ub354"},{"location":"tutorial/header-params/#_4","text":"Header \ub294 Query , Path , Cookie \uc640 \ub3d9\uc77c\ud55c \ud328\ud134\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc120\uc5b8\ud569\ub2c8\ub2e4. \ubcc0\uc218\uc758 \uc5b8\ub354\uc2a4\ucf54\uc5b4\ub97c \uac71\uc815\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624, FastAPI \uac00 \ubcc0\uc218\ub97c \ubcc0\ud658\ud560 \uac83\uc785\ub2c8\ub2e4.","title":"\uc694\uc57d"},{"location":"tutorial/metadata/","text":"Metadata and Docs URLs \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can customize several metadata configurations in your FastAPI application. Metadata for API \u00b6 You can set the following fields that are used in the OpenAPI specification and the automatic API docs UIs: Parameter Type Description title str The title of the API. description str A short description of the API. It can use Markdown. version string The version of the API. This is the version of your own application, not of OpenAPI. For example 2.5.0 . terms_of_service str A URL to the Terms of Service for the API. If provided, this has to be a URL. contact dict The contact information for the exposed API. It can contain several fields. contact fields Parameter Type Description name str The identifying name of the contact person/organization. url str The URL pointing to the contact information. MUST be in the format of a URL. email str The email address of the contact person/organization. MUST be in the format of an email address. license_info dict The license information for the exposed API. It can contain several fields. license_info fields Parameter Type Description name str REQUIRED (if a license_info is set). The license name used for the API. url str A URL to the license used for the API. MUST be in the format of a URL. You can set them as follows: from fastapi import FastAPI description = \"\"\" ChimichangApp API helps you do awesome stuff. \ud83d\ude80 ## Items You can **read items**. ## Users You will be able to: * **Create users** (_not implemented_). * **Read users** (_not implemented_). \"\"\" app = FastAPI ( title = \"ChimichangApp\" , description = description , version = \"0.0.1\" , terms_of_service = \"http://example.com/terms/\" , contact = { \"name\" : \"Deadpoolio the Amazing\" , \"url\" : \"http://x-force.example.com/contact/\" , \"email\" : \"dp@x-force.example.com\" , }, license_info = { \"name\" : \"Apache 2.0\" , \"url\" : \"https://www.apache.org/licenses/LICENSE-2.0.html\" , }, ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Katana\" }] Tip You can write Markdown in the description field and it will be rendered in the output. With this configuration, the automatic API docs would look like: Metadata for tags \u00b6 You can also add additional metadata for the different tags used to group your path operations with the parameter openapi_tags . It takes a list containing one dictionary for each tag. Each dictionary can contain: name ( required ): a str with the same tag name you use in the tags parameter in your path operations and APIRouter s. description : a str with a short description for the tag. It can have Markdown and will be shown in the docs UI. externalDocs : a dict describing external documentation with: description : a str with a short description for the external docs. url ( required ): a str with the URL for the external documentation. Create metadata for tags \u00b6 Let's try that in an example with tags for users and items . Create metadata for your tags and pass it to the openapi_tags parameter: from fastapi import FastAPI tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] Notice that you can use Markdown inside of the descriptions, for example \"login\" will be shown in bold ( login ) and \"fancy\" will be shown in italics ( fancy ). Tip You don't have to add metadata for all the tags that you use. Use your tags \u00b6 Use the tags parameter with your path operations (and APIRouter s) to assign them to different tags: from fastapi import FastAPI tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] Info Read more about tags in Path Operation Configuration . Check the docs \u00b6 Now, if you check the docs, they will show all the additional metadata: Order of tags \u00b6 The order of each tag metadata dictionary also defines the order shown in the docs UI. For example, even though users would go after items in alphabetical order, it is shown before them, because we added their metadata as the first dictionary in the list. OpenAPI URL \u00b6 By default, the OpenAPI schema is served at /openapi.json . But you can configure it with the parameter openapi_url . For example, to set it to be served at /api/v1/openapi.json : from fastapi import FastAPI app = FastAPI ( openapi_url = \"/api/v1/openapi.json\" ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] If you want to disable the OpenAPI schema completely you can set openapi_url=None , that will also disable the documentation user interfaces that use it. Docs URLs \u00b6 You can configure the two documentation user interfaces included: Swagger UI : served at /docs . You can set its URL with the parameter docs_url . You can disable it by setting docs_url=None . ReDoc: served at /redoc . You can set its URL with the parameter redoc_url . You can disable it by setting redoc_url=None . For example, to set Swagger UI to be served at /documentation and disable ReDoc: from fastapi import FastAPI app = FastAPI ( docs_url = \"/documentation\" , redoc_url = None ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }]","title":"Metadata and Docs URLs"},{"location":"tutorial/metadata/#metadata-and-docs-urls","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can customize several metadata configurations in your FastAPI application.","title":"Metadata and Docs URLs"},{"location":"tutorial/metadata/#metadata-for-api","text":"You can set the following fields that are used in the OpenAPI specification and the automatic API docs UIs: Parameter Type Description title str The title of the API. description str A short description of the API. It can use Markdown. version string The version of the API. This is the version of your own application, not of OpenAPI. For example 2.5.0 . terms_of_service str A URL to the Terms of Service for the API. If provided, this has to be a URL. contact dict The contact information for the exposed API. It can contain several fields. contact fields Parameter Type Description name str The identifying name of the contact person/organization. url str The URL pointing to the contact information. MUST be in the format of a URL. email str The email address of the contact person/organization. MUST be in the format of an email address. license_info dict The license information for the exposed API. It can contain several fields. license_info fields Parameter Type Description name str REQUIRED (if a license_info is set). The license name used for the API. url str A URL to the license used for the API. MUST be in the format of a URL. You can set them as follows: from fastapi import FastAPI description = \"\"\" ChimichangApp API helps you do awesome stuff. \ud83d\ude80 ## Items You can **read items**. ## Users You will be able to: * **Create users** (_not implemented_). * **Read users** (_not implemented_). \"\"\" app = FastAPI ( title = \"ChimichangApp\" , description = description , version = \"0.0.1\" , terms_of_service = \"http://example.com/terms/\" , contact = { \"name\" : \"Deadpoolio the Amazing\" , \"url\" : \"http://x-force.example.com/contact/\" , \"email\" : \"dp@x-force.example.com\" , }, license_info = { \"name\" : \"Apache 2.0\" , \"url\" : \"https://www.apache.org/licenses/LICENSE-2.0.html\" , }, ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Katana\" }] Tip You can write Markdown in the description field and it will be rendered in the output. With this configuration, the automatic API docs would look like:","title":"Metadata for API"},{"location":"tutorial/metadata/#metadata-for-tags","text":"You can also add additional metadata for the different tags used to group your path operations with the parameter openapi_tags . It takes a list containing one dictionary for each tag. Each dictionary can contain: name ( required ): a str with the same tag name you use in the tags parameter in your path operations and APIRouter s. description : a str with a short description for the tag. It can have Markdown and will be shown in the docs UI. externalDocs : a dict describing external documentation with: description : a str with a short description for the external docs. url ( required ): a str with the URL for the external documentation.","title":"Metadata for tags"},{"location":"tutorial/metadata/#create-metadata-for-tags","text":"Let's try that in an example with tags for users and items . Create metadata for your tags and pass it to the openapi_tags parameter: from fastapi import FastAPI tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] Notice that you can use Markdown inside of the descriptions, for example \"login\" will be shown in bold ( login ) and \"fancy\" will be shown in italics ( fancy ). Tip You don't have to add metadata for all the tags that you use.","title":"Create metadata for tags"},{"location":"tutorial/metadata/#use-your-tags","text":"Use the tags parameter with your path operations (and APIRouter s) to assign them to different tags: from fastapi import FastAPI tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] Info Read more about tags in Path Operation Configuration .","title":"Use your tags"},{"location":"tutorial/metadata/#check-the-docs","text":"Now, if you check the docs, they will show all the additional metadata:","title":"Check the docs"},{"location":"tutorial/metadata/#order-of-tags","text":"The order of each tag metadata dictionary also defines the order shown in the docs UI. For example, even though users would go after items in alphabetical order, it is shown before them, because we added their metadata as the first dictionary in the list.","title":"Order of tags"},{"location":"tutorial/metadata/#openapi-url","text":"By default, the OpenAPI schema is served at /openapi.json . But you can configure it with the parameter openapi_url . For example, to set it to be served at /api/v1/openapi.json : from fastapi import FastAPI app = FastAPI ( openapi_url = \"/api/v1/openapi.json\" ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] If you want to disable the OpenAPI schema completely you can set openapi_url=None , that will also disable the documentation user interfaces that use it.","title":"OpenAPI URL"},{"location":"tutorial/metadata/#docs-urls","text":"You can configure the two documentation user interfaces included: Swagger UI : served at /docs . You can set its URL with the parameter docs_url . You can disable it by setting docs_url=None . ReDoc: served at /redoc . You can set its URL with the parameter redoc_url . You can disable it by setting redoc_url=None . For example, to set Swagger UI to be served at /documentation and disable ReDoc: from fastapi import FastAPI app = FastAPI ( docs_url = \"/documentation\" , redoc_url = None ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }]","title":"Docs URLs"},{"location":"tutorial/middleware/","text":"\ubbf8\ub4e4\uc6e8\uc5b4 \u00b6 \ubbf8\ub4e4\uc6e8\uc5b4\ub97c FastAPI \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \"\ubbf8\ub4e4\uc6e8\uc5b4\"\ub294 \ud2b9\uc815 \uacbd\ub85c \uc791\ub3d9 \uc5d0 \uc758\ud574 \ucc98\ub9ac\ub418\uae30 \uc804, \ubaa8\ub4e0 \uc694\uccad \uc5d0 \ub300\ud574\uc11c \ub3d9\uc791\ud558\ub294 \ud568\uc218\uc785\ub2c8\ub2e4. \ub610\ud55c \ubaa8\ub4e0 \uc751\ub2f5 \uc774 \ubc18\ud658\ub418\uae30 \uc804\uc5d0\ub3c4 \ub3d9\uc77c\ud558\uac8c \ub3d9\uc791\ud569\ub2c8\ub2e4. \ubbf8\ub4e4\uc6e8\uc5b4\ub294 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc73c\ub85c \uc624\ub294 \uc694\uccad \ub97c \uac00\uc838\uc635\ub2c8\ub2e4. \uc694\uccad \ub610\ub294 \ub2e4\ub978 \ud544\uc694\ud55c \ucf54\ub4dc\ub97c \uc2e4\ud589 \uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc694\uccad \uc744 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc758 \uacbd\ub85c \uc791\ub3d9 \uc73c\ub85c \uc804\ub2ec\ud558\uc5ec \ucc98\ub9ac\ud569\ub2c8\ub2e4. \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uacbd\ub85c \uc791\uc5c5 \uc5d0\uc11c \uc0dd\uc131\ud55c \uc751\ub2f5 \ub97c \ubc1b\uc2b5\ub2c8\ub2e4. \uc751\ub2f5 \ub610\ub294 \ub2e4\ub978 \ud544\uc694\ud55c \ucf54\ub4dc\ub97c \uc2e4\ud589\uc2dc\ud0a4\ub294 \ub3d9\uc791\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc751\ub2f5 \ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uae30\uc220 \uc138\ubd80\uc0ac\ud56d \ub9cc\uc57d yield \ub97c \uc0ac\uc6a9\ud55c \uc758\uc874\uc131\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \ubbf8\ub4e4\uc6e8\uc5b4\uac00 \uc2e4\ud589\ub418\uace0 \ub09c \ud6c4\uc5d0 exit\uc774 \uc2e4\ud589\ub429\ub2c8\ub2e4. \ub9cc\uc57d (\ub098\uc911\uc5d0 \ubb38\uc11c\uc5d0\uc11c \ub2e4\ub8f0) \ubc31\uadf8\ub77c\uc6b4\ub4dc \uc791\uc5c5\uc774 \uc788\ub2e4\uba74, \ubaa8\ub4e0 \ubbf8\ub4e4\uc6e8\uc5b4\uac00 \uc2e4\ud589\ub418\uace0 \ub09c \ud6c4\uc5d0 \uc2e4\ud589\ub429\ub2c8\ub2e4. \ubbf8\ub4e4\uc6e8\uc5b4 \ub9cc\ub4e4\uae30 \u00b6 \ubbf8\ub4e4\uc6e8\uc5b4\ub97c \uc791\uc131\ud558\uae30 \uc704\ud574\uc11c \ud568\uc218 \uc0c1\ub2e8\uc5d0 @app.middleware(\"http\") \ub370\ucf54\ub808\uc774\ud130\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubbf8\ub4e4\uc6e8\uc5b4 \ud568\uc218\ub294 \ub2e4\uc74c \ud56d\ubaa9\ub4e4\uc744 \ubc1b\uc2b5\ub2c8\ub2e4: request . request \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\ub294 call_next \ud568\uc218. \uc774 \ud568\uc218\ub294 request \ub97c \ud574\ub2f9\ud558\ub294 \uacbd\ub85c \uc791\uc5c5 \uc73c\ub85c \uc804\ub2ec\ud569\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c, \uacbd\ub85c \uc791\uc5c5 \uc5d0 \uc758\ud574 \uc0dd\uc131\ub41c response \ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. response \ub97c \ubc18\ud658\ud558\uae30 \uc804\uc5d0 \ucd94\uac00\ub85c response \ub97c \uc218\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. import time from fastapi import FastAPI , Request app = FastAPI () @app . middleware ( \"http\" ) async def add_process_time_header ( request : Request , call_next ): start_time = time . time () response = await call_next ( request ) process_time = time . time () - start_time response . headers [ \"X-Process-Time\" ] = str ( process_time ) return response \ud301 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud5e4\ub354\ub294 'X-' \uc811\ub450\uc0ac\ub97c \uc0ac\uc6a9 \ud558\uc5ec \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub9cc\uc57d \ud074\ub77c\uc774\uc5b8\ud2b8\uc758 \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c \ubcfc \uc218 \uc788\ub294 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud5e4\ub354\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \uadf8\uac83\ub4e4\uc744 CORS \uc124\uc815( CORS (Cross-Origin Resource Sharing) )\uc5d0 Starlette CORS \ubb38\uc11c \uc5d0 \uba85\uc2dc\ub41c expose_headers \ub9e4\uac1c\ubcc0\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \ud5e4\ub354\ub4e4\uc744 \ucd94\uac00\ud558\uc5ec\uc57c\ud569\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d from starlette.requests import request \ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac1c\ubc1c\uc790\uc5d0\uac8c \ud3b8\uc758\ub97c \uc704\ud574 \uc774\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 Starlette\uc5d0\uc11c \uc9c1\uc811 \ud30c\uc0dd\ub418\uc5c8\uc2b5\ub2c8\ub2e4. response \uc758 \uc804\uacfc \ud6c4 \u00b6 \uacbd\ub85c \uc791\ub3d9 \uc744 \ubc1b\uae30 \uc804 request \uc640 \ud568\uaed8 \uc791\ub3d9\ud560 \uc218 \uc788\ub294 \ucf54\ub4dc\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 response \ub610\ud55c \uc0dd\uc131\ub41c \ud6c4 \ubc18\ud658\ub418\uae30 \uc804\uc5d0 \ucf54\ub4dc\ub97c \ucd94\uac00 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc694\uccad\uc744 \uc218\ud589\ud558\uace0 \uc751\ub2f5\uc744 \uc0dd\uc131\ud558\ub294\ub370 \uae4c\uc9c0 \uac78\ub9b0 \uc2dc\uac04 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub294 X-Process-Time \uac19\uc740 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud5e4\ub354\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. import time from fastapi import FastAPI , Request app = FastAPI () @app . middleware ( \"http\" ) async def add_process_time_header ( request : Request , call_next ): start_time = time . time () response = await call_next ( request ) process_time = time . time () - start_time response . headers [ \"X-Process-Time\" ] = str ( process_time ) return response \ub2e4\ub978 \ubbf8\ub4e4\uc6e8\uc5b4 \u00b6 \ubbf8\ub4e4\uc6e8\uc5b4\uc5d0 \ub300\ud55c \ub354 \ub9ce\uc740 \uc815\ubcf4\ub294 \uc219\ub828\ub41c \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c: \ud5a5\uc0c1\ub41c \ubbf8\ub4e4\uc6e8\uc5b4 \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ubd80\ubd84\uc5d0\uc11c \ubbf8\ub4e4\uc6e8\uc5b4\uc640 \ud568\uaed8 CORS \ub97c \uc5b4\ub5bb\uac8c \ub2e4\ub8e8\ub294\uc9c0\uc5d0 \ub300\ud574 \ud655\uc778\ud560 \uac83\uc785\ub2c8\ub2e4.","title":"\ubbf8\ub4e4\uc6e8\uc5b4"},{"location":"tutorial/middleware/#_1","text":"\ubbf8\ub4e4\uc6e8\uc5b4\ub97c FastAPI \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \"\ubbf8\ub4e4\uc6e8\uc5b4\"\ub294 \ud2b9\uc815 \uacbd\ub85c \uc791\ub3d9 \uc5d0 \uc758\ud574 \ucc98\ub9ac\ub418\uae30 \uc804, \ubaa8\ub4e0 \uc694\uccad \uc5d0 \ub300\ud574\uc11c \ub3d9\uc791\ud558\ub294 \ud568\uc218\uc785\ub2c8\ub2e4. \ub610\ud55c \ubaa8\ub4e0 \uc751\ub2f5 \uc774 \ubc18\ud658\ub418\uae30 \uc804\uc5d0\ub3c4 \ub3d9\uc77c\ud558\uac8c \ub3d9\uc791\ud569\ub2c8\ub2e4. \ubbf8\ub4e4\uc6e8\uc5b4\ub294 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc73c\ub85c \uc624\ub294 \uc694\uccad \ub97c \uac00\uc838\uc635\ub2c8\ub2e4. \uc694\uccad \ub610\ub294 \ub2e4\ub978 \ud544\uc694\ud55c \ucf54\ub4dc\ub97c \uc2e4\ud589 \uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc694\uccad \uc744 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc758 \uacbd\ub85c \uc791\ub3d9 \uc73c\ub85c \uc804\ub2ec\ud558\uc5ec \ucc98\ub9ac\ud569\ub2c8\ub2e4. \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uacbd\ub85c \uc791\uc5c5 \uc5d0\uc11c \uc0dd\uc131\ud55c \uc751\ub2f5 \ub97c \ubc1b\uc2b5\ub2c8\ub2e4. \uc751\ub2f5 \ub610\ub294 \ub2e4\ub978 \ud544\uc694\ud55c \ucf54\ub4dc\ub97c \uc2e4\ud589\uc2dc\ud0a4\ub294 \ub3d9\uc791\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc751\ub2f5 \ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uae30\uc220 \uc138\ubd80\uc0ac\ud56d \ub9cc\uc57d yield \ub97c \uc0ac\uc6a9\ud55c \uc758\uc874\uc131\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \ubbf8\ub4e4\uc6e8\uc5b4\uac00 \uc2e4\ud589\ub418\uace0 \ub09c \ud6c4\uc5d0 exit\uc774 \uc2e4\ud589\ub429\ub2c8\ub2e4. \ub9cc\uc57d (\ub098\uc911\uc5d0 \ubb38\uc11c\uc5d0\uc11c \ub2e4\ub8f0) \ubc31\uadf8\ub77c\uc6b4\ub4dc \uc791\uc5c5\uc774 \uc788\ub2e4\uba74, \ubaa8\ub4e0 \ubbf8\ub4e4\uc6e8\uc5b4\uac00 \uc2e4\ud589\ub418\uace0 \ub09c \ud6c4\uc5d0 \uc2e4\ud589\ub429\ub2c8\ub2e4.","title":"\ubbf8\ub4e4\uc6e8\uc5b4"},{"location":"tutorial/middleware/#_2","text":"\ubbf8\ub4e4\uc6e8\uc5b4\ub97c \uc791\uc131\ud558\uae30 \uc704\ud574\uc11c \ud568\uc218 \uc0c1\ub2e8\uc5d0 @app.middleware(\"http\") \ub370\ucf54\ub808\uc774\ud130\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubbf8\ub4e4\uc6e8\uc5b4 \ud568\uc218\ub294 \ub2e4\uc74c \ud56d\ubaa9\ub4e4\uc744 \ubc1b\uc2b5\ub2c8\ub2e4: request . request \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\ub294 call_next \ud568\uc218. \uc774 \ud568\uc218\ub294 request \ub97c \ud574\ub2f9\ud558\ub294 \uacbd\ub85c \uc791\uc5c5 \uc73c\ub85c \uc804\ub2ec\ud569\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c, \uacbd\ub85c \uc791\uc5c5 \uc5d0 \uc758\ud574 \uc0dd\uc131\ub41c response \ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. response \ub97c \ubc18\ud658\ud558\uae30 \uc804\uc5d0 \ucd94\uac00\ub85c response \ub97c \uc218\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. import time from fastapi import FastAPI , Request app = FastAPI () @app . middleware ( \"http\" ) async def add_process_time_header ( request : Request , call_next ): start_time = time . time () response = await call_next ( request ) process_time = time . time () - start_time response . headers [ \"X-Process-Time\" ] = str ( process_time ) return response \ud301 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud5e4\ub354\ub294 'X-' \uc811\ub450\uc0ac\ub97c \uc0ac\uc6a9 \ud558\uc5ec \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub9cc\uc57d \ud074\ub77c\uc774\uc5b8\ud2b8\uc758 \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c \ubcfc \uc218 \uc788\ub294 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud5e4\ub354\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \uadf8\uac83\ub4e4\uc744 CORS \uc124\uc815( CORS (Cross-Origin Resource Sharing) )\uc5d0 Starlette CORS \ubb38\uc11c \uc5d0 \uba85\uc2dc\ub41c expose_headers \ub9e4\uac1c\ubcc0\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \ud5e4\ub354\ub4e4\uc744 \ucd94\uac00\ud558\uc5ec\uc57c\ud569\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d from starlette.requests import request \ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac1c\ubc1c\uc790\uc5d0\uac8c \ud3b8\uc758\ub97c \uc704\ud574 \uc774\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 Starlette\uc5d0\uc11c \uc9c1\uc811 \ud30c\uc0dd\ub418\uc5c8\uc2b5\ub2c8\ub2e4.","title":"\ubbf8\ub4e4\uc6e8\uc5b4 \ub9cc\ub4e4\uae30"},{"location":"tutorial/middleware/#response","text":"\uacbd\ub85c \uc791\ub3d9 \uc744 \ubc1b\uae30 \uc804 request \uc640 \ud568\uaed8 \uc791\ub3d9\ud560 \uc218 \uc788\ub294 \ucf54\ub4dc\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 response \ub610\ud55c \uc0dd\uc131\ub41c \ud6c4 \ubc18\ud658\ub418\uae30 \uc804\uc5d0 \ucf54\ub4dc\ub97c \ucd94\uac00 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc694\uccad\uc744 \uc218\ud589\ud558\uace0 \uc751\ub2f5\uc744 \uc0dd\uc131\ud558\ub294\ub370 \uae4c\uc9c0 \uac78\ub9b0 \uc2dc\uac04 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub294 X-Process-Time \uac19\uc740 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud5e4\ub354\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. import time from fastapi import FastAPI , Request app = FastAPI () @app . middleware ( \"http\" ) async def add_process_time_header ( request : Request , call_next ): start_time = time . time () response = await call_next ( request ) process_time = time . time () - start_time response . headers [ \"X-Process-Time\" ] = str ( process_time ) return response","title":"response\uc758 \uc804\uacfc \ud6c4"},{"location":"tutorial/middleware/#_3","text":"\ubbf8\ub4e4\uc6e8\uc5b4\uc5d0 \ub300\ud55c \ub354 \ub9ce\uc740 \uc815\ubcf4\ub294 \uc219\ub828\ub41c \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c: \ud5a5\uc0c1\ub41c \ubbf8\ub4e4\uc6e8\uc5b4 \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ubd80\ubd84\uc5d0\uc11c \ubbf8\ub4e4\uc6e8\uc5b4\uc640 \ud568\uaed8 CORS \ub97c \uc5b4\ub5bb\uac8c \ub2e4\ub8e8\ub294\uc9c0\uc5d0 \ub300\ud574 \ud655\uc778\ud560 \uac83\uc785\ub2c8\ub2e4.","title":"\ub2e4\ub978 \ubbf8\ub4e4\uc6e8\uc5b4"},{"location":"tutorial/path-operation-configuration/","text":"\uacbd\ub85c \ub3d9\uc791 \uc124\uc815 \u00b6 \uacbd\ub85c \uc791\ub3d9 \ub370\ucf54\ub808\uc774\ud130 \ub97c \uc124\uc815\ud558\uae30 \uc704\ud574\uc11c \uc804\ub2ec\ud560\uc218 \uc788\ub294 \uba87 \uac00\uc9c0 \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uacbd\uace0 \uc544\ub798 \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc740 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uac00 \uc544\ub2cc \uacbd\ub85c \uc791\ub3d9 \ub370\ucf54\ub808\uc774\ud130 \uc5d0 \uc9c1\uc811 \uc804\ub2ec\ub41c\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uae30\uc5b5\ud558\uc2ed\uc2dc\uc624. \uc751\ub2f5 \uc0c1\ud0dc \ucf54\ub4dc \u00b6 \uacbd\ub85c \uc791\ub3d9 \uc758 \uc751\ub2f5\uc5d0 \uc0ac\uc6a9\ub420 (HTTP) status_code \ub97c \uc815\uc758\ud560\uc218 \uc788\uc2b5\ub2c8\ub2e4. 404 \uc640 \uac19\uc740 int \ud615 \ucf54\ub4dc\ub97c \uc9c1\uc811 \uc804\ub2ec\ud560\uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uac01 \ucf54\ub4dc\uc758 \uc758\ubbf8\ub97c \ubaa8\ub978\ub2e4\uba74, status \uc5d0 \uc788\ub294 \ub2e8\ucd95 \uc0c1\uc218\ub4e4\uc744 \uc0ac\uc6a9\ud560\uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI , status from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , status_code = status . HTTP_201_CREATED ) async def create_item ( item : Item ): return item \uac01 \uc0c1\ud0dc \ucf54\ub4dc\ub4e4\uc740 \uc751\ub2f5\uc5d0 \uc0ac\uc6a9\ub418\uba70, OpenAPI \uc2a4\ud0a4\ub9c8\uc5d0 \ucd94\uac00\ub429\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d \ub2e4\uc74c\uacfc \uac19\uc774 \uc784\ud3ec\ud2b8\ud558\uc154\ub3c4 \uc88b\uc2b5\ub2c8\ub2e4. from starlette import status . FastAPI \ub294 \uac1c\ubc1c\uc790 \uc5ec\ub7ec\ubd84\uc758 \ud3b8\uc758\ub97c \uc704\ud574\uc11c starlette.status \uc640 \ub3d9\uc77c\ud55c fastapi.status \ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Starlette\uc5d0\uc11c \uc9c1\uc811 \uc628 \uac83\uc785\ub2c8\ub2e4. \ud0dc\uadf8 \u00b6 (\ubcf4\ud1b5 \ub2e8\uc77c str \uc778) str \ub85c \uad6c\uc131\ub41c list \uc640 \ud568\uaed8 \ub9e4\uac1c\ubcc0\uc218 tags \ub97c \uc804\ub2ec\ud558\uc5ec, \uacbd\ub85c \uc791\ub3d9 \uc5d0 \ud0dc\uadf8\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , tags = [ \"items\" ]) async def create_item ( item : Item ): return item @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] \uc804\ub2ec\ub41c \ud0dc\uadf8\ub4e4\uc740 OpenAPI\uc758 \uc2a4\ud0a4\ub9c8\uc5d0 \ucd94\uac00\ub418\uba70, \uc790\ub3d9 \ubb38\uc11c \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c \uc0ac\uc6a9\ub429\ub2c8\ub2e4: \uc694\uc57d\uacfc \uae30\uc220 \u00b6 summary \uc640 description \uc744 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , description = \"Create an item with all the information, name, description, price, tax and a set of unique tags\" , ) async def create_item ( item : Item ): return item \ub3c5\uc2a4\ud2b8\ub9c1\uc73c\ub85c \ub9cc\ub4e0 \uae30\uc220 \u00b6 \uc124\uba85\uc740 \ubcf4\ud1b5 \uae38\uc5b4\uc9c0\uace0 \uc5ec\ub7ec \uc904\uc5d0 \uac78\uccd0\uc788\uae30 \ub54c\ubb38\uc5d0, \uacbd\ub85c \uc791\ub3d9 \uae30\uc220\uc744 \ud568\uc218 \ub3c5\uc2a4\ud2b8\ub9c1 \uc5d0 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4, \uc774\ub97c FastAPI \uac00 \ub3c5\uc2a4\ud2b8\ub9c1\uc73c\ub85c\ubd80\ud130 \uc77d\uc2b5\ub2c8\ub2e4. \ub9c8\ud06c\ub2e4\uc6b4 \ubb38\ubc95\uc73c\ub85c \ub3c5\uc2a4\ud2b8\ub9c1\uc744 \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4, \uc791\uc131\ub41c \ub9c8\ud06c\ub2e4\uc6b4 \ud615\uc2dd\uc758 \ub3c5\uc2a4\ud2b8\ub9c1\uc740 (\ub9c8\ud06c\ub2e4\uc6b4\uc758 \ub4e4\uc5ec\uc4f0\uae30\ub97c \uace0\ub824\ud558\uc5ec) \uc62c\ubc14\ub974\uac8c \ud654\uba74\uc5d0 \ucd9c\ub825\ub429\ub2c8\ub2e4. from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item \uc774\ub294 \ub300\ud654\ud615 \ubb38\uc11c\uc5d0\uc11c \uc0ac\uc6a9\ub429\ub2c8\ub2e4: \uc751\ub2f5 \uae30\uc220 \u00b6 response_description \ub9e4\uac1c\ubcc0\uc218\ub85c \uc751\ub2f5\uc5d0 \uad00\ud55c \uc124\uba85\uc744 \uba85\uc2dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , response_description = \"The created item\" , ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item \uc815\ubcf4 response_description \uc740 \uad6c\uccb4\uc801\uc73c\ub85c \uc751\ub2f5\uc744 \uc9c0\uce6d\ud558\uba70, description \uc740 \uc77c\ubc18\uc801\uc778 \uacbd\ub85c \uc791\ub3d9 \uc744 \uc9c0\uce6d\ud569\ub2c8\ub2e4. \ud655\uc778 OpenAPI\ub294 \uac01 \uacbd\ub85c \uc791\ub3d9 \uc774 \uc751\ub2f5\uc5d0 \uad00\ud55c \uc124\uba85\uc744 \uc694\uad6c\ud560 \uac83\uc744 \uba85\uc2dc\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc751\ub2f5\uc5d0 \uad00\ud55c \uc124\uba85\uc774 \uc5c6\uc744\uacbd\uc6b0, FastAPI \uac00 \uc790\ub3d9\uc73c\ub85c \"\uc131\uacf5 \uc751\ub2f5\" \uc911 \ud558\ub098\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \ub2e8\uc77c \uacbd\ub85c \uc791\ub3d9 \uc9c0\uc6d0\uc911\ub2e8 \u00b6 \ub2e8\uc77c \uacbd\ub85c \uc791\ub3d9 \uc744 \uc5c6\uc560\uc9c0 \uc54a\uace0 \uc9c0\uc6d0\uc911\ub2e8 \uc744 \ud574\uc57c\ud55c\ub2e4\uba74, deprecated \ub9e4\uac1c\ubcc0\uc218\ub97c \uc804\ub2ec\ud558\uba74 \ub429\ub2c8\ub2e4. from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] @app . get ( \"/elements/\" , tags = [ \"items\" ], deprecated = True ) async def read_elements (): return [{ \"item_id\" : \"Foo\" }] \ub300\ud654\ud615 \ubb38\uc11c\uc5d0 \uc9c0\uc6d0\uc911\ub2e8\uc774\ub77c\uace0 \ud45c\uc2dc\ub429\ub2c8\ub2e4. \uc9c0\uc6d0\uc911\ub2e8\ub41c \uacbd\uc6b0\uc640 \uc9c0\uc6d0\uc911\ub2e8 \ub418\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uc5d0 \ub300\ud55c \uacbd\ub85c \uc791\ub3d9 \uc774 \uc5b4\ub5bb\uac8c \ubcf4\uc774\ub294 \uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \uc815\ub9ac \u00b6 \uacbd\ub85c \uc791\ub3d9 \ub370\ucf54\ub808\uc774\ud130 \uc5d0 \ub9e4\uac1c\ubcc0\uc218(\ub4e4)\ub97c \uc804\ub2ec\ud568\uc73c\ub85c \uacbd\ub85c \uc791\ub3d9 \uc744 \uc124\uc815\ud558\uace0 \uba54\ud0c0\ub370\uc774\ud130\ub97c \ucd94\uac00\ud560\uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uacbd\ub85c \ub3d9\uc791 \uc124\uc815"},{"location":"tutorial/path-operation-configuration/#_1","text":"\uacbd\ub85c \uc791\ub3d9 \ub370\ucf54\ub808\uc774\ud130 \ub97c \uc124\uc815\ud558\uae30 \uc704\ud574\uc11c \uc804\ub2ec\ud560\uc218 \uc788\ub294 \uba87 \uac00\uc9c0 \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uacbd\uace0 \uc544\ub798 \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc740 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uac00 \uc544\ub2cc \uacbd\ub85c \uc791\ub3d9 \ub370\ucf54\ub808\uc774\ud130 \uc5d0 \uc9c1\uc811 \uc804\ub2ec\ub41c\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uae30\uc5b5\ud558\uc2ed\uc2dc\uc624.","title":"\uacbd\ub85c \ub3d9\uc791 \uc124\uc815"},{"location":"tutorial/path-operation-configuration/#_2","text":"\uacbd\ub85c \uc791\ub3d9 \uc758 \uc751\ub2f5\uc5d0 \uc0ac\uc6a9\ub420 (HTTP) status_code \ub97c \uc815\uc758\ud560\uc218 \uc788\uc2b5\ub2c8\ub2e4. 404 \uc640 \uac19\uc740 int \ud615 \ucf54\ub4dc\ub97c \uc9c1\uc811 \uc804\ub2ec\ud560\uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uac01 \ucf54\ub4dc\uc758 \uc758\ubbf8\ub97c \ubaa8\ub978\ub2e4\uba74, status \uc5d0 \uc788\ub294 \ub2e8\ucd95 \uc0c1\uc218\ub4e4\uc744 \uc0ac\uc6a9\ud560\uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI , status from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , status_code = status . HTTP_201_CREATED ) async def create_item ( item : Item ): return item \uac01 \uc0c1\ud0dc \ucf54\ub4dc\ub4e4\uc740 \uc751\ub2f5\uc5d0 \uc0ac\uc6a9\ub418\uba70, OpenAPI \uc2a4\ud0a4\ub9c8\uc5d0 \ucd94\uac00\ub429\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d \ub2e4\uc74c\uacfc \uac19\uc774 \uc784\ud3ec\ud2b8\ud558\uc154\ub3c4 \uc88b\uc2b5\ub2c8\ub2e4. from starlette import status . FastAPI \ub294 \uac1c\ubc1c\uc790 \uc5ec\ub7ec\ubd84\uc758 \ud3b8\uc758\ub97c \uc704\ud574\uc11c starlette.status \uc640 \ub3d9\uc77c\ud55c fastapi.status \ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Starlette\uc5d0\uc11c \uc9c1\uc811 \uc628 \uac83\uc785\ub2c8\ub2e4.","title":"\uc751\ub2f5 \uc0c1\ud0dc \ucf54\ub4dc"},{"location":"tutorial/path-operation-configuration/#_3","text":"(\ubcf4\ud1b5 \ub2e8\uc77c str \uc778) str \ub85c \uad6c\uc131\ub41c list \uc640 \ud568\uaed8 \ub9e4\uac1c\ubcc0\uc218 tags \ub97c \uc804\ub2ec\ud558\uc5ec, \uacbd\ub85c \uc791\ub3d9 \uc5d0 \ud0dc\uadf8\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , tags = [ \"items\" ]) async def create_item ( item : Item ): return item @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] \uc804\ub2ec\ub41c \ud0dc\uadf8\ub4e4\uc740 OpenAPI\uc758 \uc2a4\ud0a4\ub9c8\uc5d0 \ucd94\uac00\ub418\uba70, \uc790\ub3d9 \ubb38\uc11c \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c \uc0ac\uc6a9\ub429\ub2c8\ub2e4:","title":"\ud0dc\uadf8"},{"location":"tutorial/path-operation-configuration/#_4","text":"summary \uc640 description \uc744 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , description = \"Create an item with all the information, name, description, price, tax and a set of unique tags\" , ) async def create_item ( item : Item ): return item","title":"\uc694\uc57d\uacfc \uae30\uc220"},{"location":"tutorial/path-operation-configuration/#_5","text":"\uc124\uba85\uc740 \ubcf4\ud1b5 \uae38\uc5b4\uc9c0\uace0 \uc5ec\ub7ec \uc904\uc5d0 \uac78\uccd0\uc788\uae30 \ub54c\ubb38\uc5d0, \uacbd\ub85c \uc791\ub3d9 \uae30\uc220\uc744 \ud568\uc218 \ub3c5\uc2a4\ud2b8\ub9c1 \uc5d0 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4, \uc774\ub97c FastAPI \uac00 \ub3c5\uc2a4\ud2b8\ub9c1\uc73c\ub85c\ubd80\ud130 \uc77d\uc2b5\ub2c8\ub2e4. \ub9c8\ud06c\ub2e4\uc6b4 \ubb38\ubc95\uc73c\ub85c \ub3c5\uc2a4\ud2b8\ub9c1\uc744 \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4, \uc791\uc131\ub41c \ub9c8\ud06c\ub2e4\uc6b4 \ud615\uc2dd\uc758 \ub3c5\uc2a4\ud2b8\ub9c1\uc740 (\ub9c8\ud06c\ub2e4\uc6b4\uc758 \ub4e4\uc5ec\uc4f0\uae30\ub97c \uace0\ub824\ud558\uc5ec) \uc62c\ubc14\ub974\uac8c \ud654\uba74\uc5d0 \ucd9c\ub825\ub429\ub2c8\ub2e4. from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item \uc774\ub294 \ub300\ud654\ud615 \ubb38\uc11c\uc5d0\uc11c \uc0ac\uc6a9\ub429\ub2c8\ub2e4:","title":"\ub3c5\uc2a4\ud2b8\ub9c1\uc73c\ub85c \ub9cc\ub4e0 \uae30\uc220"},{"location":"tutorial/path-operation-configuration/#_6","text":"response_description \ub9e4\uac1c\ubcc0\uc218\ub85c \uc751\ub2f5\uc5d0 \uad00\ud55c \uc124\uba85\uc744 \uba85\uc2dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , response_description = \"The created item\" , ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item \uc815\ubcf4 response_description \uc740 \uad6c\uccb4\uc801\uc73c\ub85c \uc751\ub2f5\uc744 \uc9c0\uce6d\ud558\uba70, description \uc740 \uc77c\ubc18\uc801\uc778 \uacbd\ub85c \uc791\ub3d9 \uc744 \uc9c0\uce6d\ud569\ub2c8\ub2e4. \ud655\uc778 OpenAPI\ub294 \uac01 \uacbd\ub85c \uc791\ub3d9 \uc774 \uc751\ub2f5\uc5d0 \uad00\ud55c \uc124\uba85\uc744 \uc694\uad6c\ud560 \uac83\uc744 \uba85\uc2dc\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uc751\ub2f5\uc5d0 \uad00\ud55c \uc124\uba85\uc774 \uc5c6\uc744\uacbd\uc6b0, FastAPI \uac00 \uc790\ub3d9\uc73c\ub85c \"\uc131\uacf5 \uc751\ub2f5\" \uc911 \ud558\ub098\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.","title":"\uc751\ub2f5 \uae30\uc220"},{"location":"tutorial/path-operation-configuration/#_7","text":"\ub2e8\uc77c \uacbd\ub85c \uc791\ub3d9 \uc744 \uc5c6\uc560\uc9c0 \uc54a\uace0 \uc9c0\uc6d0\uc911\ub2e8 \uc744 \ud574\uc57c\ud55c\ub2e4\uba74, deprecated \ub9e4\uac1c\ubcc0\uc218\ub97c \uc804\ub2ec\ud558\uba74 \ub429\ub2c8\ub2e4. from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] @app . get ( \"/elements/\" , tags = [ \"items\" ], deprecated = True ) async def read_elements (): return [{ \"item_id\" : \"Foo\" }] \ub300\ud654\ud615 \ubb38\uc11c\uc5d0 \uc9c0\uc6d0\uc911\ub2e8\uc774\ub77c\uace0 \ud45c\uc2dc\ub429\ub2c8\ub2e4. \uc9c0\uc6d0\uc911\ub2e8\ub41c \uacbd\uc6b0\uc640 \uc9c0\uc6d0\uc911\ub2e8 \ub418\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uc5d0 \ub300\ud55c \uacbd\ub85c \uc791\ub3d9 \uc774 \uc5b4\ub5bb\uac8c \ubcf4\uc774\ub294 \uc9c0 \ud655\uc778\ud558\uc2ed\uc2dc\uc624.","title":"\ub2e8\uc77c \uacbd\ub85c \uc791\ub3d9 \uc9c0\uc6d0\uc911\ub2e8"},{"location":"tutorial/path-operation-configuration/#_8","text":"\uacbd\ub85c \uc791\ub3d9 \ub370\ucf54\ub808\uc774\ud130 \uc5d0 \ub9e4\uac1c\ubcc0\uc218(\ub4e4)\ub97c \uc804\ub2ec\ud568\uc73c\ub85c \uacbd\ub85c \uc791\ub3d9 \uc744 \uc124\uc815\ud558\uace0 \uba54\ud0c0\ub370\uc774\ud130\ub97c \ucd94\uac00\ud560\uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc815\ub9ac"},{"location":"tutorial/path-params-numeric-validations/","text":"\uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc640 \uc22b\uc790 \uac80\uc99d \u00b6 Query \ub97c \uc0ac\uc6a9\ud558\uc5ec \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub354 \ub9ce\uc740 \uac80\uc99d\uacfc \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc120\uc5b8\ud558\ub294 \ubc29\ubc95\uacfc \ub3d9\uc77c\ud558\uac8c Path \ub97c \uc0ac\uc6a9\ud558\uc5ec \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uac80\uc99d\uacfc \uba54\ud0c0\ub370\uc774\ud130\ub97c \uac19\uc740 \ud0c0\uc785\uc73c\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uacbd\ub85c \uc784\ud3ec\ud2b8 \u00b6 \uba3c\uc800 fastapi \uc5d0\uc11c Path \ub97c \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \uba54\ud0c0\ub370\uc774\ud130 \uc120\uc5b8 \u00b6 Query \uc5d0 \ub3d9\uc77c\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, title \uba54\ud0c0\ub370\uc774\ud130 \uac12\uc744 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 item_id \uc5d0 \uc120\uc5b8\ud558\ub824\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc785\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \ucc38\uace0 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\ub294 \uacbd\ub85c\uc758 \uc77c\ubd80\uc5ec\uc57c \ud558\ubbc0\ub85c \uc5b8\uc81c\ub098 \ud544\uc218\uc801\uc785\ub2c8\ub2e4. \uc989, ... \ub85c \uc120\uc5b8\ud574\uc11c \ud544\uc218\uc784\uc744 \ub098\ud0c0\ub0b4\ub294\uac8c \uc88b\uc2b5\ub2c8\ub2e4. \uadf8\ub7fc\uc5d0\ub3c4 None \uc73c\ub85c \uc120\uc5b8\ud558\uac70\ub098 \uae30\ubcf8\uac12\uc744 \uc9c0\uc815\ud560\uc9c0\ub77c\ub3c4 \uc544\ubb34 \uc601\ud5a5\uc744 \ub07c\uce58\uc9c0 \uc54a\uc73c\uba70 \uc5b8\uc81c\ub098 \ud544\uc218\uc785\ub2c8\ub2e4. \ud544\uc694\ud55c \uacbd\uc6b0 \ub9e4\uac1c\ubcc0\uc218 \uc815\ub82c\ud558\uae30 \u00b6 str \ud615\uc778 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 q \ub97c \ud544\uc218\ub85c \uc120\uc5b8\ud558\uace0 \uc2f6\ub2e4\uace0 \ud574\ubd05\uc2dc\ub2e4. \ud574\ub2f9 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub300\ud574 \uc544\ubb34\ub7f0 \uc120\uc5b8\uc744 \ud560 \ud544\uc694\uac00 \uc5c6\uc73c\ubbc0\ub85c Query \ub97c \uc815\ub9d0\ub85c \uc368\uc57c\ud560 \ud544\uc694\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc item_id \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\ub294 \uc5ec\uc804\ud788 Path \ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc740 \"\uae30\ubcf8\uac12\"\uc774 \uc5c6\ub294 \uac12 \uc55e\uc5d0 \"\uae30\ubcf8\uac12\"\uc774 \uc788\ub294 \uac12\uc744 \uc785\ub825\ud558\uba74 \ubd88\ud3c9\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc744 \uc7ac\uc815\ub82c\ud568\uc73c\ub85c\uc368 \uae30\ubcf8\uac12(\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 q )\uc774 \uc5c6\ub294 \uac12\uc744 \ucc98\uc74c \ubd80\ubd84\uc5d0 \uc704\uce58 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \uc5d0\uc11c\ub294 \uc911\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\ub984, \ud0c0\uc785 \uadf8\ub9ac\uace0 \uc120\uc5b8\uad6c( Query , Path \ub4f1)\ub85c \ub9e4\uac1c\ubcc0\uc218\ub97c \uac10\uc9c0\ud558\uba70 \uc21c\uc11c\ub294 \uc2e0\uacbd \uc4f0\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud568\uc218\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc120\uc5b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( q : str , item_id : int = Path ( title = \"The ID of the item to get\" )): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \ud544\uc694\ud55c \uacbd\uc6b0 \ub9e4\uac1c\ubcc0\uc218 \uc815\ub82c\ud558\uae30, \ud2b8\ub9ad \u00b6 Query \ub098 \uc544\ubb34\ub7f0 \uae30\ubcf8\uac12\uc73c\ub85c\ub3c4 q \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud558\uace0 \uc2f6\uc9c0 \uc54a\uc9c0\ub9cc Path \ub97c \uc0ac\uc6a9\ud558\uc5ec \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\ub97c item_id \ub2e4\ub978 \uc21c\uc11c\ub85c \uc120\uc5b8\ud558\uace0 \uc2f6\ub2e4\uba74, \ud30c\uc774\uc36c\uc740 \uc774\ub97c \uc704\ud55c \uc791\uace0 \ud2b9\ubcc4\ud55c \ubb38\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. * \ub97c \ud568\uc218\uc758 \uccab \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc138\uc694. \ud30c\uc774\uc36c\uc740 * \uc73c\ub85c \uc544\ubb34\ub7f0 \ud589\ub3d9\ub3c4 \ud558\uc9c0 \uc54a\uc9c0\ub9cc, \ub530\ub974\ub294 \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc740 kwargs \ub85c\ub3c4 \uc54c\ub824\uc9c4 \ud0a4\uc6cc\ub4dc \uc778\uc790(\ud0a4-\uac12 \uc30d)\uc5ec\uc57c \ud568\uc744 \uc778\uc9c0\ud569\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\ub354\ub77c\ub3c4 \uadf8\ub807\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" ), q : str ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \uc22b\uc790 \uac80\uc99d: \ud06c\uac70\ub098 \uac19\uc74c \u00b6 Query \uc640 Path (\ub098\uc911\uc5d0 \ubcfc \ub2e4\ub978 \uac83\ub4e4\ub3c4)\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubb38\uc790\uc5f4 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc22b\uc790\uc758 \uc81c\uc57d\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c ge=1 \uc778 \uacbd\uc6b0, item_id \ub294 1 \ubcf4\ub2e4 \"\ud06c\uac70\ub098( g reater) \uac19\uc740( e qual)\" \uc815\uc218\ud615 \uc22b\uc790\uc5ec\uc57c \ud569\ub2c8\ub2e4. from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 1 ), q : str ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \uc22b\uc790 \uac80\uc99d: \ud06c\uac70\ub098 \uac19\uc74c \ubc0f \uc791\uac70\ub098 \uac19\uc74c \u00b6 \ub3d9\uc77c\ud558\uac8c \uc801\uc6a9\ub429\ub2c8\ub2e4: gt : \ud06c\uac70\ub098( g reater t han) le : \uc791\uac70\ub098 \uac19\uc740( l ess than or e qual) from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , gt = 0 , le = 1000 ), q : str , ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \uc22b\uc790 \uac80\uc99d: \ubd80\ub3d9\uc18c\uc218, \ud06c\uac70\ub098 \ubc0f \uc791\uac70\ub098 \u00b6 \uc22b\uc790 \uac80\uc99d\uc740 float \uac12\uc5d0\ub3c4 \ub3d9\uc791\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c ge \ubfd0\ub9cc \uc544\ub2c8\ub77c gt \ub97c \uc120\uc5b8 \ud560 \uc218\uc788\ub294 \uac83\uc774 \uc911\uc694\ud574\uc9d1\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ud544\uc694\ud55c \uacbd\uc6b0, \uac12\uc774 1 \ubcf4\ub2e4 \uc791\ub354\ub77c\ub3c4 \ubc18\ub4dc\uc2dc 0 \ubcf4\ub2e4 \ucee4\uc57c\ud569\ub2c8\ub2e4. \uc989, 0.5 \ub294 \uc720\ud6a8\ud55c \uac12\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 0.0 \ub610\ub294 0 \uc740 \uadf8\ub807\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. lt \uc5ed\uc2dc \ub9c8\ucc2c\uac00\uc9c0\uc785\ub2c8\ub2e4. from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 0 , le = 1000 ), q : str , size : float = Query ( gt = 0 , lt = 10.5 ) ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \uc694\uc57d \u00b6 Query , Path (\uc544\uc9c1 \ubcf4\uc9c0 \ubabb\ud55c \ub2e4\ub978 \uac83\ub4e4\ub3c4)\ub97c \uc0ac\uc6a9\ud558\uba74 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uc640 \ubb38\uc790\uc5f4 \uac80\uc99d \uc5d0\uc11c\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uba54\ud0c0\ub370\uc774\ud130\uc640 \ubb38\uc790\uc5f4 \uac80\uc99d\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc22b\uc790 \uac80\uc99d \ub610\ud55c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: gt : \ud06c\uac70\ub098( g reater t han) ge : \ud06c\uac70\ub098 \uac19\uc740( g reater than or e qual) lt : \uc791\uac70\ub098( l ess t han) le : \uc791\uac70\ub098 \uac19\uc740( l ess than or e qual) \uc815\ubcf4 Query , Path , \uadf8\ub9ac\uace0 \ub098\uc911\uc5d0\uac8c \ubcf4\uac8c\ub420 \uac83\ub4e4\uc740 (\uc5ec\ub7ec\ubd84\uc774 \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\ub294) \uacf5\ud1b5 Param \ud074\ub798\uc2a4\uc758 \uc11c\ube0c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\ub4e4 \ubaa8\ub450\ub294 \uc5ec\ud0dc\uae4c\uc9c0 \ubcf8 \ucd94\uac00 \uac80\uc99d\uacfc \uba54\ud0c0\ub370\uc774\ud130\uc758 \ub3d9\uc77c\ud55c \ubaa8\ub4e0 \ub9e4\uac1c\ubcc0\uc218\ub97c \uacf5\uc720\ud569\ub2c8\ub2e4. \uae30\uc220 \uc138\ubd80\uc0ac\ud56d fastapi \uc5d0\uc11c Query , Path \ub4f1\uc744 \uc784\ud3ec\ud2b8 \ud560 \ub54c, \uc774\uac83\ub4e4\uc740 \uc2e4\uc81c\ub85c \ud568\uc218\uc785\ub2c8\ub2e4. \ud638\ucd9c\ub418\uba74 \ub3d9\uc77c\ud55c \uc774\ub984\uc758 \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uc989, \ud568\uc218\uc778 Query \ub97c \uc784\ud3ec\ud2b8\ud55c \uac81\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud638\ucd9c\ud558\uba74 Query \ub77c\ub294 \uc774\ub984\uc744 \uac00\uc9c4 \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \ud3b8\uc9d1\uae30\uc5d0\uc11c \ud0c0\uc785\uc5d0 \ub300\ud55c \uc624\ub958\ub97c \ud45c\uc2dc\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud558\uae30 \uc704\ud574 (\ud074\ub798\uc2a4\ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud558\ub294 \ub300\uc2e0) \uc774\ub7ec\ud55c \ud568\uc218\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ud558\uba74 \uc624\ub958\ub97c \ubb34\uc2dc\ud558\uae30 \uc704\ud55c \uc0ac\uc6a9\uc790 \uc124\uc815\uc744 \ucd94\uac00\ud558\uc9c0 \uc54a\uace0\ub3c4 \uc77c\ubc18 \ud3b8\uc9d1\uae30\uc640 \ucf54\ub529 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc640 \uc22b\uc790 \uac80\uc99d"},{"location":"tutorial/path-params-numeric-validations/#_1","text":"Query \ub97c \uc0ac\uc6a9\ud558\uc5ec \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub354 \ub9ce\uc740 \uac80\uc99d\uacfc \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc120\uc5b8\ud558\ub294 \ubc29\ubc95\uacfc \ub3d9\uc77c\ud558\uac8c Path \ub97c \uc0ac\uc6a9\ud558\uc5ec \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uac80\uc99d\uacfc \uba54\ud0c0\ub370\uc774\ud130\ub97c \uac19\uc740 \ud0c0\uc785\uc73c\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc640 \uc22b\uc790 \uac80\uc99d"},{"location":"tutorial/path-params-numeric-validations/#_2","text":"\uba3c\uc800 fastapi \uc5d0\uc11c Path \ub97c \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\uacbd\ub85c \uc784\ud3ec\ud2b8"},{"location":"tutorial/path-params-numeric-validations/#_3","text":"Query \uc5d0 \ub3d9\uc77c\ud55c \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, title \uba54\ud0c0\ub370\uc774\ud130 \uac12\uc744 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 item_id \uc5d0 \uc120\uc5b8\ud558\ub824\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc785\ub825\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \ucc38\uace0 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\ub294 \uacbd\ub85c\uc758 \uc77c\ubd80\uc5ec\uc57c \ud558\ubbc0\ub85c \uc5b8\uc81c\ub098 \ud544\uc218\uc801\uc785\ub2c8\ub2e4. \uc989, ... \ub85c \uc120\uc5b8\ud574\uc11c \ud544\uc218\uc784\uc744 \ub098\ud0c0\ub0b4\ub294\uac8c \uc88b\uc2b5\ub2c8\ub2e4. \uadf8\ub7fc\uc5d0\ub3c4 None \uc73c\ub85c \uc120\uc5b8\ud558\uac70\ub098 \uae30\ubcf8\uac12\uc744 \uc9c0\uc815\ud560\uc9c0\ub77c\ub3c4 \uc544\ubb34 \uc601\ud5a5\uc744 \ub07c\uce58\uc9c0 \uc54a\uc73c\uba70 \uc5b8\uc81c\ub098 \ud544\uc218\uc785\ub2c8\ub2e4.","title":"\uba54\ud0c0\ub370\uc774\ud130 \uc120\uc5b8"},{"location":"tutorial/path-params-numeric-validations/#_4","text":"str \ud615\uc778 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 q \ub97c \ud544\uc218\ub85c \uc120\uc5b8\ud558\uace0 \uc2f6\ub2e4\uace0 \ud574\ubd05\uc2dc\ub2e4. \ud574\ub2f9 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub300\ud574 \uc544\ubb34\ub7f0 \uc120\uc5b8\uc744 \ud560 \ud544\uc694\uac00 \uc5c6\uc73c\ubbc0\ub85c Query \ub97c \uc815\ub9d0\ub85c \uc368\uc57c\ud560 \ud544\uc694\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc item_id \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\ub294 \uc5ec\uc804\ud788 Path \ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc740 \"\uae30\ubcf8\uac12\"\uc774 \uc5c6\ub294 \uac12 \uc55e\uc5d0 \"\uae30\ubcf8\uac12\"\uc774 \uc788\ub294 \uac12\uc744 \uc785\ub825\ud558\uba74 \ubd88\ud3c9\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc744 \uc7ac\uc815\ub82c\ud568\uc73c\ub85c\uc368 \uae30\ubcf8\uac12(\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 q )\uc774 \uc5c6\ub294 \uac12\uc744 \ucc98\uc74c \ubd80\ubd84\uc5d0 \uc704\uce58 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \uc5d0\uc11c\ub294 \uc911\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\ub984, \ud0c0\uc785 \uadf8\ub9ac\uace0 \uc120\uc5b8\uad6c( Query , Path \ub4f1)\ub85c \ub9e4\uac1c\ubcc0\uc218\ub97c \uac10\uc9c0\ud558\uba70 \uc21c\uc11c\ub294 \uc2e0\uacbd \uc4f0\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud568\uc218\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc120\uc5b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( q : str , item_id : int = Path ( title = \"The ID of the item to get\" )): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\ud544\uc694\ud55c \uacbd\uc6b0 \ub9e4\uac1c\ubcc0\uc218 \uc815\ub82c\ud558\uae30"},{"location":"tutorial/path-params-numeric-validations/#_5","text":"Query \ub098 \uc544\ubb34\ub7f0 \uae30\ubcf8\uac12\uc73c\ub85c\ub3c4 q \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud558\uace0 \uc2f6\uc9c0 \uc54a\uc9c0\ub9cc Path \ub97c \uc0ac\uc6a9\ud558\uc5ec \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\ub97c item_id \ub2e4\ub978 \uc21c\uc11c\ub85c \uc120\uc5b8\ud558\uace0 \uc2f6\ub2e4\uba74, \ud30c\uc774\uc36c\uc740 \uc774\ub97c \uc704\ud55c \uc791\uace0 \ud2b9\ubcc4\ud55c \ubb38\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. * \ub97c \ud568\uc218\uc758 \uccab \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud558\uc138\uc694. \ud30c\uc774\uc36c\uc740 * \uc73c\ub85c \uc544\ubb34\ub7f0 \ud589\ub3d9\ub3c4 \ud558\uc9c0 \uc54a\uc9c0\ub9cc, \ub530\ub974\ub294 \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc740 kwargs \ub85c\ub3c4 \uc54c\ub824\uc9c4 \ud0a4\uc6cc\ub4dc \uc778\uc790(\ud0a4-\uac12 \uc30d)\uc5ec\uc57c \ud568\uc744 \uc778\uc9c0\ud569\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\ub354\ub77c\ub3c4 \uadf8\ub807\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" ), q : str ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\ud544\uc694\ud55c \uacbd\uc6b0 \ub9e4\uac1c\ubcc0\uc218 \uc815\ub82c\ud558\uae30, \ud2b8\ub9ad"},{"location":"tutorial/path-params-numeric-validations/#_6","text":"Query \uc640 Path (\ub098\uc911\uc5d0 \ubcfc \ub2e4\ub978 \uac83\ub4e4\ub3c4)\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubb38\uc790\uc5f4 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc22b\uc790\uc758 \uc81c\uc57d\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c ge=1 \uc778 \uacbd\uc6b0, item_id \ub294 1 \ubcf4\ub2e4 \"\ud06c\uac70\ub098( g reater) \uac19\uc740( e qual)\" \uc815\uc218\ud615 \uc22b\uc790\uc5ec\uc57c \ud569\ub2c8\ub2e4. from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 1 ), q : str ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\uc22b\uc790 \uac80\uc99d: \ud06c\uac70\ub098 \uac19\uc74c"},{"location":"tutorial/path-params-numeric-validations/#_7","text":"\ub3d9\uc77c\ud558\uac8c \uc801\uc6a9\ub429\ub2c8\ub2e4: gt : \ud06c\uac70\ub098( g reater t han) le : \uc791\uac70\ub098 \uac19\uc740( l ess than or e qual) from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , gt = 0 , le = 1000 ), q : str , ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\uc22b\uc790 \uac80\uc99d: \ud06c\uac70\ub098 \uac19\uc74c \ubc0f \uc791\uac70\ub098 \uac19\uc74c"},{"location":"tutorial/path-params-numeric-validations/#_8","text":"\uc22b\uc790 \uac80\uc99d\uc740 float \uac12\uc5d0\ub3c4 \ub3d9\uc791\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c ge \ubfd0\ub9cc \uc544\ub2c8\ub77c gt \ub97c \uc120\uc5b8 \ud560 \uc218\uc788\ub294 \uac83\uc774 \uc911\uc694\ud574\uc9d1\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ud544\uc694\ud55c \uacbd\uc6b0, \uac12\uc774 1 \ubcf4\ub2e4 \uc791\ub354\ub77c\ub3c4 \ubc18\ub4dc\uc2dc 0 \ubcf4\ub2e4 \ucee4\uc57c\ud569\ub2c8\ub2e4. \uc989, 0.5 \ub294 \uc720\ud6a8\ud55c \uac12\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 0.0 \ub610\ub294 0 \uc740 \uadf8\ub807\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. lt \uc5ed\uc2dc \ub9c8\ucc2c\uac00\uc9c0\uc785\ub2c8\ub2e4. from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 0 , le = 1000 ), q : str , size : float = Query ( gt = 0 , lt = 10.5 ) ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\uc22b\uc790 \uac80\uc99d: \ubd80\ub3d9\uc18c\uc218, \ud06c\uac70\ub098 \ubc0f \uc791\uac70\ub098"},{"location":"tutorial/path-params-numeric-validations/#_9","text":"Query , Path (\uc544\uc9c1 \ubcf4\uc9c0 \ubabb\ud55c \ub2e4\ub978 \uac83\ub4e4\ub3c4)\ub97c \uc0ac\uc6a9\ud558\uba74 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uc640 \ubb38\uc790\uc5f4 \uac80\uc99d \uc5d0\uc11c\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uba54\ud0c0\ub370\uc774\ud130\uc640 \ubb38\uc790\uc5f4 \uac80\uc99d\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc22b\uc790 \uac80\uc99d \ub610\ud55c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: gt : \ud06c\uac70\ub098( g reater t han) ge : \ud06c\uac70\ub098 \uac19\uc740( g reater than or e qual) lt : \uc791\uac70\ub098( l ess t han) le : \uc791\uac70\ub098 \uac19\uc740( l ess than or e qual) \uc815\ubcf4 Query , Path , \uadf8\ub9ac\uace0 \ub098\uc911\uc5d0\uac8c \ubcf4\uac8c\ub420 \uac83\ub4e4\uc740 (\uc5ec\ub7ec\ubd84\uc774 \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\ub294) \uacf5\ud1b5 Param \ud074\ub798\uc2a4\uc758 \uc11c\ube0c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\ub4e4 \ubaa8\ub450\ub294 \uc5ec\ud0dc\uae4c\uc9c0 \ubcf8 \ucd94\uac00 \uac80\uc99d\uacfc \uba54\ud0c0\ub370\uc774\ud130\uc758 \ub3d9\uc77c\ud55c \ubaa8\ub4e0 \ub9e4\uac1c\ubcc0\uc218\ub97c \uacf5\uc720\ud569\ub2c8\ub2e4. \uae30\uc220 \uc138\ubd80\uc0ac\ud56d fastapi \uc5d0\uc11c Query , Path \ub4f1\uc744 \uc784\ud3ec\ud2b8 \ud560 \ub54c, \uc774\uac83\ub4e4\uc740 \uc2e4\uc81c\ub85c \ud568\uc218\uc785\ub2c8\ub2e4. \ud638\ucd9c\ub418\uba74 \ub3d9\uc77c\ud55c \uc774\ub984\uc758 \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uc989, \ud568\uc218\uc778 Query \ub97c \uc784\ud3ec\ud2b8\ud55c \uac81\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud638\ucd9c\ud558\uba74 Query \ub77c\ub294 \uc774\ub984\uc744 \uac00\uc9c4 \ud074\ub798\uc2a4\uc758 \uc778\uc2a4\ud134\uc2a4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \ud3b8\uc9d1\uae30\uc5d0\uc11c \ud0c0\uc785\uc5d0 \ub300\ud55c \uc624\ub958\ub97c \ud45c\uc2dc\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud558\uae30 \uc704\ud574 (\ud074\ub798\uc2a4\ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud558\ub294 \ub300\uc2e0) \uc774\ub7ec\ud55c \ud568\uc218\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ud558\uba74 \uc624\ub958\ub97c \ubb34\uc2dc\ud558\uae30 \uc704\ud55c \uc0ac\uc6a9\uc790 \uc124\uc815\uc744 \ucd94\uac00\ud558\uc9c0 \uc54a\uace0\ub3c4 \uc77c\ubc18 \ud3b8\uc9d1\uae30\uc640 \ucf54\ub529 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc694\uc57d"},{"location":"tutorial/path-params/","text":"\uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \u00b6 \ud30c\uc774\uc36c \ud3ec\ub9f7 \ubb38\uc790\uc5f4\uc774 \uc0ac\uc6a9\ud558\ub294 \ub3d9\uc77c\ud55c \ubb38\ubc95\uc73c\ub85c \"\ub9e4\uac1c\ubcc0\uc218\" \ub610\ub294 \"\ubcc0\uc218\"\ub97c \uacbd\ub85c\uc5d0 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id ): return { \"item_id\" : item_id } \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 item_id \uc758 \uac12\uc740 \ud568\uc218\uc758 item_id \uc778\uc790\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc774 \uc608\uc81c\ub97c \uc2e4\ud589\ud558\uace0 http://127.0.0.1:8000/items/foo \ub85c \uc774\ub3d9\ud558\uba74, \ub2e4\uc74c \uc751\ub2f5\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"item_id\" : \"foo\" } \ud0c0\uc785\uc774 \uc788\ub294 \ub9e4\uac1c\ubcc0\uc218 \u00b6 \ud30c\uc774\uc36c \ud45c\uc900 \ud0c0\uc785 \uc5b4\ub178\ud14c\uc774\uc158\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud568\uc218\uc5d0 \uc788\ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc758 \ud0c0\uc785\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): return { \"item_id\" : item_id } \uc9c0\uae08\uacfc \uac19\uc740 \uacbd\uc6b0, item_id \ub294 int \ub85c \uc120\uc5b8 \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud655\uc778 \uc774 \uae30\ub2a5\uc740 \ud568\uc218 \ub0b4\uc5d0\uc11c \uc624\ub958 \uac80\uc0ac, \uc790\ub3d9\uc644\uc131 \ub4f1\uc744 \ud3b8\uc9d1\uae30\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4 \ub370\uc774\ud130 \ubcc0\ud658 \u00b6 \uc774 \uc608\uc81c\ub97c \uc2e4\ud589\ud558\uace0 http://127.0.0.1:8000/items/3 \uc744 \uc5f4\uba74, \ub2e4\uc74c \uc751\ub2f5\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"item_id\" : 3 } \ud655\uc778 \ud568\uc218\uac00 \ubc1b\uc740(\ubc18\ud658\ub3c4 \ud558\ub294) \uac12\uc740 \ubb38\uc790\uc5f4 \"3\" \uc774 \uc544\ub2c8\ub77c \ud30c\uc774\uc36c int \ud615\uc778 3 \uc785\ub2c8\ub2e4. \uc989, \ud0c0\uc785 \uc120\uc5b8\uc744 \ud558\uba74 FastAPI \ub294 \uc790\ub3d9\uc73c\ub85c \uc694\uccad\uc744 \"\ud30c\uc2f1\" \ud569\ub2c8\ub2e4. \ub370\uc774\ud130 \uac80\uc99d \u00b6 \ud558\uc9c0\ub9cc \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c http://127.0.0.1:8000/items/foo \ub85c \uc774\ub3d9\ud558\uba74, \uba4b\uc9c4 HTTP \uc624\ub958\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"detail\" : [ { \"loc\" : [ \"path\" , \"item_id\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] } \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 item_id \ub294 int \uac00 \uc544\ub2cc \"foo\" \uac12\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. int \ub300\uc2e0 float \uc744 \uc804\ub2ec\ud558\uba74 \ub3d9\uc77c\ud55c \uc624\ub958\uac00 \ub098\ud0c0\ub0a9\ub2c8\ub2e4: http://127.0.0.1:8000/items/4.2 \ud655\uc778 \uc989, \ud30c\uc774\uc36c \ud0c0\uc785 \uc120\uc5b8\uc744 \ud558\uba74 FastAPI \ub294 \ub370\uc774\ud130 \uac80\uc99d\uc744 \ud569\ub2c8\ub2e4. \uc624\ub958\ub294 \uac80\uc99d\uc744 \ud1b5\uacfc\ud558\uc9c0 \ubabb\ud55c \uc9c0\uc810\ub3c4 \uc815\ud655\ud558\uac8c \uba85\uc2dc\ud569\ub2c8\ub2e4. \uc774\ub294 API\uc640 \uc0c1\ud638 \uc791\uc6a9\ud558\ub294 \ucf54\ub4dc\ub97c \uac1c\ubc1c\ud558\uace0 \ub514\ubc84\uae45\ud558\ub294 \ub370 \ub9e4\uc6b0 \uc720\uc6a9\ud569\ub2c8\ub2e4. \ubb38\uc11c\ud654 \u00b6 \uadf8\ub9ac\uace0 \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c http://127.0.0.1:8000/docs \ub97c \uc5f4\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 \uc790\ub3d9 \ub300\ud654\uc2dd API \ubb38\uc11c\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ud655\uc778 \ub2e4\uc2dc \ud55c\ubc88, \uadf8\uc800 \ud30c\uc774\uc36c \ud0c0\uc785 \uc120\uc5b8\uc744 \ud558\uae30\ub9cc \ud558\uba74 FastAPI \ub294 \uc790\ub3d9 \ub300\ud654\uc2dd API \ubb38\uc11c(Swagger UI \ud1b5\ud569)\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\ub294 \uc815\uc218\ud615\uc73c\ub85c \uc120\uc5b8\ub410\uc74c\uc744 \uc8fc\ubaa9\ud558\uc138\uc694. \ud45c\uc900 \uae30\ubc18\uc758 \uc774\uc810, \ub300\uccb4 \ubb38\uc11c\ud654 \u00b6 \uadf8\ub9ac\uace0 \uc0dd\uc131\ub41c \uc2a4\ud0a4\ub9c8\ub294 OpenAPI \ud45c\uc900\uc5d0\uc11c \ub098\uc628 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \ud638\ud658\ub418\ub294 \ub3c4\uad6c\uac00 \ub9ce\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ub355\ubd84\uc5d0 FastAPI \ub294 http://127.0.0.1:8000/redoc \ub85c \uc811\uc18d\ud560 \uc218 \uc788\ub294 (ReDoc\uc744 \uc0ac\uc6a9\ud558\ub294) \ub300\uccb4 API \ubb38\uc11c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4: \uc774\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \ud638\ud658\ub418\ub294 \ub3c4\uad6c\uac00 \ub9ce\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc591\ud55c \uc5b8\uc5b4\uc5d0 \ub300\ud55c \ucf54\ub4dc \uc0dd\uc131 \ub3c4\uad6c\ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4. Pydantic \u00b6 \ubaa8\ub4e0 \ub370\uc774\ud130 \uac80\uc99d\uc740 Pydantic \uc5d0 \uc758\ud574 \ub0b4\ubd80\uc801\uc73c\ub85c \uc218\ud589\ub418\ubbc0\ub85c \uc774\ub85c \uc778\ud55c \ubaa8\ub4e0 \uc774\uc810\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \uad00\ub9ac\ub97c \uc798 \ubc1b\uace0 \uc788\uc74c\uc744 \ub290\ub084 \uc218 \uc788\uc2b5\ub2c8\ub2e4. str , float , bool \uacfc \ub2e4\ub978 \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \ud0c0\uc785 \uc120\uc5b8\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc911 \uba87 \uac00\uc9c0\ub294 \uc790\uc2b5\uc11c\uc758 \ub2e4\uc74c \uc7a5\uc5d0\uc11c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. \uc21c\uc11c \ubb38\uc81c \u00b6 \uacbd\ub85c \ub3d9\uc791 \uc744 \ub9cc\ub4e4\ub54c \uace0\uc815 \uacbd\ub85c\ub97c \uac16\uace0 \uc788\ub294 \uc0c1\ud669\ub4e4\uc744 \ub9de\ub2e6\ub728\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. /users/me \ucc98\ub7fc, \ud604\uc7ac \uc0ac\uc6a9\uc790\uc758 \ub370\uc774\ud130\ub97c \uac00\uc838\uc628\ub2e4\uace0 \ud569\uc2dc\ub2e4. \uc0ac\uc6a9\uc790 ID\ub97c \uc774\uc6a9\ud574 \ud2b9\uc815 \uc0ac\uc6a9\uc790\uc758 \uc815\ubcf4\ub97c \uac00\uc838\uc624\ub294 \uacbd\ub85c /users/{user_id} \ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uacbd\ub85c \ub3d9\uc791 \uc740 \uc21c\ucc28\uc801\uc73c\ub85c \ud3c9\uac00\ub418\uae30 \ub54c\ubb38\uc5d0 /users/{user_id} \uc774\uc804\uc5d0 /users/me \ub97c \uba3c\uc800 \uc120\uc5b8\ud574\uc57c \ud569\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/me\" ) async def read_user_me (): return { \"user_id\" : \"the current user\" } @app . get ( \"/users/ {user_id} \" ) async def read_user ( user_id : str ): return { \"user_id\" : user_id } \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 /users/{user_id} \ub294 \ub9e4\uac1c\ubcc0\uc218 user_id \uc758 \uac12\uc744 \"me\" \ub77c\uace0 \"\uc0dd\uac01\ud558\uc5ec\" /users/me \ub3c4 \uc5f0\uacb0\ud569\ub2c8\ub2e4. \uc0ac\uc804\uc815\uc758 \uac12 \u00b6 \ub9cc\uc57d \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \ub97c \ubc1b\ub294 \uacbd\ub85c \ub3d9\uc791 \uc774 \uc788\uc9c0\ub9cc, \uc720\ud6a8\ud558\uace0 \ubbf8\ub9ac \uc815\uc758\ud560 \uc218 \uc788\ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \uac12\uc744 \uc6d0\ud55c\ub2e4\uba74 \ud30c\uc774\uc36c \ud45c\uc900 Enum \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Enum \ud074\ub798\uc2a4 \uc0dd\uc131 \u00b6 Enum \uc744 \uc784\ud3ec\ud2b8\ud558\uace0 str \uacfc Enum \uc744 \uc0c1\uc18d\ud558\ub294 \uc11c\ube0c \ud074\ub798\uc2a4\ub97c \ub9cc\ub4ed\ub2c8\ub2e4. str \uc744 \uc0c1\uc18d\ud568\uc73c\ub85c\uc368 API \ubb38\uc11c\ub294 \uac12\uc774 string \ud615\uc774\uc5b4\uc57c \ud558\ub294 \uac83\uc744 \uc54c\uac8c \ub418\uace0 \uc81c\ub300\ub85c \ub80c\ub354\ub9c1 \ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. \uace0\uc815\uac12\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc720\ud6a8\ud55c \ud074\ub798\uc2a4 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub97c \ub9cc\ub4ed\ub2c8\ub2e4: from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \uc815\ubcf4 \uc5f4\uac70\ud615(\ub610\ub294 enums) \uc740 \ud30c\uc774\uc36c \ubc84\uc804 3.4 \uc774\ud6c4\ub85c \uc0ac\uc6a9\uac00\ub2a5\ud569\ub2c8\ub2e4. \ud301 \ud639\uc2dc \ud5f7\uac08\ub9b0\ub2e4\uba74, \"AlexNet\", \"ResNet\", \uadf8\ub9ac\uace0 \"LeNet\"\uc740 \uadf8\uc800 \uae30\uacc4 \ud559\uc2b5 \ubaa8\ub378 \ub4e4\uc758 \uc774\ub984\uc785\ub2c8\ub2e4. \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \uc120\uc5b8 \u00b6 \uc0dd\uc131\ud55c \uc5f4\uac70\ud615 \ud074\ub798\uc2a4( ModelName )\ub97c \uc0ac\uc6a9\ud558\ub294 \ud0c0\uc785 \uc5b4\ub178\ud14c\uc774\uc158\uc73c\ub85c \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \ub97c \ub9cc\ub4ed\ub2c8\ub2e4: from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \ubb38\uc11c \ud655\uc778 \u00b6 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uac12\uc740 \ubbf8\ub9ac \uc815\uc758\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c \ub300\ud654\ud615 \ubb38\uc11c\uc5d0\uc11c \uba4b\uc9c0\uac8c \ud45c\uc2dc\ub429\ub2c8\ub2e4: \ud30c\uc774\uc36c \uc5f4\uac70\ud615 \uc73c\ub85c \uc791\uc5c5\ud558\uae30 \u00b6 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \uc758 \uac12\uc740 \uc5f4\uac70\ud615 \uba64\ubc84 \uac00 \ub429\ub2c8\ub2e4. \uc5f4\uac70\ud615 \uba64\ubc84 \ube44\uad50 \u00b6 \uc5f4\uac70\uccb4 ModelName \uc758 \uc5f4\uac70\ud615 \uba64\ubc84 \ub97c \ube44\uad50\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \uc5f4\uac70\ud615 \uac12 \uac00\uc838\uc624\uae30 \u00b6 model_name.value \ub610\ub294 \uc77c\ubc18\uc801\uc73c\ub85c your_enum_member.value \ub97c \uc774\uc6a9\ud558\uc5ec \uc2e4\uc81c\uac12(\uc9c0\uae08\uc758 \uacbd\uc6b0 str )\uc744 \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4: from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \ud301 ModelName.lenet.value \ub85c\ub3c4 \uac12 \"lenet\" \uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5f4\uac70\ud615 \uba64\ubc84 \ubc18\ud658 \u00b6 \uacbd\ub85c \ub3d9\uc791 \uc5d0\uc11c \uc911\ucca9 JSON \ubcf8\ubb38(\uc608: dict ) \uc5ed\uc2dc \uc5f4\uac70\ud615 \uba64\ubc84 \ub97c \ubc18\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0 \ubc18\ud658\ud558\uae30 \uc804\uc5d0 \ud574\ub2f9 \uac12(\uc774 \uacbd\uc6b0 \ubb38\uc790\uc5f4)\uc73c\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4: from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \uc544\ub798\uc758 JSON \uc751\ub2f5\uc744 \uc5bb\uc2b5\ub2c8\ub2e4: { \"model_name\" : \"alexnet\" , \"message\" : \"Deep Learning FTW!\" } \uacbd\ub85c\ub97c \ud3ec\ud568\ud558\ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \u00b6 /files/{file_path} \uac00 \uc788\ub294 \uacbd\ub85c \ub3d9\uc791 \uc774 \uc788\ub2e4\uace0 \ud574\ubd05\uc2dc\ub2e4. \uadf8\ub7f0\ub370 \uc5ec\ub7ec\ubd84\uc740 home/johndoe/myfile.txt \ucc98\ub7fc path \uc5d0 \ub4e4\uc5b4\uc788\ub294 file_path \uc790\uccb4\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud574\ub2f9 \ud30c\uc77c\uc758 URL\uc740 \ub2e4\uc74c\ucc98\ub7fc \ub429\ub2c8\ub2e4: /files/home/johndoe/myfile.txt . OpenAPI \uc9c0\uc6d0 \u00b6 \ud14c\uc2a4\ud2b8\uc640 \uc815\uc758\uac00 \uc5b4\ub824\uc6b4 \uc2dc\ub098\ub9ac\uc624\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\uc73c\ubbc0\ub85c OpenAPI\ub294 \uacbd\ub85c \ub97c \ud3ec\ud568\ud558\ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \ub97c \ub0b4\ubd80\uc5d0 \uc120\uc5b8\ud558\ub294 \ubc29\ubc95\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub7fc\uc5d0\ub3c4 Starlette\uc758 \ub0b4\ubd80 \ub3c4\uad6c\uc911 \ud558\ub098\ub97c \uc0ac\uc6a9\ud558\uc5ec FastAPI \uc5d0\uc11c\ub294 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uacbd\ub85c\uac00 \ud3ec\ud568\ub418\uc5b4\uc57c \ud55c\ub2e4\ub294 \ubb38\uc11c\ub97c \ucd94\uac00\ud558\uc9c0 \uc54a\uc544\ub3c4 \ubb38\uc11c\ub294 \uacc4\uc18d \uc791\ub3d9\ud569\ub2c8\ub2e4. \uacbd\ub85c \ubcc0\ud658\uae30 \u00b6 Starlette\uc5d0\uc11c \uc9c1\uc811 \uc635\uc158\uc744 \uc0ac\uc6a9\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 URL\uc744 \uc0ac\uc6a9\ud558\uc5ec path \ub97c \ud3ec\ud568\ud558\ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \ub97c \uc120\uc5b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: /files/{file_path:path} \uc774\ub7ec\ud55c \uacbd\uc6b0 \ub9e4\uac1c\ubcc0\uc218\uc758 \uc774\ub984\uc740 file_path \uc774\uace0 \ub9c8\uc9c0\ub9c9 \ubd80\ubd84 :path \ub294 \ub9e4\uac1c\ubcc0\uc218\uac00 \uacbd\ub85c \uc640 \uc77c\uce58\ud574\uc57c\ud568\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub2e4\uc74c\uacfc \uac19\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/files/{file_path:path}\" ) async def read_file ( file_path : str ): return { \"file_path\" : file_path } \ud301 \ub9e4\uac1c\ubcc0\uc218\uac00 /home/johndoe/myfile.txt \ub97c \uac16\uace0 \uc788\uc5b4 \uc2ac\ub798\uc2dc\ub85c \uc2dc\uc791( / )\ud574\uc57c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uacbd\uc6b0 URL\uc740: /files//home/johndoe/myfile.txt \uc774\uba70 files \uacfc home \uc0ac\uc774\uc5d0 \uc774\uc911 \uc2ac\ub798\uc2dc( // )\uac00 \uc0dd\uae41\ub2c8\ub2e4. \uc694\uc57d \u00b6 FastAPI \uacfc \ud568\uaed8\ub77c\uba74 \uc9e7\uace0 \uc9c1\uad00\uc801\uc778 \ud45c\uc900 \ud30c\uc774\uc36c \ud0c0\uc785 \uc120\uc5b8\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc74c\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ud3b8\uc9d1\uae30 \uc9c0\uc6d0: \uc624\ub958 \uac80\uc0ac, \uc790\ub3d9\uc644\uc131 \ub4f1 \ub370\uc774\ud130 \" \ud30c\uc2f1 \" \ub370\uc774\ud130 \uac80\uc99d API \uc8fc\uc11d(Annotation)\uacfc \uc790\ub3d9 \ubb38\uc11c \uc704 \uc0ac\ud56d\ub4e4\uc744 \uadf8\uc800 \ud55c\ubc88\uc5d0 \uc120\uc5b8\ud558\uba74 \ub429\ub2c8\ub2e4. \uc774\ub294 (\uc6d0\ub798 \uc131\ub2a5\uacfc\ub294 \ubcc4\uac1c\ub85c) \ub300\uccb4 \ud504\ub808\uc784\uc6cc\ud06c\uc640 \ube44\uad50\ud588\uc744 \ub54c FastAPI \uc758 \uc8fc\uc694 \uac00\uc2dc\uc801 \uc7a5\uc810\uc77c \uac83\uc785\ub2c8\ub2e4.","title":"\uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/path-params/#_1","text":"\ud30c\uc774\uc36c \ud3ec\ub9f7 \ubb38\uc790\uc5f4\uc774 \uc0ac\uc6a9\ud558\ub294 \ub3d9\uc77c\ud55c \ubb38\ubc95\uc73c\ub85c \"\ub9e4\uac1c\ubcc0\uc218\" \ub610\ub294 \"\ubcc0\uc218\"\ub97c \uacbd\ub85c\uc5d0 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id ): return { \"item_id\" : item_id } \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 item_id \uc758 \uac12\uc740 \ud568\uc218\uc758 item_id \uc778\uc790\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc774 \uc608\uc81c\ub97c \uc2e4\ud589\ud558\uace0 http://127.0.0.1:8000/items/foo \ub85c \uc774\ub3d9\ud558\uba74, \ub2e4\uc74c \uc751\ub2f5\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"item_id\" : \"foo\" }","title":"\uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/path-params/#_2","text":"\ud30c\uc774\uc36c \ud45c\uc900 \ud0c0\uc785 \uc5b4\ub178\ud14c\uc774\uc158\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud568\uc218\uc5d0 \uc788\ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc758 \ud0c0\uc785\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): return { \"item_id\" : item_id } \uc9c0\uae08\uacfc \uac19\uc740 \uacbd\uc6b0, item_id \ub294 int \ub85c \uc120\uc5b8 \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud655\uc778 \uc774 \uae30\ub2a5\uc740 \ud568\uc218 \ub0b4\uc5d0\uc11c \uc624\ub958 \uac80\uc0ac, \uc790\ub3d9\uc644\uc131 \ub4f1\uc744 \ud3b8\uc9d1\uae30\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4","title":"\ud0c0\uc785\uc774 \uc788\ub294 \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/path-params/#_3","text":"\uc774 \uc608\uc81c\ub97c \uc2e4\ud589\ud558\uace0 http://127.0.0.1:8000/items/3 \uc744 \uc5f4\uba74, \ub2e4\uc74c \uc751\ub2f5\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"item_id\" : 3 } \ud655\uc778 \ud568\uc218\uac00 \ubc1b\uc740(\ubc18\ud658\ub3c4 \ud558\ub294) \uac12\uc740 \ubb38\uc790\uc5f4 \"3\" \uc774 \uc544\ub2c8\ub77c \ud30c\uc774\uc36c int \ud615\uc778 3 \uc785\ub2c8\ub2e4. \uc989, \ud0c0\uc785 \uc120\uc5b8\uc744 \ud558\uba74 FastAPI \ub294 \uc790\ub3d9\uc73c\ub85c \uc694\uccad\uc744 \"\ud30c\uc2f1\" \ud569\ub2c8\ub2e4.","title":"\ub370\uc774\ud130 \ubcc0\ud658"},{"location":"tutorial/path-params/#_4","text":"\ud558\uc9c0\ub9cc \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c http://127.0.0.1:8000/items/foo \ub85c \uc774\ub3d9\ud558\uba74, \uba4b\uc9c4 HTTP \uc624\ub958\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"detail\" : [ { \"loc\" : [ \"path\" , \"item_id\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] } \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 item_id \ub294 int \uac00 \uc544\ub2cc \"foo\" \uac12\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. int \ub300\uc2e0 float \uc744 \uc804\ub2ec\ud558\uba74 \ub3d9\uc77c\ud55c \uc624\ub958\uac00 \ub098\ud0c0\ub0a9\ub2c8\ub2e4: http://127.0.0.1:8000/items/4.2 \ud655\uc778 \uc989, \ud30c\uc774\uc36c \ud0c0\uc785 \uc120\uc5b8\uc744 \ud558\uba74 FastAPI \ub294 \ub370\uc774\ud130 \uac80\uc99d\uc744 \ud569\ub2c8\ub2e4. \uc624\ub958\ub294 \uac80\uc99d\uc744 \ud1b5\uacfc\ud558\uc9c0 \ubabb\ud55c \uc9c0\uc810\ub3c4 \uc815\ud655\ud558\uac8c \uba85\uc2dc\ud569\ub2c8\ub2e4. \uc774\ub294 API\uc640 \uc0c1\ud638 \uc791\uc6a9\ud558\ub294 \ucf54\ub4dc\ub97c \uac1c\ubc1c\ud558\uace0 \ub514\ubc84\uae45\ud558\ub294 \ub370 \ub9e4\uc6b0 \uc720\uc6a9\ud569\ub2c8\ub2e4.","title":"\ub370\uc774\ud130 \uac80\uc99d"},{"location":"tutorial/path-params/#_5","text":"\uadf8\ub9ac\uace0 \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c http://127.0.0.1:8000/docs \ub97c \uc5f4\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 \uc790\ub3d9 \ub300\ud654\uc2dd API \ubb38\uc11c\ub97c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ud655\uc778 \ub2e4\uc2dc \ud55c\ubc88, \uadf8\uc800 \ud30c\uc774\uc36c \ud0c0\uc785 \uc120\uc5b8\uc744 \ud558\uae30\ub9cc \ud558\uba74 FastAPI \ub294 \uc790\ub3d9 \ub300\ud654\uc2dd API \ubb38\uc11c(Swagger UI \ud1b5\ud569)\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\ub294 \uc815\uc218\ud615\uc73c\ub85c \uc120\uc5b8\ub410\uc74c\uc744 \uc8fc\ubaa9\ud558\uc138\uc694.","title":"\ubb38\uc11c\ud654"},{"location":"tutorial/path-params/#_6","text":"\uadf8\ub9ac\uace0 \uc0dd\uc131\ub41c \uc2a4\ud0a4\ub9c8\ub294 OpenAPI \ud45c\uc900\uc5d0\uc11c \ub098\uc628 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \ud638\ud658\ub418\ub294 \ub3c4\uad6c\uac00 \ub9ce\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ub355\ubd84\uc5d0 FastAPI \ub294 http://127.0.0.1:8000/redoc \ub85c \uc811\uc18d\ud560 \uc218 \uc788\ub294 (ReDoc\uc744 \uc0ac\uc6a9\ud558\ub294) \ub300\uccb4 API \ubb38\uc11c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4: \uc774\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \ud638\ud658\ub418\ub294 \ub3c4\uad6c\uac00 \ub9ce\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc591\ud55c \uc5b8\uc5b4\uc5d0 \ub300\ud55c \ucf54\ub4dc \uc0dd\uc131 \ub3c4\uad6c\ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4.","title":"\ud45c\uc900 \uae30\ubc18\uc758 \uc774\uc810, \ub300\uccb4 \ubb38\uc11c\ud654"},{"location":"tutorial/path-params/#pydantic","text":"\ubaa8\ub4e0 \ub370\uc774\ud130 \uac80\uc99d\uc740 Pydantic \uc5d0 \uc758\ud574 \ub0b4\ubd80\uc801\uc73c\ub85c \uc218\ud589\ub418\ubbc0\ub85c \uc774\ub85c \uc778\ud55c \ubaa8\ub4e0 \uc774\uc810\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\uc740 \uad00\ub9ac\ub97c \uc798 \ubc1b\uace0 \uc788\uc74c\uc744 \ub290\ub084 \uc218 \uc788\uc2b5\ub2c8\ub2e4. str , float , bool \uacfc \ub2e4\ub978 \ubcf5\uc7a1\ud55c \ub370\uc774\ud130 \ud0c0\uc785 \uc120\uc5b8\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc911 \uba87 \uac00\uc9c0\ub294 \uc790\uc2b5\uc11c\uc758 \ub2e4\uc74c \uc7a5\uc5d0\uc11c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","title":"Pydantic"},{"location":"tutorial/path-params/#_7","text":"\uacbd\ub85c \ub3d9\uc791 \uc744 \ub9cc\ub4e4\ub54c \uace0\uc815 \uacbd\ub85c\ub97c \uac16\uace0 \uc788\ub294 \uc0c1\ud669\ub4e4\uc744 \ub9de\ub2e6\ub728\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. /users/me \ucc98\ub7fc, \ud604\uc7ac \uc0ac\uc6a9\uc790\uc758 \ub370\uc774\ud130\ub97c \uac00\uc838\uc628\ub2e4\uace0 \ud569\uc2dc\ub2e4. \uc0ac\uc6a9\uc790 ID\ub97c \uc774\uc6a9\ud574 \ud2b9\uc815 \uc0ac\uc6a9\uc790\uc758 \uc815\ubcf4\ub97c \uac00\uc838\uc624\ub294 \uacbd\ub85c /users/{user_id} \ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uacbd\ub85c \ub3d9\uc791 \uc740 \uc21c\ucc28\uc801\uc73c\ub85c \ud3c9\uac00\ub418\uae30 \ub54c\ubb38\uc5d0 /users/{user_id} \uc774\uc804\uc5d0 /users/me \ub97c \uba3c\uc800 \uc120\uc5b8\ud574\uc57c \ud569\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/me\" ) async def read_user_me (): return { \"user_id\" : \"the current user\" } @app . get ( \"/users/ {user_id} \" ) async def read_user ( user_id : str ): return { \"user_id\" : user_id } \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 /users/{user_id} \ub294 \ub9e4\uac1c\ubcc0\uc218 user_id \uc758 \uac12\uc744 \"me\" \ub77c\uace0 \"\uc0dd\uac01\ud558\uc5ec\" /users/me \ub3c4 \uc5f0\uacb0\ud569\ub2c8\ub2e4.","title":"\uc21c\uc11c \ubb38\uc81c"},{"location":"tutorial/path-params/#_8","text":"\ub9cc\uc57d \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \ub97c \ubc1b\ub294 \uacbd\ub85c \ub3d9\uc791 \uc774 \uc788\uc9c0\ub9cc, \uc720\ud6a8\ud558\uace0 \ubbf8\ub9ac \uc815\uc758\ud560 \uc218 \uc788\ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \uac12\uc744 \uc6d0\ud55c\ub2e4\uba74 \ud30c\uc774\uc36c \ud45c\uc900 Enum \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc0ac\uc804\uc815\uc758 \uac12"},{"location":"tutorial/path-params/#enum","text":"Enum \uc744 \uc784\ud3ec\ud2b8\ud558\uace0 str \uacfc Enum \uc744 \uc0c1\uc18d\ud558\ub294 \uc11c\ube0c \ud074\ub798\uc2a4\ub97c \ub9cc\ub4ed\ub2c8\ub2e4. str \uc744 \uc0c1\uc18d\ud568\uc73c\ub85c\uc368 API \ubb38\uc11c\ub294 \uac12\uc774 string \ud615\uc774\uc5b4\uc57c \ud558\ub294 \uac83\uc744 \uc54c\uac8c \ub418\uace0 \uc81c\ub300\ub85c \ub80c\ub354\ub9c1 \ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4. \uace0\uc815\uac12\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc720\ud6a8\ud55c \ud074\ub798\uc2a4 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub97c \ub9cc\ub4ed\ub2c8\ub2e4: from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \uc815\ubcf4 \uc5f4\uac70\ud615(\ub610\ub294 enums) \uc740 \ud30c\uc774\uc36c \ubc84\uc804 3.4 \uc774\ud6c4\ub85c \uc0ac\uc6a9\uac00\ub2a5\ud569\ub2c8\ub2e4. \ud301 \ud639\uc2dc \ud5f7\uac08\ub9b0\ub2e4\uba74, \"AlexNet\", \"ResNet\", \uadf8\ub9ac\uace0 \"LeNet\"\uc740 \uadf8\uc800 \uae30\uacc4 \ud559\uc2b5 \ubaa8\ub378 \ub4e4\uc758 \uc774\ub984\uc785\ub2c8\ub2e4.","title":"Enum \ud074\ub798\uc2a4 \uc0dd\uc131"},{"location":"tutorial/path-params/#_9","text":"\uc0dd\uc131\ud55c \uc5f4\uac70\ud615 \ud074\ub798\uc2a4( ModelName )\ub97c \uc0ac\uc6a9\ud558\ub294 \ud0c0\uc785 \uc5b4\ub178\ud14c\uc774\uc158\uc73c\ub85c \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \ub97c \ub9cc\ub4ed\ub2c8\ub2e4: from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" }","title":"\uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \uc120\uc5b8"},{"location":"tutorial/path-params/#_10","text":"\uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uac12\uc740 \ubbf8\ub9ac \uc815\uc758\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c \ub300\ud654\ud615 \ubb38\uc11c\uc5d0\uc11c \uba4b\uc9c0\uac8c \ud45c\uc2dc\ub429\ub2c8\ub2e4:","title":"\ubb38\uc11c \ud655\uc778"},{"location":"tutorial/path-params/#_11","text":"\uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \uc758 \uac12\uc740 \uc5f4\uac70\ud615 \uba64\ubc84 \uac00 \ub429\ub2c8\ub2e4.","title":"\ud30c\uc774\uc36c \uc5f4\uac70\ud615\uc73c\ub85c \uc791\uc5c5\ud558\uae30"},{"location":"tutorial/path-params/#_12","text":"\uc5f4\uac70\uccb4 ModelName \uc758 \uc5f4\uac70\ud615 \uba64\ubc84 \ub97c \ube44\uad50\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" }","title":"\uc5f4\uac70\ud615 \uba64\ubc84 \ube44\uad50"},{"location":"tutorial/path-params/#_13","text":"model_name.value \ub610\ub294 \uc77c\ubc18\uc801\uc73c\ub85c your_enum_member.value \ub97c \uc774\uc6a9\ud558\uc5ec \uc2e4\uc81c\uac12(\uc9c0\uae08\uc758 \uacbd\uc6b0 str )\uc744 \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4: from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \ud301 ModelName.lenet.value \ub85c\ub3c4 \uac12 \"lenet\" \uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc5f4\uac70\ud615 \uac12 \uac00\uc838\uc624\uae30"},{"location":"tutorial/path-params/#_14","text":"\uacbd\ub85c \ub3d9\uc791 \uc5d0\uc11c \uc911\ucca9 JSON \ubcf8\ubb38(\uc608: dict ) \uc5ed\uc2dc \uc5f4\uac70\ud615 \uba64\ubc84 \ub97c \ubc18\ud658\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0 \ubc18\ud658\ud558\uae30 \uc804\uc5d0 \ud574\ub2f9 \uac12(\uc774 \uacbd\uc6b0 \ubb38\uc790\uc5f4)\uc73c\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4: from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \ud074\ub77c\uc774\uc5b8\ud2b8\ub294 \uc544\ub798\uc758 JSON \uc751\ub2f5\uc744 \uc5bb\uc2b5\ub2c8\ub2e4: { \"model_name\" : \"alexnet\" , \"message\" : \"Deep Learning FTW!\" }","title":"\uc5f4\uac70\ud615 \uba64\ubc84 \ubc18\ud658"},{"location":"tutorial/path-params/#_15","text":"/files/{file_path} \uac00 \uc788\ub294 \uacbd\ub85c \ub3d9\uc791 \uc774 \uc788\ub2e4\uace0 \ud574\ubd05\uc2dc\ub2e4. \uadf8\ub7f0\ub370 \uc5ec\ub7ec\ubd84\uc740 home/johndoe/myfile.txt \ucc98\ub7fc path \uc5d0 \ub4e4\uc5b4\uc788\ub294 file_path \uc790\uccb4\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud574\ub2f9 \ud30c\uc77c\uc758 URL\uc740 \ub2e4\uc74c\ucc98\ub7fc \ub429\ub2c8\ub2e4: /files/home/johndoe/myfile.txt .","title":"\uacbd\ub85c\ub97c \ud3ec\ud568\ud558\ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/path-params/#openapi","text":"\ud14c\uc2a4\ud2b8\uc640 \uc815\uc758\uac00 \uc5b4\ub824\uc6b4 \uc2dc\ub098\ub9ac\uc624\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\uc73c\ubbc0\ub85c OpenAPI\ub294 \uacbd\ub85c \ub97c \ud3ec\ud568\ud558\ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \ub97c \ub0b4\ubd80\uc5d0 \uc120\uc5b8\ud558\ub294 \ubc29\ubc95\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub7fc\uc5d0\ub3c4 Starlette\uc758 \ub0b4\ubd80 \ub3c4\uad6c\uc911 \ud558\ub098\ub97c \uc0ac\uc6a9\ud558\uc5ec FastAPI \uc5d0\uc11c\ub294 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uacbd\ub85c\uac00 \ud3ec\ud568\ub418\uc5b4\uc57c \ud55c\ub2e4\ub294 \ubb38\uc11c\ub97c \ucd94\uac00\ud558\uc9c0 \uc54a\uc544\ub3c4 \ubb38\uc11c\ub294 \uacc4\uc18d \uc791\ub3d9\ud569\ub2c8\ub2e4.","title":"OpenAPI \uc9c0\uc6d0"},{"location":"tutorial/path-params/#_16","text":"Starlette\uc5d0\uc11c \uc9c1\uc811 \uc635\uc158\uc744 \uc0ac\uc6a9\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 URL\uc744 \uc0ac\uc6a9\ud558\uc5ec path \ub97c \ud3ec\ud568\ud558\ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \ub97c \uc120\uc5b8 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: /files/{file_path:path} \uc774\ub7ec\ud55c \uacbd\uc6b0 \ub9e4\uac1c\ubcc0\uc218\uc758 \uc774\ub984\uc740 file_path \uc774\uace0 \ub9c8\uc9c0\ub9c9 \ubd80\ubd84 :path \ub294 \ub9e4\uac1c\ubcc0\uc218\uac00 \uacbd\ub85c \uc640 \uc77c\uce58\ud574\uc57c\ud568\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub2e4\uc74c\uacfc \uac19\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/files/{file_path:path}\" ) async def read_file ( file_path : str ): return { \"file_path\" : file_path } \ud301 \ub9e4\uac1c\ubcc0\uc218\uac00 /home/johndoe/myfile.txt \ub97c \uac16\uace0 \uc788\uc5b4 \uc2ac\ub798\uc2dc\ub85c \uc2dc\uc791( / )\ud574\uc57c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uacbd\uc6b0 URL\uc740: /files//home/johndoe/myfile.txt \uc774\uba70 files \uacfc home \uc0ac\uc774\uc5d0 \uc774\uc911 \uc2ac\ub798\uc2dc( // )\uac00 \uc0dd\uae41\ub2c8\ub2e4.","title":"\uacbd\ub85c \ubcc0\ud658\uae30"},{"location":"tutorial/path-params/#_17","text":"FastAPI \uacfc \ud568\uaed8\ub77c\uba74 \uc9e7\uace0 \uc9c1\uad00\uc801\uc778 \ud45c\uc900 \ud30c\uc774\uc36c \ud0c0\uc785 \uc120\uc5b8\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uc74c\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \ud3b8\uc9d1\uae30 \uc9c0\uc6d0: \uc624\ub958 \uac80\uc0ac, \uc790\ub3d9\uc644\uc131 \ub4f1 \ub370\uc774\ud130 \" \ud30c\uc2f1 \" \ub370\uc774\ud130 \uac80\uc99d API \uc8fc\uc11d(Annotation)\uacfc \uc790\ub3d9 \ubb38\uc11c \uc704 \uc0ac\ud56d\ub4e4\uc744 \uadf8\uc800 \ud55c\ubc88\uc5d0 \uc120\uc5b8\ud558\uba74 \ub429\ub2c8\ub2e4. \uc774\ub294 (\uc6d0\ub798 \uc131\ub2a5\uacfc\ub294 \ubcc4\uac1c\ub85c) \ub300\uccb4 \ud504\ub808\uc784\uc6cc\ud06c\uc640 \ube44\uad50\ud588\uc744 \ub54c FastAPI \uc758 \uc8fc\uc694 \uac00\uc2dc\uc801 \uc7a5\uc810\uc77c \uac83\uc785\ub2c8\ub2e4.","title":"\uc694\uc57d"},{"location":"tutorial/query-params-str-validations/","text":"\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uc640 \ubb38\uc790\uc5f4 \uac80\uc99d \u00b6 FastAPI \ub97c \uc0ac\uc6a9\ud558\uba74 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub300\ud55c \ucd94\uac00 \uc815\ubcf4 \ubc0f \uac80\uc99d\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc744 \uc608\ub85c \ub4e4\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = None ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 q \ub294 Optional[str] \uc790\ub8cc\ud615\uc785\ub2c8\ub2e4. \uc989, str \uc790\ub8cc\ud615\uc774\uc9c0\ub9cc None \uc5ed\uc2dc \ub420 \uc218 \uc788\uc74c\uc744 \ub73b\ud558\uace0, \uc2e4\uc81c\ub85c \uae30\ubcf8\uac12\uc740 None \uc774\uae30 \ub54c\ubb38\uc5d0 FastAPI\ub294 \uc774 \ub9e4\uac1c\ubcc0\uc218\uac00 \ud544\uc218\uac00 \uc544\ub2c8\ub77c\ub294 \uac83\uc744 \uc555\ub2c8\ub2e4. \ucc38\uace0 FastAPI\ub294 q \uc758 \uae30\ubcf8\uac12\uc774 = None \uc774\uae30 \ub54c\ubb38\uc5d0 \ud544\uc218\uac00 \uc544\ub2d8\uc744 \uc555\ub2c8\ub2e4. Optional[str] \uc5d0 \uc788\ub294 Optional \uc740 FastAPI\uac00 \uc0ac\uc6a9\ud558\ub294\uac8c \uc544\ub2c8\uc9c0\ub9cc, \ud3b8\uc9d1\uae30\uc5d0\uac8c \ub354 \ub098\uc740 \uc9c0\uc6d0\uacfc \uc624\ub958 \ud0d0\uc9c0\ub97c \uc81c\uacf5\ud558\uac8c \ud574\uc90d\ub2c8\ub2e4. \ucd94\uac00 \uac80\uc99d \u00b6 q \uac00 \uc120\ud0dd\uc801\uc774\uc9c0\ub9cc \uac12\uc774 \uc8fc\uc5b4\uc9c8 \ub54c\ub9c8\ub2e4 \uac12\uc774 50 \uae00\uc790\ub97c \ucd08\uacfc\ud558\uc9c0 \uc54a\uac8c \uac15\uc81c\ud558\ub824 \ud569\ub2c8\ub2e4. Query \uc784\ud3ec\ud2b8 \u00b6 \uc774\ub97c \uc704\ud574 \uba3c\uc800 fastapi \uc5d0\uc11c Query \ub97c \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \uae30\ubcf8\uac12\uc73c\ub85c Query \uc0ac\uc6a9 \u00b6 \uc774\uc81c Query \ub97c \ub9e4\uac1c\ubcc0\uc218\uc758 \uae30\ubcf8\uac12\uc73c\ub85c \uc0ac\uc6a9\ud558\uc5ec max_length \ub9e4\uac1c\ubcc0\uc218\ub97c 50\uc73c\ub85c \uc124\uc815\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \uae30\ubcf8\uac12 None \uc744 Query(None) \uc73c\ub85c \ubc14\uafd4\uc57c \ud558\ubbc0\ub85c, Query \uc758 \uccab \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub294 \uae30\ubcf8\uac12\uc744 \uc815\uc758\ud558\ub294 \uac83\uacfc \uac19\uc740 \ubaa9\uc801\uc73c\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c: q : Optional [ str ] = Query ( None ) ...\uc704 \ucf54\ub4dc\ub294 \uc544\ub798\uc640 \ub3d9\uc77c\ud558\uac8c \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\ud0dd\uc801\uc73c\ub85c \ub9cc\ub4ed\ub2c8\ub2e4: q : Optional [ str ] = None \ud558\uc9c0\ub9cc \uba85\uc2dc\uc801\uc73c\ub85c \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud569\ub2c8\ub2e4. \uc815\ubcf4 FastAPI\ub294 \ub2e4\uc74c \ubd80\ubd84\uc5d0 \uad00\uc2ec\uc774 \uc788\uc2b5\ub2c8\ub2e4: = None \ub610\ub294: = Query ( None ) \uadf8\ub9ac\uace0 None \uc744 \uc0ac\uc6a9\ud558\uc5ec \ucffc\ub77c \ub9e4\uac1c\ubcc0\uc218\uac00 \ud544\uc218\uc801\uc774\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc744 \ud30c\uc545\ud569\ub2c8\ub2e4. Optional \ubd80\ubd84\uc740 \ud3b8\uc9d1\uae30\uc5d0\uac8c \ub354 \ub098\uc740 \uc9c0\uc6d0\uc744 \uc81c\uacf5\ud558\uae30 \uc704\ud574\uc11c\ub9cc \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub610\ud55c Query \ub85c \ub354 \ub9ce\uc740 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc9c0\uae08\uc758 \uacbd\uc6b0 \ubb38\uc790\uc5f4\uc5d0 \uc801\uc6a9\ub418\ub294 max_length \ub9e4\uac1c\ubcc0\uc218\uc785\ub2c8\ub2e4: q : str = Query ( None , max_length = 50 ) \uc774\ub294 \ub370\uc774\ud130\ub97c \uac80\uc99d\ud560 \uac83\uc774\uace0, \ub370\uc774\ud130\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\ub2e4\uba74 \uba85\ubc31\ud55c \uc624\ub958\ub97c \ubcf4\uc5ec\uc8fc\uba70, OpenAPI \uc2a4\ud0a4\ub9c8 \uacbd\ub85c \ub3d9\uc791 \uc5d0 \ub9e4\uac1c\ubcc0\uc218\ub97c \ubb38\uc11c\ud654 \ud569\ub2c8\ub2e4. \uac80\uc99d \ucd94\uac00 \u00b6 \ub9e4\uac1c\ubcc0\uc218 min_length \ub610\ud55c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , min_length = 3 , max_length = 50 ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \uc815\uaddc\uc2dd \ucd94\uac00 \u00b6 \ub9e4\uac1c\ubcc0\uc218\uc640 \uc77c\uce58\ud574\uc57c \ud558\ub294 \uc815\uaddc\ud45c\ud604\uc2dd \uc744 \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \uc774 \ud2b9\uc815 \uc815\uaddc\ud45c\ud604\uc2dd\uc740 \uc804\ub2ec \ubc1b\uc740 \ub9e4\uac1c\ubcc0\uc218 \uac12\uc744 \uac80\uc0ac\ud569\ub2c8\ub2e4: ^ : \uc774\uc804\uc5d0 \ubb38\uc790\uac00 \uc5c6\uace0 \ub4a4\ub530\ub974\ub294 \ubb38\uc790\ub85c \uc2dc\uc791\ud569\ub2c8\ub2e4. fixedquery : \uc815\ud655\ud788 fixedquery \uac12\uc744 \uac16\uc2b5\ub2c8\ub2e4. $ : \uc5ec\uae30\uc11c \ub05d\ub098\uace0 fixedquery \uc774\ud6c4\ub85c \uc544\ubb34 \ubb38\uc790\ub3c4 \uac16\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \"\uc815\uaddc\ud45c\ud604\uc2dd\" \uac1c\ub150\uc5d0 \ub300\ud574 \uc0c1\uc2e4\uac10\uc744 \ub290\uaf08\ub2e4\uba74 \uac71\uc815\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4. \ub9ce\uc740 \uc0ac\ub78c\uc5d0\uac8c \uc5b4\ub824\uc6b4 \uc8fc\uc81c\uc785\ub2c8\ub2e4. \uc544\uc9c1\uc740 \uc815\uaddc\ud45c\ud604\uc2dd \uc5c6\uc774\ub3c4 \ub9ce\uc740 \uc791\uc5c5\ub4e4\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc5b8\uc81c\ub4e0\uc9c0 \uac00\uc11c \ubc30\uc6b8\uc218 \uc788\uace0, FastAPI \uc5d0\uc11c \uc9c1\uc811 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc54c\uace0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uae30\ubcf8\uac12 \u00b6 \uae30\ubcf8\uac12\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uccab \ubc88\uc9f8 \uc778\uc790\ub85c None \uc744 \uc804\ub2ec\ud558\ub4ef\uc774, \ub2e4\ub978 \uac12\uc744 \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. min_length \uac00 3 \uc774\uace0, \uae30\ubcf8\uac12\uc774 \"fixedquery\" \uc778 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 q \ub97c \uc120\uc5b8\ud574\ubd05\uc2dc\ub2e4: from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( default = \"fixedquery\" , min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \ucc38\uace0 \uae30\ubcf8\uac12\uc744 \uac16\ub294 \uac83\ub9cc\uc73c\ub85c \ub9e4\uac1c\ubcc0\uc218\ub294 \uc120\ud0dd\uc801\uc774 \ub429\ub2c8\ub2e4. \ud544\uc218\ub85c \ub9cc\ub4e4\uae30 \u00b6 \ub354 \ub9ce\uc740 \uac80\uc99d\uc774\ub098 \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc120\uc5b8\ud560 \ud544\uc694\uac00 \uc5c6\ub294 \uacbd\uc6b0, \ub2e4\uc74c\uacfc \uac19\uc774 \uae30\ubcf8\uac12\uc744 \uc120\uc5b8\ud558\uc9c0 \uc54a\uace0 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 q \ub97c \ud544\uc218\ub85c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4: q : str \uc544\ub798 \ub300\uc2e0: q : Optional [ str ] = None \uadf8\ub7ec\ub098 \uc774\uc81c \ub2e4\uc74c\uacfc \uac19\uc774 Query \ub85c \uc120\uc5b8\ud569\ub2c8\ub2e4: q : Optional [ str ] = Query ( None , min_length = 3 ) \uadf8\ub798\uc11c Query \ub97c \ud544\uc218\uac12\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc57c \ud560 \ub54c\uba74, \uccab \ubc88\uc9f8 \uc778\uc790\ub85c ... \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \uc815\ubcf4 \uc774\uc804\uc5d0 ... \ub97c \ubcf8\uc801\uc774 \uc5c6\ub2e4\uba74: \ud2b9\ubcc4\ud55c \ub2e8\uc77c\uac12\uc73c\ub85c, \ud30c\uc774\uc36c\uc758 \uc77c\ubd80\uc774\uba70 \"Ellipsis\"\ub77c \ubd80\ub985\ub2c8\ub2e4 . \uc774\ub807\uac8c \ud558\uba74 FastAPI \uac00 \uc774 \ub9e4\uac1c\ubcc0\uc218\ub294 \ud544\uc218\uc784\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \ub9ac\uc2a4\ud2b8 / \ub2e4\uc911\uac12 \u00b6 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c Query \uc640 \ud568\uaed8 \uba85\uc2dc\uc801\uc73c\ub85c \uc120\uc5b8\ud560 \ub54c, \uac12\ub4e4\uc758 \ub9ac\uc2a4\ud2b8\ub098 \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c \uc5ec\ub7ec \uac12\uc744 \ubc1b\ub3c4\ub85d \uc120\uc5b8 \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, URL\uc5d0\uc11c \uc5ec\ub7ec\ubc88 \ub098\uc624\ub294 q \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud558\ub824\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import List , Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ List [ str ], None ] = Query ( default = None )): query_items = { \"q\" : q } return query_items \uc544\ub798\uc640 \uac19\uc740 URL\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4: http://localhost:8000/items/?q=foo&q=bar \uc5ec\ub7ec q \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \uac12\ub4e4\uc744 ( foo \ubc0f bar ) \ud30c\uc774\uc36c list \ub85c \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub0b4 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218 q \ub85c \uc804\ub2ec \ubc1b\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud574\ub2f9 URL\uc5d0 \ub300\ud55c \uc751\ub2f5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: { \"q\" : [ \"foo\" , \"bar\" ] } \ud301 \uc704\uc758 \uc608\uc640 \uac19\uc774 list \uc790\ub8cc\ud615\uc73c\ub85c \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud558\ub824\uba74 Query \ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \uc694\uccad \ubcf8\ubb38\uc73c\ub85c \ud574\uc11d\ub429\ub2c8\ub2e4. \ub300\ud654\ud615 API \ubb38\uc11c\ub294 \uc5ec\ub7ec \uac12\uc744 \ud5c8\uc6a9\ud558\ub3c4\ub85d \uc218\uc815 \ub429\ub2c8\ub2e4: \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \ub9ac\uc2a4\ud2b8 / \uae30\ubcf8\uac12\uc744 \uc0ac\uc6a9\ud558\ub294 \ub2e4\uc911\uac12 \u00b6 \uadf8\ub9ac\uace0 \uc81c\uacf5\ub41c \uac12\uc774 \uc5c6\uc73c\uba74 \uae30\ubcf8 list \uac12\uc744 \uc815\uc758\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: from typing import List from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : List [ str ] = Query ( default = [ \"foo\" , \"bar\" ])): query_items = { \"q\" : q } return query_items \uc544\ub798\ub85c \uc774\ub3d9\ud55c\ub2e4\uba74: http://localhost:8000/items/ q \uc758 \uae30\ubcf8\uac12\uc740: [\"foo\", \"bar\"] \uc774\uba70 \uc751\ub2f5\uc740 \ub2e4\uc74c\uc774 \ub429\ub2c8\ub2e4: { \"q\" : [ \"foo\" , \"bar\" ] } list \uc0ac\uc6a9\ud558\uae30 \u00b6 List[str] \ub300\uc2e0 list \ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : list = Query ( default = [])): query_items = { \"q\" : q } return query_items \ucc38\uace0 \uc774 \uacbd\uc6b0 FastAPI\ub294 \ub9ac\uc2a4\ud2b8\uc758 \ub0b4\uc6a9\uc744 \uac80\uc0ac\ud558\uc9c0 \uc54a\uc74c\uc744 \uba85\uc2ec\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, List[int] \ub294 \ub9ac\uc2a4\ud2b8 \ub0b4\uc6a9\uc774 \uc815\uc218\uc778\uc9c0 \uac80\uc0ac(\ubc0f \ubb38\uc11c\ud654)\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc list \ub2e8\ub3c5\uc77c \uacbd\uc6b0\ub294 \uc544\ub2d9\ub2c8\ub2e4. \ub354 \ub9ce\uc740 \uba54\ud0c0\ub370\uc774\ud130 \uc120\uc5b8 \u00b6 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud574\ub2f9 \uc815\ubcf4\ub294 \uc0dd\uc131\ub41c OpenAPI\uc5d0 \ud3ec\ud568\ub418\uace0 \ubb38\uc11c \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4 \ubc0f \uc678\ubd80 \ub3c4\uad6c\uc5d0\uc11c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ucc38\uace0 \ub3c4\uad6c\uc5d0 \ub530\ub77c OpenAPI \uc9c0\uc6d0 \uc218\uc900\uc774 \ub2e4\ub97c \uc218 \uc788\uc74c\uc744 \uba85\uc2ec\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. \uc77c\ubd80\ub294 \uc544\uc9c1 \uc120\uc5b8\ub41c \ucd94\uac00 \uc815\ubcf4\ub97c \ubaa8\ub450 \ud45c\uc2dc\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\uc9c0\ub9cc, \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \ub204\ub77d\ub41c \uae30\ub2a5\uc740 \uc774\ubbf8 \uac1c\ubc1c \uacc4\ud68d\uc774 \uc788\uc2b5\ub2c8\ub2e4. title \uc744 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , title = \"Query string\" , min_length = 3 ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \uadf8\ub9ac\uace0 description \ub3c4 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \ubcc4\uce6d \ub9e4\uac1c\ubcc0\uc218 \u00b6 \ub9e4\uac1c\ubcc0\uc218\uac00 item-query \uc774\uae38 \uc6d0\ud55c\ub2e4\uace0 \uac00\uc815\ud574 \ubd05\uc2dc\ub2e4. \ub9c8\uce58 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: http://127.0.0.1:8000/items/?item-query=foobaritems \uadf8\ub7ec\ub098 item-query \uc740 \uc720\ud6a8\ud55c \ud30c\uc774\uc36c \ubcc0\uc218 \uc774\ub984\uc774 \uc544\ub2d9\ub2c8\ub2e4. \uac00\uc7a5 \uac00\uae4c\uc6b4 \uac83\uc740 item_query \uc77c \uac81\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc815\ud655\ud788 item-query \uc774\uae38 \uc6d0\ud569\ub2c8\ub2e4... \uc774\ub7f4 \uacbd\uc6b0 alias \ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc73c\uba70, \ud574\ub2f9 \ubcc4\uce6d\uc740 \ub9e4\uac1c\ubcc0\uc218 \uac12\uc744 \ucc3e\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \ub9e4\uac1c\ubcc0\uc218 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uac8c \ud558\uae30 \u00b6 \uc774\uc81c\ub294 \ub354\uc774\uc0c1 \uc774 \ub9e4\uac1c\ubcc0\uc218\ub97c \ub9c8\uc74c\uc5d0 \ub4e4\uc5b4\ud558\uc9c0 \uc54a\ub294\ub2e4\uace0 \uac00\uc815\ud574 \ubd05\uc2dc\ub2e4. \uc774 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc788\uae30 \ub54c\ubb38\uc5d0 \ud55c\ub3d9\uc548\uc740 \ub0a8\uaca8\ub46c\uc57c \ud558\uc9c0\ub9cc, \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4(deprecated) \uace0 \ud655\uc2e4\ud558\uac8c \ubb38\uc11c\uc5d0\uc11c \ubcf4\uc5ec\uc8fc\uace0 \uc2f6\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 deprecated=True \ub9e4\uac1c\ubcc0\uc218\ub97c Query \ub85c \uc804\ub2ec\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" , deprecated = True , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \ubb38\uc11c\uac00 \uc544\ub798\uc640 \uac19\uc774 \ubcf4\uc77c\uac81\ub2c8\ub2e4: \uc694\uc57d \u00b6 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uac80\uc99d\uacfc \uba54\ud0c0\ub370\uc774\ud130\ub97c \ucd94\uac00 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc81c\ub124\ub9ad \uac80\uc99d\uacfc \uba54\ud0c0\ub370\uc774\ud130: alias title description deprecated \ud2b9\uc815 \ubb38\uc790\uc5f4 \uac80\uc99d: min_length max_length regex \uc608\uc81c\uc5d0\uc11c str \uac12\uc758 \uac80\uc99d\uc744 \uc5b4\ub5bb\uac8c \ucd94\uac00\ud558\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc22b\uc790\uc640 \uac19\uc740 \ub2e4\ub978 \uc790\ub8cc\ud615\uc5d0 \ub300\ud55c \uac80\uc99d\uc744 \uc5b4\ub5bb\uac8c \uc120\uc5b8\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub824\uba74 \ub2e4\uc74c \uc7a5\uc744 \ud655\uc778\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4.","title":"\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uc640 \ubb38\uc790\uc5f4 \uac80\uc99d"},{"location":"tutorial/query-params-str-validations/#_1","text":"FastAPI \ub97c \uc0ac\uc6a9\ud558\uba74 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub300\ud55c \ucd94\uac00 \uc815\ubcf4 \ubc0f \uac80\uc99d\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc744 \uc608\ub85c \ub4e4\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = None ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 q \ub294 Optional[str] \uc790\ub8cc\ud615\uc785\ub2c8\ub2e4. \uc989, str \uc790\ub8cc\ud615\uc774\uc9c0\ub9cc None \uc5ed\uc2dc \ub420 \uc218 \uc788\uc74c\uc744 \ub73b\ud558\uace0, \uc2e4\uc81c\ub85c \uae30\ubcf8\uac12\uc740 None \uc774\uae30 \ub54c\ubb38\uc5d0 FastAPI\ub294 \uc774 \ub9e4\uac1c\ubcc0\uc218\uac00 \ud544\uc218\uac00 \uc544\ub2c8\ub77c\ub294 \uac83\uc744 \uc555\ub2c8\ub2e4. \ucc38\uace0 FastAPI\ub294 q \uc758 \uae30\ubcf8\uac12\uc774 = None \uc774\uae30 \ub54c\ubb38\uc5d0 \ud544\uc218\uac00 \uc544\ub2d8\uc744 \uc555\ub2c8\ub2e4. Optional[str] \uc5d0 \uc788\ub294 Optional \uc740 FastAPI\uac00 \uc0ac\uc6a9\ud558\ub294\uac8c \uc544\ub2c8\uc9c0\ub9cc, \ud3b8\uc9d1\uae30\uc5d0\uac8c \ub354 \ub098\uc740 \uc9c0\uc6d0\uacfc \uc624\ub958 \ud0d0\uc9c0\ub97c \uc81c\uacf5\ud558\uac8c \ud574\uc90d\ub2c8\ub2e4.","title":"\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uc640 \ubb38\uc790\uc5f4 \uac80\uc99d"},{"location":"tutorial/query-params-str-validations/#_2","text":"q \uac00 \uc120\ud0dd\uc801\uc774\uc9c0\ub9cc \uac12\uc774 \uc8fc\uc5b4\uc9c8 \ub54c\ub9c8\ub2e4 \uac12\uc774 50 \uae00\uc790\ub97c \ucd08\uacfc\ud558\uc9c0 \uc54a\uac8c \uac15\uc81c\ud558\ub824 \ud569\ub2c8\ub2e4.","title":"\ucd94\uac00 \uac80\uc99d"},{"location":"tutorial/query-params-str-validations/#query","text":"\uc774\ub97c \uc704\ud574 \uba3c\uc800 fastapi \uc5d0\uc11c Query \ub97c \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results","title":"Query \uc784\ud3ec\ud2b8"},{"location":"tutorial/query-params-str-validations/#query_1","text":"\uc774\uc81c Query \ub97c \ub9e4\uac1c\ubcc0\uc218\uc758 \uae30\ubcf8\uac12\uc73c\ub85c \uc0ac\uc6a9\ud558\uc5ec max_length \ub9e4\uac1c\ubcc0\uc218\ub97c 50\uc73c\ub85c \uc124\uc815\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \uae30\ubcf8\uac12 None \uc744 Query(None) \uc73c\ub85c \ubc14\uafd4\uc57c \ud558\ubbc0\ub85c, Query \uc758 \uccab \ubc88\uc9f8 \ub9e4\uac1c\ubcc0\uc218\ub294 \uae30\ubcf8\uac12\uc744 \uc815\uc758\ud558\ub294 \uac83\uacfc \uac19\uc740 \ubaa9\uc801\uc73c\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c: q : Optional [ str ] = Query ( None ) ...\uc704 \ucf54\ub4dc\ub294 \uc544\ub798\uc640 \ub3d9\uc77c\ud558\uac8c \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\ud0dd\uc801\uc73c\ub85c \ub9cc\ub4ed\ub2c8\ub2e4: q : Optional [ str ] = None \ud558\uc9c0\ub9cc \uba85\uc2dc\uc801\uc73c\ub85c \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud569\ub2c8\ub2e4. \uc815\ubcf4 FastAPI\ub294 \ub2e4\uc74c \ubd80\ubd84\uc5d0 \uad00\uc2ec\uc774 \uc788\uc2b5\ub2c8\ub2e4: = None \ub610\ub294: = Query ( None ) \uadf8\ub9ac\uace0 None \uc744 \uc0ac\uc6a9\ud558\uc5ec \ucffc\ub77c \ub9e4\uac1c\ubcc0\uc218\uac00 \ud544\uc218\uc801\uc774\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc744 \ud30c\uc545\ud569\ub2c8\ub2e4. Optional \ubd80\ubd84\uc740 \ud3b8\uc9d1\uae30\uc5d0\uac8c \ub354 \ub098\uc740 \uc9c0\uc6d0\uc744 \uc81c\uacf5\ud558\uae30 \uc704\ud574\uc11c\ub9cc \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub610\ud55c Query \ub85c \ub354 \ub9ce\uc740 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc9c0\uae08\uc758 \uacbd\uc6b0 \ubb38\uc790\uc5f4\uc5d0 \uc801\uc6a9\ub418\ub294 max_length \ub9e4\uac1c\ubcc0\uc218\uc785\ub2c8\ub2e4: q : str = Query ( None , max_length = 50 ) \uc774\ub294 \ub370\uc774\ud130\ub97c \uac80\uc99d\ud560 \uac83\uc774\uace0, \ub370\uc774\ud130\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\ub2e4\uba74 \uba85\ubc31\ud55c \uc624\ub958\ub97c \ubcf4\uc5ec\uc8fc\uba70, OpenAPI \uc2a4\ud0a4\ub9c8 \uacbd\ub85c \ub3d9\uc791 \uc5d0 \ub9e4\uac1c\ubcc0\uc218\ub97c \ubb38\uc11c\ud654 \ud569\ub2c8\ub2e4.","title":"\uae30\ubcf8\uac12\uc73c\ub85c Query \uc0ac\uc6a9"},{"location":"tutorial/query-params-str-validations/#_3","text":"\ub9e4\uac1c\ubcc0\uc218 min_length \ub610\ud55c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , min_length = 3 , max_length = 50 ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results","title":"\uac80\uc99d \ucd94\uac00"},{"location":"tutorial/query-params-str-validations/#_4","text":"\ub9e4\uac1c\ubcc0\uc218\uc640 \uc77c\uce58\ud574\uc57c \ud558\ub294 \uc815\uaddc\ud45c\ud604\uc2dd \uc744 \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \uc774 \ud2b9\uc815 \uc815\uaddc\ud45c\ud604\uc2dd\uc740 \uc804\ub2ec \ubc1b\uc740 \ub9e4\uac1c\ubcc0\uc218 \uac12\uc744 \uac80\uc0ac\ud569\ub2c8\ub2e4: ^ : \uc774\uc804\uc5d0 \ubb38\uc790\uac00 \uc5c6\uace0 \ub4a4\ub530\ub974\ub294 \ubb38\uc790\ub85c \uc2dc\uc791\ud569\ub2c8\ub2e4. fixedquery : \uc815\ud655\ud788 fixedquery \uac12\uc744 \uac16\uc2b5\ub2c8\ub2e4. $ : \uc5ec\uae30\uc11c \ub05d\ub098\uace0 fixedquery \uc774\ud6c4\ub85c \uc544\ubb34 \ubb38\uc790\ub3c4 \uac16\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \"\uc815\uaddc\ud45c\ud604\uc2dd\" \uac1c\ub150\uc5d0 \ub300\ud574 \uc0c1\uc2e4\uac10\uc744 \ub290\uaf08\ub2e4\uba74 \uac71\uc815\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4. \ub9ce\uc740 \uc0ac\ub78c\uc5d0\uac8c \uc5b4\ub824\uc6b4 \uc8fc\uc81c\uc785\ub2c8\ub2e4. \uc544\uc9c1\uc740 \uc815\uaddc\ud45c\ud604\uc2dd \uc5c6\uc774\ub3c4 \ub9ce\uc740 \uc791\uc5c5\ub4e4\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc5b8\uc81c\ub4e0\uc9c0 \uac00\uc11c \ubc30\uc6b8\uc218 \uc788\uace0, FastAPI \uc5d0\uc11c \uc9c1\uc811 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc54c\uace0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4.","title":"\uc815\uaddc\uc2dd \ucd94\uac00"},{"location":"tutorial/query-params-str-validations/#_5","text":"\uae30\ubcf8\uac12\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uccab \ubc88\uc9f8 \uc778\uc790\ub85c None \uc744 \uc804\ub2ec\ud558\ub4ef\uc774, \ub2e4\ub978 \uac12\uc744 \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. min_length \uac00 3 \uc774\uace0, \uae30\ubcf8\uac12\uc774 \"fixedquery\" \uc778 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 q \ub97c \uc120\uc5b8\ud574\ubd05\uc2dc\ub2e4: from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( default = \"fixedquery\" , min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \ucc38\uace0 \uae30\ubcf8\uac12\uc744 \uac16\ub294 \uac83\ub9cc\uc73c\ub85c \ub9e4\uac1c\ubcc0\uc218\ub294 \uc120\ud0dd\uc801\uc774 \ub429\ub2c8\ub2e4.","title":"\uae30\ubcf8\uac12"},{"location":"tutorial/query-params-str-validations/#_6","text":"\ub354 \ub9ce\uc740 \uac80\uc99d\uc774\ub098 \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc120\uc5b8\ud560 \ud544\uc694\uac00 \uc5c6\ub294 \uacbd\uc6b0, \ub2e4\uc74c\uacfc \uac19\uc774 \uae30\ubcf8\uac12\uc744 \uc120\uc5b8\ud558\uc9c0 \uc54a\uace0 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 q \ub97c \ud544\uc218\ub85c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4: q : str \uc544\ub798 \ub300\uc2e0: q : Optional [ str ] = None \uadf8\ub7ec\ub098 \uc774\uc81c \ub2e4\uc74c\uacfc \uac19\uc774 Query \ub85c \uc120\uc5b8\ud569\ub2c8\ub2e4: q : Optional [ str ] = Query ( None , min_length = 3 ) \uadf8\ub798\uc11c Query \ub97c \ud544\uc218\uac12\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc57c \ud560 \ub54c\uba74, \uccab \ubc88\uc9f8 \uc778\uc790\ub85c ... \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \uc815\ubcf4 \uc774\uc804\uc5d0 ... \ub97c \ubcf8\uc801\uc774 \uc5c6\ub2e4\uba74: \ud2b9\ubcc4\ud55c \ub2e8\uc77c\uac12\uc73c\ub85c, \ud30c\uc774\uc36c\uc758 \uc77c\ubd80\uc774\uba70 \"Ellipsis\"\ub77c \ubd80\ub985\ub2c8\ub2e4 . \uc774\ub807\uac8c \ud558\uba74 FastAPI \uac00 \uc774 \ub9e4\uac1c\ubcc0\uc218\ub294 \ud544\uc218\uc784\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ud544\uc218\ub85c \ub9cc\ub4e4\uae30"},{"location":"tutorial/query-params-str-validations/#_7","text":"\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c Query \uc640 \ud568\uaed8 \uba85\uc2dc\uc801\uc73c\ub85c \uc120\uc5b8\ud560 \ub54c, \uac12\ub4e4\uc758 \ub9ac\uc2a4\ud2b8\ub098 \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c \uc5ec\ub7ec \uac12\uc744 \ubc1b\ub3c4\ub85d \uc120\uc5b8 \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, URL\uc5d0\uc11c \uc5ec\ub7ec\ubc88 \ub098\uc624\ub294 q \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud558\ub824\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import List , Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ List [ str ], None ] = Query ( default = None )): query_items = { \"q\" : q } return query_items \uc544\ub798\uc640 \uac19\uc740 URL\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4: http://localhost:8000/items/?q=foo&q=bar \uc5ec\ub7ec q \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \uac12\ub4e4\uc744 ( foo \ubc0f bar ) \ud30c\uc774\uc36c list \ub85c \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub0b4 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218 q \ub85c \uc804\ub2ec \ubc1b\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud574\ub2f9 URL\uc5d0 \ub300\ud55c \uc751\ub2f5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: { \"q\" : [ \"foo\" , \"bar\" ] } \ud301 \uc704\uc758 \uc608\uc640 \uac19\uc774 list \uc790\ub8cc\ud615\uc73c\ub85c \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud558\ub824\uba74 Query \ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \uc694\uccad \ubcf8\ubb38\uc73c\ub85c \ud574\uc11d\ub429\ub2c8\ub2e4. \ub300\ud654\ud615 API \ubb38\uc11c\ub294 \uc5ec\ub7ec \uac12\uc744 \ud5c8\uc6a9\ud558\ub3c4\ub85d \uc218\uc815 \ub429\ub2c8\ub2e4:","title":"\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \ub9ac\uc2a4\ud2b8 / \ub2e4\uc911\uac12"},{"location":"tutorial/query-params-str-validations/#_8","text":"\uadf8\ub9ac\uace0 \uc81c\uacf5\ub41c \uac12\uc774 \uc5c6\uc73c\uba74 \uae30\ubcf8 list \uac12\uc744 \uc815\uc758\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: from typing import List from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : List [ str ] = Query ( default = [ \"foo\" , \"bar\" ])): query_items = { \"q\" : q } return query_items \uc544\ub798\ub85c \uc774\ub3d9\ud55c\ub2e4\uba74: http://localhost:8000/items/ q \uc758 \uae30\ubcf8\uac12\uc740: [\"foo\", \"bar\"] \uc774\uba70 \uc751\ub2f5\uc740 \ub2e4\uc74c\uc774 \ub429\ub2c8\ub2e4: { \"q\" : [ \"foo\" , \"bar\" ] }","title":"\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \ub9ac\uc2a4\ud2b8 / \uae30\ubcf8\uac12\uc744 \uc0ac\uc6a9\ud558\ub294 \ub2e4\uc911\uac12"},{"location":"tutorial/query-params-str-validations/#list","text":"List[str] \ub300\uc2e0 list \ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : list = Query ( default = [])): query_items = { \"q\" : q } return query_items \ucc38\uace0 \uc774 \uacbd\uc6b0 FastAPI\ub294 \ub9ac\uc2a4\ud2b8\uc758 \ub0b4\uc6a9\uc744 \uac80\uc0ac\ud558\uc9c0 \uc54a\uc74c\uc744 \uba85\uc2ec\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, List[int] \ub294 \ub9ac\uc2a4\ud2b8 \ub0b4\uc6a9\uc774 \uc815\uc218\uc778\uc9c0 \uac80\uc0ac(\ubc0f \ubb38\uc11c\ud654)\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc list \ub2e8\ub3c5\uc77c \uacbd\uc6b0\ub294 \uc544\ub2d9\ub2c8\ub2e4.","title":"list \uc0ac\uc6a9\ud558\uae30"},{"location":"tutorial/query-params-str-validations/#_9","text":"\ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud574\ub2f9 \uc815\ubcf4\ub294 \uc0dd\uc131\ub41c OpenAPI\uc5d0 \ud3ec\ud568\ub418\uace0 \ubb38\uc11c \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4 \ubc0f \uc678\ubd80 \ub3c4\uad6c\uc5d0\uc11c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ucc38\uace0 \ub3c4\uad6c\uc5d0 \ub530\ub77c OpenAPI \uc9c0\uc6d0 \uc218\uc900\uc774 \ub2e4\ub97c \uc218 \uc788\uc74c\uc744 \uba85\uc2ec\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. \uc77c\ubd80\ub294 \uc544\uc9c1 \uc120\uc5b8\ub41c \ucd94\uac00 \uc815\ubcf4\ub97c \ubaa8\ub450 \ud45c\uc2dc\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\uc9c0\ub9cc, \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \ub204\ub77d\ub41c \uae30\ub2a5\uc740 \uc774\ubbf8 \uac1c\ubc1c \uacc4\ud68d\uc774 \uc788\uc2b5\ub2c8\ub2e4. title \uc744 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , title = \"Query string\" , min_length = 3 ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \uadf8\ub9ac\uace0 description \ub3c4 \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results","title":"\ub354 \ub9ce\uc740 \uba54\ud0c0\ub370\uc774\ud130 \uc120\uc5b8"},{"location":"tutorial/query-params-str-validations/#_10","text":"\ub9e4\uac1c\ubcc0\uc218\uac00 item-query \uc774\uae38 \uc6d0\ud55c\ub2e4\uace0 \uac00\uc815\ud574 \ubd05\uc2dc\ub2e4. \ub9c8\uce58 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: http://127.0.0.1:8000/items/?item-query=foobaritems \uadf8\ub7ec\ub098 item-query \uc740 \uc720\ud6a8\ud55c \ud30c\uc774\uc36c \ubcc0\uc218 \uc774\ub984\uc774 \uc544\ub2d9\ub2c8\ub2e4. \uac00\uc7a5 \uac00\uae4c\uc6b4 \uac83\uc740 item_query \uc77c \uac81\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc815\ud655\ud788 item-query \uc774\uae38 \uc6d0\ud569\ub2c8\ub2e4... \uc774\ub7f4 \uacbd\uc6b0 alias \ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc73c\uba70, \ud574\ub2f9 \ubcc4\uce6d\uc740 \ub9e4\uac1c\ubcc0\uc218 \uac12\uc744 \ucc3e\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results","title":"\ubcc4\uce6d \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/query-params-str-validations/#_11","text":"\uc774\uc81c\ub294 \ub354\uc774\uc0c1 \uc774 \ub9e4\uac1c\ubcc0\uc218\ub97c \ub9c8\uc74c\uc5d0 \ub4e4\uc5b4\ud558\uc9c0 \uc54a\ub294\ub2e4\uace0 \uac00\uc815\ud574 \ubd05\uc2dc\ub2e4. \uc774 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc788\uae30 \ub54c\ubb38\uc5d0 \ud55c\ub3d9\uc548\uc740 \ub0a8\uaca8\ub46c\uc57c \ud558\uc9c0\ub9cc, \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4(deprecated) \uace0 \ud655\uc2e4\ud558\uac8c \ubb38\uc11c\uc5d0\uc11c \ubcf4\uc5ec\uc8fc\uace0 \uc2f6\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 deprecated=True \ub9e4\uac1c\ubcc0\uc218\ub97c Query \ub85c \uc804\ub2ec\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" , deprecated = True , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \ubb38\uc11c\uac00 \uc544\ub798\uc640 \uac19\uc774 \ubcf4\uc77c\uac81\ub2c8\ub2e4:","title":"\ub9e4\uac1c\ubcc0\uc218 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uac8c \ud558\uae30"},{"location":"tutorial/query-params-str-validations/#_12","text":"\ub9e4\uac1c\ubcc0\uc218\uc5d0 \uac80\uc99d\uacfc \uba54\ud0c0\ub370\uc774\ud130\ub97c \ucd94\uac00 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc81c\ub124\ub9ad \uac80\uc99d\uacfc \uba54\ud0c0\ub370\uc774\ud130: alias title description deprecated \ud2b9\uc815 \ubb38\uc790\uc5f4 \uac80\uc99d: min_length max_length regex \uc608\uc81c\uc5d0\uc11c str \uac12\uc758 \uac80\uc99d\uc744 \uc5b4\ub5bb\uac8c \ucd94\uac00\ud558\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc22b\uc790\uc640 \uac19\uc740 \ub2e4\ub978 \uc790\ub8cc\ud615\uc5d0 \ub300\ud55c \uac80\uc99d\uc744 \uc5b4\ub5bb\uac8c \uc120\uc5b8\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub824\uba74 \ub2e4\uc74c \uc7a5\uc744 \ud655\uc778\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4.","title":"\uc694\uc57d"},{"location":"tutorial/query-params/","text":"\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \u00b6 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc758 \uc77c\ubd80\uac00 \uc544\ub2cc \ub2e4\ub978 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud560 \ub54c, \"\ucffc\ub9ac\" \ub9e4\uac1c\ubcc0\uc218\ub85c \uc790\ub3d9 \ud574\uc11d\ud569\ub2c8\ub2e4. from fastapi import FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] @app . get ( \"/items/\" ) async def read_item ( skip : int = 0 , limit : int = 10 ): return fake_items_db [ skip : skip + limit ] \ucffc\ub9ac\ub294 URL\uc5d0\uc11c ? \ud6c4\uc5d0 \ub098\uc624\uace0 & \uc73c\ub85c \uad6c\ubd84\ub418\ub294 \ud0a4-\uac12 \uc30d\uc758 \uc9d1\ud569\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, URL\uc5d0\uc11c: http://127.0.0.1:8000/items/?skip=0&limit=10 ...\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub294: skip : \uac12 0 \uc744 \uac00\uc9d1\ub2c8\ub2e4. limit : \uac12 10 \uc744 \uac00\uc9d1\ub2c8\ub2e4. URL\uc758 \uc77c\ubd80\uc774\ubbc0\ub85c \"\uc790\uc5f0\uc2a4\ub7fd\uac8c\" \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ud30c\uc774\uc36c \ud0c0\uc785\uacfc \ud568\uaed8 \uc120\uc5b8\ud560 \uacbd\uc6b0(\uc704 \uc608\uc5d0\uc11c int ), \ud574\ub2f9 \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\ub418\uace0 \uc774\uc5d0 \ub300\ud574 \uac80\uc99d\ud569\ub2c8\ub2e4. \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uc801\uc6a9\ub41c \ub3d9\uc77c\ud55c \ud504\ub85c\uc138\uc2a4\uac00 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uc5d0\ub3c4 \uc801\uc6a9\ub429\ub2c8\ub2e4: (\ub2f9\uc5f0\ud788) \ud3b8\uc9d1\uae30 \uc9c0\uc6d0 \ub370\uc774\ud130 \"\ud30c\uc2f1\" \ub370\uc774\ud130 \uac80\uc99d \uc790\ub3d9 \ubb38\uc11c\ud654 \uae30\ubcf8\uac12 \u00b6 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub294 \uacbd\ub85c\uc5d0\uc11c \uace0\uc815\ub41c \ubd80\ubd84\uc774 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 \uc120\ud0dd\uc801\uc77c \uc218 \uc788\uace0 \uae30\ubcf8\uac12\uc744 \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc704 \uc608\uc5d0\uc11c skip=0 \uacfc limit=10 \uc740 \uae30\ubcf8\uac12\uc744 \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c URL\ub85c \uc774\ub3d9\ud558\uba74: http://127.0.0.1:8000/items/ \uc544\ub798\ub85c \uc774\ub3d9\ud55c \uac83\uacfc \uac19\uc2b5\ub2c8\ub2e4: http://127.0.0.1:8000/items/?skip=0&limit=10 \ud558\uc9c0\ub9cc \uac00\ub839 \uc544\ub798\ub85c \uc774\ub3d9\ud55c \uacbd\uc6b0: http://127.0.0.1:8000/items/?skip=20 \ud568\uc218\uc758 \ub9e4\uac1c\ubcc0\uc218 \uac12\uc740 \uc544\ub798\uac00 \ub429\ub2c8\ub2e4: skip=20 : URL\uc5d0\uc11c \uc9c0\uc815\ud588\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4 limit=10 : \uae30\ubcf8\uac12\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4 \uc120\ud0dd\uc801 \ub9e4\uac1c\ubcc0\uc218 \u00b6 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uae30\ubcf8\uac12\uc744 None \uc73c\ub85c \uc124\uc815\ud558\uc5ec \uc120\ud0dd\uc801 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : Union [ str , None ] = None ): if q : return { \"item_id\" : item_id , \"q\" : q } return { \"item_id\" : item_id } \uc774 \uacbd\uc6b0 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218 q \ub294 \uc120\ud0dd\uc801\uc774\uba70 \uae30\ubcf8\uac12\uc73c\ub85c None \uac12\uc774 \ub429\ub2c8\ub2e4. \ud655\uc778 FastAPI \ub294 item_id \uac00 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc774\uace0 q \ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uac00 \uc544\ub2cc \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub77c\ub294 \uac83\uc744 \uc54c \uc815\ub3c4\ub85c \ucda9\ubd84\ud788 \ub611\ub611\ud569\ub2c8\ub2e4. \ucc38\uace0 FastAPI\ub294 q \uac00 = None \uc774\ubbc0\ub85c \uc120\ud0dd\uc801\uc774\ub77c\ub294 \uac83\uc744 \uc778\uc9c0\ud569\ub2c8\ub2e4. Union[str, None] \uc5d0 \uc788\ub294 Union \uc740 FastAPI(FastAPI\ub294 str \ubd80\ubd84\ub9cc \uc0ac\uc6a9\ud569\ub2c8\ub2e4)\uac00 \uc0ac\uc6a9\ud558\ub294\uac8c \uc544\ub2c8\uc9c0\ub9cc, Union[str, None] \uc740 \ud3b8\uc9d1\uae30\uc5d0\uac8c \ucf54\ub4dc\uc5d0\uc11c \uc624\ub958\ub97c \ucc3e\uc544\ub0bc \uc218 \uc788\uac8c \ub3c4\uc640\uc90d\ub2c8\ub2e4. \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \ud615\ubcc0\ud658 \u00b6 bool \ud615\uc73c\ub85c \uc120\uc5b8\ud560 \uc218\ub3c4 \uc788\uace0, \uc544\ub798\ucc98\ub7fc \ubcc0\ud658\ub429\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : Union [ str , None ] = None , short : bool = False ): item = { \"item_id\" : item_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item \uc774 \uacbd\uc6b0, \uc544\ub798\ub85c \uc774\ub3d9\ud558\uba74: http://127.0.0.1:8000/items/foo?short=1 \ub610\ub294 http://127.0.0.1:8000/items/foo?short=True \ub610\ub294 http://127.0.0.1:8000/items/foo?short=true \ub610\ub294 http://127.0.0.1:8000/items/foo?short=on \ub610\ub294 http://127.0.0.1:8000/items/foo?short=yes \ub610\ub294 \ub2e4\ub978 \uc5b4\ub5a4 \ubcc0\ud615(\ub300\ubb38\uc790, \uccab\uae00\uc790\ub9cc \ub300\ubb38\uc790 \ub4f1)\uc774\ub354\ub77c\ub3c4 \ud568\uc218\ub294 \ub9e4\uac1c\ubcc0\uc218 bool \ud615\uc744 \uac00\uc9c4 short \uc758 \uac12\uc774 True \uc784\uc744 \uc555\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0 False \uc785\ub2c8\ub2e4. \uc5ec\ub7ec \uacbd\ub85c/\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \u00b6 \uc5ec\ub7ec \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc640 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \ub3d9\uc2dc\uc5d0 \uc120\uc5b8\ud560 \uc218 \uc788\uc73c\uba70 FastAPI \ub294 \uc5b4\ub290 \uac83\uc774 \ubb34\uc5c7\uc778\uc9c0 \uc54c\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud2b9\uc815 \uc21c\uc11c\ub85c \uc120\uc5b8\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc740 \uc774\ub984\uc73c\ub85c \uac10\uc9c0\ub429\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/ {user_id} /items/ {item_id} \" ) async def read_user_item ( user_id : int , item_id : str , q : Union [ str , None ] = None , short : bool = False ): item = { \"item_id\" : item_id , \"owner_id\" : user_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item \ud544\uc218 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \u00b6 \uacbd\ub85c\uac00 \uc544\ub2cc \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub300\ud55c \uae30\ubcf8\uac12\uc744 \uc120\uc5b8\ud560 \ub54c(\uc9c0\uae08\uc740 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub9cc \ubcf4\uc558\uc2b5\ub2c8\ub2e4), \ud574\ub2f9 \ub9e4\uac1c\ubcc0\uc218\ub294 \ud544\uc218\uc801(Required)\uc774\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \ud2b9\uc815\uac12\uc744 \ucd94\uac00\ud558\uc9c0 \uc54a\uace0 \uc120\ud0dd\uc801\uc73c\ub85c \ub9cc\ub4e4\uae30 \uc704\ud574\uc120 \uae30\ubcf8\uac12\uc744 None \uc73c\ub85c \uc124\uc815\ud558\uba74 \ub429\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \ud544\uc218\ub85c \ub9cc\ub4e4\ub824\uba74 \uae30\ubcf8\uac12\uc744 \uc120\uc5b8\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_user_item ( item_id : str , needy : str ): item = { \"item_id\" : item_id , \"needy\" : needy } return item \uc5ec\uae30 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 needy \ub294 str \ud615\uc778 \ud544\uc218 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uc785\ub2c8\ub2e4. \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c URL\uc744 \uc544\ub798\ucc98\ub7fc \uc5f0\ub2e4\uba74: http://127.0.0.1:8000/items/foo-item ...\ud544\uc218 \ub9e4\uac1c\ubcc0\uc218 needy \ub97c \ub123\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \uc544\ub798\uc640 \uac19\uc740 \uc624\ub958\ub97c \ubcf4\uac8c \ub429\ub2c8\ub2e4: { \"detail\" : [ { \"loc\" : [ \"query\" , \"needy\" ], \"msg\" : \"field required\" , \"type\" : \"value_error.missing\" } ] } needy \ub294 \ud544\uc218 \ub9e4\uac1c\ubcc0\uc218\uc774\ubbc0\ub85c URL\uc5d0 \ubc18\ub4dc\uc2dc \uc124\uc815\ud574\uc918\uc57c \ud569\ub2c8\ub2e4: http://127.0.0.1:8000/items/foo-item?needy=sooooneedy ...\uc544\ub798\ucc98\ub7fc \uc791\ub3d9\ud569\ub2c8\ub2e4: { \"item_id\" : \"foo-item\" , \"needy\" : \"sooooneedy\" } \uadf8\ub9ac\uace0 \ubb3c\ub860, \uc77c\ubd80 \ub9e4\uac1c\ubcc0\uc218\ub294 \ud544\uc218\ub85c, \ub2e4\ub978 \uc77c\ubd80\ub294 \uae30\ubcf8\uac12\uc744, \ub610 \ub2e4\ub978 \uc77c\ubd80\ub294 \uc120\ud0dd\uc801\uc73c\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_user_item ( item_id : str , needy : str , skip : int = 0 , limit : Union [ int , None ] = None ): item = { \"item_id\" : item_id , \"needy\" : needy , \"skip\" : skip , \"limit\" : limit } return item \uc774 \uacbd\uc6b0 3\uac00\uc9c0 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\uc2b5\ub2c8\ub2e4: needy , \ud544\uc218\uc801\uc778 str . skip , \uae30\ubcf8\uac12\uc774 0 \uc778 int . limit , \uc120\ud0dd\uc801\uc778 int . \ud301 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c Enum \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/query-params/#_1","text":"\uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc758 \uc77c\ubd80\uac00 \uc544\ub2cc \ub2e4\ub978 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud560 \ub54c, \"\ucffc\ub9ac\" \ub9e4\uac1c\ubcc0\uc218\ub85c \uc790\ub3d9 \ud574\uc11d\ud569\ub2c8\ub2e4. from fastapi import FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] @app . get ( \"/items/\" ) async def read_item ( skip : int = 0 , limit : int = 10 ): return fake_items_db [ skip : skip + limit ] \ucffc\ub9ac\ub294 URL\uc5d0\uc11c ? \ud6c4\uc5d0 \ub098\uc624\uace0 & \uc73c\ub85c \uad6c\ubd84\ub418\ub294 \ud0a4-\uac12 \uc30d\uc758 \uc9d1\ud569\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, URL\uc5d0\uc11c: http://127.0.0.1:8000/items/?skip=0&limit=10 ...\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub294: skip : \uac12 0 \uc744 \uac00\uc9d1\ub2c8\ub2e4. limit : \uac12 10 \uc744 \uac00\uc9d1\ub2c8\ub2e4. URL\uc758 \uc77c\ubd80\uc774\ubbc0\ub85c \"\uc790\uc5f0\uc2a4\ub7fd\uac8c\" \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ud30c\uc774\uc36c \ud0c0\uc785\uacfc \ud568\uaed8 \uc120\uc5b8\ud560 \uacbd\uc6b0(\uc704 \uc608\uc5d0\uc11c int ), \ud574\ub2f9 \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\ub418\uace0 \uc774\uc5d0 \ub300\ud574 \uac80\uc99d\ud569\ub2c8\ub2e4. \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uc801\uc6a9\ub41c \ub3d9\uc77c\ud55c \ud504\ub85c\uc138\uc2a4\uac00 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uc5d0\ub3c4 \uc801\uc6a9\ub429\ub2c8\ub2e4: (\ub2f9\uc5f0\ud788) \ud3b8\uc9d1\uae30 \uc9c0\uc6d0 \ub370\uc774\ud130 \"\ud30c\uc2f1\" \ub370\uc774\ud130 \uac80\uc99d \uc790\ub3d9 \ubb38\uc11c\ud654","title":"\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/query-params/#_2","text":"\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub294 \uacbd\ub85c\uc5d0\uc11c \uace0\uc815\ub41c \ubd80\ubd84\uc774 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 \uc120\ud0dd\uc801\uc77c \uc218 \uc788\uace0 \uae30\ubcf8\uac12\uc744 \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc704 \uc608\uc5d0\uc11c skip=0 \uacfc limit=10 \uc740 \uae30\ubcf8\uac12\uc744 \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c URL\ub85c \uc774\ub3d9\ud558\uba74: http://127.0.0.1:8000/items/ \uc544\ub798\ub85c \uc774\ub3d9\ud55c \uac83\uacfc \uac19\uc2b5\ub2c8\ub2e4: http://127.0.0.1:8000/items/?skip=0&limit=10 \ud558\uc9c0\ub9cc \uac00\ub839 \uc544\ub798\ub85c \uc774\ub3d9\ud55c \uacbd\uc6b0: http://127.0.0.1:8000/items/?skip=20 \ud568\uc218\uc758 \ub9e4\uac1c\ubcc0\uc218 \uac12\uc740 \uc544\ub798\uac00 \ub429\ub2c8\ub2e4: skip=20 : URL\uc5d0\uc11c \uc9c0\uc815\ud588\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4 limit=10 : \uae30\ubcf8\uac12\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4","title":"\uae30\ubcf8\uac12"},{"location":"tutorial/query-params/#_3","text":"\uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uae30\ubcf8\uac12\uc744 None \uc73c\ub85c \uc124\uc815\ud558\uc5ec \uc120\ud0dd\uc801 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : Union [ str , None ] = None ): if q : return { \"item_id\" : item_id , \"q\" : q } return { \"item_id\" : item_id } \uc774 \uacbd\uc6b0 \ud568\uc218 \ub9e4\uac1c\ubcc0\uc218 q \ub294 \uc120\ud0dd\uc801\uc774\uba70 \uae30\ubcf8\uac12\uc73c\ub85c None \uac12\uc774 \ub429\ub2c8\ub2e4. \ud655\uc778 FastAPI \ub294 item_id \uac00 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc774\uace0 q \ub294 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uac00 \uc544\ub2cc \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub77c\ub294 \uac83\uc744 \uc54c \uc815\ub3c4\ub85c \ucda9\ubd84\ud788 \ub611\ub611\ud569\ub2c8\ub2e4. \ucc38\uace0 FastAPI\ub294 q \uac00 = None \uc774\ubbc0\ub85c \uc120\ud0dd\uc801\uc774\ub77c\ub294 \uac83\uc744 \uc778\uc9c0\ud569\ub2c8\ub2e4. Union[str, None] \uc5d0 \uc788\ub294 Union \uc740 FastAPI(FastAPI\ub294 str \ubd80\ubd84\ub9cc \uc0ac\uc6a9\ud569\ub2c8\ub2e4)\uac00 \uc0ac\uc6a9\ud558\ub294\uac8c \uc544\ub2c8\uc9c0\ub9cc, Union[str, None] \uc740 \ud3b8\uc9d1\uae30\uc5d0\uac8c \ucf54\ub4dc\uc5d0\uc11c \uc624\ub958\ub97c \ucc3e\uc544\ub0bc \uc218 \uc788\uac8c \ub3c4\uc640\uc90d\ub2c8\ub2e4.","title":"\uc120\ud0dd\uc801 \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/query-params/#_4","text":"bool \ud615\uc73c\ub85c \uc120\uc5b8\ud560 \uc218\ub3c4 \uc788\uace0, \uc544\ub798\ucc98\ub7fc \ubcc0\ud658\ub429\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : Union [ str , None ] = None , short : bool = False ): item = { \"item_id\" : item_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item \uc774 \uacbd\uc6b0, \uc544\ub798\ub85c \uc774\ub3d9\ud558\uba74: http://127.0.0.1:8000/items/foo?short=1 \ub610\ub294 http://127.0.0.1:8000/items/foo?short=True \ub610\ub294 http://127.0.0.1:8000/items/foo?short=true \ub610\ub294 http://127.0.0.1:8000/items/foo?short=on \ub610\ub294 http://127.0.0.1:8000/items/foo?short=yes \ub610\ub294 \ub2e4\ub978 \uc5b4\ub5a4 \ubcc0\ud615(\ub300\ubb38\uc790, \uccab\uae00\uc790\ub9cc \ub300\ubb38\uc790 \ub4f1)\uc774\ub354\ub77c\ub3c4 \ud568\uc218\ub294 \ub9e4\uac1c\ubcc0\uc218 bool \ud615\uc744 \uac00\uc9c4 short \uc758 \uac12\uc774 True \uc784\uc744 \uc555\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0 False \uc785\ub2c8\ub2e4.","title":"\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \ud615\ubcc0\ud658"},{"location":"tutorial/query-params/#_5","text":"\uc5ec\ub7ec \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218\uc640 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \ub3d9\uc2dc\uc5d0 \uc120\uc5b8\ud560 \uc218 \uc788\uc73c\uba70 FastAPI \ub294 \uc5b4\ub290 \uac83\uc774 \ubb34\uc5c7\uc778\uc9c0 \uc54c\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud2b9\uc815 \uc21c\uc11c\ub85c \uc120\uc5b8\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc740 \uc774\ub984\uc73c\ub85c \uac10\uc9c0\ub429\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/ {user_id} /items/ {item_id} \" ) async def read_user_item ( user_id : int , item_id : str , q : Union [ str , None ] = None , short : bool = False ): item = { \"item_id\" : item_id , \"owner_id\" : user_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item","title":"\uc5ec\ub7ec \uacbd\ub85c/\ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/query-params/#_6","text":"\uacbd\ub85c\uac00 \uc544\ub2cc \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ub300\ud55c \uae30\ubcf8\uac12\uc744 \uc120\uc5b8\ud560 \ub54c(\uc9c0\uae08\uc740 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub9cc \ubcf4\uc558\uc2b5\ub2c8\ub2e4), \ud574\ub2f9 \ub9e4\uac1c\ubcc0\uc218\ub294 \ud544\uc218\uc801(Required)\uc774\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \ud2b9\uc815\uac12\uc744 \ucd94\uac00\ud558\uc9c0 \uc54a\uace0 \uc120\ud0dd\uc801\uc73c\ub85c \ub9cc\ub4e4\uae30 \uc704\ud574\uc120 \uae30\ubcf8\uac12\uc744 None \uc73c\ub85c \uc124\uc815\ud558\uba74 \ub429\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \ud544\uc218\ub85c \ub9cc\ub4e4\ub824\uba74 \uae30\ubcf8\uac12\uc744 \uc120\uc5b8\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_user_item ( item_id : str , needy : str ): item = { \"item_id\" : item_id , \"needy\" : needy } return item \uc5ec\uae30 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 needy \ub294 str \ud615\uc778 \ud544\uc218 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uc785\ub2c8\ub2e4. \ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c URL\uc744 \uc544\ub798\ucc98\ub7fc \uc5f0\ub2e4\uba74: http://127.0.0.1:8000/items/foo-item ...\ud544\uc218 \ub9e4\uac1c\ubcc0\uc218 needy \ub97c \ub123\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \uc544\ub798\uc640 \uac19\uc740 \uc624\ub958\ub97c \ubcf4\uac8c \ub429\ub2c8\ub2e4: { \"detail\" : [ { \"loc\" : [ \"query\" , \"needy\" ], \"msg\" : \"field required\" , \"type\" : \"value_error.missing\" } ] } needy \ub294 \ud544\uc218 \ub9e4\uac1c\ubcc0\uc218\uc774\ubbc0\ub85c URL\uc5d0 \ubc18\ub4dc\uc2dc \uc124\uc815\ud574\uc918\uc57c \ud569\ub2c8\ub2e4: http://127.0.0.1:8000/items/foo-item?needy=sooooneedy ...\uc544\ub798\ucc98\ub7fc \uc791\ub3d9\ud569\ub2c8\ub2e4: { \"item_id\" : \"foo-item\" , \"needy\" : \"sooooneedy\" } \uadf8\ub9ac\uace0 \ubb3c\ub860, \uc77c\ubd80 \ub9e4\uac1c\ubcc0\uc218\ub294 \ud544\uc218\ub85c, \ub2e4\ub978 \uc77c\ubd80\ub294 \uae30\ubcf8\uac12\uc744, \ub610 \ub2e4\ub978 \uc77c\ubd80\ub294 \uc120\ud0dd\uc801\uc73c\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_user_item ( item_id : str , needy : str , skip : int = 0 , limit : Union [ int , None ] = None ): item = { \"item_id\" : item_id , \"needy\" : needy , \"skip\" : skip , \"limit\" : limit } return item \uc774 \uacbd\uc6b0 3\uac00\uc9c0 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\uc2b5\ub2c8\ub2e4: needy , \ud544\uc218\uc801\uc778 str . skip , \uae30\ubcf8\uac12\uc774 0 \uc778 int . limit , \uc120\ud0dd\uc801\uc778 int . \ud301 \uacbd\ub85c \ub9e4\uac1c\ubcc0\uc218 \uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c Enum \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ud544\uc218 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/request-files/","text":"\ud30c\uc77c \uc694\uccad \u00b6 File \uc744 \uc0ac\uc6a9\ud558\uc5ec \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc5c5\ub85c\ub4dc\ud560 \ud30c\uc77c\ub4e4\uc744 \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \uc5c5\ub85c\ub4dc\ub41c \ud30c\uc77c\uc744 \uc804\ub2ec\ubc1b\uae30 \uc704\ud574 \uba3c\uc800 python-multipart \ub97c \uc124\uce58\ud574\uc57c\ud569\ub2c8\ub2e4. \uc608\uc2dc) pip install python-multipart . \uc5c5\ub85c\ub4dc\ub41c \ud30c\uc77c\ub4e4\uc740 \"\ud3fc \ub370\uc774\ud130\"\uc758 \ud615\ud0dc\ub85c \uc804\uc1a1\ub418\uae30 \ub54c\ubb38\uc5d0 \uc774 \uc791\uc5c5\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. File \uc784\ud3ec\ud2b8 \u00b6 fastapi \uc5d0\uc11c File \uacfc UploadFile \uc744 \uc784\ud3ec\ud2b8 \ud569\ub2c8\ub2e4: from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } File \ub9e4\uac1c\ubcc0\uc218 \uc815\uc758 \u00b6 Body \ubc0f Form \uacfc \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c \ud30c\uc77c\uc758 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4: from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } \uc815\ubcf4 File \uc740 Form \uc73c\ub85c\ubd80\ud130 \uc9c1\uc811 \uc0c1\uc18d\ub41c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc fastapi \ub85c\ubd80\ud130 Query , Path , File \ub4f1\uc744 \uc784\ud3ec\ud2b8 \ud560 \ub54c, \uc774\uac83\ub4e4\uc740 \ud2b9\ubcc4\ud55c \ud074\ub798\uc2a4\ub4e4\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub77c\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. \ud301 File\uc758 \ubcf8\ubb38\uc744 \uc120\uc5b8\ud560 \ub54c, \ub9e4\uac1c\ubcc0\uc218\uac00 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \ub610\ub294 \ubcf8\ubb38(JSON) \ub9e4\uac1c\ubcc0\uc218\ub85c \ud574\uc11d\ub418\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574 File \uc744 \uc0ac\uc6a9\ud574\uc57c\ud569\ub2c8\ub2e4. \ud30c\uc77c\ub4e4\uc740 \"\ud3fc \ub370\uc774\ud130\"\uc758 \ud615\ud0dc\ub85c \uc5c5\ub85c\ub4dc \ub429\ub2c8\ub2e4. \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc758 \ub9e4\uac1c\ubcc0\uc218\ub97c bytes \ub85c \uc120\uc5b8\ud558\ub294 \uacbd\uc6b0 FastAPI \ub294 \ud30c\uc77c\uc744 \uc77d\uace0 bytes \ud615\ud0dc\uc758 \ub0b4\uc6a9\uc744 \uc804\ub2ec\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \uc804\uccb4 \ub0b4\uc6a9\uc774 \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ub41c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4\ub294 \uac78 \uc5fc\ub450\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. \uc774\ub294 \uc791\uc740 \ud06c\uae30\uc758 \ud30c\uc77c\ub4e4\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4. \uc5b4\ub5a4 \uacbd\uc6b0\uc5d0\ub294 UploadFile \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \uc720\ub9ac\ud569\ub2c8\ub2e4. File \ub9e4\uac1c\ubcc0\uc218\uc640 UploadFile \u00b6 File \ub9e4\uac1c\ubcc0\uc218\ub97c UploadFile \ud0c0\uc785\uc73c\ub85c \uc815\uc758\ud569\ub2c8\ub2e4: from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } UploadFile \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 bytes \uacfc \ube44\uad50\ud574 \ub2e4\uc74c\uacfc \uac19\uc740 \uc7a5\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4: \"\uc2a4\ud480 \ud30c\uc77c\"\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ucd5c\ub300 \ud06c\uae30 \uc81c\ud55c\uae4c\uc9c0\ub9cc \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ub418\uba70, \uc774\ub97c \ucd08\uacfc\ud558\ub294 \uacbd\uc6b0 \ub514\uc2a4\ud06c\uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc774\ubbf8\uc9c0, \ub3d9\uc601\uc0c1, \ud070 \uc774\uc9c4\ucf54\ub4dc\uc640 \uac19\uc740 \ub300\uc6a9\ub7c9 \ud30c\uc77c\ub4e4\uc744 \ub9ce\uc740 \uba54\ubaa8\ub9ac\ub97c \uc18c\ubaa8\ud558\uc9c0 \uc54a\uace0 \ucc98\ub9ac\ud558\uae30\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4. \uc5c5\ub85c\ub4dc \ub41c \ud30c\uc77c\uc758 \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. file-like async \uc778\ud130\ud398\uc774\uc2a4\ub97c \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. file-like object\ub97c \ud544\uc694\ub85c\ud558\ub294 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uc9c1\uc811\uc801\uc73c\ub85c \uc804\ub2ec\ud560 \uc218 \uc788\ub294 \ud30c\uc774\uc36c SpooledTemporaryFile \uac1d\uccb4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. UploadFile \u00b6 UploadFile \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4: filename : \ubb38\uc790\uc5f4( str )\ub85c \ub41c \uc5c5\ub85c\ub4dc\ub41c \ud30c\uc77c\uc758 \ud30c\uc77c\uba85\uc785\ub2c8\ub2e4 (\uc608: myimage.jpg ). content_type : \ubb38\uc790\uc5f4( str )\ub85c \ub41c \ud30c\uc77c \ud615\uc2dd(MIME type / media type)\uc785\ub2c8\ub2e4 (\uc608: image/jpeg ). file : SpooledTemporaryFile ( \ud30c\uc77c\ub958 \uac1d\uccb4)\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \"\ud30c\uc77c\ub958\" \uac1d\uccb4\ub97c \ud544\uc694\ub85c\ud558\ub294 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uc9c1\uc811\uc801\uc73c\ub85c \uc804\ub2ec\ud560 \uc218 \uc788\ub294 \uc2e4\uc9c8\uc801\uc778 \ud30c\uc774\uc36c \ud30c\uc77c\uc785\ub2c8\ub2e4. UploadFile \uc5d0\ub294 \ub2e4\uc74c\uc758 async \uba54\uc18c\ub4dc\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub4e4\uc740 \ub0b4\ubd80\uc801\uc778 SpooledTemporaryFile \uc744 \uc0ac\uc6a9\ud558\uc5ec \ud574\ub2f9\ud558\ub294 \ud30c\uc77c \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. write(data) : data ( str \ub610\ub294 bytes )\ub97c \ud30c\uc77c\uc5d0 \uc791\uc131\ud569\ub2c8\ub2e4. read(size) : \ud30c\uc77c\uc758 \ubc14\uc774\ud2b8 \ubc0f \uae00\uc790\uc758 size ( int )\ub97c \uc77d\uc2b5\ub2c8\ub2e4. seek(offset) : \ud30c\uc77c \ub0b4 offset ( int ) \uc704\uce58\uc758 \ubc14\uc774\ud2b8\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. \uc608) await myfile.seek(0) \ub97c \uc0ac\uc6a9\ud558\uba74 \ud30c\uc77c\uc758 \uc2dc\uc791\ubd80\ubd84\uc73c\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. await myfile.read() \ub97c \uc0ac\uc6a9\ud55c \ud6c4 \ub0b4\uc6a9\uc744 \ub2e4\uc2dc \uc77d\uc744 \ub54c \uc720\uc6a9\ud569\ub2c8\ub2e4. close() : \ud30c\uc77c\uc744 \ub2eb\uc2b5\ub2c8\ub2e4. \uc0c1\uae30 \ubaa8\ub4e0 \uba54\uc18c\ub4dc\ub4e4\uc774 async \uba54\uc18c\ub4dc\uc774\uae30 \ub54c\ubb38\uc5d0 \u201cawait\u201d\uc744 \uc0ac\uc6a9\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4. \uc608\ub97c\ub4e4\uc5b4, async \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc758 \ub0b4\ubd80\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ub0b4\uc6a9\uc744 \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4: contents = await myfile . read () \ub9cc\uc57d \uc77c\ubc18\uc801\uc778 def \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc758 \ub0b4\ubd80\ub77c\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 UploadFile.file \uc5d0 \uc9c1\uc811 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: contents = myfile . file . read () async \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d async \uba54\uc18c\ub4dc\ub4e4\uc744 \uc0ac\uc6a9\ud560 \ub54c FastAPI \ub294 \uc2a4\ub808\ub4dc\ud480\uc5d0\uc11c \ud30c\uc77c \uba54\uc18c\ub4dc\ub4e4\uc744 \uc2e4\ud589\ud558\uace0 \uadf8\ub4e4\uc744 \uae30\ub2e4\ub9bd\ub2c8\ub2e4. Starlette \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d FastAPI \uc758 UploadFile \uc740 Starlette \uc758 UploadFile \uc744 \uc9c1\uc811\uc801\uc73c\ub85c \uc0c1\uc18d\ubc1b\uc9c0\ub9cc, Pydantic \ubc0f FastAPI\uc758 \ub2e4\ub978 \ubd80\ubd84\ub4e4\uacfc\uc758 \ud638\ud658\uc131\uc744 \uc704\ud574 \ud544\uc694\ud55c \ubd80\ubd84\ub4e4\uc774 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \"\ud3fc \ub370\uc774\ud130\"\ub780 \u00b6 HTML\uc758 \ud3fc\ub4e4( <form></form> )\uc774 \uc11c\ubc84\uc5d0 \ub370\uc774\ud130\ub97c \uc804\uc1a1\ud558\ub294 \ubc29\uc2dd\uc740 \ub300\uac1c \ub370\uc774\ud130\uc5d0 JSON\uacfc\ub294 \ub2e4\ub978 \"\ud2b9\ubcc4\ud55c\" \uc778\ucf54\ub529\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. FastAPI \ub294 JSON \ub300\uc2e0 \uc62c\ubc14\ub978 \uc704\uce58\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc77d\uc744 \uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d \ud3fc\uc758 \ub370\uc774\ud130\ub294 \ud30c\uc77c\uc774 \ud3ec\ud568\ub418\uc9c0 \uc54a\uc740 \uacbd\uc6b0 \uc77c\ubc18\uc801\uc73c\ub85c \"\ubbf8\ub514\uc5b4 \uc720\ud615\" application/x-www-form-urlencoded \uc744 \uc0ac\uc6a9\ud574 \uc778\ucf54\ub529 \ub429\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ud30c\uc77c\uc774 \ud3ec\ud568\ub41c \uacbd\uc6b0, multipart/form-data \ub85c \uc778\ucf54\ub529\ub429\ub2c8\ub2e4. File \uc744 \uc0ac\uc6a9\ud558\uc600\ub2e4\uba74, FastAPI \ub294 \ubcf8\ubb38\uc758 \uc801\ud569\ud55c \ubd80\ubd84\uc5d0\uc11c \ud30c\uc77c\uc744 \uac00\uc838\uc640\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uc778\uc9c0\ud569\ub2c8\ub2e4. \uc778\ucf54\ub529\uacfc \ud3fc \ud544\ub4dc\uc5d0 \ub300\ud574 \ub354 \uc54c\uace0\uc2f6\ub2e4\uba74, POST \uc5d0 \uad00\ud55c MDN \uc6f9 \ubb38\uc11c \ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4,. \uc8fc\uc758 \ub2e4\uc218\uc758 File \uacfc Form \ub9e4\uac1c\ubcc0\uc218\ub97c \ud55c \uacbd\ub85c \uc791\ub3d9 \uc5d0 \uc120\uc5b8\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\uc9c0\ub9cc, \uc694\uccad\uc758 \ubcf8\ubb38\uc774 application/json \uac00 \uc544\ub2cc multipart/form-data \ub85c \uc778\ucf54\ub529 \ub418\uae30 \ub54c\ubb38\uc5d0 JSON\uc73c\ub85c \ubc1b\uc544\uc57c\ud558\ub294 Body \ud544\ub4dc\ub97c \ud568\uaed8 \uc120\uc5b8\ud560 \uc218\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\ub294 FastAPI \uc758 \ud55c\uacc4\uac00 \uc544\ub2c8\ub77c, HTTP \ud504\ub85c\ud1a0\ucf5c\uc5d0 \uc758\ud55c \uac83\uc785\ub2c8\ub2e4. \ub2e4\uc911 \ud30c\uc77c \uc5c5\ub85c\ub4dc \u00b6 \uc5ec\ub7ec \ud30c\uc77c\uc744 \ub3d9\uc2dc\uc5d0 \uc5c5\ub85c\ub4dc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub4e4\uc740 \"\ud3fc \ub370\uc774\ud130\"\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc804\uc1a1\ub41c \ub3d9\uc77c\ud55c \"\ud3fc \ud544\ub4dc\"\uc5d0 \uc5f0\uacb0\ub429\ub2c8\ub2e4. \uc774 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 , bytes \uc758 List \ub610\ub294 UploadFile \ub97c \uc120\uc5b8\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4: from typing import List from fastapi import FastAPI , File , UploadFile from fastapi.responses import HTMLResponse app = FastAPI () @app . post ( \"/files/\" ) async def create_files ( files : List [ bytes ] = File ()): return { \"file_sizes\" : [ len ( file ) for file in files ]} @app . post ( \"/uploadfiles/\" ) async def create_upload_files ( files : List [ UploadFile ]): return { \"filenames\" : [ file . filename for file in files ]} @app . get ( \"/\" ) async def main (): content = \"\"\" <body> <form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> <form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> </body> \"\"\" return HTMLResponse ( content = content ) \uc120\uc5b8\ud55c\ub300\ub85c, bytes \uc758 list \ub610\ub294 UploadFile \ub4e4\uc744 \uc804\uc1a1\ubc1b\uc744 \uac83\uc785\ub2c8\ub2e4. \ucc38\uace0 2019\ub144 4\uc6d4 14\uc77c\ubd80\ud130 Swagger UI\uac00 \ud558\ub098\uc758 \ud3fc \ud544\ub4dc\ub85c \ub2e4\uc218\uc758 \ud30c\uc77c\uc744 \uc5c5\ub85c\ub4dc\ud558\ub294 \uac83\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc6d0\ud558\uba74, #4276 \uacfc #3641 \uc744 \ucc38\uace0\ud558\uc138\uc694. \uadf8\ub7fc\uc5d0\ub3c4, FastAPI \ub294 \ud45c\uc900 Open API\ub97c \uc0ac\uc6a9\ud574 \uc774\ubbf8 \ud638\ud658\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c Swagger UI \ub610\ub294 \uae30\ud0c0 \uadf8 \uc678\uc758 OpenAPI\ub97c \uc9c0\uc6d0\ud558\ub294 \ud234\uc774 \ub2e4\uc911 \ud30c\uc77c \uc5c5\ub85c\ub4dc\ub97c \uc9c0\uc6d0\ud558\ub294 \uacbd\uc6b0, \uc774\ub4e4\uc740 FastAPI \uc640 \ud638\ud658\ub429\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d from starlette.responses import HTMLResponse \uc5ed\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac1c\ubc1c\uc790\uc758 \ud3b8\uc758\ub97c \uc704\ud574 fastapi.responses \uc640 \ub3d9\uc77c\ud55c starlette.responses \ub3c4 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \uc751\ub2f5\ub4e4\uc740 Starlette\ub85c\ubd80\ud130 \uc9c1\uc811 \uc81c\uacf5\ub429\ub2c8\ub2e4. \uc694\uc57d \u00b6 \ud3fc \ub370\uc774\ud130\ub85c\uc368 \uc785\ub825 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc5c5\ub85c\ub4dc\ud560 \ud30c\uc77c\uc744 \uc120\uc5b8\ud560 \uacbd\uc6b0 File \uc744 \uc0ac\uc6a9\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4.","title":"\ud30c\uc77c \uc694\uccad"},{"location":"tutorial/request-files/#_1","text":"File \uc744 \uc0ac\uc6a9\ud558\uc5ec \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc5c5\ub85c\ub4dc\ud560 \ud30c\uc77c\ub4e4\uc744 \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \uc5c5\ub85c\ub4dc\ub41c \ud30c\uc77c\uc744 \uc804\ub2ec\ubc1b\uae30 \uc704\ud574 \uba3c\uc800 python-multipart \ub97c \uc124\uce58\ud574\uc57c\ud569\ub2c8\ub2e4. \uc608\uc2dc) pip install python-multipart . \uc5c5\ub85c\ub4dc\ub41c \ud30c\uc77c\ub4e4\uc740 \"\ud3fc \ub370\uc774\ud130\"\uc758 \ud615\ud0dc\ub85c \uc804\uc1a1\ub418\uae30 \ub54c\ubb38\uc5d0 \uc774 \uc791\uc5c5\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.","title":"\ud30c\uc77c \uc694\uccad"},{"location":"tutorial/request-files/#file","text":"fastapi \uc5d0\uc11c File \uacfc UploadFile \uc744 \uc784\ud3ec\ud2b8 \ud569\ub2c8\ub2e4: from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename }","title":"File \uc784\ud3ec\ud2b8"},{"location":"tutorial/request-files/#file_1","text":"Body \ubc0f Form \uacfc \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c \ud30c\uc77c\uc758 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4: from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } \uc815\ubcf4 File \uc740 Form \uc73c\ub85c\ubd80\ud130 \uc9c1\uc811 \uc0c1\uc18d\ub41c \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc fastapi \ub85c\ubd80\ud130 Query , Path , File \ub4f1\uc744 \uc784\ud3ec\ud2b8 \ud560 \ub54c, \uc774\uac83\ub4e4\uc740 \ud2b9\ubcc4\ud55c \ud074\ub798\uc2a4\ub4e4\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub77c\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. \ud301 File\uc758 \ubcf8\ubb38\uc744 \uc120\uc5b8\ud560 \ub54c, \ub9e4\uac1c\ubcc0\uc218\uac00 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218 \ub610\ub294 \ubcf8\ubb38(JSON) \ub9e4\uac1c\ubcc0\uc218\ub85c \ud574\uc11d\ub418\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574 File \uc744 \uc0ac\uc6a9\ud574\uc57c\ud569\ub2c8\ub2e4. \ud30c\uc77c\ub4e4\uc740 \"\ud3fc \ub370\uc774\ud130\"\uc758 \ud615\ud0dc\ub85c \uc5c5\ub85c\ub4dc \ub429\ub2c8\ub2e4. \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc758 \ub9e4\uac1c\ubcc0\uc218\ub97c bytes \ub85c \uc120\uc5b8\ud558\ub294 \uacbd\uc6b0 FastAPI \ub294 \ud30c\uc77c\uc744 \uc77d\uace0 bytes \ud615\ud0dc\uc758 \ub0b4\uc6a9\uc744 \uc804\ub2ec\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \uc804\uccb4 \ub0b4\uc6a9\uc774 \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ub41c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4\ub294 \uac78 \uc5fc\ub450\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. \uc774\ub294 \uc791\uc740 \ud06c\uae30\uc758 \ud30c\uc77c\ub4e4\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4. \uc5b4\ub5a4 \uacbd\uc6b0\uc5d0\ub294 UploadFile \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \uc720\ub9ac\ud569\ub2c8\ub2e4.","title":"File \ub9e4\uac1c\ubcc0\uc218 \uc815\uc758"},{"location":"tutorial/request-files/#file-uploadfile","text":"File \ub9e4\uac1c\ubcc0\uc218\ub97c UploadFile \ud0c0\uc785\uc73c\ub85c \uc815\uc758\ud569\ub2c8\ub2e4: from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } UploadFile \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 bytes \uacfc \ube44\uad50\ud574 \ub2e4\uc74c\uacfc \uac19\uc740 \uc7a5\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4: \"\uc2a4\ud480 \ud30c\uc77c\"\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ucd5c\ub300 \ud06c\uae30 \uc81c\ud55c\uae4c\uc9c0\ub9cc \uba54\ubaa8\ub9ac\uc5d0 \uc800\uc7a5\ub418\uba70, \uc774\ub97c \ucd08\uacfc\ud558\ub294 \uacbd\uc6b0 \ub514\uc2a4\ud06c\uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc774\ubbf8\uc9c0, \ub3d9\uc601\uc0c1, \ud070 \uc774\uc9c4\ucf54\ub4dc\uc640 \uac19\uc740 \ub300\uc6a9\ub7c9 \ud30c\uc77c\ub4e4\uc744 \ub9ce\uc740 \uba54\ubaa8\ub9ac\ub97c \uc18c\ubaa8\ud558\uc9c0 \uc54a\uace0 \ucc98\ub9ac\ud558\uae30\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4. \uc5c5\ub85c\ub4dc \ub41c \ud30c\uc77c\uc758 \uba54\ud0c0\ub370\uc774\ud130\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. file-like async \uc778\ud130\ud398\uc774\uc2a4\ub97c \uac16\uace0 \uc788\uc2b5\ub2c8\ub2e4. file-like object\ub97c \ud544\uc694\ub85c\ud558\ub294 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uc9c1\uc811\uc801\uc73c\ub85c \uc804\ub2ec\ud560 \uc218 \uc788\ub294 \ud30c\uc774\uc36c SpooledTemporaryFile \uac1d\uccb4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.","title":"File \ub9e4\uac1c\ubcc0\uc218\uc640  UploadFile"},{"location":"tutorial/request-files/#uploadfile","text":"UploadFile \uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4: filename : \ubb38\uc790\uc5f4( str )\ub85c \ub41c \uc5c5\ub85c\ub4dc\ub41c \ud30c\uc77c\uc758 \ud30c\uc77c\uba85\uc785\ub2c8\ub2e4 (\uc608: myimage.jpg ). content_type : \ubb38\uc790\uc5f4( str )\ub85c \ub41c \ud30c\uc77c \ud615\uc2dd(MIME type / media type)\uc785\ub2c8\ub2e4 (\uc608: image/jpeg ). file : SpooledTemporaryFile ( \ud30c\uc77c\ub958 \uac1d\uccb4)\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \"\ud30c\uc77c\ub958\" \uac1d\uccb4\ub97c \ud544\uc694\ub85c\ud558\ub294 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uc9c1\uc811\uc801\uc73c\ub85c \uc804\ub2ec\ud560 \uc218 \uc788\ub294 \uc2e4\uc9c8\uc801\uc778 \ud30c\uc774\uc36c \ud30c\uc77c\uc785\ub2c8\ub2e4. UploadFile \uc5d0\ub294 \ub2e4\uc74c\uc758 async \uba54\uc18c\ub4dc\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub4e4\uc740 \ub0b4\ubd80\uc801\uc778 SpooledTemporaryFile \uc744 \uc0ac\uc6a9\ud558\uc5ec \ud574\ub2f9\ud558\ub294 \ud30c\uc77c \uba54\uc18c\ub4dc\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. write(data) : data ( str \ub610\ub294 bytes )\ub97c \ud30c\uc77c\uc5d0 \uc791\uc131\ud569\ub2c8\ub2e4. read(size) : \ud30c\uc77c\uc758 \ubc14\uc774\ud2b8 \ubc0f \uae00\uc790\uc758 size ( int )\ub97c \uc77d\uc2b5\ub2c8\ub2e4. seek(offset) : \ud30c\uc77c \ub0b4 offset ( int ) \uc704\uce58\uc758 \ubc14\uc774\ud2b8\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. \uc608) await myfile.seek(0) \ub97c \uc0ac\uc6a9\ud558\uba74 \ud30c\uc77c\uc758 \uc2dc\uc791\ubd80\ubd84\uc73c\ub85c \uc774\ub3d9\ud569\ub2c8\ub2e4. await myfile.read() \ub97c \uc0ac\uc6a9\ud55c \ud6c4 \ub0b4\uc6a9\uc744 \ub2e4\uc2dc \uc77d\uc744 \ub54c \uc720\uc6a9\ud569\ub2c8\ub2e4. close() : \ud30c\uc77c\uc744 \ub2eb\uc2b5\ub2c8\ub2e4. \uc0c1\uae30 \ubaa8\ub4e0 \uba54\uc18c\ub4dc\ub4e4\uc774 async \uba54\uc18c\ub4dc\uc774\uae30 \ub54c\ubb38\uc5d0 \u201cawait\u201d\uc744 \uc0ac\uc6a9\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4. \uc608\ub97c\ub4e4\uc5b4, async \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc758 \ub0b4\ubd80\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ub0b4\uc6a9\uc744 \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4: contents = await myfile . read () \ub9cc\uc57d \uc77c\ubc18\uc801\uc778 def \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc758 \ub0b4\ubd80\ub77c\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 UploadFile.file \uc5d0 \uc9c1\uc811 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: contents = myfile . file . read () async \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d async \uba54\uc18c\ub4dc\ub4e4\uc744 \uc0ac\uc6a9\ud560 \ub54c FastAPI \ub294 \uc2a4\ub808\ub4dc\ud480\uc5d0\uc11c \ud30c\uc77c \uba54\uc18c\ub4dc\ub4e4\uc744 \uc2e4\ud589\ud558\uace0 \uadf8\ub4e4\uc744 \uae30\ub2e4\ub9bd\ub2c8\ub2e4. Starlette \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d FastAPI \uc758 UploadFile \uc740 Starlette \uc758 UploadFile \uc744 \uc9c1\uc811\uc801\uc73c\ub85c \uc0c1\uc18d\ubc1b\uc9c0\ub9cc, Pydantic \ubc0f FastAPI\uc758 \ub2e4\ub978 \ubd80\ubd84\ub4e4\uacfc\uc758 \ud638\ud658\uc131\uc744 \uc704\ud574 \ud544\uc694\ud55c \ubd80\ubd84\ub4e4\uc774 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4.","title":"UploadFile"},{"location":"tutorial/request-files/#_2","text":"HTML\uc758 \ud3fc\ub4e4( <form></form> )\uc774 \uc11c\ubc84\uc5d0 \ub370\uc774\ud130\ub97c \uc804\uc1a1\ud558\ub294 \ubc29\uc2dd\uc740 \ub300\uac1c \ub370\uc774\ud130\uc5d0 JSON\uacfc\ub294 \ub2e4\ub978 \"\ud2b9\ubcc4\ud55c\" \uc778\ucf54\ub529\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. FastAPI \ub294 JSON \ub300\uc2e0 \uc62c\ubc14\ub978 \uc704\uce58\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc77d\uc744 \uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d \ud3fc\uc758 \ub370\uc774\ud130\ub294 \ud30c\uc77c\uc774 \ud3ec\ud568\ub418\uc9c0 \uc54a\uc740 \uacbd\uc6b0 \uc77c\ubc18\uc801\uc73c\ub85c \"\ubbf8\ub514\uc5b4 \uc720\ud615\" application/x-www-form-urlencoded \uc744 \uc0ac\uc6a9\ud574 \uc778\ucf54\ub529 \ub429\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ud30c\uc77c\uc774 \ud3ec\ud568\ub41c \uacbd\uc6b0, multipart/form-data \ub85c \uc778\ucf54\ub529\ub429\ub2c8\ub2e4. File \uc744 \uc0ac\uc6a9\ud558\uc600\ub2e4\uba74, FastAPI \ub294 \ubcf8\ubb38\uc758 \uc801\ud569\ud55c \ubd80\ubd84\uc5d0\uc11c \ud30c\uc77c\uc744 \uac00\uc838\uc640\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uc778\uc9c0\ud569\ub2c8\ub2e4. \uc778\ucf54\ub529\uacfc \ud3fc \ud544\ub4dc\uc5d0 \ub300\ud574 \ub354 \uc54c\uace0\uc2f6\ub2e4\uba74, POST \uc5d0 \uad00\ud55c MDN \uc6f9 \ubb38\uc11c \ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4,. \uc8fc\uc758 \ub2e4\uc218\uc758 File \uacfc Form \ub9e4\uac1c\ubcc0\uc218\ub97c \ud55c \uacbd\ub85c \uc791\ub3d9 \uc5d0 \uc120\uc5b8\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\uc9c0\ub9cc, \uc694\uccad\uc758 \ubcf8\ubb38\uc774 application/json \uac00 \uc544\ub2cc multipart/form-data \ub85c \uc778\ucf54\ub529 \ub418\uae30 \ub54c\ubb38\uc5d0 JSON\uc73c\ub85c \ubc1b\uc544\uc57c\ud558\ub294 Body \ud544\ub4dc\ub97c \ud568\uaed8 \uc120\uc5b8\ud560 \uc218\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\ub294 FastAPI \uc758 \ud55c\uacc4\uac00 \uc544\ub2c8\ub77c, HTTP \ud504\ub85c\ud1a0\ucf5c\uc5d0 \uc758\ud55c \uac83\uc785\ub2c8\ub2e4.","title":"\"\ud3fc \ub370\uc774\ud130\"\ub780"},{"location":"tutorial/request-files/#_3","text":"\uc5ec\ub7ec \ud30c\uc77c\uc744 \ub3d9\uc2dc\uc5d0 \uc5c5\ub85c\ub4dc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub4e4\uc740 \"\ud3fc \ub370\uc774\ud130\"\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc804\uc1a1\ub41c \ub3d9\uc77c\ud55c \"\ud3fc \ud544\ub4dc\"\uc5d0 \uc5f0\uacb0\ub429\ub2c8\ub2e4. \uc774 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 , bytes \uc758 List \ub610\ub294 UploadFile \ub97c \uc120\uc5b8\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4: from typing import List from fastapi import FastAPI , File , UploadFile from fastapi.responses import HTMLResponse app = FastAPI () @app . post ( \"/files/\" ) async def create_files ( files : List [ bytes ] = File ()): return { \"file_sizes\" : [ len ( file ) for file in files ]} @app . post ( \"/uploadfiles/\" ) async def create_upload_files ( files : List [ UploadFile ]): return { \"filenames\" : [ file . filename for file in files ]} @app . get ( \"/\" ) async def main (): content = \"\"\" <body> <form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> <form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> </body> \"\"\" return HTMLResponse ( content = content ) \uc120\uc5b8\ud55c\ub300\ub85c, bytes \uc758 list \ub610\ub294 UploadFile \ub4e4\uc744 \uc804\uc1a1\ubc1b\uc744 \uac83\uc785\ub2c8\ub2e4. \ucc38\uace0 2019\ub144 4\uc6d4 14\uc77c\ubd80\ud130 Swagger UI\uac00 \ud558\ub098\uc758 \ud3fc \ud544\ub4dc\ub85c \ub2e4\uc218\uc758 \ud30c\uc77c\uc744 \uc5c5\ub85c\ub4dc\ud558\ub294 \uac83\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc6d0\ud558\uba74, #4276 \uacfc #3641 \uc744 \ucc38\uace0\ud558\uc138\uc694. \uadf8\ub7fc\uc5d0\ub3c4, FastAPI \ub294 \ud45c\uc900 Open API\ub97c \uc0ac\uc6a9\ud574 \uc774\ubbf8 \ud638\ud658\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c Swagger UI \ub610\ub294 \uae30\ud0c0 \uadf8 \uc678\uc758 OpenAPI\ub97c \uc9c0\uc6d0\ud558\ub294 \ud234\uc774 \ub2e4\uc911 \ud30c\uc77c \uc5c5\ub85c\ub4dc\ub97c \uc9c0\uc6d0\ud558\ub294 \uacbd\uc6b0, \uc774\ub4e4\uc740 FastAPI \uc640 \ud638\ud658\ub429\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d from starlette.responses import HTMLResponse \uc5ed\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac1c\ubc1c\uc790\uc758 \ud3b8\uc758\ub97c \uc704\ud574 fastapi.responses \uc640 \ub3d9\uc77c\ud55c starlette.responses \ub3c4 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \uc751\ub2f5\ub4e4\uc740 Starlette\ub85c\ubd80\ud130 \uc9c1\uc811 \uc81c\uacf5\ub429\ub2c8\ub2e4.","title":"\ub2e4\uc911 \ud30c\uc77c \uc5c5\ub85c\ub4dc"},{"location":"tutorial/request-files/#_4","text":"\ud3fc \ub370\uc774\ud130\ub85c\uc368 \uc785\ub825 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc5c5\ub85c\ub4dc\ud560 \ud30c\uc77c\uc744 \uc120\uc5b8\ud560 \uacbd\uc6b0 File \uc744 \uc0ac\uc6a9\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4.","title":"\uc694\uc57d"},{"location":"tutorial/request-forms-and-files/","text":"\ud3fc \ubc0f \ud30c\uc77c \uc694\uccad \u00b6 File \uacfc Form \uc744 \uc0ac\uc6a9\ud558\uc5ec \ud30c\uc77c\uacfc \ud3fc\uc744 \ud568\uaed8 \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \ud30c\uc77c\uacfc \ud3fc \ub370\uc774\ud130\ub97c \ud568\uaed8, \ub610\ub294 \uac01\uac01 \uc5c5\ub85c\ub4dc\ud558\uae30 \uc704\ud574 \uba3c\uc800 python-multipart \ub97c \uc124\uce58\ud574\uc57c\ud569\ub2c8\ub2e4. \uc608 ) pip install python-multipart . File \ubc0f Form \uc5c5\ub85c\ub4dc \u00b6 from fastapi import FastAPI , File , Form , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File (), fileb : UploadFile = File (), token : str = Form () ): return { \"file_size\" : len ( file ), \"token\" : token , \"fileb_content_type\" : fileb . content_type , } File \ubc0f Form \ub9e4\uac1c\ubcc0\uc218 \uc815\uc758 \u00b6 Body \ubc0f Query \uc640 \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c \ud30c\uc77c\uacfc \ud3fc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4: from fastapi import FastAPI , File , Form , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File (), fileb : UploadFile = File (), token : str = Form () ): return { \"file_size\" : len ( file ), \"token\" : token , \"fileb_content_type\" : fileb . content_type , } \ud30c\uc77c\uacfc \ud3fc \ud544\ub4dc\ub294 \ud3fc \ub370\uc774\ud130 \ud615\uc2dd\uc73c\ub85c \uc5c5\ub85c\ub4dc\ub418\uc5b4 \ud30c\uc77c\uacfc \ud3fc \ud544\ub4dc\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4. \uc5b4\ub5a4 \ud30c\uc77c\ub4e4\uc740 bytes \ub85c, \ub610 \uc5b4\ub5a4 \ud30c\uc77c\ub4e4\uc740 UploadFile \ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc8fc\uc758 \ub2e4\uc218\uc758 File \uacfc Form \ub9e4\uac1c\ubcc0\uc218\ub97c \ud55c \uacbd\ub85c \uc791\ub3d9 \uc5d0 \uc120\uc5b8\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\uc9c0\ub9cc, \uc694\uccad\uc758 \ubcf8\ubb38\uc774 application/json \uac00 \uc544\ub2cc multipart/form-data \ub85c \uc778\ucf54\ub529 \ub418\uae30 \ub54c\ubb38\uc5d0 JSON\uc73c\ub85c \ubc1b\uc544\uc57c\ud558\ub294 Body \ud544\ub4dc\ub97c \ud568\uaed8 \uc120\uc5b8\ud560 \uc218\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\ub294 FastAPI \uc758 \ud55c\uacc4\uac00 \uc544\ub2c8\ub77c, HTTP \ud504\ub85c\ud1a0\ucf5c\uc5d0 \uc758\ud55c \uac83\uc785\ub2c8\ub2e4. \uc694\uc57d \u00b6 \ud558\ub098\uc758 \uc694\uccad\uc73c\ub85c \ub370\uc774\ud130\uc640 \ud30c\uc77c\ub4e4\uc744 \ubc1b\uc544\uc57c \ud560 \uacbd\uc6b0 File \uacfc Form \uc744 \ud568\uaed8 \uc0ac\uc6a9\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4.","title":"\ud3fc \ubc0f \ud30c\uc77c \uc694\uccad"},{"location":"tutorial/request-forms-and-files/#_1","text":"File \uacfc Form \uc744 \uc0ac\uc6a9\ud558\uc5ec \ud30c\uc77c\uacfc \ud3fc\uc744 \ud568\uaed8 \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \ud30c\uc77c\uacfc \ud3fc \ub370\uc774\ud130\ub97c \ud568\uaed8, \ub610\ub294 \uac01\uac01 \uc5c5\ub85c\ub4dc\ud558\uae30 \uc704\ud574 \uba3c\uc800 python-multipart \ub97c \uc124\uce58\ud574\uc57c\ud569\ub2c8\ub2e4. \uc608 ) pip install python-multipart .","title":"\ud3fc \ubc0f \ud30c\uc77c \uc694\uccad"},{"location":"tutorial/request-forms-and-files/#file-form","text":"from fastapi import FastAPI , File , Form , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File (), fileb : UploadFile = File (), token : str = Form () ): return { \"file_size\" : len ( file ), \"token\" : token , \"fileb_content_type\" : fileb . content_type , }","title":"File \ubc0f Form \uc5c5\ub85c\ub4dc"},{"location":"tutorial/request-forms-and-files/#file-form_1","text":"Body \ubc0f Query \uc640 \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c \ud30c\uc77c\uacfc \ud3fc\uc758 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4: from fastapi import FastAPI , File , Form , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File (), fileb : UploadFile = File (), token : str = Form () ): return { \"file_size\" : len ( file ), \"token\" : token , \"fileb_content_type\" : fileb . content_type , } \ud30c\uc77c\uacfc \ud3fc \ud544\ub4dc\ub294 \ud3fc \ub370\uc774\ud130 \ud615\uc2dd\uc73c\ub85c \uc5c5\ub85c\ub4dc\ub418\uc5b4 \ud30c\uc77c\uacfc \ud3fc \ud544\ub4dc\ub85c \uc804\ub2ec\ub429\ub2c8\ub2e4. \uc5b4\ub5a4 \ud30c\uc77c\ub4e4\uc740 bytes \ub85c, \ub610 \uc5b4\ub5a4 \ud30c\uc77c\ub4e4\uc740 UploadFile \ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc8fc\uc758 \ub2e4\uc218\uc758 File \uacfc Form \ub9e4\uac1c\ubcc0\uc218\ub97c \ud55c \uacbd\ub85c \uc791\ub3d9 \uc5d0 \uc120\uc5b8\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\uc9c0\ub9cc, \uc694\uccad\uc758 \ubcf8\ubb38\uc774 application/json \uac00 \uc544\ub2cc multipart/form-data \ub85c \uc778\ucf54\ub529 \ub418\uae30 \ub54c\ubb38\uc5d0 JSON\uc73c\ub85c \ubc1b\uc544\uc57c\ud558\ub294 Body \ud544\ub4dc\ub97c \ud568\uaed8 \uc120\uc5b8\ud560 \uc218\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\ub294 FastAPI \uc758 \ud55c\uacc4\uac00 \uc544\ub2c8\ub77c, HTTP \ud504\ub85c\ud1a0\ucf5c\uc5d0 \uc758\ud55c \uac83\uc785\ub2c8\ub2e4.","title":"File \ubc0f Form \ub9e4\uac1c\ubcc0\uc218 \uc815\uc758"},{"location":"tutorial/request-forms-and-files/#_2","text":"\ud558\ub098\uc758 \uc694\uccad\uc73c\ub85c \ub370\uc774\ud130\uc640 \ud30c\uc77c\ub4e4\uc744 \ubc1b\uc544\uc57c \ud560 \uacbd\uc6b0 File \uacfc Form \uc744 \ud568\uaed8 \uc0ac\uc6a9\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4.","title":"\uc694\uc57d"},{"location":"tutorial/request-forms/","text":"\ud3fc \ub370\uc774\ud130 \u00b6 JSON \ub300\uc2e0\uc5d0 \ud3fc \ub370\uc774\ud130 \ud544\ub4dc\ub97c \ubc1b\uc744 \ud544\uc694\uac00 \uc788\uc744 \ub54c, \ud3fc \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \ud3fc\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc77c\ub2e8 python-multipart \ub97c \uc124\uce58\ud574\uc57c \ud569\ub2c8\ub2e4. E.g. pip install python-multipart . \ud3fc \uc784\ud3ec\ud2b8 \u00b6 fastapi \uc5d0\uc11c Form \uc744 \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4: from fastapi import FastAPI , Form app = FastAPI () @app . post ( \"/login/\" ) async def login ( username : str = Form (), password : str = Form ()): return { \"username\" : username } \ud3fc \ub9e4\uac1c\ubcc0\uc218 \uc815\uc758\ud558\uae30 \u00b6 \ubcf8\ubb38 \uc774\ub098 \ucffc\ub9ac \uc640 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \ud3fc \ub9e4\uac1c\ubcc0\uc218\ub3c4 \uc0dd\uc131\ud569\ub2c8\ub2e4: from fastapi import FastAPI , Form app = FastAPI () @app . post ( \"/login/\" ) async def login ( username : str = Form (), password : str = Form ()): return { \"username\" : username } \uc608\ub97c \ub4e4\uc5b4, Oauth2 \uc0ac\uc591\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 (\"\ube44\ubc00\ubc88\ud638 \ud750\ub984\"\uc774\ub77c\uace0 \ubd88\ub9ac\ub294) \ubc29\ubc95\uc740 username \uacfc password \ub97c \ud3fc\ub370\uc774\ud130\ub85c \ubcf4\ub0b4\ub294 \uac83\uc774 \ud544\uc218\uc785\ub2c8\ub2e4. \uc774 \uc0ac\uc591 \uc740 \uc815\ud655\ud788 username \uacfc password \ub77c\uace0 \ub41c \ud544\ub4dc\ub4e4\uc774 \ud544\uc694\ud558\uace0 JSON\uc774 \uc544\ub2cc \ud3fc \ud544\ub4dc\ub85c \ubcf4\ub0b4\uc57c \ud569\ub2c8\ub2e4. \ud3fc \ub9cc \uc788\uc73c\uba74 \ubcf8\ubb38 ( \ucffc\ub9ac , \uacbd\ub85c , \ucfe0\ud0a4 )\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uac19\uc740 \uba54\ud0c0\ub370\uc774\ud130\uc640 \uc720\ud6a8\uc131 \uac80\uc0ac\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \ud3fc \uc740 \ubcf8\ubb38 \uc744 \uc9c1\uc811\uc801\uc73c\ub85c \uc0c1\uc18d\ubc1b\uc740 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \ud301 Form \uc5c6\uc774\ub294 \ub9e4\uac1c\ubcc0\uc218\uac00 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub098 \ubcf8\ubb38(JSON) \ub9e4\uac1c\ubcc0\uc218\ub85c \ud574\uc11d \ub418\uae30 \ub54c\ubb38\uc5d0 \ud3fc \ubcf8\ubb38\uc744 \uc120\uc5b8\ud558\uae30 \uc704\ud574\uc11c\ub294 Form \uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc0c1\uc6a9\ud558\ub294 \uac83\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \"\ud3fc \ud544\ub4dc\"\uc5d0 \ub300\ud574 \u00b6 HTML \ud3fc( <form></form> )\uc774 \uc11c\ubc84\ub85c \ub370\uc774\ud130\ub97c \ubcf4\ub0b4\ub294 \ubc29\ubc95\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uadf8 \ub370\uc774\ud130\ub97c \uc704\ud574 JSON\uacfc\ub294 \ub2e4\ub978 \"\ud2b9\ubcc4\ud55c\" \uc778\ucf54\ub529 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. FastAPI JSON \ub300\uc2e0\uc5d0 \uc815\ud655\ud55c \uacf3\uc5d0\uc11c \uadf8 \ub370\uc774\ud130\ub97c \uc77d\uc744 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uae30\uc220\uc801\uc778 \uc138\ubd80\uc0ac\ud56d \ud3fc\uc73c\ub85c\ubd80\ud130 \ubc1b\uc740 \ub370\uc774\ud130\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \"media type\" application/x-www-form-urlencoded \uc744 \uc774\uc6a9\ud574\uc11c \uc554\ud638\ud654 \ub429\ub2c8\ub2e4. \ud3fc\uc774 \ud30c\uc77c\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uc744 \ub54c\ub294 multipart/form-data \ub85c \uc554\ud638\ud654 \ub429\ub2c8\ub2e4. \ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c \ud30c\uc77c \ub2e4\ub8e8\uae30\uc5d0 \ub300\ud574 \uc77d\uc744 \uc218 \uc788\uc744 \uac81\ub2c8\ub2e4. \uc774\ub7f0 \uc554\ud638\ud654\uc640 \ud3fc\ud544\ub4dc\uc5d0 \ub300\ud574 \ub354 \uc77d\uace0\uc2f6\ub2e4\uba74, MDN web docs for POST \uc744 \ucc38\uace0\ud558\uc138\uc694. \uc8fc\uc758 \uacbd\ub85c \ub3d9\uc791 \uc5d0\uc11c \ub2e4\uc591\ud55c \ud3fc \ud30c\ub77c\ubbf8\ud130\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc9c0\ub9cc \uc694\uccad\uc740 application/json \ub300\uc2e0\uc5d0 application/x-www-form-urlencoded \uc744 \uc774\uc6a9\ud574 \uc554\ud638\ud654 \ub41c \ubcf8\ubb38\uc744 \uac00\uc9c0\uae30 \ub54c\ubb38\uc5d0 JSON\uc73c\ub85c \ubc1b\uae30\ub97c \uc608\uc0c1\ud558\ub294 \ubcf8\ubb38 \ud544\ub4dc \ub610\ud55c \uc120\uc5b8\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\ub294 FastAPI \uc758 \ud55c\uacc4\uac00 \uc544\ub2c8\ub77c HTTP \ud1b5\uc2e0\uc758 \uc77c\ubd80\uc785\ub2c8\ub2e4. \uc694\uc57d \u00b6 \uc785\ub825 \ub9e4\uac1c\ubcc0\uc218\ub85c \ud3fc \ub370\uc774\ud130\ub97c \uc120\uc5b8\ud560 \ub54c\uc5d0\ub294 Form \uc744 \uc0ac\uc6a9\ud558\uc138\uc694.","title":"\ud3fc \ub370\uc774\ud130"},{"location":"tutorial/request-forms/#_1","text":"JSON \ub300\uc2e0\uc5d0 \ud3fc \ub370\uc774\ud130 \ud544\ub4dc\ub97c \ubc1b\uc744 \ud544\uc694\uac00 \uc788\uc744 \ub54c, \ud3fc \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \ud3fc\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc77c\ub2e8 python-multipart \ub97c \uc124\uce58\ud574\uc57c \ud569\ub2c8\ub2e4. E.g. pip install python-multipart .","title":"\ud3fc \ub370\uc774\ud130"},{"location":"tutorial/request-forms/#_2","text":"fastapi \uc5d0\uc11c Form \uc744 \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4: from fastapi import FastAPI , Form app = FastAPI () @app . post ( \"/login/\" ) async def login ( username : str = Form (), password : str = Form ()): return { \"username\" : username }","title":"\ud3fc \uc784\ud3ec\ud2b8"},{"location":"tutorial/request-forms/#_3","text":"\ubcf8\ubb38 \uc774\ub098 \ucffc\ub9ac \uc640 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \ud3fc \ub9e4\uac1c\ubcc0\uc218\ub3c4 \uc0dd\uc131\ud569\ub2c8\ub2e4: from fastapi import FastAPI , Form app = FastAPI () @app . post ( \"/login/\" ) async def login ( username : str = Form (), password : str = Form ()): return { \"username\" : username } \uc608\ub97c \ub4e4\uc5b4, Oauth2 \uc0ac\uc591\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 (\"\ube44\ubc00\ubc88\ud638 \ud750\ub984\"\uc774\ub77c\uace0 \ubd88\ub9ac\ub294) \ubc29\ubc95\uc740 username \uacfc password \ub97c \ud3fc\ub370\uc774\ud130\ub85c \ubcf4\ub0b4\ub294 \uac83\uc774 \ud544\uc218\uc785\ub2c8\ub2e4. \uc774 \uc0ac\uc591 \uc740 \uc815\ud655\ud788 username \uacfc password \ub77c\uace0 \ub41c \ud544\ub4dc\ub4e4\uc774 \ud544\uc694\ud558\uace0 JSON\uc774 \uc544\ub2cc \ud3fc \ud544\ub4dc\ub85c \ubcf4\ub0b4\uc57c \ud569\ub2c8\ub2e4. \ud3fc \ub9cc \uc788\uc73c\uba74 \ubcf8\ubb38 ( \ucffc\ub9ac , \uacbd\ub85c , \ucfe0\ud0a4 )\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uac19\uc740 \uba54\ud0c0\ub370\uc774\ud130\uc640 \uc720\ud6a8\uc131 \uac80\uc0ac\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \ud3fc \uc740 \ubcf8\ubb38 \uc744 \uc9c1\uc811\uc801\uc73c\ub85c \uc0c1\uc18d\ubc1b\uc740 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4. \ud301 Form \uc5c6\uc774\ub294 \ub9e4\uac1c\ubcc0\uc218\uac00 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub098 \ubcf8\ubb38(JSON) \ub9e4\uac1c\ubcc0\uc218\ub85c \ud574\uc11d \ub418\uae30 \ub54c\ubb38\uc5d0 \ud3fc \ubcf8\ubb38\uc744 \uc120\uc5b8\ud558\uae30 \uc704\ud574\uc11c\ub294 Form \uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc0c1\uc6a9\ud558\ub294 \uac83\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.","title":"\ud3fc \ub9e4\uac1c\ubcc0\uc218 \uc815\uc758\ud558\uae30"},{"location":"tutorial/request-forms/#_4","text":"HTML \ud3fc( <form></form> )\uc774 \uc11c\ubc84\ub85c \ub370\uc774\ud130\ub97c \ubcf4\ub0b4\ub294 \ubc29\ubc95\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uadf8 \ub370\uc774\ud130\ub97c \uc704\ud574 JSON\uacfc\ub294 \ub2e4\ub978 \"\ud2b9\ubcc4\ud55c\" \uc778\ucf54\ub529 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. FastAPI JSON \ub300\uc2e0\uc5d0 \uc815\ud655\ud55c \uacf3\uc5d0\uc11c \uadf8 \ub370\uc774\ud130\ub97c \uc77d\uc744 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uae30\uc220\uc801\uc778 \uc138\ubd80\uc0ac\ud56d \ud3fc\uc73c\ub85c\ubd80\ud130 \ubc1b\uc740 \ub370\uc774\ud130\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \"media type\" application/x-www-form-urlencoded \uc744 \uc774\uc6a9\ud574\uc11c \uc554\ud638\ud654 \ub429\ub2c8\ub2e4. \ud3fc\uc774 \ud30c\uc77c\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uc744 \ub54c\ub294 multipart/form-data \ub85c \uc554\ud638\ud654 \ub429\ub2c8\ub2e4. \ub2e4\uc74c \ucc55\ud130\uc5d0\uc11c \ud30c\uc77c \ub2e4\ub8e8\uae30\uc5d0 \ub300\ud574 \uc77d\uc744 \uc218 \uc788\uc744 \uac81\ub2c8\ub2e4. \uc774\ub7f0 \uc554\ud638\ud654\uc640 \ud3fc\ud544\ub4dc\uc5d0 \ub300\ud574 \ub354 \uc77d\uace0\uc2f6\ub2e4\uba74, MDN web docs for POST \uc744 \ucc38\uace0\ud558\uc138\uc694. \uc8fc\uc758 \uacbd\ub85c \ub3d9\uc791 \uc5d0\uc11c \ub2e4\uc591\ud55c \ud3fc \ud30c\ub77c\ubbf8\ud130\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc9c0\ub9cc \uc694\uccad\uc740 application/json \ub300\uc2e0\uc5d0 application/x-www-form-urlencoded \uc744 \uc774\uc6a9\ud574 \uc554\ud638\ud654 \ub41c \ubcf8\ubb38\uc744 \uac00\uc9c0\uae30 \ub54c\ubb38\uc5d0 JSON\uc73c\ub85c \ubc1b\uae30\ub97c \uc608\uc0c1\ud558\ub294 \ubcf8\ubb38 \ud544\ub4dc \ub610\ud55c \uc120\uc5b8\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\ub294 FastAPI \uc758 \ud55c\uacc4\uac00 \uc544\ub2c8\ub77c HTTP \ud1b5\uc2e0\uc758 \uc77c\ubd80\uc785\ub2c8\ub2e4.","title":"\"\ud3fc \ud544\ub4dc\"\uc5d0 \ub300\ud574"},{"location":"tutorial/request-forms/#_5","text":"\uc785\ub825 \ub9e4\uac1c\ubcc0\uc218\ub85c \ud3fc \ub370\uc774\ud130\ub97c \uc120\uc5b8\ud560 \ub54c\uc5d0\ub294 Form \uc744 \uc0ac\uc6a9\ud558\uc138\uc694.","title":"\uc694\uc57d"},{"location":"tutorial/response-model/","text":"\uc751\ub2f5 \ubaa8\ub378 \u00b6 \uc5b4\ub5a4 \uacbd\ub85c \ub3d9\uc791 \uc774\ub4e0 \ub9e4\uac1c\ubcc0\uc218 response_model \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc751\ub2f5\uc744 \uc704\ud55c \ubaa8\ub378\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: @app.get() @app.post() @app.put() @app.delete() \uae30\ud0c0. from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item ): return item \ucc38\uace0 response_model \uc740 \"\ub370\ucf54\ub808\uc774\ud130\" \uba54\uc18c\ub4dc( get , post , \ub4f1)\uc758 \ub9e4\uac1c\ubcc0\uc218\uc785\ub2c8\ub2e4. \ubaa8\ub4e0 \ub9e4\uac1c\ubcc0\uc218\ub4e4\uacfc \ubcf8\ubb38(body)\ucc98\ub7fc \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \uac00 \uc544\ub2d9\ub2c8\ub2e4. Pydantic \ubaa8\ub378 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub97c \uc120\uc5b8\ud55c \uac83\uacfc \ub3d9\uc77c\ud55c \ud0c0\uc785\uc744 \uc218\uc2e0\ud558\ubbc0\ub85c Pydantic \ubaa8\ub378\uc774 \ub420 \uc218 \uc788\uc9c0\ub9cc, List[Item] \uacfc \uac19\uc774 Pydantic \ubaa8\ub378\ub4e4\uc758 list \uc77c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. FastAPI\ub294 \uc774 response_model \ub97c \uc0ac\uc6a9\ud558\uc5ec: \ucd9c\ub825 \ub370\uc774\ud130\ub97c \ud0c0\uc785 \uc120\uc5b8\uc73c\ub85c \ubcc0\ud658. \ub370\uc774\ud130 \uac80\uc99d. OpenAPI \uacbd\ub85c \ub3d9\uc791 \uc758 \uc751\ub2f5\uc5d0 JSON \uc2a4\ud0a4\ub9c8 \ucd94\uac00. \uc790\ub3d9 \uc0dd\uc131 \ubb38\uc11c \uc2dc\uc2a4\ud15c\uc5d0 \uc0ac\uc6a9. \ud558\uc9c0\ub9cc \uac00\uc7a5 \uc911\uc694\ud55c \uac83\uc740: \ud574\ub2f9 \ubaa8\ub378\uc758 \ucd9c\ub825 \ub370\uc774\ud130 \uc81c\ud55c. \uc774\uac83\uc774 \uc5bc\ub9c8\ub098 \uc911\uc694\ud55c\uc9c0 \uc544\ub798\uc5d0\uc11c \ubcfc \uac83\uc785\ub2c8\ub2e4. \uae30\uc220 \uc138\ubd80\uc0ac\ud56d \uc751\ub2f5 \ubaa8\ub378\uc740 \ud568\uc218\uc758 \ud0c0\uc785 \uc5b4\ub178\ud14c\uc774\uc158 \ub300\uc2e0 \uc774 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc120\uc5b8\ud558\ub294\ub370, \uacbd\ub85c \ud568\uc218\uac00 \uc2e4\uc81c \uc751\ub2f5 \ubaa8\ub378\uc744 \ubc18\ud658\ud558\uc9c0 \uc54a\uace0 dict , \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uac1d\uccb4\ub098 \uae30\ud0c0 \ub2e4\ub978 \ubaa8\ub378\uc744 response_model \uc744 \uc0ac\uc6a9\ud558\uc5ec \ud544\ub4dc \uc81c\ud55c\uacfc \uc9c1\ub82c\ud654\ub97c \uc218\ud589\ud558\uace0 \ubc18\ud658\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4 \ub3d9\uc77c\ud55c \uc785\ub825 \ub370\uc774\ud130 \ubc18\ud658 \u00b6 \uc5ec\uae30\uc11c \uc6b0\ub9ac\ub294 \ud3c9\ubb38 \ube44\ubc00\ubc88\ud638\ub97c \ud3ec\ud568\ud558\ub294 UserIn \ubaa8\ub378\uc744 \uc120\uc5b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user \uadf8\ub9ac\uace0 \uc774 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc785\ub825\uc744 \uc120\uc5b8\ud558\uace0 \uac19\uc740 \ubaa8\ub378\ub85c \ucd9c\ub825\uc744 \uc120\uc5b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user \uc774\uc81c \ube0c\ub77c\uc6b0\uc800\uac00 \ube44\ubc00\ubc88\ud638\ub85c \uc0ac\uc6a9\uc790\ub97c \ub9cc\ub4e4 \ub54c\ub9c8\ub2e4 API\ub294 \uc751\ub2f5\uc73c\ub85c \ub3d9\uc77c\ud55c \ube44\ubc00\ubc88\ud638\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uc774 \uacbd\uc6b0, \uc0ac\uc6a9\uc790\uac00 \uc2a4\uc2a4\ub85c \ube44\ubc00\ubc88\ud638\ub97c \ubc1c\uc2e0\ud588\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub3d9\uc77c\ud55c \ubaa8\ub378\uc744 \ub2e4\ub978 \uacbd\ub85c \ub3d9\uc791 \uc5d0\uc11c \uc0ac\uc6a9\ud560 \uacbd\uc6b0, \ubaa8\ub4e0 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \uc0ac\uc6a9\uc790\uc758 \ube44\ubc00\ubc88\ud638\ub97c \ubc1c\uc2e0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc704\ud5d8 \uc808\ub300\ub85c \uc0ac\uc6a9\uc790\uc758 \ud3c9\ubb38 \ube44\ubc00\ubc88\ud638\ub97c \uc800\uc7a5\ud558\uac70\ub098 \uc751\ub2f5\uc73c\ub85c \ubc1c\uc2e0\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624. \ucd9c\ub825 \ubaa8\ub378 \ucd94\uac00 \u00b6 \ub300\uc2e0 \ud3c9\ubb38 \ube44\ubc00\ubc88\ud638\ub85c \uc785\ub825 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uace0 \ud574\ub2f9 \ube44\ubc00\ubc88\ud638 \uc5c6\uc774 \ucd9c\ub825 \ubaa8\ub378\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user \uc5ec\uae30\uc11c \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \uac00 \ube44\ubc00\ubc88\ud638\ub97c \ud3ec\ud568\ud558\ub294 \ub3d9\uc77c\ud55c \uc785\ub825 \uc0ac\uc6a9\uc790\ub97c \ubc18\ud658\ud560\uc9c0\ub77c\ub3c4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user ... response_model \uc744 UserOut \ubaa8\ub378\ub85c \uc120\uc5b8\ud588\uae30 \ub54c\ubb38\uc5d0 \ube44\ubc00\ubc88\ud638\ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user \ub530\ub77c\uc11c FastAPI \ub294 \ucd9c\ub825 \ubaa8\ub378\uc5d0\uc11c \uc120\uc5b8\ud558\uc9c0 \uc54a\uc740 \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c (Pydantic\uc744 \uc0ac\uc6a9\ud558\uc5ec) \ud544\ud130\ub9c1\ud569\ub2c8\ub2e4. \ubb38\uc11c\uc5d0\uc11c \ubcf4\uae30 \u00b6 \uc790\ub3d9 \uc0dd\uc131 \ubb38\uc11c\ub97c \ubcf4\uba74 \uc785\ub825 \ubaa8\ub378\uacfc \ucd9c\ub825 \ubaa8\ub378\uc774 \uac01\uc790\uc758 JSON \uc2a4\ud0a4\ub9c8\ub97c \uac00\uc9c0\uace0 \uc788\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uadf8\ub9ac\uace0 \ub450 \ubaa8\ub378 \ubaa8\ub450 \ub300\ud654\ud615 API \ubb38\uc11c\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4: \uc751\ub2f5 \ubaa8\ub378 \uc778\ucf54\ub529 \ub9e4\uac1c\ubcc0\uc218 \u00b6 \uc751\ub2f5 \ubaa8\ub378\uc740 \uc544\ub798\uc640 \uac19\uc774 \uae30\ubcf8\uac12\uc744 \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] description: Optional[str] = None \uc740 \uae30\ubcf8\uac12\uc73c\ub85c None \uc744 \uac16\uc2b5\ub2c8\ub2e4. tax: float = 10.5 \ub294 \uae30\ubcf8\uac12\uc73c\ub85c 10.5 \ub97c \uac16\uc2b5\ub2c8\ub2e4. tags: List[str] = [] \ube48 \ub9ac\uc2a4\ud2b8\uc758 \uae30\ubcf8\uac12\uc73c\ub85c: [] . \uadf8\ub7ec\ub098 \uc2e4\uc81c\ub85c \uc800\uc7a5\ub418\uc9c0 \uc54a\uc558\uc744 \uacbd\uc6b0 \uacb0\uacfc\uc5d0\uc11c \uac12\uc744 \uc0dd\ub7b5\ud558\uace0 \uc2f6\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \ub9ce\uc740 \uc120\ud0dd\uc801 \uc18d\uc131\uc774 \uc788\ub294 \ubaa8\ub378\uc774 \uc788\uc9c0\ub9cc, \uae30\ubcf8\uac12\uc73c\ub85c \uac00\ub4dd \ucc2c \ub9e4\uc6b0 \uae34 JSON \uc751\ub2f5\uc744 \ubcf4\ub0b4\uace0 \uc2f6\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. response_model_exclude_unset \ub9e4\uac1c\ubcc0\uc218 \uc0ac\uc6a9 \u00b6 \uacbd\ub85c \ub3d9\uc791 \ub370\ucf54\ub808\uc774\ud130 \ub9e4\uac1c\ubcc0\uc218\ub97c response_model_exclude_unset=True \ub85c \uc124\uc815 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] \uc774\ub7ec\ud55c \uae30\ubcf8\uac12\uc740 \uc751\ub2f5\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\uace0 \uc2e4\uc81c\ub85c \uc124\uc815\ub41c \uac12\ub9cc \ud3ec\ud568\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud574\ub2f9 \uacbd\ub85c \ub3d9\uc791 \uc5d0 ID\uac00 foo \uc778 \ud56d\ubaa9(items)\uc744 \uc694\uccad\uc73c\ub85c \ubcf4\ub0b4\uba74 (\uae30\ubcf8\uac12\uc744 \uc81c\uc678\ud55c) \uc751\ub2f5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: { \"name\" : \"Foo\" , \"price\" : 50.2 } \uc815\ubcf4 FastAPI\ub294 \uc774\ub97c \uc704\ud574 Pydantic \ubaa8\ub378\uc758 .dict() \uc758 exclude_unset \ub9e4\uac1c\ubcc0\uc218 \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc815\ubcf4 \uc544\ub798 \ub610\ud55c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: response_model_exclude_defaults=True response_model_exclude_none=True Pydantic \ubb38\uc11c \uc5d0\uc11c exclude_defaults \ubc0f exclude_none \uc5d0 \ub300\ud574 \uc124\uba85\ud55c \ub300\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae30\ubcf8\uac12\uc774 \uc788\ub294 \ud544\ub4dc\ub97c \uac16\ub294 \uac12\uc758 \ub370\uc774\ud130 \u00b6 \ud558\uc9c0\ub9cc \ubaa8\ub378\uc758 \ud544\ub4dc\uac00 \uae30\ubcf8\uac12\uc774 \uc788\uc5b4\ub3c4 ID\uac00 bar \uc778 \ud56d\ubaa9(items)\ucc98\ub7fc \ub370\uc774\ud130\uac00 \uac12\uc744 \uac16\ub294\ub2e4\uba74: { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 } \uc751\ub2f5\uc5d0 \ud574\ub2f9 \uac12\ub4e4\uc774 \ud3ec\ud568\ub429\ub2c8\ub2e4. \uae30\ubcf8\uac12\uacfc \ub3d9\uc77c\ud55c \uac12\uc744 \uac16\ub294 \ub370\uc774\ud130 \u00b6 If the data has the same values as the default ones, like the item with ID baz : ID\uac00 baz \uc778 \ud56d\ubaa9(items)\ucc98\ub7fc \uae30\ubcf8\uac12\uacfc \ub3d9\uc77c\ud55c \uac12\uc744 \uac16\ub294\ub2e4\uba74: { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : [] } description , tax \uadf8\ub9ac\uace0 tags \uac00 \uae30\ubcf8\uac12\uacfc \uac19\ub354\ub77c\ub3c4 (\uae30\ubcf8\uac12\uc5d0\uc11c \uac00\uc838\uc624\ub294 \ub300\uc2e0) \uac12\ub4e4\uc774 \uba85\uc2dc\uc801\uc73c\ub85c \uc124\uc815\ub418\uc5c8\ub2e4\ub294 \uac83\uc744 \uc778\uc9c0\ud560 \uc815\ub3c4\ub85c FastAPI\ub294 \ucda9\ubd84\ud788 \ub611\ub611\ud569\ub2c8\ub2e4(\uc0ac\uc2e4, Pydantic\uc774 \ucda9\ubd84\ud788 \ub611\ub611\ud569\ub2c8\ub2e4). \ub530\ub77c\uc11c JSON \uc2a4\ud0a4\ub9c8\uc5d0 \ud3ec\ud568\ub429\ub2c8\ub2e4. \ud301 None \ubfd0\ub9cc \uc544\ub2c8\ub77c \ub2e4\ub978 \uc5b4\ub5a4 \uac83\ub3c4 \uae30\ubcf8\uac12\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9ac\uc2a4\ud2b8( [] ), float \uc778 10.5 \ub4f1\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. response_model_include \ubc0f response_model_exclude \u00b6 \uacbd\ub85c \ub3d9\uc791 \ub370\ucf54\ub808\uc774\ud130 \ub9e4\uac1c\ubcc0\uc218 response_model_include \ubc0f response_model_exclude \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub4e4\uc740 \ud3ec\ud568(\ub098\uba38\uc9c0 \uc0dd\ub7b5)\ud558\uac70\ub098 \uc81c\uc678(\ub098\uba38\uc9c0 \ud3ec\ud568) \ud560 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc758 \uc774\ub984\uacfc str \uc758 set \uc744 \ubc1b\uc2b5\ub2c8\ub2e4. Pydantic \ubaa8\ub378\uc774 \ud558\ub098\ub9cc \uc788\uace0 \ucd9c\ub825\uc5d0\uc11c \u200b\u200b\uc77c\ubd80 \ub370\uc774\ud130\ub97c \uc81c\uac70\ud558\ub824\ub294 \uacbd\uc6b0 \ube60\ub978 \uc9c0\ub984\uae38\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud301 \ud558\uc9c0\ub9cc \uc774\ub7ec\ud55c \ub9e4\uac1c\ubcc0\uc218 \ub300\uc2e0 \uc5ec\ub7ec \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc704 \uc544\uc774\ub514\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \ucd94\ucc9c\ud569\ub2c8\ub2e4. \uc774\ub294 \uc77c\ubd80 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub97c \uc0dd\ub7b5\ud558\uae30 \uc704\ud574 response_model_include \ub610\ub294 response_model_exclude \ub97c \uc0ac\uc6a9\ud558\ub354\ub77c\ub3c4 \uc571\uc758 OpenAPI(\ubc0f \ubb38\uc11c)\uac00 \uc0dd\uc131\ud55c JSON \uc2a4\ud0a4\ub9c8\uac00 \uc5ec\uc804\ud788 \uc804\uccb4 \ubaa8\ub378\uc5d0 \ub300\ud55c \uc2a4\ud0a4\ub9c8\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ube44\uc2b7\ud558\uac8c \uc791\ub3d9\ud558\ub294 response_model_by_alias \uc5ed\uc2dc \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc801\uc6a9\ub429\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = { \"name\" , \"description\" }, ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = { \"tax\" }) async def read_item_public_data ( item_id : str ): return items [ item_id ] \ud301 \ubb38\ubc95 {\"name\", \"description\"} \uc740 \ub450 \uac12\uc744 \uac16\ub294 set \uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \uc774\ub294 set([\"name\", \"description\"]) \uacfc \ub3d9\uc77c\ud569\ub2c8\ub2e4. set \ub300\uc2e0 list \uc0ac\uc6a9\ud558\uae30 \u00b6 list \ub610\ub294 tuple \ub300\uc2e0 set \uc744 \uc0ac\uc6a9\ud558\ub294 \ubc95\uc744 \uc78a\uc5c8\ub354\ub77c\ub3c4, FastAPI\ub294 set \uc73c\ub85c \ubcc0\ud658\ud558\uace0 \uc815\uc0c1\uc801\uc73c\ub85c \uc791\ub3d9\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = [ \"name\" , \"description\" ], ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = [ \"tax\" ]) async def read_item_public_data ( item_id : str ): return items [ item_id ] \uc694\uc57d \u00b6 \uc751\ub2f5 \ubaa8\ub378\uc744 \uc815\uc758\ud558\uace0 \uac1c\uc778\uc815\ubcf4\uac00 \ud544\ud130\ub418\ub294 \uac83\uc744 \ubcf4\uc7a5\ud558\uae30 \uc704\ud574 \uacbd\ub85c \ub3d9\uc791 \ub370\ucf54\ub808\uc774\ud130 \uc758 \ub9e4\uac1c\ubcc0\uc218 response_model \uc744 \uc0ac\uc6a9\ud558\uc138\uc694. \uba85\uc2dc\uc801\uc73c\ub85c \uc124\uc815\ub41c \uac12\ub9cc \ubc18\ud658\ud558\ub824\uba74 response_model_exclude_unset \uc744 \uc0ac\uc6a9\ud558\uc138\uc694.","title":"\uc751\ub2f5 \ubaa8\ub378"},{"location":"tutorial/response-model/#_1","text":"\uc5b4\ub5a4 \uacbd\ub85c \ub3d9\uc791 \uc774\ub4e0 \ub9e4\uac1c\ubcc0\uc218 response_model \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc751\ub2f5\uc744 \uc704\ud55c \ubaa8\ub378\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: @app.get() @app.post() @app.put() @app.delete() \uae30\ud0c0. from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item ): return item \ucc38\uace0 response_model \uc740 \"\ub370\ucf54\ub808\uc774\ud130\" \uba54\uc18c\ub4dc( get , post , \ub4f1)\uc758 \ub9e4\uac1c\ubcc0\uc218\uc785\ub2c8\ub2e4. \ubaa8\ub4e0 \ub9e4\uac1c\ubcc0\uc218\ub4e4\uacfc \ubcf8\ubb38(body)\ucc98\ub7fc \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \uac00 \uc544\ub2d9\ub2c8\ub2e4. Pydantic \ubaa8\ub378 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub97c \uc120\uc5b8\ud55c \uac83\uacfc \ub3d9\uc77c\ud55c \ud0c0\uc785\uc744 \uc218\uc2e0\ud558\ubbc0\ub85c Pydantic \ubaa8\ub378\uc774 \ub420 \uc218 \uc788\uc9c0\ub9cc, List[Item] \uacfc \uac19\uc774 Pydantic \ubaa8\ub378\ub4e4\uc758 list \uc77c \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. FastAPI\ub294 \uc774 response_model \ub97c \uc0ac\uc6a9\ud558\uc5ec: \ucd9c\ub825 \ub370\uc774\ud130\ub97c \ud0c0\uc785 \uc120\uc5b8\uc73c\ub85c \ubcc0\ud658. \ub370\uc774\ud130 \uac80\uc99d. OpenAPI \uacbd\ub85c \ub3d9\uc791 \uc758 \uc751\ub2f5\uc5d0 JSON \uc2a4\ud0a4\ub9c8 \ucd94\uac00. \uc790\ub3d9 \uc0dd\uc131 \ubb38\uc11c \uc2dc\uc2a4\ud15c\uc5d0 \uc0ac\uc6a9. \ud558\uc9c0\ub9cc \uac00\uc7a5 \uc911\uc694\ud55c \uac83\uc740: \ud574\ub2f9 \ubaa8\ub378\uc758 \ucd9c\ub825 \ub370\uc774\ud130 \uc81c\ud55c. \uc774\uac83\uc774 \uc5bc\ub9c8\ub098 \uc911\uc694\ud55c\uc9c0 \uc544\ub798\uc5d0\uc11c \ubcfc \uac83\uc785\ub2c8\ub2e4. \uae30\uc220 \uc138\ubd80\uc0ac\ud56d \uc751\ub2f5 \ubaa8\ub378\uc740 \ud568\uc218\uc758 \ud0c0\uc785 \uc5b4\ub178\ud14c\uc774\uc158 \ub300\uc2e0 \uc774 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc120\uc5b8\ud558\ub294\ub370, \uacbd\ub85c \ud568\uc218\uac00 \uc2e4\uc81c \uc751\ub2f5 \ubaa8\ub378\uc744 \ubc18\ud658\ud558\uc9c0 \uc54a\uace0 dict , \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uac1d\uccb4\ub098 \uae30\ud0c0 \ub2e4\ub978 \ubaa8\ub378\uc744 response_model \uc744 \uc0ac\uc6a9\ud558\uc5ec \ud544\ub4dc \uc81c\ud55c\uacfc \uc9c1\ub82c\ud654\ub97c \uc218\ud589\ud558\uace0 \ubc18\ud658\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4","title":"\uc751\ub2f5 \ubaa8\ub378"},{"location":"tutorial/response-model/#_2","text":"\uc5ec\uae30\uc11c \uc6b0\ub9ac\ub294 \ud3c9\ubb38 \ube44\ubc00\ubc88\ud638\ub97c \ud3ec\ud568\ud558\ub294 UserIn \ubaa8\ub378\uc744 \uc120\uc5b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user \uadf8\ub9ac\uace0 \uc774 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc785\ub825\uc744 \uc120\uc5b8\ud558\uace0 \uac19\uc740 \ubaa8\ub378\ub85c \ucd9c\ub825\uc744 \uc120\uc5b8\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user \uc774\uc81c \ube0c\ub77c\uc6b0\uc800\uac00 \ube44\ubc00\ubc88\ud638\ub85c \uc0ac\uc6a9\uc790\ub97c \ub9cc\ub4e4 \ub54c\ub9c8\ub2e4 API\ub294 \uc751\ub2f5\uc73c\ub85c \ub3d9\uc77c\ud55c \ube44\ubc00\ubc88\ud638\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uc774 \uacbd\uc6b0, \uc0ac\uc6a9\uc790\uac00 \uc2a4\uc2a4\ub85c \ube44\ubc00\ubc88\ud638\ub97c \ubc1c\uc2e0\ud588\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub3d9\uc77c\ud55c \ubaa8\ub378\uc744 \ub2e4\ub978 \uacbd\ub85c \ub3d9\uc791 \uc5d0\uc11c \uc0ac\uc6a9\ud560 \uacbd\uc6b0, \ubaa8\ub4e0 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \uc0ac\uc6a9\uc790\uc758 \ube44\ubc00\ubc88\ud638\ub97c \ubc1c\uc2e0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc704\ud5d8 \uc808\ub300\ub85c \uc0ac\uc6a9\uc790\uc758 \ud3c9\ubb38 \ube44\ubc00\ubc88\ud638\ub97c \uc800\uc7a5\ud558\uac70\ub098 \uc751\ub2f5\uc73c\ub85c \ubc1c\uc2e0\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624.","title":"\ub3d9\uc77c\ud55c \uc785\ub825 \ub370\uc774\ud130 \ubc18\ud658"},{"location":"tutorial/response-model/#_3","text":"\ub300\uc2e0 \ud3c9\ubb38 \ube44\ubc00\ubc88\ud638\ub85c \uc785\ub825 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uace0 \ud574\ub2f9 \ube44\ubc00\ubc88\ud638 \uc5c6\uc774 \ucd9c\ub825 \ubaa8\ub378\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user \uc5ec\uae30\uc11c \uacbd\ub85c \ub3d9\uc791 \ud568\uc218 \uac00 \ube44\ubc00\ubc88\ud638\ub97c \ud3ec\ud568\ud558\ub294 \ub3d9\uc77c\ud55c \uc785\ub825 \uc0ac\uc6a9\uc790\ub97c \ubc18\ud658\ud560\uc9c0\ub77c\ub3c4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user ... response_model \uc744 UserOut \ubaa8\ub378\ub85c \uc120\uc5b8\ud588\uae30 \ub54c\ubb38\uc5d0 \ube44\ubc00\ubc88\ud638\ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user \ub530\ub77c\uc11c FastAPI \ub294 \ucd9c\ub825 \ubaa8\ub378\uc5d0\uc11c \uc120\uc5b8\ud558\uc9c0 \uc54a\uc740 \ubaa8\ub4e0 \ub370\uc774\ud130\ub97c (Pydantic\uc744 \uc0ac\uc6a9\ud558\uc5ec) \ud544\ud130\ub9c1\ud569\ub2c8\ub2e4.","title":"\ucd9c\ub825 \ubaa8\ub378 \ucd94\uac00"},{"location":"tutorial/response-model/#_4","text":"\uc790\ub3d9 \uc0dd\uc131 \ubb38\uc11c\ub97c \ubcf4\uba74 \uc785\ub825 \ubaa8\ub378\uacfc \ucd9c\ub825 \ubaa8\ub378\uc774 \uac01\uc790\uc758 JSON \uc2a4\ud0a4\ub9c8\ub97c \uac00\uc9c0\uace0 \uc788\uc74c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uadf8\ub9ac\uace0 \ub450 \ubaa8\ub378 \ubaa8\ub450 \ub300\ud654\ud615 API \ubb38\uc11c\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4:","title":"\ubb38\uc11c\uc5d0\uc11c \ubcf4\uae30"},{"location":"tutorial/response-model/#_5","text":"\uc751\ub2f5 \ubaa8\ub378\uc740 \uc544\ub798\uc640 \uac19\uc774 \uae30\ubcf8\uac12\uc744 \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] description: Optional[str] = None \uc740 \uae30\ubcf8\uac12\uc73c\ub85c None \uc744 \uac16\uc2b5\ub2c8\ub2e4. tax: float = 10.5 \ub294 \uae30\ubcf8\uac12\uc73c\ub85c 10.5 \ub97c \uac16\uc2b5\ub2c8\ub2e4. tags: List[str] = [] \ube48 \ub9ac\uc2a4\ud2b8\uc758 \uae30\ubcf8\uac12\uc73c\ub85c: [] . \uadf8\ub7ec\ub098 \uc2e4\uc81c\ub85c \uc800\uc7a5\ub418\uc9c0 \uc54a\uc558\uc744 \uacbd\uc6b0 \uacb0\uacfc\uc5d0\uc11c \uac12\uc744 \uc0dd\ub7b5\ud558\uace0 \uc2f6\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, NoSQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \ub9ce\uc740 \uc120\ud0dd\uc801 \uc18d\uc131\uc774 \uc788\ub294 \ubaa8\ub378\uc774 \uc788\uc9c0\ub9cc, \uae30\ubcf8\uac12\uc73c\ub85c \uac00\ub4dd \ucc2c \ub9e4\uc6b0 \uae34 JSON \uc751\ub2f5\uc744 \ubcf4\ub0b4\uace0 \uc2f6\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"\uc751\ub2f5 \ubaa8\ub378 \uc778\ucf54\ub529 \ub9e4\uac1c\ubcc0\uc218"},{"location":"tutorial/response-model/#response_model_exclude_unset","text":"\uacbd\ub85c \ub3d9\uc791 \ub370\ucf54\ub808\uc774\ud130 \ub9e4\uac1c\ubcc0\uc218\ub97c response_model_exclude_unset=True \ub85c \uc124\uc815 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] \uc774\ub7ec\ud55c \uae30\ubcf8\uac12\uc740 \uc751\ub2f5\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\uace0 \uc2e4\uc81c\ub85c \uc124\uc815\ub41c \uac12\ub9cc \ud3ec\ud568\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud574\ub2f9 \uacbd\ub85c \ub3d9\uc791 \uc5d0 ID\uac00 foo \uc778 \ud56d\ubaa9(items)\uc744 \uc694\uccad\uc73c\ub85c \ubcf4\ub0b4\uba74 (\uae30\ubcf8\uac12\uc744 \uc81c\uc678\ud55c) \uc751\ub2f5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: { \"name\" : \"Foo\" , \"price\" : 50.2 } \uc815\ubcf4 FastAPI\ub294 \uc774\ub97c \uc704\ud574 Pydantic \ubaa8\ub378\uc758 .dict() \uc758 exclude_unset \ub9e4\uac1c\ubcc0\uc218 \ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc815\ubcf4 \uc544\ub798 \ub610\ud55c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: response_model_exclude_defaults=True response_model_exclude_none=True Pydantic \ubb38\uc11c \uc5d0\uc11c exclude_defaults \ubc0f exclude_none \uc5d0 \ub300\ud574 \uc124\uba85\ud55c \ub300\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"response_model_exclude_unset \ub9e4\uac1c\ubcc0\uc218 \uc0ac\uc6a9"},{"location":"tutorial/response-model/#_6","text":"\ud558\uc9c0\ub9cc \ubaa8\ub378\uc758 \ud544\ub4dc\uac00 \uae30\ubcf8\uac12\uc774 \uc788\uc5b4\ub3c4 ID\uac00 bar \uc778 \ud56d\ubaa9(items)\ucc98\ub7fc \ub370\uc774\ud130\uac00 \uac12\uc744 \uac16\ub294\ub2e4\uba74: { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 } \uc751\ub2f5\uc5d0 \ud574\ub2f9 \uac12\ub4e4\uc774 \ud3ec\ud568\ub429\ub2c8\ub2e4.","title":"\uae30\ubcf8\uac12\uc774 \uc788\ub294 \ud544\ub4dc\ub97c \uac16\ub294 \uac12\uc758 \ub370\uc774\ud130"},{"location":"tutorial/response-model/#_7","text":"If the data has the same values as the default ones, like the item with ID baz : ID\uac00 baz \uc778 \ud56d\ubaa9(items)\ucc98\ub7fc \uae30\ubcf8\uac12\uacfc \ub3d9\uc77c\ud55c \uac12\uc744 \uac16\ub294\ub2e4\uba74: { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : [] } description , tax \uadf8\ub9ac\uace0 tags \uac00 \uae30\ubcf8\uac12\uacfc \uac19\ub354\ub77c\ub3c4 (\uae30\ubcf8\uac12\uc5d0\uc11c \uac00\uc838\uc624\ub294 \ub300\uc2e0) \uac12\ub4e4\uc774 \uba85\uc2dc\uc801\uc73c\ub85c \uc124\uc815\ub418\uc5c8\ub2e4\ub294 \uac83\uc744 \uc778\uc9c0\ud560 \uc815\ub3c4\ub85c FastAPI\ub294 \ucda9\ubd84\ud788 \ub611\ub611\ud569\ub2c8\ub2e4(\uc0ac\uc2e4, Pydantic\uc774 \ucda9\ubd84\ud788 \ub611\ub611\ud569\ub2c8\ub2e4). \ub530\ub77c\uc11c JSON \uc2a4\ud0a4\ub9c8\uc5d0 \ud3ec\ud568\ub429\ub2c8\ub2e4. \ud301 None \ubfd0\ub9cc \uc544\ub2c8\ub77c \ub2e4\ub978 \uc5b4\ub5a4 \uac83\ub3c4 \uae30\ubcf8\uac12\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9ac\uc2a4\ud2b8( [] ), float \uc778 10.5 \ub4f1\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uae30\ubcf8\uac12\uacfc \ub3d9\uc77c\ud55c \uac12\uc744 \uac16\ub294 \ub370\uc774\ud130"},{"location":"tutorial/response-model/#response_model_include-response_model_exclude","text":"\uacbd\ub85c \ub3d9\uc791 \ub370\ucf54\ub808\uc774\ud130 \ub9e4\uac1c\ubcc0\uc218 response_model_include \ubc0f response_model_exclude \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub4e4\uc740 \ud3ec\ud568(\ub098\uba38\uc9c0 \uc0dd\ub7b5)\ud558\uac70\ub098 \uc81c\uc678(\ub098\uba38\uc9c0 \ud3ec\ud568) \ud560 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc758 \uc774\ub984\uacfc str \uc758 set \uc744 \ubc1b\uc2b5\ub2c8\ub2e4. Pydantic \ubaa8\ub378\uc774 \ud558\ub098\ub9cc \uc788\uace0 \ucd9c\ub825\uc5d0\uc11c \u200b\u200b\uc77c\ubd80 \ub370\uc774\ud130\ub97c \uc81c\uac70\ud558\ub824\ub294 \uacbd\uc6b0 \ube60\ub978 \uc9c0\ub984\uae38\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud301 \ud558\uc9c0\ub9cc \uc774\ub7ec\ud55c \ub9e4\uac1c\ubcc0\uc218 \ub300\uc2e0 \uc5ec\ub7ec \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc704 \uc544\uc774\ub514\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \ucd94\ucc9c\ud569\ub2c8\ub2e4. \uc774\ub294 \uc77c\ubd80 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub97c \uc0dd\ub7b5\ud558\uae30 \uc704\ud574 response_model_include \ub610\ub294 response_model_exclude \ub97c \uc0ac\uc6a9\ud558\ub354\ub77c\ub3c4 \uc571\uc758 OpenAPI(\ubc0f \ubb38\uc11c)\uac00 \uc0dd\uc131\ud55c JSON \uc2a4\ud0a4\ub9c8\uac00 \uc5ec\uc804\ud788 \uc804\uccb4 \ubaa8\ub378\uc5d0 \ub300\ud55c \uc2a4\ud0a4\ub9c8\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ube44\uc2b7\ud558\uac8c \uc791\ub3d9\ud558\ub294 response_model_by_alias \uc5ed\uc2dc \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc801\uc6a9\ub429\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = { \"name\" , \"description\" }, ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = { \"tax\" }) async def read_item_public_data ( item_id : str ): return items [ item_id ] \ud301 \ubb38\ubc95 {\"name\", \"description\"} \uc740 \ub450 \uac12\uc744 \uac16\ub294 set \uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \uc774\ub294 set([\"name\", \"description\"]) \uacfc \ub3d9\uc77c\ud569\ub2c8\ub2e4.","title":"response_model_include \ubc0f response_model_exclude"},{"location":"tutorial/response-model/#set-list","text":"list \ub610\ub294 tuple \ub300\uc2e0 set \uc744 \uc0ac\uc6a9\ud558\ub294 \ubc95\uc744 \uc78a\uc5c8\ub354\ub77c\ub3c4, FastAPI\ub294 set \uc73c\ub85c \ubcc0\ud658\ud558\uace0 \uc815\uc0c1\uc801\uc73c\ub85c \uc791\ub3d9\ud569\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = [ \"name\" , \"description\" ], ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = [ \"tax\" ]) async def read_item_public_data ( item_id : str ): return items [ item_id ]","title":"set \ub300\uc2e0 list \uc0ac\uc6a9\ud558\uae30"},{"location":"tutorial/response-model/#_8","text":"\uc751\ub2f5 \ubaa8\ub378\uc744 \uc815\uc758\ud558\uace0 \uac1c\uc778\uc815\ubcf4\uac00 \ud544\ud130\ub418\ub294 \uac83\uc744 \ubcf4\uc7a5\ud558\uae30 \uc704\ud574 \uacbd\ub85c \ub3d9\uc791 \ub370\ucf54\ub808\uc774\ud130 \uc758 \ub9e4\uac1c\ubcc0\uc218 response_model \uc744 \uc0ac\uc6a9\ud558\uc138\uc694. \uba85\uc2dc\uc801\uc73c\ub85c \uc124\uc815\ub41c \uac12\ub9cc \ubc18\ud658\ud558\ub824\uba74 response_model_exclude_unset \uc744 \uc0ac\uc6a9\ud558\uc138\uc694.","title":"\uc694\uc57d"},{"location":"tutorial/response-status-code/","text":"\uc751\ub2f5 \uc0c1\ud0dc \ucf54\ub4dc \u00b6 \uc751\ub2f5 \ubaa8\ub378\uacfc \uac19\uc740 \ubc29\ubc95\uc73c\ub85c, \uc5b4\ub5a4 \uacbd\ub85c \uc791\ub3d9 \uc774\ub4e0 status_code \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc751\ub2f5\uc5d0 \ub300\ud55c HTTP \uc0c1\ud0dc \ucf54\ub4dc\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. @app.get() @app.post() @app.put() @app.delete() \uae30\ud0c0 from fastapi import FastAPI app = FastAPI () @app . post ( \"/items/\" , status_code = 201 ) async def create_item ( name : str ): return { \"name\" : name } \ucc38\uace0 status_code \ub294 \"\ub370\ucf54\ub808\uc774\ud130\" \uba54\uc18c\ub4dc( get , post \ub4f1)\uc758 \ub9e4\uac1c\ubcc0\uc218\uc785\ub2c8\ub2e4. \ubaa8\ub4e0 \ub9e4\uac1c\ubcc0\uc218\ub4e4\uacfc \ubcf8\ubb38\ucc98\ub7fc \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uac00 \uc544\ub2d9\ub2c8\ub2e4. status_code \ub9e4\uac1c\ubcc0\uc218\ub294 HTTP \uc0c1\ud0dc \ucf54\ub4dc\ub97c \uc22b\uc790\ub85c \uc785\ub825\ubc1b\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 status_code \ub294 \ud30c\uc774\uc36c\uc758 http.HTTPStatus \uc640 \uac19\uc740 IntEnum \uc744 \uc785\ub825\ubc1b\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. status_code \ub9e4\uac1c\ubcc0\uc218\ub294: \uc751\ub2f5\uc5d0\uc11c \ud574\ub2f9 \uc0c1\ud0dc \ucf54\ub4dc\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uc0c1\ud0dc \ucf54\ub4dc\ub97c OpenAPI \uc2a4\ud0a4\ub9c8(\ubc0f \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4)\uc5d0 \ubb38\uc11c\ud654 \ud569\ub2c8\ub2e4. \ucc38\uace0 \uc5b4\ub5a4 \uc751\ub2f5 \ucf54\ub4dc\ub4e4\uc740 \ud574\ub2f9 \uc751\ub2f5\uc5d0 \ubcf8\ubb38\uc774 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud558\uae30\ub3c4 \ud569\ub2c8\ub2e4 (\ub2e4\uc74c \ud56d\ubaa9 \ucc38\uace0). \uc774\uc5d0 \ub530\ub77c FastAPI\ub294 \uc751\ub2f5 \ubcf8\ubb38\uc774 \uc5c6\uc74c\uc744 \uba85\uc2dc\ud558\ub294 OpenAPI\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. HTTP \uc0c1\ud0dc \ucf54\ub4dc\uc5d0 \ub300\ud558\uc5ec \u00b6 \ucc38\uace0 \ub9cc\uc57d HTTP \uc0c1\ud0dc \ucf54\ub4dc\uc5d0 \ub300\ud558\uc5ec \uc774\ubbf8 \uc54c\uace0\uc788\ub2e4\uba74, \ub2e4\uc74c \ud56d\ubaa9\uc73c\ub85c \ub118\uc5b4\uac00\uc2ed\uc2dc\uc624. HTTP\ub294 \uc138\uc790\ub9ac\uc758 \uc22b\uc790 \uc0c1\ud0dc \ucf54\ub4dc\ub97c \uc751\ub2f5\uc758 \uc77c\ubd80\ub85c \uc804\uc1a1\ud569\ub2c8\ub2e4. \uc774 \uc0c1\ud0dc \ucf54\ub4dc\ub4e4\uc740 \uac01\uc790\ub97c \uc2dd\ubcc4\ud560 \uc218 \uc788\ub3c4\ub85d \uc9c0\uc815\ub41c \uc774\ub984\uc774 \uc788\uc73c\ub098, \uc911\uc694\ud55c \uac83\uc740 \uc22b\uc790 \ucf54\ub4dc\uc785\ub2c8\ub2e4. \uc694\uc57d\ud558\uc790\uba74: **1xx** \uc0c1\ud0dc \ucf54\ub4dc\ub294 \"\uc815\ubcf4\"\uc6a9\uc785\ub2c8\ub2e4. \uc774\ub4e4\uc740 \uc9c1\uc811\uc801\uc73c\ub85c\ub294 \uc798 \uc0ac\uc6a9\ub418\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \uc774 \uc0c1\ud0dc \ucf54\ub4dc\ub97c \uac16\ub294 \uc751\ub2f5\ub4e4\uc740 \ubcf8\ubb38\uc744 \uac00\uc9c8 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. **2xx** \uc0c1\ud0dc \ucf54\ub4dc\ub294 \"\uc131\uacf5\uc801\uc778\" \uc751\ub2f5\uc744 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \uc720\ud615\uc785\ub2c8\ub2e4. 200 \uc740 \ub514\ud3f4\ud2b8 \uc0c1\ud0dc \ucf54\ub4dc\ub85c, \ubaa8\ub4e0 \uac83\uc774 \"\uc131\uacf5\uc801\uc784\"\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub2e4\ub978 \uc608\ub85c\ub294 201 \"\uc0dd\uc131\ub428\"\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc0c8\ub85c\uc6b4 \ub808\ucf54\ub4dc\ub97c \uc0dd\uc131\ud55c \ud6c4 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub2e8, 204 \"\ub0b4\uc6a9 \uc5c6\uc74c\"\uc740 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \ubc18\ud658\ud560 \ub0b4\uc6a9\uc774 \uc5c6\ub294 \uacbd\uc6b0 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc751\ub2f5\uc740 \ubcf8\ubb38\uc744 \uac00\uc9c8 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. **3xx** \uc0c1\ud0dc \ucf54\ub4dc\ub294 \"\ub9ac\ub2e4\uc774\ub809\uc158\"\uc6a9\uc785\ub2c8\ub2e4. \ubcf8\ubb38\uc744 \uac00\uc9c8 \uc218 \uc5c6\ub294 304 \"\uc218\uc815\ub418\uc9c0 \uc54a\uc74c\"\uc744 \uc81c\uc678\ud558\uace0, \uc774 \uc0c1\ud0dc \ucf54\ub4dc\ub97c \uac16\ub294 \uc751\ub2f5\uc5d0\ub294 \ubcf8\ubb38\uc774 \uc788\uc744 \uc218\ub3c4, \uc5c6\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. **4xx** \uc0c1\ud0dc \ucf54\ub4dc\ub294 \"\ud074\ub77c\uc774\uc5b8\ud2b8 \uc624\ub958\" \uc751\ub2f5\uc744 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc774\uac83\uc740 \uc544\ub9c8 \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ud558\uac8c \ub420 \ub450\ubc88\uc9f8 \uc720\ud615\uc785\ub2c8\ub2e4. \uc77c\ub840\ub85c 404 \ub294 \"\ucc3e\uc744 \uc218 \uc5c6\uc74c\" \uc751\ub2f5\uc744 \uc704\ud574 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc778 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc624\ub958\uc758 \uacbd\uc6b0 400 \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. **5xx** \uc0c1\ud0dc \ucf54\ub4dc\ub294 \uc11c\ubc84 \uc624\ub958\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc774\uac83\ub4e4\uc744 \uc9c1\uc811 \uc0ac\uc6a9\ud560 \uc77c\uc740 \uac70\uc758 \uc5c6\uc2b5\ub2c8\ub2e4. \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 \ucf54\ub4dc\ub098 \uc11c\ubc84\uc758 \uc77c\ubd80\uc5d0\uc11c \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud558\uba74 \uc790\ub3d9\uc73c\ub85c \uc774\ub4e4 \uc0c1\ud0dc \ucf54\ub4dc \uc911 \ud558\ub098\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \ud301 \uac01\uac01\uc758 \uc0c1\ud0dc \ucf54\ub4dc\uc640 \uc774\ub4e4\uc774 \uc758\ubbf8\ud558\ub294 \ub0b4\uc6a9\uc5d0 \ub300\ud574 \ub354 \uc54c\uace0\uc2f6\ub2e4\uba74 MDN HTTP \uc0c1\ud0dc \ucf54\ub4dc\uc5d0 \uad00\ud55c \ubb38\uc11c \ub97c \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \uc774\ub984\uc744 \uae30\uc5b5\ud558\ub294 \uc26c\uc6b4 \ubc29\ubc95 \u00b6 \uc0c1\uae30 \uc608\uc2dc \ucc38\uace0: from fastapi import FastAPI app = FastAPI () @app . post ( \"/items/\" , status_code = 201 ) async def create_item ( name : str ): return { \"name\" : name } 201 \uc740 \"\uc0dd\uc131\ub428\"\ub97c \uc758\ubbf8\ud558\ub294 \uc0c1\ud0dc \ucf54\ub4dc\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ubaa8\ub4e0 \uc0c1\ud0dc \ucf54\ub4dc\ub4e4\uc774 \ubb34\uc5c7\uc744 \uc758\ubbf8\ud558\ub294\uc9c0 \uc678\uc6b8 \ud544\uc694\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. fastapi.status \uc758 \ud3b8\uc758 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , status app = FastAPI () @app . post ( \"/items/\" , status_code = status . HTTP_201_CREATED ) async def create_item ( name : str ): return { \"name\" : name } \uc774\uac83\uc740 \ub2e8\uc21c\ud788 \uc791\uc5c5\uc744 \ud3b8\ub9ac\ud558\uac8c \ud558\uae30 \uc704\ud55c \uac83\uc73c\ub85c, HTTP \uc0c1\ud0dc \ucf54\ub4dc\uc640 \ub3d9\uc77c\ud55c \ubc88\ud638\ub97c \uac16\uace0\uc788\uc9c0\ub9cc, \uc774\ub97c \uc0ac\uc6a9\ud558\uba74 \ud3b8\uc9d1\uae30\uc758 \uc790\ub3d9\uc644\uc131 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d from starlette import status \uc5ed\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac1c\ubc1c\uc790\uc778 \ub2f9\uc2e0\uc758 \ud3b8\uc758\ub97c \uc704\ud574 fastapi.status \uc640 \ub3d9\uc77c\ud55c starlette.status \ub3c4 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc740 Starlette\ub85c\ubd80\ud130 \uc9c1\uc811 \uc81c\uacf5\ub429\ub2c8\ub2e4. \uae30\ubcf8\uac12 \ubcc0\uacbd \u00b6 \ucd94\ud6c4 \uc5ec\uae30\uc11c \uc120\uc5b8\ud558\ub294 \uae30\ubcf8 \uc0c1\ud0dc \ucf54\ub4dc\uac00 \uc544\ub2cc \ub2e4\ub978 \uc0c1\ud0dc \ucf54\ub4dc\ub97c \ubc18\ud658\ud558\ub294 \ubc29\ubc95\uc744 \uc219\ub828\ub41c \uc0ac\uc6a9\uc790 \uc9c0\uce68\uc11c \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc751\ub2f5 \uc0c1\ud0dc \ucf54\ub4dc"},{"location":"tutorial/response-status-code/#_1","text":"\uc751\ub2f5 \ubaa8\ub378\uacfc \uac19\uc740 \ubc29\ubc95\uc73c\ub85c, \uc5b4\ub5a4 \uacbd\ub85c \uc791\ub3d9 \uc774\ub4e0 status_code \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc751\ub2f5\uc5d0 \ub300\ud55c HTTP \uc0c1\ud0dc \ucf54\ub4dc\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. @app.get() @app.post() @app.put() @app.delete() \uae30\ud0c0 from fastapi import FastAPI app = FastAPI () @app . post ( \"/items/\" , status_code = 201 ) async def create_item ( name : str ): return { \"name\" : name } \ucc38\uace0 status_code \ub294 \"\ub370\ucf54\ub808\uc774\ud130\" \uba54\uc18c\ub4dc( get , post \ub4f1)\uc758 \ub9e4\uac1c\ubcc0\uc218\uc785\ub2c8\ub2e4. \ubaa8\ub4e0 \ub9e4\uac1c\ubcc0\uc218\ub4e4\uacfc \ubcf8\ubb38\ucc98\ub7fc \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uac00 \uc544\ub2d9\ub2c8\ub2e4. status_code \ub9e4\uac1c\ubcc0\uc218\ub294 HTTP \uc0c1\ud0dc \ucf54\ub4dc\ub97c \uc22b\uc790\ub85c \uc785\ub825\ubc1b\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 status_code \ub294 \ud30c\uc774\uc36c\uc758 http.HTTPStatus \uc640 \uac19\uc740 IntEnum \uc744 \uc785\ub825\ubc1b\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. status_code \ub9e4\uac1c\ubcc0\uc218\ub294: \uc751\ub2f5\uc5d0\uc11c \ud574\ub2f9 \uc0c1\ud0dc \ucf54\ub4dc\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uc0c1\ud0dc \ucf54\ub4dc\ub97c OpenAPI \uc2a4\ud0a4\ub9c8(\ubc0f \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4)\uc5d0 \ubb38\uc11c\ud654 \ud569\ub2c8\ub2e4. \ucc38\uace0 \uc5b4\ub5a4 \uc751\ub2f5 \ucf54\ub4dc\ub4e4\uc740 \ud574\ub2f9 \uc751\ub2f5\uc5d0 \ubcf8\ubb38\uc774 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud558\uae30\ub3c4 \ud569\ub2c8\ub2e4 (\ub2e4\uc74c \ud56d\ubaa9 \ucc38\uace0). \uc774\uc5d0 \ub530\ub77c FastAPI\ub294 \uc751\ub2f5 \ubcf8\ubb38\uc774 \uc5c6\uc74c\uc744 \uba85\uc2dc\ud558\ub294 OpenAPI\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.","title":"\uc751\ub2f5 \uc0c1\ud0dc \ucf54\ub4dc"},{"location":"tutorial/response-status-code/#http","text":"\ucc38\uace0 \ub9cc\uc57d HTTP \uc0c1\ud0dc \ucf54\ub4dc\uc5d0 \ub300\ud558\uc5ec \uc774\ubbf8 \uc54c\uace0\uc788\ub2e4\uba74, \ub2e4\uc74c \ud56d\ubaa9\uc73c\ub85c \ub118\uc5b4\uac00\uc2ed\uc2dc\uc624. HTTP\ub294 \uc138\uc790\ub9ac\uc758 \uc22b\uc790 \uc0c1\ud0dc \ucf54\ub4dc\ub97c \uc751\ub2f5\uc758 \uc77c\ubd80\ub85c \uc804\uc1a1\ud569\ub2c8\ub2e4. \uc774 \uc0c1\ud0dc \ucf54\ub4dc\ub4e4\uc740 \uac01\uc790\ub97c \uc2dd\ubcc4\ud560 \uc218 \uc788\ub3c4\ub85d \uc9c0\uc815\ub41c \uc774\ub984\uc774 \uc788\uc73c\ub098, \uc911\uc694\ud55c \uac83\uc740 \uc22b\uc790 \ucf54\ub4dc\uc785\ub2c8\ub2e4. \uc694\uc57d\ud558\uc790\uba74: **1xx** \uc0c1\ud0dc \ucf54\ub4dc\ub294 \"\uc815\ubcf4\"\uc6a9\uc785\ub2c8\ub2e4. \uc774\ub4e4\uc740 \uc9c1\uc811\uc801\uc73c\ub85c\ub294 \uc798 \uc0ac\uc6a9\ub418\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \uc774 \uc0c1\ud0dc \ucf54\ub4dc\ub97c \uac16\ub294 \uc751\ub2f5\ub4e4\uc740 \ubcf8\ubb38\uc744 \uac00\uc9c8 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. **2xx** \uc0c1\ud0dc \ucf54\ub4dc\ub294 \"\uc131\uacf5\uc801\uc778\" \uc751\ub2f5\uc744 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \uc720\ud615\uc785\ub2c8\ub2e4. 200 \uc740 \ub514\ud3f4\ud2b8 \uc0c1\ud0dc \ucf54\ub4dc\ub85c, \ubaa8\ub4e0 \uac83\uc774 \"\uc131\uacf5\uc801\uc784\"\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub2e4\ub978 \uc608\ub85c\ub294 201 \"\uc0dd\uc131\ub428\"\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \uc0c8\ub85c\uc6b4 \ub808\ucf54\ub4dc\ub97c \uc0dd\uc131\ud55c \ud6c4 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub2e8, 204 \"\ub0b4\uc6a9 \uc5c6\uc74c\"\uc740 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \ubc18\ud658\ud560 \ub0b4\uc6a9\uc774 \uc5c6\ub294 \uacbd\uc6b0 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc751\ub2f5\uc740 \ubcf8\ubb38\uc744 \uac00\uc9c8 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. **3xx** \uc0c1\ud0dc \ucf54\ub4dc\ub294 \"\ub9ac\ub2e4\uc774\ub809\uc158\"\uc6a9\uc785\ub2c8\ub2e4. \ubcf8\ubb38\uc744 \uac00\uc9c8 \uc218 \uc5c6\ub294 304 \"\uc218\uc815\ub418\uc9c0 \uc54a\uc74c\"\uc744 \uc81c\uc678\ud558\uace0, \uc774 \uc0c1\ud0dc \ucf54\ub4dc\ub97c \uac16\ub294 \uc751\ub2f5\uc5d0\ub294 \ubcf8\ubb38\uc774 \uc788\uc744 \uc218\ub3c4, \uc5c6\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. **4xx** \uc0c1\ud0dc \ucf54\ub4dc\ub294 \"\ud074\ub77c\uc774\uc5b8\ud2b8 \uc624\ub958\" \uc751\ub2f5\uc744 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc774\uac83\uc740 \uc544\ub9c8 \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ud558\uac8c \ub420 \ub450\ubc88\uc9f8 \uc720\ud615\uc785\ub2c8\ub2e4. \uc77c\ub840\ub85c 404 \ub294 \"\ucc3e\uc744 \uc218 \uc5c6\uc74c\" \uc751\ub2f5\uc744 \uc704\ud574 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc778 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc624\ub958\uc758 \uacbd\uc6b0 400 \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. **5xx** \uc0c1\ud0dc \ucf54\ub4dc\ub294 \uc11c\ubc84 \uc624\ub958\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc774\uac83\ub4e4\uc744 \uc9c1\uc811 \uc0ac\uc6a9\ud560 \uc77c\uc740 \uac70\uc758 \uc5c6\uc2b5\ub2c8\ub2e4. \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 \ucf54\ub4dc\ub098 \uc11c\ubc84\uc758 \uc77c\ubd80\uc5d0\uc11c \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud558\uba74 \uc790\ub3d9\uc73c\ub85c \uc774\ub4e4 \uc0c1\ud0dc \ucf54\ub4dc \uc911 \ud558\ub098\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \ud301 \uac01\uac01\uc758 \uc0c1\ud0dc \ucf54\ub4dc\uc640 \uc774\ub4e4\uc774 \uc758\ubbf8\ud558\ub294 \ub0b4\uc6a9\uc5d0 \ub300\ud574 \ub354 \uc54c\uace0\uc2f6\ub2e4\uba74 MDN HTTP \uc0c1\ud0dc \ucf54\ub4dc\uc5d0 \uad00\ud55c \ubb38\uc11c \ub97c \ud655\uc778\ud558\uc2ed\uc2dc\uc624.","title":"HTTP \uc0c1\ud0dc \ucf54\ub4dc\uc5d0 \ub300\ud558\uc5ec"},{"location":"tutorial/response-status-code/#_2","text":"\uc0c1\uae30 \uc608\uc2dc \ucc38\uace0: from fastapi import FastAPI app = FastAPI () @app . post ( \"/items/\" , status_code = 201 ) async def create_item ( name : str ): return { \"name\" : name } 201 \uc740 \"\uc0dd\uc131\ub428\"\ub97c \uc758\ubbf8\ud558\ub294 \uc0c1\ud0dc \ucf54\ub4dc\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ubaa8\ub4e0 \uc0c1\ud0dc \ucf54\ub4dc\ub4e4\uc774 \ubb34\uc5c7\uc744 \uc758\ubbf8\ud558\ub294\uc9c0 \uc678\uc6b8 \ud544\uc694\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. fastapi.status \uc758 \ud3b8\uc758 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI , status app = FastAPI () @app . post ( \"/items/\" , status_code = status . HTTP_201_CREATED ) async def create_item ( name : str ): return { \"name\" : name } \uc774\uac83\uc740 \ub2e8\uc21c\ud788 \uc791\uc5c5\uc744 \ud3b8\ub9ac\ud558\uac8c \ud558\uae30 \uc704\ud55c \uac83\uc73c\ub85c, HTTP \uc0c1\ud0dc \ucf54\ub4dc\uc640 \ub3d9\uc77c\ud55c \ubc88\ud638\ub97c \uac16\uace0\uc788\uc9c0\ub9cc, \uc774\ub97c \uc0ac\uc6a9\ud558\uba74 \ud3b8\uc9d1\uae30\uc758 \uc790\ub3d9\uc644\uc131 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d from starlette import status \uc5ed\uc2dc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac1c\ubc1c\uc790\uc778 \ub2f9\uc2e0\uc758 \ud3b8\uc758\ub97c \uc704\ud574 fastapi.status \uc640 \ub3d9\uc77c\ud55c starlette.status \ub3c4 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\uac83\uc740 Starlette\ub85c\ubd80\ud130 \uc9c1\uc811 \uc81c\uacf5\ub429\ub2c8\ub2e4.","title":"\uc774\ub984\uc744 \uae30\uc5b5\ud558\ub294 \uc26c\uc6b4 \ubc29\ubc95"},{"location":"tutorial/response-status-code/#_3","text":"\ucd94\ud6c4 \uc5ec\uae30\uc11c \uc120\uc5b8\ud558\ub294 \uae30\ubcf8 \uc0c1\ud0dc \ucf54\ub4dc\uac00 \uc544\ub2cc \ub2e4\ub978 \uc0c1\ud0dc \ucf54\ub4dc\ub97c \ubc18\ud658\ud558\ub294 \ubc29\ubc95\uc744 \uc219\ub828\ub41c \uc0ac\uc6a9\uc790 \uc9c0\uce68\uc11c \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uae30\ubcf8\uac12 \ubcc0\uacbd"},{"location":"tutorial/schema-extra-example/","text":"\ucd94\uac00 \uc2a4\ud0a4\ub9c8(Schema-Extra) - \uc608\uc2dc \u00b6 JSON \uc2a4\ud0a4\ub9c8\uc5d0 \ub4e4\uc5b4\uac08 \ucd94\uac00 \uc815\ubcf4\ub97c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud754\ud55c \ud65c\uc6a9 \uc0ac\ub840\ub294 \ubb38\uc11c\uc5d0 \ubcf4\uc5ec\uc9c8 example \uc744 \ucd94\uac00\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ucd94\uac00\uc801\uc778 JSON \uc2a4\ud0a4\ub9c8 \uc815\ubcf4\ub97c \uc120\uc5b8\ud558\ub294 \uc5ec\ub7ec\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. Pydantic schema_extra \u00b6 Pydantic\uc758 \ubb38\uc11c: \uc2a4\ud0a4\ub9c8 \ub9de\ucda4\ud654 \uc5d0\uc11c \uc124\uba85\ub418\uc5b4 \uc788\ub294 \uac83\uacfc \uac19\uc774 Config \uc640 schema_extra \ub97c \uc0ac\uc6a9\ud558\uc5ec Pydantic \ubaa8\ub378\uc758 \uc608\uc2dc\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class Config : schema_extra = { \"example\" : { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , } } @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \uadf8 \ucd94\uac00 \uc815\ubcf4\ub294 \ud604\uc7ac \uc0c1\ud0dc \uadf8\ub300\ub85c JSON \uc2a4\ud0a4\ub9c8 \ucd9c\ub825\uc5d0 \ucd94\uac00\ub420 \uac83\uc785\ub2c8\ub2e4. Field \ucd94\uac00\uc801\uc778 \uc778\uc790\ub4e4(arguments) \u00b6 Field , Path , Query , Body \ubc0f \ub098\uc911\uc5d0 \ubcf4\uac8c \ub420 \uac83\ub4e4\uc5d0\uc11c, \ub2e4\ub978 \uc5b4\ub5a4 \uc784\uc758\uc758 \uc778\uc790(arguments)\ub97c \ud568\uc218\uc5d0 \uc804\ub2ec\ud568\uc73c\ub85c\uc368 JSON \uc2a4\ud0a4\ub9c8\uc5d0 \ucd94\uac00 \uc815\ubcf4\ub97c \uc120\uc5b8\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74, example \uc744 \ucd94\uac00\ud558\ub294 \uac83\uacfc \uac19\uc774 \ub9d0\uc785\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str = Field ( example = \"Foo\" ) description : Union [ str , None ] = Field ( default = None , example = \"A very nice Item\" ) price : float = Field ( example = 35.4 ) tax : Union [ float , None ] = Field ( default = None , example = 3.2 ) @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \uc8fc\uc758 \uc804\ub2ec\ub41c \ucd94\uac00 \uc778\uc790\ub4e4\uc740 \uadf8 \uc5b4\ub5a4 \uac80\uc99d(validation)\uc744 \ucd94\uac00\ud558\uc9c0 \uc54a\uc73c\uba70 \uc624\ub85c\uc9c0 \ubb38\uc11c\ud654 \ubaa9\uc801\uc73c\ub85c \uc5b4\ub178\ud14c\uc774\uc158\ub9cc \ucd94\uac00\ud568\uc744 \uba85\uc2ec\ud558\uc2ed\uc2dc\uc624. Body \ucd94\uac00\uc801\uc778 \uc778\uc790\ub4e4 \u00b6 Field \uc5d0 \ucd94\uac00 \uc815\ubcf4\ub97c \uc804\ub2ec\ud560 \uc218 \uc788\ub294 \uac83\uacfc \uac19\uc740 \ubc29\ubc95\uc73c\ub85c, Path , Query , Body , \ub4f1\uc5d0 \ub300\ud574\uc11c\ub3c4 \ub3d9\uc77c\ud558\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74, \ubc14\ub514 \uc694\uccad\uc5d0 \ub300\ud574 example \uc744 Body \uc5d0 \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( example = { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , }, ), ): results = { \"item_id\" : item_id , \"item\" : item } return results \ubb38\uc11c UI\uc5d0\uc11c\uc758 \uc608\uc2dc \u00b6 \uc704\uc758 \uc5b4\ub5a4 \ubc29\ubc95\uc73c\ub85c\ub4e0 /docs \uc5d0\uc11c\ub294 \uc774\ub807\uac8c \ubcf4\uc77c \uac83\uc785\ub2c8\ub2e4: \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d \u00b6 example \uacfc examples \uc5d0 \ub300\ud558\uc5ec... JSON \uc2a4\ud0a4\ub9c8\ub294 \uac00\uc7a5 \ucd5c\uc2e0 \ubc84\uc804\uc5d0\uc11c \ud544\ub4dc examples \uc744 \uc815\uc758\ud558\uc9c0\ub9cc, OPEN API\ub294 examples \uac00 \uc5c6\ub294 JSON \uc2a4\ud0a4\ub9c8\uc758 \uc774\uc804 \ubc84\uc804\uc5d0 \uae30\ubc18\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c, OPEN API\ub294 ( examples \uac00 \uc544\ub2c8\ub77c example \uacfc) \ub3d9\uc77c\ud55c \ubaa9\uc801\uc73c\ub85c \uc790\uccb4\uc801\uc778 example \uc744 \uc815\uc758\ud558\uba70, \uadf8\uac83\uc774 \ubb38\uc11c UI\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uac83\uc785\ub2c8\ub2e4(\uc2a4\uc6e8\uac70 UI \uc0ac\uc6a9). \uadf8\ub798\uc11c, \ube44\ub85d example \uc740 JSON \uc2a4\ud0a4\ub9c8\uc758 \uc77c\ubd80\ub294 \uc544\ub2c8\uc9c0\ub9cc, \uadf8\uac83\uc740 OPEN API\uc758 \uc77c\ubd80\ubd84\uc774\uace0, \uadf8\uac83\uc774 \ubc14\ub85c \ubb38\uc11c UI\uc5d0\uc11c \uc0ac\uc6a9\ub420 \uac83\uc785\ub2c8\ub2e4. \ub2e4\ub978 \uc815\ubcf4 \u00b6 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c, \uac01 \ubaa8\ub378\uc5d0 \ub300\ud55c JSON \uc2a4\ud0a4\ub9c8\uc5d0 \ucd94\uac00\ub420 \ub2f9\uc2e0\ub9cc\uc758 \ub9de\ucda4\ud615 \ucd94\uac00 \uc815\ubcf4\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4, \uc608\ub97c \ub4e4\uba74 \ud504\ub860\ud2b8\uc5d4\ub4dc \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ub9de\ucda4\ud654(\ucee4\uc2a4\ud130\ub9c8\uc774\uc988)\ud558\ub294 \uac83 \ub4f1 \uc785\ub2c8\ub2e4.","title":"\ucd94\uac00 \uc2a4\ud0a4\ub9c8(Schema-Extra) - \uc608\uc2dc"},{"location":"tutorial/schema-extra-example/#schema-extra-","text":"JSON \uc2a4\ud0a4\ub9c8\uc5d0 \ub4e4\uc5b4\uac08 \ucd94\uac00 \uc815\ubcf4\ub97c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud754\ud55c \ud65c\uc6a9 \uc0ac\ub840\ub294 \ubb38\uc11c\uc5d0 \ubcf4\uc5ec\uc9c8 example \uc744 \ucd94\uac00\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ucd94\uac00\uc801\uc778 JSON \uc2a4\ud0a4\ub9c8 \uc815\ubcf4\ub97c \uc120\uc5b8\ud558\ub294 \uc5ec\ub7ec\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ucd94\uac00 \uc2a4\ud0a4\ub9c8(Schema-Extra) - \uc608\uc2dc"},{"location":"tutorial/schema-extra-example/#pydantic-schema_extra","text":"Pydantic\uc758 \ubb38\uc11c: \uc2a4\ud0a4\ub9c8 \ub9de\ucda4\ud654 \uc5d0\uc11c \uc124\uba85\ub418\uc5b4 \uc788\ub294 \uac83\uacfc \uac19\uc774 Config \uc640 schema_extra \ub97c \uc0ac\uc6a9\ud558\uc5ec Pydantic \ubaa8\ub378\uc758 \uc608\uc2dc\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class Config : schema_extra = { \"example\" : { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , } } @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \uadf8 \ucd94\uac00 \uc815\ubcf4\ub294 \ud604\uc7ac \uc0c1\ud0dc \uadf8\ub300\ub85c JSON \uc2a4\ud0a4\ub9c8 \ucd9c\ub825\uc5d0 \ucd94\uac00\ub420 \uac83\uc785\ub2c8\ub2e4.","title":"Pydantic schema_extra"},{"location":"tutorial/schema-extra-example/#field-arguments","text":"Field , Path , Query , Body \ubc0f \ub098\uc911\uc5d0 \ubcf4\uac8c \ub420 \uac83\ub4e4\uc5d0\uc11c, \ub2e4\ub978 \uc5b4\ub5a4 \uc784\uc758\uc758 \uc778\uc790(arguments)\ub97c \ud568\uc218\uc5d0 \uc804\ub2ec\ud568\uc73c\ub85c\uc368 JSON \uc2a4\ud0a4\ub9c8\uc5d0 \ucd94\uac00 \uc815\ubcf4\ub97c \uc120\uc5b8\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74, example \uc744 \ucd94\uac00\ud558\ub294 \uac83\uacfc \uac19\uc774 \ub9d0\uc785\ub2c8\ub2e4: from typing import Union from fastapi import FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str = Field ( example = \"Foo\" ) description : Union [ str , None ] = Field ( default = None , example = \"A very nice Item\" ) price : float = Field ( example = 35.4 ) tax : Union [ float , None ] = Field ( default = None , example = 3.2 ) @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \uc8fc\uc758 \uc804\ub2ec\ub41c \ucd94\uac00 \uc778\uc790\ub4e4\uc740 \uadf8 \uc5b4\ub5a4 \uac80\uc99d(validation)\uc744 \ucd94\uac00\ud558\uc9c0 \uc54a\uc73c\uba70 \uc624\ub85c\uc9c0 \ubb38\uc11c\ud654 \ubaa9\uc801\uc73c\ub85c \uc5b4\ub178\ud14c\uc774\uc158\ub9cc \ucd94\uac00\ud568\uc744 \uba85\uc2ec\ud558\uc2ed\uc2dc\uc624.","title":"Field \ucd94\uac00\uc801\uc778 \uc778\uc790\ub4e4(arguments)"},{"location":"tutorial/schema-extra-example/#body","text":"Field \uc5d0 \ucd94\uac00 \uc815\ubcf4\ub97c \uc804\ub2ec\ud560 \uc218 \uc788\ub294 \uac83\uacfc \uac19\uc740 \ubc29\ubc95\uc73c\ub85c, Path , Query , Body , \ub4f1\uc5d0 \ub300\ud574\uc11c\ub3c4 \ub3d9\uc77c\ud558\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74, \ubc14\ub514 \uc694\uccad\uc5d0 \ub300\ud574 example \uc744 Body \uc5d0 \uc804\ub2ec\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( example = { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , }, ), ): results = { \"item_id\" : item_id , \"item\" : item } return results","title":"Body \ucd94\uac00\uc801\uc778 \uc778\uc790\ub4e4"},{"location":"tutorial/schema-extra-example/#ui","text":"\uc704\uc758 \uc5b4\ub5a4 \ubc29\ubc95\uc73c\ub85c\ub4e0 /docs \uc5d0\uc11c\ub294 \uc774\ub807\uac8c \ubcf4\uc77c \uac83\uc785\ub2c8\ub2e4:","title":"\ubb38\uc11c UI\uc5d0\uc11c\uc758 \uc608\uc2dc"},{"location":"tutorial/schema-extra-example/#_1","text":"example \uacfc examples \uc5d0 \ub300\ud558\uc5ec... JSON \uc2a4\ud0a4\ub9c8\ub294 \uac00\uc7a5 \ucd5c\uc2e0 \ubc84\uc804\uc5d0\uc11c \ud544\ub4dc examples \uc744 \uc815\uc758\ud558\uc9c0\ub9cc, OPEN API\ub294 examples \uac00 \uc5c6\ub294 JSON \uc2a4\ud0a4\ub9c8\uc758 \uc774\uc804 \ubc84\uc804\uc5d0 \uae30\ubc18\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c, OPEN API\ub294 ( examples \uac00 \uc544\ub2c8\ub77c example \uacfc) \ub3d9\uc77c\ud55c \ubaa9\uc801\uc73c\ub85c \uc790\uccb4\uc801\uc778 example \uc744 \uc815\uc758\ud558\uba70, \uadf8\uac83\uc774 \ubb38\uc11c UI\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uac83\uc785\ub2c8\ub2e4(\uc2a4\uc6e8\uac70 UI \uc0ac\uc6a9). \uadf8\ub798\uc11c, \ube44\ub85d example \uc740 JSON \uc2a4\ud0a4\ub9c8\uc758 \uc77c\ubd80\ub294 \uc544\ub2c8\uc9c0\ub9cc, \uadf8\uac83\uc740 OPEN API\uc758 \uc77c\ubd80\ubd84\uc774\uace0, \uadf8\uac83\uc774 \ubc14\ub85c \ubb38\uc11c UI\uc5d0\uc11c \uc0ac\uc6a9\ub420 \uac83\uc785\ub2c8\ub2e4.","title":"\uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d"},{"location":"tutorial/schema-extra-example/#_2","text":"\uac19\uc740 \ubc29\uc2dd\uc73c\ub85c, \uac01 \ubaa8\ub378\uc5d0 \ub300\ud55c JSON \uc2a4\ud0a4\ub9c8\uc5d0 \ucd94\uac00\ub420 \ub2f9\uc2e0\ub9cc\uc758 \ub9de\ucda4\ud615 \ucd94\uac00 \uc815\ubcf4\ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4, \uc608\ub97c \ub4e4\uba74 \ud504\ub860\ud2b8\uc5d4\ub4dc \uc0ac\uc6a9\uc790 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ub9de\ucda4\ud654(\ucee4\uc2a4\ud130\ub9c8\uc774\uc988)\ud558\ub294 \uac83 \ub4f1 \uc785\ub2c8\ub2e4.","title":"\ub2e4\ub978 \uc815\ubcf4"},{"location":"tutorial/sql-databases/","text":"SQL (\uad00\uacc4\ud615) \ub370\uc774\ud130\ubca0\uc774\uc2a4 \u00b6 FastAPI \uc5d0\uc11c \ubc18\ub4dc\uc2dc SQL(\uad00\uacc4\ud615) \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud574\uc57c\ud558\ub294 \uac83\uc740 \uc544\ub2d9\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc6d0\ud55c\ub2e4\uba74 \uc5b4\ub5a4 \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub3c4 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 SQLAlchemy \ub97c \uc0ac\uc6a9\ud55c \uc608\uc2dc\ub97c \ubcf4\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4. SQLAlchemy\uac00 \uc9c0\uc6d0\ud558\ub294 \uc5b4\ub290 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub4e0 \uc27d\uac8c \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: PostgreSQL MySQL SQLite Oracle Microsoft SQL Server \ub4f1. \ud558\ub098\uc758 \ud30c\uc77c\uc744 \uc0ac\uc6a9\ud558\uace0 \ud30c\uc774\uc36c\uc774 \ud1b5\ud569\ub41c \uc9c0\uc6d0\uc744 \uc81c\uacf5\ud558\uae30 \ub54c\ubb38\uc5d0, \uc774 \uc608\uc2dc\uc5d0\uc11c\ub294 SQLite \ub97c \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub3d9 \uc608\uc2dc\ub97c \ubcf5\uc0ac\ud574\uc11c \uadf8\ub300\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucd94\ud6c4 \ud504\ub85c\ub355\uc158\uc6a9 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\ub294 PostgreSQL \uacfc \uac19\uc740 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc11c\ubc84\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud301 \ub3c4\ucee4 \ub97c \uae30\ubc18\uc73c\ub85c \ud558\uace0, \ud504\ub860\ud2b8\uc5d4\ub4dc\uc640 \ub9ce\uc740 \ub3c4\uad6c\ub4e4\uc744 \ud3ec\ud568\ud55c FastAPI \ubc0f PostgreSQL \uc744 \uc0ac\uc6a9\ud558\ub294 \uacf5\uc2dd\uc801\uc778 \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131\uae30\uac00 \uc788\uc2b5\ub2c8\ub2e4: https://github.com/tiangolo/full-stack-fastapi-postgresql \ucc38\uace0 \ub300\ubd80\ubd84\uc758 \ucf54\ub4dc\ub294 \ubaa8\ub4e0 \ud504\ub808\uc784\uc6cc\ud06c\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ud45c\uc900 SQLAlchemy \ucf54\ub4dc\uc785\ub2c8\ub2e4. FastAPI \ud2b9\uc815 \ucf54\ub4dc\ub294 \uc5b8\uc81c\ub098 \uadf8\ub807\ub4ef \ub9ce\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. ORM(\uac1d\uccb4 \uad00\uacc4 \ub9e4\ud551) \u00b6 FastAPI \ub294 \ubaa8\ub4e0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc0f \ubaa8\ub4e0 \uc2a4\ud0c0\uc77c\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \ub3d9\uc791\ud558\uba70 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \ud1b5\uc2e0\ud569\ub2c8\ub2e4. \ud754\ud55c \ud328\ud134 \uc911 \ud558\ub098\ub294 \"\uac1d\uccb4 \uad00\uacc4 \ub9e4\ud551(ORM, object-relational mapping \ub77c\uc774\ube0c\ub7ec\ub9ac)\"\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. ORM\uc5d0\ub294 \ucf54\ub4dc\uc758 \uac1d\uccb4 ( object )\uc640 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14( \"\uad00\uacc4: relation\" )\uac04 \ubcc0\ud658( \"\ub9e4\ud551: mapping\" )\uc744 \ud558\ub294 \ub3c4\uad6c\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. ORM\uc744 \uc0ac\uc6a9\ud558\uc5ec, SQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc758 \ud14c\uc774\ube14\uc744 \ub098\ud0c0\ub0b4\ub294 \ud074\ub798\uc2a4\uc640, \uc774\ub984\uacfc \ud615\uc744 \uac00\uc9c4 \uc5f4\uc744 \ub098\ud0c0\ub0b4\ub294 \ud574\ub2f9 \ud074\ub798\uc2a4\uc758 \uac01 \uc18d\uc131\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc608\ub97c\ub4e4\uc5b4 \ud074\ub798\uc2a4 Pet \uc740 SQL \ud14c\uc774\ube14 pets \uc744 \ub098\ud0c0\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud574\ub2f9 \ud074\ub798\uc2a4\uc758 \uac01 \uc778\uc2a4\ud134\uc2a4 \uac1d\uccb4\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc758 \ud589\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc608\ub97c\ub4e4\uc5b4 Pet \uc758 \uc778\uc2a4\ud134\uc2a4\uc778 orion_cat \uac1d\uccb4\ub294 type \uc5f4\uc5d0 \ub300\ud574 orion_cat.type \uc18d\uc131\uc744 \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc18d\uc131\uc758 \uac12\uc740 \uc77c\ub840\ub85c, \"cat\" \uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c ORM\uc5d0\ub294 \ud14c\uc774\ube14 \ub610\ub294 \uac1c\uccb4 \uc0ac\uc774\uc758 \uc5f0\uacb0\uc774\ub098 \uad00\uacc4\ub97c \uc0dd\uc131\ud558\ub294 \ub3c4\uad6c\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 orion_cat.owner \uc18d\uc131\uc744 \uac00\uc9c8 \uc218 \uc788\uc73c\uba70, owner(\uc8fc\uc778)\uc740 owners \ud14c\uc774\ube14\ub85c\ubd80\ud130 \uac00\uc838\uc628 pet(\ubc18\ub824\ub3d9\ubb3c)\uc758 owner(\uc8fc\uc778)\uc5d0 \ub300\ud55c \ub370\uc774\ud130\ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, orion_cat.owner.name \uc740 owners \ud14c\uc774\ube14\uc758 name \uc5d0\uc11c \uac00\uc838\uc628 \ubc18\ub824\ub3d9\ubb3c \uc8fc\uc778\uc758 \uc774\ub984\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \"Arquilian\" \uc640 \uac19\uc740 \uac12\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 ORM\uc740 \ubc18\ub824\ub3d9\ubb3c(pet) \uac1d\uccb4\uc5d0\uc11c \uc8fc\uc778(owners) \ud14c\uc774\ube14\ub85c \uc811\uadfc\ud558\ub824\uace0 \ud560 \ub54c \ud574\ub2f9 \ud14c\uc774\ube14\ub85c\ubd80\ud130 \uc815\ubcf4\ub97c \uc5bb\uae30 \uc704\ud55c \ubaa8\ub4e0 \uc791\uc5c5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 ORM\uc5d0\ub294 \ub2e4\uc74c\uc758 \uac83\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4: Django-ORM (Django \ud504\ub808\uc784\uc6cc\ud06c\uc758 \uc77c\ubd80), SQLAlchemy ORM(\ud504\ub808\uc784\uc6cc\ud06c\uc640 \ub3c5\ub9bd\uc801\uc778, SQLAlchemy\uc758 \uc77c\ubd80), Peewee(\ud504\ub808\uc784\uc6cc\ud06c\ub85c\ubd80\ud130 \ub3c5\ub9bd\uc801). \uc5ec\uae30\uc11c \uc6b0\ub9ac\ub294 SQLAlchemy ORM \uc744 \uc0ac\uc6a9\ud574 \uc791\uc5c5\ud558\ub294 \ubc29\ubc95\uc744 \uc0b4\ud3b4\ubcfc \uac83\uc785\ub2c8\ub2e4. \ube44\uc2b7\ud55c \ubc29\ubc95\uc73c\ub85c \ub2e4\ub978 \ubaa8\ub4e0 ORM\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud301 Peewee\ub97c \uc0ac\uc6a9\ud558\ub294 \ubb38\uc11c\ub3c4 \uc81c\uacf5\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc77c \uad6c\uc870 \u00b6 \uc774 \uc608\uc2dc\uc5d0\uc11c, \ub2e4\uc74c\uacfc \uac19\uc740 \uad6c\uc870\ub97c \uac00\uc9c4 sql_app \uc744 \ud558\uc704 \ub514\ub809\ud130\ub9ac\ub85c \uac16\ub294 my_super_project \ub77c\ub294 \ub514\ub809\ud130\ub9ac\uac00 \uc788\ub2e4\uace0 \uac00\uc815\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4: . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 models.py \u2514\u2500\u2500 schemas.py __init__.py \ub294 \ube48 \ud30c\uc77c\uc774\uc9c0\ub9cc, \ud30c\uc774\uc36c\uc5d0\uac8c sql_app \uacfc \uc774\uac83\uc758 \ubaa8\ub4e0 \ubaa8\ub4c8\ub4e4(\ud30c\uc774\uc36c \ud30c\uc77c\ub4e4)\uc774 \ud328\ud0a4\uc9c0\ub77c\ub294 \uac83\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. \uc774\uc81c \uac01\uac01\uc758 \ud30c\uc77c/\ubaa8\ub4c8\uc774 \uc5b4\ub5a4 \uc77c\uc744 \ud558\ub294\uc9c0 \ubd05\uc2dc\ub2e4. SQLAlchemy \ubd80\ubd84 \uc0dd\uc131 \u00b6 sql_app/database.py \ud30c\uc77c\uc744 \ubd05\uc2dc\ub2e4. SQLAlchemy \ubd80\ubd84 \uc784\ud3ec\ud2b8 \u00b6 from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () SQLAlchemy\uc744 \uc704\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 URL \uc0dd\uc131 \u00b6 from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () \uc774 \uc608\uc2dc\uc5d0\uc11c, SQLite \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \"\uc5f0\uacb0\"\ud569\ub2c8\ub2e4(SQLite \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud574 \ud30c\uc77c \uc5f4\uae30). \ud574\ub2f9 \ud30c\uc77c\uc740 sql_app.db \ud30c\uc77c\uacfc \ub3d9\uc77c\ud55c \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc704\uce58\ud560 \uac83\uc785\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9 \ubd80\ubd84\uc774 ./sql_app.db \uc778 \uc774\uc720\uc785\ub2c8\ub2e4. PostgreSQL \uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0, \ud558\uae30 \ud589\uc758 \uc8fc\uc11d \ucc98\ub9ac\ub97c \uc81c\uac70\ud558\uba74 \ub429\ub2c8\ub2e4. SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" \uadf8\ub9ac\uace0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub370\uc774\ud130 \ubc0f \uc790\uaca9\uc99d\uba85(credentials)\uc744 \uc870\uc815\ud558\uc138\uc694(MySQL, MariaDB, \uae30\ud0c0 \ub2e4\ub978 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub3c4 \ub3d9\uc77c). \ud301 \uc774\uac83\uc740 \ub2e4\ub978 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud558\uace0\uc790 \ud560 \ub54c \uc218\uc815\ud574\uc57c\ud558\ub294 \uc8fc\ub41c \ud589\uc785\ub2c8\ub2e4. SQLAlchemy engine \uc0dd\uc131 \u00b6 \uccab\ubc88\uc9f8\ub85c \ud574\uc57c\ud560 \uc77c\uc740 SQLAlchemy \"\uc5d4\uc9c4(engine)\"\uc744 \uc0dd\uc131\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ucd94\ud6c4 \ud574\ub2f9 engine \uc744 \ub2e4\ub978 \uacf3\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () \ucc38\uace0 \u00b6 \ub2e4\uc74c \uc778\uc218: connect_args = { \"check_same_thread\" : False } \ub294 SQLite \ub97c \uc0ac\uc6a9\ud560 \ub54c\ub9cc \ud544\uc694\ud569\ub2c8\ub2e4. \ub2e4\ub978 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c\ub294 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d \uae30\ubcf8\uc801\uc73c\ub85c SQLite\ub294 \uac01 \uc2a4\ub808\ub4dc\uac00 \ub3c5\ub9bd\uc801\uc778 \uc694\uccad\uc744 \ucc98\ub9ac\ud55c\ub2e4\uace0 \uac00\uc815\ud558\uace0, \ud558\ub098\uc758 \uc2a4\ub808\ub4dc\ub9cc \ud1b5\uc2e0\ud558\ub3c4\ub85d \ud5c8\uc6a9\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \uc11c\ub85c \ub2e4\ub978 \uc791\uc5c5(\uc11c\ub85c \ub2e4\ub978 \uc694\uccad)\uc5d0 \ub300\ud574 \ub73b\ud558\uc9c0 \uc54a\uac8c \ub3d9\uc77c\ud55c \uc5f0\uacb0\uc744 \uacf5\uc720\ud558\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc FastAPI\uc5d0\uc11c, \uc77c\ubc18\uc801\uc778 \ud568\uc218( def )\ub97c \uc0ac\uc6a9\ud558\uba74 \ub458 \uc774\uc0c1\uc758 \uc2a4\ub808\ub4dc\uac00 \ub3d9\uc77c\ud55c \uc694\uccad\uc5d0 \ub300\ud574 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \uc0c1\ud638\uc791\uc6a9\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\uace0, \ub530\ub77c\uc11c connect_args={\"check_same_thread\": False} \ub97c \uc0ac\uc6a9\ud574 SQLite\uac00 \uc774\uac83\uc744 \ud5c8\uc6a9\ud558\ub3c4\ub85d \uc124\uc815\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c, \uac01\uac01\uc758 \uc694\uccad\uc740 \uc758\uc874\uc131\uc5d0\uc11c \uc790\uccb4\uc801\uc778 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc138\uc158\uc744 \uac00\uc9c0\ubbc0\ub85c \uae30\ubcf8 \uba54\ucee4\ub2c8\uc998\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. SessionLocal \ud074\ub798\uc2a4 \uc0dd\uc131 \u00b6 SessionLocal \ud074\ub798\uc2a4\uc758 \uac01 \uc778\uc2a4\ud134\uc2a4\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. \ud074\ub798\uc2a4 \uc790\uccb4\ub294 \uc544\uc9c1 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc774 \uc544\ub2d9\ub2c8\ub2e4. \ud558\uc9c0\ub9cc SessionLocal \ud074\ub798\uc2a4\uc5d0 \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud558\uba74, \ud574\ub2f9 \uc778\uc2a4\ud134\uc2a4\ub294 \uc2e4\uc9c8\uc801\uc778 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc774 \ub429\ub2c8\ub2e4. SQLAlchemy\ub85c\ubd80\ud130 \uc784\ud3ec\ud2b8\ud558\ub294 Session \uacfc \uad6c\ubd84\ud558\uae30 \uc704\ud574 SessionLocal \uc774\ub77c\uace0 \uc774\ub984\uc744 \ubd99\uc600\uc2b5\ub2c8\ub2e4. SQLAlchemy\ub85c\ubd80\ud130 \uc784\ud3ec\ud2b8\ud558\ub294 Session \uc740 \ucd94\ud6c4 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. SessionLocal \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574, sessionmaker \ud568\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4: from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () Base \ud074\ub798\uc2a4 \uc0dd\uc131 \u00b6 \uc774\uc81c \ud074\ub798\uc2a4\ub97c \ubc18\ud658\ud558\uae30 \uc704\ud574 declarative_base() \ud568\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774\ud6c4 \uac01\uac01\uc758 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378 \ub610\ub294 \ud074\ub798\uc2a4(ORM \ubaa8\ub378)\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574 \ud574\ub2f9 \ud074\ub798\uc2a4\ub85c\ubd80\ud130 \uc0c1\uc18d\ubc1b\uc744 \uac83\uc785\ub2c8\ub2e4: from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378 \uc0dd\uc131 \u00b6 sql_app/models.py \ud30c\uc77c\uc744 \ubd05\uc2dc\ub2e4. Base \ud074\ub798\uc2a4\ub85c\ubd80\ud130 SQLAlchemy \ubaa8\ub378 \uc0dd\uc131 \u00b6 SQLAlchemy \ubaa8\ub378\uc744 \ub9cc\ub4e4\uae30 \uc804\uc5d0 \uc6b0\ub9ac\uac00 \uc0dd\uc131\ud55c Base \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ud301 SQLAlchemy\uc5d0\uc11c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \uc0c1\ud638\uc791\uc6a9\ud558\ub294 \ud074\ub798\uc2a4 \ubc0f \uc778\uc2a4\ud134\uc2a4\ub97c \" \ubaa8\ub378 \"\uc774\ub77c\uace0 \uc9c0\uce6d\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Pydantic \ub610\ud55c \ub2e4\ub978 \uac83\ub4e4\uc744 \uc9c0\uce6d\ud558\uae30 \uc704\ud574 \" \ubaa8\ub378 \"\uc774\ub77c\ub294 \uc6a9\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub294\ub370, \uc5ec\uae30\uc11c\ub294 \ub370\uc774\ud130 \uc720\ud6a8\uc131 \uac80\uc0ac, \ubcc0\ud658, \uadf8\ub9ac\uace0 \ud074\ub798\uc2a4 \ubc0f \uc778\uc2a4\ud134\uc2a4\uc758 \ubb38\uc11c\ud654\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. database (\uc0c1\uae30 database.py \ud30c\uc77c)\ub85c\ubd80\ud130 Base \ub97c \uc784\ud3ec\ud2b8\ud558\uc2ed\uc2dc\uc624. \uc774\uac83\uc744 \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc774 \ud074\ub798\uc2a4\ub4e4\uc740 SQLAlchemy \ubaa8\ub378\ub4e4\uc785\ub2c8\ub2e4. from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) __tablename__ \uc18d\uc131\uc740 \uac01\uac01\uc758 \ubaa8\ub378\ub4e4\uc5d0 \ub300\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14 \uc774\ub984\uc744 SQLAlchemy\uc5d0\uac8c \uc54c\ub824\uc90d\ub2c8\ub2e4. \ubaa8\ub378 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8/\uc5f4 \uc0dd\uc131 \u00b6 \uc774\uc81c \ubaa8\ub4e0 \ubaa8\ub378 (\ud074\ub798\uc2a4) \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uac01 \uc18d\uc131\ub4e4\uc740 \ud574\ub2f9 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14\uc758 \uc5f4\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. SQLAlchemy\uc758 Column \uc744 \uae30\ubcf8\uac12\uc73c\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 Integer , String , Boolean \uacfc \uac19\uc774 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc720\ud615\uc744 \uc815\uc758\ud558\ub294 SQLAlchemy \ud074\ub798\uc2a4 \"\ud615(type)\"\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud569\ub2c8\ub2e4. from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) \uad00\uacc4 \uc0dd\uc131 \u00b6 \uc774\uc81c \uad00\uacc4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 SQLAlchemy ORM\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 relationship \uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \uc774\uc640 \uad00\uacc4\uac00 \uc788\ub294 \ub2e4\ub978 \ud14c\uc774\ube14\uc758 \uac12\uc744 \ud3ec\ud568\ud558\ub294 \"\ub9c8\ubc95\"\uacfc\ub3c4 \uac19\uc740 \uc18d\uc131\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) my_user.items \ub85c User \uc758 items \uc18d\uc131\uc5d0 \uc811\uadfc\ud558\uba74, \uc774\uac83\uc740 users \ud14c\uc774\ube14\uc758 \ud574\ub2f9 \ub808\ucf54\ub4dc\ub97c \uac00\ub9ac\ud0a4\ub294 \uc678\ub798\ud0a4\ub97c \uac16\ub294 SQLAlchemy \ubaa8\ub378\uc778 ( items \ud14c\uc774\ube14\uc758) Item \uc758 \ub9ac\uc2a4\ud2b8\ub97c \uac16\uac8c \ub429\ub2c8\ub2e4. my_user.items \uc5d0 \uc811\uadfc\ud558\uba74, SQLAlchemy\ub294 \uc2e4\uc81c\ub85c \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub85c\ubd80\ud130 items \ud14c\uc774\ube14\uc758 \ud56d\ubaa9\uc744 \uac00\uc838\uc640 \uc774 \ub9ac\uc2a4\ud2b8\uc5d0 \uadf8\ub4e4\uc744 \ub123\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 Item \uc758 owner \uc18d\uc131\uc5d0 \uc811\uadfc\ud558\uba74, \uc774\uac83\uc740 users \ud14c\uc774\ube14\uc758 User SQLAlchemy \ubaa8\ub378\uc744 \ud3ec\ud568\ud558\uac8c \ub429\ub2c8\ub2e4. \uc774\uac83\uc740 users \ud14c\uc774\ube14\uc5d0\uc11c \uc5b4\ub290 \ub808\ucf54\ub4dc\ub97c \uac00\uc838\uc62c\uc9c0 \ud310\ub2e8\ud558\uae30 \uc704\ud574 owner_id \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8/\uc5f4\uacfc \uadf8\uac83\uc758 \uc678\ub798\ud0a4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. Pydantic \ubaa8\ub378 \uc0dd\uc131 \u00b6 \uc774\uc81c sql_app/schemas.py \ud30c\uc77c\uc744 \ubd05\ub2c8\ub2e4. \ud301 SQLAlchemy\uc758 \ubaa8\ub378 \uacfc Pydantic\uc758 \ubaa8\ub378 \uc0ac\uc774\uc758 \ud63c\ub780\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574, models.py \ud30c\uc77c\uc5d0\uc11c SQLAlchemy \ubaa8\ub378\uc744, schemas.py \uc5d0\uc11c Pydantic \ubaa8\ub378\uc744 \uad00\ub9ac\ud569\ub2c8\ub2e4. \uc774 Pydantic \ubaa8\ub378\ub4e4\uc740 \uc720\ud6a8\ud55c \ub370\uc774\ud130 \ud615\ud0dc\uc778 \"\uc2a4\ud0a4\ub9c8(schema)\"\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc774\ub294 \uc774\ub294 \uc774 \ub458\uc744 \uc0ac\uc6a9\ud560 \ub54c \uc624\ub294 \ud63c\ub780\uc744 \ubc29\uc9c0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Pydantic \ucd08\uae30 \ubaa8\ub378 / \uc2a4\ud0a4\ub9c8 \uc0dd\uc131 \u00b6 \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud558\uac70\ub098 \uc77d\uc744 \ub54c \uacf5\ud1b5\uc801\uc778 \uc18d\uc131\uc744 \uac16\ub3c4\ub85d ItemBase \uacfc UserBase Pydantic \ubaa8\ub378 (\ub610\ub294 \"\uc2a4\ud0a4\ub9c8\")\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uadf8\ub4e4\uacfc \uac19\uc740 \uc18d\uc131\uc744 \uac16\ub3c4\ub85d \uadf8\ub4e4\ub85c\ubd80\ud130 \uc0c1\uc18d\ubc1b\uc740 ItemCreate \uacfc UserCreate \uc744 \ub9cc\ub4e4\uace0, \uc0dd\uc131\uc744 \uc704\ud574 \ud544\uc694\ud55c \ucd94\uac00\uc801\uc778 \ub370\uc774\ud130 (\uc5b4\ud2b8\ub9ac\ubdf0\ud2b8)\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4. \uc0ac\uc6a9\uc790\ub294 \uc0dd\uc131\ub420 \ub54c password \ub3c4 \uac16\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ubcf4\uc548\uc0c1\uc758 \ubb38\uc81c\ub85c, password \ub294 \ub2e4\ub978 Pydantic \ubaa8\ub378 \uc5d0\ub294 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c\ub4e4\uc5b4, \uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ub97c \uc77d\ub294 API\ub85c\ubd80\ud130 \uc804\uc1a1\ub418\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True SQLAlchemy \uc2a4\ud0c0\uc77c\uacfc Pydantic \uc2a4\ud0c0\uc77c \u00b6 SQLAlchemy \ubaa8\ub378 \uc740 = \uc744 \uc0ac\uc6a9\ud574\uc11c \uc18d\uc131\uc744 \uc815\uc758\ud558\uace0, Column \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ud615\uc744 \uc804\ub2ec\ud569\ub2c8\ub2e4: name = Column ( String ) \ud55c\ud3b8 Pydantic \ubaa8\ub378 \uc740 \uc0c8\ub85c\uc6b4 \ud615 \uc5b4\ub178\ud14c\uc774\uc158 \uad6c\ubb38/\ud615\uc2dd \ud78c\ud2b8\uc778 : \uc744 \uc0ac\uc6a9\ud574 \ud615\uc744 \uc120\uc5b8\ud569\ub2c8\ub2e4: name : str = \uacfc : \uc744 \ud5f7\uac08\ub9ac\uc9c0 \uc54a\uae30 \uc704\ud574 \uc774\uac83\uc744 \uae30\uc5b5\ud558\uc2ed\uc2dc\uc624. \uc77d\uace0 \ubc18\ud658\ud558\uae30 \uc704\ud55c Pydantic \ubaa8\ub378 / \uc2a4\ud0a4\ub9c8 \uc0dd\uc131 \u00b6 \uc774\uc81c \ub370\uc774\ud130\ub97c \uc77d\uace0 API\ub97c \ud1b5\ud574 \ubc18\ud658\ud560 \ub54c \uc0ac\uc6a9\ub418\ub294 Pydantic \ubaa8\ub378 (\uc2a4\ud0a4\ub9c8)\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ud56d\ubaa9\uc744 \uc0dd\uc131\ud558\uae30 \uc804\uc5d0\ub294 \uc5b4\ub5a4 ID\ub97c \ud560\ub2f9\ud574\uc57c\ud560\uc9c0 \ubaa8\ub974\uc9c0\ub9cc, \ud574\ub2f9 \ud56d\ubaa9\uc744 \uc77d\uc744 \ub54c(API\ub97c \ud1b5\ud574 \ubc18\ud658\ud560 \ub54c) \uc6b0\ub9ac\ub294 \uadf8\uac83\uc758 ID\ub97c \uc54c\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c, \uc0ac\uc6a9\uc790\ub97c \uc77d\uc744 \ub54c, \uc6b0\ub9ac\ub294 \ud574\ub2f9 \uc0ac\uc6a9\uc790\uc5d0 \uc18d\ud55c \uc544\uc774\ud15c\uc744 \ud3ec\ud568\ud558\ub294 items \ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud574\ub2f9 \uc544\uc774\ud15c\ub4e4\uc758 ID\ubfd0 \uc544\ub2c8\ub77c \uc544\uc774\ud15c\uc744 \uc77d\uae30 \uc704\ud574 \uc815\uc758\ud55c \ubaa8\ub4e0 Pydantic \ubaa8\ub378 \uc758 \ub370\uc774\ud130\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: Item . from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True \ud301 API\ub85c\ubd80\ud130 \ubc18\ud658\ub418\uc5b4 \uc0ac\uc6a9\uc790\ub97c \uc77d\uae30 \uc704\ud574 \uc0ac\uc6a9\ub418\ub294 Pydantic \ubaa8\ub378 User \uc740 password \ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc8fc\uc758\ud558\uc2ed\uc2dc\uc624. Pydantic\uc758 orm_mode \uc0ac\uc6a9 \u00b6 \uc774\uc81c, \uc77d\uae30\uc704\ud55c Pydantic \ubaa8\ub378 \ub4e4\uc778 Item \uacfc User \uc5d0 \ub0b4\ubd80\uc801\uc778 Config \ud074\ub798\uc2a4\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4. \uc774 Config \ud074\ub798\uc2a4\ub294 Pydantic \ud658\uacbd \uc124\uc815\uc744 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. Config \uc5d0\uc11c, orm_mode = True \ub85c \uc124\uc815\ud569\ub2c8\ub2e4. from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True \ud301 = \ub97c \uc0ac\uc6a9\ud574 \ub2e4\uc74c\uacfc \uac19\uc774 \uac12\uc744 \ud560\ub2f9\ud55c\ub2e4\ub294 \uac83\uc5d0 \uc8fc\uc758\ud558\uc2ed\uc2dc\uc624: orm_mode = True \ud615 \uc120\uc5b8 \ub54c\ucc98\ub7fc : \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \uc124\uc815\uac12\uc744 \ud560\ub2f9\ud558\ub294 \uac83\uc774\uc9c0, \ud615\uc744 \uc120\uc5b8\ud558\ub294 \uac83\uc774 \uc544\ub2d9\ub2c8\ub2e4. Pydantic\uc758 orm_mode \ub294 Pydantic \ubaa8\ub378 \uc5d0\uac8c dict \uac00 \uc544\ub2cc ORM \ubaa8\ub378(\ub610\ub294 \ub2e4\ub978 \uc18d\uc131\uc774 \uc788\ub294 \uc784\uc758\uc758 \uac1d\uccb4)\uc774\uc5b4\ub3c4 \ub370\uc774\ud130\ub97c \uc77d\uc744 \uac83\uc744 \uc9c0\uc2dc\ud569\ub2c8\ub2e4. \uc774 \ubc29\ubc95\uc73c\ub85c, dict \uc5d0\uc11c id \uac12\uc744 \uac00\uc838\uc624\uae30 \uc704\ud574 \ub2e4\uc74c\uc744 \uc0ac\uc6a9\ud558\ub294 \ub300\uc2e0: id = data [ \"id\" ] \ub2e4\uc74c\uacfc \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc18d\uc131\uc73c\ub85c\ubd80\ud130 \uac12\uc744 \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4: id = data . id \uc774\ub85c\uc368 Pydantic \ubaa8\ub378 \uc774 ORM\uacfc \ud638\ud658\ub418\uba70, \uacbd\ub85c \uc791\ub3d9 \uc758 response_model \uc778\uc790\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378\uc744 \ubc18\ud658\ubc1b\uace0 \uc774\ub85c\ubd80\ud130 \ub370\uc774\ud130\ub97c \uc77d\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ORM \ubaa8\ub4dc\uc5d0 \ub300\ud55c \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d \u00b6 SQLAlchemy\uc640 \ub9ce\uc740 \ub2e4\ub978 ORM\ub4e4\uc740 \uc790\ub3d9\uc801\uc73c\ub85c \"\uc9c0\uc5f0 \ub85c\ub529(lazy loading)\"\uc744 \ud569\ub2c8\ub2e4. \uc774\ub294 \ub2f9\uc2e0\uc774 \ud574\ub2f9 \ub370\uc774\ud130\uac00 \ud3ec\ud568\ub41c \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc5d0 \uc811\uadfc\ud558\uc9c0 \uc54a\ub294 \ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uad00\uacc4\uc5d0 \uad00\ud55c \ub370\uc774\ud130\ub97c \uac00\uc838\uc624\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, items \uc18d\uc131\uc5d0 \uc811\uadfc\ud558\uba74: current_user . items SQLAlchemy\ub294 \uadf8\uc81c\uc11c\uc57c items \ud14c\uc774\ube14\uc5d0 \uac00\uc11c \ud574\ub2f9 \uc720\uc800\uc5d0 \uc18d\ud55c \uc544\uc774\ud15c\ub4e4\uc744 \uac00\uc838\uc635\ub2c8\ub2e4. orm_mode \uac00 \uc5c6\ub2e4\uba74, \uacbd\ub85c \uc791\ub3d9 \uc73c\ub85c\ubd80\ud130 SQLAlchemy \ubaa8\ub378\uc744 \ubc18\ud658\ud560 \ub54c \uad00\uacc4\uc5d0 \ub300\ud55c \uc815\ubcf4\ub294 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Pydantic \ubaa8\ub378\uc5d0\uc11c \ud574\ub2f9 \uad00\uacc4\ub4e4\uc744 \uc120\uc5b8\ud55c \uacbd\uc6b0\ub77c\ub3c4 \uadf8\ub7ec\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 ORM \ubaa8\ub4dc\ub97c \uc0ac\uc6a9\ud558\uba74 Pydantic\uc774 dict \ub85c \uac00\uc815\ud558\ub294 \ub300\uc2e0 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc5d0\uc11c \ud544\uc694\ud55c \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud558\ub824\uace0 \ud558\uae30 \ub54c\ubb38\uc5d0, \ubc18\ud658\ud558\uace0\uc790 \ud558\ub294 \ud2b9\uc815\ud55c \ub370\uc774\ud130\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc73c\uba70 ORM\uc5d0\uc11c\ub3c4 \ub370\uc774\ud130\ub4e4\uc744 \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. CRUD \uc720\ud2f8\ub9ac\ud2f0 \u00b6 sql_app/crud.py \ud30c\uc77c\uc744 \ucc38\uace0\ud558\uc2ed\uc2dc\uc624. \uc774 \ud30c\uc77c\uc5d0\uc11c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc758 \ub370\uc774\ud130\uc640 \uc0c1\ud638\uc791\uc6a9 \ud558\uae30 \uc704\ud55c \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ud568\uc218\ub4e4\uc744 \uc815\uc758\ud560 \uac83\uc785\ub2c8\ub2e4. CRUD \ub294 \ub2e4\uc74c\uc758 \uac83\ub4e4\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4: \uc0dd\uc131( C reate), \uc77d\uae30( R ead), \uc5c5\ub370\uc774\ud2b8( U pdate), \uc0ad\uc81c( D elete). \ud558\uc9c0\ub9cc \uc608\uc2dc\uc5d0\uc11c\ub294 \uc0dd\uc131\uacfc \uc77d\uae30\ub9cc \ub2e4\ub8f9\ub2c8\ub2e4. \ub370\uc774\ud130 \uc77d\uae30 \u00b6 sqlalchemy.orm \uc5d0\uc11c Session \uc744 \uc784\ud3ec\ud2b8\ud558\uc2ed\uc2dc\uc624. \uc774\ub85c\uc368 db \ub9e4\uac1c\ubcc0\uc218\uc758 \ud615\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc73c\uba70 \ub354 \ub098\uc740 \ud615 \uccb4\ud06c \ubc0f \ud568\uc218\uc758 \uc644\uc131\ub3c4\ub97c \uae30\ub300\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. models (SQLAlchemy \ubaa8\ub378)\uc640 schemas (Pydantic \ubaa8\ub378 / \uc2a4\ud0a4\ub9c8)\ub97c \uc784\ud3ec\ud2b8 \ud558\uc2ed\uc2dc\uc624. \ub2e4\uc74c\uc744 \uc704\ud55c \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4: ID\uc640 \uc774\uba54\uc77c\uc744 \uc774\uc6a9\ud574 \ud558\ub098\uc758 \uc0ac\uc6a9\uc790 \uc77d\uae30 \ub2e4\uc218\uc758 \uc0ac\uc6a9\uc790 \uc77d\uae30 \ub2e4\uc218\uc758 \uc544\uc774\ud15c \uc77d\uae30 from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item \ud301 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc640\ub294 \ubcc4\uac1c\ub85c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \uc0c1\ud638 \uc791\uc6a9\ud558\ub294 \ub370\uc5d0\ub9cc \uc0ac\uc6a9\ub418\ub294 \ud568\uc218\ub4e4(\uc0ac\uc6a9\uc790 \ub610\ub294 \uc544\uc774\ud15c\uc744 \uac00\uc838\uc624\ub294 \ud568\uc218)\uc744 \uc0dd\uc131\ud568\uc73c\ub85c\uc368 \uc5ec\ub7ec \ubd80\ubd84\uc5d0\uc11c \uc774\ub4e4\uc744 \uc27d\uac8c \uc7ac\uc0ac\uc6a9\ud560 \uc218 \uc788\uc73c\uba70 \ub2e8\uc704 \ud14c\uc2a4\ud2b8 \ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130 \uc0dd\uc131 \u00b6 \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud558\ub294 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \ub2e8\uacc4\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: \ub370\uc774\ud130\uc640 \ud568\uaed8 SQLAlchemy \ubaa8\ub378 \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131 \ud574\ub2f9 \uc778\uc2a4\ud134\uc2a4 \uac1d\uccb4\ub97c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc5d0 \ucd94\uac00( add ) \ubcc0\uacbd \uc0ac\ud56d\uc774 \uc800\uc7a5\ub420 \uc218 \uc788\ub3c4\ub85d \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \ucee4\ubc0b( commit ) \uc0dd\uc131\ub41c ID\uc640 \uac19\uc740, \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc758 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ub97c \ud3ec\ud568\ud560 \uc218 \uc788\ub3c4\ub85d \uc778\uc2a4\ud134\uc2a4 \uc0c8\ub85c\uace0\uce68( refresh ) from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item \ud301 User \uc744 \uc704\ud55c SQLAlchemy \ubaa8\ub378\uc740 \uc548\uc804\ud558\uac8c \uc554\ud638\ud654\ub41c \ube44\ubc00\ubc88\ud638\uc778 hashed_password \ub97c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 API \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc81c\uacf5\ud558\ub294 \uac83\uc740 \uc554\ud638\ud654\ub418\uc9c0 \uc54a\uc740 \ube44\ubc00\ubc88\ud638\uc774\uae30 \ub54c\ubb38\uc5d0, \uadf8\uac83\uc744 \ucd94\ucd9c\ud55c \ub2e4\uc74c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc554\ud638\ud654\ub41c \ube44\ubc00\ubc88\ud638\ub97c \uc0dd\uc131\ud574\uc57c\ud569\ub2c8\ub2e4. \uadf8 \ub2e4\uc74c, \ud574\ub2f9 \uac12\uc744 hashed_password \uc778\uc790\uc5d0 \uc804\ub2ec\ud558\uace0 \uc800\uc7a5\ud569\ub2c8\ub2e4. \uacbd\uace0 \ube44\ubc00\ubc88\ud638\uac00 \uc554\ud638\ud654\ub418\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \uc774 \uc608\uc2dc\ub294 \uc548\uc804\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc2e4\uc81c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c\ub294 \ube44\ubc00\ubc88\ud638\ub97c \uc554\ud638\ud654\ud558\uace0 \uc808\ub300 \ud50c\ub808\uc778 \ud14d\uc2a4\ud2b8\ub85c \uc800\uc7a5\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624. \ub354 \ub9ce\uc740 \uc815\ubcf4\uac00 \ud544\uc694\ud558\ub2e4\uba74, \uc790\uc2b5\uc11c\uc758 \ubcf4\uc548(Security) \ud56d\ubaa9\uc744 \ucc38\uace0\ud558\uc2ed\uc2dc\uc624. \uc5ec\uae30\uc11c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc758 \ub3c4\uad6c\uc640 \uc5ed\ud559\uc5d0\ub9cc \ucd08\uc810\uc744 \ub9de\ucd9c \uac83\uc785\ub2c8\ub2e4. \ud301 \uac01\uac01\uc758 \ud0a4\uc6cc\ub4dc \uc778\uc790\ub4e4\uc744 Item \uc5d0 \uc804\ub2ec\ud558\uace0 \uc774\ub4e4 \uac01\uac01\uc744 Pydantic \ubaa8\ub378 \ub85c \uc77d\ub294 \ub300\uc2e0, \ub2e4\uc74c\uacfc \uac19\uc774 Pydantic \ubaa8\ub378 \uc758 \ub370\uc774\ud130\ub85c dict \ub97c \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: item.dict() \uadf8\ub2e4\uc74c dict \uc758 \ud0a4-\uac12 \uc30d\ub4e4\uc744 SQLAlchemy Item \uc758 \ud0a4\uc6cc\ub4dc \uc778\uc790\ub4e4\ub85c \uc804\ub2ec\ud569\ub2c8\ub2e4: Item(**item.dict()) \uc774\ud6c4 Pydantic \ubaa8\ub378 \uc774 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294 \uc5ec\ubd84\uc758 \ud0a4\uc6cc\ub4dc \uc778\uc790\uc778 owner_id \ub97c \uc804\ub2ec\ud569\ub2c8\ub2e4: Item(**item.dict(), owner_id=user_id) Main FastAPI \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 \u00b6 \uc774\uc81c sql_app/main.py \ud30c\uc77c\uc5d0\uc11c \uc9c0\uae08\uae4c\uc9c0 \uc791\uc131\ud55c \ubaa8\ub4e0 \ubd80\ubd84\ub4e4\uc744 \ud1b5\ud569\ud558\uace0 \uc0ac\uc6a9\ud569\uc2dc\ub2e4. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14 \uc0dd\uc131 \u00b6 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14\uc744 \uc0dd\uc131\ud558\ub294 \ub9e4\uc6b0 \uac04\ub2e8\ud55c \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items Alembic \ucc38\uace0\uc0ac\ud56d \u00b6 \uc77c\ubc18\uc801\uc73c\ub85c Alembic \uc744 \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \ucd08\uae30\ud654(\ud14c\uc774\ube14 \uc0dd\uc131 \ub4f1)\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c Alembic\uc744 \uc0ac\uc6a9\ud558\uc5ec \"\ub9c8\uc774\uadf8\ub808\uc774\uc158\"\uc744 \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4 (\uc774\uac83\uc774 Alembic\uc758 \uc8fc\uc694 \uc5ed\ud560\uc774\uae30\ub3c4 \ud569\ub2c8\ub2e4). \"\ub9c8\uc774\uadf8\ub808\uc774\uc158\"\uc774\ub780 SQLAlchemy \ubaa8\ub378 \uad6c\uc870\uc5d0 \ubcc0\ud654\uac00 \uc0dd\uae30\uac70\ub098, \uc0c8\ub85c\uc6b4 \uc18d\uc131\uc744 \ucd94\uac00\ud558\ub294 \ub4f1\uc758 \uc791\uc5c5\uc774 \uc774\ub8e8\uc5b4\uc9c8 \ub54c\ub9c8\ub2e4 \uadf8\ub7ec\ud55c \ubcc0\uacbd\uc0ac\ud56d\ub4e4\uc744 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \ubcf5\uc81c\ud558\uac70\ub098, \uc0c8\ub85c\uc6b4 \uceec\ub7fc \ubc0f \ud14c\uc774\ube14\uc744 \ucd94\uac00\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ub2e8\uacc4\uc758 \uc9d1\ud569\uc785\ub2c8\ub2e4. FastAPI \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\uc758 Alembic\uc5d0 \ub300\ud55c \uc608\uc2dc\ub97c Project Generation - Template \uc758 \ud15c\ud50c\ub9bf\ub4e4\uc5d0\uc11c \ucc3e\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc18c\uc2a4\ucf54\ub4dc\uc758 alembic \ub514\ub809\ud130\ub9ac \ub97c \ucc38\uace0\ud558\uc2ed\uc2dc\uc624. \uc758\uc874\uc131 \uc0dd\uc131 \u00b6 \uc815\ubcf4 \uc774 \uc791\uc5c5\uc744 \uc218\ud589\ud558\uae30 \uc704\ud574, \ud30c\uc774\uc36c 3.7 \uc774\uc0c1\uc758 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud558\uac70\ub098 \ud30c\uc774\uc36c 3.6 \ubc84\uc804 \uc0ac\uc6a9\uc2dc \"backports\"\ub97c \uc124\uce58\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4: $ pip install async-exit-stack async-generator \uc774\uac83\uc740 async-exit-stack \uacfc async-generator \ub97c \uc124\uce58\ud569\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9\uc5d0 \uc124\uba85\ud560 \"\ubbf8\ub4e4\uc6e8\uc5b4\"\uc640 \ud568\uaed8 \ub2e4\ub978 \uba54\uc11c\ub4dc\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \uc758\uc874\uc131\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574 sql_app/databases.py \ud30c\uc77c\uc758 SessionLocal \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. \uac01 \uc694\uccad\ub9c8\ub2e4 \ub3c5\ub9bd\uc801\uc778 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158/\uc5f0\uacb0 ( SessionLocal )\uc774 \uc788\uace0, \ubaa8\ub4e0 \uc694\uccad\uc5d0 \ub300\ud574 \ub3d9\uc77c\ud55c \uc138\uc158\uc744 \uc0ac\uc6a9\ud55c \ud6c4 \uc694\uccad\uc774 \uc644\ub8cc\ub418\uba74 \uc885\ub8cc\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ud6c4 \ub2e4\uc74c \uc694\uccad\uc5d0 \ub300\ud574\uc11c\ub294 \uc0c8\ub85c\uc6b4 \uc138\uc158\uc774 \uc0dd\uc131\ub420 \uac83\uc785\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574, yield \ub97c \uc0ac\uc6a9\ud55c \uc758\uc874\uc131 \uc5d0\uc11c \uc124\uba85\ud55c \uac83\uacfc \uac19\uc774 yield \ub97c \uc0ac\uc6a9\ud574 \uc0c8\ub85c\uc6b4 \uc758\uc874\uc131\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc774 \uc758\uc874\uc131\uc740 \ud558\ub098\uc758 \uc694\uccad\uc5d0 \ub300\ud574\uc11c\ub9cc \uc0ac\uc6a9\ub41c \ud6c4 \uc694\uccad\uc774 \uc644\ub8cc\ub418\uba74 \uc885\ub8cc\ub418\ub294 \uc0c8\ub85c\uc6b4 SQLAlchemy SessionLocal \uc744 \uc0dd\uc131\ud560 \uac83\uc785\ub2c8\ub2e4. from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \uc815\ubcf4 SessionLocal() \uc758 \uc0dd\uc131\uacfc \uc694\uccad\uc758 \ucc98\ub9ac\ub97c try \ube14\ub85d\uc5d0 \ubc30\uce58\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 finally \ube14\ub85d\uc5d0\uc11c \uc774\ub97c \uc885\ub8cc\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc694\uccad \uc774\ud6c4 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc774 \uc5b8\uc81c\ub098 \ub2eb\ud600\uc788\ub2e4\ub294 \uc0ac\uc2e4\uc744 \ud655\uc2e4\ud788 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc694\uccad \ucc98\ub9ac \ub3c4\uc911 \uc608\uc678\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0\ub77c\ub3c4 \uadf8\ub7ec\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc885\ub8cc \ucf54\ub4dc( yield \uc774\ud6c4)\uc5d0\uc11c \ub2e4\ub978 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uc218\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \uc790\uc138\ud55c \uc0ac\ud56d\uc740 yield \ubc0f HTTPException \uc744 \uc0ac\uc6a9\ud55c \uc758\uc874\uc131 \uc744 \ucc38\uace0\ud558\uc2ed\uc2dc\uc624. \uadf8\ub7f0 \ub2e4\uc74c, \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc5d0\uc11c \uc758\uc874\uc131\uc744 \uc0ac\uc6a9\ud560 \ub54c, SQLAlchemy\ub85c\ubd80\ud130 \uc9c1\uc811 \uc784\ud3ec\ud2b8\ud55c Session \ud615\uc73c\ub85c \uc774\uac83\uc744 \uc120\uc5b8\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc5d0\ub514\ud130\uac00 db \ub9e4\uac1c\ubcc0\uc218\uac00 Session \ud615\uc784\uc744 \uc54c \uc218 \uc788\uc73c\ubbc0\ub85c \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \ub354 \ub098\uc740 \uc5d0\ub514\ud130 \uc9c0\uc6d0\uc744 \uc81c\uacf5\ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4: from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d db \ub9e4\uac1c\ubcc0\uc218\ub294 \uc0ac\uc2e4 SessionLocal \ud615\uc774\uc9c0\ub9cc, ( sessionmaker() \ub85c\ubd80\ud130 \ub9cc\ub4e4\uc5b4\uc9c4) \ud574\ub2f9 \ud074\ub798\uc2a4\uac00 SQLAlchemy Session \uc758 \"\ud504\ub85d\uc2dc\"\uc774\ubbc0\ub85c, \uc5d0\ub514\ud130\ub294 \uc5b4\ub5a4 \uba54\uc11c\ub4dc\ub4e4\uc774 \uc81c\uacf5\ub418\ub294\uc9c0\ub294 \uc54c\uc9c0 \ubabb\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Session \ud615\uc73c\ub85c \uc120\uc5b8\ud568\uc73c\ub85c\uc368, \uc5d0\ub514\ud130\ub294 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uba54\uc11c\ub4dc\ub4e4( .add() , .query() , .commit() \ub4f1)\uc744 \uc54c \uc218 \uc788\uace0 (\uc790\ub3d9\uc644\uc131\uacfc \uac19\uc740) \ub354 \ub098\uc740 \uc9c0\uc6d0\uc744 \uc81c\uacf5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud615 \uc120\uc5b8\uc774 \uc2e4\uc81c \uac1d\uccb4\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. FastAPI \uacbd\ub85c \ub3d9\uc791 \uc0dd\uc131 \u00b6 \ub4dc\ub514\uc5b4, \uc5ec\uae30 \ud45c\uc900 FastAPI \uacbd\ub85c \uc791\ub3d9 \ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \uc758\uc874\uc131 \ub0b4\ubd80\uc5d0\uc11c yield \ub97c \uc0ac\uc6a9\ud574 \uac01 \uc694\uccad \uc774\uc804\uc5d0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc744 \uc0dd\uc131\ud558\uace0 \uc774\ud6c4 \uc885\ub8cc\ud569\ub2c8\ub2e4. \uadf8\ub2e4\uc74c \ud574\ub2f9 \uc138\uc158\uc744 \uc9c1\uc811 \uac00\uc838\uc624\uae30 \uc704\ud574 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \ud544\uc694\ud55c \uc758\uc874\uc131\uc744 \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574, \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c crud.get_user \ub97c \uc9c1\uc811 \ud638\ucd9c\ud574\uc11c \ud574\ub2f9 \uc138\uc158\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud301 \ubc18\ud658\ub418\ub294 \uac12\uc740 SQLAlchemy \ubaa8\ub378\uc774\uac70\ub098 SQLAlchemy \ubaa8\ub378\ub4e4\uc758 \ubaa9\ub85d\uc774\ub77c\ub294 \uc810\uc744 \uc8fc\uc758\ud558\uc2ed\uc2dc\uc624. \ud558\uc9c0\ub9cc \ubaa8\ub4e0 \uacbd\ub85c \uc791\ub3d9 \uc774 'orm_mode'\uc744 \uc0ac\uc6a9\ud558\uc5ec Pydantic \ubaa8\ub378 /\uc2a4\ud0a4\ub9c8\ub97c \uc0ac\uc6a9\ud55c 'response_model'\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\ubbc0\ub85c Pydantic \ubaa8\ub378\uc5d0 \uc120\uc5b8\ub41c \ub370\uc774\ud130\ub294 \uc774\ub85c\ubd80\ud130 \ucd94\ucd9c\ub41c \ud6c4 \ubaa8\ub4e0 \uc77c\ubc18 \ud544\ud130\ub9c1 \ubc0f \uc720\ud6a8\uc131 \uac80\uc0ac\ub97c \ud1b5\ud574 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \ubc18\ud658\ub429\ub2c8\ub2e4. \ud301 List[schemas.Item] \uacfc \uac19\uc740 \ud45c\uc900 \ud30c\uc774\uc36c \ud615\uc744 \uac00\uc9c4 response_models \uac00 \uc788\ub2e4\ub294 \uac83\ub3c4 \uc8fc\uc758\ud558\uc2ed\uc2dc\uc624. \uadf8\ub7ec\ub098 List \uc758 \uc694\uc1fc / \ub9e4\uac1c\ubcc0\uc218\ub294 'orm_mode'\uac00 \uc788\ub294 Pydantic \ubaa8\ub378 \uc774\uae30 \ub54c\ubb38\uc5d0, \ub370\uc774\ud130\ub294 \ubb38\uc81c \uc5c6\uc774 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \ubc18\ud658\ub429\ub2c8\ub2e4. def vs async def \u00b6 \uc5ec\uae30\uc11c \uc6b0\ub9ac\ub294 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub0b4\ubd80\uc640 \uc758\uc874\uc131\uc5d0\uc11c SQLAlchemy \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\uace0, \uacb0\uacfc\uc801\uc73c\ub85c \uc678\ubd80 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \ud1b5\uc2e0\ud569\ub2c8\ub2e4. \uc774\ub294 \uc7a0\uc7ac\uc801\uc73c\ub85c \"\ub300\uae30\"\ub97c \ud544\uc694\ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 SQLAlchemy\uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc9c1\uc811\uc801\uc778 await \uc758 \uc0ac\uc6a9\uc774 \ubd88\uac00\ud569\ub2c8\ub2e4: user = await db . query ( User ) . first () \ub300\uc2e0 \uc774\ub807\uac8c \uc0ac\uc6a9\ud569\ub2c8\ub2e4: user = db . query ( User ) . first () \uc774\ud6c4 async def \uac00 \uc544\ub2cc \uc77c\ubc18\uc801\uc778 def \ub97c \uc0ac\uc6a9\ud574\uc11c \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc640 \uc758\uc874\uc131\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \uc120\uc5b8\ud569\ub2c8\ub2e4: @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) ... \uc815\ubcf4 \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \ube44\ub3d9\uae30\uc801\uc73c\ub85c \uc5f0\uacb0\ud574\uc57c\ud560 \uacbd\uc6b0, Async SQL (Relational) Databases \ub97c \ucc38\uace0\ud558\uc2ed\uc2dc\uc624. \ub9e4\uc6b0 \uc138\ubd80\uc801\uc778 \uae30\uc220\uc801 \uc0ac\ud56d \ub9cc\uc57d \ub2f9\uc2e0\uc774 \ud638\uae30\uc2ec\uc774 \uc788\uace0 \uae4a\uc740 \uae30\uc220\uc801 \uc9c0\uc2dd\uc744 \uac16\uace0\uc788\uc744 \uacbd\uc6b0, async def vs def \uac00 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0\uc5d0 \ub300\ud574 Async \ubb38\uc11c\uc758 \ub9e4\uc6b0 \uc138\ubd80\uc801\uc778 \uae30\uc220\uc801 \uc0ac\ud56d\ub4e4\uc744 \ud655\uc778\ud574 \ubcf4\uc2ed\uc2dc\uc624. \ub9c8\uc774\uadf8\ub808\uc774\uc158 \u00b6 \uc6b0\ub9ac\ub294 SQLAlchemy\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\uace0 \uc788\uc73c\uba70 \uc774\uac83\uc774 FastAPI \uc640 \ub3d9\uc791\ud558\uae30 \uc704\ud574 \uc5b4\ub5a0\ud55c \uc885\ub958\uc758 \ud50c\ub7ec\uadf8\uc778\ub3c4 \ud544\uc694\ub85c\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc744 Alembic \uacfc \uc9c1\uc811 \ud1b5\ud569\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 SQLAlchemy\uc640 \uad00\ub828\ub41c \ucf54\ub4dc\uc640 SQLAlchemy \ubaa8\ub378\ub4e4\uc774 \ubd84\ub9ac\ub41c \ub3c5\ub9bd\uc801\uc778 \ud30c\uc77c\ub4e4\uc5d0 \uc874\uc7ac\ud558\uae30 \ub54c\ubb38\uc5d0, Alembic\uc744 \uc0ac\uc6a9\ud55c \ub9c8\uc774\uadf8\ub808\uc774\uc158\uc744 FastAPI, Pydantic \uae30\ud0c0 \uc5b4\ub290 \uac83\ub3c4 \uc124\uce58\ud558\uc9c0 \uc54a\uace0 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c, \ub3d9\uc77c\ud55c SQLAlchemy \ubaa8\ub378 \ubc0f \uc720\ud2f8\ub9ac\ud2f0\ub97c FastAPI \uc640 \uad00\ub828\uc774 \uc5c6\ub294 \ub2e4\ub978 \ubd80\ubd84\uc758 \ucf54\ub4dc\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, Celery , RQ , \ub610\ub294 ARQ \uc640 \ud568\uaed8 \ubc31\uadf8\ub77c\uc6b4\ub4dc \uc791\uc5c5\uc790\uc5d0\uc11c\uc758 \uc0ac\uc6a9\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. \ubaa8\ub4e0 \ud30c\uc77c \uac80\ud1a0 \u00b6 sql_app \uc744 \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\ub85c \uac16\ub294 my_super_project \ub514\ub809\ud1a0\ub9ac\uac00 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. sql_app \uc5d0\ub294 \ub2e4\uc74c\uc758 \ud30c\uc77c\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4: sql_app/__init__.py : \ube48 \ud30c\uc77c sql_app/database.py : from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () sql_app/models.py : from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) sql_app/schemas.py : from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True sql_app/crud.py : from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item sql_app/main.py : from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \ud655\uc778\ud558\uc2ed\uc2dc\uc624 \u00b6 \uc774 \ucf54\ub4dc\ub97c \ubcf5\uc0ac\ud574\uc11c \uadf8\ub300\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \uc0ac\uc2e4 \uc774 \ubb38\uc11c\ub4e4\uc758 \ub300\ubd80\ubd84\uc758 \ucf54\ub4dc\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc5ec\uae30\uc5d0 \ud45c\uc2dc\ub41c \ucf54\ub4dc\ub294 \ud14c\uc2a4\ud2b8\uc758 \uc77c\ubd80\uc785\ub2c8\ub2e4. Uvicorn\uc744 \ud1b5\ud574 \uc2e4\ud589\ud569\ub2c8\ub2e4: $ uvicorn sql_app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \uadf8\ub2e4\uc74c, http://127.0.0.1:8000/docs \uc5d0\uc11c \ube0c\ub77c\uc6b0\uc800\ub97c \uc5f4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c FastAPI \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uacfc \uc0c1\ud638\uc791\uc6a9\ud558\uba70 \uc2e4\uc81c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc77d\ub294 \uac83\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4: \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \uc9c1\uc811\uc801\uc778 \uc0c1\ud638\uc791\uc6a9 \u00b6 FastAPI\uc640 \uad00\uacc4 \uc5c6\uc774 \ub514\ubc84\uae45\uc744 \ud558\uac70\ub098, \ud14c\uc774\ube14, \uceec\ub7fc, \ub808\ucf54\ub4dc\ub97c \ucd94\uac00\ud558\uac70\ub098, \ub370\uc774\ud130\ub97c \uc218\uc815\ud558\ub294 \ub4f1\uc758 \uc791\uc5c5\uc744 \uc704\ud574 SQLite \ub370\uc774\ud130\ubca0\uc774\uc2a4(\ud30c\uc77c)\ub97c \uc9c1\uc811 \uc2e4\ud589\ud558\uace0 \uc2f6\ub2e4\uba74, DB Browser for SQLite \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: SQLite Viewer \ub098 ExtendsClass \uc640 \uac19\uc740 \uc628\ub77c\uc778 SQLite \ube0c\ub77c\uc6b0\uc800\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ubbf8\ub4e4\uc6e8\uc5b4\uac00 \uc788\ub294 \ub300\uccb4 DB \uc138\uc158 \u00b6 \ud30c\uc774\uc36c 3.7 \uc744 \uc0ac\uc6a9\ud558\uace0 \uc788\uc9c0 \uc54a\uac70\ub098 \ud30c\uc774\uc36c 3.6 \uc5d0\uc11c \uc0c1\uae30 \uc5b8\uae09\ud55c \u201cbackports\u201d\ub97c \uc124\uce58\ud560 \uc218 \uc5c6\uc5b4 yield \ub97c \uc0ac\uc6a9\ud55c \uc758\uc874\uc131\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74 \uc720\uc0ac\ud55c \ubc29\uc2dd\uc73c\ub85c \u201c\ubbf8\ub4e4\uc6e8\uc5b4\u201d\uc5d0 \uc138\uc158\uc744 \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \u201c\ubbf8\ub4e4\uc6e8\uc5b4\u201d\ub294 \uc694\uccad\uc774 \uc788\uc744 \ub54c\ub9c8\ub2e4 \uc2e4\ud589\ub418\ub294 \ud568\uc218\ub85c, \uc77c\ubd80\ub294 \uc0ac\uc804\uc5d0, \uc77c\ubd80\ub294 \ud568\uc218\uc758 \uc885\uc810 \uc774\ud6c4\uc5d0 \uc2e4\ud589\ub429\ub2c8\ub2e4. \ubbf8\ub4e4\uc6e8\uc5b4 \uc0dd\uc131 \u00b6 \uc6b0\ub9ac\uac00 \ucd94\uac00\ud560 \ubbf8\ub4e4\uc6e8\uc5b4(\ub2e8\uc21c\ud55c \ud568\uc218)\ub294 \uac01 \uc694\uccad\ub9c8\ub2e4 \uc0c8\ub85c\uc6b4 SQLAlchemy SessionLocal \uc744 \uc0dd\uc131, \uc694\uccad\uc5d0 \uc774\ub97c \ucd94\uac00\ud558\uace0 \uc694\uccad\uc774 \uc644\ub8cc\ub418\uba74 \uc774\ub97c \uc885\ub8cc\ud560 \uac83\uc785\ub2c8\ub2e4. from typing import List from fastapi import Depends , FastAPI , HTTPException , Request , Response from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () @app . middleware ( \"http\" ) async def db_session_middleware ( request : Request , call_next ): response = Response ( \"Internal server error\" , status_code = 500 ) try : request . state . db = SessionLocal () response = await call_next ( request ) finally : request . state . db . close () return response # Dependency def get_db ( request : Request ): return request . state . db @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \uc815\ubcf4 SessionLocal() \uc758 \uc0dd\uc131\uacfc \uc694\uccad\uc758 \ucc98\ub9ac\ub97c try \ube14\ub85d\uc5d0 \ubc30\uce58\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 finally \ube14\ub85d\uc5d0\uc11c \uc774\ub97c \uc885\ub8cc\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc694\uccad \uc774\ud6c4 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc774 \uc5b8\uc81c\ub098 \ub2eb\ud600\uc788\ub2e4\ub294 \uc0ac\uc2e4\uc744 \ud655\uc2e4\ud788 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc694\uccad \ucc98\ub9ac \ub3c4\uc911 \uc608\uc678\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0\ub77c\ub3c4 \uadf8\ub7ec\ud569\ub2c8\ub2e4. request.state \uc5d0 \ub300\ud574 \u00b6 request.state \ub294 \uac01 Request \uac1d\uccb4\uc5d0 \ub300\ud55c \ud504\ub85c\ud37c\ud2f0\uc785\ub2c8\ub2e4. \uc774 \uacbd\uc6b0\uc5d0\uc11c\uc758 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uacfc \uac19\uc774 \uc694\uccad \uc790\uccb4\uc640 \uc5f0\uacb0\ub41c \uc784\uc758\uc758 \uac1d\uccb4\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 \uc874\uc7ac\ud569\ub2c8\ub2e4. Request \uc0c1\ud0dc\uc5d0 \uad00\ud55c Starlette \ubb38\uc11c \uc5d0\uc11c \ub354 \uc790\uc138\ud55c \uc0ac\ud56d\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uacbd\uc6b0\uc5d0\uc11c, \uc774\uac83\uc740 \ud558\ub098\uc758 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc774 \ubaa8\ub4e0 \uc694\uccad\uc5d0 \ub300\ud574 \uc0ac\uc6a9\ub418\uace0 \uc774\ud6c4 (\ubbf8\ub4e4\uc6e8\uc5b4\uc5d0\uc11c) \uc885\ub8cc\ub418\ub294 \uac83\uc744 \ubcf4\uc7a5\ud569\ub2c8\ub2e4. yield \ub97c \uc0ac\uc6a9\ud558\ub294 \uc758\uc874\uc131 \ub610\ub294 \ubbf8\ub4e4\uc6e8\uc5b4\uc640 \u00b6 \ubbf8\ub4e4\uc6e8\uc5b4 \ub97c \ucd94\uac00\ud558\ub294 \uac83\uc740 yield \ub97c \uc0ac\uc6a9\ud558\ub294 \uc758\uc874\uc131\uc774 \ud558\ub294 \uac83\uacfc \uc720\uc0ac\ud558\uc9c0\ub9cc, \uba87 \uac00\uc9c0 \ucc28\uc774\uc810\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4: \ub354 \ub9ce\uc740 \ucf54\ub4dc\ub97c \ud544\uc694\ub85c\ud558\uace0 \uc870\uae08 \ub354 \ubcf5\uc7a1\ud569\ub2c8\ub2e4. \ubbf8\ub4e4\uc6e8\uc5b4\ub294 async \ud568\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4. \ub0b4\ubd80\uc5d0 \ub124\ud2b8\uc6cc\ud06c\ub97c \u201c\ub300\uae30\u201d\ud558\ub294 \ucf54\ub4dc\uac00 \uc788\ub2e4\uba74, \uc774\ub294 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc744 \"\ucc28\ub2e8\"\ud558\uace0 \uc131\ub2a5\uc744 \uc57d\uac04 \uc800\ud558\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. SQLAlchemy \uac00 \uc791\ub3d9\ud558\ub294 \ubc29\uc2dd\uc5d0 \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc I/O \ub300\uae30\ub97c \ud574\uc57c\ud558\ub294 \ucf54\ub4dc\ub97c \ubbf8\ub4e4\uc6e8\uc5b4\uc5d0 \ub2e4\uc218 \ucd94\uac00\ud558\uba74 \ubb38\uc81c\uac00 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubbf8\ub4e4\uc6e8\uc5b4\ub294 \ubaa8\ub4e0 \uc694\uccad\uc2dc\uc5d0 \uc2e4\ud589\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub9e4 \uc694\uccad\uc2dc \uc5f0\uacb0\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4. \uacbd\ub85c \uc791\ub3d9 \uc774 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \uad00\ub828 \uc5c6\ub294 \uc694\uccad\uc744 \ucc98\ub9ac\ud558\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \uadf8\ub807\uc2b5\ub2c8\ub2e4. \ud301 yield \ub97c \uc0ac\uc6a9\ud558\ub294 \uc758\uc874\uc131\ub9cc\uc73c\ub85c\ub3c4 \ucda9\ubd84\ud558\ub2e4\uba74, \uc774\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \ub098\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 yield \ub97c \uc0ac\uc6a9\ud558\ub294 \uc758\uc874\uc131\uc740 FastAPI \uc5d0 \ucd5c\uadfc\uc5d0 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\uc804 \ubc84\uc804\uc758 \uc790\uc2b5\uc11c\uc5d0\uc11c\ub294 \ubbf8\ub4e4\uc6e8\uc5b4\uc5d0 \ub300\ud55c \uc608\uc2dc\ub9cc \uc788\uc5c8\uace0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158 \uad00\ub9ac\ub97c \uc704\ud574 \ubbf8\ub4e4\uc6e8\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub294 \uc5ec\ub7ec \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc774 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"SQL (\uad00\uacc4\ud615) \ub370\uc774\ud130\ubca0\uc774\uc2a4"},{"location":"tutorial/sql-databases/#sql","text":"FastAPI \uc5d0\uc11c \ubc18\ub4dc\uc2dc SQL(\uad00\uacc4\ud615) \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud574\uc57c\ud558\ub294 \uac83\uc740 \uc544\ub2d9\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc6d0\ud55c\ub2e4\uba74 \uc5b4\ub5a4 \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub3c4 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294 SQLAlchemy \ub97c \uc0ac\uc6a9\ud55c \uc608\uc2dc\ub97c \ubcf4\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4. SQLAlchemy\uac00 \uc9c0\uc6d0\ud558\ub294 \uc5b4\ub290 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub4e0 \uc27d\uac8c \uc801\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: PostgreSQL MySQL SQLite Oracle Microsoft SQL Server \ub4f1. \ud558\ub098\uc758 \ud30c\uc77c\uc744 \uc0ac\uc6a9\ud558\uace0 \ud30c\uc774\uc36c\uc774 \ud1b5\ud569\ub41c \uc9c0\uc6d0\uc744 \uc81c\uacf5\ud558\uae30 \ub54c\ubb38\uc5d0, \uc774 \uc608\uc2dc\uc5d0\uc11c\ub294 SQLite \ub97c \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub3d9 \uc608\uc2dc\ub97c \ubcf5\uc0ac\ud574\uc11c \uadf8\ub300\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucd94\ud6c4 \ud504\ub85c\ub355\uc158\uc6a9 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\ub294 PostgreSQL \uacfc \uac19\uc740 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc11c\ubc84\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud301 \ub3c4\ucee4 \ub97c \uae30\ubc18\uc73c\ub85c \ud558\uace0, \ud504\ub860\ud2b8\uc5d4\ub4dc\uc640 \ub9ce\uc740 \ub3c4\uad6c\ub4e4\uc744 \ud3ec\ud568\ud55c FastAPI \ubc0f PostgreSQL \uc744 \uc0ac\uc6a9\ud558\ub294 \uacf5\uc2dd\uc801\uc778 \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131\uae30\uac00 \uc788\uc2b5\ub2c8\ub2e4: https://github.com/tiangolo/full-stack-fastapi-postgresql \ucc38\uace0 \ub300\ubd80\ubd84\uc758 \ucf54\ub4dc\ub294 \ubaa8\ub4e0 \ud504\ub808\uc784\uc6cc\ud06c\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ud45c\uc900 SQLAlchemy \ucf54\ub4dc\uc785\ub2c8\ub2e4. FastAPI \ud2b9\uc815 \ucf54\ub4dc\ub294 \uc5b8\uc81c\ub098 \uadf8\ub807\ub4ef \ub9ce\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"SQL (\uad00\uacc4\ud615) \ub370\uc774\ud130\ubca0\uc774\uc2a4"},{"location":"tutorial/sql-databases/#orm","text":"FastAPI \ub294 \ubaa8\ub4e0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc0f \ubaa8\ub4e0 \uc2a4\ud0c0\uc77c\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \ub3d9\uc791\ud558\uba70 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \ud1b5\uc2e0\ud569\ub2c8\ub2e4. \ud754\ud55c \ud328\ud134 \uc911 \ud558\ub098\ub294 \"\uac1d\uccb4 \uad00\uacc4 \ub9e4\ud551(ORM, object-relational mapping \ub77c\uc774\ube0c\ub7ec\ub9ac)\"\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. ORM\uc5d0\ub294 \ucf54\ub4dc\uc758 \uac1d\uccb4 ( object )\uc640 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14( \"\uad00\uacc4: relation\" )\uac04 \ubcc0\ud658( \"\ub9e4\ud551: mapping\" )\uc744 \ud558\ub294 \ub3c4\uad6c\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. ORM\uc744 \uc0ac\uc6a9\ud558\uc5ec, SQL \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc758 \ud14c\uc774\ube14\uc744 \ub098\ud0c0\ub0b4\ub294 \ud074\ub798\uc2a4\uc640, \uc774\ub984\uacfc \ud615\uc744 \uac00\uc9c4 \uc5f4\uc744 \ub098\ud0c0\ub0b4\ub294 \ud574\ub2f9 \ud074\ub798\uc2a4\uc758 \uac01 \uc18d\uc131\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc608\ub97c\ub4e4\uc5b4 \ud074\ub798\uc2a4 Pet \uc740 SQL \ud14c\uc774\ube14 pets \uc744 \ub098\ud0c0\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud574\ub2f9 \ud074\ub798\uc2a4\uc758 \uac01 \uc778\uc2a4\ud134\uc2a4 \uac1d\uccb4\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc758 \ud589\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc608\ub97c\ub4e4\uc5b4 Pet \uc758 \uc778\uc2a4\ud134\uc2a4\uc778 orion_cat \uac1d\uccb4\ub294 type \uc5f4\uc5d0 \ub300\ud574 orion_cat.type \uc18d\uc131\uc744 \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc18d\uc131\uc758 \uac12\uc740 \uc77c\ub840\ub85c, \"cat\" \uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c ORM\uc5d0\ub294 \ud14c\uc774\ube14 \ub610\ub294 \uac1c\uccb4 \uc0ac\uc774\uc758 \uc5f0\uacb0\uc774\ub098 \uad00\uacc4\ub97c \uc0dd\uc131\ud558\ub294 \ub3c4\uad6c\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 orion_cat.owner \uc18d\uc131\uc744 \uac00\uc9c8 \uc218 \uc788\uc73c\uba70, owner(\uc8fc\uc778)\uc740 owners \ud14c\uc774\ube14\ub85c\ubd80\ud130 \uac00\uc838\uc628 pet(\ubc18\ub824\ub3d9\ubb3c)\uc758 owner(\uc8fc\uc778)\uc5d0 \ub300\ud55c \ub370\uc774\ud130\ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, orion_cat.owner.name \uc740 owners \ud14c\uc774\ube14\uc758 name \uc5d0\uc11c \uac00\uc838\uc628 \ubc18\ub824\ub3d9\ubb3c \uc8fc\uc778\uc758 \uc774\ub984\uc774 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub294 \"Arquilian\" \uc640 \uac19\uc740 \uac12\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 ORM\uc740 \ubc18\ub824\ub3d9\ubb3c(pet) \uac1d\uccb4\uc5d0\uc11c \uc8fc\uc778(owners) \ud14c\uc774\ube14\ub85c \uc811\uadfc\ud558\ub824\uace0 \ud560 \ub54c \ud574\ub2f9 \ud14c\uc774\ube14\ub85c\ubd80\ud130 \uc815\ubcf4\ub97c \uc5bb\uae30 \uc704\ud55c \ubaa8\ub4e0 \uc791\uc5c5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 ORM\uc5d0\ub294 \ub2e4\uc74c\uc758 \uac83\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4: Django-ORM (Django \ud504\ub808\uc784\uc6cc\ud06c\uc758 \uc77c\ubd80), SQLAlchemy ORM(\ud504\ub808\uc784\uc6cc\ud06c\uc640 \ub3c5\ub9bd\uc801\uc778, SQLAlchemy\uc758 \uc77c\ubd80), Peewee(\ud504\ub808\uc784\uc6cc\ud06c\ub85c\ubd80\ud130 \ub3c5\ub9bd\uc801). \uc5ec\uae30\uc11c \uc6b0\ub9ac\ub294 SQLAlchemy ORM \uc744 \uc0ac\uc6a9\ud574 \uc791\uc5c5\ud558\ub294 \ubc29\ubc95\uc744 \uc0b4\ud3b4\ubcfc \uac83\uc785\ub2c8\ub2e4. \ube44\uc2b7\ud55c \ubc29\ubc95\uc73c\ub85c \ub2e4\ub978 \ubaa8\ub4e0 ORM\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud301 Peewee\ub97c \uc0ac\uc6a9\ud558\ub294 \ubb38\uc11c\ub3c4 \uc81c\uacf5\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4.","title":"ORM(\uac1d\uccb4 \uad00\uacc4 \ub9e4\ud551)"},{"location":"tutorial/sql-databases/#_1","text":"\uc774 \uc608\uc2dc\uc5d0\uc11c, \ub2e4\uc74c\uacfc \uac19\uc740 \uad6c\uc870\ub97c \uac00\uc9c4 sql_app \uc744 \ud558\uc704 \ub514\ub809\ud130\ub9ac\ub85c \uac16\ub294 my_super_project \ub77c\ub294 \ub514\ub809\ud130\ub9ac\uac00 \uc788\ub2e4\uace0 \uac00\uc815\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4: . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 models.py \u2514\u2500\u2500 schemas.py __init__.py \ub294 \ube48 \ud30c\uc77c\uc774\uc9c0\ub9cc, \ud30c\uc774\uc36c\uc5d0\uac8c sql_app \uacfc \uc774\uac83\uc758 \ubaa8\ub4e0 \ubaa8\ub4c8\ub4e4(\ud30c\uc774\uc36c \ud30c\uc77c\ub4e4)\uc774 \ud328\ud0a4\uc9c0\ub77c\ub294 \uac83\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. \uc774\uc81c \uac01\uac01\uc758 \ud30c\uc77c/\ubaa8\ub4c8\uc774 \uc5b4\ub5a4 \uc77c\uc744 \ud558\ub294\uc9c0 \ubd05\uc2dc\ub2e4.","title":"\ud30c\uc77c \uad6c\uc870"},{"location":"tutorial/sql-databases/#sqlalchemy","text":"sql_app/database.py \ud30c\uc77c\uc744 \ubd05\uc2dc\ub2e4.","title":"SQLAlchemy \ubd80\ubd84 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#sqlalchemy_1","text":"from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base ()","title":"SQLAlchemy \ubd80\ubd84 \uc784\ud3ec\ud2b8"},{"location":"tutorial/sql-databases/#sqlalchemy-url","text":"from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () \uc774 \uc608\uc2dc\uc5d0\uc11c, SQLite \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \"\uc5f0\uacb0\"\ud569\ub2c8\ub2e4(SQLite \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud574 \ud30c\uc77c \uc5f4\uae30). \ud574\ub2f9 \ud30c\uc77c\uc740 sql_app.db \ud30c\uc77c\uacfc \ub3d9\uc77c\ud55c \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc704\uce58\ud560 \uac83\uc785\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9 \ubd80\ubd84\uc774 ./sql_app.db \uc778 \uc774\uc720\uc785\ub2c8\ub2e4. PostgreSQL \uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0, \ud558\uae30 \ud589\uc758 \uc8fc\uc11d \ucc98\ub9ac\ub97c \uc81c\uac70\ud558\uba74 \ub429\ub2c8\ub2e4. SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" \uadf8\ub9ac\uace0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub370\uc774\ud130 \ubc0f \uc790\uaca9\uc99d\uba85(credentials)\uc744 \uc870\uc815\ud558\uc138\uc694(MySQL, MariaDB, \uae30\ud0c0 \ub2e4\ub978 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub3c4 \ub3d9\uc77c). \ud301 \uc774\uac83\uc740 \ub2e4\ub978 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud558\uace0\uc790 \ud560 \ub54c \uc218\uc815\ud574\uc57c\ud558\ub294 \uc8fc\ub41c \ud589\uc785\ub2c8\ub2e4.","title":"SQLAlchemy\uc744 \uc704\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 URL \uc0dd\uc131"},{"location":"tutorial/sql-databases/#sqlalchemy-engine","text":"\uccab\ubc88\uc9f8\ub85c \ud574\uc57c\ud560 \uc77c\uc740 SQLAlchemy \"\uc5d4\uc9c4(engine)\"\uc744 \uc0dd\uc131\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ucd94\ud6c4 \ud574\ub2f9 engine \uc744 \ub2e4\ub978 \uacf3\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base ()","title":"SQLAlchemy engine \uc0dd\uc131"},{"location":"tutorial/sql-databases/#_2","text":"\ub2e4\uc74c \uc778\uc218: connect_args = { \"check_same_thread\" : False } \ub294 SQLite \ub97c \uc0ac\uc6a9\ud560 \ub54c\ub9cc \ud544\uc694\ud569\ub2c8\ub2e4. \ub2e4\ub978 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c\ub294 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d \uae30\ubcf8\uc801\uc73c\ub85c SQLite\ub294 \uac01 \uc2a4\ub808\ub4dc\uac00 \ub3c5\ub9bd\uc801\uc778 \uc694\uccad\uc744 \ucc98\ub9ac\ud55c\ub2e4\uace0 \uac00\uc815\ud558\uace0, \ud558\ub098\uc758 \uc2a4\ub808\ub4dc\ub9cc \ud1b5\uc2e0\ud558\ub3c4\ub85d \ud5c8\uc6a9\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \uc11c\ub85c \ub2e4\ub978 \uc791\uc5c5(\uc11c\ub85c \ub2e4\ub978 \uc694\uccad)\uc5d0 \ub300\ud574 \ub73b\ud558\uc9c0 \uc54a\uac8c \ub3d9\uc77c\ud55c \uc5f0\uacb0\uc744 \uacf5\uc720\ud558\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc FastAPI\uc5d0\uc11c, \uc77c\ubc18\uc801\uc778 \ud568\uc218( def )\ub97c \uc0ac\uc6a9\ud558\uba74 \ub458 \uc774\uc0c1\uc758 \uc2a4\ub808\ub4dc\uac00 \ub3d9\uc77c\ud55c \uc694\uccad\uc5d0 \ub300\ud574 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \uc0c1\ud638\uc791\uc6a9\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\uace0, \ub530\ub77c\uc11c connect_args={\"check_same_thread\": False} \ub97c \uc0ac\uc6a9\ud574 SQLite\uac00 \uc774\uac83\uc744 \ud5c8\uc6a9\ud558\ub3c4\ub85d \uc124\uc815\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c, \uac01\uac01\uc758 \uc694\uccad\uc740 \uc758\uc874\uc131\uc5d0\uc11c \uc790\uccb4\uc801\uc778 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0 \uc138\uc158\uc744 \uac00\uc9c0\ubbc0\ub85c \uae30\ubcf8 \uba54\ucee4\ub2c8\uc998\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"\ucc38\uace0"},{"location":"tutorial/sql-databases/#sessionlocal","text":"SessionLocal \ud074\ub798\uc2a4\uc758 \uac01 \uc778\uc2a4\ud134\uc2a4\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. \ud074\ub798\uc2a4 \uc790\uccb4\ub294 \uc544\uc9c1 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc774 \uc544\ub2d9\ub2c8\ub2e4. \ud558\uc9c0\ub9cc SessionLocal \ud074\ub798\uc2a4\uc5d0 \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud558\uba74, \ud574\ub2f9 \uc778\uc2a4\ud134\uc2a4\ub294 \uc2e4\uc9c8\uc801\uc778 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc774 \ub429\ub2c8\ub2e4. SQLAlchemy\ub85c\ubd80\ud130 \uc784\ud3ec\ud2b8\ud558\ub294 Session \uacfc \uad6c\ubd84\ud558\uae30 \uc704\ud574 SessionLocal \uc774\ub77c\uace0 \uc774\ub984\uc744 \ubd99\uc600\uc2b5\ub2c8\ub2e4. SQLAlchemy\ub85c\ubd80\ud130 \uc784\ud3ec\ud2b8\ud558\ub294 Session \uc740 \ucd94\ud6c4 \uc0ac\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. SessionLocal \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574, sessionmaker \ud568\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4: from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base ()","title":"SessionLocal \ud074\ub798\uc2a4 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#base","text":"\uc774\uc81c \ud074\ub798\uc2a4\ub97c \ubc18\ud658\ud558\uae30 \uc704\ud574 declarative_base() \ud568\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774\ud6c4 \uac01\uac01\uc758 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378 \ub610\ub294 \ud074\ub798\uc2a4(ORM \ubaa8\ub378)\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574 \ud574\ub2f9 \ud074\ub798\uc2a4\ub85c\ubd80\ud130 \uc0c1\uc18d\ubc1b\uc744 \uac83\uc785\ub2c8\ub2e4: from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base ()","title":"Base \ud074\ub798\uc2a4 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#_3","text":"sql_app/models.py \ud30c\uc77c\uc744 \ubd05\uc2dc\ub2e4.","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#base-sqlalchemy","text":"SQLAlchemy \ubaa8\ub378\uc744 \ub9cc\ub4e4\uae30 \uc804\uc5d0 \uc6b0\ub9ac\uac00 \uc0dd\uc131\ud55c Base \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ud301 SQLAlchemy\uc5d0\uc11c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \uc0c1\ud638\uc791\uc6a9\ud558\ub294 \ud074\ub798\uc2a4 \ubc0f \uc778\uc2a4\ud134\uc2a4\ub97c \" \ubaa8\ub378 \"\uc774\ub77c\uace0 \uc9c0\uce6d\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Pydantic \ub610\ud55c \ub2e4\ub978 \uac83\ub4e4\uc744 \uc9c0\uce6d\ud558\uae30 \uc704\ud574 \" \ubaa8\ub378 \"\uc774\ub77c\ub294 \uc6a9\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub294\ub370, \uc5ec\uae30\uc11c\ub294 \ub370\uc774\ud130 \uc720\ud6a8\uc131 \uac80\uc0ac, \ubcc0\ud658, \uadf8\ub9ac\uace0 \ud074\ub798\uc2a4 \ubc0f \uc778\uc2a4\ud134\uc2a4\uc758 \ubb38\uc11c\ud654\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. database (\uc0c1\uae30 database.py \ud30c\uc77c)\ub85c\ubd80\ud130 Base \ub97c \uc784\ud3ec\ud2b8\ud558\uc2ed\uc2dc\uc624. \uc774\uac83\uc744 \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc774 \ud074\ub798\uc2a4\ub4e4\uc740 SQLAlchemy \ubaa8\ub378\ub4e4\uc785\ub2c8\ub2e4. from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) __tablename__ \uc18d\uc131\uc740 \uac01\uac01\uc758 \ubaa8\ub378\ub4e4\uc5d0 \ub300\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14 \uc774\ub984\uc744 SQLAlchemy\uc5d0\uac8c \uc54c\ub824\uc90d\ub2c8\ub2e4.","title":"Base \ud074\ub798\uc2a4\ub85c\ubd80\ud130 SQLAlchemy \ubaa8\ub378 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#_4","text":"\uc774\uc81c \ubaa8\ub4e0 \ubaa8\ub378 (\ud074\ub798\uc2a4) \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uac01 \uc18d\uc131\ub4e4\uc740 \ud574\ub2f9 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14\uc758 \uc5f4\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. SQLAlchemy\uc758 Column \uc744 \uae30\ubcf8\uac12\uc73c\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 Integer , String , Boolean \uacfc \uac19\uc774 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc720\ud615\uc744 \uc815\uc758\ud558\ub294 SQLAlchemy \ud074\ub798\uc2a4 \"\ud615(type)\"\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ud569\ub2c8\ub2e4. from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" )","title":"\ubaa8\ub378 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8/\uc5f4 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#_5","text":"\uc774\uc81c \uad00\uacc4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 SQLAlchemy ORM\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 relationship \uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \uc774\uc640 \uad00\uacc4\uac00 \uc788\ub294 \ub2e4\ub978 \ud14c\uc774\ube14\uc758 \uac12\uc744 \ud3ec\ud568\ud558\ub294 \"\ub9c8\ubc95\"\uacfc\ub3c4 \uac19\uc740 \uc18d\uc131\uc774 \ub420 \uac83\uc785\ub2c8\ub2e4. from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) my_user.items \ub85c User \uc758 items \uc18d\uc131\uc5d0 \uc811\uadfc\ud558\uba74, \uc774\uac83\uc740 users \ud14c\uc774\ube14\uc758 \ud574\ub2f9 \ub808\ucf54\ub4dc\ub97c \uac00\ub9ac\ud0a4\ub294 \uc678\ub798\ud0a4\ub97c \uac16\ub294 SQLAlchemy \ubaa8\ub378\uc778 ( items \ud14c\uc774\ube14\uc758) Item \uc758 \ub9ac\uc2a4\ud2b8\ub97c \uac16\uac8c \ub429\ub2c8\ub2e4. my_user.items \uc5d0 \uc811\uadfc\ud558\uba74, SQLAlchemy\ub294 \uc2e4\uc81c\ub85c \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub85c\ubd80\ud130 items \ud14c\uc774\ube14\uc758 \ud56d\ubaa9\uc744 \uac00\uc838\uc640 \uc774 \ub9ac\uc2a4\ud2b8\uc5d0 \uadf8\ub4e4\uc744 \ub123\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 Item \uc758 owner \uc18d\uc131\uc5d0 \uc811\uadfc\ud558\uba74, \uc774\uac83\uc740 users \ud14c\uc774\ube14\uc758 User SQLAlchemy \ubaa8\ub378\uc744 \ud3ec\ud568\ud558\uac8c \ub429\ub2c8\ub2e4. \uc774\uac83\uc740 users \ud14c\uc774\ube14\uc5d0\uc11c \uc5b4\ub290 \ub808\ucf54\ub4dc\ub97c \uac00\uc838\uc62c\uc9c0 \ud310\ub2e8\ud558\uae30 \uc704\ud574 owner_id \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8/\uc5f4\uacfc \uadf8\uac83\uc758 \uc678\ub798\ud0a4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","title":"\uad00\uacc4 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#pydantic","text":"\uc774\uc81c sql_app/schemas.py \ud30c\uc77c\uc744 \ubd05\ub2c8\ub2e4. \ud301 SQLAlchemy\uc758 \ubaa8\ub378 \uacfc Pydantic\uc758 \ubaa8\ub378 \uc0ac\uc774\uc758 \ud63c\ub780\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574, models.py \ud30c\uc77c\uc5d0\uc11c SQLAlchemy \ubaa8\ub378\uc744, schemas.py \uc5d0\uc11c Pydantic \ubaa8\ub378\uc744 \uad00\ub9ac\ud569\ub2c8\ub2e4. \uc774 Pydantic \ubaa8\ub378\ub4e4\uc740 \uc720\ud6a8\ud55c \ub370\uc774\ud130 \ud615\ud0dc\uc778 \"\uc2a4\ud0a4\ub9c8(schema)\"\ub97c \uc815\uc758\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc774\ub294 \uc774\ub294 \uc774 \ub458\uc744 \uc0ac\uc6a9\ud560 \ub54c \uc624\ub294 \ud63c\ub780\uc744 \ubc29\uc9c0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"Pydantic \ubaa8\ub378 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#pydantic_1","text":"\ub370\uc774\ud130\ub97c \uc0dd\uc131\ud558\uac70\ub098 \uc77d\uc744 \ub54c \uacf5\ud1b5\uc801\uc778 \uc18d\uc131\uc744 \uac16\ub3c4\ub85d ItemBase \uacfc UserBase Pydantic \ubaa8\ub378 (\ub610\ub294 \"\uc2a4\ud0a4\ub9c8\")\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uadf8\ub4e4\uacfc \uac19\uc740 \uc18d\uc131\uc744 \uac16\ub3c4\ub85d \uadf8\ub4e4\ub85c\ubd80\ud130 \uc0c1\uc18d\ubc1b\uc740 ItemCreate \uacfc UserCreate \uc744 \ub9cc\ub4e4\uace0, \uc0dd\uc131\uc744 \uc704\ud574 \ud544\uc694\ud55c \ucd94\uac00\uc801\uc778 \ub370\uc774\ud130 (\uc5b4\ud2b8\ub9ac\ubdf0\ud2b8)\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4. \uc0ac\uc6a9\uc790\ub294 \uc0dd\uc131\ub420 \ub54c password \ub3c4 \uac16\uac8c \ub420 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ubcf4\uc548\uc0c1\uc758 \ubb38\uc81c\ub85c, password \ub294 \ub2e4\ub978 Pydantic \ubaa8\ub378 \uc5d0\ub294 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c\ub4e4\uc5b4, \uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ub97c \uc77d\ub294 API\ub85c\ubd80\ud130 \uc804\uc1a1\ub418\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True","title":"Pydantic \ucd08\uae30 \ubaa8\ub378 / \uc2a4\ud0a4\ub9c8 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#sqlalchemy-pydantic","text":"SQLAlchemy \ubaa8\ub378 \uc740 = \uc744 \uc0ac\uc6a9\ud574\uc11c \uc18d\uc131\uc744 \uc815\uc758\ud558\uace0, Column \ub9e4\uac1c\ubcc0\uc218\uc5d0 \ud615\uc744 \uc804\ub2ec\ud569\ub2c8\ub2e4: name = Column ( String ) \ud55c\ud3b8 Pydantic \ubaa8\ub378 \uc740 \uc0c8\ub85c\uc6b4 \ud615 \uc5b4\ub178\ud14c\uc774\uc158 \uad6c\ubb38/\ud615\uc2dd \ud78c\ud2b8\uc778 : \uc744 \uc0ac\uc6a9\ud574 \ud615\uc744 \uc120\uc5b8\ud569\ub2c8\ub2e4: name : str = \uacfc : \uc744 \ud5f7\uac08\ub9ac\uc9c0 \uc54a\uae30 \uc704\ud574 \uc774\uac83\uc744 \uae30\uc5b5\ud558\uc2ed\uc2dc\uc624.","title":"SQLAlchemy \uc2a4\ud0c0\uc77c\uacfc Pydantic \uc2a4\ud0c0\uc77c"},{"location":"tutorial/sql-databases/#pydantic_2","text":"\uc774\uc81c \ub370\uc774\ud130\ub97c \uc77d\uace0 API\ub97c \ud1b5\ud574 \ubc18\ud658\ud560 \ub54c \uc0ac\uc6a9\ub418\ub294 Pydantic \ubaa8\ub378 (\uc2a4\ud0a4\ub9c8)\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ud56d\ubaa9\uc744 \uc0dd\uc131\ud558\uae30 \uc804\uc5d0\ub294 \uc5b4\ub5a4 ID\ub97c \ud560\ub2f9\ud574\uc57c\ud560\uc9c0 \ubaa8\ub974\uc9c0\ub9cc, \ud574\ub2f9 \ud56d\ubaa9\uc744 \uc77d\uc744 \ub54c(API\ub97c \ud1b5\ud574 \ubc18\ud658\ud560 \ub54c) \uc6b0\ub9ac\ub294 \uadf8\uac83\uc758 ID\ub97c \uc54c\uace0 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c, \uc0ac\uc6a9\uc790\ub97c \uc77d\uc744 \ub54c, \uc6b0\ub9ac\ub294 \ud574\ub2f9 \uc0ac\uc6a9\uc790\uc5d0 \uc18d\ud55c \uc544\uc774\ud15c\uc744 \ud3ec\ud568\ud558\ub294 items \ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud574\ub2f9 \uc544\uc774\ud15c\ub4e4\uc758 ID\ubfd0 \uc544\ub2c8\ub77c \uc544\uc774\ud15c\uc744 \uc77d\uae30 \uc704\ud574 \uc815\uc758\ud55c \ubaa8\ub4e0 Pydantic \ubaa8\ub378 \uc758 \ub370\uc774\ud130\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: Item . from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True \ud301 API\ub85c\ubd80\ud130 \ubc18\ud658\ub418\uc5b4 \uc0ac\uc6a9\uc790\ub97c \uc77d\uae30 \uc704\ud574 \uc0ac\uc6a9\ub418\ub294 Pydantic \ubaa8\ub378 User \uc740 password \ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc8fc\uc758\ud558\uc2ed\uc2dc\uc624.","title":"\uc77d\uace0 \ubc18\ud658\ud558\uae30 \uc704\ud55c Pydantic \ubaa8\ub378 / \uc2a4\ud0a4\ub9c8 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#pydantic-orm_mode","text":"\uc774\uc81c, \uc77d\uae30\uc704\ud55c Pydantic \ubaa8\ub378 \ub4e4\uc778 Item \uacfc User \uc5d0 \ub0b4\ubd80\uc801\uc778 Config \ud074\ub798\uc2a4\ub97c \ucd94\uac00\ud569\ub2c8\ub2e4. \uc774 Config \ud074\ub798\uc2a4\ub294 Pydantic \ud658\uacbd \uc124\uc815\uc744 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. Config \uc5d0\uc11c, orm_mode = True \ub85c \uc124\uc815\ud569\ub2c8\ub2e4. from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True \ud301 = \ub97c \uc0ac\uc6a9\ud574 \ub2e4\uc74c\uacfc \uac19\uc774 \uac12\uc744 \ud560\ub2f9\ud55c\ub2e4\ub294 \uac83\uc5d0 \uc8fc\uc758\ud558\uc2ed\uc2dc\uc624: orm_mode = True \ud615 \uc120\uc5b8 \ub54c\ucc98\ub7fc : \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \uc124\uc815\uac12\uc744 \ud560\ub2f9\ud558\ub294 \uac83\uc774\uc9c0, \ud615\uc744 \uc120\uc5b8\ud558\ub294 \uac83\uc774 \uc544\ub2d9\ub2c8\ub2e4. Pydantic\uc758 orm_mode \ub294 Pydantic \ubaa8\ub378 \uc5d0\uac8c dict \uac00 \uc544\ub2cc ORM \ubaa8\ub378(\ub610\ub294 \ub2e4\ub978 \uc18d\uc131\uc774 \uc788\ub294 \uc784\uc758\uc758 \uac1d\uccb4)\uc774\uc5b4\ub3c4 \ub370\uc774\ud130\ub97c \uc77d\uc744 \uac83\uc744 \uc9c0\uc2dc\ud569\ub2c8\ub2e4. \uc774 \ubc29\ubc95\uc73c\ub85c, dict \uc5d0\uc11c id \uac12\uc744 \uac00\uc838\uc624\uae30 \uc704\ud574 \ub2e4\uc74c\uc744 \uc0ac\uc6a9\ud558\ub294 \ub300\uc2e0: id = data [ \"id\" ] \ub2e4\uc74c\uacfc \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc18d\uc131\uc73c\ub85c\ubd80\ud130 \uac12\uc744 \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4: id = data . id \uc774\ub85c\uc368 Pydantic \ubaa8\ub378 \uc774 ORM\uacfc \ud638\ud658\ub418\uba70, \uacbd\ub85c \uc791\ub3d9 \uc758 response_model \uc778\uc790\ub85c \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378\uc744 \ubc18\ud658\ubc1b\uace0 \uc774\ub85c\ubd80\ud130 \ub370\uc774\ud130\ub97c \uc77d\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"Pydantic\uc758 orm_mode \uc0ac\uc6a9"},{"location":"tutorial/sql-databases/#orm_1","text":"SQLAlchemy\uc640 \ub9ce\uc740 \ub2e4\ub978 ORM\ub4e4\uc740 \uc790\ub3d9\uc801\uc73c\ub85c \"\uc9c0\uc5f0 \ub85c\ub529(lazy loading)\"\uc744 \ud569\ub2c8\ub2e4. \uc774\ub294 \ub2f9\uc2e0\uc774 \ud574\ub2f9 \ub370\uc774\ud130\uac00 \ud3ec\ud568\ub41c \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc5d0 \uc811\uadfc\ud558\uc9c0 \uc54a\ub294 \ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uad00\uacc4\uc5d0 \uad00\ud55c \ub370\uc774\ud130\ub97c \uac00\uc838\uc624\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, items \uc18d\uc131\uc5d0 \uc811\uadfc\ud558\uba74: current_user . items SQLAlchemy\ub294 \uadf8\uc81c\uc11c\uc57c items \ud14c\uc774\ube14\uc5d0 \uac00\uc11c \ud574\ub2f9 \uc720\uc800\uc5d0 \uc18d\ud55c \uc544\uc774\ud15c\ub4e4\uc744 \uac00\uc838\uc635\ub2c8\ub2e4. orm_mode \uac00 \uc5c6\ub2e4\uba74, \uacbd\ub85c \uc791\ub3d9 \uc73c\ub85c\ubd80\ud130 SQLAlchemy \ubaa8\ub378\uc744 \ubc18\ud658\ud560 \ub54c \uad00\uacc4\uc5d0 \ub300\ud55c \uc815\ubcf4\ub294 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Pydantic \ubaa8\ub378\uc5d0\uc11c \ud574\ub2f9 \uad00\uacc4\ub4e4\uc744 \uc120\uc5b8\ud55c \uacbd\uc6b0\ub77c\ub3c4 \uadf8\ub7ec\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 ORM \ubaa8\ub4dc\ub97c \uc0ac\uc6a9\ud558\uba74 Pydantic\uc774 dict \ub85c \uac00\uc815\ud558\ub294 \ub300\uc2e0 \uc5b4\ud2b8\ub9ac\ubdf0\ud2b8\uc5d0\uc11c \ud544\uc694\ud55c \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud558\ub824\uace0 \ud558\uae30 \ub54c\ubb38\uc5d0, \ubc18\ud658\ud558\uace0\uc790 \ud558\ub294 \ud2b9\uc815\ud55c \ub370\uc774\ud130\ub97c \uc120\uc5b8\ud560 \uc218 \uc788\uc73c\uba70 ORM\uc5d0\uc11c\ub3c4 \ub370\uc774\ud130\ub4e4\uc744 \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"ORM \ubaa8\ub4dc\uc5d0 \ub300\ud55c \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d"},{"location":"tutorial/sql-databases/#crud","text":"sql_app/crud.py \ud30c\uc77c\uc744 \ucc38\uace0\ud558\uc2ed\uc2dc\uc624. \uc774 \ud30c\uc77c\uc5d0\uc11c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc758 \ub370\uc774\ud130\uc640 \uc0c1\ud638\uc791\uc6a9 \ud558\uae30 \uc704\ud55c \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ud568\uc218\ub4e4\uc744 \uc815\uc758\ud560 \uac83\uc785\ub2c8\ub2e4. CRUD \ub294 \ub2e4\uc74c\uc758 \uac83\ub4e4\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4: \uc0dd\uc131( C reate), \uc77d\uae30( R ead), \uc5c5\ub370\uc774\ud2b8( U pdate), \uc0ad\uc81c( D elete). \ud558\uc9c0\ub9cc \uc608\uc2dc\uc5d0\uc11c\ub294 \uc0dd\uc131\uacfc \uc77d\uae30\ub9cc \ub2e4\ub8f9\ub2c8\ub2e4.","title":"CRUD \uc720\ud2f8\ub9ac\ud2f0"},{"location":"tutorial/sql-databases/#_6","text":"sqlalchemy.orm \uc5d0\uc11c Session \uc744 \uc784\ud3ec\ud2b8\ud558\uc2ed\uc2dc\uc624. \uc774\ub85c\uc368 db \ub9e4\uac1c\ubcc0\uc218\uc758 \ud615\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc73c\uba70 \ub354 \ub098\uc740 \ud615 \uccb4\ud06c \ubc0f \ud568\uc218\uc758 \uc644\uc131\ub3c4\ub97c \uae30\ub300\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. models (SQLAlchemy \ubaa8\ub378)\uc640 schemas (Pydantic \ubaa8\ub378 / \uc2a4\ud0a4\ub9c8)\ub97c \uc784\ud3ec\ud2b8 \ud558\uc2ed\uc2dc\uc624. \ub2e4\uc74c\uc744 \uc704\ud55c \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\ub4e4\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4: ID\uc640 \uc774\uba54\uc77c\uc744 \uc774\uc6a9\ud574 \ud558\ub098\uc758 \uc0ac\uc6a9\uc790 \uc77d\uae30 \ub2e4\uc218\uc758 \uc0ac\uc6a9\uc790 \uc77d\uae30 \ub2e4\uc218\uc758 \uc544\uc774\ud15c \uc77d\uae30 from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item \ud301 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc640\ub294 \ubcc4\uac1c\ub85c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \uc0c1\ud638 \uc791\uc6a9\ud558\ub294 \ub370\uc5d0\ub9cc \uc0ac\uc6a9\ub418\ub294 \ud568\uc218\ub4e4(\uc0ac\uc6a9\uc790 \ub610\ub294 \uc544\uc774\ud15c\uc744 \uac00\uc838\uc624\ub294 \ud568\uc218)\uc744 \uc0dd\uc131\ud568\uc73c\ub85c\uc368 \uc5ec\ub7ec \ubd80\ubd84\uc5d0\uc11c \uc774\ub4e4\uc744 \uc27d\uac8c \uc7ac\uc0ac\uc6a9\ud560 \uc218 \uc788\uc73c\uba70 \ub2e8\uc704 \ud14c\uc2a4\ud2b8 \ub97c \ucd94\uac00\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ub370\uc774\ud130 \uc77d\uae30"},{"location":"tutorial/sql-databases/#_7","text":"\ub370\uc774\ud130\ub97c \uc0dd\uc131\ud558\ub294 \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \ub2e8\uacc4\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: \ub370\uc774\ud130\uc640 \ud568\uaed8 SQLAlchemy \ubaa8\ub378 \uc778\uc2a4\ud134\uc2a4 \uc0dd\uc131 \ud574\ub2f9 \uc778\uc2a4\ud134\uc2a4 \uac1d\uccb4\ub97c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc5d0 \ucd94\uac00( add ) \ubcc0\uacbd \uc0ac\ud56d\uc774 \uc800\uc7a5\ub420 \uc218 \uc788\ub3c4\ub85d \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \ucee4\ubc0b( commit ) \uc0dd\uc131\ub41c ID\uc640 \uac19\uc740, \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc758 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\ub97c \ud3ec\ud568\ud560 \uc218 \uc788\ub3c4\ub85d \uc778\uc2a4\ud134\uc2a4 \uc0c8\ub85c\uace0\uce68( refresh ) from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item \ud301 User \uc744 \uc704\ud55c SQLAlchemy \ubaa8\ub378\uc740 \uc548\uc804\ud558\uac8c \uc554\ud638\ud654\ub41c \ube44\ubc00\ubc88\ud638\uc778 hashed_password \ub97c \ud3ec\ud568\ud574\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 API \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc81c\uacf5\ud558\ub294 \uac83\uc740 \uc554\ud638\ud654\ub418\uc9c0 \uc54a\uc740 \ube44\ubc00\ubc88\ud638\uc774\uae30 \ub54c\ubb38\uc5d0, \uadf8\uac83\uc744 \ucd94\ucd9c\ud55c \ub2e4\uc74c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc554\ud638\ud654\ub41c \ube44\ubc00\ubc88\ud638\ub97c \uc0dd\uc131\ud574\uc57c\ud569\ub2c8\ub2e4. \uadf8 \ub2e4\uc74c, \ud574\ub2f9 \uac12\uc744 hashed_password \uc778\uc790\uc5d0 \uc804\ub2ec\ud558\uace0 \uc800\uc7a5\ud569\ub2c8\ub2e4. \uacbd\uace0 \ube44\ubc00\ubc88\ud638\uac00 \uc554\ud638\ud654\ub418\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \uc774 \uc608\uc2dc\ub294 \uc548\uc804\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc2e4\uc81c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c\ub294 \ube44\ubc00\ubc88\ud638\ub97c \uc554\ud638\ud654\ud558\uace0 \uc808\ub300 \ud50c\ub808\uc778 \ud14d\uc2a4\ud2b8\ub85c \uc800\uc7a5\ud558\uc9c0 \ub9c8\uc2ed\uc2dc\uc624. \ub354 \ub9ce\uc740 \uc815\ubcf4\uac00 \ud544\uc694\ud558\ub2e4\uba74, \uc790\uc2b5\uc11c\uc758 \ubcf4\uc548(Security) \ud56d\ubaa9\uc744 \ucc38\uace0\ud558\uc2ed\uc2dc\uc624. \uc5ec\uae30\uc11c\ub294 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc758 \ub3c4\uad6c\uc640 \uc5ed\ud559\uc5d0\ub9cc \ucd08\uc810\uc744 \ub9de\ucd9c \uac83\uc785\ub2c8\ub2e4. \ud301 \uac01\uac01\uc758 \ud0a4\uc6cc\ub4dc \uc778\uc790\ub4e4\uc744 Item \uc5d0 \uc804\ub2ec\ud558\uace0 \uc774\ub4e4 \uac01\uac01\uc744 Pydantic \ubaa8\ub378 \ub85c \uc77d\ub294 \ub300\uc2e0, \ub2e4\uc74c\uacfc \uac19\uc774 Pydantic \ubaa8\ub378 \uc758 \ub370\uc774\ud130\ub85c dict \ub97c \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: item.dict() \uadf8\ub2e4\uc74c dict \uc758 \ud0a4-\uac12 \uc30d\ub4e4\uc744 SQLAlchemy Item \uc758 \ud0a4\uc6cc\ub4dc \uc778\uc790\ub4e4\ub85c \uc804\ub2ec\ud569\ub2c8\ub2e4: Item(**item.dict()) \uc774\ud6c4 Pydantic \ubaa8\ub378 \uc774 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294 \uc5ec\ubd84\uc758 \ud0a4\uc6cc\ub4dc \uc778\uc790\uc778 owner_id \ub97c \uc804\ub2ec\ud569\ub2c8\ub2e4: Item(**item.dict(), owner_id=user_id)","title":"\ub370\uc774\ud130 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#main-fastapi","text":"\uc774\uc81c sql_app/main.py \ud30c\uc77c\uc5d0\uc11c \uc9c0\uae08\uae4c\uc9c0 \uc791\uc131\ud55c \ubaa8\ub4e0 \ubd80\ubd84\ub4e4\uc744 \ud1b5\ud569\ud558\uace0 \uc0ac\uc6a9\ud569\uc2dc\ub2e4.","title":"Main FastAPI \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8"},{"location":"tutorial/sql-databases/#_8","text":"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14\uc744 \uc0dd\uc131\ud558\ub294 \ub9e4\uc6b0 \uac04\ub2e8\ud55c \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud14c\uc774\ube14 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#alembic","text":"\uc77c\ubc18\uc801\uc73c\ub85c Alembic \uc744 \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \ucd08\uae30\ud654(\ud14c\uc774\ube14 \uc0dd\uc131 \ub4f1)\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c Alembic\uc744 \uc0ac\uc6a9\ud558\uc5ec \"\ub9c8\uc774\uadf8\ub808\uc774\uc158\"\uc744 \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4 (\uc774\uac83\uc774 Alembic\uc758 \uc8fc\uc694 \uc5ed\ud560\uc774\uae30\ub3c4 \ud569\ub2c8\ub2e4). \"\ub9c8\uc774\uadf8\ub808\uc774\uc158\"\uc774\ub780 SQLAlchemy \ubaa8\ub378 \uad6c\uc870\uc5d0 \ubcc0\ud654\uac00 \uc0dd\uae30\uac70\ub098, \uc0c8\ub85c\uc6b4 \uc18d\uc131\uc744 \ucd94\uac00\ud558\ub294 \ub4f1\uc758 \uc791\uc5c5\uc774 \uc774\ub8e8\uc5b4\uc9c8 \ub54c\ub9c8\ub2e4 \uadf8\ub7ec\ud55c \ubcc0\uacbd\uc0ac\ud56d\ub4e4\uc744 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \ubcf5\uc81c\ud558\uac70\ub098, \uc0c8\ub85c\uc6b4 \uceec\ub7fc \ubc0f \ud14c\uc774\ube14\uc744 \ucd94\uac00\ud558\uae30 \uc704\ud574 \ud544\uc694\ud55c \ub2e8\uacc4\uc758 \uc9d1\ud569\uc785\ub2c8\ub2e4. FastAPI \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c\uc758 Alembic\uc5d0 \ub300\ud55c \uc608\uc2dc\ub97c Project Generation - Template \uc758 \ud15c\ud50c\ub9bf\ub4e4\uc5d0\uc11c \ucc3e\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc18c\uc2a4\ucf54\ub4dc\uc758 alembic \ub514\ub809\ud130\ub9ac \ub97c \ucc38\uace0\ud558\uc2ed\uc2dc\uc624.","title":"Alembic \ucc38\uace0\uc0ac\ud56d"},{"location":"tutorial/sql-databases/#_9","text":"\uc815\ubcf4 \uc774 \uc791\uc5c5\uc744 \uc218\ud589\ud558\uae30 \uc704\ud574, \ud30c\uc774\uc36c 3.7 \uc774\uc0c1\uc758 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud558\uac70\ub098 \ud30c\uc774\uc36c 3.6 \ubc84\uc804 \uc0ac\uc6a9\uc2dc \"backports\"\ub97c \uc124\uce58\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4: $ pip install async-exit-stack async-generator \uc774\uac83\uc740 async-exit-stack \uacfc async-generator \ub97c \uc124\uce58\ud569\ub2c8\ub2e4. \ub9c8\uc9c0\ub9c9\uc5d0 \uc124\uba85\ud560 \"\ubbf8\ub4e4\uc6e8\uc5b4\"\uc640 \ud568\uaed8 \ub2e4\ub978 \uba54\uc11c\ub4dc\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \uc758\uc874\uc131\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574 sql_app/databases.py \ud30c\uc77c\uc758 SessionLocal \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. \uac01 \uc694\uccad\ub9c8\ub2e4 \ub3c5\ub9bd\uc801\uc778 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158/\uc5f0\uacb0 ( SessionLocal )\uc774 \uc788\uace0, \ubaa8\ub4e0 \uc694\uccad\uc5d0 \ub300\ud574 \ub3d9\uc77c\ud55c \uc138\uc158\uc744 \uc0ac\uc6a9\ud55c \ud6c4 \uc694\uccad\uc774 \uc644\ub8cc\ub418\uba74 \uc885\ub8cc\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ud6c4 \ub2e4\uc74c \uc694\uccad\uc5d0 \ub300\ud574\uc11c\ub294 \uc0c8\ub85c\uc6b4 \uc138\uc158\uc774 \uc0dd\uc131\ub420 \uac83\uc785\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574, yield \ub97c \uc0ac\uc6a9\ud55c \uc758\uc874\uc131 \uc5d0\uc11c \uc124\uba85\ud55c \uac83\uacfc \uac19\uc774 yield \ub97c \uc0ac\uc6a9\ud574 \uc0c8\ub85c\uc6b4 \uc758\uc874\uc131\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc774 \uc758\uc874\uc131\uc740 \ud558\ub098\uc758 \uc694\uccad\uc5d0 \ub300\ud574\uc11c\ub9cc \uc0ac\uc6a9\ub41c \ud6c4 \uc694\uccad\uc774 \uc644\ub8cc\ub418\uba74 \uc885\ub8cc\ub418\ub294 \uc0c8\ub85c\uc6b4 SQLAlchemy SessionLocal \uc744 \uc0dd\uc131\ud560 \uac83\uc785\ub2c8\ub2e4. from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \uc815\ubcf4 SessionLocal() \uc758 \uc0dd\uc131\uacfc \uc694\uccad\uc758 \ucc98\ub9ac\ub97c try \ube14\ub85d\uc5d0 \ubc30\uce58\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 finally \ube14\ub85d\uc5d0\uc11c \uc774\ub97c \uc885\ub8cc\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc694\uccad \uc774\ud6c4 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc774 \uc5b8\uc81c\ub098 \ub2eb\ud600\uc788\ub2e4\ub294 \uc0ac\uc2e4\uc744 \ud655\uc2e4\ud788 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc694\uccad \ucc98\ub9ac \ub3c4\uc911 \uc608\uc678\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0\ub77c\ub3c4 \uadf8\ub7ec\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc885\ub8cc \ucf54\ub4dc( yield \uc774\ud6c4)\uc5d0\uc11c \ub2e4\ub978 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uc218\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \uc790\uc138\ud55c \uc0ac\ud56d\uc740 yield \ubc0f HTTPException \uc744 \uc0ac\uc6a9\ud55c \uc758\uc874\uc131 \uc744 \ucc38\uace0\ud558\uc2ed\uc2dc\uc624. \uadf8\ub7f0 \ub2e4\uc74c, \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc5d0\uc11c \uc758\uc874\uc131\uc744 \uc0ac\uc6a9\ud560 \ub54c, SQLAlchemy\ub85c\ubd80\ud130 \uc9c1\uc811 \uc784\ud3ec\ud2b8\ud55c Session \ud615\uc73c\ub85c \uc774\uac83\uc744 \uc120\uc5b8\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc5d0\ub514\ud130\uac00 db \ub9e4\uac1c\ubcc0\uc218\uac00 Session \ud615\uc784\uc744 \uc54c \uc218 \uc788\uc73c\ubbc0\ub85c \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \ub354 \ub098\uc740 \uc5d0\ub514\ud130 \uc9c0\uc6d0\uc744 \uc81c\uacf5\ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4: from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d db \ub9e4\uac1c\ubcc0\uc218\ub294 \uc0ac\uc2e4 SessionLocal \ud615\uc774\uc9c0\ub9cc, ( sessionmaker() \ub85c\ubd80\ud130 \ub9cc\ub4e4\uc5b4\uc9c4) \ud574\ub2f9 \ud074\ub798\uc2a4\uac00 SQLAlchemy Session \uc758 \"\ud504\ub85d\uc2dc\"\uc774\ubbc0\ub85c, \uc5d0\ub514\ud130\ub294 \uc5b4\ub5a4 \uba54\uc11c\ub4dc\ub4e4\uc774 \uc81c\uacf5\ub418\ub294\uc9c0\ub294 \uc54c\uc9c0 \ubabb\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Session \ud615\uc73c\ub85c \uc120\uc5b8\ud568\uc73c\ub85c\uc368, \uc5d0\ub514\ud130\ub294 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uba54\uc11c\ub4dc\ub4e4( .add() , .query() , .commit() \ub4f1)\uc744 \uc54c \uc218 \uc788\uace0 (\uc790\ub3d9\uc644\uc131\uacfc \uac19\uc740) \ub354 \ub098\uc740 \uc9c0\uc6d0\uc744 \uc81c\uacf5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud615 \uc120\uc5b8\uc774 \uc2e4\uc81c \uac1d\uccb4\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4.","title":"\uc758\uc874\uc131 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#fastapi","text":"\ub4dc\ub514\uc5b4, \uc5ec\uae30 \ud45c\uc900 FastAPI \uacbd\ub85c \uc791\ub3d9 \ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \uc758\uc874\uc131 \ub0b4\ubd80\uc5d0\uc11c yield \ub97c \uc0ac\uc6a9\ud574 \uac01 \uc694\uccad \uc774\uc804\uc5d0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc744 \uc0dd\uc131\ud558\uace0 \uc774\ud6c4 \uc885\ub8cc\ud569\ub2c8\ub2e4. \uadf8\ub2e4\uc74c \ud574\ub2f9 \uc138\uc158\uc744 \uc9c1\uc811 \uac00\uc838\uc624\uae30 \uc704\ud574 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \ud544\uc694\ud55c \uc758\uc874\uc131\uc744 \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574, \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c crud.get_user \ub97c \uc9c1\uc811 \ud638\ucd9c\ud574\uc11c \ud574\ub2f9 \uc138\uc158\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud301 \ubc18\ud658\ub418\ub294 \uac12\uc740 SQLAlchemy \ubaa8\ub378\uc774\uac70\ub098 SQLAlchemy \ubaa8\ub378\ub4e4\uc758 \ubaa9\ub85d\uc774\ub77c\ub294 \uc810\uc744 \uc8fc\uc758\ud558\uc2ed\uc2dc\uc624. \ud558\uc9c0\ub9cc \ubaa8\ub4e0 \uacbd\ub85c \uc791\ub3d9 \uc774 'orm_mode'\uc744 \uc0ac\uc6a9\ud558\uc5ec Pydantic \ubaa8\ub378 /\uc2a4\ud0a4\ub9c8\ub97c \uc0ac\uc6a9\ud55c 'response_model'\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\ubbc0\ub85c Pydantic \ubaa8\ub378\uc5d0 \uc120\uc5b8\ub41c \ub370\uc774\ud130\ub294 \uc774\ub85c\ubd80\ud130 \ucd94\ucd9c\ub41c \ud6c4 \ubaa8\ub4e0 \uc77c\ubc18 \ud544\ud130\ub9c1 \ubc0f \uc720\ud6a8\uc131 \uac80\uc0ac\ub97c \ud1b5\ud574 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \ubc18\ud658\ub429\ub2c8\ub2e4. \ud301 List[schemas.Item] \uacfc \uac19\uc740 \ud45c\uc900 \ud30c\uc774\uc36c \ud615\uc744 \uac00\uc9c4 response_models \uac00 \uc788\ub2e4\ub294 \uac83\ub3c4 \uc8fc\uc758\ud558\uc2ed\uc2dc\uc624. \uadf8\ub7ec\ub098 List \uc758 \uc694\uc1fc / \ub9e4\uac1c\ubcc0\uc218\ub294 'orm_mode'\uac00 \uc788\ub294 Pydantic \ubaa8\ub378 \uc774\uae30 \ub54c\ubb38\uc5d0, \ub370\uc774\ud130\ub294 \ubb38\uc81c \uc5c6\uc774 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0\uac8c \ubc18\ud658\ub429\ub2c8\ub2e4.","title":"FastAPI \uacbd\ub85c \ub3d9\uc791 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#def-vs-async-def","text":"\uc5ec\uae30\uc11c \uc6b0\ub9ac\ub294 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \ub0b4\ubd80\uc640 \uc758\uc874\uc131\uc5d0\uc11c SQLAlchemy \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\uace0, \uacb0\uacfc\uc801\uc73c\ub85c \uc678\ubd80 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \ud1b5\uc2e0\ud569\ub2c8\ub2e4. \uc774\ub294 \uc7a0\uc7ac\uc801\uc73c\ub85c \"\ub300\uae30\"\ub97c \ud544\uc694\ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 SQLAlchemy\uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc9c1\uc811\uc801\uc778 await \uc758 \uc0ac\uc6a9\uc774 \ubd88\uac00\ud569\ub2c8\ub2e4: user = await db . query ( User ) . first () \ub300\uc2e0 \uc774\ub807\uac8c \uc0ac\uc6a9\ud569\ub2c8\ub2e4: user = db . query ( User ) . first () \uc774\ud6c4 async def \uac00 \uc544\ub2cc \uc77c\ubc18\uc801\uc778 def \ub97c \uc0ac\uc6a9\ud574\uc11c \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc640 \uc758\uc874\uc131\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \uc120\uc5b8\ud569\ub2c8\ub2e4: @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) ... \uc815\ubcf4 \uad00\uacc4\ud615 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0 \ube44\ub3d9\uae30\uc801\uc73c\ub85c \uc5f0\uacb0\ud574\uc57c\ud560 \uacbd\uc6b0, Async SQL (Relational) Databases \ub97c \ucc38\uace0\ud558\uc2ed\uc2dc\uc624. \ub9e4\uc6b0 \uc138\ubd80\uc801\uc778 \uae30\uc220\uc801 \uc0ac\ud56d \ub9cc\uc57d \ub2f9\uc2e0\uc774 \ud638\uae30\uc2ec\uc774 \uc788\uace0 \uae4a\uc740 \uae30\uc220\uc801 \uc9c0\uc2dd\uc744 \uac16\uace0\uc788\uc744 \uacbd\uc6b0, async def vs def \uac00 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ub418\ub294\uc9c0\uc5d0 \ub300\ud574 Async \ubb38\uc11c\uc758 \ub9e4\uc6b0 \uc138\ubd80\uc801\uc778 \uae30\uc220\uc801 \uc0ac\ud56d\ub4e4\uc744 \ud655\uc778\ud574 \ubcf4\uc2ed\uc2dc\uc624.","title":"def vs async def"},{"location":"tutorial/sql-databases/#_10","text":"\uc6b0\ub9ac\ub294 SQLAlchemy\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\uace0 \uc788\uc73c\uba70 \uc774\uac83\uc774 FastAPI \uc640 \ub3d9\uc791\ud558\uae30 \uc704\ud574 \uc5b4\ub5a0\ud55c \uc885\ub958\uc758 \ud50c\ub7ec\uadf8\uc778\ub3c4 \ud544\uc694\ub85c\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0, \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub9c8\uc774\uadf8\ub808\uc774\uc158 \uc744 Alembic \uacfc \uc9c1\uc811 \ud1b5\ud569\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 SQLAlchemy\uc640 \uad00\ub828\ub41c \ucf54\ub4dc\uc640 SQLAlchemy \ubaa8\ub378\ub4e4\uc774 \ubd84\ub9ac\ub41c \ub3c5\ub9bd\uc801\uc778 \ud30c\uc77c\ub4e4\uc5d0 \uc874\uc7ac\ud558\uae30 \ub54c\ubb38\uc5d0, Alembic\uc744 \uc0ac\uc6a9\ud55c \ub9c8\uc774\uadf8\ub808\uc774\uc158\uc744 FastAPI, Pydantic \uae30\ud0c0 \uc5b4\ub290 \uac83\ub3c4 \uc124\uce58\ud558\uc9c0 \uc54a\uace0 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c, \ub3d9\uc77c\ud55c SQLAlchemy \ubaa8\ub378 \ubc0f \uc720\ud2f8\ub9ac\ud2f0\ub97c FastAPI \uc640 \uad00\ub828\uc774 \uc5c6\ub294 \ub2e4\ub978 \ubd80\ubd84\uc758 \ucf54\ub4dc\uc5d0\uc11c\ub3c4 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, Celery , RQ , \ub610\ub294 ARQ \uc640 \ud568\uaed8 \ubc31\uadf8\ub77c\uc6b4\ub4dc \uc791\uc5c5\uc790\uc5d0\uc11c\uc758 \uc0ac\uc6a9\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.","title":"\ub9c8\uc774\uadf8\ub808\uc774\uc158"},{"location":"tutorial/sql-databases/#_11","text":"sql_app \uc744 \ud558\uc704 \ub514\ub809\ud1a0\ub9ac\ub85c \uac16\ub294 my_super_project \ub514\ub809\ud1a0\ub9ac\uac00 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. sql_app \uc5d0\ub294 \ub2e4\uc74c\uc758 \ud30c\uc77c\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4: sql_app/__init__.py : \ube48 \ud30c\uc77c sql_app/database.py : from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () sql_app/models.py : from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) sql_app/schemas.py : from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True sql_app/crud.py : from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item sql_app/main.py : from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items","title":"\ubaa8\ub4e0 \ud30c\uc77c \uac80\ud1a0"},{"location":"tutorial/sql-databases/#_12","text":"\uc774 \ucf54\ub4dc\ub97c \ubcf5\uc0ac\ud574\uc11c \uadf8\ub300\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 \uc0ac\uc2e4 \uc774 \ubb38\uc11c\ub4e4\uc758 \ub300\ubd80\ubd84\uc758 \ucf54\ub4dc\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc5ec\uae30\uc5d0 \ud45c\uc2dc\ub41c \ucf54\ub4dc\ub294 \ud14c\uc2a4\ud2b8\uc758 \uc77c\ubd80\uc785\ub2c8\ub2e4. Uvicorn\uc744 \ud1b5\ud574 \uc2e4\ud589\ud569\ub2c8\ub2e4: $ uvicorn sql_app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \uadf8\ub2e4\uc74c, http://127.0.0.1:8000/docs \uc5d0\uc11c \ube0c\ub77c\uc6b0\uc800\ub97c \uc5f4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c FastAPI \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uacfc \uc0c1\ud638\uc791\uc6a9\ud558\uba70 \uc2e4\uc81c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc77d\ub294 \uac83\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4:","title":"\ud655\uc778\ud558\uc2ed\uc2dc\uc624"},{"location":"tutorial/sql-databases/#_13","text":"FastAPI\uc640 \uad00\uacc4 \uc5c6\uc774 \ub514\ubc84\uae45\uc744 \ud558\uac70\ub098, \ud14c\uc774\ube14, \uceec\ub7fc, \ub808\ucf54\ub4dc\ub97c \ucd94\uac00\ud558\uac70\ub098, \ub370\uc774\ud130\ub97c \uc218\uc815\ud558\ub294 \ub4f1\uc758 \uc791\uc5c5\uc744 \uc704\ud574 SQLite \ub370\uc774\ud130\ubca0\uc774\uc2a4(\ud30c\uc77c)\ub97c \uc9c1\uc811 \uc2e4\ud589\ud558\uace0 \uc2f6\ub2e4\uba74, DB Browser for SQLite \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4: SQLite Viewer \ub098 ExtendsClass \uc640 \uac19\uc740 \uc628\ub77c\uc778 SQLite \ube0c\ub77c\uc6b0\uc800\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \uc9c1\uc811\uc801\uc778 \uc0c1\ud638\uc791\uc6a9"},{"location":"tutorial/sql-databases/#db","text":"\ud30c\uc774\uc36c 3.7 \uc744 \uc0ac\uc6a9\ud558\uace0 \uc788\uc9c0 \uc54a\uac70\ub098 \ud30c\uc774\uc36c 3.6 \uc5d0\uc11c \uc0c1\uae30 \uc5b8\uae09\ud55c \u201cbackports\u201d\ub97c \uc124\uce58\ud560 \uc218 \uc5c6\uc5b4 yield \ub97c \uc0ac\uc6a9\ud55c \uc758\uc874\uc131\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74 \uc720\uc0ac\ud55c \ubc29\uc2dd\uc73c\ub85c \u201c\ubbf8\ub4e4\uc6e8\uc5b4\u201d\uc5d0 \uc138\uc158\uc744 \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \u201c\ubbf8\ub4e4\uc6e8\uc5b4\u201d\ub294 \uc694\uccad\uc774 \uc788\uc744 \ub54c\ub9c8\ub2e4 \uc2e4\ud589\ub418\ub294 \ud568\uc218\ub85c, \uc77c\ubd80\ub294 \uc0ac\uc804\uc5d0, \uc77c\ubd80\ub294 \ud568\uc218\uc758 \uc885\uc810 \uc774\ud6c4\uc5d0 \uc2e4\ud589\ub429\ub2c8\ub2e4.","title":"\ubbf8\ub4e4\uc6e8\uc5b4\uac00 \uc788\ub294 \ub300\uccb4 DB \uc138\uc158"},{"location":"tutorial/sql-databases/#_14","text":"\uc6b0\ub9ac\uac00 \ucd94\uac00\ud560 \ubbf8\ub4e4\uc6e8\uc5b4(\ub2e8\uc21c\ud55c \ud568\uc218)\ub294 \uac01 \uc694\uccad\ub9c8\ub2e4 \uc0c8\ub85c\uc6b4 SQLAlchemy SessionLocal \uc744 \uc0dd\uc131, \uc694\uccad\uc5d0 \uc774\ub97c \ucd94\uac00\ud558\uace0 \uc694\uccad\uc774 \uc644\ub8cc\ub418\uba74 \uc774\ub97c \uc885\ub8cc\ud560 \uac83\uc785\ub2c8\ub2e4. from typing import List from fastapi import Depends , FastAPI , HTTPException , Request , Response from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () @app . middleware ( \"http\" ) async def db_session_middleware ( request : Request , call_next ): response = Response ( \"Internal server error\" , status_code = 500 ) try : request . state . db = SessionLocal () response = await call_next ( request ) finally : request . state . db . close () return response # Dependency def get_db ( request : Request ): return request . state . db @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \uc815\ubcf4 SessionLocal() \uc758 \uc0dd\uc131\uacfc \uc694\uccad\uc758 \ucc98\ub9ac\ub97c try \ube14\ub85d\uc5d0 \ubc30\uce58\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 finally \ube14\ub85d\uc5d0\uc11c \uc774\ub97c \uc885\ub8cc\ud569\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc694\uccad \uc774\ud6c4 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc774 \uc5b8\uc81c\ub098 \ub2eb\ud600\uc788\ub2e4\ub294 \uc0ac\uc2e4\uc744 \ud655\uc2e4\ud788 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc694\uccad \ucc98\ub9ac \ub3c4\uc911 \uc608\uc678\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0\ub77c\ub3c4 \uadf8\ub7ec\ud569\ub2c8\ub2e4.","title":"\ubbf8\ub4e4\uc6e8\uc5b4 \uc0dd\uc131"},{"location":"tutorial/sql-databases/#requeststate","text":"request.state \ub294 \uac01 Request \uac1d\uccb4\uc5d0 \ub300\ud55c \ud504\ub85c\ud37c\ud2f0\uc785\ub2c8\ub2e4. \uc774 \uacbd\uc6b0\uc5d0\uc11c\uc758 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uacfc \uac19\uc774 \uc694\uccad \uc790\uccb4\uc640 \uc5f0\uacb0\ub41c \uc784\uc758\uc758 \uac1d\uccb4\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud574 \uc874\uc7ac\ud569\ub2c8\ub2e4. Request \uc0c1\ud0dc\uc5d0 \uad00\ud55c Starlette \ubb38\uc11c \uc5d0\uc11c \ub354 \uc790\uc138\ud55c \uc0ac\ud56d\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uacbd\uc6b0\uc5d0\uc11c, \uc774\uac83\uc740 \ud558\ub098\uc758 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158\uc774 \ubaa8\ub4e0 \uc694\uccad\uc5d0 \ub300\ud574 \uc0ac\uc6a9\ub418\uace0 \uc774\ud6c4 (\ubbf8\ub4e4\uc6e8\uc5b4\uc5d0\uc11c) \uc885\ub8cc\ub418\ub294 \uac83\uc744 \ubcf4\uc7a5\ud569\ub2c8\ub2e4.","title":"request.state\uc5d0 \ub300\ud574"},{"location":"tutorial/sql-databases/#yield","text":"\ubbf8\ub4e4\uc6e8\uc5b4 \ub97c \ucd94\uac00\ud558\ub294 \uac83\uc740 yield \ub97c \uc0ac\uc6a9\ud558\ub294 \uc758\uc874\uc131\uc774 \ud558\ub294 \uac83\uacfc \uc720\uc0ac\ud558\uc9c0\ub9cc, \uba87 \uac00\uc9c0 \ucc28\uc774\uc810\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4: \ub354 \ub9ce\uc740 \ucf54\ub4dc\ub97c \ud544\uc694\ub85c\ud558\uace0 \uc870\uae08 \ub354 \ubcf5\uc7a1\ud569\ub2c8\ub2e4. \ubbf8\ub4e4\uc6e8\uc5b4\ub294 async \ud568\uc218\uc5ec\uc57c \ud569\ub2c8\ub2e4. \ub0b4\ubd80\uc5d0 \ub124\ud2b8\uc6cc\ud06c\ub97c \u201c\ub300\uae30\u201d\ud558\ub294 \ucf54\ub4dc\uac00 \uc788\ub2e4\uba74, \uc774\ub294 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc744 \"\ucc28\ub2e8\"\ud558\uace0 \uc131\ub2a5\uc744 \uc57d\uac04 \uc800\ud558\uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. SQLAlchemy \uac00 \uc791\ub3d9\ud558\ub294 \ubc29\uc2dd\uc5d0 \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc I/O \ub300\uae30\ub97c \ud574\uc57c\ud558\ub294 \ucf54\ub4dc\ub97c \ubbf8\ub4e4\uc6e8\uc5b4\uc5d0 \ub2e4\uc218 \ucd94\uac00\ud558\uba74 \ubb38\uc81c\uac00 \ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubbf8\ub4e4\uc6e8\uc5b4\ub294 \ubaa8\ub4e0 \uc694\uccad\uc2dc\uc5d0 \uc2e4\ud589\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub9e4 \uc694\uccad\uc2dc \uc5f0\uacb0\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4. \uacbd\ub85c \uc791\ub3d9 \uc774 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc640 \uad00\ub828 \uc5c6\ub294 \uc694\uccad\uc744 \ucc98\ub9ac\ud558\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \uadf8\ub807\uc2b5\ub2c8\ub2e4. \ud301 yield \ub97c \uc0ac\uc6a9\ud558\ub294 \uc758\uc874\uc131\ub9cc\uc73c\ub85c\ub3c4 \ucda9\ubd84\ud558\ub2e4\uba74, \uc774\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \ub098\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc815\ubcf4 yield \ub97c \uc0ac\uc6a9\ud558\ub294 \uc758\uc874\uc131\uc740 FastAPI \uc5d0 \ucd5c\uadfc\uc5d0 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\uc804 \ubc84\uc804\uc758 \uc790\uc2b5\uc11c\uc5d0\uc11c\ub294 \ubbf8\ub4e4\uc6e8\uc5b4\uc5d0 \ub300\ud55c \uc608\uc2dc\ub9cc \uc788\uc5c8\uace0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc138\uc158 \uad00\ub9ac\ub97c \uc704\ud574 \ubbf8\ub4e4\uc6e8\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub294 \uc5ec\ub7ec \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc774 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"yield\ub97c \uc0ac\uc6a9\ud558\ub294 \uc758\uc874\uc131 \ub610\ub294 \ubbf8\ub4e4\uc6e8\uc5b4\uc640"},{"location":"tutorial/static-files/","text":"\uc815\uc801 \ud30c\uc77c \u00b6 'StaticFiles'\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c \uc815\uc801 \ud30c\uc77c\uc744 \uc790\ub3d9\uc73c\ub85c \uc81c\uacf5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. StaticFiles \uc0ac\uc6a9 \u00b6 StaticFiles \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4. \ud2b9\uc815 \uacbd\ub85c\uc5d0 StaticFiles() \uc778\uc2a4\ud134\uc2a4\ub97c \"\ub9c8\uc6b4\ud2b8\" \ud569\ub2c8\ub2e4. from fastapi import FastAPI from fastapi.staticfiles import StaticFiles app = FastAPI () app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d from starlette.staticfiles import StaticFiles \ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4\u001c. FastAPI \ub294 \ub2e8\uc9c0 \uac1c\ubc1c\uc790\uc778, \ub2f9\uc2e0\uc5d0\uac8c \ud3b8\uc758\ub97c \uc81c\uacf5\ud558\uae30 \uc704\ud574 fastapi.static files \uc640 \ub3d9\uc77c\ud55c starlett.static files \ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc0ac\uc2e4 \uc774\uac83\uc740 Starlett\uc5d0\uc11c \uc9c1\uc811 \uc628 \uac83\uc785\ub2c8\ub2e4. \"\ub9c8\uc6b4\ud305\" \uc774\ub780 \u00b6 \"\ub9c8\uc6b4\ud305\"\uc740 \ud2b9\uc815 \uacbd\ub85c\uc5d0 \uc644\uc804\ud788 \"\ub3c5\ub9bd\uc801\uc778\" \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ucd94\uac00\ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud558\ub294\ub370, \uadf8 \ud6c4 \ubaa8\ub4e0 \ud558\uc704 \uacbd\ub85c\uc5d0 \ub300\ud574\uc11c\ub3c4 \uc801\uc6a9\ub429\ub2c8\ub2e4. \ub9c8\uc6b4\ud2b8\ub41c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc740 \uc644\uc804\ud788 \ub3c5\ub9bd\uc801\uc774\uae30 \ub54c\ubb38\uc5d0 APIRouter \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uacfc\ub294 \ub2e4\ub985\ub2c8\ub2e4. OpenAPI \ubc0f \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc758 \ubb38\uc11c\ub294 \ub9c8\uc6b4\ud2b8\ub41c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 \ub4f1\uc5d0\uc11c \uc5b4\ub5a4 \uac83\ub3c4 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc219\ub828\ub41c \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc138\ubd80\uc0ac\ud56d \u00b6 \uccab \ubc88\uc9f8 \"/static\" \uc740 \uc774 \"\ud558\uc704 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\"\uc774 \"\ub9c8\uc6b4\ud2b8\"\ub420 \ud558\uc704 \uacbd\ub85c\ub97c \uac00\ub9ac\ud0b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \"/static\" \uc73c\ub85c \uc2dc\uc791\ud558\ub294 \ubaa8\ub4e0 \uacbd\ub85c\ub294 \"/static\" \uc73c\ub85c \ucc98\ub9ac\ub429\ub2c8\ub2e4. 'directory=\"static\" \uc740 \uc815\uc801 \ud30c\uc77c\uc774 \ub4e4\uc5b4 \uc788\ub294 \ub514\ub809\ud1a0\ub9ac\uc758 \uc774\ub984\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. name=\"static\" \uc740 FastAPI \uc5d0\uc11c \ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc774\ub984\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc774 \ubaa8\ub4e0 \ub9e4\uac1c\ubcc0\uc218\ub294 \" static \"\uacfc \ub2e4\ub97c \uc218 \uc788\uc73c\uba70, \uc0ac\uc6a9\uc790 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uc694\uad6c \uc0ac\ud56d \ubc0f \uad6c\uccb4\uc801\uc778 \uc138\ubd80 \uc815\ubcf4\uc5d0 \ub530\ub77c \ub9e4\uac1c\ubcc0\uc218\ub97c \uc870\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucd94\uac00 \uc815\ubcf4 \u00b6 \uc790\uc138\ud55c \ub0b4\uc6a9\uacfc \uc120\ud0dd \uc0ac\ud56d\uc744 \ubcf4\ub824\uba74 Starlette\uc758 \uc815\uc801 \ud30c\uc77c\uc5d0 \uad00\ud55c \ubb38\uc11c \ub97c \ud655\uc778\ud558\uc2ed\uc2dc\uc624.","title":"\uc815\uc801 \ud30c\uc77c"},{"location":"tutorial/static-files/#_1","text":"'StaticFiles'\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c \uc815\uc801 \ud30c\uc77c\uc744 \uc790\ub3d9\uc73c\ub85c \uc81c\uacf5\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc815\uc801 \ud30c\uc77c"},{"location":"tutorial/static-files/#staticfiles","text":"StaticFiles \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4. \ud2b9\uc815 \uacbd\ub85c\uc5d0 StaticFiles() \uc778\uc2a4\ud134\uc2a4\ub97c \"\ub9c8\uc6b4\ud2b8\" \ud569\ub2c8\ub2e4. from fastapi import FastAPI from fastapi.staticfiles import StaticFiles app = FastAPI () app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) \uae30\uc220\uc801 \uc138\ubd80\uc0ac\ud56d from starlette.staticfiles import StaticFiles \ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4\u001c. FastAPI \ub294 \ub2e8\uc9c0 \uac1c\ubc1c\uc790\uc778, \ub2f9\uc2e0\uc5d0\uac8c \ud3b8\uc758\ub97c \uc81c\uacf5\ud558\uae30 \uc704\ud574 fastapi.static files \uc640 \ub3d9\uc77c\ud55c starlett.static files \ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc0ac\uc2e4 \uc774\uac83\uc740 Starlett\uc5d0\uc11c \uc9c1\uc811 \uc628 \uac83\uc785\ub2c8\ub2e4.","title":"StaticFiles \uc0ac\uc6a9"},{"location":"tutorial/static-files/#_2","text":"\"\ub9c8\uc6b4\ud305\"\uc740 \ud2b9\uc815 \uacbd\ub85c\uc5d0 \uc644\uc804\ud788 \"\ub3c5\ub9bd\uc801\uc778\" \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \ucd94\uac00\ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud558\ub294\ub370, \uadf8 \ud6c4 \ubaa8\ub4e0 \ud558\uc704 \uacbd\ub85c\uc5d0 \ub300\ud574\uc11c\ub3c4 \uc801\uc6a9\ub429\ub2c8\ub2e4. \ub9c8\uc6b4\ud2b8\ub41c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc740 \uc644\uc804\ud788 \ub3c5\ub9bd\uc801\uc774\uae30 \ub54c\ubb38\uc5d0 APIRouter \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uacfc\ub294 \ub2e4\ub985\ub2c8\ub2e4. OpenAPI \ubc0f \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc758 \ubb38\uc11c\ub294 \ub9c8\uc6b4\ud2b8\ub41c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 \ub4f1\uc5d0\uc11c \uc5b4\ub5a4 \uac83\ub3c4 \ud3ec\ud568\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc219\ub828\ub41c \uc0ac\uc6a9\uc790 \uc548\ub0b4\uc11c \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\"\ub9c8\uc6b4\ud305\" \uc774\ub780"},{"location":"tutorial/static-files/#_3","text":"\uccab \ubc88\uc9f8 \"/static\" \uc740 \uc774 \"\ud558\uc704 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\"\uc774 \"\ub9c8\uc6b4\ud2b8\"\ub420 \ud558\uc704 \uacbd\ub85c\ub97c \uac00\ub9ac\ud0b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \"/static\" \uc73c\ub85c \uc2dc\uc791\ud558\ub294 \ubaa8\ub4e0 \uacbd\ub85c\ub294 \"/static\" \uc73c\ub85c \ucc98\ub9ac\ub429\ub2c8\ub2e4. 'directory=\"static\" \uc740 \uc815\uc801 \ud30c\uc77c\uc774 \ub4e4\uc5b4 \uc788\ub294 \ub514\ub809\ud1a0\ub9ac\uc758 \uc774\ub984\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. name=\"static\" \uc740 FastAPI \uc5d0\uc11c \ub0b4\ubd80\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \uc774\ub984\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc774 \ubaa8\ub4e0 \ub9e4\uac1c\ubcc0\uc218\ub294 \" static \"\uacfc \ub2e4\ub97c \uc218 \uc788\uc73c\uba70, \uc0ac\uc6a9\uc790 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uc694\uad6c \uc0ac\ud56d \ubc0f \uad6c\uccb4\uc801\uc778 \uc138\ubd80 \uc815\ubcf4\uc5d0 \ub530\ub77c \ub9e4\uac1c\ubcc0\uc218\ub97c \uc870\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc138\ubd80\uc0ac\ud56d"},{"location":"tutorial/static-files/#_4","text":"\uc790\uc138\ud55c \ub0b4\uc6a9\uacfc \uc120\ud0dd \uc0ac\ud56d\uc744 \ubcf4\ub824\uba74 Starlette\uc758 \uc815\uc801 \ud30c\uc77c\uc5d0 \uad00\ud55c \ubb38\uc11c \ub97c \ud655\uc778\ud558\uc2ed\uc2dc\uc624.","title":"\ucd94\uac00 \uc815\ubcf4"},{"location":"tutorial/testing/","text":"\ud14c\uc2a4\ud2b8 \u00b6 Starlette \ub355\ubd84\uc5d0 FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc27d\uace0 \uc990\uac81\uac8c \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. . \uc694\uccad \uc744 \uae30\ubc18\uc73c\ub85c \ud558\ubbc0\ub85c \ub9e4\uc6b0 \uce5c\uc219\ud558\uace0 \uc9c1\uad00\uc801\uc785\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 FastAPI \uc640 \ud568\uaed8 pytest \ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. TestClient \uc0ac\uc6a9 \u00b6 TestClient \ub97c \uac00\uc838\uc635\ub2c8\ub2e4. FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \uc804\ub2ec\ud558\ub294 TestClient \ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. test_ \ub85c \uc2dc\uc791\ud558\ub294 \uc774\ub984\uc73c\ub85c \ud568\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4 (\ud45c\uc900 pytest \uaddc\uce59). requests \uc640 \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c TestClient \uac1d\uccb4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ud655\uc778\ud574\uc57c \ud558\ub294 \ud45c\uc900 Python \ud45c\ud604\uc2dd\uc73c\ub85c \uac04\ub2e8\ud55c assert \ubb38\uc744 \uc791\uc131\ud569\ub2c8\ub2e4(\ud45c\uc900 pytest \uaddc\uce59). from fastapi import FastAPI from fastapi.testclient import TestClient app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } client = TestClient ( app ) def test_read_main (): response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } \ud301 \ud14c\uc2a4\ud2b8 \ud568\uc218\ub294 async def \uac00 \uc544\ub2cc \uc77c\ubc18 def \uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0 \ub300\ud55c \ud638\ucd9c\ub3c4 await \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uc77c\ubc18 \ud638\ucd9c\uc785\ub2c8\ub2e4. \uc774\ub807\uac8c \ud558\uba74 \ubcf5\uc7a1\ud568 \uc5c6\uc774 pytest \ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80 \uc0ac\ud56d from starlette.testclient import TestClient \ub97c \ud1b5\ud574 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac1c\ubc1c\uc790 \uc5ec\ub7ec\ubd84\uc758 \ud3b8\uc758\ub97c \uc704\ud574 fastapi.testclient \uc640 \ub3d9\uc77c\ud55c starlette.testclient \ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uadf8\uac83\uc740 Starlette\uc5d0\uc11c \uc9c1\uc811 \uc81c\uacf5\ub429\ub2c8\ub2e4. \ud301 FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158(\uc608: \ube44\ub3d9\uae30 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud568\uc218)\uc5d0 \uc694\uccad\uc744 \ubcf4\ub0b4\ub294 \uac83\uacfc \ubcc4\ub3c4\ub85c \ud14c\uc2a4\ud2b8\uc5d0\uc11c async \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub824\uba74 \uace0\uae09 \uc790\uc2b5\uc11c\uc758 Async Tests \ub97c \uc0b4\ud3b4\ubcf4\uc2ed\uc2dc\uc624. \ud14c\uc2a4\ud2b8 \ubd84\ub9ac \u00b6 \uc2e4\uc81c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c\ub294 \ud14c\uc2a4\ud2b8\uac00 \ub2e4\ub978 \ud30c\uc77c\uc5d0 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc740 \uc5ec\ub7ec \ud30c\uc77c/\ubaa8\ub4c8 \ub4f1\uc73c\ub85c \uad6c\uc131\ub420 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \uc571 \ud30c\uc77c \u00b6 FastAPI \uc571\uc5d0 main.py \ud30c\uc77c\uc774 \uc788\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } \ud14c\uc2a4\ud2b8 \ud30c\uc77c \u00b6 \uadf8\ub7f0 \ub2e4\uc74c \ud14c\uc2a4\ud2b8\uc640 \ud568\uaed8 test_main.py \ud30c\uc77c\uc744 \ub9cc\ub4e4\uace0 main \ubaa8\ub4c8( main.py )\uc5d0\uc11c app \uc744 \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. from fastapi.testclient import TestClient from .main import app client = TestClient ( app ) def test_read_main (): response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } \ud14c\uc2a4\ud2b8: \ud655\uc7a5\ub41c \uc608\uc81c \u00b6 \uc774\uc81c \uc774 \uc608\uc81c\ub97c \ud655\uc7a5\ud558\uace0 \uc138\ubd80 \uc0ac\ud56d\uc744 \ucd94\uac00\ud558\uc5ec \ub2e4\ub978 \ubd80\ubd84\uc744 \ud14c\uc2a4\ud2b8\ud558\ub294 \ubc29\ubc95\uc744 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ud655\uc7a5\ub41c FastAPI \uc571 \ud30c\uc77c \u00b6 FastAPI \uc571\uc5d0 main_b.py \ud30c\uc77c\uc774 \uc788\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc624\ub958\ub97c \ubc18\ud658\ud560 \uc218 \uc788\ub294 GET \uc791\uc5c5\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec \uc624\ub958\ub97c \ubc18\ud658\ud560 \uc218 \uc788\ub294 POST \uc791\uc5c5\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ub450 \uacbd\ub85c \uc791\uc5c5 \ubaa8\ub450 X-Token \ud5e4\ub354\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. Python 3.6 \uc774\uc0c1 \ubc84\uc804 Python 3.10 \uc774\uc0c1 \ubc84\uc804 from typing import Union from fastapi import FastAPI , Header , HTTPException from pydantic import BaseModel fake_secret_token = \"coneofsilence\" fake_db = { \"foo\" : { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" }, \"bar\" : { \"id\" : \"bar\" , \"title\" : \"Bar\" , \"description\" : \"The bartenders\" }, } app = FastAPI () class Item ( BaseModel ): id : str title : str description : Union [ str , None ] = None @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_main ( item_id : str , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item_id not in fake_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return fake_db [ item_id ] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item . id in fake_db : raise HTTPException ( status_code = 400 , detail = \"Item already exists\" ) fake_db [ item . id ] = item return item from fastapi import FastAPI , Header , HTTPException from pydantic import BaseModel fake_secret_token = \"coneofsilence\" fake_db = { \"foo\" : { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" }, \"bar\" : { \"id\" : \"bar\" , \"title\" : \"Bar\" , \"description\" : \"The bartenders\" }, } app = FastAPI () class Item ( BaseModel ): id : str title : str description : str | None = None @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_main ( item_id : str , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item_id not in fake_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return fake_db [ item_id ] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item . id in fake_db : raise HTTPException ( status_code = 400 , detail = \"Item already exists\" ) fake_db [ item . id ] = item return item \ud655\uc7a5 \ud14c\uc2a4\ud2b8 \ud30c\uc77c \u00b6 \ub2e4\uc74c\uc73c\ub85c \ud655\uc7a5 \ud14c\uc2a4\ud2b8\ub97c \ud1b5\ud574 \uc774\uc804\uacfc \ub3d9\uc77c\ud55c test_main_b.py \ub97c \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from fastapi.testclient import TestClient from .main import app client = TestClient ( app ) def test_read_item (): response = client . get ( \"/items/foo\" , headers = { \"X-Token\" : \"coneofsilence\" }) assert response . status_code == 200 assert response . json () == { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" , } def test_read_item_bad_token (): response = client . get ( \"/items/foo\" , headers = { \"X-Token\" : \"hailhydra\" }) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Invalid X-Token header\" } def test_read_inexistent_item (): response = client . get ( \"/items/baz\" , headers = { \"X-Token\" : \"coneofsilence\" }) assert response . status_code == 404 assert response . json () == { \"detail\" : \"Item not found\" } def test_create_item (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"coneofsilence\" }, json = { \"id\" : \"foobar\" , \"title\" : \"Foo Bar\" , \"description\" : \"The Foo Barters\" }, ) assert response . status_code == 200 assert response . json () == { \"id\" : \"foobar\" , \"title\" : \"Foo Bar\" , \"description\" : \"The Foo Barters\" , } def test_create_item_bad_token (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"hailhydra\" }, json = { \"id\" : \"bazz\" , \"title\" : \"Bazz\" , \"description\" : \"Drop the bazz\" }, ) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Invalid X-Token header\" } def test_create_existing_item (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"coneofsilence\" }, json = { \"id\" : \"foo\" , \"title\" : \"The Foo ID Stealers\" , \"description\" : \"There goes my stealer\" , }, ) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Item already exists\" } \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc694\uccad\uc5d0 \uc815\ubcf4\ub97c \uc804\ub2ec\ud574\uc57c \ud558\ub294\ub370 \ubc29\ubc95\uc744 \ubaa8\ub97c \ub54c\ub9c8\ub2e4 '\uc694\uccad'\uc5d0\uc11c \ubc29\ubc95\uc744 \uac80\uc0c9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4(Google). \uadf8\ub7f0 \ub2e4\uc74c \ud14c\uc2a4\ud2b8\uc5d0\uc11c \ub3d9\uc77c\ud55c \uc791\uc5c5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \uc608: \uacbd\ub85c \ud639\uc740 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \uc804\ub2ec\ud558\ub824\uba74 URL \uc790\uccb4\uc5d0 \ucd94\uac00\ud558\uc2ed\uc2dc\uc624. JSON \ubcf8\ubb38\uc744 \uc804\ub2ec\ud558\ub824\uba74 \ud30c\uc774\uc36c \uac1d\uccb4(\uc608: dict )\ub97c \ub9e4\uac1c\ubcc0\uc218 json \uc5d0 \uc804\ub2ec\ud569\ub2c8\ub2e4. JSON \ub300\uc2e0 \ub370\uc774\ud130\uc5d0\uc11c \ubcf4\ub0b4\uc57c \ud55c\ub2e4\uba74 data \ub9e4\uac1c\ubcc0\uc218\ub97c \ub300\uc2e0 \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. headers \ub97c \uc804\ub2ec\ud558\ub824\uba74 headers \ub9e4\uac1c\ubcc0\uc218\uc5d0 dict \ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. cookies \uc758 \uacbd\uc6b0 cookies \ub9e4\uac1c\ubcc0\uc218\uc758 dict . \ub370\uc774\ud130\ub97c \ubc31\uc5d4\ub4dc\uc5d0 \uc804\ub2ec\ud558\ub294 \ubc29\ubc95( requests \ub610\ub294 TestClient \uc0ac\uc6a9)\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ubb38\uc11c \uc694\uccad \uc744 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \uc815\ubcf4 TestClient \ub294 Pydantic \ubaa8\ub378\uc774 \uc544\ub2cc JSON\uc73c\ub85c \ubcc0\ud658\ud560 \uc218 \uc788\ub294 \ub370\uc774\ud130\ub97c \uc218\uc2e0\ud569\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8\uc5d0 Pydantic \ubaa8\ub378\uc774 \uc788\uace0 \ud14c\uc2a4\ud2b8 \uc911\uc5d0 \ud574\ub2f9 \ub370\uc774\ud130\ub97c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc73c\ub85c \ubcf4\ub0b4\ub824\uba74 JSON \ud638\ud658 \uc778\ucf54\ub354 \uc5d0 \uc124\uba85\ub41c jsonable_encoder \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. . \uc2e4\ud589 \u00b6 \uadf8\ub7f0 \ub2e4\uc74c pytest \ub97c \uc124\uce58\ud558\uae30\ub9cc \ud558\uba74 \ub429\ub2c8\ub2e4. $ pip install pytest ---> 100% \ud30c\uc77c\uacfc \ud14c\uc2a4\ud2b8\ub97c \uc790\ub3d9\uc73c\ub85c \uac10\uc9c0\ud558\uace0 \uc2e4\ud589\ud558\uc5ec \uacb0\uacfc\ub97c \ub2e4\uc2dc \ubcf4\uace0\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud14c\uc2a4\ud2b8\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. $ pytest ================ test session starts ================ platform linux -- Python 3.6.9, pytest-5.3.5, py-1.8.1, pluggy-0.13.1 rootdir: /home/user/code/superawesome-cli/app plugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1 collected 6 items ---> 100% test_main.py <span style=\"color: green; white-space: pre;\">...... [100%]</span> <span style=\"color: green;\">================= 1 passed in 0.03s =================</span>","title":"\ud14c\uc2a4\ud2b8"},{"location":"tutorial/testing/#_1","text":"Starlette \ub355\ubd84\uc5d0 FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc27d\uace0 \uc990\uac81\uac8c \ud14c\uc2a4\ud2b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. . \uc694\uccad \uc744 \uae30\ubc18\uc73c\ub85c \ud558\ubbc0\ub85c \ub9e4\uc6b0 \uce5c\uc219\ud558\uace0 \uc9c1\uad00\uc801\uc785\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574 FastAPI \uc640 \ud568\uaed8 pytest \ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ud14c\uc2a4\ud2b8"},{"location":"tutorial/testing/#testclient","text":"TestClient \ub97c \uac00\uc838\uc635\ub2c8\ub2e4. FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \uc804\ub2ec\ud558\ub294 TestClient \ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. test_ \ub85c \uc2dc\uc791\ud558\ub294 \uc774\ub984\uc73c\ub85c \ud568\uc218\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4 (\ud45c\uc900 pytest \uaddc\uce59). requests \uc640 \ub3d9\uc77c\ud55c \ubc29\uc2dd\uc73c\ub85c TestClient \uac1d\uccb4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ud655\uc778\ud574\uc57c \ud558\ub294 \ud45c\uc900 Python \ud45c\ud604\uc2dd\uc73c\ub85c \uac04\ub2e8\ud55c assert \ubb38\uc744 \uc791\uc131\ud569\ub2c8\ub2e4(\ud45c\uc900 pytest \uaddc\uce59). from fastapi import FastAPI from fastapi.testclient import TestClient app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } client = TestClient ( app ) def test_read_main (): response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } \ud301 \ud14c\uc2a4\ud2b8 \ud568\uc218\ub294 async def \uac00 \uc544\ub2cc \uc77c\ubc18 def \uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud074\ub77c\uc774\uc5b8\ud2b8\uc5d0 \ub300\ud55c \ud638\ucd9c\ub3c4 await \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uc77c\ubc18 \ud638\ucd9c\uc785\ub2c8\ub2e4. \uc774\ub807\uac8c \ud558\uba74 \ubcf5\uc7a1\ud568 \uc5c6\uc774 pytest \ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae30\uc220\uc801 \uc138\ubd80 \uc0ac\ud56d from starlette.testclient import TestClient \ub97c \ud1b5\ud574 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. FastAPI \ub294 \uac1c\ubc1c\uc790 \uc5ec\ub7ec\ubd84\uc758 \ud3b8\uc758\ub97c \uc704\ud574 fastapi.testclient \uc640 \ub3d9\uc77c\ud55c starlette.testclient \ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uadf8\uac83\uc740 Starlette\uc5d0\uc11c \uc9c1\uc811 \uc81c\uacf5\ub429\ub2c8\ub2e4. \ud301 FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158(\uc608: \ube44\ub3d9\uae30 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud568\uc218)\uc5d0 \uc694\uccad\uc744 \ubcf4\ub0b4\ub294 \uac83\uacfc \ubcc4\ub3c4\ub85c \ud14c\uc2a4\ud2b8\uc5d0\uc11c async \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub824\uba74 \uace0\uae09 \uc790\uc2b5\uc11c\uc758 Async Tests \ub97c \uc0b4\ud3b4\ubcf4\uc2ed\uc2dc\uc624.","title":"TestClient \uc0ac\uc6a9"},{"location":"tutorial/testing/#_2","text":"\uc2e4\uc81c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0\uc11c\ub294 \ud14c\uc2a4\ud2b8\uac00 \ub2e4\ub978 \ud30c\uc77c\uc5d0 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 FastAPI \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc740 \uc5ec\ub7ec \ud30c\uc77c/\ubaa8\ub4c8 \ub4f1\uc73c\ub85c \uad6c\uc131\ub420 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.","title":"\ud14c\uc2a4\ud2b8 \ubd84\ub9ac"},{"location":"tutorial/testing/#fastapi","text":"FastAPI \uc571\uc5d0 main.py \ud30c\uc77c\uc774 \uc788\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" }","title":"FastAPI \uc571 \ud30c\uc77c"},{"location":"tutorial/testing/#_3","text":"\uadf8\ub7f0 \ub2e4\uc74c \ud14c\uc2a4\ud2b8\uc640 \ud568\uaed8 test_main.py \ud30c\uc77c\uc744 \ub9cc\ub4e4\uace0 main \ubaa8\ub4c8( main.py )\uc5d0\uc11c app \uc744 \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. from fastapi.testclient import TestClient from .main import app client = TestClient ( app ) def test_read_main (): response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" }","title":"\ud14c\uc2a4\ud2b8 \ud30c\uc77c"},{"location":"tutorial/testing/#_4","text":"\uc774\uc81c \uc774 \uc608\uc81c\ub97c \ud655\uc7a5\ud558\uace0 \uc138\ubd80 \uc0ac\ud56d\uc744 \ucd94\uac00\ud558\uc5ec \ub2e4\ub978 \ubd80\ubd84\uc744 \ud14c\uc2a4\ud2b8\ud558\ub294 \ubc29\ubc95\uc744 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","title":"\ud14c\uc2a4\ud2b8: \ud655\uc7a5\ub41c \uc608\uc81c"},{"location":"tutorial/testing/#fastapi_1","text":"FastAPI \uc571\uc5d0 main_b.py \ud30c\uc77c\uc774 \uc788\ub2e4\uace0 \uac00\uc815\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc624\ub958\ub97c \ubc18\ud658\ud560 \uc218 \uc788\ub294 GET \uc791\uc5c5\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec \uc624\ub958\ub97c \ubc18\ud658\ud560 \uc218 \uc788\ub294 POST \uc791\uc5c5\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ub450 \uacbd\ub85c \uc791\uc5c5 \ubaa8\ub450 X-Token \ud5e4\ub354\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. Python 3.6 \uc774\uc0c1 \ubc84\uc804 Python 3.10 \uc774\uc0c1 \ubc84\uc804 from typing import Union from fastapi import FastAPI , Header , HTTPException from pydantic import BaseModel fake_secret_token = \"coneofsilence\" fake_db = { \"foo\" : { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" }, \"bar\" : { \"id\" : \"bar\" , \"title\" : \"Bar\" , \"description\" : \"The bartenders\" }, } app = FastAPI () class Item ( BaseModel ): id : str title : str description : Union [ str , None ] = None @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_main ( item_id : str , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item_id not in fake_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return fake_db [ item_id ] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item . id in fake_db : raise HTTPException ( status_code = 400 , detail = \"Item already exists\" ) fake_db [ item . id ] = item return item from fastapi import FastAPI , Header , HTTPException from pydantic import BaseModel fake_secret_token = \"coneofsilence\" fake_db = { \"foo\" : { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" }, \"bar\" : { \"id\" : \"bar\" , \"title\" : \"Bar\" , \"description\" : \"The bartenders\" }, } app = FastAPI () class Item ( BaseModel ): id : str title : str description : str | None = None @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_main ( item_id : str , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item_id not in fake_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return fake_db [ item_id ] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item . id in fake_db : raise HTTPException ( status_code = 400 , detail = \"Item already exists\" ) fake_db [ item . id ] = item return item","title":"\ud655\uc7a5\ub41c FastAPI \uc571 \ud30c\uc77c"},{"location":"tutorial/testing/#_5","text":"\ub2e4\uc74c\uc73c\ub85c \ud655\uc7a5 \ud14c\uc2a4\ud2b8\ub97c \ud1b5\ud574 \uc774\uc804\uacfc \ub3d9\uc77c\ud55c test_main_b.py \ub97c \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from fastapi.testclient import TestClient from .main import app client = TestClient ( app ) def test_read_item (): response = client . get ( \"/items/foo\" , headers = { \"X-Token\" : \"coneofsilence\" }) assert response . status_code == 200 assert response . json () == { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" , } def test_read_item_bad_token (): response = client . get ( \"/items/foo\" , headers = { \"X-Token\" : \"hailhydra\" }) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Invalid X-Token header\" } def test_read_inexistent_item (): response = client . get ( \"/items/baz\" , headers = { \"X-Token\" : \"coneofsilence\" }) assert response . status_code == 404 assert response . json () == { \"detail\" : \"Item not found\" } def test_create_item (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"coneofsilence\" }, json = { \"id\" : \"foobar\" , \"title\" : \"Foo Bar\" , \"description\" : \"The Foo Barters\" }, ) assert response . status_code == 200 assert response . json () == { \"id\" : \"foobar\" , \"title\" : \"Foo Bar\" , \"description\" : \"The Foo Barters\" , } def test_create_item_bad_token (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"hailhydra\" }, json = { \"id\" : \"bazz\" , \"title\" : \"Bazz\" , \"description\" : \"Drop the bazz\" }, ) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Invalid X-Token header\" } def test_create_existing_item (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"coneofsilence\" }, json = { \"id\" : \"foo\" , \"title\" : \"The Foo ID Stealers\" , \"description\" : \"There goes my stealer\" , }, ) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Item already exists\" } \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc694\uccad\uc5d0 \uc815\ubcf4\ub97c \uc804\ub2ec\ud574\uc57c \ud558\ub294\ub370 \ubc29\ubc95\uc744 \ubaa8\ub97c \ub54c\ub9c8\ub2e4 '\uc694\uccad'\uc5d0\uc11c \ubc29\ubc95\uc744 \uac80\uc0c9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4(Google). \uadf8\ub7f0 \ub2e4\uc74c \ud14c\uc2a4\ud2b8\uc5d0\uc11c \ub3d9\uc77c\ud55c \uc791\uc5c5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \uc608: \uacbd\ub85c \ud639\uc740 \ucffc\ub9ac \ub9e4\uac1c\ubcc0\uc218\ub97c \uc804\ub2ec\ud558\ub824\uba74 URL \uc790\uccb4\uc5d0 \ucd94\uac00\ud558\uc2ed\uc2dc\uc624. JSON \ubcf8\ubb38\uc744 \uc804\ub2ec\ud558\ub824\uba74 \ud30c\uc774\uc36c \uac1d\uccb4(\uc608: dict )\ub97c \ub9e4\uac1c\ubcc0\uc218 json \uc5d0 \uc804\ub2ec\ud569\ub2c8\ub2e4. JSON \ub300\uc2e0 \ub370\uc774\ud130\uc5d0\uc11c \ubcf4\ub0b4\uc57c \ud55c\ub2e4\uba74 data \ub9e4\uac1c\ubcc0\uc218\ub97c \ub300\uc2e0 \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. headers \ub97c \uc804\ub2ec\ud558\ub824\uba74 headers \ub9e4\uac1c\ubcc0\uc218\uc5d0 dict \ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. cookies \uc758 \uacbd\uc6b0 cookies \ub9e4\uac1c\ubcc0\uc218\uc758 dict . \ub370\uc774\ud130\ub97c \ubc31\uc5d4\ub4dc\uc5d0 \uc804\ub2ec\ud558\ub294 \ubc29\ubc95( requests \ub610\ub294 TestClient \uc0ac\uc6a9)\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ubb38\uc11c \uc694\uccad \uc744 \ud655\uc778\ud558\uc2ed\uc2dc\uc624. \uc815\ubcf4 TestClient \ub294 Pydantic \ubaa8\ub378\uc774 \uc544\ub2cc JSON\uc73c\ub85c \ubcc0\ud658\ud560 \uc218 \uc788\ub294 \ub370\uc774\ud130\ub97c \uc218\uc2e0\ud569\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8\uc5d0 Pydantic \ubaa8\ub378\uc774 \uc788\uace0 \ud14c\uc2a4\ud2b8 \uc911\uc5d0 \ud574\ub2f9 \ub370\uc774\ud130\ub97c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc73c\ub85c \ubcf4\ub0b4\ub824\uba74 JSON \ud638\ud658 \uc778\ucf54\ub354 \uc5d0 \uc124\uba85\ub41c jsonable_encoder \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. .","title":"\ud655\uc7a5 \ud14c\uc2a4\ud2b8 \ud30c\uc77c"},{"location":"tutorial/testing/#_6","text":"\uadf8\ub7f0 \ub2e4\uc74c pytest \ub97c \uc124\uce58\ud558\uae30\ub9cc \ud558\uba74 \ub429\ub2c8\ub2e4. $ pip install pytest ---> 100% \ud30c\uc77c\uacfc \ud14c\uc2a4\ud2b8\ub97c \uc790\ub3d9\uc73c\ub85c \uac10\uc9c0\ud558\uace0 \uc2e4\ud589\ud558\uc5ec \uacb0\uacfc\ub97c \ub2e4\uc2dc \ubcf4\uace0\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud14c\uc2a4\ud2b8\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. $ pytest ================ test session starts ================ platform linux -- Python 3.6.9, pytest-5.3.5, py-1.8.1, pluggy-0.13.1 rootdir: /home/user/code/superawesome-cli/app plugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1 collected 6 items ---> 100% test_main.py <span style=\"color: green; white-space: pre;\">...... [100%]</span> <span style=\"color: green;\">================= 1 passed in 0.03s =================</span>","title":"\uc2e4\ud589"},{"location":"tutorial/dependencies/","text":"Dependencies - First Steps \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI has a very powerful but intuitive Dependency Injection system. It is designed to be very simple to use, and to make it very easy for any developer to integrate other components with FastAPI . What is \"Dependency Injection\" \u00b6 \"Dependency Injection\" means, in programming, that there is a way for your code (in this case, your path operation functions ) to declare things that it requires to work and use: \"dependencies\". And then, that system (in this case FastAPI ) will take care of doing whatever is needed to provide your code with those needed dependencies (\"inject\" the dependencies). This is very useful when you need to: Have shared logic (the same code logic again and again). Share database connections. Enforce security, authentication, role requirements, etc. And many other things... All these, while minimizing code repetition. First Steps \u00b6 Let's see a very simple example. It will be so simple that it is not very useful, for now. But this way we can focus on how the Dependency Injection system works. Create a dependency, or \"dependable\" \u00b6 Let's first focus on the dependency. It is just a function that can take all the same parameters that a path operation function can take: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons That's it. 2 lines . And it has the same shape and structure that all your path operation functions have. You can think of it as a path operation function without the \"decorator\" (without the @app.get(\"/some-path\") ). And it can return anything you want. In this case, this dependency expects: An optional query parameter q that is a str . An optional query parameter skip that is an int , and by default is 0 . An optional query parameter limit that is an int , and by default is 100 . And then it just returns a dict containing those values. Import Depends \u00b6 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons Declare the dependency, in the \"dependant\" \u00b6 The same way you use Body , Query , etc. with your path operation function parameters, use Depends with a new parameter: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons Although you use Depends in the parameters of your function the same way you use Body , Query , etc, Depends works a bit differently. You only give Depends a single parameter. This parameter must be something like a function. And that function takes parameters in the same way that path operation functions do. Tip You'll see what other \"things\", apart from functions, can be used as dependencies in the next chapter. Whenever a new request arrives, FastAPI will take care of: Calling your dependency (\"dependable\") function with the correct parameters. Get the result from your function. Assign that result to the parameter in your path operation function . graph TB common_parameters([\"common_parameters\"]) read_items[\"/items/\"] read_users[\"/users/\"] common_parameters --> read_items common_parameters --> read_users This way you write shared code once and FastAPI takes care of calling it for your path operations . Check Notice that you don't have to create a special class and pass it somewhere to FastAPI to \"register\" it or anything similar. You just pass it to Depends and FastAPI knows how to do the rest. To async or not to async \u00b6 As dependencies will also be called by FastAPI (the same as your path operation functions ), the same rules apply while defining your functions. You can use async def or normal def . And you can declare dependencies with async def inside of normal def path operation functions , or def dependencies inside of async def path operation functions , etc. It doesn't matter. FastAPI will know what to do. Note If you don't know, check the Async: \"In a hurry?\" section about async and await in the docs. Integrated with OpenAPI \u00b6 All the request declarations, validations and requirements of your dependencies (and sub-dependencies) will be integrated in the same OpenAPI schema. So, the interactive docs will have all the information from these dependencies too: Simple usage \u00b6 If you look at it, path operation functions are declared to be used whenever a path and operation matches, and then FastAPI takes care of calling the function with the correct parameters, extracting the data from the request. Actually, all (or most) of the web frameworks work in this same way. You never call those functions directly. They are called by your framework (in this case, FastAPI ). With the Dependency Injection system, you can also tell FastAPI that your path operation function also \"depends\" on something else that should be executed before your path operation function , and FastAPI will take care of executing it and \"injecting\" the results. Other common terms for this same idea of \"dependency injection\" are: resources providers services injectables components FastAPI plug-ins \u00b6 Integrations and \"plug-in\"s can be built using the Dependency Injection system. But in fact, there is actually no need to create \"plug-ins\" , as by using dependencies it's possible to declare an infinite number of integrations and interactions that become available to your path operation functions . And dependencies can be created in a very simple and intuitive way that allow you to just import the Python packages you need, and integrate them with your API functions in a couple of lines of code, literally . You will see examples of this in the next chapters, about relational and NoSQL databases, security, etc. FastAPI compatibility \u00b6 The simplicity of the dependency injection system makes FastAPI compatible with: all the relational databases NoSQL databases external packages external APIs authentication and authorization systems API usage monitoring systems response data injection systems etc. Simple and Powerful \u00b6 Although the hierarchical dependency injection system is very simple to define and use, it's still very powerful. You can define dependencies that in turn can define dependencies themselves. In the end, a hierarchical tree of dependencies is built, and the Dependency Injection system takes care of solving all these dependencies for you (and their sub-dependencies) and providing (injecting) the results at each step. For example, let's say you have 4 API endpoints ( path operations ): /items/public/ /items/private/ /users/{user_id}/activate /items/pro/ then you could add different permission requirements for each of them just with dependencies and sub-dependencies: graph TB current_user([\"current_user\"]) active_user([\"active_user\"]) admin_user([\"admin_user\"]) paying_user([\"paying_user\"]) public[\"/items/public/\"] private[\"/items/private/\"] activate_user[\"/users/{user_id}/activate\"] pro_items[\"/items/pro/\"] current_user --> active_user active_user --> admin_user active_user --> paying_user current_user --> public active_user --> private admin_user --> activate_user paying_user --> pro_items Integrated with OpenAPI \u00b6 All these dependencies, while declaring their requirements, also add parameters, validations, etc. to your path operations . FastAPI will take care of adding it all to the OpenAPI schema, so that it is shown in the interactive documentation systems.","title":"Dependencies - First Steps"},{"location":"tutorial/dependencies/#dependencies-first-steps","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI has a very powerful but intuitive Dependency Injection system. It is designed to be very simple to use, and to make it very easy for any developer to integrate other components with FastAPI .","title":"Dependencies - First Steps"},{"location":"tutorial/dependencies/#what-is-dependency-injection","text":"\"Dependency Injection\" means, in programming, that there is a way for your code (in this case, your path operation functions ) to declare things that it requires to work and use: \"dependencies\". And then, that system (in this case FastAPI ) will take care of doing whatever is needed to provide your code with those needed dependencies (\"inject\" the dependencies). This is very useful when you need to: Have shared logic (the same code logic again and again). Share database connections. Enforce security, authentication, role requirements, etc. And many other things... All these, while minimizing code repetition.","title":"What is \"Dependency Injection\""},{"location":"tutorial/dependencies/#first-steps","text":"Let's see a very simple example. It will be so simple that it is not very useful, for now. But this way we can focus on how the Dependency Injection system works.","title":"First Steps"},{"location":"tutorial/dependencies/#create-a-dependency-or-dependable","text":"Let's first focus on the dependency. It is just a function that can take all the same parameters that a path operation function can take: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons That's it. 2 lines . And it has the same shape and structure that all your path operation functions have. You can think of it as a path operation function without the \"decorator\" (without the @app.get(\"/some-path\") ). And it can return anything you want. In this case, this dependency expects: An optional query parameter q that is a str . An optional query parameter skip that is an int , and by default is 0 . An optional query parameter limit that is an int , and by default is 100 . And then it just returns a dict containing those values.","title":"Create a dependency, or \"dependable\""},{"location":"tutorial/dependencies/#import-depends","text":"Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons","title":"Import Depends"},{"location":"tutorial/dependencies/#declare-the-dependency-in-the-dependant","text":"The same way you use Body , Query , etc. with your path operation function parameters, use Depends with a new parameter: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons Although you use Depends in the parameters of your function the same way you use Body , Query , etc, Depends works a bit differently. You only give Depends a single parameter. This parameter must be something like a function. And that function takes parameters in the same way that path operation functions do. Tip You'll see what other \"things\", apart from functions, can be used as dependencies in the next chapter. Whenever a new request arrives, FastAPI will take care of: Calling your dependency (\"dependable\") function with the correct parameters. Get the result from your function. Assign that result to the parameter in your path operation function . graph TB common_parameters([\"common_parameters\"]) read_items[\"/items/\"] read_users[\"/users/\"] common_parameters --> read_items common_parameters --> read_users This way you write shared code once and FastAPI takes care of calling it for your path operations . Check Notice that you don't have to create a special class and pass it somewhere to FastAPI to \"register\" it or anything similar. You just pass it to Depends and FastAPI knows how to do the rest.","title":"Declare the dependency, in the \"dependant\""},{"location":"tutorial/dependencies/#to-async-or-not-to-async","text":"As dependencies will also be called by FastAPI (the same as your path operation functions ), the same rules apply while defining your functions. You can use async def or normal def . And you can declare dependencies with async def inside of normal def path operation functions , or def dependencies inside of async def path operation functions , etc. It doesn't matter. FastAPI will know what to do. Note If you don't know, check the Async: \"In a hurry?\" section about async and await in the docs.","title":"To async or not to async"},{"location":"tutorial/dependencies/#integrated-with-openapi","text":"All the request declarations, validations and requirements of your dependencies (and sub-dependencies) will be integrated in the same OpenAPI schema. So, the interactive docs will have all the information from these dependencies too:","title":"Integrated with OpenAPI"},{"location":"tutorial/dependencies/#simple-usage","text":"If you look at it, path operation functions are declared to be used whenever a path and operation matches, and then FastAPI takes care of calling the function with the correct parameters, extracting the data from the request. Actually, all (or most) of the web frameworks work in this same way. You never call those functions directly. They are called by your framework (in this case, FastAPI ). With the Dependency Injection system, you can also tell FastAPI that your path operation function also \"depends\" on something else that should be executed before your path operation function , and FastAPI will take care of executing it and \"injecting\" the results. Other common terms for this same idea of \"dependency injection\" are: resources providers services injectables components","title":"Simple usage"},{"location":"tutorial/dependencies/#fastapi-plug-ins","text":"Integrations and \"plug-in\"s can be built using the Dependency Injection system. But in fact, there is actually no need to create \"plug-ins\" , as by using dependencies it's possible to declare an infinite number of integrations and interactions that become available to your path operation functions . And dependencies can be created in a very simple and intuitive way that allow you to just import the Python packages you need, and integrate them with your API functions in a couple of lines of code, literally . You will see examples of this in the next chapters, about relational and NoSQL databases, security, etc.","title":"FastAPI plug-ins"},{"location":"tutorial/dependencies/#fastapi-compatibility","text":"The simplicity of the dependency injection system makes FastAPI compatible with: all the relational databases NoSQL databases external packages external APIs authentication and authorization systems API usage monitoring systems response data injection systems etc.","title":"FastAPI compatibility"},{"location":"tutorial/dependencies/#simple-and-powerful","text":"Although the hierarchical dependency injection system is very simple to define and use, it's still very powerful. You can define dependencies that in turn can define dependencies themselves. In the end, a hierarchical tree of dependencies is built, and the Dependency Injection system takes care of solving all these dependencies for you (and their sub-dependencies) and providing (injecting) the results at each step. For example, let's say you have 4 API endpoints ( path operations ): /items/public/ /items/private/ /users/{user_id}/activate /items/pro/ then you could add different permission requirements for each of them just with dependencies and sub-dependencies: graph TB current_user([\"current_user\"]) active_user([\"active_user\"]) admin_user([\"admin_user\"]) paying_user([\"paying_user\"]) public[\"/items/public/\"] private[\"/items/private/\"] activate_user[\"/users/{user_id}/activate\"] pro_items[\"/items/pro/\"] current_user --> active_user active_user --> admin_user active_user --> paying_user current_user --> public active_user --> private admin_user --> activate_user paying_user --> pro_items","title":"Simple and Powerful"},{"location":"tutorial/dependencies/#integrated-with-openapi_1","text":"All these dependencies, while declaring their requirements, also add parameters, validations, etc. to your path operations . FastAPI will take care of adding it all to the OpenAPI schema, so that it is shown in the interactive documentation systems.","title":"Integrated with OpenAPI"},{"location":"tutorial/dependencies/classes-as-dependencies/","text":"Classes as Dependencies \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Before diving deeper into the Dependency Injection system, let's upgrade the previous example. A dict from the previous example \u00b6 In the previous example, we were returning a dict from our dependency (\"dependable\"): Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons But then we get a dict in the parameter commons of the path operation function . And we know that editors can't provide a lot of support (like completion) for dict s, because they can't know their keys and value types. We can do better... What makes a dependency \u00b6 Up to now you have seen dependencies declared as functions. But that's not the only way to declare dependencies (although it would probably be the more common). The key factor is that a dependency should be a \"callable\". A \" callable \" in Python is anything that Python can \"call\" like a function. So, if you have an object something (that might not be a function) and you can \"call\" it (execute it) like: something () or something ( some_argument , some_keyword_argument = \"foo\" ) then it is a \"callable\". Classes as dependencies \u00b6 You might notice that to create an instance of a Python class, you use that same syntax. For example: class Cat : def __init__ ( self , name : str ): self . name = name fluffy = Cat ( name = \"Mr Fluffy\" ) In this case, fluffy is an instance of the class Cat . And to create fluffy , you are \"calling\" Cat . So, a Python class is also a callable . Then, in FastAPI , you could use a Python class as a dependency. What FastAPI actually checks is that it is a \"callable\" (function, class or anything else) and the parameters defined. If you pass a \"callable\" as a dependency in FastAPI , it will analyze the parameters for that \"callable\", and process them in the same way as the parameters for a path operation function . Including sub-dependencies. That also applies to callables with no parameters at all. The same as it would be for path operation functions with no parameters. Then, we can change the dependency \"dependable\" common_parameters from above to the class CommonQueryParams : Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response Pay attention to the __init__ method used to create the instance of the class: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response ...it has the same parameters as our previous common_parameters : Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons Those parameters are what FastAPI will use to \"solve\" the dependency. In both cases, it will have: An optional q query parameter that is a str . A skip query parameter that is an int , with a default of 0 . A limit query parameter that is an int , with a default of 100 . In both cases the data will be converted, validated, documented on the OpenAPI schema, etc. Use it \u00b6 Now you can declare your dependency using this class. Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response FastAPI calls the CommonQueryParams class. This creates an \"instance\" of that class and the instance will be passed as the parameter commons to your function. Type annotation vs Depends \u00b6 Notice how we write CommonQueryParams twice in the above code: commons : CommonQueryParams = Depends ( CommonQueryParams ) The last CommonQueryParams , in: ... = Depends ( CommonQueryParams ) ...is what FastAPI will actually use to know what is the dependency. From it is that FastAPI will extract the declared parameters and that is what FastAPI will actually call. In this case, the first CommonQueryParams , in: commons : CommonQueryParams ... ...doesn't have any special meaning for FastAPI . FastAPI won't use it for data conversion, validation, etc. (as it is using the = Depends(CommonQueryParams) for that). You could actually write just: commons = Depends ( CommonQueryParams ) ..as in: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response But declaring the type is encouraged as that way your editor will know what will be passed as the parameter commons , and then it can help you with code completion, type checks, etc: Shortcut \u00b6 But you see that we are having some code repetition here, writing CommonQueryParams twice: commons : CommonQueryParams = Depends ( CommonQueryParams ) FastAPI provides a shortcut for these cases, in where the dependency is specifically a class that FastAPI will \"call\" to create an instance of the class itself. For those specific cases, you can do the following: Instead of writing: commons : CommonQueryParams = Depends ( CommonQueryParams ) ...you write: commons : CommonQueryParams = Depends () You declare the dependency as the type of the parameter, and you use Depends() as its \"default\" value (that after the = ) for that function's parameter, without any parameter in Depends() , instead of having to write the full class again inside of Depends(CommonQueryParams) . The same example would then look like: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ()): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ()): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response ...and FastAPI will know what to do. Tip If that seems more confusing than helpful, disregard it, you don't need it. It is just a shortcut. Because FastAPI cares about helping you minimize code repetition.","title":"Classes as Dependencies"},{"location":"tutorial/dependencies/classes-as-dependencies/#classes-as-dependencies","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Before diving deeper into the Dependency Injection system, let's upgrade the previous example.","title":"Classes as Dependencies"},{"location":"tutorial/dependencies/classes-as-dependencies/#a-dict-from-the-previous-example","text":"In the previous example, we were returning a dict from our dependency (\"dependable\"): Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons But then we get a dict in the parameter commons of the path operation function . And we know that editors can't provide a lot of support (like completion) for dict s, because they can't know their keys and value types. We can do better...","title":"A dict from the previous example"},{"location":"tutorial/dependencies/classes-as-dependencies/#what-makes-a-dependency","text":"Up to now you have seen dependencies declared as functions. But that's not the only way to declare dependencies (although it would probably be the more common). The key factor is that a dependency should be a \"callable\". A \" callable \" in Python is anything that Python can \"call\" like a function. So, if you have an object something (that might not be a function) and you can \"call\" it (execute it) like: something () or something ( some_argument , some_keyword_argument = \"foo\" ) then it is a \"callable\".","title":"What makes a dependency"},{"location":"tutorial/dependencies/classes-as-dependencies/#classes-as-dependencies_1","text":"You might notice that to create an instance of a Python class, you use that same syntax. For example: class Cat : def __init__ ( self , name : str ): self . name = name fluffy = Cat ( name = \"Mr Fluffy\" ) In this case, fluffy is an instance of the class Cat . And to create fluffy , you are \"calling\" Cat . So, a Python class is also a callable . Then, in FastAPI , you could use a Python class as a dependency. What FastAPI actually checks is that it is a \"callable\" (function, class or anything else) and the parameters defined. If you pass a \"callable\" as a dependency in FastAPI , it will analyze the parameters for that \"callable\", and process them in the same way as the parameters for a path operation function . Including sub-dependencies. That also applies to callables with no parameters at all. The same as it would be for path operation functions with no parameters. Then, we can change the dependency \"dependable\" common_parameters from above to the class CommonQueryParams : Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response Pay attention to the __init__ method used to create the instance of the class: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response ...it has the same parameters as our previous common_parameters : Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons Those parameters are what FastAPI will use to \"solve\" the dependency. In both cases, it will have: An optional q query parameter that is a str . A skip query parameter that is an int , with a default of 0 . A limit query parameter that is an int , with a default of 100 . In both cases the data will be converted, validated, documented on the OpenAPI schema, etc.","title":"Classes as dependencies"},{"location":"tutorial/dependencies/classes-as-dependencies/#use-it","text":"Now you can declare your dependency using this class. Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response FastAPI calls the CommonQueryParams class. This creates an \"instance\" of that class and the instance will be passed as the parameter commons to your function.","title":"Use it"},{"location":"tutorial/dependencies/classes-as-dependencies/#type-annotation-vs-depends","text":"Notice how we write CommonQueryParams twice in the above code: commons : CommonQueryParams = Depends ( CommonQueryParams ) The last CommonQueryParams , in: ... = Depends ( CommonQueryParams ) ...is what FastAPI will actually use to know what is the dependency. From it is that FastAPI will extract the declared parameters and that is what FastAPI will actually call. In this case, the first CommonQueryParams , in: commons : CommonQueryParams ... ...doesn't have any special meaning for FastAPI . FastAPI won't use it for data conversion, validation, etc. (as it is using the = Depends(CommonQueryParams) for that). You could actually write just: commons = Depends ( CommonQueryParams ) ..as in: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response But declaring the type is encouraged as that way your editor will know what will be passed as the parameter commons , and then it can help you with code completion, type checks, etc:","title":"Type annotation vs Depends"},{"location":"tutorial/dependencies/classes-as-dependencies/#shortcut","text":"But you see that we are having some code repetition here, writing CommonQueryParams twice: commons : CommonQueryParams = Depends ( CommonQueryParams ) FastAPI provides a shortcut for these cases, in where the dependency is specifically a class that FastAPI will \"call\" to create an instance of the class itself. For those specific cases, you can do the following: Instead of writing: commons : CommonQueryParams = Depends ( CommonQueryParams ) ...you write: commons : CommonQueryParams = Depends () You declare the dependency as the type of the parameter, and you use Depends() as its \"default\" value (that after the = ) for that function's parameter, without any parameter in Depends() , instead of having to write the full class again inside of Depends(CommonQueryParams) . The same example would then look like: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ()): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ()): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response ...and FastAPI will know what to do. Tip If that seems more confusing than helpful, disregard it, you don't need it. It is just a shortcut. Because FastAPI cares about helping you minimize code repetition.","title":"Shortcut"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/","text":"Dependencies in path operation decorators \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In some cases you don't really need the return value of a dependency inside your path operation function . Or the dependency doesn't return a value. But you still need it to be executed/solved. For those cases, instead of declaring a path operation function parameter with Depends , you can add a list of dependencies to the path operation decorator . Add dependencies to the path operation decorator \u00b6 The path operation decorator receives an optional argument dependencies . It should be a list of Depends() : from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] These dependencies will be executed/solved the same way normal dependencies. But their value (if they return any) won't be passed to your path operation function . Tip Some editors check for unused function parameters, and show them as errors. Using these dependencies in the path operation decorator you can make sure they are executed while avoiding editor/tooling errors. It might also help avoid confusion for new developers that see an unused parameter in your code and could think it's unnecessary. Info In this example we use invented custom headers X-Key and X-Token . But in real cases, when implementing security, you would get more benefits from using the integrated Security utilities (the next chapter) . Dependencies errors and return values \u00b6 You can use the same dependency functions you use normally. Dependency requirements \u00b6 They can declare request requirements (like headers) or other sub-dependencies: from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] Raise exceptions \u00b6 These dependencies can raise exceptions, the same as normal dependencies: from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] Return values \u00b6 And they can return values or not, the values won't be used. So, you can re-use a normal dependency (that returns a value) you already use somewhere else, and even though the value won't be used, the dependency will be executed: from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] Dependencies for a group of path operations \u00b6 Later, when reading about how to structure bigger applications ( Bigger Applications - Multiple Files ), possibly with multiple files, you will learn how to declare a single dependencies parameter for a group of path operations . Global Dependencies \u00b6 Next we will see how to add dependencies to the whole FastAPI application, so that they apply to each path operation .","title":"Dependencies in path operation decorators"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependencies-in-path-operation-decorators","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In some cases you don't really need the return value of a dependency inside your path operation function . Or the dependency doesn't return a value. But you still need it to be executed/solved. For those cases, instead of declaring a path operation function parameter with Depends , you can add a list of dependencies to the path operation decorator .","title":"Dependencies in path operation decorators"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#add-dependencies-to-the-path-operation-decorator","text":"The path operation decorator receives an optional argument dependencies . It should be a list of Depends() : from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] These dependencies will be executed/solved the same way normal dependencies. But their value (if they return any) won't be passed to your path operation function . Tip Some editors check for unused function parameters, and show them as errors. Using these dependencies in the path operation decorator you can make sure they are executed while avoiding editor/tooling errors. It might also help avoid confusion for new developers that see an unused parameter in your code and could think it's unnecessary. Info In this example we use invented custom headers X-Key and X-Token . But in real cases, when implementing security, you would get more benefits from using the integrated Security utilities (the next chapter) .","title":"Add dependencies to the path operation decorator"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependencies-errors-and-return-values","text":"You can use the same dependency functions you use normally.","title":"Dependencies errors and return values"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependency-requirements","text":"They can declare request requirements (like headers) or other sub-dependencies: from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }]","title":"Dependency requirements"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#raise-exceptions","text":"These dependencies can raise exceptions, the same as normal dependencies: from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }]","title":"Raise exceptions"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#return-values","text":"And they can return values or not, the values won't be used. So, you can re-use a normal dependency (that returns a value) you already use somewhere else, and even though the value won't be used, the dependency will be executed: from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }]","title":"Return values"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependencies-for-a-group-of-path-operations","text":"Later, when reading about how to structure bigger applications ( Bigger Applications - Multiple Files ), possibly with multiple files, you will learn how to declare a single dependencies parameter for a group of path operations .","title":"Dependencies for a group of path operations"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#global-dependencies","text":"Next we will see how to add dependencies to the whole FastAPI application, so that they apply to each path operation .","title":"Global Dependencies"},{"location":"tutorial/dependencies/dependencies-with-yield/","text":"Dependencies with yield \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI supports dependencies that do some extra steps after finishing . To do this, use yield instead of return , and write the extra steps after. Tip Make sure to use yield one single time. Technical Details Any function that is valid to use with: @contextlib.contextmanager or @contextlib.asynccontextmanager would be valid to use as a FastAPI dependency. In fact, FastAPI uses those two decorators internally. A database dependency with yield \u00b6 For example, you could use this to create a database session and close it after finishing. Only the code prior to and including the yield statement is executed before sending a response: async def get_db (): db = DBSession () try : yield db finally : db . close () The yielded value is what is injected into path operations and other dependencies: async def get_db (): db = DBSession () try : yield db finally : db . close () The code following the yield statement is executed after the response has been delivered: async def get_db (): db = DBSession () try : yield db finally : db . close () Tip You can use async or normal functions. FastAPI will do the right thing with each, the same as with normal dependencies. A dependency with yield and try \u00b6 If you use a try block in a dependency with yield , you'll receive any exception that was thrown when using the dependency. For example, if some code at some point in the middle, in another dependency or in a path operation , made a database transaction \"rollback\" or create any other error, you will receive the exception in your dependency. So, you can look for that specific exception inside the dependency with except SomeException . In the same way, you can use finally to make sure the exit steps are executed, no matter if there was an exception or not. async def get_db (): db = DBSession () try : yield db finally : db . close () Sub-dependencies with yield \u00b6 You can have sub-dependencies and \"trees\" of sub-dependencies of any size and shape, and any or all of them can use yield . FastAPI will make sure that the \"exit code\" in each dependency with yield is run in the correct order. For example, dependency_c can have a dependency on dependency_b , and dependency_b on dependency_a : from fastapi import Depends async def dependency_a (): dep_a = generate_dep_a () try : yield dep_a finally : dep_a . close () async def dependency_b ( dep_a = Depends ( dependency_a )): dep_b = generate_dep_b () try : yield dep_b finally : dep_b . close ( dep_a ) async def dependency_c ( dep_b = Depends ( dependency_b )): dep_c = generate_dep_c () try : yield dep_c finally : dep_c . close ( dep_b ) And all of them can use yield . In this case dependency_c , to execute its exit code, needs the value from dependency_b (here named dep_b ) to still be available. And, in turn, dependency_b needs the value from dependency_a (here named dep_a ) to be available for its exit code. from fastapi import Depends async def dependency_a (): dep_a = generate_dep_a () try : yield dep_a finally : dep_a . close () async def dependency_b ( dep_a = Depends ( dependency_a )): dep_b = generate_dep_b () try : yield dep_b finally : dep_b . close ( dep_a ) async def dependency_c ( dep_b = Depends ( dependency_b )): dep_c = generate_dep_c () try : yield dep_c finally : dep_c . close ( dep_b ) The same way, you could have dependencies with yield and return mixed. And you could have a single dependency that requires several other dependencies with yield , etc. You can have any combinations of dependencies that you want. FastAPI will make sure everything is run in the correct order. Technical Details This works thanks to Python's Context Managers . FastAPI uses them internally to achieve this. Dependencies with yield and HTTPException \u00b6 You saw that you can use dependencies with yield and have try blocks that catch exceptions. It might be tempting to raise an HTTPException or similar in the exit code, after the yield . But it won't work . The exit code in dependencies with yield is executed after the response is sent, so Exception Handlers will have already run. There's nothing catching exceptions thrown by your dependencies in the exit code (after the yield ). So, if you raise an HTTPException after the yield , the default (or any custom) exception handler that catches HTTPException s and returns an HTTP 400 response won't be there to catch that exception anymore. This is what allows anything set in the dependency (e.g. a DB session) to, for example, be used by background tasks. Background tasks are run after the response has been sent. So there's no way to raise an HTTPException because there's not even a way to change the response that is already sent . But if a background task creates a DB error, at least you can rollback or cleanly close the session in the dependency with yield , and maybe log the error or report it to a remote tracking system. If you have some code that you know could raise an exception, do the most normal/\"Pythonic\" thing and add a try block in that section of the code. If you have custom exceptions that you would like to handle before returning the response and possibly modifying the response, maybe even raising an HTTPException , create a Custom Exception Handler . Tip You can still raise exceptions including HTTPException before the yield . But not after. The sequence of execution is more or less like this diagram. Time flows from top to bottom. And each column is one of the parts interacting or executing code. sequenceDiagram participant client as Client participant handler as Exception handler participant dep as Dep with yield participant operation as Path Operation participant tasks as Background tasks Note over client,tasks: Can raise exception for dependency, handled after response is sent Note over client,operation: Can raise HTTPException and can change the response client ->> dep: Start request Note over dep: Run code up to yield opt raise dep -->> handler: Raise HTTPException handler -->> client: HTTP error response dep -->> dep: Raise other exception end dep ->> operation: Run dependency, e.g. DB session opt raise operation -->> dep: Raise HTTPException dep -->> handler: Auto forward exception handler -->> client: HTTP error response operation -->> dep: Raise other exception dep -->> handler: Auto forward exception end operation ->> client: Return response to client Note over client,operation: Response is already sent, can't change it anymore opt Tasks operation -->> tasks: Send background tasks end opt Raise other exception tasks -->> dep: Raise other exception end Note over dep: After yield opt Handle other exception dep -->> dep: Handle exception, can't change response. E.g. close DB session. end Info Only one response will be sent to the client. It might be one of the error responses or it will be the response from the path operation . After one of those responses is sent, no other response can be sent. Tip This diagram shows HTTPException , but you could also raise any other exception for which you create a Custom Exception Handler . If you raise any exception, it will be passed to the dependencies with yield, including HTTPException , and then again to the exception handlers. If there's no exception handler for that exception, it will then be handled by the default internal ServerErrorMiddleware , returning a 500 HTTP status code, to let the client know that there was an error in the server. Context Managers \u00b6 What are \"Context Managers\" \u00b6 \"Context Managers\" are any of those Python objects that you can use in a with statement. For example, you can use with to read a file : with open ( \"./somefile.txt\" ) as f : contents = f . read () print ( contents ) Underneath, the open(\"./somefile.txt\") creates an object that is a called a \"Context Manager\". When the with block finishes, it makes sure to close the file, even if there were exceptions. When you create a dependency with yield , FastAPI will internally convert it to a context manager, and combine it with some other related tools. Using context managers in dependencies with yield \u00b6 Warning This is, more or less, an \"advanced\" idea. If you are just starting with FastAPI you might want to skip it for now. In Python, you can create Context Managers by creating a class with two methods: __enter__() and __exit__() . You can also use them inside of FastAPI dependencies with yield by using with or async with statements inside of the dependency function: class MySuperContextManager : def __init__ ( self ): self . db = DBSession () def __enter__ ( self ): return self . db def __exit__ ( self , exc_type , exc_value , traceback ): self . db . close () async def get_db (): with MySuperContextManager () as db : yield db Tip Another way to create a context manager is with: @contextlib.contextmanager or @contextlib.asynccontextmanager using them to decorate a function with a single yield . That's what FastAPI uses internally for dependencies with yield . But you don't have to use the decorators for FastAPI dependencies (and you shouldn't). FastAPI will do it for you internally.","title":"Dependencies with yield"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI supports dependencies that do some extra steps after finishing . To do this, use yield instead of return , and write the extra steps after. Tip Make sure to use yield one single time. Technical Details Any function that is valid to use with: @contextlib.contextmanager or @contextlib.asynccontextmanager would be valid to use as a FastAPI dependency. In fact, FastAPI uses those two decorators internally.","title":"Dependencies with yield"},{"location":"tutorial/dependencies/dependencies-with-yield/#a-database-dependency-with-yield","text":"For example, you could use this to create a database session and close it after finishing. Only the code prior to and including the yield statement is executed before sending a response: async def get_db (): db = DBSession () try : yield db finally : db . close () The yielded value is what is injected into path operations and other dependencies: async def get_db (): db = DBSession () try : yield db finally : db . close () The code following the yield statement is executed after the response has been delivered: async def get_db (): db = DBSession () try : yield db finally : db . close () Tip You can use async or normal functions. FastAPI will do the right thing with each, the same as with normal dependencies.","title":"A database dependency with yield"},{"location":"tutorial/dependencies/dependencies-with-yield/#a-dependency-with-yield-and-try","text":"If you use a try block in a dependency with yield , you'll receive any exception that was thrown when using the dependency. For example, if some code at some point in the middle, in another dependency or in a path operation , made a database transaction \"rollback\" or create any other error, you will receive the exception in your dependency. So, you can look for that specific exception inside the dependency with except SomeException . In the same way, you can use finally to make sure the exit steps are executed, no matter if there was an exception or not. async def get_db (): db = DBSession () try : yield db finally : db . close ()","title":"A dependency with yield and try"},{"location":"tutorial/dependencies/dependencies-with-yield/#sub-dependencies-with-yield","text":"You can have sub-dependencies and \"trees\" of sub-dependencies of any size and shape, and any or all of them can use yield . FastAPI will make sure that the \"exit code\" in each dependency with yield is run in the correct order. For example, dependency_c can have a dependency on dependency_b , and dependency_b on dependency_a : from fastapi import Depends async def dependency_a (): dep_a = generate_dep_a () try : yield dep_a finally : dep_a . close () async def dependency_b ( dep_a = Depends ( dependency_a )): dep_b = generate_dep_b () try : yield dep_b finally : dep_b . close ( dep_a ) async def dependency_c ( dep_b = Depends ( dependency_b )): dep_c = generate_dep_c () try : yield dep_c finally : dep_c . close ( dep_b ) And all of them can use yield . In this case dependency_c , to execute its exit code, needs the value from dependency_b (here named dep_b ) to still be available. And, in turn, dependency_b needs the value from dependency_a (here named dep_a ) to be available for its exit code. from fastapi import Depends async def dependency_a (): dep_a = generate_dep_a () try : yield dep_a finally : dep_a . close () async def dependency_b ( dep_a = Depends ( dependency_a )): dep_b = generate_dep_b () try : yield dep_b finally : dep_b . close ( dep_a ) async def dependency_c ( dep_b = Depends ( dependency_b )): dep_c = generate_dep_c () try : yield dep_c finally : dep_c . close ( dep_b ) The same way, you could have dependencies with yield and return mixed. And you could have a single dependency that requires several other dependencies with yield , etc. You can have any combinations of dependencies that you want. FastAPI will make sure everything is run in the correct order. Technical Details This works thanks to Python's Context Managers . FastAPI uses them internally to achieve this.","title":"Sub-dependencies with yield"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield-and-httpexception","text":"You saw that you can use dependencies with yield and have try blocks that catch exceptions. It might be tempting to raise an HTTPException or similar in the exit code, after the yield . But it won't work . The exit code in dependencies with yield is executed after the response is sent, so Exception Handlers will have already run. There's nothing catching exceptions thrown by your dependencies in the exit code (after the yield ). So, if you raise an HTTPException after the yield , the default (or any custom) exception handler that catches HTTPException s and returns an HTTP 400 response won't be there to catch that exception anymore. This is what allows anything set in the dependency (e.g. a DB session) to, for example, be used by background tasks. Background tasks are run after the response has been sent. So there's no way to raise an HTTPException because there's not even a way to change the response that is already sent . But if a background task creates a DB error, at least you can rollback or cleanly close the session in the dependency with yield , and maybe log the error or report it to a remote tracking system. If you have some code that you know could raise an exception, do the most normal/\"Pythonic\" thing and add a try block in that section of the code. If you have custom exceptions that you would like to handle before returning the response and possibly modifying the response, maybe even raising an HTTPException , create a Custom Exception Handler . Tip You can still raise exceptions including HTTPException before the yield . But not after. The sequence of execution is more or less like this diagram. Time flows from top to bottom. And each column is one of the parts interacting or executing code. sequenceDiagram participant client as Client participant handler as Exception handler participant dep as Dep with yield participant operation as Path Operation participant tasks as Background tasks Note over client,tasks: Can raise exception for dependency, handled after response is sent Note over client,operation: Can raise HTTPException and can change the response client ->> dep: Start request Note over dep: Run code up to yield opt raise dep -->> handler: Raise HTTPException handler -->> client: HTTP error response dep -->> dep: Raise other exception end dep ->> operation: Run dependency, e.g. DB session opt raise operation -->> dep: Raise HTTPException dep -->> handler: Auto forward exception handler -->> client: HTTP error response operation -->> dep: Raise other exception dep -->> handler: Auto forward exception end operation ->> client: Return response to client Note over client,operation: Response is already sent, can't change it anymore opt Tasks operation -->> tasks: Send background tasks end opt Raise other exception tasks -->> dep: Raise other exception end Note over dep: After yield opt Handle other exception dep -->> dep: Handle exception, can't change response. E.g. close DB session. end Info Only one response will be sent to the client. It might be one of the error responses or it will be the response from the path operation . After one of those responses is sent, no other response can be sent. Tip This diagram shows HTTPException , but you could also raise any other exception for which you create a Custom Exception Handler . If you raise any exception, it will be passed to the dependencies with yield, including HTTPException , and then again to the exception handlers. If there's no exception handler for that exception, it will then be handled by the default internal ServerErrorMiddleware , returning a 500 HTTP status code, to let the client know that there was an error in the server.","title":"Dependencies with yield and HTTPException"},{"location":"tutorial/dependencies/dependencies-with-yield/#context-managers","text":"","title":"Context Managers"},{"location":"tutorial/dependencies/dependencies-with-yield/#what-are-context-managers","text":"\"Context Managers\" are any of those Python objects that you can use in a with statement. For example, you can use with to read a file : with open ( \"./somefile.txt\" ) as f : contents = f . read () print ( contents ) Underneath, the open(\"./somefile.txt\") creates an object that is a called a \"Context Manager\". When the with block finishes, it makes sure to close the file, even if there were exceptions. When you create a dependency with yield , FastAPI will internally convert it to a context manager, and combine it with some other related tools.","title":"What are \"Context Managers\""},{"location":"tutorial/dependencies/dependencies-with-yield/#using-context-managers-in-dependencies-with-yield","text":"Warning This is, more or less, an \"advanced\" idea. If you are just starting with FastAPI you might want to skip it for now. In Python, you can create Context Managers by creating a class with two methods: __enter__() and __exit__() . You can also use them inside of FastAPI dependencies with yield by using with or async with statements inside of the dependency function: class MySuperContextManager : def __init__ ( self ): self . db = DBSession () def __enter__ ( self ): return self . db def __exit__ ( self , exc_type , exc_value , traceback ): self . db . close () async def get_db (): with MySuperContextManager () as db : yield db Tip Another way to create a context manager is with: @contextlib.contextmanager or @contextlib.asynccontextmanager using them to decorate a function with a single yield . That's what FastAPI uses internally for dependencies with yield . But you don't have to use the decorators for FastAPI dependencies (and you shouldn't). FastAPI will do it for you internally.","title":"Using context managers in dependencies with yield"},{"location":"tutorial/dependencies/global-dependencies/","text":"Global Dependencies \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . For some types of applications you might want to add dependencies to the whole application. Similar to the way you can add dependencies to the path operation decorators , you can add them to the FastAPI application. In that case, they will be applied to all the path operations in the application: from fastapi import Depends , FastAPI , Header , HTTPException async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key app = FastAPI ( dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) @app . get ( \"/items/\" ) async def read_items (): return [{ \"item\" : \"Portal Gun\" }, { \"item\" : \"Plumbus\" }] @app . get ( \"/users/\" ) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] And all the ideas in the section about adding dependencies to the path operation decorators still apply, but in this case, to all of the path operations in the app. Dependencies for groups of path operations \u00b6 Later, when reading about how to structure bigger applications ( Bigger Applications - Multiple Files ), possibly with multiple files, you will learn how to declare a single dependencies parameter for a group of path operations .","title":"Global Dependencies"},{"location":"tutorial/dependencies/global-dependencies/#global-dependencies","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . For some types of applications you might want to add dependencies to the whole application. Similar to the way you can add dependencies to the path operation decorators , you can add them to the FastAPI application. In that case, they will be applied to all the path operations in the application: from fastapi import Depends , FastAPI , Header , HTTPException async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key app = FastAPI ( dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) @app . get ( \"/items/\" ) async def read_items (): return [{ \"item\" : \"Portal Gun\" }, { \"item\" : \"Plumbus\" }] @app . get ( \"/users/\" ) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] And all the ideas in the section about adding dependencies to the path operation decorators still apply, but in this case, to all of the path operations in the app.","title":"Global Dependencies"},{"location":"tutorial/dependencies/global-dependencies/#dependencies-for-groups-of-path-operations","text":"Later, when reading about how to structure bigger applications ( Bigger Applications - Multiple Files ), possibly with multiple files, you will learn how to declare a single dependencies parameter for a group of path operations .","title":"Dependencies for groups of path operations"},{"location":"tutorial/dependencies/sub-dependencies/","text":"Sub-dependencies \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can create dependencies that have sub-dependencies . They can be as deep as you need them to be. FastAPI will take care of solving them. First dependency \"dependable\" \u00b6 You could create a first dependency (\"dependable\") like: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : str | None = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : str | None = Cookie ( default = None ) ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } It declares an optional query parameter q as a str , and then it just returns it. This is quite simple (not very useful), but will help us focus on how the sub-dependencies work. Second dependency, \"dependable\" and \"dependant\" \u00b6 Then you can create another dependency function (a \"dependable\") that at the same time declares a dependency of its own (so it is a \"dependant\" too): Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : str | None = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : str | None = Cookie ( default = None ) ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } Let's focus on the parameters declared: Even though this function is a dependency (\"dependable\") itself, it also declares another dependency (it \"depends\" on something else). It depends on the query_extractor , and assigns the value returned by it to the parameter q . It also declares an optional last_query cookie, as a str . If the user didn't provide any query q , we use the last query used, which we saved to a cookie before. Use the dependency \u00b6 Then we can use the dependency with: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : str | None = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : str | None = Cookie ( default = None ) ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } Info Notice that we are only declaring one dependency in the path operation function , the query_or_cookie_extractor . But FastAPI will know that it has to solve query_extractor first, to pass the results of that to query_or_cookie_extractor while calling it. graph TB query_extractor([\"query_extractor\"]) query_or_cookie_extractor([\"query_or_cookie_extractor\"]) read_query[\"/items/\"] query_extractor --> query_or_cookie_extractor --> read_query Using the same dependency multiple times \u00b6 If one of your dependencies is declared multiple times for the same path operation , for example, multiple dependencies have a common sub-dependency, FastAPI will know to call that sub-dependency only once per request. And it will save the returned value in a \"cache\" and pass it to all the \"dependants\" that need it in that specific request, instead of calling the dependency multiple times for the same request. In an advanced scenario where you know you need the dependency to be called at every step (possibly multiple times) in the same request instead of using the \"cached\" value, you can set the parameter use_cache=False when using Depends : async def needy_dependency ( fresh_value : str = Depends ( get_value , use_cache = False )): return { \"fresh_value\" : fresh_value } Recap \u00b6 Apart from all the fancy words used here, the Dependency Injection system is quite simple. Just functions that look the same as the path operation functions . But still, it is very powerful, and allows you to declare arbitrarily deeply nested dependency \"graphs\" (trees). Tip All this might not seem as useful with these simple examples. But you will see how useful it is in the chapters about security . And you will also see the amounts of code it will save you.","title":"Sub-dependencies"},{"location":"tutorial/dependencies/sub-dependencies/#sub-dependencies","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can create dependencies that have sub-dependencies . They can be as deep as you need them to be. FastAPI will take care of solving them.","title":"Sub-dependencies"},{"location":"tutorial/dependencies/sub-dependencies/#first-dependency-dependable","text":"You could create a first dependency (\"dependable\") like: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : str | None = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : str | None = Cookie ( default = None ) ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } It declares an optional query parameter q as a str , and then it just returns it. This is quite simple (not very useful), but will help us focus on how the sub-dependencies work.","title":"First dependency \"dependable\""},{"location":"tutorial/dependencies/sub-dependencies/#second-dependency-dependable-and-dependant","text":"Then you can create another dependency function (a \"dependable\") that at the same time declares a dependency of its own (so it is a \"dependant\" too): Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : str | None = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : str | None = Cookie ( default = None ) ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } Let's focus on the parameters declared: Even though this function is a dependency (\"dependable\") itself, it also declares another dependency (it \"depends\" on something else). It depends on the query_extractor , and assigns the value returned by it to the parameter q . It also declares an optional last_query cookie, as a str . If the user didn't provide any query q , we use the last query used, which we saved to a cookie before.","title":"Second dependency, \"dependable\" and \"dependant\""},{"location":"tutorial/dependencies/sub-dependencies/#use-the-dependency","text":"Then we can use the dependency with: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : str | None = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : str | None = Cookie ( default = None ) ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } Info Notice that we are only declaring one dependency in the path operation function , the query_or_cookie_extractor . But FastAPI will know that it has to solve query_extractor first, to pass the results of that to query_or_cookie_extractor while calling it. graph TB query_extractor([\"query_extractor\"]) query_or_cookie_extractor([\"query_or_cookie_extractor\"]) read_query[\"/items/\"] query_extractor --> query_or_cookie_extractor --> read_query","title":"Use the dependency"},{"location":"tutorial/dependencies/sub-dependencies/#using-the-same-dependency-multiple-times","text":"If one of your dependencies is declared multiple times for the same path operation , for example, multiple dependencies have a common sub-dependency, FastAPI will know to call that sub-dependency only once per request. And it will save the returned value in a \"cache\" and pass it to all the \"dependants\" that need it in that specific request, instead of calling the dependency multiple times for the same request. In an advanced scenario where you know you need the dependency to be called at every step (possibly multiple times) in the same request instead of using the \"cached\" value, you can set the parameter use_cache=False when using Depends : async def needy_dependency ( fresh_value : str = Depends ( get_value , use_cache = False )): return { \"fresh_value\" : fresh_value }","title":"Using the same dependency multiple times"},{"location":"tutorial/dependencies/sub-dependencies/#recap","text":"Apart from all the fancy words used here, the Dependency Injection system is quite simple. Just functions that look the same as the path operation functions . But still, it is very powerful, and allows you to declare arbitrarily deeply nested dependency \"graphs\" (trees). Tip All this might not seem as useful with these simple examples. But you will see how useful it is in the chapters about security . And you will also see the amounts of code it will save you.","title":"Recap"},{"location":"tutorial/security/","text":"Security Intro \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . There are many ways to handle security, authentication and authorization. And it normally is a complex and \"difficult\" topic. In many frameworks and systems just handling security and authentication takes a big amount of effort and code (in many cases it can be 50% or more of all the code written). FastAPI provides several tools to help you deal with Security easily, rapidly, in a standard way, without having to study and learn all the security specifications. But first, let's check some small concepts. In a hurry? \u00b6 If you don't care about any of these terms and you just need to add security with authentication based on username and password right now , skip to the next chapters. OAuth2 \u00b6 OAuth2 is a specification that defines several ways to handle authentication and authorization. It is quite an extensive specification and covers several complex use cases. It includes ways to authenticate using a \"third party\". That's what all the systems with \"login with Facebook, Google, Twitter, GitHub\" use underneath. OAuth 1 \u00b6 There was an OAuth 1, which is very different from OAuth2, and more complex, as it included directly specifications on how to encrypt the communication. It is not very popular or used nowadays. OAuth2 doesn't specify how to encrypt the communication, it expects you to have your application served with HTTPS. Tip In the section about deployment you will see how to set up HTTPS for free, using Traefik and Let's Encrypt. OpenID Connect \u00b6 OpenID Connect is another specification, based on OAuth2 . It just extends OAuth2 specifying some things that are relatively ambiguous in OAuth2, to try to make it more interoperable. For example, Google login uses OpenID Connect (which underneath uses OAuth2). But Facebook login doesn't support OpenID Connect. It has its own flavor of OAuth2. OpenID (not \"OpenID Connect\") \u00b6 There was also an \"OpenID\" specification. That tried to solve the same thing as OpenID Connect , but was not based on OAuth2. So, it was a complete additional system. It is not very popular or used nowadays. OpenAPI \u00b6 OpenAPI (previously known as Swagger) is the open specification for building APIs (now part of the Linux Foundation). FastAPI is based on OpenAPI . That's what makes it possible to have multiple automatic interactive documentation interfaces, code generation, etc. OpenAPI has a way to define multiple security \"schemes\". By using them, you can take advantage of all these standard-based tools, including these interactive documentation systems. OpenAPI defines the following security schemes: apiKey : an application specific key that can come from: A query parameter. A header. A cookie. http : standard HTTP authentication systems, including: bearer : a header Authorization with a value of Bearer plus a token. This is inherited from OAuth2. HTTP Basic authentication. HTTP Digest, etc. oauth2 : all the OAuth2 ways to handle security (called \"flows\"). Several of these flows are appropriate for building an OAuth 2.0 authentication provider (like Google, Facebook, Twitter, GitHub, etc): implicit clientCredentials authorizationCode But there is one specific \"flow\" that can be perfectly used for handling authentication in the same application directly: password : some next chapters will cover examples of this. openIdConnect : has a way to define how to discover OAuth2 authentication data automatically. This automatic discovery is what is defined in the OpenID Connect specification. Tip Integrating other authentication/authorization providers like Google, Facebook, Twitter, GitHub, etc. is also possible and relatively easy. The most complex problem is building an authentication/authorization provider like those, but FastAPI gives you the tools to do it easily, while doing the heavy lifting for you. FastAPI utilities \u00b6 FastAPI provides several tools for each of these security schemes in the fastapi.security module that simplify using these security mechanisms. In the next chapters you will see how to add security to your API using those tools provided by FastAPI . And you will also see how it gets automatically integrated into the interactive documentation system.","title":"Security Intro"},{"location":"tutorial/security/#security-intro","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . There are many ways to handle security, authentication and authorization. And it normally is a complex and \"difficult\" topic. In many frameworks and systems just handling security and authentication takes a big amount of effort and code (in many cases it can be 50% or more of all the code written). FastAPI provides several tools to help you deal with Security easily, rapidly, in a standard way, without having to study and learn all the security specifications. But first, let's check some small concepts.","title":"Security Intro"},{"location":"tutorial/security/#in-a-hurry","text":"If you don't care about any of these terms and you just need to add security with authentication based on username and password right now , skip to the next chapters.","title":"In a hurry?"},{"location":"tutorial/security/#oauth2","text":"OAuth2 is a specification that defines several ways to handle authentication and authorization. It is quite an extensive specification and covers several complex use cases. It includes ways to authenticate using a \"third party\". That's what all the systems with \"login with Facebook, Google, Twitter, GitHub\" use underneath.","title":"OAuth2"},{"location":"tutorial/security/#oauth-1","text":"There was an OAuth 1, which is very different from OAuth2, and more complex, as it included directly specifications on how to encrypt the communication. It is not very popular or used nowadays. OAuth2 doesn't specify how to encrypt the communication, it expects you to have your application served with HTTPS. Tip In the section about deployment you will see how to set up HTTPS for free, using Traefik and Let's Encrypt.","title":"OAuth 1"},{"location":"tutorial/security/#openid-connect","text":"OpenID Connect is another specification, based on OAuth2 . It just extends OAuth2 specifying some things that are relatively ambiguous in OAuth2, to try to make it more interoperable. For example, Google login uses OpenID Connect (which underneath uses OAuth2). But Facebook login doesn't support OpenID Connect. It has its own flavor of OAuth2.","title":"OpenID Connect"},{"location":"tutorial/security/#openid-not-openid-connect","text":"There was also an \"OpenID\" specification. That tried to solve the same thing as OpenID Connect , but was not based on OAuth2. So, it was a complete additional system. It is not very popular or used nowadays.","title":"OpenID (not \"OpenID Connect\")"},{"location":"tutorial/security/#openapi","text":"OpenAPI (previously known as Swagger) is the open specification for building APIs (now part of the Linux Foundation). FastAPI is based on OpenAPI . That's what makes it possible to have multiple automatic interactive documentation interfaces, code generation, etc. OpenAPI has a way to define multiple security \"schemes\". By using them, you can take advantage of all these standard-based tools, including these interactive documentation systems. OpenAPI defines the following security schemes: apiKey : an application specific key that can come from: A query parameter. A header. A cookie. http : standard HTTP authentication systems, including: bearer : a header Authorization with a value of Bearer plus a token. This is inherited from OAuth2. HTTP Basic authentication. HTTP Digest, etc. oauth2 : all the OAuth2 ways to handle security (called \"flows\"). Several of these flows are appropriate for building an OAuth 2.0 authentication provider (like Google, Facebook, Twitter, GitHub, etc): implicit clientCredentials authorizationCode But there is one specific \"flow\" that can be perfectly used for handling authentication in the same application directly: password : some next chapters will cover examples of this. openIdConnect : has a way to define how to discover OAuth2 authentication data automatically. This automatic discovery is what is defined in the OpenID Connect specification. Tip Integrating other authentication/authorization providers like Google, Facebook, Twitter, GitHub, etc. is also possible and relatively easy. The most complex problem is building an authentication/authorization provider like those, but FastAPI gives you the tools to do it easily, while doing the heavy lifting for you.","title":"OpenAPI"},{"location":"tutorial/security/#fastapi-utilities","text":"FastAPI provides several tools for each of these security schemes in the fastapi.security module that simplify using these security mechanisms. In the next chapters you will see how to add security to your API using those tools provided by FastAPI . And you will also see how it gets automatically integrated into the interactive documentation system.","title":"FastAPI utilities"},{"location":"tutorial/security/first-steps/","text":"Security - First Steps \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Let's imagine that you have your backend API in some domain. And you have a frontend in another domain or in a different path of the same domain (or in a mobile application). And you want to have a way for the frontend to authenticate with the backend, using a username and password . We can use OAuth2 to build that with FastAPI . But let's save you the time of reading the full long specification just to find those little pieces of information you need. Let's use the tools provided by FastAPI to handle security. How it looks \u00b6 Let's first just use the code and see how it works, and then we'll come back to understand what's happening. Create main.py \u00b6 Copy the example in a file main.py : from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } Run it \u00b6 Info First install python-multipart . E.g. pip install python-multipart . This is because OAuth2 uses \"form data\" for sending the username and password . Run the example with: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Check it \u00b6 Go to the interactive docs at: http://127.0.0.1:8000/docs . You will see something like this: Authorize button! You already have a shiny new \"Authorize\" button. And your path operation has a little lock in the top-right corner that you can click. And if you click it, you have a little authorization form to type a username and password (and other optional fields): Note It doesn't matter what you type in the form, it won't work yet. But we'll get there. This is of course not the frontend for the final users, but it's a great automatic tool to document interactively all your API. It can be used by the frontend team (that can also be yourself). It can be used by third party applications and systems. And it can also be used by yourself, to debug, check and test the same application. The password flow \u00b6 Now let's go back a bit and understand what is all that. The password \"flow\" is one of the ways (\"flows\") defined in OAuth2, to handle security and authentication. OAuth2 was designed so that the backend or API could be independent of the server that authenticates the user. But in this case, the same FastAPI application will handle the API and the authentication. So, let's review it from that simplified point of view: The user types the username and password in the frontend, and hits Enter . The frontend (running in the user's browser) sends that username and password to a specific URL in our API (declared with tokenUrl=\"token\" ). The API checks that username and password , and responds with a \"token\" (we haven't implemented any of this yet). A \"token\" is just a string with some content that we can use later to verify this user. Normally, a token is set to expire after some time. So, the user will have to log in again at some point later. And if the token is stolen, the risk is less. It is not like a permanent key that will work forever (in most of the cases). The frontend stores that token temporarily somewhere. The user clicks in the frontend to go to another section of the frontend web app. The frontend needs to fetch some more data from the API. But it needs authentication for that specific endpoint. So, to authenticate with our API, it sends a header Authorization with a value of Bearer plus the token. If the token contains foobar , the content of the Authorization header would be: Bearer foobar . FastAPI 's OAuth2PasswordBearer \u00b6 FastAPI provides several tools, at different levels of abstraction, to implement these security features. In this example we are going to use OAuth2 , with the Password flow, using a Bearer token. We do that using the OAuth2PasswordBearer class. Info A \"bearer\" token is not the only option. But it's the best one for our use case. And it might be the best for most use cases, unless you are an OAuth2 expert and know exactly why there's another option that suits better your needs. In that case, FastAPI also provides you with the tools to build it. When we create an instance of the OAuth2PasswordBearer class we pass in the tokenUrl parameter. This parameter contains the URL that the client (the frontend running in the user's browser) will use to send the username and password in order to get a token. from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } Tip Here tokenUrl=\"token\" refers to a relative URL token that we haven't created yet. As it's a relative URL, it's equivalent to ./token . Because we are using a relative URL, if your API was located at https://example.com/ , then it would refer to https://example.com/token . But if your API was located at https://example.com/api/v1/ , then it would refer to https://example.com/api/v1/token . Using a relative URL is important to make sure your application keeps working even in an advanced use case like Behind a Proxy . This parameter doesn't create that endpoint / path operation , but declares that the URL /token will be the one that the client should use to get the token. That information is used in OpenAPI, and then in the interactive API documentation systems. We will soon also create the actual path operation. Info If you are a very strict \"Pythonista\" you might dislike the style of the parameter name tokenUrl instead of token_url . That's because it is using the same name as in the OpenAPI spec. So that if you need to investigate more about any of these security schemes you can just copy and paste it to find more information about it. The oauth2_scheme variable is an instance of OAuth2PasswordBearer , but it is also a \"callable\". It could be called as: oauth2_scheme ( some , parameters ) So, it can be used with Depends . Use it \u00b6 Now you can pass that oauth2_scheme in a dependency with Depends . from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } This dependency will provide a str that is assigned to the parameter token of the path operation function . FastAPI will know that it can use this dependency to define a \"security scheme\" in the OpenAPI schema (and the automatic API docs). Technical Details FastAPI will know that it can use the class OAuth2PasswordBearer (declared in a dependency) to define the security scheme in OpenAPI because it inherits from fastapi.security.oauth2.OAuth2 , which in turn inherits from fastapi.security.base.SecurityBase . All the security utilities that integrate with OpenAPI (and the automatic API docs) inherit from SecurityBase , that's how FastAPI can know how to integrate them in OpenAPI. What it does \u00b6 It will go and look in the request for that Authorization header, check if the value is Bearer plus some token, and will return the token as a str . If it doesn't see an Authorization header, or the value doesn't have a Bearer token, it will respond with a 401 status code error ( UNAUTHORIZED ) directly. You don't even have to check if the token exists to return an error. You can be sure that if your function is executed, it will have a str in that token. You can try it already in the interactive docs: We are not verifying the validity of the token yet, but that's a start already. Recap \u00b6 So, in just 3 or 4 extra lines, you already have some primitive form of security.","title":"Security - First Steps"},{"location":"tutorial/security/first-steps/#security-first-steps","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Let's imagine that you have your backend API in some domain. And you have a frontend in another domain or in a different path of the same domain (or in a mobile application). And you want to have a way for the frontend to authenticate with the backend, using a username and password . We can use OAuth2 to build that with FastAPI . But let's save you the time of reading the full long specification just to find those little pieces of information you need. Let's use the tools provided by FastAPI to handle security.","title":"Security - First Steps"},{"location":"tutorial/security/first-steps/#how-it-looks","text":"Let's first just use the code and see how it works, and then we'll come back to understand what's happening.","title":"How it looks"},{"location":"tutorial/security/first-steps/#create-mainpy","text":"Copy the example in a file main.py : from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token }","title":"Create main.py"},{"location":"tutorial/security/first-steps/#run-it","text":"Info First install python-multipart . E.g. pip install python-multipart . This is because OAuth2 uses \"form data\" for sending the username and password . Run the example with: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Run it"},{"location":"tutorial/security/first-steps/#check-it","text":"Go to the interactive docs at: http://127.0.0.1:8000/docs . You will see something like this: Authorize button! You already have a shiny new \"Authorize\" button. And your path operation has a little lock in the top-right corner that you can click. And if you click it, you have a little authorization form to type a username and password (and other optional fields): Note It doesn't matter what you type in the form, it won't work yet. But we'll get there. This is of course not the frontend for the final users, but it's a great automatic tool to document interactively all your API. It can be used by the frontend team (that can also be yourself). It can be used by third party applications and systems. And it can also be used by yourself, to debug, check and test the same application.","title":"Check it"},{"location":"tutorial/security/first-steps/#the-password-flow","text":"Now let's go back a bit and understand what is all that. The password \"flow\" is one of the ways (\"flows\") defined in OAuth2, to handle security and authentication. OAuth2 was designed so that the backend or API could be independent of the server that authenticates the user. But in this case, the same FastAPI application will handle the API and the authentication. So, let's review it from that simplified point of view: The user types the username and password in the frontend, and hits Enter . The frontend (running in the user's browser) sends that username and password to a specific URL in our API (declared with tokenUrl=\"token\" ). The API checks that username and password , and responds with a \"token\" (we haven't implemented any of this yet). A \"token\" is just a string with some content that we can use later to verify this user. Normally, a token is set to expire after some time. So, the user will have to log in again at some point later. And if the token is stolen, the risk is less. It is not like a permanent key that will work forever (in most of the cases). The frontend stores that token temporarily somewhere. The user clicks in the frontend to go to another section of the frontend web app. The frontend needs to fetch some more data from the API. But it needs authentication for that specific endpoint. So, to authenticate with our API, it sends a header Authorization with a value of Bearer plus the token. If the token contains foobar , the content of the Authorization header would be: Bearer foobar .","title":"The password flow"},{"location":"tutorial/security/first-steps/#fastapis-oauth2passwordbearer","text":"FastAPI provides several tools, at different levels of abstraction, to implement these security features. In this example we are going to use OAuth2 , with the Password flow, using a Bearer token. We do that using the OAuth2PasswordBearer class. Info A \"bearer\" token is not the only option. But it's the best one for our use case. And it might be the best for most use cases, unless you are an OAuth2 expert and know exactly why there's another option that suits better your needs. In that case, FastAPI also provides you with the tools to build it. When we create an instance of the OAuth2PasswordBearer class we pass in the tokenUrl parameter. This parameter contains the URL that the client (the frontend running in the user's browser) will use to send the username and password in order to get a token. from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } Tip Here tokenUrl=\"token\" refers to a relative URL token that we haven't created yet. As it's a relative URL, it's equivalent to ./token . Because we are using a relative URL, if your API was located at https://example.com/ , then it would refer to https://example.com/token . But if your API was located at https://example.com/api/v1/ , then it would refer to https://example.com/api/v1/token . Using a relative URL is important to make sure your application keeps working even in an advanced use case like Behind a Proxy . This parameter doesn't create that endpoint / path operation , but declares that the URL /token will be the one that the client should use to get the token. That information is used in OpenAPI, and then in the interactive API documentation systems. We will soon also create the actual path operation. Info If you are a very strict \"Pythonista\" you might dislike the style of the parameter name tokenUrl instead of token_url . That's because it is using the same name as in the OpenAPI spec. So that if you need to investigate more about any of these security schemes you can just copy and paste it to find more information about it. The oauth2_scheme variable is an instance of OAuth2PasswordBearer , but it is also a \"callable\". It could be called as: oauth2_scheme ( some , parameters ) So, it can be used with Depends .","title":"FastAPI's OAuth2PasswordBearer"},{"location":"tutorial/security/first-steps/#use-it","text":"Now you can pass that oauth2_scheme in a dependency with Depends . from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } This dependency will provide a str that is assigned to the parameter token of the path operation function . FastAPI will know that it can use this dependency to define a \"security scheme\" in the OpenAPI schema (and the automatic API docs). Technical Details FastAPI will know that it can use the class OAuth2PasswordBearer (declared in a dependency) to define the security scheme in OpenAPI because it inherits from fastapi.security.oauth2.OAuth2 , which in turn inherits from fastapi.security.base.SecurityBase . All the security utilities that integrate with OpenAPI (and the automatic API docs) inherit from SecurityBase , that's how FastAPI can know how to integrate them in OpenAPI.","title":"Use it"},{"location":"tutorial/security/first-steps/#what-it-does","text":"It will go and look in the request for that Authorization header, check if the value is Bearer plus some token, and will return the token as a str . If it doesn't see an Authorization header, or the value doesn't have a Bearer token, it will respond with a 401 status code error ( UNAUTHORIZED ) directly. You don't even have to check if the token exists to return an error. You can be sure that if your function is executed, it will have a str in that token. You can try it already in the interactive docs: We are not verifying the validity of the token yet, but that's a start already.","title":"What it does"},{"location":"tutorial/security/first-steps/#recap","text":"So, in just 3 or 4 extra lines, you already have some primitive form of security.","title":"Recap"},{"location":"tutorial/security/get-current-user/","text":"\ud604\uc7ac \uc0ac\uc6a9\uc790 \uac00\uc838\uc624\uae30 \u00b6 \uc774\uc804 \uc7a5\uc5d0\uc11c (\uc758\uc874\uc131 \uc8fc\uc785 \uc2dc\uc2a4\ud15c\uc744 \uae30\ubc18\uc73c\ub85c \ud55c)\ubcf4\uc548 \uc2dc\uc2a4\ud15c\uc740 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc5d0\uc11c str \ub85c token \uc744 \uc81c\uacf5\ud588\uc2b5\ub2c8\ub2e4: from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } \uadf8\ub7ec\ub098 \uc544\uc9c1\ub3c4 \uc720\uc6a9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud604\uc7ac \uc0ac\uc6a9\uc790\ub97c \uc81c\uacf5\ud558\ub3c4\ub85d \ud569\uc2dc\ub2e4. \uc720\uc800 \ubaa8\ub378 \uc0dd\uc131\ud558\uae30 \u00b6 \uba3c\uc800 Pydantic \uc720\uc800 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Pydantic\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubcf8\ubb38\uc744 \uc120\uc5b8\ud558\ub294 \uac83\uacfc \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ub2e4\ub978 \uacf3\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user get_current_user \uc758\uc874\uc131 \uc0dd\uc131\ud558\uae30 \u00b6 \uc758\uc874\uc131 get_current_user \ub97c \ub9cc\ub4e4\uc5b4 \ubd05\uc2dc\ub2e4. \uc758\uc874\uc131\uc774 \ud558\uc704 \uc758\uc874\uc131\uc744 \uac00\uc9c8 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc2ed\ub2c8\uae4c? get_current_user \ub294 \uc774\uc804\uc5d0 \uc0dd\uc131\ud55c \uac83\uacfc \ub3d9\uc77c\ud55c oauth2_scheme \uacfc \uc885\uc18d\uc131\uc744 \uac16\uac8c \ub429\ub2c8\ub2e4. \uc774\uc804\uc5d0 \uacbd\ub85c \ub3d9\uc791 \uc5d0\uc11c \uc9c1\uc811 \uc218\ud589\ud588\ub358 \uac83\uacfc \ub3d9\uc77c\ud558\uac8c \uc0c8 \uc885\uc18d\uc131 get_current_user \ub294 \ud558\uc704 \uc885\uc18d\uc131 oauth2_scheme \uc5d0\uc11c str \ub85c token \uc744 \uc218\uc2e0\ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \uc720\uc800 \uac00\uc838\uc624\uae30 \u00b6 get_current_user \ub294 \ud1a0\ud070\uc744 str \ub85c \ucde8\ud558\uace0 Pydantic User \ubaa8\ub378\uc744 \ubc18\ud658\ud558\ub294 \uc6b0\ub9ac\uac00 \ub9cc\ub4e0 (\uac00\uc9dc) \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \ud604\uc7ac \uc720\uc800 \uc8fc\uc785\ud558\uae30 \u00b6 \uc774\uc81c \uacbd\ub85c \uc791\ub3d9 \uc5d0\uc11c get_current_user \uc640 \ub3d9\uc77c\ud55c Depends \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user Pydantic \ubaa8\ub378\uc778 User \ub85c current_user \uc758 \ud0c0\uc785\uc744 \uc120\uc5b8\ud558\ub294 \uac83\uc744 \uc54c\uc544\uc57c \ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \ubaa8\ub4e0 \uc644\ub8cc \ubc0f \ud0c0\uc785 \uac80\uc0ac\ub97c \ud1b5\ud574 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \uc6b0\ub9ac\ub97c \ub3c4\uc6b8 \uac83\uc785\ub2c8\ub2e4. \ud301 \uc694\uccad \ubcf8\ubb38\ub3c4 Pydantic \ubaa8\ub378\ub85c \uc120\uc5b8\ub41c\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud560 \uac83\uc785\ub2c8\ub2e4. \uc5ec\uae30\uc11c FastAPI \ub294 Depends \ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ud63c\ub3d9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud655\uc778 \uc774 \uc758\uc874\uc131 \uc2dc\uc2a4\ud15c\uc774 \uc124\uacc4\ub41c \ubc29\uc2dd\uc740 \ubaa8\ub450 User \ubaa8\ub378\uc744 \ubc18\ud658\ud558\ub294 \ub2e4\uc591\ud55c \uc758\uc874\uc131(\ub2e4\ub978 \"\uc758\uc874\uc801\uc778\")\uc744 \uac00\uc9c8 \uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4. \ud574\ub2f9 \ud0c0\uc785\uc758 \ub370\uc774\ud130\ub97c \ubc18\ud658\ud560 \uc218 \uc788\ub294 \uc758\uc874\uc131\uc774 \ud558\ub098\ub9cc \uc788\ub294 \uac83\uc73c\ub85c \uc81c\ud55c\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub2e4\ub978 \ubaa8\ub378 \u00b6 \uc774\uc81c \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc5d0\uc11c \ud604\uc7ac \uc0ac\uc6a9\uc790\ub97c \uc9c1\uc811 \uac00\uc838\uc62c \uc218 \uc788\uc73c\uba70 Depends \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc758\uc874\uc131 \uc8fc\uc785 \uc218\uc900\uc5d0\uc11c \ubcf4\uc548 \uba54\ucee4\ub2c8\uc998\uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ubcf4\uc548 \uc694\uad6c \uc0ac\ud56d\uc5d0 \ub300\ud55c \ubaa8\ub4e0 \ubaa8\ub378 \ub610\ub294 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4(\uc774 \uacbd\uc6b0 Pydantic \ubaa8\ub378 User ). \uadf8\ub7ec\ub098 \uc77c\ubd80 \ud2b9\uc815 \ub370\uc774\ud130 \ubaa8\ub378, \ud074\ub798\uc2a4 \ub610\ub294 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\ud55c\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ubaa8\ub378\uc5d0 id \uc640 email \uc774 \uc788\uace0 username \uc774 \uc5c6\uae38 \uc6d0\ud558\uc2ed\ub2c8\uae4c? \ub9de\uc2b5\ub2c8\ub2e4. \uc774\ub4e4\uc740 \ub3d9\uc77c\ud55c \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. str \ub9cc \uac16\uace0 \uc2f6\uc2b5\ub2c8\uae4c? \uc544\ub2c8\uba74 \uadf8\ub0e5 dict \ub97c \uac16\uace0 \uc2f6\uc2b5\ub2c8\uae4c? \uc544\ub2c8\uba74 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud074\ub798\uc2a4 \ubaa8\ub378 \uc778\uc2a4\ud134\uc2a4\ub97c \uc9c1\uc811 \uac16\uace0 \uc2f6\uc2b5\ub2c8\uae4c? \uadf8\ub4e4\uc740 \ubaa8\ub450 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \uc791\ub3d9\ud569\ub2c8\ub2e4. \uc2e4\uc81c\ub85c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ub85c\uadf8\uc778\ud558\ub294 \uc0ac\uc6a9\uc790\uac00 \uc5c6\uc9c0\ub9cc \uc561\uc138\uc2a4 \ud1a0\ud070\ub9cc \uc788\ub294 \ub85c\ubd07, \ubd07 \ub610\ub294 \uae30\ud0c0 \uc2dc\uc2a4\ud15c\uc774 \uc788\uc2b5\ub2c8\uae4c? \ub2e4\uc2dc \ub9d0\ud558\uc9c0\ub9cc \ubaa8\ub450 \ub3d9\uc77c\ud558\uac8c \uc791\ub3d9\ud569\ub2c8\ub2e4. \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ud544\uc694\ud55c \ubaa8\ub4e0 \uc885\ub958\uc758 \ubaa8\ub378, \ubaa8\ub4e0 \uc885\ub958\uc758 \ud074\ub798\uc2a4, \ubaa8\ub4e0 \uc885\ub958\uc758 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. FastAPI \ub294 \uc758\uc874\uc131 \uc8fc\uc785 \uc2dc\uc2a4\ud15c\uc744 \ub2e4\ub8e8\uc5c8\uc2b5\ub2c8\ub2e4. \ucf54\ub4dc \uc0ac\uc774\uc988 \u00b6 \uc774 \uc608\ub294 \uc7a5\ud669\ud574 \ubcf4\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub3d9\uc77c\ud55c \ud30c\uc77c\uc5d0\uc11c \ubcf4\uc548, \ub370\uc774\ud130 \ubaa8\ub378, \uc720\ud2f8\ub9ac\ud2f0 \uae30\ub2a5 \ubc0f \uacbd\ub85c \uc791\ub3d9 \uc744 \ud63c\ud569\ud558\uace0 \uc788\uc74c\uc744 \uc5fc\ub450\uc5d0 \ub450\uc2ed\uc2dc\uc624. \uadf8\ub7ec\ub098 \uc774\uac8c \ud0a4\ud3ec\uc778\ud2b8\uc785\ub2c8\ub2e4. \ubcf4\uc548\uacfc \uc885\uc18d\uc131 \uc8fc\uc785 \ud56d\ubaa9\uc744 \ud55c \ubc88\ub9cc \uc791\uc131\ud558\uba74 \ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc6d0\ud558\ub294 \ub9cc\ud07c \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\ub3c4 \uc720\uc5f0\uc131\uacfc \ud568\uaed8 \ud55c \uacf3\uc5d0 \ud55c \ubc88\uc5d0 \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub3d9\uc77c\ud55c \ubcf4\uc548 \uc2dc\uc2a4\ud15c\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc218\ucc9c \uac1c\uc758 \uc5d4\ub4dc\ud3ec\uc778\ud2b8( \uacbd\ub85c \uc791\ub3d9 )\ub97c \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uadf8\ub4e4 \ubaa8\ub450(\ub610\ub294 \uc6d0\ud558\ub294 \ubd80\ubd84)\ub294 \uc774\ub7ec\ud55c \uc758\uc874\uc131 \ub610\ub294 \uc0dd\uc131\ud55c \ub2e4\ub978 \uc758\uc874\uc131\uc744 \uc7ac\uc0ac\uc6a9\ud558\ub294 \uc774\uc810\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774 \uc218\ucc9c \uac1c\uc758 \uacbd\ub85c \uc791\ub3d9 \uc740 \ubaa8\ub450 3\uc904 \uc815\ub3c4\ub85c \uc904\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \uc694\uc57d \u00b6 \uc774\uc81c \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc5d0\uc11c \ud604\uc7ac \uc0ac\uc6a9\uc790\ub97c \uc9c1\uc811 \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc774\ubbf8 \uc774\ub4e4 \uc0ac\uc774\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc6a9\uc790/\ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc2e4\uc81c\ub85c username \uacfc password \ub97c \ubcf4\ub0b4\ub824\uba74 \uacbd\ub85c \uc791\ub3d9 \uc744 \ucd94\uac00\ud558\uae30\ub9cc \ud558\uba74 \ub429\ub2c8\ub2e4. \ub2e4\uc74c \uc7a5\uc744 \ud655\uc778\ud574 \ubd05\uc2dc\ub2e4.","title":"\ud604\uc7ac \uc0ac\uc6a9\uc790 \uac00\uc838\uc624\uae30"},{"location":"tutorial/security/get-current-user/#_1","text":"\uc774\uc804 \uc7a5\uc5d0\uc11c (\uc758\uc874\uc131 \uc8fc\uc785 \uc2dc\uc2a4\ud15c\uc744 \uae30\ubc18\uc73c\ub85c \ud55c)\ubcf4\uc548 \uc2dc\uc2a4\ud15c\uc740 \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc5d0\uc11c str \ub85c token \uc744 \uc81c\uacf5\ud588\uc2b5\ub2c8\ub2e4: from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } \uadf8\ub7ec\ub098 \uc544\uc9c1\ub3c4 \uc720\uc6a9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud604\uc7ac \uc0ac\uc6a9\uc790\ub97c \uc81c\uacf5\ud558\ub3c4\ub85d \ud569\uc2dc\ub2e4.","title":"\ud604\uc7ac \uc0ac\uc6a9\uc790 \uac00\uc838\uc624\uae30"},{"location":"tutorial/security/get-current-user/#_2","text":"\uba3c\uc800 Pydantic \uc720\uc800 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Pydantic\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubcf8\ubb38\uc744 \uc120\uc5b8\ud558\ub294 \uac83\uacfc \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ub2e4\ub978 \uacf3\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user","title":"\uc720\uc800 \ubaa8\ub378 \uc0dd\uc131\ud558\uae30"},{"location":"tutorial/security/get-current-user/#get_current_user","text":"\uc758\uc874\uc131 get_current_user \ub97c \ub9cc\ub4e4\uc5b4 \ubd05\uc2dc\ub2e4. \uc758\uc874\uc131\uc774 \ud558\uc704 \uc758\uc874\uc131\uc744 \uac00\uc9c8 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc2ed\ub2c8\uae4c? get_current_user \ub294 \uc774\uc804\uc5d0 \uc0dd\uc131\ud55c \uac83\uacfc \ub3d9\uc77c\ud55c oauth2_scheme \uacfc \uc885\uc18d\uc131\uc744 \uac16\uac8c \ub429\ub2c8\ub2e4. \uc774\uc804\uc5d0 \uacbd\ub85c \ub3d9\uc791 \uc5d0\uc11c \uc9c1\uc811 \uc218\ud589\ud588\ub358 \uac83\uacfc \ub3d9\uc77c\ud558\uac8c \uc0c8 \uc885\uc18d\uc131 get_current_user \ub294 \ud558\uc704 \uc885\uc18d\uc131 oauth2_scheme \uc5d0\uc11c str \ub85c token \uc744 \uc218\uc2e0\ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user","title":"get_current_user \uc758\uc874\uc131 \uc0dd\uc131\ud558\uae30"},{"location":"tutorial/security/get-current-user/#_3","text":"get_current_user \ub294 \ud1a0\ud070\uc744 str \ub85c \ucde8\ud558\uace0 Pydantic User \ubaa8\ub378\uc744 \ubc18\ud658\ud558\ub294 \uc6b0\ub9ac\uac00 \ub9cc\ub4e0 (\uac00\uc9dc) \uc720\ud2f8\ub9ac\ud2f0 \ud568\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user","title":"\uc720\uc800 \uac00\uc838\uc624\uae30"},{"location":"tutorial/security/get-current-user/#_4","text":"\uc774\uc81c \uacbd\ub85c \uc791\ub3d9 \uc5d0\uc11c get_current_user \uc640 \ub3d9\uc77c\ud55c Depends \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user Pydantic \ubaa8\ub378\uc778 User \ub85c current_user \uc758 \ud0c0\uc785\uc744 \uc120\uc5b8\ud558\ub294 \uac83\uc744 \uc54c\uc544\uc57c \ud569\ub2c8\ub2e4. \uc774\uac83\uc740 \ubaa8\ub4e0 \uc644\ub8cc \ubc0f \ud0c0\uc785 \uac80\uc0ac\ub97c \ud1b5\ud574 \ud568\uc218 \ub0b4\ubd80\uc5d0\uc11c \uc6b0\ub9ac\ub97c \ub3c4\uc6b8 \uac83\uc785\ub2c8\ub2e4. \ud301 \uc694\uccad \ubcf8\ubb38\ub3c4 Pydantic \ubaa8\ub378\ub85c \uc120\uc5b8\ub41c\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud560 \uac83\uc785\ub2c8\ub2e4. \uc5ec\uae30\uc11c FastAPI \ub294 Depends \ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0 \ud63c\ub3d9\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud655\uc778 \uc774 \uc758\uc874\uc131 \uc2dc\uc2a4\ud15c\uc774 \uc124\uacc4\ub41c \ubc29\uc2dd\uc740 \ubaa8\ub450 User \ubaa8\ub378\uc744 \ubc18\ud658\ud558\ub294 \ub2e4\uc591\ud55c \uc758\uc874\uc131(\ub2e4\ub978 \"\uc758\uc874\uc801\uc778\")\uc744 \uac00\uc9c8 \uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4. \ud574\ub2f9 \ud0c0\uc785\uc758 \ub370\uc774\ud130\ub97c \ubc18\ud658\ud560 \uc218 \uc788\ub294 \uc758\uc874\uc131\uc774 \ud558\ub098\ub9cc \uc788\ub294 \uac83\uc73c\ub85c \uc81c\ud55c\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"\ud604\uc7ac \uc720\uc800 \uc8fc\uc785\ud558\uae30"},{"location":"tutorial/security/get-current-user/#_5","text":"\uc774\uc81c \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc5d0\uc11c \ud604\uc7ac \uc0ac\uc6a9\uc790\ub97c \uc9c1\uc811 \uac00\uc838\uc62c \uc218 \uc788\uc73c\uba70 Depends \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc758\uc874\uc131 \uc8fc\uc785 \uc218\uc900\uc5d0\uc11c \ubcf4\uc548 \uba54\ucee4\ub2c8\uc998\uc744 \ucc98\ub9ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ubcf4\uc548 \uc694\uad6c \uc0ac\ud56d\uc5d0 \ub300\ud55c \ubaa8\ub4e0 \ubaa8\ub378 \ub610\ub294 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4(\uc774 \uacbd\uc6b0 Pydantic \ubaa8\ub378 User ). \uadf8\ub7ec\ub098 \uc77c\ubd80 \ud2b9\uc815 \ub370\uc774\ud130 \ubaa8\ub378, \ud074\ub798\uc2a4 \ub610\ub294 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\ud55c\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ubaa8\ub378\uc5d0 id \uc640 email \uc774 \uc788\uace0 username \uc774 \uc5c6\uae38 \uc6d0\ud558\uc2ed\ub2c8\uae4c? \ub9de\uc2b5\ub2c8\ub2e4. \uc774\ub4e4\uc740 \ub3d9\uc77c\ud55c \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. str \ub9cc \uac16\uace0 \uc2f6\uc2b5\ub2c8\uae4c? \uc544\ub2c8\uba74 \uadf8\ub0e5 dict \ub97c \uac16\uace0 \uc2f6\uc2b5\ub2c8\uae4c? \uc544\ub2c8\uba74 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ud074\ub798\uc2a4 \ubaa8\ub378 \uc778\uc2a4\ud134\uc2a4\ub97c \uc9c1\uc811 \uac16\uace0 \uc2f6\uc2b5\ub2c8\uae4c? \uadf8\ub4e4\uc740 \ubaa8\ub450 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \uc791\ub3d9\ud569\ub2c8\ub2e4. \uc2e4\uc81c\ub85c \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ub85c\uadf8\uc778\ud558\ub294 \uc0ac\uc6a9\uc790\uac00 \uc5c6\uc9c0\ub9cc \uc561\uc138\uc2a4 \ud1a0\ud070\ub9cc \uc788\ub294 \ub85c\ubd07, \ubd07 \ub610\ub294 \uae30\ud0c0 \uc2dc\uc2a4\ud15c\uc774 \uc788\uc2b5\ub2c8\uae4c? \ub2e4\uc2dc \ub9d0\ud558\uc9c0\ub9cc \ubaa8\ub450 \ub3d9\uc77c\ud558\uac8c \uc791\ub3d9\ud569\ub2c8\ub2e4. \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ud544\uc694\ud55c \ubaa8\ub4e0 \uc885\ub958\uc758 \ubaa8\ub378, \ubaa8\ub4e0 \uc885\ub958\uc758 \ud074\ub798\uc2a4, \ubaa8\ub4e0 \uc885\ub958\uc758 \ub370\uc774\ud130\ubca0\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. FastAPI \ub294 \uc758\uc874\uc131 \uc8fc\uc785 \uc2dc\uc2a4\ud15c\uc744 \ub2e4\ub8e8\uc5c8\uc2b5\ub2c8\ub2e4.","title":"\ub2e4\ub978 \ubaa8\ub378"},{"location":"tutorial/security/get-current-user/#_6","text":"\uc774 \uc608\ub294 \uc7a5\ud669\ud574 \ubcf4\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub3d9\uc77c\ud55c \ud30c\uc77c\uc5d0\uc11c \ubcf4\uc548, \ub370\uc774\ud130 \ubaa8\ub378, \uc720\ud2f8\ub9ac\ud2f0 \uae30\ub2a5 \ubc0f \uacbd\ub85c \uc791\ub3d9 \uc744 \ud63c\ud569\ud558\uace0 \uc788\uc74c\uc744 \uc5fc\ub450\uc5d0 \ub450\uc2ed\uc2dc\uc624. \uadf8\ub7ec\ub098 \uc774\uac8c \ud0a4\ud3ec\uc778\ud2b8\uc785\ub2c8\ub2e4. \ubcf4\uc548\uacfc \uc885\uc18d\uc131 \uc8fc\uc785 \ud56d\ubaa9\uc744 \ud55c \ubc88\ub9cc \uc791\uc131\ud558\uba74 \ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc6d0\ud558\ub294 \ub9cc\ud07c \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\ub3c4 \uc720\uc5f0\uc131\uacfc \ud568\uaed8 \ud55c \uacf3\uc5d0 \ud55c \ubc88\uc5d0 \uc791\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub3d9\uc77c\ud55c \ubcf4\uc548 \uc2dc\uc2a4\ud15c\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc218\ucc9c \uac1c\uc758 \uc5d4\ub4dc\ud3ec\uc778\ud2b8( \uacbd\ub85c \uc791\ub3d9 )\ub97c \uac00\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uadf8\ub4e4 \ubaa8\ub450(\ub610\ub294 \uc6d0\ud558\ub294 \ubd80\ubd84)\ub294 \uc774\ub7ec\ud55c \uc758\uc874\uc131 \ub610\ub294 \uc0dd\uc131\ud55c \ub2e4\ub978 \uc758\uc874\uc131\uc744 \uc7ac\uc0ac\uc6a9\ud558\ub294 \uc774\uc810\uc744 \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774 \uc218\ucc9c \uac1c\uc758 \uacbd\ub85c \uc791\ub3d9 \uc740 \ubaa8\ub450 3\uc904 \uc815\ub3c4\ub85c \uc904\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user","title":"\ucf54\ub4dc \uc0ac\uc774\uc988"},{"location":"tutorial/security/get-current-user/#_7","text":"\uc774\uc81c \uacbd\ub85c \uc791\ub3d9 \ud568\uc218 \uc5d0\uc11c \ud604\uc7ac \uc0ac\uc6a9\uc790\ub97c \uc9c1\uc811 \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc774\ubbf8 \uc774\ub4e4 \uc0ac\uc774\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc6a9\uc790/\ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \uc2e4\uc81c\ub85c username \uacfc password \ub97c \ubcf4\ub0b4\ub824\uba74 \uacbd\ub85c \uc791\ub3d9 \uc744 \ucd94\uac00\ud558\uae30\ub9cc \ud558\uba74 \ub429\ub2c8\ub2e4. \ub2e4\uc74c \uc7a5\uc744 \ud655\uc778\ud574 \ubd05\uc2dc\ub2e4.","title":"\uc694\uc57d"},{"location":"tutorial/security/oauth2-jwt/","text":"OAuth2 with Password (and hashing), Bearer with JWT tokens \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Now that we have all the security flow, let's make the application actually secure, using JWT tokens and secure password hashing. This code is something you can actually use in your application, save the password hashes in your database, etc. We are going to start from where we left in the previous chapter and increment it. About JWT \u00b6 JWT means \"JSON Web Tokens\". It's a standard to codify a JSON object in a long dense string without spaces. It looks like this: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c It is not encrypted, so, anyone could recover the information from the contents. But it's signed. So, when you receive a token that you emitted, you can verify that you actually emitted it. That way, you can create a token with an expiration of, let's say, 1 week. And then when the user comes back the next day with the token, you know that user is still logged in to your system. After a week, the token will be expired and the user will not be authorized and will have to sign in again to get a new token. And if the user (or a third party) tried to modify the token to change the expiration, you would be able to discover it, because the signatures would not match. If you want to play with JWT tokens and see how they work, check https://jwt.io . Install python-jose \u00b6 We need to install python-jose to generate and verify the JWT tokens in Python: $ pip install \"python-jose[cryptography]\" ---> 100% Python-jose requires a cryptographic backend as an extra. Here we are using the recommended one: pyca/cryptography . Tip This tutorial previously used PyJWT . But it was updated to use Python-jose instead as it provides all the features from PyJWT plus some extras that you might need later when building integrations with other tools. Password hashing \u00b6 \"Hashing\" means converting some content (a password in this case) into a sequence of bytes (just a string) that looks like gibberish. Whenever you pass exactly the same content (exactly the same password) you get exactly the same gibberish. But you cannot convert from the gibberish back to the password. Why use password hashing \u00b6 If your database is stolen, the thief won't have your users' plaintext passwords, only the hashes. So, the thief won't be able to try to use that password in another system (as many users use the same password everywhere, this would be dangerous). Install passlib \u00b6 PassLib is a great Python package to handle password hashes. It supports many secure hashing algorithms and utilities to work with them. The recommended algorithm is \"Bcrypt\". So, install PassLib with Bcrypt: $ pip install \"passlib[bcrypt]\" ---> 100% Tip With passlib , you could even configure it to be able to read passwords created by Django , a Flask security plug-in or many others. So, you would be able to, for example, share the same data from a Django application in a database with a FastAPI application. Or gradually migrate a Django application using the same database. And your users would be able to login from your Django app or from your FastAPI app, at the same time. Hash and verify the passwords \u00b6 Import the tools we need from passlib . Create a PassLib \"context\". This is what will be used to hash and verify passwords. Tip The PassLib context also has functionality to use different hashing algorithms, including deprecated old ones only to allow verifying them, etc. For example, you could use it to read and verify passwords generated by another system (like Django) but hash any new passwords with a different algorithm like Bcrypt. And be compatible with all of them at the same time. Create a utility function to hash a password coming from the user. And another utility to verify if a received password matches the hash stored. And another one to authenticate and return a user. Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] Note If you check the new (fake) database fake_users_db , you will see how the hashed password looks like now: \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" . Handle JWT tokens \u00b6 Import the modules installed. Create a random secret key that will be used to sign the JWT tokens. To generate a secure random secret key use the command: $ openssl rand -hex 32 09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7 And copy the output to the variable SECRET_KEY (don't use the one in the example). Create a variable ALGORITHM with the algorithm used to sign the JWT token and set it to \"HS256\" . Create a variable for the expiration of the token. Define a Pydantic Model that will be used in the token endpoint for the response. Create a utility function to generate a new access token. Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] Update the dependencies \u00b6 Update get_current_user to receive the same token as before, but this time, using JWT tokens. Decode the received token, verify it, and return the current user. If the token is invalid, return an HTTP error right away. Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] Update the /token path operation \u00b6 Create a timedelta with the expiration time of the token. Create a real JWT access token and return it. Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] Technical details about the JWT \"subject\" sub \u00b6 The JWT specification says that there's a key sub , with the subject of the token. It's optional to use it, but that's where you would put the user's identification, so we are using it here. JWT might be used for other things apart from identifying a user and allowing them to perform operations directly on your API. For example, you could identify a \"car\" or a \"blog post\". Then you could add permissions about that entity, like \"drive\" (for the car) or \"edit\" (for the blog). And then, you could give that JWT token to a user (or bot), and they could use it to perform those actions (drive the car, or edit the blog post) without even needing to have an account, just with the JWT token your API generated for that. Using these ideas, JWT can be used for way more sophisticated scenarios. In those cases, several of those entities could have the same ID, let's say foo (a user foo , a car foo , and a blog post foo ). So, to avoid ID collisions, when creating the JWT token for the user, you could prefix the value of the sub key, e.g. with username: . So, in this example, the value of sub could have been: username:johndoe . The important thing to have in mind is that the sub key should have a unique identifier across the entire application, and it should be a string. Check it \u00b6 Run the server and go to the docs: http://127.0.0.1:8000/docs . You'll see the user interface like: Authorize the application the same way as before. Using the credentials: Username: johndoe Password: secret Check Notice that nowhere in the code is the plaintext password \" secret \", we only have the hashed version. Call the endpoint /users/me/ , you will get the response as: { \"username\" : \"johndoe\" , \"email\" : \"johndoe@example.com\" , \"full_name\" : \"John Doe\" , \"disabled\" : false } If you open the developer tools, you could see how the data sent and only includes the token, the password is only sent in the first request to authenticate the user and get that access token, but not afterwards: Note Notice the header Authorization , with a value that starts with Bearer . Advanced usage with scopes \u00b6 OAuth2 has the notion of \"scopes\". You can use them to add a specific set of permissions to a JWT token. Then you can give this token to a user directly or a third party, to interact with your API with a set of restrictions. You can learn how to use them and how they are integrated into FastAPI later in the Advanced User Guide . Recap \u00b6 With what you have seen up to now, you can set up a secure FastAPI application using standards like OAuth2 and JWT. In almost any framework handling the security becomes a rather complex subject quite quickly. Many packages that simplify it a lot have to make many compromises with the data model, database, and available features. And some of these packages that simplify things too much actually have security flaws underneath. FastAPI doesn't make any compromise with any database, data model or tool. It gives you all the flexibility to choose the ones that fit your project the best. And you can use directly many well maintained and widely used packages like passlib and python-jose , because FastAPI doesn't require any complex mechanisms to integrate external packages. But it provides you the tools to simplify the process as much as possible without compromising flexibility, robustness, or security. And you can use and implement secure, standard protocols, like OAuth2 in a relatively simple way. You can learn more in the Advanced User Guide about how to use OAuth2 \"scopes\", for a more fine-grained permission system, following these same standards. OAuth2 with scopes is the mechanism used by many big authentication providers, like Facebook, Google, GitHub, Microsoft, Twitter, etc. to authorize third party applications to interact with their APIs on behalf of their users.","title":"OAuth2 with Password (and hashing), Bearer with JWT tokens"},{"location":"tutorial/security/oauth2-jwt/#oauth2-with-password-and-hashing-bearer-with-jwt-tokens","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Now that we have all the security flow, let's make the application actually secure, using JWT tokens and secure password hashing. This code is something you can actually use in your application, save the password hashes in your database, etc. We are going to start from where we left in the previous chapter and increment it.","title":"OAuth2 with Password (and hashing), Bearer with JWT tokens"},{"location":"tutorial/security/oauth2-jwt/#about-jwt","text":"JWT means \"JSON Web Tokens\". It's a standard to codify a JSON object in a long dense string without spaces. It looks like this: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c It is not encrypted, so, anyone could recover the information from the contents. But it's signed. So, when you receive a token that you emitted, you can verify that you actually emitted it. That way, you can create a token with an expiration of, let's say, 1 week. And then when the user comes back the next day with the token, you know that user is still logged in to your system. After a week, the token will be expired and the user will not be authorized and will have to sign in again to get a new token. And if the user (or a third party) tried to modify the token to change the expiration, you would be able to discover it, because the signatures would not match. If you want to play with JWT tokens and see how they work, check https://jwt.io .","title":"About JWT"},{"location":"tutorial/security/oauth2-jwt/#install-python-jose","text":"We need to install python-jose to generate and verify the JWT tokens in Python: $ pip install \"python-jose[cryptography]\" ---> 100% Python-jose requires a cryptographic backend as an extra. Here we are using the recommended one: pyca/cryptography . Tip This tutorial previously used PyJWT . But it was updated to use Python-jose instead as it provides all the features from PyJWT plus some extras that you might need later when building integrations with other tools.","title":"Install python-jose"},{"location":"tutorial/security/oauth2-jwt/#password-hashing","text":"\"Hashing\" means converting some content (a password in this case) into a sequence of bytes (just a string) that looks like gibberish. Whenever you pass exactly the same content (exactly the same password) you get exactly the same gibberish. But you cannot convert from the gibberish back to the password.","title":"Password hashing"},{"location":"tutorial/security/oauth2-jwt/#why-use-password-hashing","text":"If your database is stolen, the thief won't have your users' plaintext passwords, only the hashes. So, the thief won't be able to try to use that password in another system (as many users use the same password everywhere, this would be dangerous).","title":"Why use password hashing"},{"location":"tutorial/security/oauth2-jwt/#install-passlib","text":"PassLib is a great Python package to handle password hashes. It supports many secure hashing algorithms and utilities to work with them. The recommended algorithm is \"Bcrypt\". So, install PassLib with Bcrypt: $ pip install \"passlib[bcrypt]\" ---> 100% Tip With passlib , you could even configure it to be able to read passwords created by Django , a Flask security plug-in or many others. So, you would be able to, for example, share the same data from a Django application in a database with a FastAPI application. Or gradually migrate a Django application using the same database. And your users would be able to login from your Django app or from your FastAPI app, at the same time.","title":"Install passlib"},{"location":"tutorial/security/oauth2-jwt/#hash-and-verify-the-passwords","text":"Import the tools we need from passlib . Create a PassLib \"context\". This is what will be used to hash and verify passwords. Tip The PassLib context also has functionality to use different hashing algorithms, including deprecated old ones only to allow verifying them, etc. For example, you could use it to read and verify passwords generated by another system (like Django) but hash any new passwords with a different algorithm like Bcrypt. And be compatible with all of them at the same time. Create a utility function to hash a password coming from the user. And another utility to verify if a received password matches the hash stored. And another one to authenticate and return a user. Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] Note If you check the new (fake) database fake_users_db , you will see how the hashed password looks like now: \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" .","title":"Hash and verify the passwords"},{"location":"tutorial/security/oauth2-jwt/#handle-jwt-tokens","text":"Import the modules installed. Create a random secret key that will be used to sign the JWT tokens. To generate a secure random secret key use the command: $ openssl rand -hex 32 09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7 And copy the output to the variable SECRET_KEY (don't use the one in the example). Create a variable ALGORITHM with the algorithm used to sign the JWT token and set it to \"HS256\" . Create a variable for the expiration of the token. Define a Pydantic Model that will be used in the token endpoint for the response. Create a utility function to generate a new access token. Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }]","title":"Handle JWT tokens"},{"location":"tutorial/security/oauth2-jwt/#update-the-dependencies","text":"Update get_current_user to receive the same token as before, but this time, using JWT tokens. Decode the received token, verify it, and return the current user. If the token is invalid, return an HTTP error right away. Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }]","title":"Update the dependencies"},{"location":"tutorial/security/oauth2-jwt/#update-the-token-path-operation","text":"Create a timedelta with the expiration time of the token. Create a real JWT access token and return it. Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }]","title":"Update the /token path operation"},{"location":"tutorial/security/oauth2-jwt/#technical-details-about-the-jwt-subject-sub","text":"The JWT specification says that there's a key sub , with the subject of the token. It's optional to use it, but that's where you would put the user's identification, so we are using it here. JWT might be used for other things apart from identifying a user and allowing them to perform operations directly on your API. For example, you could identify a \"car\" or a \"blog post\". Then you could add permissions about that entity, like \"drive\" (for the car) or \"edit\" (for the blog). And then, you could give that JWT token to a user (or bot), and they could use it to perform those actions (drive the car, or edit the blog post) without even needing to have an account, just with the JWT token your API generated for that. Using these ideas, JWT can be used for way more sophisticated scenarios. In those cases, several of those entities could have the same ID, let's say foo (a user foo , a car foo , and a blog post foo ). So, to avoid ID collisions, when creating the JWT token for the user, you could prefix the value of the sub key, e.g. with username: . So, in this example, the value of sub could have been: username:johndoe . The important thing to have in mind is that the sub key should have a unique identifier across the entire application, and it should be a string.","title":"Technical details about the JWT \"subject\" sub"},{"location":"tutorial/security/oauth2-jwt/#check-it","text":"Run the server and go to the docs: http://127.0.0.1:8000/docs . You'll see the user interface like: Authorize the application the same way as before. Using the credentials: Username: johndoe Password: secret Check Notice that nowhere in the code is the plaintext password \" secret \", we only have the hashed version. Call the endpoint /users/me/ , you will get the response as: { \"username\" : \"johndoe\" , \"email\" : \"johndoe@example.com\" , \"full_name\" : \"John Doe\" , \"disabled\" : false } If you open the developer tools, you could see how the data sent and only includes the token, the password is only sent in the first request to authenticate the user and get that access token, but not afterwards: Note Notice the header Authorization , with a value that starts with Bearer .","title":"Check it"},{"location":"tutorial/security/oauth2-jwt/#advanced-usage-with-scopes","text":"OAuth2 has the notion of \"scopes\". You can use them to add a specific set of permissions to a JWT token. Then you can give this token to a user directly or a third party, to interact with your API with a set of restrictions. You can learn how to use them and how they are integrated into FastAPI later in the Advanced User Guide .","title":"Advanced usage with scopes"},{"location":"tutorial/security/oauth2-jwt/#recap","text":"With what you have seen up to now, you can set up a secure FastAPI application using standards like OAuth2 and JWT. In almost any framework handling the security becomes a rather complex subject quite quickly. Many packages that simplify it a lot have to make many compromises with the data model, database, and available features. And some of these packages that simplify things too much actually have security flaws underneath. FastAPI doesn't make any compromise with any database, data model or tool. It gives you all the flexibility to choose the ones that fit your project the best. And you can use directly many well maintained and widely used packages like passlib and python-jose , because FastAPI doesn't require any complex mechanisms to integrate external packages. But it provides you the tools to simplify the process as much as possible without compromising flexibility, robustness, or security. And you can use and implement secure, standard protocols, like OAuth2 in a relatively simple way. You can learn more in the Advanced User Guide about how to use OAuth2 \"scopes\", for a more fine-grained permission system, following these same standards. OAuth2 with scopes is the mechanism used by many big authentication providers, like Facebook, Google, GitHub, Microsoft, Twitter, etc. to authorize third party applications to interact with their APIs on behalf of their users.","title":"Recap"},{"location":"tutorial/security/simple-oauth2/","text":"\ud328\uc2a4\uc6cc\ub4dc\uc640 Bearer\ub97c \uc774\uc6a9\ud55c \uac04\ub2e8\ud55c OAuth2 \u00b6 \uc774\uc81c \uc774\uc804 \uc7a5\uc5d0\uc11c \ube4c\ub4dc\ud558\uace0 \ub204\ub77d\ub41c \ubd80\ubd84\uc744 \ucd94\uac00\ud558\uc5ec \uc644\uc804\ud55c \ubcf4\uc548 \ud750\ub984\uc744 \uac16\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. username \uc640 password \uc5bb\uae30 \u00b6 FastAPI \ubcf4\uc548 \uc720\ud2f8\ub9ac\ud2f0\ub97c \uc0ac\uc6a9\ud558\uc5ec username \ubc0f password \ub97c \uac00\uc838\uc62c \uac83\uc785\ub2c8\ub2e4. OAuth2\ub294 (\uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud558\uace0 \uc788\ub294) \"\ud328\uc2a4\uc6cc\ub4dc \ud50c\ub85c\uc6b0\"\uc744 \uc0ac\uc6a9\ud560 \ub54c \ud074\ub77c\uc774\uc5b8\ud2b8/\uc720\uc800\uac00 username \ubc0f password \ud544\ub4dc\ub97c \ud3fc \ub370\uc774\ud130\ub85c \ubcf4\ub0b4\uc57c \ud568\uc744 \uc9c0\uc815\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc0ac\uc591\uc5d0\ub294 \ud544\ub4dc\uc758 \uc774\ub984\uc744 \uadf8\ub807\uac8c \uc9c0\uc815\ud574\uc57c \ud55c\ub2e4\uace0 \ub098\uc640 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c user-name \ub610\ub294 email \uc740 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uac71\uc815\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4. \ud504\ub7f0\ud2b8\uc5d4\ub4dc\uc5d0\uc11c \ucd5c\uc885 \uc0ac\uc6a9\uc790\uc5d0\uac8c \uc6d0\ud558\ub294 \ub300\ub85c \ud45c\uc2dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378\uc740 \uc6d0\ud558\ub294 \ub2e4\ub978 \uc774\ub984\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub85c\uadf8\uc778 \uacbd\ub85c \uc791\ub3d9 \uc758 \uacbd\uc6b0 \uc0ac\uc591\uacfc \ud638\ud658\ub418\ub3c4\ub85d \uc774\ub7ec\ud55c \uc774\ub984\uc744 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4(\uc608\ub97c \ub4e4\uc5b4 \ud1b5\ud569 API \ubb38\uc11c \uc2dc\uc2a4\ud15c\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4). \uc0ac\uc591\uc5d0\ub294 \ub610\ud55c username \uacfc password \uac00 \ud3fc \ub370\uc774\ud130\ub85c \uc804\uc1a1\ub418\uc5b4\uc57c \ud55c\ub2e4\uace0 \uba85\uc2dc\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4(\ub530\ub77c\uc11c \uc5ec\uae30\uc5d0\ub294 JSON\uc774 \uc5c6\uc2b5\ub2c8\ub2e4). scope \u00b6 \uc0ac\uc591\uc5d0\ub294 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \ub2e4\ub978 \ud3fc \ud544\ub4dc \" scope \"\ub97c \ubcf4\ub0bc \uc218 \uc788\ub2e4\uace0 \ub098\uc640 \uc788\uc2b5\ub2c8\ub2e4. \ud3fc \ud544\ub4dc \uc774\ub984\uc740 scope (\ub2e8\uc218\ud615)\uc774\uc9c0\ub9cc \uc2e4\uc81c\ub85c\ub294 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \"\ubc94\uc704\"\uac00 \uc788\ub294 \uae34 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4. \uac01 \"\ubc94\uc704\"\ub294 \uacf5\ubc31\uc774 \uc5c6\ub294 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \ud2b9\uc815 \ubcf4\uc548 \uad8c\ud55c\uc744 \uc120\uc5b8\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub2e4\uc74c\uc744 \ubd05\uc2dc\ub2e4: users:read \ub610\ub294 users:write \ub294 \uc77c\ubc18\uc801\uc778 \uc608\uc2dc\uc785\ub2c8\ub2e4. instagram_basic \uc740 \ud398\uc774\uc2a4\ubd81/\uc778\uc2a4\ud0c0\uadf8\ub7a8\uc5d0\uc11c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. https://www.googleapis.com/auth/drive \ub294 Google\uc5d0\uc11c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc815\ubcf4 OAuth2\uc5d0\uc11c \"\ubc94\uc704\"\ub294 \ud544\uc694\ud55c \ud2b9\uc815 \uad8c\ud55c\uc744 \uc120\uc5b8\ud558\ub294 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4. : \uacfc \uac19\uc740 \ub2e4\ub978 \ubb38\uc790\uac00 \uc788\ub294\uc9c0 \ub610\ub294 URL\uc778\uc9c0\ub294 \uc911\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc138\ubd80 \uc0ac\ud56d\uc740 \uad6c\ud604\uc5d0 \ub530\ub77c \ub2e4\ub985\ub2c8\ub2e4. OAuth2\uc758 \uacbd\uc6b0 \ubb38\uc790\uc5f4\uc77c \ubfd0\uc785\ub2c8\ub2e4. username \uacfc password \ub97c \uac00\uc838\uc624\ub294 \ucf54\ub4dc \u00b6 \uc774\uc81c FastAPI \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc720\ud2f8\ub9ac\ud2f0\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc774\ub97c \ucc98\ub9ac\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. OAuth2PasswordRequestForm \u00b6 \uba3c\uc800 OAuth2PasswordRequestForm \uc744 \uac00\uc838\uc640 /token \uc5d0 \ub300\ud55c \uacbd\ub85c \uc791\ub3d9 \uc5d0\uc11c Depends \uc758 \uc758\uc874\uc131\uc73c\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user OAuth2PasswordRequestForm \uc740 \ub2e4\uc74c\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud3fc \ubcf8\ubb38\uc744 \uc120\uc5b8\ud558\ub294 \ud074\ub798\uc2a4 \uc758\uc874\uc131\uc785\ub2c8\ub2e4: username . password . scope \ub294 \uc120\ud0dd\uc801\uc778 \ud544\ub4dc\ub85c \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \ubb38\uc790\uc5f4\ub85c \uad6c\uc131\ub41c \ud070 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4. grant_type (\uc120\ud0dd\uc801\uc73c\ub85c \uc0ac\uc6a9). \ud301 OAuth2 \uc0ac\uc591\uc740 \uc2e4\uc81c\ub85c password \ub77c\ub294 \uace0\uc815 \uac12\uc774 \uc788\ub294 grant_type \ud544\ub4dc\ub97c \uc694\uad6c \ud558\uc9c0\ub9cc OAuth2PasswordRequestForm \uc740 \uc774\ub97c \uac15\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\uba74 OAuth2PasswordRequestForm \ub300\uc2e0 OAuth2PasswordRequestFormStrict \ub97c \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4. client_id (\uc120\ud0dd\uc801\uc73c\ub85c \uc0ac\uc6a9) (\uc608\uc81c\uc5d0\uc11c\ub294 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4). client_secret (\uc120\ud0dd\uc801\uc73c\ub85c \uc0ac\uc6a9) (\uc608\uc81c\uc5d0\uc11c\ub294 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4). \uc815\ubcf4 OAuth2PasswordRequestForm \uc740 OAuth2PasswordBearer \uc640 \uac19\uc774 FastAPI \uc5d0 \ub300\ud55c \ud2b9\uc218 \ud074\ub798\uc2a4\uac00 \uc544\ub2d9\ub2c8\ub2e4. OAuth2PasswordBearer \ub294 FastAPI \uac00 \ubcf4\uc548 \uccb4\uacc4\uc784\uc744 \uc54c\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c OpenAPI\uc5d0 \uadf8\ub807\uac8c \ucd94\uac00\ub429\ub2c8\ub2e4. \uadf8\ub7ec\ub098 OAuth2PasswordRequestForm \uc740 \uc9c1\uc811 \uc791\uc131\ud558\uac70\ub098 Form \ub9e4\uac1c\ubcc0\uc218\ub97c \uc9c1\uc811 \uc120\uc5b8\ud560 \uc218 \uc788\ub294 \ud074\ub798\uc2a4 \uc758\uc874\uc131\uc77c \ubfd0\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc77c\ubc18\uc801\uc778 \uc0ac\uc6a9 \uc0ac\ub840\uc774\ubbc0\ub85c \ub354 \uc27d\uac8c \ud558\uae30 \uc704\ud574 FastAPI \uc5d0\uc11c \uc9c1\uc811 \uc81c\uacf5\ud569\ub2c8\ub2e4. \ud3fc \ub370\uc774\ud130 \uc0ac\uc6a9\ud558\uae30 \u00b6 \ud301 \uc885\uc18d\uc131 \ud074\ub798\uc2a4 OAuth2PasswordRequestForm \uc758 \uc778\uc2a4\ud134\uc2a4\uc5d0\ub294 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \uae34 \ubb38\uc790\uc5f4\uc774 \uc788\ub294 scope \uc18d\uc131\uc774 \uc5c6\uace0 \ub300\uc2e0 \uc804\uc1a1\ub41c \uac01 \ubc94\uc704\uc5d0 \ub300\ud55c \uc2e4\uc81c \ubb38\uc790\uc5f4 \ubaa9\ub85d\uc774 \uc788\ub294 scopes \uc18d\uc131\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc608\uc81c\uc5d0\uc11c\ub294 scopes \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc9c0\ub9cc \ud544\uc694\ud55c \uacbd\uc6b0, \uae30\ub2a5\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \ud3fc \ud544\ub4dc\uc758 username \uc744 \uc0ac\uc6a9\ud558\uc5ec (\uac00\uc9dc) \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc720\uc800 \ub370\uc774\ud130\ub97c \uac00\uc838\uc635\ub2c8\ub2e4. \ud574\ub2f9 \uc0ac\uc6a9\uc790\uac00 \uc5c6\uc73c\uba74 \"\uc798\ubabb\ub41c \uc0ac\uc6a9\uc790 \uc774\ub984 \ub610\ub294 \ud328\uc2a4\uc6cc\ub4dc\"\ub77c\ub294 \uc624\ub958\uac00 \ubc18\ud658\ub429\ub2c8\ub2e4. \uc624\ub958\uc758 \uacbd\uc6b0 HTTPException \uc608\uc678\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4: \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user \ud328\uc2a4\uc6cc\ub4dc \ud655\uc778\ud558\uae30 \u00b6 \uc774 \uc2dc\uc810\uc5d0\uc11c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc758 \uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \ud615\uc2dd\uc744 \ud655\uc778\ud588\uc9c0\ub9cc \uc554\ud638\ub97c \ud655\uc778\ud558\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \uba3c\uc800 \ub370\uc774\ud130\ub97c Pydantic UserInDB \ubaa8\ub378\uc5d0 \ub123\uaca0\uc2b5\ub2c8\ub2e4. \uc77c\ubc18 \ud14d\uc2a4\ud2b8 \uc554\ud638\ub97c \uc800\uc7a5\ud558\uba74 \uc548 \ub418\ub2c8 (\uac00\uc9dc) \uc554\ud638 \ud574\uc2f1 \uc2dc\uc2a4\ud15c\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub450 \ud328\uc2a4\uc6cc\ub4dc\uac00 \uc77c\uce58\ud558\uc9c0 \uc54a\uc73c\uba74 \ub3d9\uc77c\ud55c \uc624\ub958\uac00 \ubc18\ud658\ub429\ub2c8\ub2e4. \ud328\uc2a4\uc6cc\ub4dc \ud574\uc2f1 \u00b6 \"\ud574\uc2f1\"\uc740 \uc77c\ubd80 \ucf58\ud150\uce20(\uc774 \uacbd\uc6b0 \ud328\uc2a4\uc6cc\ub4dc)\ub97c \ud6a1\uc124\uc218\uc124\ud558\ub294 \uac83\ucc98\ub7fc \ubcf4\uc774\ub294 \uc77c\ub828\uc758 \ubc14\uc774\ud2b8(\ubb38\uc790\uc5f4)\ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc815\ud655\ud788 \ub3d9\uc77c\ud55c \ucf58\ud150\uce20(\uc815\ud655\ud788 \ub3d9\uc77c\ud55c \ud328\uc2a4\uc6cc\ub4dc)\ub97c \uc804\ub2ec\ud560 \ub54c\ub9c8\ub2e4 \uc815\ud655\ud788 \ub3d9\uc77c\ud55c \ud6a1\uc124\uc218\uc124\uc774 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ud6a1\uc124\uc218\uc124\uc5d0\uc11c \uc554\ud638\ub85c \ub2e4\uc2dc \ubcc0\ud658\ud560 \uc218\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \ud328\uc2a4\uc6cc\ub4dc \ud574\uc2f1\uc744 \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \uc774\uc720 \u00b6 \ub370\uc774\ud130\ubca0\uc774\uc2a4\uac00 \uc720\ucd9c\ub41c \uacbd\uc6b0 \ud574\ucee4\ub294 \uc0ac\uc6a9\uc790\uc758 \uc77c\ubc18 \ud14d\uc2a4\ud2b8 \uc554\ud638\uac00 \uc544\ub2c8\ub77c \ud574\uc2dc\ub9cc \uac16\uac8c \ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud574\ucee4\ub294 \ub2e4\ub978 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \ub3d9\uc77c\ud55c \uc554\ud638\ub97c \uc0ac\uc6a9\ud558\ub824\uace0 \uc2dc\ub3c4\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4(\ub9ce\uc740 \uc0ac\uc6a9\uc790\uac00 \ubaa8\ub4e0 \uacf3\uc5d0\uc11c \ub3d9\uc77c\ud55c \uc554\ud638\ub97c \uc0ac\uc6a9\ud558\ubbc0\ub85c \uc774\ub294 \uc704\ud5d8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4). P\ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user **user_dict \uc5d0 \ub300\ud574 \u00b6 UserInDB(**user_dict) \ub294 \ub2e4\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4: user_dict \uc758 \ud0a4\uc640 \uac12\uc744 \ub2e4\uc74c\uacfc \uac19\uc740 \ud0a4-\uac12 \uc778\uc218\ub85c \uc9c1\uc811 \uc804\ub2ec\ud569\ub2c8\ub2e4: UserInDB ( username = user_dict [ \"username\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], disabled = user_dict [ \"disabled\" ], hashed_password = user_dict [ \"hashed_password\" ], ) \uc815\ubcf4 **user_dict \uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc124\uba85\uc740 \ucd94\uac00 \ubaa8\ub378 \ubb38\uc11c \ub97c \ub2e4\uc2dc \uc77d\uc5b4\ubd05\uc2dc\ub2e4. \ud1a0\ud070 \ubc18\ud658\ud558\uae30 \u00b6 token \uc5d4\ub4dc\ud3ec\uc778\ud2b8\uc758 \uc751\ub2f5\uc740 JSON \uac1d\uccb4\uc5ec\uc57c \ud569\ub2c8\ub2e4. token_type \uc774 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 \"Bearer\" \ud1a0\ud070\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c \ud1a0\ud070 \uc720\ud615\uc740 \" bearer \"\uc5ec\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc561\uc138\uc2a4 \ud1a0\ud070\uc744 \ud3ec\ud568\ud558\ub294 \ubb38\uc790\uc5f4\uacfc \ud568\uaed8 access_token \uc774 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc774 \uac04\ub2e8\ud55c \uc608\uc81c\uc5d0\uc11c\ub294 \uc644\uc804\ud788 \uc548\uc804\ud558\uc9c0 \uc54a\uace0, \ub3d9\uc77c\ud55c username \uc744 \ud1a0\ud070\uc73c\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4. \ud301 \ub2e4\uc74c \uc7a5\uc5d0\uc11c\ub294 \ud328\uc2a4\uc6cc\ub4dc \ud574\uc2f1 \ubc0f JWT \ud1a0\ud070\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc2e4\uc81c \ubcf4\uc548 \uad6c\ud604\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc9c0\uae08\uc740 \ud544\uc694\ud55c \uc138\ubd80 \uc815\ubcf4\uc5d0 \uc9d1\uc911\ud558\uaca0\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user \ud301 \uc0ac\uc591\uc5d0 \ub530\ub77c \uc774 \uc608\uc81c\uc640 \ub3d9\uc77c\ud558\uac8c access_token \ubc0f token_type \uc774 \ud3ec\ud568\ub41c JSON\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ub294 \ucf54\ub4dc\uc5d0\uc11c \uc9c1\uc811 \uc218\ud589\ud574\uc57c \ud558\uba70 \ud574\ub2f9 JSON \ud0a4\ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uc0ac\uc591\uc744 \uc900\uc218\ud558\uae30 \uc704\ud574 \uc2a4\uc2a4\ub85c \uc62c\ubc14\ub974\uac8c \uc218\ud589\ud558\uae30 \uc704\ud574 \uac70\uc758 \uc720\uc77c\ud558\uac8c \uae30\uc5b5\ud574\uc57c \ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ub098\uba38\uc9c0\ub294 FastAPI \uac00 \ucc98\ub9ac\ud569\ub2c8\ub2e4. \uc758\uc874\uc131 \uc5c5\ub370\uc774\ud2b8\ud558\uae30 \u00b6 \uc774\uc81c \uc758\uc874\uc131\uc744 \uc5c5\ub370\uc774\ud2b8\ub97c \ud560 \uac81\ub2c8\ub2e4. \uc774 \uc0ac\uc6a9\uc790\uac00 \ud65c\uc131\ud654\ub418\uc5b4 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub9cc current_user \ub97c \uac00\uc838\uc62c \uac81\ub2c8\ub2e4. \ub530\ub77c\uc11c get_current_user \ub97c \uc758\uc874\uc131\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \ucd94\uac00 \uc885\uc18d\uc131 get_current_active_user \ub97c \ub9cc\ub4ed\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc758\uc874\uc131 \ubaa8\ub450, \uc0ac\uc6a9\uc790\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uac70\ub098 \ube44\ud65c\uc131\uc778 \uacbd\uc6b0 HTTP \uc624\ub958\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc5d4\ub4dc\ud3ec\uc778\ud2b8\uc5d0\uc11c\ub294 \uc0ac\uc6a9\uc790\uac00 \uc874\uc7ac\ud558\uace0 \uc62c\ubc14\ub974\uac8c \uc778\uc99d\ub418\uc5c8\uc73c\uba70 \ud65c\uc131 \uc0c1\ud0dc\uc778 \uacbd\uc6b0\uc5d0\ub9cc \uc0ac\uc6a9\uc790\ub97c \uc5bb\uc2b5\ub2c8\ub2e4: \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user \uc815\ubcf4 \uc5ec\uae30\uc11c \ubc18\ud658\ud558\ub294 \uac12\uc774 Bearer \uc778 \ucd94\uac00 \ud5e4\ub354 WWW-Authenticate \ub3c4 \uc0ac\uc591\uc758 \uc77c\ubd80\uc785\ub2c8\ub2e4. \ubaa8\ub4e0 HTTP(\uc624\ub958) \uc0c1\ud0dc \ucf54\ub4dc 401 \"UNAUTHORIZED\"\ub294 WWW-Authenticate \ud5e4\ub354\ub3c4 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4. \ubca0\uc5b4\ub7ec \ud1a0\ud070\uc758 \uacbd\uc6b0(\uc9c0\uae08\uc758 \uacbd\uc6b0) \ud574\ub2f9 \ud5e4\ub354\uc758 \uac12\uc740 Bearer \uc5ec\uc57c \ud569\ub2c8\ub2e4. \uc2e4\uc81c\ub85c \ucd94\uac00 \ud5e4\ub354\ub97c \uac74\ub108\ub6f8 \uc218 \uc788\uc73c\uba70 \uc5ec\uc804\ud788 \uc791\ub3d9\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc5ec\uae30\uc5d0\uc11c\ub294 \uc0ac\uc591\uc744 \uc900\uc218\ud558\ub3c4\ub85d \uc81c\uacf5\ub429\ub2c8\ub2e4. \ub610\ud55c \uc774\ub97c \uc608\uc0c1\ud558\uace0 (\ud604\uc7ac \ub610\ub294 \ubbf8\ub798\uc5d0) \uc0ac\uc6a9\ud558\ub294 \ub3c4\uad6c\uac00 \uc788\uc744 \uc218 \uc788\uc73c\uba70, \ud604\uc7ac \ub610\ub294 \ubbf8\ub798\uc5d0 \uc790\uc2e0 \ud639\uc740 \uc790\uc2e0\uc758 \uc720\uc800\ub4e4\uc5d0\uac8c \uc720\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. \uadf8\uac83\uc774 \ud45c\uc900\uc758 \uc774\uc810\uc785\ub2c8\ub2e4 ... \ud655\uc778\ud558\uae30 \u00b6 \ub300\ud654\ud615 \ubb38\uc11c \uc5f4\uae30: http://127.0.0.1:8000/docs . \uc778\uc99d\ud558\uae30 \u00b6 \"Authorize\" \ubc84\ud2bc\uc744 \ub20c\ub7ec\ubd05\uc2dc\ub2e4. \uc790\uaca9 \uc99d\uba85\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc720\uc800\uba85: johndoe \ud328\uc2a4\uc6cc\ub4dc: secret \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc778\uc99d\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4: \uc790\uc2e0\uc758 \uc720\uc800 \ub370\uc774\ud130 \uac00\uc838\uc624\uae30 \u00b6 \uc774\uc81c /users/me \uacbd\ub85c\uc5d0 GET \uc791\uc5c5\uc744 \uc9c4\ud589\ud569\uc2dc\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"username\" : \"johndoe\" , \"email\" : \"johndoe@example.com\" , \"full_name\" : \"John Doe\" , \"disabled\" : false , \"hashed_password\" : \"fakehashedsecret\" } \uc7a0\uae08 \uc544\uc774\ucf58\uc744 \ud074\ub9ad\ud558\uace0 \ub85c\uadf8\uc544\uc6c3\ud55c \ub2e4\uc74c \ub3d9\uc77c\ud55c \uc791\uc5c5\uc744 \ub2e4\uc2dc \uc2dc\ub3c4\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 HTTP 401 \uc624\ub958\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. { \"detail\" : \"Not authenticated\" } \ube44\ud65c\uc131\ub41c \uc720\uc800 \u00b6 \uc774\uc81c \ube44\ud65c\uc131\ub41c \uc0ac\uc6a9\uc790\ub85c \uc2dc\ub3c4\ud558\uace0, \uc778\uc99d\ud574\ubd05\uc2dc\ub2e4: \uc720\uc800\uba85: alice \ud328\uc2a4\uc6cc\ub4dc: secret2 \uadf8\ub9ac\uace0 /users/me \uacbd\ub85c\uc640 \ud568\uaed8 GET \uc791\uc5c5\uc744 \uc0ac\uc6a9\ud574 \ubd05\uc2dc\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \"Inactive user\" \uc624\ub958\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4: { \"detail\" : \"Inactive user\" } \uc694\uc57d \u00b6 \uc774\uc81c API\uc5d0 \ub300\ud55c username \ubc0f password \ub97c \uae30\ubc18\uc73c\ub85c \uc644\uc804\ud55c \ubcf4\uc548 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud560 \uc218 \uc788\ub294 \ub3c4\uad6c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubcf4\uc548 \uc2dc\uc2a4\ud15c\uc744 \ubaa8\ub4e0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc0f \ubaa8\ub4e0 \uc0ac\uc6a9\uc790 \ub610\ub294 \ub370\uc774\ud130 \ubaa8\ub378\uacfc \ud638\ud658\ub418\ub3c4\ub85d \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc720\uc77c\ud55c \uc624\uc810\uc740 \uc544\uc9c1 \uc2e4\uc81c\ub85c \"\uc548\uc804\"\ud558\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \ub2e4\uc74c \uc7a5\uc5d0\uc11c\ub294 \uc548\uc804\ud55c \ud328\uc2a4\uc6cc\ub4dc \ud574\uc2f1 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 JWT \ud1a0\ud070\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","title":"\ud328\uc2a4\uc6cc\ub4dc\uc640 Bearer\ub97c \uc774\uc6a9\ud55c \uac04\ub2e8\ud55c OAuth2"},{"location":"tutorial/security/simple-oauth2/#bearer-oauth2","text":"\uc774\uc81c \uc774\uc804 \uc7a5\uc5d0\uc11c \ube4c\ub4dc\ud558\uace0 \ub204\ub77d\ub41c \ubd80\ubd84\uc744 \ucd94\uac00\ud558\uc5ec \uc644\uc804\ud55c \ubcf4\uc548 \ud750\ub984\uc744 \uac16\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"\ud328\uc2a4\uc6cc\ub4dc\uc640 Bearer\ub97c \uc774\uc6a9\ud55c \uac04\ub2e8\ud55c OAuth2"},{"location":"tutorial/security/simple-oauth2/#username-password","text":"FastAPI \ubcf4\uc548 \uc720\ud2f8\ub9ac\ud2f0\ub97c \uc0ac\uc6a9\ud558\uc5ec username \ubc0f password \ub97c \uac00\uc838\uc62c \uac83\uc785\ub2c8\ub2e4. OAuth2\ub294 (\uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud558\uace0 \uc788\ub294) \"\ud328\uc2a4\uc6cc\ub4dc \ud50c\ub85c\uc6b0\"\uc744 \uc0ac\uc6a9\ud560 \ub54c \ud074\ub77c\uc774\uc5b8\ud2b8/\uc720\uc800\uac00 username \ubc0f password \ud544\ub4dc\ub97c \ud3fc \ub370\uc774\ud130\ub85c \ubcf4\ub0b4\uc57c \ud568\uc744 \uc9c0\uc815\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc0ac\uc591\uc5d0\ub294 \ud544\ub4dc\uc758 \uc774\ub984\uc744 \uadf8\ub807\uac8c \uc9c0\uc815\ud574\uc57c \ud55c\ub2e4\uace0 \ub098\uc640 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c user-name \ub610\ub294 email \uc740 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uac71\uc815\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4. \ud504\ub7f0\ud2b8\uc5d4\ub4dc\uc5d0\uc11c \ucd5c\uc885 \uc0ac\uc6a9\uc790\uc5d0\uac8c \uc6d0\ud558\ub294 \ub300\ub85c \ud45c\uc2dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubaa8\ub378\uc740 \uc6d0\ud558\ub294 \ub2e4\ub978 \uc774\ub984\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub85c\uadf8\uc778 \uacbd\ub85c \uc791\ub3d9 \uc758 \uacbd\uc6b0 \uc0ac\uc591\uacfc \ud638\ud658\ub418\ub3c4\ub85d \uc774\ub7ec\ud55c \uc774\ub984\uc744 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4(\uc608\ub97c \ub4e4\uc5b4 \ud1b5\ud569 API \ubb38\uc11c \uc2dc\uc2a4\ud15c\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4). \uc0ac\uc591\uc5d0\ub294 \ub610\ud55c username \uacfc password \uac00 \ud3fc \ub370\uc774\ud130\ub85c \uc804\uc1a1\ub418\uc5b4\uc57c \ud55c\ub2e4\uace0 \uba85\uc2dc\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4(\ub530\ub77c\uc11c \uc5ec\uae30\uc5d0\ub294 JSON\uc774 \uc5c6\uc2b5\ub2c8\ub2e4).","title":"username\uc640 password \uc5bb\uae30"},{"location":"tutorial/security/simple-oauth2/#scope","text":"\uc0ac\uc591\uc5d0\ub294 \ud074\ub77c\uc774\uc5b8\ud2b8\uac00 \ub2e4\ub978 \ud3fc \ud544\ub4dc \" scope \"\ub97c \ubcf4\ub0bc \uc218 \uc788\ub2e4\uace0 \ub098\uc640 \uc788\uc2b5\ub2c8\ub2e4. \ud3fc \ud544\ub4dc \uc774\ub984\uc740 scope (\ub2e8\uc218\ud615)\uc774\uc9c0\ub9cc \uc2e4\uc81c\ub85c\ub294 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \"\ubc94\uc704\"\uac00 \uc788\ub294 \uae34 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4. \uac01 \"\ubc94\uc704\"\ub294 \uacf5\ubc31\uc774 \uc5c6\ub294 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \ud2b9\uc815 \ubcf4\uc548 \uad8c\ud55c\uc744 \uc120\uc5b8\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ub2e4\uc74c\uc744 \ubd05\uc2dc\ub2e4: users:read \ub610\ub294 users:write \ub294 \uc77c\ubc18\uc801\uc778 \uc608\uc2dc\uc785\ub2c8\ub2e4. instagram_basic \uc740 \ud398\uc774\uc2a4\ubd81/\uc778\uc2a4\ud0c0\uadf8\ub7a8\uc5d0\uc11c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. https://www.googleapis.com/auth/drive \ub294 Google\uc5d0\uc11c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc815\ubcf4 OAuth2\uc5d0\uc11c \"\ubc94\uc704\"\ub294 \ud544\uc694\ud55c \ud2b9\uc815 \uad8c\ud55c\uc744 \uc120\uc5b8\ud558\ub294 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4. : \uacfc \uac19\uc740 \ub2e4\ub978 \ubb38\uc790\uac00 \uc788\ub294\uc9c0 \ub610\ub294 URL\uc778\uc9c0\ub294 \uc911\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc138\ubd80 \uc0ac\ud56d\uc740 \uad6c\ud604\uc5d0 \ub530\ub77c \ub2e4\ub985\ub2c8\ub2e4. OAuth2\uc758 \uacbd\uc6b0 \ubb38\uc790\uc5f4\uc77c \ubfd0\uc785\ub2c8\ub2e4.","title":"scope"},{"location":"tutorial/security/simple-oauth2/#username-password_1","text":"\uc774\uc81c FastAPI \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc720\ud2f8\ub9ac\ud2f0\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc774\ub97c \ucc98\ub9ac\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","title":"username\uacfc password\ub97c \uac00\uc838\uc624\ub294 \ucf54\ub4dc"},{"location":"tutorial/security/simple-oauth2/#oauth2passwordrequestform","text":"\uba3c\uc800 OAuth2PasswordRequestForm \uc744 \uac00\uc838\uc640 /token \uc5d0 \ub300\ud55c \uacbd\ub85c \uc791\ub3d9 \uc5d0\uc11c Depends \uc758 \uc758\uc874\uc131\uc73c\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user OAuth2PasswordRequestForm \uc740 \ub2e4\uc74c\uc744 \uc0ac\uc6a9\ud558\uc5ec \ud3fc \ubcf8\ubb38\uc744 \uc120\uc5b8\ud558\ub294 \ud074\ub798\uc2a4 \uc758\uc874\uc131\uc785\ub2c8\ub2e4: username . password . scope \ub294 \uc120\ud0dd\uc801\uc778 \ud544\ub4dc\ub85c \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \ubb38\uc790\uc5f4\ub85c \uad6c\uc131\ub41c \ud070 \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4. grant_type (\uc120\ud0dd\uc801\uc73c\ub85c \uc0ac\uc6a9). \ud301 OAuth2 \uc0ac\uc591\uc740 \uc2e4\uc81c\ub85c password \ub77c\ub294 \uace0\uc815 \uac12\uc774 \uc788\ub294 grant_type \ud544\ub4dc\ub97c \uc694\uad6c \ud558\uc9c0\ub9cc OAuth2PasswordRequestForm \uc740 \uc774\ub97c \uac15\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\uba74 OAuth2PasswordRequestForm \ub300\uc2e0 OAuth2PasswordRequestFormStrict \ub97c \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4. client_id (\uc120\ud0dd\uc801\uc73c\ub85c \uc0ac\uc6a9) (\uc608\uc81c\uc5d0\uc11c\ub294 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4). client_secret (\uc120\ud0dd\uc801\uc73c\ub85c \uc0ac\uc6a9) (\uc608\uc81c\uc5d0\uc11c\ub294 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4). \uc815\ubcf4 OAuth2PasswordRequestForm \uc740 OAuth2PasswordBearer \uc640 \uac19\uc774 FastAPI \uc5d0 \ub300\ud55c \ud2b9\uc218 \ud074\ub798\uc2a4\uac00 \uc544\ub2d9\ub2c8\ub2e4. OAuth2PasswordBearer \ub294 FastAPI \uac00 \ubcf4\uc548 \uccb4\uacc4\uc784\uc744 \uc54c\ub3c4\ub85d \ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c OpenAPI\uc5d0 \uadf8\ub807\uac8c \ucd94\uac00\ub429\ub2c8\ub2e4. \uadf8\ub7ec\ub098 OAuth2PasswordRequestForm \uc740 \uc9c1\uc811 \uc791\uc131\ud558\uac70\ub098 Form \ub9e4\uac1c\ubcc0\uc218\ub97c \uc9c1\uc811 \uc120\uc5b8\ud560 \uc218 \uc788\ub294 \ud074\ub798\uc2a4 \uc758\uc874\uc131\uc77c \ubfd0\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc77c\ubc18\uc801\uc778 \uc0ac\uc6a9 \uc0ac\ub840\uc774\ubbc0\ub85c \ub354 \uc27d\uac8c \ud558\uae30 \uc704\ud574 FastAPI \uc5d0\uc11c \uc9c1\uc811 \uc81c\uacf5\ud569\ub2c8\ub2e4.","title":"OAuth2PasswordRequestForm"},{"location":"tutorial/security/simple-oauth2/#_1","text":"\ud301 \uc885\uc18d\uc131 \ud074\ub798\uc2a4 OAuth2PasswordRequestForm \uc758 \uc778\uc2a4\ud134\uc2a4\uc5d0\ub294 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub41c \uae34 \ubb38\uc790\uc5f4\uc774 \uc788\ub294 scope \uc18d\uc131\uc774 \uc5c6\uace0 \ub300\uc2e0 \uc804\uc1a1\ub41c \uac01 \ubc94\uc704\uc5d0 \ub300\ud55c \uc2e4\uc81c \ubb38\uc790\uc5f4 \ubaa9\ub85d\uc774 \uc788\ub294 scopes \uc18d\uc131\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc608\uc81c\uc5d0\uc11c\ub294 scopes \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc9c0\ub9cc \ud544\uc694\ud55c \uacbd\uc6b0, \uae30\ub2a5\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \ud3fc \ud544\ub4dc\uc758 username \uc744 \uc0ac\uc6a9\ud558\uc5ec (\uac00\uc9dc) \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uc720\uc800 \ub370\uc774\ud130\ub97c \uac00\uc838\uc635\ub2c8\ub2e4. \ud574\ub2f9 \uc0ac\uc6a9\uc790\uac00 \uc5c6\uc73c\uba74 \"\uc798\ubabb\ub41c \uc0ac\uc6a9\uc790 \uc774\ub984 \ub610\ub294 \ud328\uc2a4\uc6cc\ub4dc\"\ub77c\ub294 \uc624\ub958\uac00 \ubc18\ud658\ub429\ub2c8\ub2e4. \uc624\ub958\uc758 \uacbd\uc6b0 HTTPException \uc608\uc678\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4: \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user","title":"\ud3fc \ub370\uc774\ud130 \uc0ac\uc6a9\ud558\uae30"},{"location":"tutorial/security/simple-oauth2/#_2","text":"\uc774 \uc2dc\uc810\uc5d0\uc11c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc758 \uc0ac\uc6a9\uc790 \ub370\uc774\ud130 \ud615\uc2dd\uc744 \ud655\uc778\ud588\uc9c0\ub9cc \uc554\ud638\ub97c \ud655\uc778\ud558\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \uba3c\uc800 \ub370\uc774\ud130\ub97c Pydantic UserInDB \ubaa8\ub378\uc5d0 \ub123\uaca0\uc2b5\ub2c8\ub2e4. \uc77c\ubc18 \ud14d\uc2a4\ud2b8 \uc554\ud638\ub97c \uc800\uc7a5\ud558\uba74 \uc548 \ub418\ub2c8 (\uac00\uc9dc) \uc554\ud638 \ud574\uc2f1 \uc2dc\uc2a4\ud15c\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub450 \ud328\uc2a4\uc6cc\ub4dc\uac00 \uc77c\uce58\ud558\uc9c0 \uc54a\uc73c\uba74 \ub3d9\uc77c\ud55c \uc624\ub958\uac00 \ubc18\ud658\ub429\ub2c8\ub2e4.","title":"\ud328\uc2a4\uc6cc\ub4dc \ud655\uc778\ud558\uae30"},{"location":"tutorial/security/simple-oauth2/#_3","text":"\"\ud574\uc2f1\"\uc740 \uc77c\ubd80 \ucf58\ud150\uce20(\uc774 \uacbd\uc6b0 \ud328\uc2a4\uc6cc\ub4dc)\ub97c \ud6a1\uc124\uc218\uc124\ud558\ub294 \uac83\ucc98\ub7fc \ubcf4\uc774\ub294 \uc77c\ub828\uc758 \ubc14\uc774\ud2b8(\ubb38\uc790\uc5f4)\ub85c \ubcc0\ud658\ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc815\ud655\ud788 \ub3d9\uc77c\ud55c \ucf58\ud150\uce20(\uc815\ud655\ud788 \ub3d9\uc77c\ud55c \ud328\uc2a4\uc6cc\ub4dc)\ub97c \uc804\ub2ec\ud560 \ub54c\ub9c8\ub2e4 \uc815\ud655\ud788 \ub3d9\uc77c\ud55c \ud6a1\uc124\uc218\uc124\uc774 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ud6a1\uc124\uc218\uc124\uc5d0\uc11c \uc554\ud638\ub85c \ub2e4\uc2dc \ubcc0\ud658\ud560 \uc218\ub294 \uc5c6\uc2b5\ub2c8\ub2e4.","title":"\ud328\uc2a4\uc6cc\ub4dc \ud574\uc2f1"},{"location":"tutorial/security/simple-oauth2/#_4","text":"\ub370\uc774\ud130\ubca0\uc774\uc2a4\uac00 \uc720\ucd9c\ub41c \uacbd\uc6b0 \ud574\ucee4\ub294 \uc0ac\uc6a9\uc790\uc758 \uc77c\ubc18 \ud14d\uc2a4\ud2b8 \uc554\ud638\uac00 \uc544\ub2c8\ub77c \ud574\uc2dc\ub9cc \uac16\uac8c \ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud574\ucee4\ub294 \ub2e4\ub978 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \ub3d9\uc77c\ud55c \uc554\ud638\ub97c \uc0ac\uc6a9\ud558\ub824\uace0 \uc2dc\ub3c4\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4(\ub9ce\uc740 \uc0ac\uc6a9\uc790\uac00 \ubaa8\ub4e0 \uacf3\uc5d0\uc11c \ub3d9\uc77c\ud55c \uc554\ud638\ub97c \uc0ac\uc6a9\ud558\ubbc0\ub85c \uc774\ub294 \uc704\ud5d8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4). P\ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user","title":"\ud328\uc2a4\uc6cc\ub4dc \ud574\uc2f1\uc744 \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \uc774\uc720"},{"location":"tutorial/security/simple-oauth2/#user_dict","text":"UserInDB(**user_dict) \ub294 \ub2e4\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4: user_dict \uc758 \ud0a4\uc640 \uac12\uc744 \ub2e4\uc74c\uacfc \uac19\uc740 \ud0a4-\uac12 \uc778\uc218\ub85c \uc9c1\uc811 \uc804\ub2ec\ud569\ub2c8\ub2e4: UserInDB ( username = user_dict [ \"username\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], disabled = user_dict [ \"disabled\" ], hashed_password = user_dict [ \"hashed_password\" ], ) \uc815\ubcf4 **user_dict \uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc124\uba85\uc740 \ucd94\uac00 \ubaa8\ub378 \ubb38\uc11c \ub97c \ub2e4\uc2dc \uc77d\uc5b4\ubd05\uc2dc\ub2e4.","title":"**user_dict\uc5d0 \ub300\ud574"},{"location":"tutorial/security/simple-oauth2/#_5","text":"token \uc5d4\ub4dc\ud3ec\uc778\ud2b8\uc758 \uc751\ub2f5\uc740 JSON \uac1d\uccb4\uc5ec\uc57c \ud569\ub2c8\ub2e4. token_type \uc774 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 \"Bearer\" \ud1a0\ud070\uc744 \uc0ac\uc6a9\ud558\ubbc0\ub85c \ud1a0\ud070 \uc720\ud615\uc740 \" bearer \"\uc5ec\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc561\uc138\uc2a4 \ud1a0\ud070\uc744 \ud3ec\ud568\ud558\ub294 \ubb38\uc790\uc5f4\uacfc \ud568\uaed8 access_token \uc774 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc774 \uac04\ub2e8\ud55c \uc608\uc81c\uc5d0\uc11c\ub294 \uc644\uc804\ud788 \uc548\uc804\ud558\uc9c0 \uc54a\uace0, \ub3d9\uc77c\ud55c username \uc744 \ud1a0\ud070\uc73c\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4. \ud301 \ub2e4\uc74c \uc7a5\uc5d0\uc11c\ub294 \ud328\uc2a4\uc6cc\ub4dc \ud574\uc2f1 \ubc0f JWT \ud1a0\ud070\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc2e4\uc81c \ubcf4\uc548 \uad6c\ud604\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc9c0\uae08\uc740 \ud544\uc694\ud55c \uc138\ubd80 \uc815\ubcf4\uc5d0 \uc9d1\uc911\ud558\uaca0\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user \ud301 \uc0ac\uc591\uc5d0 \ub530\ub77c \uc774 \uc608\uc81c\uc640 \ub3d9\uc77c\ud558\uac8c access_token \ubc0f token_type \uc774 \ud3ec\ud568\ub41c JSON\uc744 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ub294 \ucf54\ub4dc\uc5d0\uc11c \uc9c1\uc811 \uc218\ud589\ud574\uc57c \ud558\uba70 \ud574\ub2f9 JSON \ud0a4\ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \uc0ac\uc591\uc744 \uc900\uc218\ud558\uae30 \uc704\ud574 \uc2a4\uc2a4\ub85c \uc62c\ubc14\ub974\uac8c \uc218\ud589\ud558\uae30 \uc704\ud574 \uac70\uc758 \uc720\uc77c\ud558\uac8c \uae30\uc5b5\ud574\uc57c \ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \ub098\uba38\uc9c0\ub294 FastAPI \uac00 \ucc98\ub9ac\ud569\ub2c8\ub2e4.","title":"\ud1a0\ud070 \ubc18\ud658\ud558\uae30"},{"location":"tutorial/security/simple-oauth2/#_6","text":"\uc774\uc81c \uc758\uc874\uc131\uc744 \uc5c5\ub370\uc774\ud2b8\ub97c \ud560 \uac81\ub2c8\ub2e4. \uc774 \uc0ac\uc6a9\uc790\uac00 \ud65c\uc131\ud654\ub418\uc5b4 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub9cc current_user \ub97c \uac00\uc838\uc62c \uac81\ub2c8\ub2e4. \ub530\ub77c\uc11c get_current_user \ub97c \uc758\uc874\uc131\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \ucd94\uac00 \uc885\uc18d\uc131 get_current_active_user \ub97c \ub9cc\ub4ed\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc758\uc874\uc131 \ubaa8\ub450, \uc0ac\uc6a9\uc790\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uac70\ub098 \ube44\ud65c\uc131\uc778 \uacbd\uc6b0 HTTP \uc624\ub958\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc5d4\ub4dc\ud3ec\uc778\ud2b8\uc5d0\uc11c\ub294 \uc0ac\uc6a9\uc790\uac00 \uc874\uc7ac\ud558\uace0 \uc62c\ubc14\ub974\uac8c \uc778\uc99d\ub418\uc5c8\uc73c\uba70 \ud65c\uc131 \uc0c1\ud0dc\uc778 \uacbd\uc6b0\uc5d0\ub9cc \uc0ac\uc6a9\uc790\ub97c \uc5bb\uc2b5\ub2c8\ub2e4: \ud30c\uc774\uc36c 3.7 \uc774\uc0c1 \ud30c\uc774\uc36c 3.10 \uc774\uc0c1 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user \uc815\ubcf4 \uc5ec\uae30\uc11c \ubc18\ud658\ud558\ub294 \uac12\uc774 Bearer \uc778 \ucd94\uac00 \ud5e4\ub354 WWW-Authenticate \ub3c4 \uc0ac\uc591\uc758 \uc77c\ubd80\uc785\ub2c8\ub2e4. \ubaa8\ub4e0 HTTP(\uc624\ub958) \uc0c1\ud0dc \ucf54\ub4dc 401 \"UNAUTHORIZED\"\ub294 WWW-Authenticate \ud5e4\ub354\ub3c4 \ubc18\ud658\ud574\uc57c \ud569\ub2c8\ub2e4. \ubca0\uc5b4\ub7ec \ud1a0\ud070\uc758 \uacbd\uc6b0(\uc9c0\uae08\uc758 \uacbd\uc6b0) \ud574\ub2f9 \ud5e4\ub354\uc758 \uac12\uc740 Bearer \uc5ec\uc57c \ud569\ub2c8\ub2e4. \uc2e4\uc81c\ub85c \ucd94\uac00 \ud5e4\ub354\ub97c \uac74\ub108\ub6f8 \uc218 \uc788\uc73c\uba70 \uc5ec\uc804\ud788 \uc791\ub3d9\ud569\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc5ec\uae30\uc5d0\uc11c\ub294 \uc0ac\uc591\uc744 \uc900\uc218\ud558\ub3c4\ub85d \uc81c\uacf5\ub429\ub2c8\ub2e4. \ub610\ud55c \uc774\ub97c \uc608\uc0c1\ud558\uace0 (\ud604\uc7ac \ub610\ub294 \ubbf8\ub798\uc5d0) \uc0ac\uc6a9\ud558\ub294 \ub3c4\uad6c\uac00 \uc788\uc744 \uc218 \uc788\uc73c\uba70, \ud604\uc7ac \ub610\ub294 \ubbf8\ub798\uc5d0 \uc790\uc2e0 \ud639\uc740 \uc790\uc2e0\uc758 \uc720\uc800\ub4e4\uc5d0\uac8c \uc720\uc6a9\ud560 \uac83\uc785\ub2c8\ub2e4. \uadf8\uac83\uc774 \ud45c\uc900\uc758 \uc774\uc810\uc785\ub2c8\ub2e4 ...","title":"\uc758\uc874\uc131 \uc5c5\ub370\uc774\ud2b8\ud558\uae30"},{"location":"tutorial/security/simple-oauth2/#_7","text":"\ub300\ud654\ud615 \ubb38\uc11c \uc5f4\uae30: http://127.0.0.1:8000/docs .","title":"\ud655\uc778\ud558\uae30"},{"location":"tutorial/security/simple-oauth2/#_8","text":"\"Authorize\" \ubc84\ud2bc\uc744 \ub20c\ub7ec\ubd05\uc2dc\ub2e4. \uc790\uaca9 \uc99d\uba85\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc720\uc800\uba85: johndoe \ud328\uc2a4\uc6cc\ub4dc: secret \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc778\uc99d\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4:","title":"\uc778\uc99d\ud558\uae30"},{"location":"tutorial/security/simple-oauth2/#_9","text":"\uc774\uc81c /users/me \uacbd\ub85c\uc5d0 GET \uc791\uc5c5\uc744 \uc9c4\ud589\ud569\uc2dc\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \uc0ac\uc6a9\uc790 \ub370\uc774\ud130\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4: { \"username\" : \"johndoe\" , \"email\" : \"johndoe@example.com\" , \"full_name\" : \"John Doe\" , \"disabled\" : false , \"hashed_password\" : \"fakehashedsecret\" } \uc7a0\uae08 \uc544\uc774\ucf58\uc744 \ud074\ub9ad\ud558\uace0 \ub85c\uadf8\uc544\uc6c3\ud55c \ub2e4\uc74c \ub3d9\uc77c\ud55c \uc791\uc5c5\uc744 \ub2e4\uc2dc \uc2dc\ub3c4\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 HTTP 401 \uc624\ub958\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. { \"detail\" : \"Not authenticated\" }","title":"\uc790\uc2e0\uc758 \uc720\uc800 \ub370\uc774\ud130 \uac00\uc838\uc624\uae30"},{"location":"tutorial/security/simple-oauth2/#_10","text":"\uc774\uc81c \ube44\ud65c\uc131\ub41c \uc0ac\uc6a9\uc790\ub85c \uc2dc\ub3c4\ud558\uace0, \uc778\uc99d\ud574\ubd05\uc2dc\ub2e4: \uc720\uc800\uba85: alice \ud328\uc2a4\uc6cc\ub4dc: secret2 \uadf8\ub9ac\uace0 /users/me \uacbd\ub85c\uc640 \ud568\uaed8 GET \uc791\uc5c5\uc744 \uc0ac\uc6a9\ud574 \ubd05\uc2dc\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \"Inactive user\" \uc624\ub958\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4: { \"detail\" : \"Inactive user\" }","title":"\ube44\ud65c\uc131\ub41c \uc720\uc800"},{"location":"tutorial/security/simple-oauth2/#_11","text":"\uc774\uc81c API\uc5d0 \ub300\ud55c username \ubc0f password \ub97c \uae30\ubc18\uc73c\ub85c \uc644\uc804\ud55c \ubcf4\uc548 \uc2dc\uc2a4\ud15c\uc744 \uad6c\ud604\ud560 \uc218 \uc788\ub294 \ub3c4\uad6c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubcf4\uc548 \uc2dc\uc2a4\ud15c\uc744 \ubaa8\ub4e0 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ubc0f \ubaa8\ub4e0 \uc0ac\uc6a9\uc790 \ub610\ub294 \ub370\uc774\ud130 \ubaa8\ub378\uacfc \ud638\ud658\ub418\ub3c4\ub85d \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc720\uc77c\ud55c \uc624\uc810\uc740 \uc544\uc9c1 \uc2e4\uc81c\ub85c \"\uc548\uc804\"\ud558\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \ub2e4\uc74c \uc7a5\uc5d0\uc11c\ub294 \uc548\uc804\ud55c \ud328\uc2a4\uc6cc\ub4dc \ud574\uc2f1 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 JWT \ud1a0\ud070\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","title":"\uc694\uc57d"}]}