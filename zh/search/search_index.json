{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastAPI \u6846\u67b6\uff0c\u9ad8\u6027\u80fd\uff0c\u6613\u4e8e\u5b66\u4e60\uff0c\u9ad8\u6548\u7f16\u7801\uff0c\u751f\u4ea7\u53ef\u7528 \u6587\u6863 \uff1a https://fastapi.tiangolo.com \u6e90\u7801 \uff1a https://github.com/tiangolo/fastapi FastAPI \u662f\u4e00\u4e2a\u7528\u4e8e\u6784\u5efa API \u7684\u73b0\u4ee3\u3001\u5feb\u901f\uff08\u9ad8\u6027\u80fd\uff09\u7684 web \u6846\u67b6\uff0c\u4f7f\u7528 Python 3.6+ \u5e76\u57fa\u4e8e\u6807\u51c6\u7684 Python \u7c7b\u578b\u63d0\u793a\u3002 \u5173\u952e\u7279\u6027: \u5feb\u901f \uff1a\u53ef\u4e0e NodeJS \u548c Go \u6bd4\u80a9\u7684\u6781\u9ad8\u6027\u80fd\uff08\u5f52\u529f\u4e8e Starlette \u548c Pydantic\uff09\u3002 \u6700\u5feb\u7684 Python web \u6846\u67b6\u4e4b\u4e00 \u3002 \u9ad8\u6548\u7f16\u7801 \uff1a\u63d0\u9ad8\u529f\u80fd\u5f00\u53d1\u901f\u5ea6\u7ea6 200\uff05 \u81f3 300\uff05\u3002* \u66f4\u5c11 bug \uff1a\u51cf\u5c11\u7ea6 40\uff05 \u7684\u4eba\u4e3a\uff08\u5f00\u53d1\u8005\uff09\u5bfc\u81f4\u9519\u8bef\u3002* \u667a\u80fd \uff1a\u6781\u4f73\u7684\u7f16\u8f91\u5668\u652f\u6301\u3002\u5904\u5904\u7686\u53ef \u81ea\u52a8\u8865\u5168 \uff0c\u51cf\u5c11\u8c03\u8bd5\u65f6\u95f4\u3002 \u7b80\u5355 \uff1a\u8bbe\u8ba1\u7684\u6613\u4e8e\u4f7f\u7528\u548c\u5b66\u4e60\uff0c\u9605\u8bfb\u6587\u6863\u7684\u65f6\u95f4\u66f4\u77ed\u3002 \u7b80\u77ed \uff1a\u4f7f\u4ee3\u7801\u91cd\u590d\u6700\u5c0f\u5316\u3002\u901a\u8fc7\u4e0d\u540c\u7684\u53c2\u6570\u58f0\u660e\u5b9e\u73b0\u4e30\u5bcc\u529f\u80fd\u3002bug \u66f4\u5c11\u3002 \u5065\u58ee \uff1a\u751f\u4ea7\u53ef\u7528\u7ea7\u522b\u7684\u4ee3\u7801\u3002\u8fd8\u6709\u81ea\u52a8\u751f\u6210\u7684\u4ea4\u4e92\u5f0f\u6587\u6863\u3002 \u6807\u51c6\u5316 \uff1a\u57fa\u4e8e\uff08\u5e76\u5b8c\u5168\u517c\u5bb9\uff09API \u7684\u76f8\u5173\u5f00\u653e\u6807\u51c6\uff1a OpenAPI (\u4ee5\u524d\u88ab\u79f0\u4e3a Swagger) \u548c JSON Schema \u3002 * \u6839\u636e\u5bf9\u67d0\u4e2a\u6784\u5efa\u7ebf\u4e0a\u5e94\u7528\u7684\u5185\u90e8\u5f00\u53d1\u56e2\u961f\u6240\u8fdb\u884c\u7684\u6d4b\u8bd5\u4f30\u7b97\u5f97\u51fa\u3002 Sponsors \u00b6 Other sponsors \u8bc4\u4ef7 \u00b6 \u300c [...] \u6700\u8fd1\u6211\u4e00\u76f4\u5728\u4f7f\u7528 FastAPI \u3002[...] \u5b9e\u9645\u4e0a\u6211\u6b63\u5728\u8ba1\u5212\u5c06\u5176\u7528\u4e8e\u6211\u6240\u5728\u7684 \u5fae\u8f6f \u56e2\u961f\u7684\u6240\u6709 \u673a\u5668\u5b66\u4e60\u670d\u52a1 \u3002\u5176\u4e2d\u4e00\u4e9b\u670d\u52a1\u6b63\u88ab\u96c6\u6210\u8fdb\u6838\u5fc3 Windows \u4ea7\u54c1\u548c\u4e00\u4e9b Office \u4ea7\u54c1\u3002 \u300d Kabir Khan - \u5fae\u8f6f (ref) \u300c \u6211\u4eec\u9009\u62e9\u4e86 FastAPI \u6765\u521b\u5efa\u7528\u4e8e\u83b7\u53d6 \u9884\u6d4b\u7ed3\u679c \u7684 REST \u670d\u52a1\u3002[\u7528\u4e8e Ludwig] \u300d Piero Molino\uff0cYaroslav Dudin \u548c Sai Sumanth Miryala - Uber (ref) \u300c Netflix \u975e\u5e38\u9ad8\u5174\u5730\u5ba3\u5e03\uff0c\u6b63\u5f0f\u5f00\u6e90\u6211\u4eec\u7684 \u5371\u673a\u7ba1\u7406 \u7f16\u6392\u6846\u67b6\uff1a Dispatch \uff01[\u4f7f\u7528 FastAPI \u6784\u5efa] \u300d Kevin Glisson\uff0cMarc Vilanova\uff0cForest Monsen - Netflix (ref) \u300c FastAPI \u8ba9\u6211\u5174\u594b\u7684\u6b23\u559c\u82e5\u72c2\u3002\u5b83\u592a\u68d2\u4e86\uff01 \u300d Brian Okken - Python Bytes \u64ad\u5ba2\u4e3b\u6301\u4eba (ref) \u300c \u8001\u5b9e\u8bf4\uff0c\u4f60\u7684\u4f5c\u54c1\u770b\u8d77\u6765\u975e\u5e38\u53ef\u9760\u548c\u4f18\u7f8e\u3002\u5728\u5f88\u591a\u65b9\u9762\uff0c\u8fd9\u5c31\u662f\u6211\u60f3\u8ba9 Hug \u6210\u4e3a\u7684\u6837\u5b50 - \u770b\u5230\u6709\u4eba\u5b9e\u73b0\u4e86\u5b83\u771f\u7684\u5f88\u9f13\u821e\u4eba\u5fc3\u3002 \u300d Timothy Crosley - Hug \u4f5c\u8005 (ref) \u300c \u5982\u679c\u4f60\u6b63\u6253\u7b97\u5b66\u4e60\u4e00\u4e2a \u73b0\u4ee3\u6846\u67b6 \u7528\u6765\u6784\u5efa REST API\uff0c\u6765\u770b\u4e0b FastAPI [...] \u5b83\u5feb\u901f\u3001\u6613\u7528\u4e14\u6613\u4e8e\u5b66\u4e60 [...] \u300d \u300c \u6211\u4eec\u5df2\u7ecf\u5c06 API \u670d\u52a1\u5207\u6362\u5230\u4e86 FastAPI [...] \u6211\u8ba4\u4e3a\u4f60\u4f1a\u559c\u6b22\u5b83\u7684 [...] \u300d Ines Montani - Matthew Honnibal - Explosion AI \u521b\u59cb\u4eba - spaCy \u4f5c\u8005 (ref) - (ref) Typer \uff0c\u547d\u4ee4\u884c\u4e2d\u7684 FastAPI \u00b6 \u5982\u679c\u4f60\u6b63\u5728\u5f00\u53d1\u4e00\u4e2a\u5728\u7ec8\u7aef\u4e2d\u8fd0\u884c\u7684 \u547d\u4ee4\u884c \u5e94\u7528\u800c\u4e0d\u662f web API\uff0c\u4e0d\u59a8\u8bd5\u4e0b Typer \u3002 Typer \u662f FastAPI \u7684\u5c0f\u540c\u80de\u3002\u5b83\u60f3\u8981\u6210\u4e3a \u547d\u4ee4\u884c\u4e2d\u7684 FastAPI \u3002 \u2328\ufe0f \ud83d\ude80 \u4f9d\u8d56 \u00b6 Python 3.6 \u53ca\u66f4\u9ad8\u7248\u672c FastAPI \u7ad9\u5728\u4ee5\u4e0b\u5de8\u4eba\u7684\u80a9\u8180\u4e4b\u4e0a\uff1a Starlette \u8d1f\u8d23 web \u90e8\u5206\u3002 Pydantic \u8d1f\u8d23\u6570\u636e\u90e8\u5206\u3002 \u5b89\u88c5 \u00b6 $ pip install fastapi ---> 100% \u4f60\u8fd8\u4f1a\u9700\u8981\u4e00\u4e2a ASGI \u670d\u52a1\u5668\uff0c\u751f\u4ea7\u73af\u5883\u53ef\u4ee5\u4f7f\u7528 Uvicorn \u6216\u8005 Hypercorn \u3002 $ pip install uvicorn [ standard ] ---> 100% \u793a\u4f8b \u00b6 \u521b\u5efa \u00b6 \u521b\u5efa\u4e00\u4e2a main.py \u6587\u4ef6\u5e76\u5199\u5165\u4ee5\u4e0b\u5185\u5bb9: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } \u6216\u8005\u4f7f\u7528 async def ... \u5982\u679c\u4f60\u7684\u4ee3\u7801\u91cc\u4f1a\u51fa\u73b0 async / await \uff0c\u8bf7\u4f7f\u7528 async def \uff1a from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } Note : \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u662f\u5426\u4f1a\u7528\u5230\uff0c\u53ef\u4ee5\u67e5\u770b\u6587\u6863\u7684 \"In a hurry?\" \u7ae0\u8282\u4e2d \u5173\u4e8e async \u548c await \u7684\u90e8\u5206 \u3002 \u8fd0\u884c \u00b6 \u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\u670d\u52a1\u5668\uff1a $ uvicorn main:app --reload INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) INFO: Started reloader process [28720] INFO: Started server process [28722] INFO: Waiting for application startup. INFO: Application startup complete. \u5173\u4e8e uvicorn main:app --reload \u547d\u4ee4...... uvicorn main:app \u547d\u4ee4\u542b\u4e49\u5982\u4e0b: main \uff1a main.py \u6587\u4ef6\uff08\u4e00\u4e2a Python \"\u6a21\u5757\"\uff09\u3002 app \uff1a\u5728 main.py \u6587\u4ef6\u4e2d\u901a\u8fc7 app = FastAPI() \u521b\u5efa\u7684\u5bf9\u8c61\u3002 --reload \uff1a\u8ba9\u670d\u52a1\u5668\u5728\u66f4\u65b0\u4ee3\u7801\u540e\u91cd\u65b0\u542f\u52a8\u3002\u4ec5\u5728\u5f00\u53d1\u65f6\u4f7f\u7528\u8be5\u9009\u9879\u3002 \u68c0\u67e5 \u00b6 \u4f7f\u7528\u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000/items/5?q=somequery \u3002 \u4f60\u5c06\u4f1a\u770b\u5230\u5982\u4e0b JSON \u54cd\u5e94\uff1a { \"item_id\" : 5 , \"q\" : \"somequery\" } \u4f60\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u5177\u6709\u4ee5\u4e0b\u529f\u80fd\u7684 API\uff1a \u901a\u8fc7 \u8def\u5f84 / \u548c /items/{item_id} \u63a5\u53d7 HTTP \u8bf7\u6c42\u3002 \u4ee5\u4e0a \u8def\u5f84 \u90fd\u63a5\u53d7 GET \u64cd\u4f5c \uff08\u4e5f\u88ab\u79f0\u4e3a HTTP \u65b9\u6cd5 \uff09\u3002 /items/{item_id} \u8def\u5f84 \u6709\u4e00\u4e2a \u8def\u5f84\u53c2\u6570 item_id \u5e76\u4e14\u5e94\u8be5\u4e3a int \u7c7b\u578b\u3002 /items/{item_id} \u8def\u5f84 \u6709\u4e00\u4e2a\u53ef\u9009\u7684 str \u7c7b\u578b\u7684 \u67e5\u8be2\u53c2\u6570 q \u3002 \u4ea4\u4e92\u5f0f API \u6587\u6863 \u00b6 \u73b0\u5728\u8bbf\u95ee http://127.0.0.1:8000/docs \u3002 \u4f60\u4f1a\u770b\u5230\u81ea\u52a8\u751f\u6210\u7684\u4ea4\u4e92\u5f0f API \u6587\u6863\uff08\u7531 Swagger UI \u751f\u6210\uff09\uff1a \u53ef\u9009\u7684 API \u6587\u6863 \u00b6 \u8bbf\u95ee http://127.0.0.1:8000/redoc \u3002 \u4f60\u4f1a\u770b\u5230\u53e6\u4e00\u4e2a\u81ea\u52a8\u751f\u6210\u7684\u6587\u6863\uff08\u7531 ReDoc \u751f\u6210\uff09\uff1a \u793a\u4f8b\u5347\u7ea7 \u00b6 \u73b0\u5728\u4fee\u6539 main.py \u6587\u4ef6\u6765\u4ece PUT \u8bf7\u6c42\u4e2d\u63a5\u6536\u8bf7\u6c42\u4f53\u3002 \u6211\u4eec\u501f\u52a9 Pydantic \u6765\u4f7f\u7528\u6807\u51c6\u7684 Python \u7c7b\u578b\u58f0\u660e\u8bf7\u6c42\u4f53\u3002 from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float is_offer : Union [ bool , None ] = None @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } @app . put ( \"/items/ {item_id} \" ) def update_item ( item_id : int , item : Item ): return { \"item_name\" : item . name , \"item_id\" : item_id } \u670d\u52a1\u5668\u5c06\u4f1a\u81ea\u52a8\u91cd\u8f7d\uff08\u56e0\u4e3a\u5728\u4e0a\u9762\u7684\u6b65\u9aa4\u4e2d\u4f60\u5411 uvicorn \u547d\u4ee4\u6dfb\u52a0\u4e86 --reload \u9009\u9879\uff09\u3002 \u4ea4\u4e92\u5f0f API \u6587\u6863\u5347\u7ea7 \u00b6 \u8bbf\u95ee http://127.0.0.1:8000/docs \u3002 \u4ea4\u4e92\u5f0f API \u6587\u6863\u5c06\u4f1a\u81ea\u52a8\u66f4\u65b0\uff0c\u5e76\u52a0\u5165\u65b0\u7684\u8bf7\u6c42\u4f53\uff1a \u70b9\u51fb\u300cTry it out\u300d\u6309\u94ae\uff0c\u4e4b\u540e\u4f60\u53ef\u4ee5\u586b\u5199\u53c2\u6570\u5e76\u76f4\u63a5\u8c03\u7528 API\uff1a \u7136\u540e\u70b9\u51fb\u300cExecute\u300d\u6309\u94ae\uff0c\u7528\u6237\u754c\u9762\u5c06\u4f1a\u548c API \u8fdb\u884c\u901a\u4fe1\uff0c\u53d1\u9001\u53c2\u6570\uff0c\u83b7\u53d6\u7ed3\u679c\u5e76\u5728\u5c4f\u5e55\u4e0a\u5c55\u793a\uff1a \u53ef\u9009\u6587\u6863\u5347\u7ea7 \u00b6 \u8bbf\u95ee http://127.0.0.1:8000/redoc \u3002 \u53ef\u9009\u6587\u6863\u540c\u6837\u4f1a\u4f53\u73b0\u65b0\u52a0\u5165\u7684\u8bf7\u6c42\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\uff1a \u603b\u7ed3 \u00b6 \u603b\u7684\u6765\u8bf4\uff0c\u4f60\u5c31\u50cf\u58f0\u660e\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u4e00\u6837\u53ea\u58f0\u660e\u4e86 \u4e00\u6b21 \u8bf7\u6c42\u53c2\u6570\u3001\u8bf7\u6c42\u4f53\u7b49\u7684\u7c7b\u578b\u3002 \u4f60\u4f7f\u7528\u4e86\u6807\u51c6\u7684\u73b0\u4ee3 Python \u7c7b\u578b\u6765\u5b8c\u6210\u58f0\u660e\u3002 \u4f60\u4e0d\u9700\u8981\u53bb\u5b66\u4e60\u65b0\u7684\u8bed\u6cd5\u3001\u4e86\u89e3\u7279\u5b9a\u5e93\u7684\u65b9\u6cd5\u6216\u7c7b\uff0c\u7b49\u7b49\u3002 \u53ea\u9700\u8981\u4f7f\u7528\u6807\u51c6\u7684 Python 3.6 \u53ca\u66f4\u9ad8\u7248\u672c \u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u58f0\u660e int \u7c7b\u578b\uff1a item_id : int \u6216\u8005\u4e00\u4e2a\u66f4\u590d\u6742\u7684 Item \u6a21\u578b\uff1a item : Item ......\u5728\u8fdb\u884c\u4e00\u6b21\u58f0\u660e\u4e4b\u540e\uff0c\u4f60\u5c06\u83b7\u5f97\uff1a \u7f16\u8f91\u5668\u652f\u6301\uff0c\u5305\u62ec\uff1a \u81ea\u52a8\u8865\u5168 \u7c7b\u578b\u68c0\u67e5 \u6570\u636e\u6821\u9a8c\uff1a \u5728\u6821\u9a8c\u5931\u8d25\u65f6\u81ea\u52a8\u751f\u6210\u6e05\u6670\u7684\u9519\u8bef\u4fe1\u606f \u5bf9\u591a\u5c42\u5d4c\u5957\u7684 JSON \u5bf9\u8c61\u4f9d\u7136\u6267\u884c\u6821\u9a8c \u8f6c\u6362 \u6765\u81ea\u7f51\u7edc\u8bf7\u6c42\u7684\u8f93\u5165\u6570\u636e\u4e3a Python \u6570\u636e\u7c7b\u578b\u3002\u5305\u62ec\u4ee5\u4e0b\u6570\u636e\uff1a JSON \u8def\u5f84\u53c2\u6570 \u67e5\u8be2\u53c2\u6570 Cookies \u8bf7\u6c42\u5934 \u8868\u5355 \u6587\u4ef6 \u8f6c\u6362 \u8f93\u51fa\u7684\u6570\u636e\uff1a\u8f6c\u6362 Python \u6570\u636e\u7c7b\u578b\u4e3a\u4f9b\u7f51\u7edc\u4f20\u8f93\u7684 JSON \u6570\u636e\uff1a \u8f6c\u6362 Python \u57fa\u7840\u7c7b\u578b \uff08 str \u3001 int \u3001 float \u3001 bool \u3001 list \u7b49\uff09 datetime \u5bf9\u8c61 UUID \u5bf9\u8c61 \u6570\u636e\u5e93\u6a21\u578b ......\u4ee5\u53ca\u66f4\u591a\u5176\u4ed6\u7c7b\u578b \u81ea\u52a8\u751f\u6210\u7684\u4ea4\u4e92\u5f0f API \u6587\u6863\uff0c\u5305\u62ec\u4e24\u79cd\u53ef\u9009\u7684\u7528\u6237\u754c\u9762\uff1a Swagger UI ReDoc \u56de\u5230\u524d\u9762\u7684\u4ee3\u7801\u793a\u4f8b\uff0c FastAPI \u5c06\u4f1a\uff1a \u6821\u9a8c GET \u548c PUT \u8bf7\u6c42\u7684\u8def\u5f84\u4e2d\u662f\u5426\u542b\u6709 item_id \u3002 \u6821\u9a8c GET \u548c PUT \u8bf7\u6c42\u4e2d\u7684 item_id \u662f\u5426\u4e3a int \u7c7b\u578b\u3002 \u5982\u679c\u4e0d\u662f\uff0c\u5ba2\u6237\u7aef\u5c06\u4f1a\u6536\u5230\u6e05\u6670\u6709\u7528\u7684\u9519\u8bef\u4fe1\u606f\u3002 \u68c0\u67e5 GET \u8bf7\u6c42\u4e2d\u662f\u5426\u6709\u547d\u540d\u4e3a q \u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570\uff08\u6bd4\u5982 http://127.0.0.1:8000/items/foo?q=somequery \uff09\u3002 \u56e0\u4e3a q \u88ab\u58f0\u660e\u4e3a = None \uff0c\u6240\u4ee5\u5b83\u662f\u53ef\u9009\u7684\u3002 \u5982\u679c\u6ca1\u6709 None \u5b83\u5c06\u4f1a\u662f\u5fc5\u9700\u7684 (\u5982 PUT \u4f8b\u5b50\u4e2d\u7684\u8bf7\u6c42\u4f53)\u3002 \u5bf9\u4e8e\u8bbf\u95ee /items/{item_id} \u7684 PUT \u8bf7\u6c42\uff0c\u5c06\u8bf7\u6c42\u4f53\u8bfb\u53d6\u4e3a JSON \u5e76\uff1a \u68c0\u67e5\u662f\u5426\u6709\u5fc5\u9700\u5c5e\u6027 name \u5e76\u4e14\u503c\u4e3a str \u7c7b\u578b \u3002 \u68c0\u67e5\u662f\u5426\u6709\u5fc5\u9700\u5c5e\u6027 price \u5e76\u4e14\u503c\u4e3a float \u7c7b\u578b\u3002 \u68c0\u67e5\u662f\u5426\u6709\u53ef\u9009\u5c5e\u6027 is_offer \uff0c \u5982\u679c\u6709\u7684\u8bdd\u503c\u5e94\u8be5\u4e3a bool \u7c7b\u578b\u3002 \u4ee5\u4e0a\u8fc7\u7a0b\u5bf9\u4e8e\u591a\u5c42\u5d4c\u5957\u7684 JSON \u5bf9\u8c61\u540c\u6837\u4e5f\u4f1a\u6267\u884c \u81ea\u52a8\u5bf9 JSON \u8fdb\u884c\u8f6c\u6362\u6216\u8f6c\u6362\u6210 JSON\u3002 \u901a\u8fc7 OpenAPI \u6587\u6863\u6765\u8bb0\u5f55\u6240\u6709\u5185\u5bb9\uff0c\u53ef\u88ab\u7528\u4e8e\uff1a \u4ea4\u4e92\u5f0f\u6587\u6863\u7cfb\u7edf \u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u81ea\u52a8\u751f\u6210\u7cfb\u7edf \u76f4\u63a5\u63d0\u4f9b 2 \u79cd\u4ea4\u4e92\u5f0f\u6587\u6863 web \u754c\u9762\u3002 \u867d\u7136\u6211\u4eec\u624d\u521a\u521a\u5f00\u59cb\uff0c\u4f46\u5176\u5b9e\u4f60\u5df2\u7ecf\u4e86\u89e3\u4e86\u8fd9\u4e00\u5207\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u5c1d\u8bd5\u66f4\u6539\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\uff1a return { \"item_name\" : item . name , \"item_id\" : item_id } ......\u4ece\uff1a ... \"item_name\" : item . name ... ......\u6539\u4e3a\uff1a ... \"item_price\" : item . price ... ......\u6ce8\u610f\u89c2\u5bdf\u7f16\u8f91\u5668\u662f\u5982\u4f55\u81ea\u52a8\u8865\u5168\u5c5e\u6027\u5e76\u4e14\u8fd8\u77e5\u9053\u5b83\u4eec\u7684\u7c7b\u578b\uff1a \u6559\u7a0b - \u7528\u6237\u6307\u5357 \u4e2d\u6709\u5305\u542b\u66f4\u591a\u7279\u6027\u7684\u66f4\u5b8c\u6574\u793a\u4f8b\u3002 \u5267\u900f\u8b66\u544a \uff1a \u6559\u7a0b - \u7528\u6237\u6307\u5357\u4e2d\u7684\u5185\u5bb9\u6709\uff1a \u5bf9\u6765\u81ea\u4e0d\u540c\u5730\u65b9\u7684\u53c2\u6570\u8fdb\u884c\u58f0\u660e\uff0c\u5982\uff1a \u8bf7\u6c42\u5934 \u3001 cookies \u3001 form \u8868\u5355 \u4ee5\u53ca \u4e0a\u4f20\u7684\u6587\u4ef6 \u3002 \u5982\u4f55\u8bbe\u7f6e \u6821\u9a8c\u7ea6\u675f \u5982 maximum_length \u6216\u8005 regex \u3002 \u4e00\u4e2a\u5f3a\u5927\u5e76\u6613\u4e8e\u4f7f\u7528\u7684 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u3002 \u5b89\u5168\u6027\u548c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5305\u62ec\u901a\u8fc7 JWT \u4ee4\u724c \u548c HTTP \u57fa\u672c\u8eab\u4efd\u8ba4\u8bc1 \u6765\u652f\u6301 OAuth2 \u3002 \u66f4\u8fdb\u9636\uff08\u4f46\u540c\u6837\u7b80\u5355\uff09\u7684\u6280\u5de7\u6765\u58f0\u660e \u591a\u5c42\u5d4c\u5957 JSON \u6a21\u578b \uff08\u501f\u52a9 Pydantic\uff09\u3002 \u8bb8\u591a\u989d\u5916\u529f\u80fd\uff08\u5f52\u529f\u4e8e Starlette\uff09\u6bd4\u5982\uff1a WebSockets GraphQL \u57fa\u4e8e requests \u548c pytest \u7684\u6781\u5176\u7b80\u5355\u7684\u6d4b\u8bd5 CORS Cookie Sessions ......\u4ee5\u53ca\u66f4\u591a \u6027\u80fd \u00b6 \u72ec\u7acb\u673a\u6784 TechEmpower \u6240\u4f5c\u7684\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c\u663e\u793a\uff0c\u57fa\u4e8e Uvicorn \u8fd0\u884c\u7684 FastAPI \u7a0b\u5e8f\u662f \u6700\u5feb\u7684 Python web \u6846\u67b6\u4e4b\u4e00 \uff0c\u4ec5\u6b21\u4e8e Starlette \u548c Uvicorn \u672c\u8eab\uff08FastAPI \u5185\u90e8\u4f7f\u7528\u4e86\u5b83\u4eec\uff09\u3002(*) \u60f3\u4e86\u89e3\u66f4\u591a\uff0c\u8bf7\u67e5\u9605 \u57fa\u51c6\u6d4b\u8bd5 \u7ae0\u8282\u3002 \u53ef\u9009\u4f9d\u8d56 \u00b6 \u7528\u4e8e Pydantic\uff1a ujson - \u66f4\u5feb\u7684 JSON \u300c\u89e3\u6790\u300d \u3002 email_validator - \u7528\u4e8e email \u6821\u9a8c\u3002 \u7528\u4e8e Starlette\uff1a requests - \u4f7f\u7528 TestClient \u65f6\u5b89\u88c5\u3002 jinja2 - \u4f7f\u7528\u9ed8\u8ba4\u6a21\u677f\u914d\u7f6e\u65f6\u5b89\u88c5\u3002 python-multipart - \u9700\u8981\u901a\u8fc7 request.form() \u5bf9\u8868\u5355\u8fdb\u884c \u300c\u89e3\u6790\u300d \u65f6\u5b89\u88c5\u3002 itsdangerous - \u9700\u8981 SessionMiddleware \u652f\u6301\u65f6\u5b89\u88c5\u3002 pyyaml - \u4f7f\u7528 Starlette \u63d0\u4f9b\u7684 SchemaGenerator \u65f6\u5b89\u88c5\uff08\u6709 FastAPI \u4f60\u53ef\u80fd\u5e76\u4e0d\u9700\u8981\u5b83\uff09\u3002 graphene - \u9700\u8981 GraphQLApp \u652f\u6301\u65f6\u5b89\u88c5\u3002 ujson - \u4f7f\u7528 UJSONResponse \u65f6\u5b89\u88c5\u3002 \u7528\u4e8e FastAPI / Starlette\uff1a uvicorn - \u7528\u4e8e\u52a0\u8f7d\u548c\u8fd0\u884c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u670d\u52a1\u5668\u3002 orjson - \u4f7f\u7528 ORJSONResponse \u65f6\u5b89\u88c5\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7 pip install fastapi[all] \u547d\u4ee4\u6765\u5b89\u88c5\u4ee5\u4e0a\u6240\u6709\u4f9d\u8d56\u3002 \u8bb8\u53ef\u534f\u8bae \u00b6 \u8be5\u9879\u76ee\u9075\u5faa MIT \u8bb8\u53ef\u534f\u8bae\u3002","title":"FastAPI"},{"location":"#sponsors","text":"Other sponsors","title":"Sponsors"},{"location":"#_1","text":"\u300c [...] \u6700\u8fd1\u6211\u4e00\u76f4\u5728\u4f7f\u7528 FastAPI \u3002[...] \u5b9e\u9645\u4e0a\u6211\u6b63\u5728\u8ba1\u5212\u5c06\u5176\u7528\u4e8e\u6211\u6240\u5728\u7684 \u5fae\u8f6f \u56e2\u961f\u7684\u6240\u6709 \u673a\u5668\u5b66\u4e60\u670d\u52a1 \u3002\u5176\u4e2d\u4e00\u4e9b\u670d\u52a1\u6b63\u88ab\u96c6\u6210\u8fdb\u6838\u5fc3 Windows \u4ea7\u54c1\u548c\u4e00\u4e9b Office \u4ea7\u54c1\u3002 \u300d Kabir Khan - \u5fae\u8f6f (ref) \u300c \u6211\u4eec\u9009\u62e9\u4e86 FastAPI \u6765\u521b\u5efa\u7528\u4e8e\u83b7\u53d6 \u9884\u6d4b\u7ed3\u679c \u7684 REST \u670d\u52a1\u3002[\u7528\u4e8e Ludwig] \u300d Piero Molino\uff0cYaroslav Dudin \u548c Sai Sumanth Miryala - Uber (ref) \u300c Netflix \u975e\u5e38\u9ad8\u5174\u5730\u5ba3\u5e03\uff0c\u6b63\u5f0f\u5f00\u6e90\u6211\u4eec\u7684 \u5371\u673a\u7ba1\u7406 \u7f16\u6392\u6846\u67b6\uff1a Dispatch \uff01[\u4f7f\u7528 FastAPI \u6784\u5efa] \u300d Kevin Glisson\uff0cMarc Vilanova\uff0cForest Monsen - Netflix (ref) \u300c FastAPI \u8ba9\u6211\u5174\u594b\u7684\u6b23\u559c\u82e5\u72c2\u3002\u5b83\u592a\u68d2\u4e86\uff01 \u300d Brian Okken - Python Bytes \u64ad\u5ba2\u4e3b\u6301\u4eba (ref) \u300c \u8001\u5b9e\u8bf4\uff0c\u4f60\u7684\u4f5c\u54c1\u770b\u8d77\u6765\u975e\u5e38\u53ef\u9760\u548c\u4f18\u7f8e\u3002\u5728\u5f88\u591a\u65b9\u9762\uff0c\u8fd9\u5c31\u662f\u6211\u60f3\u8ba9 Hug \u6210\u4e3a\u7684\u6837\u5b50 - \u770b\u5230\u6709\u4eba\u5b9e\u73b0\u4e86\u5b83\u771f\u7684\u5f88\u9f13\u821e\u4eba\u5fc3\u3002 \u300d Timothy Crosley - Hug \u4f5c\u8005 (ref) \u300c \u5982\u679c\u4f60\u6b63\u6253\u7b97\u5b66\u4e60\u4e00\u4e2a \u73b0\u4ee3\u6846\u67b6 \u7528\u6765\u6784\u5efa REST API\uff0c\u6765\u770b\u4e0b FastAPI [...] \u5b83\u5feb\u901f\u3001\u6613\u7528\u4e14\u6613\u4e8e\u5b66\u4e60 [...] \u300d \u300c \u6211\u4eec\u5df2\u7ecf\u5c06 API \u670d\u52a1\u5207\u6362\u5230\u4e86 FastAPI [...] \u6211\u8ba4\u4e3a\u4f60\u4f1a\u559c\u6b22\u5b83\u7684 [...] \u300d Ines Montani - Matthew Honnibal - Explosion AI \u521b\u59cb\u4eba - spaCy \u4f5c\u8005 (ref) - (ref)","title":"\u8bc4\u4ef7"},{"location":"#typer-fastapi","text":"\u5982\u679c\u4f60\u6b63\u5728\u5f00\u53d1\u4e00\u4e2a\u5728\u7ec8\u7aef\u4e2d\u8fd0\u884c\u7684 \u547d\u4ee4\u884c \u5e94\u7528\u800c\u4e0d\u662f web API\uff0c\u4e0d\u59a8\u8bd5\u4e0b Typer \u3002 Typer \u662f FastAPI \u7684\u5c0f\u540c\u80de\u3002\u5b83\u60f3\u8981\u6210\u4e3a \u547d\u4ee4\u884c\u4e2d\u7684 FastAPI \u3002 \u2328\ufe0f \ud83d\ude80","title":"Typer\uff0c\u547d\u4ee4\u884c\u4e2d\u7684 FastAPI"},{"location":"#_2","text":"Python 3.6 \u53ca\u66f4\u9ad8\u7248\u672c FastAPI \u7ad9\u5728\u4ee5\u4e0b\u5de8\u4eba\u7684\u80a9\u8180\u4e4b\u4e0a\uff1a Starlette \u8d1f\u8d23 web \u90e8\u5206\u3002 Pydantic \u8d1f\u8d23\u6570\u636e\u90e8\u5206\u3002","title":"\u4f9d\u8d56"},{"location":"#_3","text":"$ pip install fastapi ---> 100% \u4f60\u8fd8\u4f1a\u9700\u8981\u4e00\u4e2a ASGI \u670d\u52a1\u5668\uff0c\u751f\u4ea7\u73af\u5883\u53ef\u4ee5\u4f7f\u7528 Uvicorn \u6216\u8005 Hypercorn \u3002 $ pip install uvicorn [ standard ] ---> 100%","title":"\u5b89\u88c5"},{"location":"#_4","text":"","title":"\u793a\u4f8b"},{"location":"#_5","text":"\u521b\u5efa\u4e00\u4e2a main.py \u6587\u4ef6\u5e76\u5199\u5165\u4ee5\u4e0b\u5185\u5bb9: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } \u6216\u8005\u4f7f\u7528 async def ... \u5982\u679c\u4f60\u7684\u4ee3\u7801\u91cc\u4f1a\u51fa\u73b0 async / await \uff0c\u8bf7\u4f7f\u7528 async def \uff1a from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } Note : \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u662f\u5426\u4f1a\u7528\u5230\uff0c\u53ef\u4ee5\u67e5\u770b\u6587\u6863\u7684 \"In a hurry?\" \u7ae0\u8282\u4e2d \u5173\u4e8e async \u548c await \u7684\u90e8\u5206 \u3002","title":"\u521b\u5efa"},{"location":"#_6","text":"\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\u670d\u52a1\u5668\uff1a $ uvicorn main:app --reload INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) INFO: Started reloader process [28720] INFO: Started server process [28722] INFO: Waiting for application startup. INFO: Application startup complete. \u5173\u4e8e uvicorn main:app --reload \u547d\u4ee4...... uvicorn main:app \u547d\u4ee4\u542b\u4e49\u5982\u4e0b: main \uff1a main.py \u6587\u4ef6\uff08\u4e00\u4e2a Python \"\u6a21\u5757\"\uff09\u3002 app \uff1a\u5728 main.py \u6587\u4ef6\u4e2d\u901a\u8fc7 app = FastAPI() \u521b\u5efa\u7684\u5bf9\u8c61\u3002 --reload \uff1a\u8ba9\u670d\u52a1\u5668\u5728\u66f4\u65b0\u4ee3\u7801\u540e\u91cd\u65b0\u542f\u52a8\u3002\u4ec5\u5728\u5f00\u53d1\u65f6\u4f7f\u7528\u8be5\u9009\u9879\u3002","title":"\u8fd0\u884c"},{"location":"#_7","text":"\u4f7f\u7528\u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000/items/5?q=somequery \u3002 \u4f60\u5c06\u4f1a\u770b\u5230\u5982\u4e0b JSON \u54cd\u5e94\uff1a { \"item_id\" : 5 , \"q\" : \"somequery\" } \u4f60\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u5177\u6709\u4ee5\u4e0b\u529f\u80fd\u7684 API\uff1a \u901a\u8fc7 \u8def\u5f84 / \u548c /items/{item_id} \u63a5\u53d7 HTTP \u8bf7\u6c42\u3002 \u4ee5\u4e0a \u8def\u5f84 \u90fd\u63a5\u53d7 GET \u64cd\u4f5c \uff08\u4e5f\u88ab\u79f0\u4e3a HTTP \u65b9\u6cd5 \uff09\u3002 /items/{item_id} \u8def\u5f84 \u6709\u4e00\u4e2a \u8def\u5f84\u53c2\u6570 item_id \u5e76\u4e14\u5e94\u8be5\u4e3a int \u7c7b\u578b\u3002 /items/{item_id} \u8def\u5f84 \u6709\u4e00\u4e2a\u53ef\u9009\u7684 str \u7c7b\u578b\u7684 \u67e5\u8be2\u53c2\u6570 q \u3002","title":"\u68c0\u67e5"},{"location":"#api","text":"\u73b0\u5728\u8bbf\u95ee http://127.0.0.1:8000/docs \u3002 \u4f60\u4f1a\u770b\u5230\u81ea\u52a8\u751f\u6210\u7684\u4ea4\u4e92\u5f0f API \u6587\u6863\uff08\u7531 Swagger UI \u751f\u6210\uff09\uff1a","title":"\u4ea4\u4e92\u5f0f API \u6587\u6863"},{"location":"#api_1","text":"\u8bbf\u95ee http://127.0.0.1:8000/redoc \u3002 \u4f60\u4f1a\u770b\u5230\u53e6\u4e00\u4e2a\u81ea\u52a8\u751f\u6210\u7684\u6587\u6863\uff08\u7531 ReDoc \u751f\u6210\uff09\uff1a","title":"\u53ef\u9009\u7684 API \u6587\u6863"},{"location":"#_8","text":"\u73b0\u5728\u4fee\u6539 main.py \u6587\u4ef6\u6765\u4ece PUT \u8bf7\u6c42\u4e2d\u63a5\u6536\u8bf7\u6c42\u4f53\u3002 \u6211\u4eec\u501f\u52a9 Pydantic \u6765\u4f7f\u7528\u6807\u51c6\u7684 Python \u7c7b\u578b\u58f0\u660e\u8bf7\u6c42\u4f53\u3002 from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float is_offer : Union [ bool , None ] = None @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } @app . put ( \"/items/ {item_id} \" ) def update_item ( item_id : int , item : Item ): return { \"item_name\" : item . name , \"item_id\" : item_id } \u670d\u52a1\u5668\u5c06\u4f1a\u81ea\u52a8\u91cd\u8f7d\uff08\u56e0\u4e3a\u5728\u4e0a\u9762\u7684\u6b65\u9aa4\u4e2d\u4f60\u5411 uvicorn \u547d\u4ee4\u6dfb\u52a0\u4e86 --reload \u9009\u9879\uff09\u3002","title":"\u793a\u4f8b\u5347\u7ea7"},{"location":"#api_2","text":"\u8bbf\u95ee http://127.0.0.1:8000/docs \u3002 \u4ea4\u4e92\u5f0f API \u6587\u6863\u5c06\u4f1a\u81ea\u52a8\u66f4\u65b0\uff0c\u5e76\u52a0\u5165\u65b0\u7684\u8bf7\u6c42\u4f53\uff1a \u70b9\u51fb\u300cTry it out\u300d\u6309\u94ae\uff0c\u4e4b\u540e\u4f60\u53ef\u4ee5\u586b\u5199\u53c2\u6570\u5e76\u76f4\u63a5\u8c03\u7528 API\uff1a \u7136\u540e\u70b9\u51fb\u300cExecute\u300d\u6309\u94ae\uff0c\u7528\u6237\u754c\u9762\u5c06\u4f1a\u548c API \u8fdb\u884c\u901a\u4fe1\uff0c\u53d1\u9001\u53c2\u6570\uff0c\u83b7\u53d6\u7ed3\u679c\u5e76\u5728\u5c4f\u5e55\u4e0a\u5c55\u793a\uff1a","title":"\u4ea4\u4e92\u5f0f API \u6587\u6863\u5347\u7ea7"},{"location":"#_9","text":"\u8bbf\u95ee http://127.0.0.1:8000/redoc \u3002 \u53ef\u9009\u6587\u6863\u540c\u6837\u4f1a\u4f53\u73b0\u65b0\u52a0\u5165\u7684\u8bf7\u6c42\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\uff1a","title":"\u53ef\u9009\u6587\u6863\u5347\u7ea7"},{"location":"#_10","text":"\u603b\u7684\u6765\u8bf4\uff0c\u4f60\u5c31\u50cf\u58f0\u660e\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u4e00\u6837\u53ea\u58f0\u660e\u4e86 \u4e00\u6b21 \u8bf7\u6c42\u53c2\u6570\u3001\u8bf7\u6c42\u4f53\u7b49\u7684\u7c7b\u578b\u3002 \u4f60\u4f7f\u7528\u4e86\u6807\u51c6\u7684\u73b0\u4ee3 Python \u7c7b\u578b\u6765\u5b8c\u6210\u58f0\u660e\u3002 \u4f60\u4e0d\u9700\u8981\u53bb\u5b66\u4e60\u65b0\u7684\u8bed\u6cd5\u3001\u4e86\u89e3\u7279\u5b9a\u5e93\u7684\u65b9\u6cd5\u6216\u7c7b\uff0c\u7b49\u7b49\u3002 \u53ea\u9700\u8981\u4f7f\u7528\u6807\u51c6\u7684 Python 3.6 \u53ca\u66f4\u9ad8\u7248\u672c \u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u58f0\u660e int \u7c7b\u578b\uff1a item_id : int \u6216\u8005\u4e00\u4e2a\u66f4\u590d\u6742\u7684 Item \u6a21\u578b\uff1a item : Item ......\u5728\u8fdb\u884c\u4e00\u6b21\u58f0\u660e\u4e4b\u540e\uff0c\u4f60\u5c06\u83b7\u5f97\uff1a \u7f16\u8f91\u5668\u652f\u6301\uff0c\u5305\u62ec\uff1a \u81ea\u52a8\u8865\u5168 \u7c7b\u578b\u68c0\u67e5 \u6570\u636e\u6821\u9a8c\uff1a \u5728\u6821\u9a8c\u5931\u8d25\u65f6\u81ea\u52a8\u751f\u6210\u6e05\u6670\u7684\u9519\u8bef\u4fe1\u606f \u5bf9\u591a\u5c42\u5d4c\u5957\u7684 JSON \u5bf9\u8c61\u4f9d\u7136\u6267\u884c\u6821\u9a8c \u8f6c\u6362 \u6765\u81ea\u7f51\u7edc\u8bf7\u6c42\u7684\u8f93\u5165\u6570\u636e\u4e3a Python \u6570\u636e\u7c7b\u578b\u3002\u5305\u62ec\u4ee5\u4e0b\u6570\u636e\uff1a JSON \u8def\u5f84\u53c2\u6570 \u67e5\u8be2\u53c2\u6570 Cookies \u8bf7\u6c42\u5934 \u8868\u5355 \u6587\u4ef6 \u8f6c\u6362 \u8f93\u51fa\u7684\u6570\u636e\uff1a\u8f6c\u6362 Python \u6570\u636e\u7c7b\u578b\u4e3a\u4f9b\u7f51\u7edc\u4f20\u8f93\u7684 JSON \u6570\u636e\uff1a \u8f6c\u6362 Python \u57fa\u7840\u7c7b\u578b \uff08 str \u3001 int \u3001 float \u3001 bool \u3001 list \u7b49\uff09 datetime \u5bf9\u8c61 UUID \u5bf9\u8c61 \u6570\u636e\u5e93\u6a21\u578b ......\u4ee5\u53ca\u66f4\u591a\u5176\u4ed6\u7c7b\u578b \u81ea\u52a8\u751f\u6210\u7684\u4ea4\u4e92\u5f0f API \u6587\u6863\uff0c\u5305\u62ec\u4e24\u79cd\u53ef\u9009\u7684\u7528\u6237\u754c\u9762\uff1a Swagger UI ReDoc \u56de\u5230\u524d\u9762\u7684\u4ee3\u7801\u793a\u4f8b\uff0c FastAPI \u5c06\u4f1a\uff1a \u6821\u9a8c GET \u548c PUT \u8bf7\u6c42\u7684\u8def\u5f84\u4e2d\u662f\u5426\u542b\u6709 item_id \u3002 \u6821\u9a8c GET \u548c PUT \u8bf7\u6c42\u4e2d\u7684 item_id \u662f\u5426\u4e3a int \u7c7b\u578b\u3002 \u5982\u679c\u4e0d\u662f\uff0c\u5ba2\u6237\u7aef\u5c06\u4f1a\u6536\u5230\u6e05\u6670\u6709\u7528\u7684\u9519\u8bef\u4fe1\u606f\u3002 \u68c0\u67e5 GET \u8bf7\u6c42\u4e2d\u662f\u5426\u6709\u547d\u540d\u4e3a q \u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570\uff08\u6bd4\u5982 http://127.0.0.1:8000/items/foo?q=somequery \uff09\u3002 \u56e0\u4e3a q \u88ab\u58f0\u660e\u4e3a = None \uff0c\u6240\u4ee5\u5b83\u662f\u53ef\u9009\u7684\u3002 \u5982\u679c\u6ca1\u6709 None \u5b83\u5c06\u4f1a\u662f\u5fc5\u9700\u7684 (\u5982 PUT \u4f8b\u5b50\u4e2d\u7684\u8bf7\u6c42\u4f53)\u3002 \u5bf9\u4e8e\u8bbf\u95ee /items/{item_id} \u7684 PUT \u8bf7\u6c42\uff0c\u5c06\u8bf7\u6c42\u4f53\u8bfb\u53d6\u4e3a JSON \u5e76\uff1a \u68c0\u67e5\u662f\u5426\u6709\u5fc5\u9700\u5c5e\u6027 name \u5e76\u4e14\u503c\u4e3a str \u7c7b\u578b \u3002 \u68c0\u67e5\u662f\u5426\u6709\u5fc5\u9700\u5c5e\u6027 price \u5e76\u4e14\u503c\u4e3a float \u7c7b\u578b\u3002 \u68c0\u67e5\u662f\u5426\u6709\u53ef\u9009\u5c5e\u6027 is_offer \uff0c \u5982\u679c\u6709\u7684\u8bdd\u503c\u5e94\u8be5\u4e3a bool \u7c7b\u578b\u3002 \u4ee5\u4e0a\u8fc7\u7a0b\u5bf9\u4e8e\u591a\u5c42\u5d4c\u5957\u7684 JSON \u5bf9\u8c61\u540c\u6837\u4e5f\u4f1a\u6267\u884c \u81ea\u52a8\u5bf9 JSON \u8fdb\u884c\u8f6c\u6362\u6216\u8f6c\u6362\u6210 JSON\u3002 \u901a\u8fc7 OpenAPI \u6587\u6863\u6765\u8bb0\u5f55\u6240\u6709\u5185\u5bb9\uff0c\u53ef\u88ab\u7528\u4e8e\uff1a \u4ea4\u4e92\u5f0f\u6587\u6863\u7cfb\u7edf \u8bb8\u591a\u7f16\u7a0b\u8bed\u8a00\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u81ea\u52a8\u751f\u6210\u7cfb\u7edf \u76f4\u63a5\u63d0\u4f9b 2 \u79cd\u4ea4\u4e92\u5f0f\u6587\u6863 web \u754c\u9762\u3002 \u867d\u7136\u6211\u4eec\u624d\u521a\u521a\u5f00\u59cb\uff0c\u4f46\u5176\u5b9e\u4f60\u5df2\u7ecf\u4e86\u89e3\u4e86\u8fd9\u4e00\u5207\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u5c1d\u8bd5\u66f4\u6539\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\uff1a return { \"item_name\" : item . name , \"item_id\" : item_id } ......\u4ece\uff1a ... \"item_name\" : item . name ... ......\u6539\u4e3a\uff1a ... \"item_price\" : item . price ... ......\u6ce8\u610f\u89c2\u5bdf\u7f16\u8f91\u5668\u662f\u5982\u4f55\u81ea\u52a8\u8865\u5168\u5c5e\u6027\u5e76\u4e14\u8fd8\u77e5\u9053\u5b83\u4eec\u7684\u7c7b\u578b\uff1a \u6559\u7a0b - \u7528\u6237\u6307\u5357 \u4e2d\u6709\u5305\u542b\u66f4\u591a\u7279\u6027\u7684\u66f4\u5b8c\u6574\u793a\u4f8b\u3002 \u5267\u900f\u8b66\u544a \uff1a \u6559\u7a0b - \u7528\u6237\u6307\u5357\u4e2d\u7684\u5185\u5bb9\u6709\uff1a \u5bf9\u6765\u81ea\u4e0d\u540c\u5730\u65b9\u7684\u53c2\u6570\u8fdb\u884c\u58f0\u660e\uff0c\u5982\uff1a \u8bf7\u6c42\u5934 \u3001 cookies \u3001 form \u8868\u5355 \u4ee5\u53ca \u4e0a\u4f20\u7684\u6587\u4ef6 \u3002 \u5982\u4f55\u8bbe\u7f6e \u6821\u9a8c\u7ea6\u675f \u5982 maximum_length \u6216\u8005 regex \u3002 \u4e00\u4e2a\u5f3a\u5927\u5e76\u6613\u4e8e\u4f7f\u7528\u7684 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u3002 \u5b89\u5168\u6027\u548c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5305\u62ec\u901a\u8fc7 JWT \u4ee4\u724c \u548c HTTP \u57fa\u672c\u8eab\u4efd\u8ba4\u8bc1 \u6765\u652f\u6301 OAuth2 \u3002 \u66f4\u8fdb\u9636\uff08\u4f46\u540c\u6837\u7b80\u5355\uff09\u7684\u6280\u5de7\u6765\u58f0\u660e \u591a\u5c42\u5d4c\u5957 JSON \u6a21\u578b \uff08\u501f\u52a9 Pydantic\uff09\u3002 \u8bb8\u591a\u989d\u5916\u529f\u80fd\uff08\u5f52\u529f\u4e8e Starlette\uff09\u6bd4\u5982\uff1a WebSockets GraphQL \u57fa\u4e8e requests \u548c pytest \u7684\u6781\u5176\u7b80\u5355\u7684\u6d4b\u8bd5 CORS Cookie Sessions ......\u4ee5\u53ca\u66f4\u591a","title":"\u603b\u7ed3"},{"location":"#_11","text":"\u72ec\u7acb\u673a\u6784 TechEmpower \u6240\u4f5c\u7684\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c\u663e\u793a\uff0c\u57fa\u4e8e Uvicorn \u8fd0\u884c\u7684 FastAPI \u7a0b\u5e8f\u662f \u6700\u5feb\u7684 Python web \u6846\u67b6\u4e4b\u4e00 \uff0c\u4ec5\u6b21\u4e8e Starlette \u548c Uvicorn \u672c\u8eab\uff08FastAPI \u5185\u90e8\u4f7f\u7528\u4e86\u5b83\u4eec\uff09\u3002(*) \u60f3\u4e86\u89e3\u66f4\u591a\uff0c\u8bf7\u67e5\u9605 \u57fa\u51c6\u6d4b\u8bd5 \u7ae0\u8282\u3002","title":"\u6027\u80fd"},{"location":"#_12","text":"\u7528\u4e8e Pydantic\uff1a ujson - \u66f4\u5feb\u7684 JSON \u300c\u89e3\u6790\u300d \u3002 email_validator - \u7528\u4e8e email \u6821\u9a8c\u3002 \u7528\u4e8e Starlette\uff1a requests - \u4f7f\u7528 TestClient \u65f6\u5b89\u88c5\u3002 jinja2 - \u4f7f\u7528\u9ed8\u8ba4\u6a21\u677f\u914d\u7f6e\u65f6\u5b89\u88c5\u3002 python-multipart - \u9700\u8981\u901a\u8fc7 request.form() \u5bf9\u8868\u5355\u8fdb\u884c \u300c\u89e3\u6790\u300d \u65f6\u5b89\u88c5\u3002 itsdangerous - \u9700\u8981 SessionMiddleware \u652f\u6301\u65f6\u5b89\u88c5\u3002 pyyaml - \u4f7f\u7528 Starlette \u63d0\u4f9b\u7684 SchemaGenerator \u65f6\u5b89\u88c5\uff08\u6709 FastAPI \u4f60\u53ef\u80fd\u5e76\u4e0d\u9700\u8981\u5b83\uff09\u3002 graphene - \u9700\u8981 GraphQLApp \u652f\u6301\u65f6\u5b89\u88c5\u3002 ujson - \u4f7f\u7528 UJSONResponse \u65f6\u5b89\u88c5\u3002 \u7528\u4e8e FastAPI / Starlette\uff1a uvicorn - \u7528\u4e8e\u52a0\u8f7d\u548c\u8fd0\u884c\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u670d\u52a1\u5668\u3002 orjson - \u4f7f\u7528 ORJSONResponse \u65f6\u5b89\u88c5\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7 pip install fastapi[all] \u547d\u4ee4\u6765\u5b89\u88c5\u4ee5\u4e0a\u6240\u6709\u4f9d\u8d56\u3002","title":"\u53ef\u9009\u4f9d\u8d56"},{"location":"#_13","text":"\u8be5\u9879\u76ee\u9075\u5faa MIT \u8bb8\u53ef\u534f\u8bae\u3002","title":"\u8bb8\u53ef\u534f\u8bae"},{"location":"alternatives/","text":"Alternatives, Inspiration and Comparisons \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . What inspired FastAPI , how it compares to other alternatives and what it learned from them. Intro \u00b6 FastAPI wouldn't exist if not for the previous work of others. There have been many tools created before that have helped inspire its creation. I have been avoiding the creation of a new framework for several years. First I tried to solve all the features covered by FastAPI using many different frameworks, plug-ins, and tools. But at some point, there was no other option than creating something that provided all these features, taking the best ideas from previous tools, and combining them in the best way possible, using language features that weren't even available before (Python 3.6+ type hints). Previous tools \u00b6 Django \u00b6 It's the most popular Python framework and is widely trusted. It is used to build systems like Instagram. It's relatively tightly coupled with relational databases (like MySQL or PostgreSQL), so, having a NoSQL database (like Couchbase, MongoDB, Cassandra, etc) as the main store engine is not very easy. It was created to generate the HTML in the backend, not to create APIs used by a modern frontend (like React, Vue.js and Angular) or by other systems (like IoT devices) communicating with it. Django REST Framework \u00b6 Django REST framework was created to be a flexible toolkit for building Web APIs using Django underneath, to improve its API capabilities. It is used by many companies including Mozilla, Red Hat and Eventbrite. It was one of the first examples of automatic API documentation , and this was specifically one of the first ideas that inspired \"the search for\" FastAPI . Note Django REST Framework was created by Tom Christie. The same creator of Starlette and Uvicorn, on which FastAPI is based. Inspired FastAPI to Have an automatic API documentation web user interface. Flask \u00b6 Flask is a \"microframework\", it doesn't include database integrations nor many of the things that come by default in Django. This simplicity and flexibility allow doing things like using NoSQL databases as the main data storage system. As it is very simple, it's relatively intuitive to learn, although the documentation gets somewhat technical at some points. It is also commonly used for other applications that don't necessarily need a database, user management, or any of the many features that come pre-built in Django. Although many of these features can be added with plug-ins. This decoupling of parts, and being a \"microframework\" that could be extended to cover exactly what is needed was a key feature that I wanted to keep. Given the simplicity of Flask, it seemed like a good match for building APIs. The next thing to find was a \"Django REST Framework\" for Flask. Inspired FastAPI to Be a micro-framework. Making it easy to mix and match the tools and parts needed. Have a simple and easy to use routing system. Requests \u00b6 FastAPI is not actually an alternative to Requests . Their scope is very different. It would actually be common to use Requests inside of a FastAPI application. But still, FastAPI got quite some inspiration from Requests. Requests is a library to interact with APIs (as a client), while FastAPI is a library to build APIs (as a server). They are, more or less, at opposite ends, complementing each other. Requests has a very simple and intuitive design, it's very easy to use, with sensible defaults. But at the same time, it's very powerful and customizable. That's why, as said in the official website: Requests is one of the most downloaded Python packages of all time The way you use it is very simple. For example, to do a GET request, you would write: response = requests . get ( \"http://example.com/some/url\" ) The FastAPI counterpart API path operation could look like: @app . get ( \"/some/url\" ) def read_url (): return { \"message\" : \"Hello World\" } See the similarities in requests.get(...) and @app.get(...) . Inspired FastAPI to Have a simple and intuitive API. Use HTTP method names (operations) directly, in a straightforward and intuitive way. Have sensible defaults, but powerful customizations. Swagger / OpenAPI \u00b6 The main feature I wanted from Django REST Framework was the automatic API documentation. Then I found that there was a standard to document APIs, using JSON (or YAML, an extension of JSON) called Swagger. And there was a web user interface for Swagger APIs already created. So, being able to generate Swagger documentation for an API would allow using this web user interface automatically. At some point, Swagger was given to the Linux Foundation, to be renamed OpenAPI. That's why when talking about version 2.0 it's common to say \"Swagger\", and for version 3+ \"OpenAPI\". Inspired FastAPI to Adopt and use an open standard for API specifications, instead of a custom schema. And integrate standards-based user interface tools: Swagger UI ReDoc These two were chosen for being fairly popular and stable, but doing a quick search, you could find dozens of additional alternative user interfaces for OpenAPI (that you can use with FastAPI ). Flask REST frameworks \u00b6 There are several Flask REST frameworks, but after investing the time and work into investigating them, I found that many are discontinued or abandoned, with several standing issues that made them unfit. Marshmallow \u00b6 One of the main features needed by API systems is data \" serialization \" which is taking data from the code (Python) and converting it into something that can be sent through the network. For example, converting an object containing data from a database into a JSON object. Converting datetime objects into strings, etc. Another big feature needed by APIs is data validation, making sure that the data is valid, given certain parameters. For example, that some field is an int , and not some random string. This is especially useful for incoming data. Without a data validation system, you would have to do all the checks by hand, in code. These features are what Marshmallow was built to provide. It is a great library, and I have used it a lot before. But it was created before there existed Python type hints. So, to define every schema you need to use specific utils and classes provided by Marshmallow. Inspired FastAPI to Use code to define \"schemas\" that provide data types and validation, automatically. Webargs \u00b6 Another big feature required by APIs is parsing data from incoming requests. Webargs is a tool that was made to provide that on top of several frameworks, including Flask. It uses Marshmallow underneath to do the data validation. And it was created by the same developers. It's a great tool and I have used it a lot too, before having FastAPI . Info Webargs was created by the same Marshmallow developers. Inspired FastAPI to Have automatic validation of incoming request data. APISpec \u00b6 Marshmallow and Webargs provide validation, parsing and serialization as plug-ins. But documentation is still missing. Then APISpec was created. It is a plug-in for many frameworks (and there's a plug-in for Starlette too). The way it works is that you write the definition of the schema using YAML format inside the docstring of each function handling a route. And it generates OpenAPI schemas. That's how it works in Flask, Starlette, Responder, etc. But then, we have again the problem of having a micro-syntax, inside of a Python string (a big YAML). The editor can't help much with that. And if we modify parameters or Marshmallow schemas and forget to also modify that YAML docstring, the generated schema would be obsolete. Info APISpec was created by the same Marshmallow developers. Inspired FastAPI to Support the open standard for APIs, OpenAPI. Flask-apispec \u00b6 It's a Flask plug-in, that ties together Webargs, Marshmallow and APISpec. It uses the information from Webargs and Marshmallow to automatically generate OpenAPI schemas, using APISpec. It's a great tool, very under-rated. It should be way more popular than many Flask plug-ins out there. It might be due to its documentation being too concise and abstract. This solved having to write YAML (another syntax) inside of Python docstrings. This combination of Flask, Flask-apispec with Marshmallow and Webargs was my favorite backend stack until building FastAPI . Using it led to the creation of several Flask full-stack generators. These are the main stack I (and several external teams) have been using up to now: https://github.com/tiangolo/full-stack https://github.com/tiangolo/full-stack-flask-couchbase https://github.com/tiangolo/full-stack-flask-couchdb And these same full-stack generators were the base of the FastAPI Project Generators . Info Flask-apispec was created by the same Marshmallow developers. Inspired FastAPI to Generate the OpenAPI schema automatically, from the same code that defines serialization and validation. NestJS (and Angular ) \u00b6 This isn't even Python, NestJS is a JavaScript (TypeScript) NodeJS framework inspired by Angular. It achieves something somewhat similar to what can be done with Flask-apispec. It has an integrated dependency injection system, inspired by Angular two. It requires pre-registering the \"injectables\" (like all the other dependency injection systems I know), so, it adds to the verbosity and code repetition. As the parameters are described with TypeScript types (similar to Python type hints), editor support is quite good. But as TypeScript data is not preserved after compilation to JavaScript, it cannot rely on the types to define validation, serialization and documentation at the same time. Due to this and some design decisions, to get validation, serialization and automatic schema generation, it's needed to add decorators in many places. So, it becomes quite verbose. It can't handle nested models very well. So, if the JSON body in the request is a JSON object that has inner fields that in turn are nested JSON objects, it cannot be properly documented and validated. Inspired FastAPI to Use Python types to have great editor support. Have a powerful dependency injection system. Find a way to minimize code repetition. Sanic \u00b6 It was one of the first extremely fast Python frameworks based on asyncio . It was made to be very similar to Flask. Technical Details It used uvloop instead of the default Python asyncio loop. That's what made it so fast. It clearly inspired Uvicorn and Starlette, that are currently faster than Sanic in open benchmarks. Inspired FastAPI to Find a way to have a crazy performance. That's why FastAPI is based on Starlette, as it is the fastest framework available (tested by third-party benchmarks). Falcon \u00b6 Falcon is another high performance Python framework, it is designed to be minimal, and work as the foundation of other frameworks like Hug. It is designed to have functions that receive two parameters, one \"request\" and one \"response\". Then you \"read\" parts from the request, and \"write\" parts to the response. Because of this design, it is not possible to declare request parameters and bodies with standard Python type hints as function parameters. So, data validation, serialization, and documentation, have to be done in code, not automatically. Or they have to be implemented as a framework on top of Falcon, like Hug. This same distinction happens in other frameworks that are inspired by Falcon's design, of having one request object and one response object as parameters. Inspired FastAPI to Find ways to get great performance. Along with Hug (as Hug is based on Falcon) inspired FastAPI to declare a response parameter in functions. Although in FastAPI it's optional, and is used mainly to set headers, cookies, and alternative status codes. Molten \u00b6 I discovered Molten in the first stages of building FastAPI . And it has quite similar ideas: Based on Python type hints. Validation and documentation from these types. Dependency Injection system. It doesn't use a data validation, serialization and documentation third-party library like Pydantic, it has its own. So, these data type definitions would not be reusable as easily. It requires a little bit more verbose configurations. And as it is based on WSGI (instead of ASGI), it is not designed to take advantage of the high-performance provided by tools like Uvicorn, Starlette and Sanic. The dependency injection system requires pre-registration of the dependencies and the dependencies are solved based on the declared types. So, it's not possible to declare more than one \"component\" that provides a certain type. Routes are declared in a single place, using functions declared in other places (instead of using decorators that can be placed right on top of the function that handles the endpoint). This is closer to how Django does it than to how Flask (and Starlette) does it. It separates in the code things that are relatively tightly coupled. Inspired FastAPI to Define extra validations for data types using the \"default\" value of model attributes. This improves editor support, and it was not available in Pydantic before. This actually inspired updating parts of Pydantic, to support the same validation declaration style (all this functionality is now already available in Pydantic). Hug \u00b6 Hug was one of the first frameworks to implement the declaration of API parameter types using Python type hints. This was a great idea that inspired other tools to do the same. It used custom types in its declarations instead of standard Python types, but it was still a huge step forward. It also was one of the first frameworks to generate a custom schema declaring the whole API in JSON. It was not based on a standard like OpenAPI and JSON Schema. So it wouldn't be straightforward to integrate it with other tools, like Swagger UI. But again, it was a very innovative idea. It has an interesting, uncommon feature: using the same framework, it's possible to create APIs and also CLIs. As it is based on the previous standard for synchronous Python web frameworks (WSGI), it can't handle Websockets and other things, although it still has high performance too. Info Hug was created by Timothy Crosley, the same creator of isort , a great tool to automatically sort imports in Python files. Ideas inspired in FastAPI Hug inspired parts of APIStar, and was one of the tools I found most promising, alongside APIStar. Hug helped inspiring FastAPI to use Python type hints to declare parameters, and to generate a schema defining the API automatically. Hug inspired FastAPI to declare a response parameter in functions to set headers and cookies. APIStar (<= 0.5) \u00b6 Right before deciding to build FastAPI I found APIStar server. It had almost everything I was looking for and had a great design. It was one of the first implementations of a framework using Python type hints to declare parameters and requests that I ever saw (before NestJS and Molten). I found it more or less at the same time as Hug. But APIStar used the OpenAPI standard. It had automatic data validation, data serialization and OpenAPI schema generation based on the same type hints in several places. Body schema definitions didn't use the same Python type hints like Pydantic, it was a bit more similar to Marshmallow, so, editor support wouldn't be as good, but still, APIStar was the best available option. It had the best performance benchmarks at the time (only surpassed by Starlette). At first, it didn't have an automatic API documentation web UI, but I knew I could add Swagger UI to it. It had a dependency injection system. It required pre-registration of components, as other tools discussed above. But still, it was a great feature. I was never able to use it in a full project, as it didn't have security integration, so, I couldn't replace all the features I was having with the full-stack generators based on Flask-apispec. I had in my backlog of projects to create a pull request adding that functionality. But then, the project's focus shifted. It was no longer an API web framework, as the creator needed to focus on Starlette. Now APIStar is a set of tools to validate OpenAPI specifications, not a web framework. Info APIStar was created by Tom Christie. The same guy that created: Django REST Framework Starlette (in which FastAPI is based) Uvicorn (used by Starlette and FastAPI ) Inspired FastAPI to Exist. The idea of declaring multiple things (data validation, serialization and documentation) with the same Python types, that at the same time provided great editor support, was something I considered a brilliant idea. And after searching for a long time for a similar framework and testing many different alternatives, APIStar was the best option available. Then APIStar stopped to exist as a server and Starlette was created, and was a new better foundation for such a system. That was the final inspiration to build FastAPI . I consider FastAPI a \"spiritual successor\" to APIStar, while improving and increasing the features, typing system, and other parts, based on the learnings from all these previous tools. Used by FastAPI \u00b6 Pydantic \u00b6 Pydantic is a library to define data validation, serialization and documentation (using JSON Schema) based on Python type hints. That makes it extremely intuitive. It is comparable to Marshmallow. Although it's faster than Marshmallow in benchmarks. And as it is based on the same Python type hints, the editor support is great. FastAPI uses it to Handle all the data validation, data serialization and automatic model documentation (based on JSON Schema). FastAPI then takes that JSON Schema data and puts it in OpenAPI, apart from all the other things it does. Starlette \u00b6 Starlette is a lightweight ASGI framework/toolkit, which is ideal for building high-performance asyncio services. It is very simple and intuitive. It's designed to be easily extensible, and have modular components. It has: Seriously impressive performance. WebSocket support. In-process background tasks. Startup and shutdown events. Test client built on requests. CORS, GZip, Static Files, Streaming responses. Session and Cookie support. 100% test coverage. 100% type annotated codebase. Few hard dependencies. Starlette is currently the fastest Python framework tested. Only surpassed by Uvicorn, which is not a framework, but a server. Starlette provides all the basic web microframework functionality. But it doesn't provide automatic data validation, serialization or documentation. That's one of the main things that FastAPI adds on top, all based on Python type hints (using Pydantic). That, plus the dependency injection system, security utilities, OpenAPI schema generation, etc. Technical Details ASGI is a new \"standard\" being developed by Django core team members. It is still not a \"Python standard\" (a PEP), although they are in the process of doing that. Nevertheless, it is already being used as a \"standard\" by several tools. This greatly improves interoperability, as you could switch Uvicorn for any other ASGI server (like Daphne or Hypercorn), or you could add ASGI compatible tools, like python-socketio . FastAPI uses it to Handle all the core web parts. Adding features on top. The class FastAPI itself inherits directly from the class Starlette . So, anything that you can do with Starlette, you can do it directly with FastAPI , as it is basically Starlette on steroids. Uvicorn \u00b6 Uvicorn is a lightning-fast ASGI server, built on uvloop and httptools. It is not a web framework, but a server. For example, it doesn't provide tools for routing by paths. That's something that a framework like Starlette (or FastAPI ) would provide on top. It is the recommended server for Starlette and FastAPI . FastAPI recommends it as The main web server to run FastAPI applications. You can combine it with Gunicorn, to have an asynchronous multi-process server. Check more details in the Deployment section. Benchmarks and speed \u00b6 To understand, compare, and see the difference between Uvicorn, Starlette and FastAPI, check the section about Benchmarks .","title":"Alternatives, Inspiration and Comparisons"},{"location":"alternatives/#alternatives-inspiration-and-comparisons","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . What inspired FastAPI , how it compares to other alternatives and what it learned from them.","title":"Alternatives, Inspiration and Comparisons"},{"location":"alternatives/#intro","text":"FastAPI wouldn't exist if not for the previous work of others. There have been many tools created before that have helped inspire its creation. I have been avoiding the creation of a new framework for several years. First I tried to solve all the features covered by FastAPI using many different frameworks, plug-ins, and tools. But at some point, there was no other option than creating something that provided all these features, taking the best ideas from previous tools, and combining them in the best way possible, using language features that weren't even available before (Python 3.6+ type hints).","title":"Intro"},{"location":"alternatives/#previous-tools","text":"","title":"Previous tools"},{"location":"alternatives/#django","text":"It's the most popular Python framework and is widely trusted. It is used to build systems like Instagram. It's relatively tightly coupled with relational databases (like MySQL or PostgreSQL), so, having a NoSQL database (like Couchbase, MongoDB, Cassandra, etc) as the main store engine is not very easy. It was created to generate the HTML in the backend, not to create APIs used by a modern frontend (like React, Vue.js and Angular) or by other systems (like IoT devices) communicating with it.","title":"Django"},{"location":"alternatives/#django-rest-framework","text":"Django REST framework was created to be a flexible toolkit for building Web APIs using Django underneath, to improve its API capabilities. It is used by many companies including Mozilla, Red Hat and Eventbrite. It was one of the first examples of automatic API documentation , and this was specifically one of the first ideas that inspired \"the search for\" FastAPI . Note Django REST Framework was created by Tom Christie. The same creator of Starlette and Uvicorn, on which FastAPI is based. Inspired FastAPI to Have an automatic API documentation web user interface.","title":"Django REST Framework"},{"location":"alternatives/#flask","text":"Flask is a \"microframework\", it doesn't include database integrations nor many of the things that come by default in Django. This simplicity and flexibility allow doing things like using NoSQL databases as the main data storage system. As it is very simple, it's relatively intuitive to learn, although the documentation gets somewhat technical at some points. It is also commonly used for other applications that don't necessarily need a database, user management, or any of the many features that come pre-built in Django. Although many of these features can be added with plug-ins. This decoupling of parts, and being a \"microframework\" that could be extended to cover exactly what is needed was a key feature that I wanted to keep. Given the simplicity of Flask, it seemed like a good match for building APIs. The next thing to find was a \"Django REST Framework\" for Flask. Inspired FastAPI to Be a micro-framework. Making it easy to mix and match the tools and parts needed. Have a simple and easy to use routing system.","title":"Flask"},{"location":"alternatives/#requests","text":"FastAPI is not actually an alternative to Requests . Their scope is very different. It would actually be common to use Requests inside of a FastAPI application. But still, FastAPI got quite some inspiration from Requests. Requests is a library to interact with APIs (as a client), while FastAPI is a library to build APIs (as a server). They are, more or less, at opposite ends, complementing each other. Requests has a very simple and intuitive design, it's very easy to use, with sensible defaults. But at the same time, it's very powerful and customizable. That's why, as said in the official website: Requests is one of the most downloaded Python packages of all time The way you use it is very simple. For example, to do a GET request, you would write: response = requests . get ( \"http://example.com/some/url\" ) The FastAPI counterpart API path operation could look like: @app . get ( \"/some/url\" ) def read_url (): return { \"message\" : \"Hello World\" } See the similarities in requests.get(...) and @app.get(...) . Inspired FastAPI to Have a simple and intuitive API. Use HTTP method names (operations) directly, in a straightforward and intuitive way. Have sensible defaults, but powerful customizations.","title":"Requests"},{"location":"alternatives/#swagger-openapi","text":"The main feature I wanted from Django REST Framework was the automatic API documentation. Then I found that there was a standard to document APIs, using JSON (or YAML, an extension of JSON) called Swagger. And there was a web user interface for Swagger APIs already created. So, being able to generate Swagger documentation for an API would allow using this web user interface automatically. At some point, Swagger was given to the Linux Foundation, to be renamed OpenAPI. That's why when talking about version 2.0 it's common to say \"Swagger\", and for version 3+ \"OpenAPI\". Inspired FastAPI to Adopt and use an open standard for API specifications, instead of a custom schema. And integrate standards-based user interface tools: Swagger UI ReDoc These two were chosen for being fairly popular and stable, but doing a quick search, you could find dozens of additional alternative user interfaces for OpenAPI (that you can use with FastAPI ).","title":"Swagger / OpenAPI"},{"location":"alternatives/#flask-rest-frameworks","text":"There are several Flask REST frameworks, but after investing the time and work into investigating them, I found that many are discontinued or abandoned, with several standing issues that made them unfit.","title":"Flask REST frameworks"},{"location":"alternatives/#marshmallow","text":"One of the main features needed by API systems is data \" serialization \" which is taking data from the code (Python) and converting it into something that can be sent through the network. For example, converting an object containing data from a database into a JSON object. Converting datetime objects into strings, etc. Another big feature needed by APIs is data validation, making sure that the data is valid, given certain parameters. For example, that some field is an int , and not some random string. This is especially useful for incoming data. Without a data validation system, you would have to do all the checks by hand, in code. These features are what Marshmallow was built to provide. It is a great library, and I have used it a lot before. But it was created before there existed Python type hints. So, to define every schema you need to use specific utils and classes provided by Marshmallow. Inspired FastAPI to Use code to define \"schemas\" that provide data types and validation, automatically.","title":"Marshmallow"},{"location":"alternatives/#webargs","text":"Another big feature required by APIs is parsing data from incoming requests. Webargs is a tool that was made to provide that on top of several frameworks, including Flask. It uses Marshmallow underneath to do the data validation. And it was created by the same developers. It's a great tool and I have used it a lot too, before having FastAPI . Info Webargs was created by the same Marshmallow developers. Inspired FastAPI to Have automatic validation of incoming request data.","title":"Webargs"},{"location":"alternatives/#apispec","text":"Marshmallow and Webargs provide validation, parsing and serialization as plug-ins. But documentation is still missing. Then APISpec was created. It is a plug-in for many frameworks (and there's a plug-in for Starlette too). The way it works is that you write the definition of the schema using YAML format inside the docstring of each function handling a route. And it generates OpenAPI schemas. That's how it works in Flask, Starlette, Responder, etc. But then, we have again the problem of having a micro-syntax, inside of a Python string (a big YAML). The editor can't help much with that. And if we modify parameters or Marshmallow schemas and forget to also modify that YAML docstring, the generated schema would be obsolete. Info APISpec was created by the same Marshmallow developers. Inspired FastAPI to Support the open standard for APIs, OpenAPI.","title":"APISpec"},{"location":"alternatives/#flask-apispec","text":"It's a Flask plug-in, that ties together Webargs, Marshmallow and APISpec. It uses the information from Webargs and Marshmallow to automatically generate OpenAPI schemas, using APISpec. It's a great tool, very under-rated. It should be way more popular than many Flask plug-ins out there. It might be due to its documentation being too concise and abstract. This solved having to write YAML (another syntax) inside of Python docstrings. This combination of Flask, Flask-apispec with Marshmallow and Webargs was my favorite backend stack until building FastAPI . Using it led to the creation of several Flask full-stack generators. These are the main stack I (and several external teams) have been using up to now: https://github.com/tiangolo/full-stack https://github.com/tiangolo/full-stack-flask-couchbase https://github.com/tiangolo/full-stack-flask-couchdb And these same full-stack generators were the base of the FastAPI Project Generators . Info Flask-apispec was created by the same Marshmallow developers. Inspired FastAPI to Generate the OpenAPI schema automatically, from the same code that defines serialization and validation.","title":"Flask-apispec"},{"location":"alternatives/#nestjs-and-angular","text":"This isn't even Python, NestJS is a JavaScript (TypeScript) NodeJS framework inspired by Angular. It achieves something somewhat similar to what can be done with Flask-apispec. It has an integrated dependency injection system, inspired by Angular two. It requires pre-registering the \"injectables\" (like all the other dependency injection systems I know), so, it adds to the verbosity and code repetition. As the parameters are described with TypeScript types (similar to Python type hints), editor support is quite good. But as TypeScript data is not preserved after compilation to JavaScript, it cannot rely on the types to define validation, serialization and documentation at the same time. Due to this and some design decisions, to get validation, serialization and automatic schema generation, it's needed to add decorators in many places. So, it becomes quite verbose. It can't handle nested models very well. So, if the JSON body in the request is a JSON object that has inner fields that in turn are nested JSON objects, it cannot be properly documented and validated. Inspired FastAPI to Use Python types to have great editor support. Have a powerful dependency injection system. Find a way to minimize code repetition.","title":"NestJS (and Angular)"},{"location":"alternatives/#sanic","text":"It was one of the first extremely fast Python frameworks based on asyncio . It was made to be very similar to Flask. Technical Details It used uvloop instead of the default Python asyncio loop. That's what made it so fast. It clearly inspired Uvicorn and Starlette, that are currently faster than Sanic in open benchmarks. Inspired FastAPI to Find a way to have a crazy performance. That's why FastAPI is based on Starlette, as it is the fastest framework available (tested by third-party benchmarks).","title":"Sanic"},{"location":"alternatives/#falcon","text":"Falcon is another high performance Python framework, it is designed to be minimal, and work as the foundation of other frameworks like Hug. It is designed to have functions that receive two parameters, one \"request\" and one \"response\". Then you \"read\" parts from the request, and \"write\" parts to the response. Because of this design, it is not possible to declare request parameters and bodies with standard Python type hints as function parameters. So, data validation, serialization, and documentation, have to be done in code, not automatically. Or they have to be implemented as a framework on top of Falcon, like Hug. This same distinction happens in other frameworks that are inspired by Falcon's design, of having one request object and one response object as parameters. Inspired FastAPI to Find ways to get great performance. Along with Hug (as Hug is based on Falcon) inspired FastAPI to declare a response parameter in functions. Although in FastAPI it's optional, and is used mainly to set headers, cookies, and alternative status codes.","title":"Falcon"},{"location":"alternatives/#molten","text":"I discovered Molten in the first stages of building FastAPI . And it has quite similar ideas: Based on Python type hints. Validation and documentation from these types. Dependency Injection system. It doesn't use a data validation, serialization and documentation third-party library like Pydantic, it has its own. So, these data type definitions would not be reusable as easily. It requires a little bit more verbose configurations. And as it is based on WSGI (instead of ASGI), it is not designed to take advantage of the high-performance provided by tools like Uvicorn, Starlette and Sanic. The dependency injection system requires pre-registration of the dependencies and the dependencies are solved based on the declared types. So, it's not possible to declare more than one \"component\" that provides a certain type. Routes are declared in a single place, using functions declared in other places (instead of using decorators that can be placed right on top of the function that handles the endpoint). This is closer to how Django does it than to how Flask (and Starlette) does it. It separates in the code things that are relatively tightly coupled. Inspired FastAPI to Define extra validations for data types using the \"default\" value of model attributes. This improves editor support, and it was not available in Pydantic before. This actually inspired updating parts of Pydantic, to support the same validation declaration style (all this functionality is now already available in Pydantic).","title":"Molten"},{"location":"alternatives/#hug","text":"Hug was one of the first frameworks to implement the declaration of API parameter types using Python type hints. This was a great idea that inspired other tools to do the same. It used custom types in its declarations instead of standard Python types, but it was still a huge step forward. It also was one of the first frameworks to generate a custom schema declaring the whole API in JSON. It was not based on a standard like OpenAPI and JSON Schema. So it wouldn't be straightforward to integrate it with other tools, like Swagger UI. But again, it was a very innovative idea. It has an interesting, uncommon feature: using the same framework, it's possible to create APIs and also CLIs. As it is based on the previous standard for synchronous Python web frameworks (WSGI), it can't handle Websockets and other things, although it still has high performance too. Info Hug was created by Timothy Crosley, the same creator of isort , a great tool to automatically sort imports in Python files. Ideas inspired in FastAPI Hug inspired parts of APIStar, and was one of the tools I found most promising, alongside APIStar. Hug helped inspiring FastAPI to use Python type hints to declare parameters, and to generate a schema defining the API automatically. Hug inspired FastAPI to declare a response parameter in functions to set headers and cookies.","title":"Hug"},{"location":"alternatives/#apistar-05","text":"Right before deciding to build FastAPI I found APIStar server. It had almost everything I was looking for and had a great design. It was one of the first implementations of a framework using Python type hints to declare parameters and requests that I ever saw (before NestJS and Molten). I found it more or less at the same time as Hug. But APIStar used the OpenAPI standard. It had automatic data validation, data serialization and OpenAPI schema generation based on the same type hints in several places. Body schema definitions didn't use the same Python type hints like Pydantic, it was a bit more similar to Marshmallow, so, editor support wouldn't be as good, but still, APIStar was the best available option. It had the best performance benchmarks at the time (only surpassed by Starlette). At first, it didn't have an automatic API documentation web UI, but I knew I could add Swagger UI to it. It had a dependency injection system. It required pre-registration of components, as other tools discussed above. But still, it was a great feature. I was never able to use it in a full project, as it didn't have security integration, so, I couldn't replace all the features I was having with the full-stack generators based on Flask-apispec. I had in my backlog of projects to create a pull request adding that functionality. But then, the project's focus shifted. It was no longer an API web framework, as the creator needed to focus on Starlette. Now APIStar is a set of tools to validate OpenAPI specifications, not a web framework. Info APIStar was created by Tom Christie. The same guy that created: Django REST Framework Starlette (in which FastAPI is based) Uvicorn (used by Starlette and FastAPI ) Inspired FastAPI to Exist. The idea of declaring multiple things (data validation, serialization and documentation) with the same Python types, that at the same time provided great editor support, was something I considered a brilliant idea. And after searching for a long time for a similar framework and testing many different alternatives, APIStar was the best option available. Then APIStar stopped to exist as a server and Starlette was created, and was a new better foundation for such a system. That was the final inspiration to build FastAPI . I consider FastAPI a \"spiritual successor\" to APIStar, while improving and increasing the features, typing system, and other parts, based on the learnings from all these previous tools.","title":"APIStar (&lt;= 0.5)"},{"location":"alternatives/#used-by-fastapi","text":"","title":"Used by FastAPI"},{"location":"alternatives/#pydantic","text":"Pydantic is a library to define data validation, serialization and documentation (using JSON Schema) based on Python type hints. That makes it extremely intuitive. It is comparable to Marshmallow. Although it's faster than Marshmallow in benchmarks. And as it is based on the same Python type hints, the editor support is great. FastAPI uses it to Handle all the data validation, data serialization and automatic model documentation (based on JSON Schema). FastAPI then takes that JSON Schema data and puts it in OpenAPI, apart from all the other things it does.","title":"Pydantic"},{"location":"alternatives/#starlette","text":"Starlette is a lightweight ASGI framework/toolkit, which is ideal for building high-performance asyncio services. It is very simple and intuitive. It's designed to be easily extensible, and have modular components. It has: Seriously impressive performance. WebSocket support. In-process background tasks. Startup and shutdown events. Test client built on requests. CORS, GZip, Static Files, Streaming responses. Session and Cookie support. 100% test coverage. 100% type annotated codebase. Few hard dependencies. Starlette is currently the fastest Python framework tested. Only surpassed by Uvicorn, which is not a framework, but a server. Starlette provides all the basic web microframework functionality. But it doesn't provide automatic data validation, serialization or documentation. That's one of the main things that FastAPI adds on top, all based on Python type hints (using Pydantic). That, plus the dependency injection system, security utilities, OpenAPI schema generation, etc. Technical Details ASGI is a new \"standard\" being developed by Django core team members. It is still not a \"Python standard\" (a PEP), although they are in the process of doing that. Nevertheless, it is already being used as a \"standard\" by several tools. This greatly improves interoperability, as you could switch Uvicorn for any other ASGI server (like Daphne or Hypercorn), or you could add ASGI compatible tools, like python-socketio . FastAPI uses it to Handle all the core web parts. Adding features on top. The class FastAPI itself inherits directly from the class Starlette . So, anything that you can do with Starlette, you can do it directly with FastAPI , as it is basically Starlette on steroids.","title":"Starlette"},{"location":"alternatives/#uvicorn","text":"Uvicorn is a lightning-fast ASGI server, built on uvloop and httptools. It is not a web framework, but a server. For example, it doesn't provide tools for routing by paths. That's something that a framework like Starlette (or FastAPI ) would provide on top. It is the recommended server for Starlette and FastAPI . FastAPI recommends it as The main web server to run FastAPI applications. You can combine it with Gunicorn, to have an asynchronous multi-process server. Check more details in the Deployment section.","title":"Uvicorn"},{"location":"alternatives/#benchmarks-and-speed","text":"To understand, compare, and see the difference between Uvicorn, Starlette and FastAPI, check the section about Benchmarks .","title":"Benchmarks and speed"},{"location":"async/","text":"Concurrency and async / await \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Details about the async def syntax for path operation functions and some background about asynchronous code, concurrency, and parallelism. In a hurry? \u00b6 TL;DR: If you are using third party libraries that tell you to call them with await , like: results = await some_library () Then, declare your path operation functions with async def like: @app . get ( '/' ) async def read_results (): results = await some_library () return results Note You can only use await inside of functions created with async def . If you are using a third party library that communicates with something (a database, an API, the file system, etc) and doesn't have support for using await , (this is currently the case for most database libraries), then declare your path operation functions as normally, with just def , like: @app . get ( '/' ) def results (): results = some_library () return results If your application (somehow) doesn't have to communicate with anything else and wait for it to respond, use async def . If you just don't know, use normal def . Note : you can mix def and async def in your path operation functions as much as you need and define each one using the best option for you. FastAPI will do the right thing with them. Anyway, in any of the cases above, FastAPI will still work asynchronously and be extremely fast. But by following the steps above, it will be able to do some performance optimizations. Technical Details \u00b6 Modern versions of Python have support for \"asynchronous code\" using something called \"coroutines\" , with async and await syntax. Let's see that phrase by parts in the sections below: Asynchronous Code async and await Coroutines Asynchronous Code \u00b6 Asynchronous code just means that the language \ud83d\udcac has a way to tell the computer / program \ud83e\udd16 that at some point in the code, it \ud83e\udd16 will have to wait for something else to finish somewhere else. Let's say that something else is called \"slow-file\" \ud83d\udcdd. So, during that time, the computer can go and do some other work, while \"slow-file\" \ud83d\udcdd finishes. Then the computer / program \ud83e\udd16 will come back every time it has a chance because it's waiting again, or whenever it \ud83e\udd16 finished all the work it had at that point. And it \ud83e\udd16 will see if any of the tasks it was waiting for have already finished, doing whatever it had to do. Next, it \ud83e\udd16 takes the first task to finish (let's say, our \"slow-file\" \ud83d\udcdd) and continues whatever it had to do with it. That \"wait for something else\" normally refers to I/O operations that are relatively \"slow\" (compared to the speed of the processor and the RAM memory), like waiting for: the data from the client to be sent through the network the data sent by your program to be received by the client through the network the contents of a file in the disk to be read by the system and given to your program the contents your program gave to the system to be written to disk a remote API operation a database operation to finish a database query to return the results etc. As the execution time is consumed mostly by waiting for I/O operations, they call them \"I/O bound\" operations. It's called \"asynchronous\" because the computer / program doesn't have to be \"synchronized\" with the slow task, waiting for the exact moment that the task finishes, while doing nothing, to be able to take the task result and continue the work. Instead of that, by being an \"asynchronous\" system, once finished, the task can wait in line a little bit (some microseconds) for the computer / program to finish whatever it went to do, and then come back to take the results and continue working with them. For \"synchronous\" (contrary to \"asynchronous\") they commonly also use the term \"sequential\", because the computer / program follows all the steps in sequence before switching to a different task, even if those steps involve waiting. Concurrency and Burgers \u00b6 This idea of asynchronous code described above is also sometimes called \"concurrency\" . It is different from \"parallelism\" . Concurrency and parallelism both relate to \"different things happening more or less at the same time\". But the details between concurrency and parallelism are quite different. To see the difference, imagine the following story about burgers: Concurrent Burgers \u00b6 You go with your crush \ud83d\ude0d to get fast food \ud83c\udf54, you stand in line while the cashier \ud83d\udc81 takes the orders from the people in front of you. Then it's your turn, you place your order of 2 very fancy burgers \ud83c\udf54 for your crush \ud83d\ude0d and you. You pay \ud83d\udcb8. The cashier \ud83d\udc81 says something to the cook in the kitchen \ud83d\udc68\u200d\ud83c\udf73 so they know they have to prepare your burgers \ud83c\udf54 (even though they are currently preparing the ones for the previous clients). The cashier \ud83d\udc81 gives you the number of your turn. While you are waiting, you go with your crush \ud83d\ude0d and pick a table, you sit and talk with your crush \ud83d\ude0d for a long time (as your burgers are very fancy and take some time to prepare \u2728\ud83c\udf54\u2728). As you are sitting at the table with your crush \ud83d\ude0d, while you wait for the burgers \ud83c\udf54, you can spend that time admiring how awesome, cute and smart your crush is \u2728\ud83d\ude0d\u2728. While waiting and talking to your crush \ud83d\ude0d, from time to time, you check the number displayed on the counter to see if it's your turn already. Then at some point, it finally is your turn. You go to the counter, get your burgers \ud83c\udf54 and come back to the table. You and your crush \ud83d\ude0d eat the burgers \ud83c\udf54 and have a nice time \u2728. Imagine you are the computer / program \ud83e\udd16 in that story. While you are at the line, you are just idle \ud83d\ude34, waiting for your turn, not doing anything very \"productive\". But the line is fast because the cashier \ud83d\udc81 is only taking the orders (not preparing them), so that's fine. Then, when it's your turn, you do actual \"productive\" work \ud83e\udd13, you process the menu, decide what you want, get your crush's \ud83d\ude0d choice, pay \ud83d\udcb8, check that you give the correct bill or card, check that you are charged correctly, check that the order has the correct items, etc. But then, even though you still don't have your burgers \ud83c\udf54, your work with the cashier \ud83d\udc81 is \"on pause\" \u23f8, because you have to wait \ud83d\udd59 for your burgers to be ready. But as you go away from the counter and sit at the table with a number for your turn, you can switch \ud83d\udd00 your attention to your crush \ud83d\ude0d, and \"work\" \u23ef \ud83e\udd13 on that. Then you are again doing something very \"productive\" \ud83e\udd13, as is flirting with your crush \ud83d\ude0d. Then the cashier \ud83d\udc81 says \"I'm finished with doing the burgers\" \ud83c\udf54 by putting your number on the counter's display, but you don't jump like crazy immediately when the displayed number changes to your turn number. You know no one will steal your burgers \ud83c\udf54 because you have the number of your turn, and they have theirs. So you wait for your crush \ud83d\ude0d to finish the story (finish the current work \u23ef / task being processed \ud83e\udd13), smile gently and say that you are going for the burgers \u23f8. Then you go to the counter \ud83d\udd00, to the initial task that is now finished \u23ef, pick the burgers \ud83c\udf54, say thanks and take them to the table. That finishes that step / task of interaction with the counter \u23f9. That in turn, creates a new task, of \"eating burgers\" \ud83d\udd00 \u23ef, but the previous one of \"getting burgers\" is finished \u23f9. Parallel Burgers \u00b6 Now let's imagine these aren't \"Concurrent Burgers\", but \"Parallel Burgers\". You go with your crush \ud83d\ude0d to get parallel fast food \ud83c\udf54. You stand in line while several (let's say 8) cashiers that at the same time are cooks \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73 take the orders from the people in front of you. Everyone before you is waiting \ud83d\udd59 for their burgers \ud83c\udf54 to be ready before leaving the counter because each of the 8 cashiers goes and prepares the burger right away before getting the next order. Then it's finally your turn, you place your order of 2 very fancy burgers \ud83c\udf54 for your crush \ud83d\ude0d and you. You pay \ud83d\udcb8. The cashier goes to the kitchen \ud83d\udc68\u200d\ud83c\udf73. You wait, standing in front of the counter \ud83d\udd59, so that no one else takes your burgers \ud83c\udf54 before you do, as there are no numbers for turns. As you and your crush \ud83d\ude0d are busy not letting anyone get in front of you and take your burgers whenever they arrive \ud83d\udd59, you cannot pay attention to your crush \ud83d\ude1e. This is \"synchronous\" work, you are \"synchronized\" with the cashier/cook \ud83d\udc68\u200d\ud83c\udf73. You have to wait \ud83d\udd59 and be there at the exact moment that the cashier/cook \ud83d\udc68\u200d\ud83c\udf73 finishes the burgers \ud83c\udf54 and gives them to you, or otherwise, someone else might take them. Then your cashier/cook \ud83d\udc68\u200d\ud83c\udf73 finally comes back with your burgers \ud83c\udf54, after a long time waiting \ud83d\udd59 there in front of the counter. You take your burgers \ud83c\udf54 and go to the table with your crush \ud83d\ude0d. You just eat them, and you are done \ud83c\udf54 \u23f9. There was not much talk or flirting as most of the time was spent waiting \ud83d\udd59 in front of the counter \ud83d\ude1e. In this scenario of the parallel burgers, you are a computer / program \ud83e\udd16 with two processors (you and your crush \ud83d\ude0d), both waiting \ud83d\udd59 and dedicating their attention \u23ef to be \"waiting on the counter\" \ud83d\udd59 for a long time. The fast food store has 8 processors (cashiers/cooks) \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73. While the concurrent burgers store might have had only 2 (one cashier and one cook) \ud83d\udc81 \ud83d\udc68\u200d\ud83c\udf73. But still, the final experience is not the best \ud83d\ude1e. This would be the parallel equivalent story for burgers \ud83c\udf54. For a more \"real life\" example of this, imagine a bank. Up to recently, most of the banks had multiple cashiers \ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc and a big line \ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59. All of the cashiers doing all the work with one client after the other \ud83d\udc68\u200d\ud83d\udcbc\u23ef. And you have to wait \ud83d\udd59 in the line for a long time or you lose your turn. You probably wouldn't want to take your crush \ud83d\ude0d with you to do errands at the bank \ud83c\udfe6. Burger Conclusion \u00b6 In this scenario of \"fast food burgers with your crush\", as there is a lot of waiting \ud83d\udd59, it makes a lot more sense to have a concurrent system \u23f8\ud83d\udd00\u23ef. This is the case for most of the web applications. Many, many users, but your server is waiting \ud83d\udd59 for their not-so-good connection to send their requests. And then waiting \ud83d\udd59 again for the responses to come back. This \"waiting\" \ud83d\udd59 is measured in microseconds, but still, summing it all, it's a lot of waiting in the end. That's why it makes a lot of sense to use asynchronous \u23f8\ud83d\udd00\u23ef code for web APIs. Most of the existing popular Python frameworks (including Flask and Django) were created before the new asynchronous features in Python existed. So, the ways they can be deployed support parallel execution and an older form of asynchronous execution that is not as powerful as the new capabilities. Even though the main specification for asynchronous web Python (ASGI) was developed at Django, to add support for WebSockets. That kind of asynchronicity is what made NodeJS popular (even though NodeJS is not parallel) and that's the strength of Go as a programming language. And that's the same level of performance you get with FastAPI . And as you can have parallelism and asynchronicity at the same time, you get higher performance than most of the tested NodeJS frameworks and on par with Go, which is a compiled language closer to C (all thanks to Starlette) . Is concurrency better than parallelism? \u00b6 Nope! That's not the moral of the story. Concurrency is different than parallelism. And it is better on specific scenarios that involve a lot of waiting. Because of that, it generally is a lot better than parallelism for web application development. But not for everything. So, to balance that out, imagine the following short story: You have to clean a big, dirty house. Yep, that's the whole story . There's no waiting \ud83d\udd59 anywhere, just a lot of work to be done, on multiple places of the house. You could have turns as in the burgers example, first the living room, then the kitchen, but as you are not waiting \ud83d\udd59 for anything, just cleaning and cleaning, the turns wouldn't affect anything. It would take the same amount of time to finish with or without turns (concurrency) and you would have done the same amount of work. But in this case, if you could bring the 8 ex-cashier/cooks/now-cleaners \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73, and each one of them (plus you) could take a zone of the house to clean it, you could do all the work in parallel , with the extra help, and finish much sooner. In this scenario, each one of the cleaners (including you) would be a processor, doing their part of the job. And as most of the execution time is taken by actual work (instead of waiting), and the work in a computer is done by a CPU , they call these problems \"CPU bound\". Common examples of CPU bound operations are things that require complex math processing. For example: Audio or image processing . Computer vision : an image is composed of millions of pixels, each pixel has 3 values / colors, processing that normally requires computing something on those pixels, all at the same time. Machine Learning : it normally requires lots of \"matrix\" and \"vector\" multiplications. Think of a huge spreadsheet with numbers and multiplying all of them together at the same time. Deep Learning : this is a sub-field of Machine Learning, so, the same applies. It's just that there is not a single spreadsheet of numbers to multiply, but a huge set of them, and in many cases, you use a special processor to build and / or use those models. Concurrency + Parallelism: Web + Machine Learning \u00b6 With FastAPI you can take the advantage of concurrency that is very common for web development (the same main attractive of NodeJS). But you can also exploit the benefits of parallelism and multiprocessing (having multiple processes running in parallel) for CPU bound workloads like those in Machine Learning systems. That, plus the simple fact that Python is the main language for Data Science , Machine Learning and especially Deep Learning, make FastAPI a very good match for Data Science / Machine Learning web APIs and applications (among many others). To see how to achieve this parallelism in production see the section about Deployment . async and await \u00b6 Modern versions of Python have a very intuitive way to define asynchronous code. This makes it look just like normal \"sequential\" code and do the \"awaiting\" for you at the right moments. When there is an operation that will require waiting before giving the results and has support for these new Python features, you can code it like: burgers = await get_burgers ( 2 ) The key here is the await . It tells Python that it has to wait \u23f8 for get_burgers(2) to finish doing its thing \ud83d\udd59 before storing the results in burgers . With that, Python will know that it can go and do something else \ud83d\udd00 \u23ef in the meanwhile (like receiving another request). For await to work, it has to be inside a function that supports this asynchronicity. To do that, you just declare it with async def : async def get_burgers ( number : int ): # Do some asynchronous stuff to create the burgers return burgers ...instead of def : # This is not asynchronous def get_sequential_burgers ( number : int ): # Do some sequential stuff to create the burgers return burgers With async def , Python knows that, inside that function, it has to be aware of await expressions, and that it can \"pause\" \u23f8 the execution of that function and go do something else \ud83d\udd00 before coming back. When you want to call an async def function, you have to \"await\" it. So, this won't work: # This won't work, because get_burgers was defined with: async def burgers = get_burgers ( 2 ) So, if you are using a library that tells you that you can call it with await , you need to create the path operation functions that uses it with async def , like in: @app . get ( '/burgers' ) async def read_burgers (): burgers = await get_burgers ( 2 ) return burgers More technical details \u00b6 You might have noticed that await can only be used inside of functions defined with async def . But at the same time, functions defined with async def have to be \"awaited\". So, functions with async def can only be called inside of functions defined with async def too. So, about the egg and the chicken, how do you call the first async function? If you are working with FastAPI you don't have to worry about that, because that \"first\" function will be your path operation function , and FastAPI will know how to do the right thing. But if you want to use async / await without FastAPI, you can do it as well. Write your own async code \u00b6 Starlette (and FastAPI ) are based on AnyIO , which makes it compatible with both Python's standard library asyncio and Trio . In particular, you can directly use AnyIO for your advanced concurrency use cases that require more advanced patterns in your own code. And even if you were not using FastAPI, you could also write your own async applications with AnyIO to be highly compatible and get its benefits (e.g. structured concurrency ). Other forms of asynchronous code \u00b6 This style of using async and await is relatively new in the language. But it makes working with asynchronous code a lot easier. This same syntax (or almost identical) was also included recently in modern versions of JavaScript (in Browser and NodeJS). But before that, handling asynchronous code was quite more complex and difficult. In previous versions of Python, you could have used threads or Gevent . But the code is way more complex to understand, debug, and think about. In previous versions of NodeJS / Browser JavaScript, you would have used \"callbacks\". Which leads to callback hell . Coroutines \u00b6 Coroutine is just the very fancy term for the thing returned by an async def function. Python knows that it is something like a function that it can start and that it will end at some point, but that it might be paused \u23f8 internally too, whenever there is an await inside of it. But all this functionality of using asynchronous code with async and await is many times summarized as using \"coroutines\". It is comparable to the main key feature of Go, the \"Goroutines\". Conclusion \u00b6 Let's see the same phrase from above: Modern versions of Python have support for \"asynchronous code\" using something called \"coroutines\" , with async and await syntax. That should make more sense now. \u2728 All that is what powers FastAPI (through Starlette) and what makes it have such an impressive performance. Very Technical Details \u00b6 Warning You can probably skip this. These are very technical details of how FastAPI works underneath. If you have quite some technical knowledge (co-routines, threads, blocking, etc) and are curious about how FastAPI handles async def vs normal def , go ahead. Path operation functions \u00b6 When you declare a path operation function with normal def instead of async def , it is run in an external threadpool that is then awaited, instead of being called directly (as it would block the server). If you are coming from another async framework that does not work in the way described above and you are used to define trivial compute-only path operation functions with plain def for a tiny performance gain (about 100 nanoseconds), please note that in FastAPI the effect would be quite opposite. In these cases, it's better to use async def unless your path operation functions use code that performs blocking I/O . Still, in both situations, chances are that FastAPI will still be faster than (or at least comparable to) your previous framework. Dependencies \u00b6 The same applies for dependencies. If a dependency is a standard def function instead of async def , it is run in the external threadpool. Sub-dependencies \u00b6 You can have multiple dependencies and sub-dependencies requiring each other (as parameters of the function definitions), some of them might be created with async def and some with normal def . It would still work, and the ones created with normal def would be called on an external thread (from the threadpool) instead of being \"awaited\". Other utility functions \u00b6 Any other utility function that you call directly can be created with normal def or async def and FastAPI won't affect the way you call it. This is in contrast to the functions that FastAPI calls for you: path operation functions and dependencies. If your utility function is a normal function with def , it will be called directly (as you write it in your code), not in a threadpool, if the function is created with async def then you should await for that function when you call it in your code. Again, these are very technical details that would probably be useful if you came searching for them. Otherwise, you should be good with the guidelines from the section above: In a hurry? .","title":"Concurrency and async / await"},{"location":"async/#concurrency-and-async-await","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Details about the async def syntax for path operation functions and some background about asynchronous code, concurrency, and parallelism.","title":"Concurrency and async / await"},{"location":"async/#in-a-hurry","text":"TL;DR: If you are using third party libraries that tell you to call them with await , like: results = await some_library () Then, declare your path operation functions with async def like: @app . get ( '/' ) async def read_results (): results = await some_library () return results Note You can only use await inside of functions created with async def . If you are using a third party library that communicates with something (a database, an API, the file system, etc) and doesn't have support for using await , (this is currently the case for most database libraries), then declare your path operation functions as normally, with just def , like: @app . get ( '/' ) def results (): results = some_library () return results If your application (somehow) doesn't have to communicate with anything else and wait for it to respond, use async def . If you just don't know, use normal def . Note : you can mix def and async def in your path operation functions as much as you need and define each one using the best option for you. FastAPI will do the right thing with them. Anyway, in any of the cases above, FastAPI will still work asynchronously and be extremely fast. But by following the steps above, it will be able to do some performance optimizations.","title":"In a hurry?"},{"location":"async/#technical-details","text":"Modern versions of Python have support for \"asynchronous code\" using something called \"coroutines\" , with async and await syntax. Let's see that phrase by parts in the sections below: Asynchronous Code async and await Coroutines","title":"Technical Details"},{"location":"async/#asynchronous-code","text":"Asynchronous code just means that the language \ud83d\udcac has a way to tell the computer / program \ud83e\udd16 that at some point in the code, it \ud83e\udd16 will have to wait for something else to finish somewhere else. Let's say that something else is called \"slow-file\" \ud83d\udcdd. So, during that time, the computer can go and do some other work, while \"slow-file\" \ud83d\udcdd finishes. Then the computer / program \ud83e\udd16 will come back every time it has a chance because it's waiting again, or whenever it \ud83e\udd16 finished all the work it had at that point. And it \ud83e\udd16 will see if any of the tasks it was waiting for have already finished, doing whatever it had to do. Next, it \ud83e\udd16 takes the first task to finish (let's say, our \"slow-file\" \ud83d\udcdd) and continues whatever it had to do with it. That \"wait for something else\" normally refers to I/O operations that are relatively \"slow\" (compared to the speed of the processor and the RAM memory), like waiting for: the data from the client to be sent through the network the data sent by your program to be received by the client through the network the contents of a file in the disk to be read by the system and given to your program the contents your program gave to the system to be written to disk a remote API operation a database operation to finish a database query to return the results etc. As the execution time is consumed mostly by waiting for I/O operations, they call them \"I/O bound\" operations. It's called \"asynchronous\" because the computer / program doesn't have to be \"synchronized\" with the slow task, waiting for the exact moment that the task finishes, while doing nothing, to be able to take the task result and continue the work. Instead of that, by being an \"asynchronous\" system, once finished, the task can wait in line a little bit (some microseconds) for the computer / program to finish whatever it went to do, and then come back to take the results and continue working with them. For \"synchronous\" (contrary to \"asynchronous\") they commonly also use the term \"sequential\", because the computer / program follows all the steps in sequence before switching to a different task, even if those steps involve waiting.","title":"Asynchronous Code"},{"location":"async/#concurrency-and-burgers","text":"This idea of asynchronous code described above is also sometimes called \"concurrency\" . It is different from \"parallelism\" . Concurrency and parallelism both relate to \"different things happening more or less at the same time\". But the details between concurrency and parallelism are quite different. To see the difference, imagine the following story about burgers:","title":"Concurrency and Burgers"},{"location":"async/#concurrent-burgers","text":"You go with your crush \ud83d\ude0d to get fast food \ud83c\udf54, you stand in line while the cashier \ud83d\udc81 takes the orders from the people in front of you. Then it's your turn, you place your order of 2 very fancy burgers \ud83c\udf54 for your crush \ud83d\ude0d and you. You pay \ud83d\udcb8. The cashier \ud83d\udc81 says something to the cook in the kitchen \ud83d\udc68\u200d\ud83c\udf73 so they know they have to prepare your burgers \ud83c\udf54 (even though they are currently preparing the ones for the previous clients). The cashier \ud83d\udc81 gives you the number of your turn. While you are waiting, you go with your crush \ud83d\ude0d and pick a table, you sit and talk with your crush \ud83d\ude0d for a long time (as your burgers are very fancy and take some time to prepare \u2728\ud83c\udf54\u2728). As you are sitting at the table with your crush \ud83d\ude0d, while you wait for the burgers \ud83c\udf54, you can spend that time admiring how awesome, cute and smart your crush is \u2728\ud83d\ude0d\u2728. While waiting and talking to your crush \ud83d\ude0d, from time to time, you check the number displayed on the counter to see if it's your turn already. Then at some point, it finally is your turn. You go to the counter, get your burgers \ud83c\udf54 and come back to the table. You and your crush \ud83d\ude0d eat the burgers \ud83c\udf54 and have a nice time \u2728. Imagine you are the computer / program \ud83e\udd16 in that story. While you are at the line, you are just idle \ud83d\ude34, waiting for your turn, not doing anything very \"productive\". But the line is fast because the cashier \ud83d\udc81 is only taking the orders (not preparing them), so that's fine. Then, when it's your turn, you do actual \"productive\" work \ud83e\udd13, you process the menu, decide what you want, get your crush's \ud83d\ude0d choice, pay \ud83d\udcb8, check that you give the correct bill or card, check that you are charged correctly, check that the order has the correct items, etc. But then, even though you still don't have your burgers \ud83c\udf54, your work with the cashier \ud83d\udc81 is \"on pause\" \u23f8, because you have to wait \ud83d\udd59 for your burgers to be ready. But as you go away from the counter and sit at the table with a number for your turn, you can switch \ud83d\udd00 your attention to your crush \ud83d\ude0d, and \"work\" \u23ef \ud83e\udd13 on that. Then you are again doing something very \"productive\" \ud83e\udd13, as is flirting with your crush \ud83d\ude0d. Then the cashier \ud83d\udc81 says \"I'm finished with doing the burgers\" \ud83c\udf54 by putting your number on the counter's display, but you don't jump like crazy immediately when the displayed number changes to your turn number. You know no one will steal your burgers \ud83c\udf54 because you have the number of your turn, and they have theirs. So you wait for your crush \ud83d\ude0d to finish the story (finish the current work \u23ef / task being processed \ud83e\udd13), smile gently and say that you are going for the burgers \u23f8. Then you go to the counter \ud83d\udd00, to the initial task that is now finished \u23ef, pick the burgers \ud83c\udf54, say thanks and take them to the table. That finishes that step / task of interaction with the counter \u23f9. That in turn, creates a new task, of \"eating burgers\" \ud83d\udd00 \u23ef, but the previous one of \"getting burgers\" is finished \u23f9.","title":"Concurrent Burgers"},{"location":"async/#parallel-burgers","text":"Now let's imagine these aren't \"Concurrent Burgers\", but \"Parallel Burgers\". You go with your crush \ud83d\ude0d to get parallel fast food \ud83c\udf54. You stand in line while several (let's say 8) cashiers that at the same time are cooks \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73 take the orders from the people in front of you. Everyone before you is waiting \ud83d\udd59 for their burgers \ud83c\udf54 to be ready before leaving the counter because each of the 8 cashiers goes and prepares the burger right away before getting the next order. Then it's finally your turn, you place your order of 2 very fancy burgers \ud83c\udf54 for your crush \ud83d\ude0d and you. You pay \ud83d\udcb8. The cashier goes to the kitchen \ud83d\udc68\u200d\ud83c\udf73. You wait, standing in front of the counter \ud83d\udd59, so that no one else takes your burgers \ud83c\udf54 before you do, as there are no numbers for turns. As you and your crush \ud83d\ude0d are busy not letting anyone get in front of you and take your burgers whenever they arrive \ud83d\udd59, you cannot pay attention to your crush \ud83d\ude1e. This is \"synchronous\" work, you are \"synchronized\" with the cashier/cook \ud83d\udc68\u200d\ud83c\udf73. You have to wait \ud83d\udd59 and be there at the exact moment that the cashier/cook \ud83d\udc68\u200d\ud83c\udf73 finishes the burgers \ud83c\udf54 and gives them to you, or otherwise, someone else might take them. Then your cashier/cook \ud83d\udc68\u200d\ud83c\udf73 finally comes back with your burgers \ud83c\udf54, after a long time waiting \ud83d\udd59 there in front of the counter. You take your burgers \ud83c\udf54 and go to the table with your crush \ud83d\ude0d. You just eat them, and you are done \ud83c\udf54 \u23f9. There was not much talk or flirting as most of the time was spent waiting \ud83d\udd59 in front of the counter \ud83d\ude1e. In this scenario of the parallel burgers, you are a computer / program \ud83e\udd16 with two processors (you and your crush \ud83d\ude0d), both waiting \ud83d\udd59 and dedicating their attention \u23ef to be \"waiting on the counter\" \ud83d\udd59 for a long time. The fast food store has 8 processors (cashiers/cooks) \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73. While the concurrent burgers store might have had only 2 (one cashier and one cook) \ud83d\udc81 \ud83d\udc68\u200d\ud83c\udf73. But still, the final experience is not the best \ud83d\ude1e. This would be the parallel equivalent story for burgers \ud83c\udf54. For a more \"real life\" example of this, imagine a bank. Up to recently, most of the banks had multiple cashiers \ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc and a big line \ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59. All of the cashiers doing all the work with one client after the other \ud83d\udc68\u200d\ud83d\udcbc\u23ef. And you have to wait \ud83d\udd59 in the line for a long time or you lose your turn. You probably wouldn't want to take your crush \ud83d\ude0d with you to do errands at the bank \ud83c\udfe6.","title":"Parallel Burgers"},{"location":"async/#burger-conclusion","text":"In this scenario of \"fast food burgers with your crush\", as there is a lot of waiting \ud83d\udd59, it makes a lot more sense to have a concurrent system \u23f8\ud83d\udd00\u23ef. This is the case for most of the web applications. Many, many users, but your server is waiting \ud83d\udd59 for their not-so-good connection to send their requests. And then waiting \ud83d\udd59 again for the responses to come back. This \"waiting\" \ud83d\udd59 is measured in microseconds, but still, summing it all, it's a lot of waiting in the end. That's why it makes a lot of sense to use asynchronous \u23f8\ud83d\udd00\u23ef code for web APIs. Most of the existing popular Python frameworks (including Flask and Django) were created before the new asynchronous features in Python existed. So, the ways they can be deployed support parallel execution and an older form of asynchronous execution that is not as powerful as the new capabilities. Even though the main specification for asynchronous web Python (ASGI) was developed at Django, to add support for WebSockets. That kind of asynchronicity is what made NodeJS popular (even though NodeJS is not parallel) and that's the strength of Go as a programming language. And that's the same level of performance you get with FastAPI . And as you can have parallelism and asynchronicity at the same time, you get higher performance than most of the tested NodeJS frameworks and on par with Go, which is a compiled language closer to C (all thanks to Starlette) .","title":"Burger Conclusion"},{"location":"async/#is-concurrency-better-than-parallelism","text":"Nope! That's not the moral of the story. Concurrency is different than parallelism. And it is better on specific scenarios that involve a lot of waiting. Because of that, it generally is a lot better than parallelism for web application development. But not for everything. So, to balance that out, imagine the following short story: You have to clean a big, dirty house. Yep, that's the whole story . There's no waiting \ud83d\udd59 anywhere, just a lot of work to be done, on multiple places of the house. You could have turns as in the burgers example, first the living room, then the kitchen, but as you are not waiting \ud83d\udd59 for anything, just cleaning and cleaning, the turns wouldn't affect anything. It would take the same amount of time to finish with or without turns (concurrency) and you would have done the same amount of work. But in this case, if you could bring the 8 ex-cashier/cooks/now-cleaners \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73, and each one of them (plus you) could take a zone of the house to clean it, you could do all the work in parallel , with the extra help, and finish much sooner. In this scenario, each one of the cleaners (including you) would be a processor, doing their part of the job. And as most of the execution time is taken by actual work (instead of waiting), and the work in a computer is done by a CPU , they call these problems \"CPU bound\". Common examples of CPU bound operations are things that require complex math processing. For example: Audio or image processing . Computer vision : an image is composed of millions of pixels, each pixel has 3 values / colors, processing that normally requires computing something on those pixels, all at the same time. Machine Learning : it normally requires lots of \"matrix\" and \"vector\" multiplications. Think of a huge spreadsheet with numbers and multiplying all of them together at the same time. Deep Learning : this is a sub-field of Machine Learning, so, the same applies. It's just that there is not a single spreadsheet of numbers to multiply, but a huge set of them, and in many cases, you use a special processor to build and / or use those models.","title":"Is concurrency better than parallelism?"},{"location":"async/#concurrency-parallelism-web-machine-learning","text":"With FastAPI you can take the advantage of concurrency that is very common for web development (the same main attractive of NodeJS). But you can also exploit the benefits of parallelism and multiprocessing (having multiple processes running in parallel) for CPU bound workloads like those in Machine Learning systems. That, plus the simple fact that Python is the main language for Data Science , Machine Learning and especially Deep Learning, make FastAPI a very good match for Data Science / Machine Learning web APIs and applications (among many others). To see how to achieve this parallelism in production see the section about Deployment .","title":"Concurrency + Parallelism: Web + Machine Learning"},{"location":"async/#async-and-await","text":"Modern versions of Python have a very intuitive way to define asynchronous code. This makes it look just like normal \"sequential\" code and do the \"awaiting\" for you at the right moments. When there is an operation that will require waiting before giving the results and has support for these new Python features, you can code it like: burgers = await get_burgers ( 2 ) The key here is the await . It tells Python that it has to wait \u23f8 for get_burgers(2) to finish doing its thing \ud83d\udd59 before storing the results in burgers . With that, Python will know that it can go and do something else \ud83d\udd00 \u23ef in the meanwhile (like receiving another request). For await to work, it has to be inside a function that supports this asynchronicity. To do that, you just declare it with async def : async def get_burgers ( number : int ): # Do some asynchronous stuff to create the burgers return burgers ...instead of def : # This is not asynchronous def get_sequential_burgers ( number : int ): # Do some sequential stuff to create the burgers return burgers With async def , Python knows that, inside that function, it has to be aware of await expressions, and that it can \"pause\" \u23f8 the execution of that function and go do something else \ud83d\udd00 before coming back. When you want to call an async def function, you have to \"await\" it. So, this won't work: # This won't work, because get_burgers was defined with: async def burgers = get_burgers ( 2 ) So, if you are using a library that tells you that you can call it with await , you need to create the path operation functions that uses it with async def , like in: @app . get ( '/burgers' ) async def read_burgers (): burgers = await get_burgers ( 2 ) return burgers","title":"async and await"},{"location":"async/#more-technical-details","text":"You might have noticed that await can only be used inside of functions defined with async def . But at the same time, functions defined with async def have to be \"awaited\". So, functions with async def can only be called inside of functions defined with async def too. So, about the egg and the chicken, how do you call the first async function? If you are working with FastAPI you don't have to worry about that, because that \"first\" function will be your path operation function , and FastAPI will know how to do the right thing. But if you want to use async / await without FastAPI, you can do it as well.","title":"More technical details"},{"location":"async/#write-your-own-async-code","text":"Starlette (and FastAPI ) are based on AnyIO , which makes it compatible with both Python's standard library asyncio and Trio . In particular, you can directly use AnyIO for your advanced concurrency use cases that require more advanced patterns in your own code. And even if you were not using FastAPI, you could also write your own async applications with AnyIO to be highly compatible and get its benefits (e.g. structured concurrency ).","title":"Write your own async code"},{"location":"async/#other-forms-of-asynchronous-code","text":"This style of using async and await is relatively new in the language. But it makes working with asynchronous code a lot easier. This same syntax (or almost identical) was also included recently in modern versions of JavaScript (in Browser and NodeJS). But before that, handling asynchronous code was quite more complex and difficult. In previous versions of Python, you could have used threads or Gevent . But the code is way more complex to understand, debug, and think about. In previous versions of NodeJS / Browser JavaScript, you would have used \"callbacks\". Which leads to callback hell .","title":"Other forms of asynchronous code"},{"location":"async/#coroutines","text":"Coroutine is just the very fancy term for the thing returned by an async def function. Python knows that it is something like a function that it can start and that it will end at some point, but that it might be paused \u23f8 internally too, whenever there is an await inside of it. But all this functionality of using asynchronous code with async and await is many times summarized as using \"coroutines\". It is comparable to the main key feature of Go, the \"Goroutines\".","title":"Coroutines"},{"location":"async/#conclusion","text":"Let's see the same phrase from above: Modern versions of Python have support for \"asynchronous code\" using something called \"coroutines\" , with async and await syntax. That should make more sense now. \u2728 All that is what powers FastAPI (through Starlette) and what makes it have such an impressive performance.","title":"Conclusion"},{"location":"async/#very-technical-details","text":"Warning You can probably skip this. These are very technical details of how FastAPI works underneath. If you have quite some technical knowledge (co-routines, threads, blocking, etc) and are curious about how FastAPI handles async def vs normal def , go ahead.","title":"Very Technical Details"},{"location":"async/#path-operation-functions","text":"When you declare a path operation function with normal def instead of async def , it is run in an external threadpool that is then awaited, instead of being called directly (as it would block the server). If you are coming from another async framework that does not work in the way described above and you are used to define trivial compute-only path operation functions with plain def for a tiny performance gain (about 100 nanoseconds), please note that in FastAPI the effect would be quite opposite. In these cases, it's better to use async def unless your path operation functions use code that performs blocking I/O . Still, in both situations, chances are that FastAPI will still be faster than (or at least comparable to) your previous framework.","title":"Path operation functions"},{"location":"async/#dependencies","text":"The same applies for dependencies. If a dependency is a standard def function instead of async def , it is run in the external threadpool.","title":"Dependencies"},{"location":"async/#sub-dependencies","text":"You can have multiple dependencies and sub-dependencies requiring each other (as parameters of the function definitions), some of them might be created with async def and some with normal def . It would still work, and the ones created with normal def would be called on an external thread (from the threadpool) instead of being \"awaited\".","title":"Sub-dependencies"},{"location":"async/#other-utility-functions","text":"Any other utility function that you call directly can be created with normal def or async def and FastAPI won't affect the way you call it. This is in contrast to the functions that FastAPI calls for you: path operation functions and dependencies. If your utility function is a normal function with def , it will be called directly (as you write it in your code), not in a threadpool, if the function is created with async def then you should await for that function when you call it in your code. Again, these are very technical details that would probably be useful if you came searching for them. Otherwise, you should be good with the guidelines from the section above: In a hurry? .","title":"Other utility functions"},{"location":"benchmarks/","text":"\u57fa\u51c6\u6d4b\u8bd5 \u00b6 \u7b2c\u4e09\u65b9\u673a\u6784 TechEmpower \u7684\u57fa\u51c6\u6d4b\u8bd5\u8868\u660e\u5728 Uvicorn \u4e0b\u8fd0\u884c\u7684 FastAPI \u5e94\u7528\u7a0b\u5e8f\u662f \u53ef\u7528\u7684\u6700\u5feb\u7684 Python \u6846\u67b6\u4e4b\u4e00 \uff0c\u4ec5\u6b21\u4e0e Starlette \u548c Uvicorn \u672c\u8eab (\u7531 FastAPI \u5185\u90e8\u4f7f\u7528\uff09\u3002(*) \u4f46\u662f\u5728\u67e5\u770b\u57fa\u51c6\u5f97\u5206\u548c\u5bf9\u6bd4\u65f6\uff0c\u8bf7\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\u3002 \u57fa\u51c6\u6d4b\u8bd5\u548c\u901f\u5ea6 \u00b6 \u5f53\u4f60\u67e5\u770b\u57fa\u51c6\u6d4b\u8bd5\u65f6\uff0c\u51e0\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u5de5\u5177\u88ab\u7b49\u6548\u5730\u505a\u6bd4\u8f83\u662f\u5f88\u5e38\u89c1\u7684\u60c5\u51b5\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u662f\u5c06 Uvicorn\uff0cStarlette \u548c FastAPI \u4e00\u8d77\u6bd4\u8f83\uff08\u5728\u8bb8\u591a\u5176\u5b83\u5de5\u5177\u4e2d\uff09\u3002 \u8be5\u5de5\u5177\u89e3\u51b3\u7684\u95ee\u9898\u6700\u7b80\u5355\uff0c\u5b83\u5c06\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002\u800c\u4e14\u5927\u591a\u6570\u57fa\u51c6\u6d4b\u8bd5\u5e76\u672a\u6d4b\u8bd5\u8be5\u5de5\u5177\u63d0\u4f9b\u7684\u5176\u4ed6\u529f\u80fd\u3002 \u5c42\u6b21\u7ed3\u6784\u5982\u4e0b\uff1a Uvicorn \uff1aASGI\u670d\u52a1\u5668 Starlette \uff1a\uff08\u4f7f\u7528 Uvicorn\uff09\u7f51\u7edc\u5fae\u6846\u67b6 FastAPI \uff1a\uff08\u4f7f\u7528 Starlette\uff09 \u5177\u6709\u591a\u4e2a\u9644\u52a0\u529f\u80fd\u7684API\u5fae\u6846\u67b6\uff0c\u7528\u4e8e\u6784\u5efaAPI\uff0c\u8fdb\u884c\u6570\u636e\u9a8c\u8bc1\u7b49\u3002 Uvicorn : \u5177\u6709\u6700\u4f73\u6027\u80fd\uff0c\u56e0\u4e3a\u9664\u4e86\u670d\u52a1\u5668\u672c\u8eab\u5916\uff0c\u5b83\u6ca1\u6709\u592a\u591a\u989d\u5916\u7684\u4ee3\u7801\u3002 \u60a8\u4e0d\u4f1a\u76f4\u63a5\u5728 Uvicorn \u4e2d\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u610f\u5473\u7740\u60a8\u7684\u4ee3\u7801\u81f3\u5c11\u5fc5\u987b\u5305\u542b Starlette\uff08\u6216 FastAPI \uff09\u63d0\u4f9b\u7684\u4ee3\u7801\u3002\u5982\u679c\u60a8\u8fd9\u6837\u505a\u4e86\uff08\u5373\u76f4\u63a5\u5728 Uvicorn \u4e2d\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\uff09\uff0c\u6700\u7ec8\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u548c\u4f7f\u7528\u4e86\u6846\u67b6\u5e76\u4e14\u6700\u5c0f\u5316\u4e86\u5e94\u7528\u4ee3\u7801\u548c bug \u7684\u60c5\u51b5\u5177\u6709\u76f8\u540c\u7684\u6027\u80fd\u635f\u8017\u3002 \u5982\u679c\u8981\u5bf9\u6bd4\u4e0e Uvicorn \u5bf9\u6807\u7684\u670d\u52a1\u5668\uff0c\u8bf7\u5c06\u5176\u4e0e Daphne\uff0cHypercorn\uff0cuWSGI\u7b49\u5e94\u7528\u670d\u52a1\u5668\u8fdb\u884c\u6bd4\u8f83\u3002 Starlette : \u5728 Uvicorn \u540e\u4f7f\u7528 Starlette\uff0c\u6027\u80fd\u4f1a\u7565\u6709\u4e0b\u964d\u3002\u5b9e\u9645\u4e0a\uff0cStarlette \u4f7f\u7528 Uvicorn\u8fd0\u884c\u3002\u56e0\u6b64\uff0c\u7531\u4e8e\u5fc5\u987b\u6267\u884c\u66f4\u591a\u7684\u4ee3\u7801\uff0c\u5b83\u53ea\u4f1a\u6bd4 Uvicorn \u66f4\u6162\u3002 \u4f46\u5b83\u4e3a\u60a8\u63d0\u4f9b\u4e86\u6784\u5efa\u7b80\u5355\u7684\u7f51\u7edc\u7a0b\u5e8f\u7684\u5de5\u5177\uff0c\u5e76\u5177\u6709\u57fa\u4e8e\u8def\u5f84\u7684\u8def\u7531\u7b49\u529f\u80fd\u3002 \u5982\u679c\u60f3\u5bf9\u6bd4\u4e0e Starlette \u5bf9\u6807\u7684\u5f00\u53d1\u6846\u67b6\uff0c\u8bf7\u5c06\u5176\u4e0e Sanic\uff0cFlask\uff0cDjango \u7b49\u7f51\u7edc\u6846\u67b6\uff08\u6216\u5fae\u6846\u67b6\uff09\u8fdb\u884c\u6bd4\u8f83\u3002 FastAPI : \u4e0e Starlette \u4f7f\u7528 Uvicorn \u4e00\u6837\uff0c\u7531\u4e8e FastAPI \u4f7f\u7528 Starlette\uff0c\u56e0\u6b64 FastAPI \u4e0d\u80fd\u6bd4 Starlette \u66f4\u5feb\u3002 FastAPI \u5728 Starlette \u57fa\u7840\u4e0a\u63d0\u4f9b\u4e86\u66f4\u591a\u529f\u80fd\u3002\u4f8b\u5982\u5728\u5f00\u53d1 API \u65f6\uff0c\u6240\u9700\u7684\u6570\u636e\u9a8c\u8bc1\u548c\u5e8f\u5217\u5316\u529f\u80fd\u3002FastAPI \u53ef\u4ee5\u5e2e\u52a9\u60a8\u81ea\u52a8\u751f\u6210 API\u6587\u6863\uff0c\uff08\u6587\u6863\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\u81ea\u52a8\u751f\u6210\uff0c\u6240\u4ee5\u4e0d\u4f1a\u589e\u52a0\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u65f6\u7684\u5f00\u9500\uff09\u3002 \u5982\u679c\u60a8\u4e0d\u4f7f\u7528 FastAPI \u800c\u76f4\u63a5\u4f7f\u7528 Starlette\uff08\u6216\u8bf8\u5982 Sanic\uff0cFlask\uff0cResponder \u7b49\u5176\u5b83\u5de5\u5177\uff09\uff0c\u60a8\u5219\u8981\u81ea\u5df1\u5b9e\u73b0\u6240\u6709\u7684\u6570\u636e\u9a8c\u8bc1\u548c\u5e8f\u5217\u5316\u3002\u90a3\u4e48\u6700\u7ec8\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u548c\u4f7f\u7528 FastAPI \u6784\u5efa\u7684\u7a0b\u5e8f\u6709\u76f8\u540c\u7684\u5f00\u9500\u3002\u4e00\u822c\u8fd9\u79cd\u6570\u636e\u9a8c\u8bc1\u548c\u5e8f\u5217\u5316\u7684\u64cd\u4f5c\u5728\u60a8\u5e94\u7528\u7a0b\u5e8f\u7684\u4ee3\u7801\u4e2d\u4f1a\u5360\u5f88\u5927\u6bd4\u91cd\u3002 \u56e0\u6b64\uff0c\u901a\u8fc7\u4f7f\u7528 FastAPI \u610f\u5473\u7740\u60a8\u53ef\u4ee5\u8282\u7701\u5f00\u53d1\u65f6\u95f4\uff0c\u51cf\u5c11\u7f16\u7801\u9519\u8bef\uff0c\u7528\u66f4\u5c11\u7684\u7f16\u7801\u5b9e\u73b0\u5176\u529f\u80fd\uff0c\u5e76\u4e14\u76f8\u6bd4\u4e0d\u4f7f\u7528 FastAPI \u60a8\u5f88\u5927\u53ef\u80fd\u4f1a\u83b7\u5f97\u76f8\u540c\u6216\u66f4\u597d\u7684\u6027\u80fd\uff08\u56e0\u4e3a\u90a3\u6837\u60a8\u5fc5\u987b\u5728\u4ee3\u7801\u4e2d\u5b9e\u73b0\u6240\u6709\u76f8\u540c\u7684\u529f\u80fd\uff09\u3002 \u5982\u679c\u60a8\u60f3\u5bf9\u6bd4\u4e0e FastAPI \u5bf9\u6807\u7684\u5f00\u53d1\u6846\u67b6\uff0c\u8bf7\u4e0e\u80fd\u591f\u63d0\u4f9b\u6570\u636e\u9a8c\u8bc1\uff0c\u5e8f\u5217\u5316\u548c\u5e26\u6709\u81ea\u52a8\u6587\u6863\u751f\u6210\u7684\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\uff08\u6216\u5de5\u5177\u96c6\uff09\u8fdb\u884c\u5bf9\u6bd4\uff0c\u4f8b\u5982\u5177\u6709\u96c6\u6210\u81ea\u52a8\u6570\u636e\u9a8c\u8bc1\uff0c\u5e8f\u5217\u5316\u548c\u81ea\u52a8\u5316\u6587\u6863\u7684 Flask-apispec\uff0cNestJS\uff0cMolten \u7b49\u3002","title":"\u57fa\u51c6\u6d4b\u8bd5"},{"location":"benchmarks/#_1","text":"\u7b2c\u4e09\u65b9\u673a\u6784 TechEmpower \u7684\u57fa\u51c6\u6d4b\u8bd5\u8868\u660e\u5728 Uvicorn \u4e0b\u8fd0\u884c\u7684 FastAPI \u5e94\u7528\u7a0b\u5e8f\u662f \u53ef\u7528\u7684\u6700\u5feb\u7684 Python \u6846\u67b6\u4e4b\u4e00 \uff0c\u4ec5\u6b21\u4e0e Starlette \u548c Uvicorn \u672c\u8eab (\u7531 FastAPI \u5185\u90e8\u4f7f\u7528\uff09\u3002(*) \u4f46\u662f\u5728\u67e5\u770b\u57fa\u51c6\u5f97\u5206\u548c\u5bf9\u6bd4\u65f6\uff0c\u8bf7\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\u3002","title":"\u57fa\u51c6\u6d4b\u8bd5"},{"location":"benchmarks/#_2","text":"\u5f53\u4f60\u67e5\u770b\u57fa\u51c6\u6d4b\u8bd5\u65f6\uff0c\u51e0\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u5de5\u5177\u88ab\u7b49\u6548\u5730\u505a\u6bd4\u8f83\u662f\u5f88\u5e38\u89c1\u7684\u60c5\u51b5\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u662f\u5c06 Uvicorn\uff0cStarlette \u548c FastAPI \u4e00\u8d77\u6bd4\u8f83\uff08\u5728\u8bb8\u591a\u5176\u5b83\u5de5\u5177\u4e2d\uff09\u3002 \u8be5\u5de5\u5177\u89e3\u51b3\u7684\u95ee\u9898\u6700\u7b80\u5355\uff0c\u5b83\u5c06\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002\u800c\u4e14\u5927\u591a\u6570\u57fa\u51c6\u6d4b\u8bd5\u5e76\u672a\u6d4b\u8bd5\u8be5\u5de5\u5177\u63d0\u4f9b\u7684\u5176\u4ed6\u529f\u80fd\u3002 \u5c42\u6b21\u7ed3\u6784\u5982\u4e0b\uff1a Uvicorn \uff1aASGI\u670d\u52a1\u5668 Starlette \uff1a\uff08\u4f7f\u7528 Uvicorn\uff09\u7f51\u7edc\u5fae\u6846\u67b6 FastAPI \uff1a\uff08\u4f7f\u7528 Starlette\uff09 \u5177\u6709\u591a\u4e2a\u9644\u52a0\u529f\u80fd\u7684API\u5fae\u6846\u67b6\uff0c\u7528\u4e8e\u6784\u5efaAPI\uff0c\u8fdb\u884c\u6570\u636e\u9a8c\u8bc1\u7b49\u3002 Uvicorn : \u5177\u6709\u6700\u4f73\u6027\u80fd\uff0c\u56e0\u4e3a\u9664\u4e86\u670d\u52a1\u5668\u672c\u8eab\u5916\uff0c\u5b83\u6ca1\u6709\u592a\u591a\u989d\u5916\u7684\u4ee3\u7801\u3002 \u60a8\u4e0d\u4f1a\u76f4\u63a5\u5728 Uvicorn \u4e2d\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u610f\u5473\u7740\u60a8\u7684\u4ee3\u7801\u81f3\u5c11\u5fc5\u987b\u5305\u542b Starlette\uff08\u6216 FastAPI \uff09\u63d0\u4f9b\u7684\u4ee3\u7801\u3002\u5982\u679c\u60a8\u8fd9\u6837\u505a\u4e86\uff08\u5373\u76f4\u63a5\u5728 Uvicorn \u4e2d\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\uff09\uff0c\u6700\u7ec8\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u548c\u4f7f\u7528\u4e86\u6846\u67b6\u5e76\u4e14\u6700\u5c0f\u5316\u4e86\u5e94\u7528\u4ee3\u7801\u548c bug \u7684\u60c5\u51b5\u5177\u6709\u76f8\u540c\u7684\u6027\u80fd\u635f\u8017\u3002 \u5982\u679c\u8981\u5bf9\u6bd4\u4e0e Uvicorn \u5bf9\u6807\u7684\u670d\u52a1\u5668\uff0c\u8bf7\u5c06\u5176\u4e0e Daphne\uff0cHypercorn\uff0cuWSGI\u7b49\u5e94\u7528\u670d\u52a1\u5668\u8fdb\u884c\u6bd4\u8f83\u3002 Starlette : \u5728 Uvicorn \u540e\u4f7f\u7528 Starlette\uff0c\u6027\u80fd\u4f1a\u7565\u6709\u4e0b\u964d\u3002\u5b9e\u9645\u4e0a\uff0cStarlette \u4f7f\u7528 Uvicorn\u8fd0\u884c\u3002\u56e0\u6b64\uff0c\u7531\u4e8e\u5fc5\u987b\u6267\u884c\u66f4\u591a\u7684\u4ee3\u7801\uff0c\u5b83\u53ea\u4f1a\u6bd4 Uvicorn \u66f4\u6162\u3002 \u4f46\u5b83\u4e3a\u60a8\u63d0\u4f9b\u4e86\u6784\u5efa\u7b80\u5355\u7684\u7f51\u7edc\u7a0b\u5e8f\u7684\u5de5\u5177\uff0c\u5e76\u5177\u6709\u57fa\u4e8e\u8def\u5f84\u7684\u8def\u7531\u7b49\u529f\u80fd\u3002 \u5982\u679c\u60f3\u5bf9\u6bd4\u4e0e Starlette \u5bf9\u6807\u7684\u5f00\u53d1\u6846\u67b6\uff0c\u8bf7\u5c06\u5176\u4e0e Sanic\uff0cFlask\uff0cDjango \u7b49\u7f51\u7edc\u6846\u67b6\uff08\u6216\u5fae\u6846\u67b6\uff09\u8fdb\u884c\u6bd4\u8f83\u3002 FastAPI : \u4e0e Starlette \u4f7f\u7528 Uvicorn \u4e00\u6837\uff0c\u7531\u4e8e FastAPI \u4f7f\u7528 Starlette\uff0c\u56e0\u6b64 FastAPI \u4e0d\u80fd\u6bd4 Starlette \u66f4\u5feb\u3002 FastAPI \u5728 Starlette \u57fa\u7840\u4e0a\u63d0\u4f9b\u4e86\u66f4\u591a\u529f\u80fd\u3002\u4f8b\u5982\u5728\u5f00\u53d1 API \u65f6\uff0c\u6240\u9700\u7684\u6570\u636e\u9a8c\u8bc1\u548c\u5e8f\u5217\u5316\u529f\u80fd\u3002FastAPI \u53ef\u4ee5\u5e2e\u52a9\u60a8\u81ea\u52a8\u751f\u6210 API\u6587\u6863\uff0c\uff08\u6587\u6863\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u65f6\u81ea\u52a8\u751f\u6210\uff0c\u6240\u4ee5\u4e0d\u4f1a\u589e\u52a0\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u65f6\u7684\u5f00\u9500\uff09\u3002 \u5982\u679c\u60a8\u4e0d\u4f7f\u7528 FastAPI \u800c\u76f4\u63a5\u4f7f\u7528 Starlette\uff08\u6216\u8bf8\u5982 Sanic\uff0cFlask\uff0cResponder \u7b49\u5176\u5b83\u5de5\u5177\uff09\uff0c\u60a8\u5219\u8981\u81ea\u5df1\u5b9e\u73b0\u6240\u6709\u7684\u6570\u636e\u9a8c\u8bc1\u548c\u5e8f\u5217\u5316\u3002\u90a3\u4e48\u6700\u7ec8\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4f1a\u548c\u4f7f\u7528 FastAPI \u6784\u5efa\u7684\u7a0b\u5e8f\u6709\u76f8\u540c\u7684\u5f00\u9500\u3002\u4e00\u822c\u8fd9\u79cd\u6570\u636e\u9a8c\u8bc1\u548c\u5e8f\u5217\u5316\u7684\u64cd\u4f5c\u5728\u60a8\u5e94\u7528\u7a0b\u5e8f\u7684\u4ee3\u7801\u4e2d\u4f1a\u5360\u5f88\u5927\u6bd4\u91cd\u3002 \u56e0\u6b64\uff0c\u901a\u8fc7\u4f7f\u7528 FastAPI \u610f\u5473\u7740\u60a8\u53ef\u4ee5\u8282\u7701\u5f00\u53d1\u65f6\u95f4\uff0c\u51cf\u5c11\u7f16\u7801\u9519\u8bef\uff0c\u7528\u66f4\u5c11\u7684\u7f16\u7801\u5b9e\u73b0\u5176\u529f\u80fd\uff0c\u5e76\u4e14\u76f8\u6bd4\u4e0d\u4f7f\u7528 FastAPI \u60a8\u5f88\u5927\u53ef\u80fd\u4f1a\u83b7\u5f97\u76f8\u540c\u6216\u66f4\u597d\u7684\u6027\u80fd\uff08\u56e0\u4e3a\u90a3\u6837\u60a8\u5fc5\u987b\u5728\u4ee3\u7801\u4e2d\u5b9e\u73b0\u6240\u6709\u76f8\u540c\u7684\u529f\u80fd\uff09\u3002 \u5982\u679c\u60a8\u60f3\u5bf9\u6bd4\u4e0e FastAPI \u5bf9\u6807\u7684\u5f00\u53d1\u6846\u67b6\uff0c\u8bf7\u4e0e\u80fd\u591f\u63d0\u4f9b\u6570\u636e\u9a8c\u8bc1\uff0c\u5e8f\u5217\u5316\u548c\u5e26\u6709\u81ea\u52a8\u6587\u6863\u751f\u6210\u7684\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\uff08\u6216\u5de5\u5177\u96c6\uff09\u8fdb\u884c\u5bf9\u6bd4\uff0c\u4f8b\u5982\u5177\u6709\u96c6\u6210\u81ea\u52a8\u6570\u636e\u9a8c\u8bc1\uff0c\u5e8f\u5217\u5316\u548c\u81ea\u52a8\u5316\u6587\u6863\u7684 Flask-apispec\uff0cNestJS\uff0cMolten \u7b49\u3002","title":"\u57fa\u51c6\u6d4b\u8bd5\u548c\u901f\u5ea6"},{"location":"contributing/","text":"\u5f00\u53d1 - \u8d21\u732e \u00b6 \u9996\u5148\uff0c\u4f60\u6700\u597d\u5148\u4e86\u89e3 \u5e2e\u52a9 FastAPI \u53ca\u83b7\u53d6\u5e2e\u52a9 \u7684\u57fa\u672c\u65b9\u5f0f\u3002 \u5f00\u53d1 \u00b6 \u5982\u679c\u4f60\u5df2\u7ecf\u514b\u9686\u4e86\u6e90\u7801\u4ed3\u5e93\uff0c\u5e76\u4e14\u9700\u8981\u6df1\u5165\u7814\u7a76\u4ee3\u7801\uff0c\u4e0b\u9762\u662f\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\u7684\u6307\u5357\u3002 \u901a\u8fc7 venv \u7ba1\u7406\u865a\u62df\u73af\u5883 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 Python \u7684 venv \u6a21\u5757\u5728\u4e00\u4e2a\u76ee\u5f55\u4e2d\u521b\u5efa\u865a\u62df\u73af\u5883\uff1a $ python -m venv env \u8fd9\u5c06\u4f7f\u7528 Python \u7a0b\u5e8f\u521b\u5efa\u4e00\u4e2a ./env/ \u76ee\u5f55\uff0c\u7136\u540e\u4f60\u5c06\u80fd\u591f\u4e3a\u8fd9\u4e2a\u9694\u79bb\u7684\u73af\u5883\u5b89\u88c5\u8f6f\u4ef6\u5305\u3002 \u6fc0\u6d3b\u865a\u62df\u73af\u5883 \u00b6 \u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u6fc0\u6d3b\u65b0\u73af\u5883\uff1a Linux, macOS Windows PowerShell Windows Bash $ source ./env/bin/activate $ . \\e nv \\S cripts \\A ctivate.ps1 Or if you use Bash for Windows (e.g. Git Bash ): $ source ./env/Scripts/activate \u8981\u68c0\u67e5\u64cd\u4f5c\u662f\u5426\u6210\u529f\uff0c\u8fd0\u884c\uff1a Linux, macOS, Windows Bash Windows PowerShell $ which pip some/directory/fastapi/env/bin/pip $ Get-Command pip some/directory/fastapi/env/bin/pip \u5982\u679c\u663e\u793a pip \u7a0b\u5e8f\u6587\u4ef6\u4f4d\u4e8e env/bin/pip \u5219\u8bf4\u660e\u6fc0\u6d3b\u6210\u529f\u3002 \ud83c\udf89 Tip \u6bcf\u4e00\u6b21\u4f60\u5728\u8be5\u73af\u5883\u4e0b\u4f7f\u7528 pip \u5b89\u88c5\u4e86\u65b0\u8f6f\u4ef6\u5305\u65f6\uff0c\u8bf7\u518d\u6b21\u6fc0\u6d3b\u8be5\u73af\u5883\u3002 \u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u4f60\u5728\u4f7f\u7528\u7531\u8be5\u8f6f\u4ef6\u5305\u5b89\u88c5\u7684\u7ec8\u7aef\u7a0b\u5e8f\uff08\u5982 flit \uff09\u65f6\u4f7f\u7528\u7684\u662f\u5f53\u524d\u865a\u62df\u73af\u5883\u4e2d\u7684\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u7684\u53ef\u80fd\u662f\u5168\u5c40\u5b89\u88c5\u7684\u7a0b\u5e8f\u3002 Flit \u00b6 FastAPI \u4f7f\u7528 Flit \u6765\u6784\u5efa\u3001\u6253\u5305\u548c\u53d1\u5e03\u9879\u76ee\u3002 \u5982\u4e0a\u6240\u8ff0\u6fc0\u6d3b\u73af\u5883\u540e\uff0c\u5b89\u88c5 flit \uff1a $ pip install flit ---> 100% \u73b0\u5728\u91cd\u65b0\u6fc0\u6d3b\u73af\u5883\uff0c\u4ee5\u786e\u4fdd\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u662f\u521a\u521a\u5b89\u88c5\u7684 flit \uff08\u800c\u4e0d\u662f\u5168\u5c40\u73af\u5883\u7684\uff09\u3002 \u7136\u540e\u4f7f\u7528 flit \u6765\u5b89\u88c5\u5f00\u53d1\u4f9d\u8d56\uff1a Linux, macOS Windows $ flit install --deps develop --symlink ---> 100% If you are on Windows, use --pth-file instead of --symlink : $ flit install --deps develop --pth-file ---> 100% \u8fd9\u5c06\u5728\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5\u6240\u6709\u4f9d\u8d56\u548c\u672c\u5730\u7248\u672c\u7684 FastAPI\u3002 \u4f7f\u7528\u672c\u5730 FastAPI \u00b6 \u5982\u679c\u4f60\u521b\u5efa\u4e00\u4e2a\u5bfc\u5165\u5e76\u4f7f\u7528 FastAPI \u7684 Python \u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528\u865a\u62df\u73af\u5883\u4e2d\u7684 Python \u8fd0\u884c\u5b83\uff0c\u5b83\u5c06\u4f7f\u7528\u4f60\u672c\u5730\u7684 FastAPI \u6e90\u7801\u3002 \u5e76\u4e14\u5982\u679c\u4f60\u66f4\u6539\u8be5\u672c\u5730 FastAPI \u7684\u6e90\u7801\uff0c\u7531\u4e8e\u5b83\u662f\u901a\u8fc7 --symlink \uff08\u6216 Windows \u4e0a\u7684 --pth-file \uff09\u5b89\u88c5\u7684\uff0c\u5f53\u4f60\u518d\u6b21\u8fd0\u884c\u90a3\u4e2a Python \u6587\u4ef6\uff0c\u5b83\u5c06\u4f7f\u7528\u4f60\u521a\u521a\u7f16\u8f91\u8fc7\u7684\u6700\u65b0\u7248\u672c\u7684 FastAPI\u3002 \u8fd9\u6837\uff0c\u4f60\u4e0d\u5fc5\u518d\u53bb\u91cd\u65b0\"\u5b89\u88c5\"\u4f60\u7684\u672c\u5730\u7248\u672c\u5373\u53ef\u6d4b\u8bd5\u6240\u6709\u66f4\u6539\u3002 \u683c\u5f0f\u5316 \u00b6 \u4f60\u53ef\u4ee5\u8fd0\u884c\u4e0b\u9762\u7684\u811a\u672c\u6765\u683c\u5f0f\u5316\u548c\u6e05\u7406\u6240\u6709\u4ee3\u7801\uff1a $ bash scripts/format.sh \u5b83\u8fd8\u4f1a\u81ea\u52a8\u5bf9\u6240\u6709\u5bfc\u5165\u4ee3\u7801\u8fdb\u884c\u6574\u7406\u3002 \u4e3a\u4e86\u4f7f\u6574\u7406\u6b63\u786e\u8fdb\u884c\uff0c\u4f60\u9700\u8981\u5728\u5f53\u524d\u73af\u5883\u4e2d\u5b89\u88c5\u672c\u5730\u7684 FastAPI\uff0c\u5373\u5728\u8fd0\u884c\u4e0a\u8ff0\u6bb5\u843d\u4e2d\u7684\u547d\u4ee4\u65f6\u6dfb\u52a0 --symlink \uff08\u6216 Windows \u4e0a\u7684 --pth-file \uff09\u3002 \u683c\u5f0f\u5316\u5bfc\u5165 \u00b6 \u8fd8\u6709\u53e6\u4e00\u4e2a\u811a\u672c\u53ef\u4ee5\u683c\u5f0f\u5316\u6240\u6709\u5bfc\u5165\uff0c\u5e76\u786e\u4fdd\u4f60\u6ca1\u6709\u672a\u4f7f\u7528\u7684\u5bfc\u5165\u4ee3\u7801\uff1a $ bash scripts/format-imports.sh \u7531\u4e8e\u5b83\u4f9d\u6b21\u8fd0\u884c\u4e86\u591a\u4e2a\u547d\u4ee4\uff0c\u5e76\u4fee\u6539\u548c\u8fd8\u539f\u4e86\u8bb8\u591a\u6587\u4ef6\uff0c\u6240\u4ee5\u8fd0\u884c\u65f6\u95f4\u4f1a\u66f4\u957f\u4e00\u4e9b\uff0c\u56e0\u6b64\u7ecf\u5e38\u5730\u4f7f\u7528 scripts/format.sh \u7136\u540e\u4ec5\u5728\u63d0\u4ea4\u524d\u6267\u884c scripts/format-imports.sh \u4f1a\u66f4\u597d\u4e00\u4e9b\u3002 \u6587\u6863 \u00b6 \u9996\u5148\uff0c\u8bf7\u786e\u4fdd\u6309\u4e0a\u8ff0\u6b65\u9aa4\u8bbe\u7f6e\u597d\u73af\u5883\uff0c\u8fd9\u5c06\u5b89\u88c5\u6240\u6709\u9700\u8981\u7684\u4f9d\u8d56\u3002 \u6587\u6863\u4f7f\u7528 MkDocs \u751f\u6210\u3002 \u5e76\u4e14\u5728 ./scripts/docs.py \u4e2d\u8fd8\u6709\u9002\u7528\u7684\u989d\u5916\u5de5\u5177/\u811a\u672c\u6765\u5904\u7406\u7ffb\u8bd1\u3002 Tip \u4f60\u4e0d\u9700\u8981\u53bb\u4e86\u89e3 ./scripts/docs.py \u4e2d\u7684\u4ee3\u7801\uff0c\u53ea\u9700\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528\u5b83\u5373\u53ef\u3002 \u6240\u6709\u6587\u6863\u5747\u5728 ./docs/en/ \u76ee\u5f55\u4e2d\u4ee5 Markdown \u6587\u4ef6\u683c\u5f0f\u4fdd\u5b58\u3002 \u8bb8\u591a\u7684\u6559\u7a0b\u7ae0\u8282\u91cc\u5305\u542b\u6709\u4ee3\u7801\u5757\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5757\u662f\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u7684\u771f\u5b9e\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5757\u4e0d\u662f\u5199\u5728 Markdown \u6587\u4ef6\u5185\u7684\uff0c\u5b83\u4eec\u662f\u4f4d\u4e8e ./docs_src/ \u76ee\u5f55\u4e2d\u7684 Python \u6587\u4ef6\u3002 \u751f\u6210\u7ad9\u70b9\u65f6\uff0c\u8fd9\u4e9b Python \u6587\u4ef6\u4f1a\u88ab\u5305\u542b/\u6ce8\u5165\u5230\u6587\u6863\u4e2d\u3002 \u7528\u4e8e\u6d4b\u8bd5\u7684\u6587\u6863 \u00b6 \u5927\u591a\u6570\u7684\u6d4b\u8bd5\u5b9e\u9645\u4e0a\u90fd\u662f\u9488\u5bf9\u6587\u6863\u4e2d\u7684\u793a\u4f8b\u6e90\u6587\u4ef6\u8fd0\u884c\u7684\u3002 \u8fd9\u6709\u52a9\u4e8e\u786e\u4fdd\uff1a \u6587\u6863\u59cb\u7ec8\u662f\u6700\u65b0\u7684\u3002 \u6587\u6863\u793a\u4f8b\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u3002 \u7edd\u5927\u591a\u6570\u7279\u6027\u65e2\u5728\u6587\u6863\u4e2d\u5f97\u4ee5\u9610\u8ff0\uff0c\u53c8\u901a\u8fc7\u6d4b\u8bd5\u8986\u76d6\u8fdb\u884c\u4fdd\u969c\u3002 \u5728\u672c\u5730\u5f00\u53d1\u671f\u95f4\uff0c\u6709\u4e00\u4e2a\u811a\u672c\u53ef\u4ee5\u5b9e\u65f6\u91cd\u8f7d\u5730\u6784\u5efa\u7ad9\u70b9\u5e76\u7528\u6765\u68c0\u67e5\u6240\u505a\u7684\u4efb\u4f55\u66f4\u6539\uff1a $ python ./scripts/docs.py live <span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008 <span style=\"color: green;\">[INFO]</span> Start watching changes <span style=\"color: green;\">[INFO]</span> Start detecting changes \u5b83\u5c06\u5728 http://127.0.0.1:8008 \u63d0\u4f9b\u5bf9\u6587\u6863\u7684\u8bbf\u95ee\u3002 \u8fd9\u6837\uff0c\u4f60\u53ef\u4ee5\u7f16\u8f91\u6587\u6863/\u6e90\u6587\u4ef6\u5e76\u5b9e\u65f6\u67e5\u770b\u66f4\u6539\u3002 Typer CLI \uff08\u53ef\u9009\uff09 \u00b6 \u672c\u6307\u5f15\u5411\u4f60\u5c55\u793a\u4e86\u5982\u4f55\u76f4\u63a5\u7528 python \u7a0b\u5e8f\u8fd0\u884c ./scripts/docs.py \u4e2d\u7684\u811a\u672c\u3002 \u4f46\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 Typer CLI \uff0c\u800c\u4e14\u5728\u5b89\u88c5\u4e86\u8865\u5168\u529f\u80fd\u540e\uff0c\u4f60\u5c06\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e2d\u5bf9\u547d\u4ee4\u8fdb\u884c\u81ea\u52a8\u8865\u5168\u3002 \u5982\u679c\u4f60\u6253\u7b97\u5b89\u88c5 Typer CLI \uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\u81ea\u52a8\u8865\u5168\u529f\u80fd\uff1a $ typer --install-completion zsh completion installed in /home/user/.bashrc. Completion will take effect once you restart the terminal. \u5e94\u7528\u548c\u6587\u6863\u540c\u65f6\u8fd0\u884c \u00b6 \u5982\u679c\u4f60\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u8fd0\u884c\u793a\u4f8b\u7a0b\u5e8f\uff1a $ uvicorn tutorial001:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u7531\u4e8e Uvicorn \u9ed8\u8ba4\u4f7f\u7528 8000 \u7aef\u53e3 \uff0c\u56e0\u6b64\u8fd0\u884c\u5728 8008 \u7aef\u53e3\u4e0a\u7684\u6587\u6863\u4e0d\u4f1a\u4e0e\u4e4b\u51b2\u7a81\u3002 \u7ffb\u8bd1 \u00b6 \u975e\u5e38\u611f\u8c22\u4f60\u80fd\u591f\u53c2\u4e0e\u6587\u6863\u7684\u7ffb\u8bd1\uff01\u8fd9\u9879\u5de5\u4f5c\u9700\u8981\u793e\u533a\u7684\u5e2e\u52a9\u624d\u80fd\u5b8c\u6210\u3002 \ud83c\udf0e \ud83d\ude80 \u4ee5\u4e0b\u662f\u53c2\u4e0e\u5e2e\u52a9\u7ffb\u8bd1\u7684\u6b65\u9aa4\u3002 \u5efa\u8bae\u548c\u6307\u5357 \u00b6 \u5728\u5f53\u524d \u5df2\u6709\u7684 pull requests \u4e2d\u67e5\u627e\u4f60\u4f7f\u7528\u7684\u8bed\u8a00\uff0c\u6dfb\u52a0\u8981\u6c42\u4fee\u6539\u6216\u540c\u610f\u5408\u5e76\u7684\u8bc4\u5ba1\u610f\u89c1\u3002 Tip \u4f60\u53ef\u4ee5\u4e3a\u5df2\u6709\u7684 pull requests \u6dfb\u52a0\u5305\u542b\u4fee\u6539\u5efa\u8bae\u7684\u8bc4\u8bba \u3002 \u8be6\u60c5\u53ef\u67e5\u770b\u5173\u4e8e \u6dfb\u52a0 pull request \u8bc4\u5ba1\u610f\u89c1 \u4ee5\u540c\u610f\u5408\u5e76\u6216\u8981\u6c42\u4fee\u6539\u7684\u6587\u6863\u3002 \u5728 issues \u4e2d\u67e5\u627e\u662f\u5426\u6709\u5bf9\u4f60\u6240\u7528\u8bed\u8a00\u6240\u8fdb\u884c\u7684\u534f\u4f5c\u7ffb\u8bd1\u3002 \u6bcf\u7ffb\u8bd1\u4e00\u4e2a\u9875\u9762\u65b0\u589e\u4e00\u4e2a pull request\u3002\u8fd9\u5c06\u4f7f\u5176\u4ed6\u4eba\u66f4\u5bb9\u6613\u5bf9\u5176\u8fdb\u884c\u8bc4\u5ba1\u3002 \u5bf9\u4e8e\u6211\uff08\u8bd1\u6ce8\uff1a\u4f5c\u8005\u4f7f\u7528\u897f\u73ed\u7259\u8bed\u548c\u82f1\u8bed\uff09\u4e0d\u61c2\u7684\u8bed\u8a00\uff0c\u6211\u5c06\u5728\u7b49\u5f85\u5176\u4ed6\u4eba\u8bc4\u5ba1\u7ffb\u8bd1\u4e4b\u540e\u5c06\u5176\u5408\u5e76\u3002 \u4f60\u8fd8\u53ef\u4ee5\u67e5\u770b\u662f\u5426\u6709\u4f60\u6240\u7528\u8bed\u8a00\u7684\u7ffb\u8bd1\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u8bc4\u5ba1\uff0c\u8fd9\u5c06\u5e2e\u52a9\u6211\u4e86\u89e3\u7ffb\u8bd1\u662f\u5426\u6b63\u786e\u4ee5\u53ca\u80fd\u5426\u5c06\u5176\u5408\u5e76\u3002 \u4f7f\u7528\u76f8\u540c\u7684 Python \u793a\u4f8b\u5e76\u4e14\u4ec5\u7ffb\u8bd1\u6587\u6863\u4e2d\u7684\u6587\u672c\u3002\u65e0\u9700\u8fdb\u884c\u4efb\u4f55\u5176\u4ed6\u66f4\u6539\u793a\u4f8b\u4e5f\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u4f7f\u7528\u76f8\u540c\u7684\u56fe\u7247\u3001\u6587\u4ef6\u540d\u4ee5\u53ca\u94fe\u63a5\u5730\u5740\u3002\u65e0\u9700\u8fdb\u884c\u4efb\u4f55\u5176\u4ed6\u8c03\u6574\u6765\u8ba9\u5b83\u4eec\u517c\u5bb9\u3002 \u4f60\u53ef\u4ee5\u4ece ISO 639-1 \u4ee3\u7801\u5217\u8868 \u8868\u4e2d\u67e5\u627e\u4f60\u60f3\u8981\u7ffb\u8bd1\u8bed\u8a00\u7684\u4e24\u4f4d\u5b57\u6bcd\u4ee3\u7801\u3002 \u5df2\u6709\u7684\u8bed\u8a00 \u00b6 \u5047\u8bbe\u4f60\u60f3\u5c06\u67d0\u4e2a\u9875\u9762\u7ffb\u8bd1\u6210\u5df2\u7ecf\u7ffb\u8bd1\u4e86\u4e00\u4e9b\u9875\u9762\u7684\u8bed\u8a00\uff0c\u4f8b\u5982\u897f\u73ed\u7259\u8bed\u3002 \u5bf9\u4e8e\u897f\u73ed\u7259\u8bed\u6765\u8bf4\uff0c\u5b83\u7684\u4e24\u4f4d\u5b57\u6bcd\u4ee3\u7801\u662f es \u3002\u6240\u4ee5\u897f\u73ed\u7259\u8bed\u7ffb\u8bd1\u7684\u76ee\u5f55\u4f4d\u4e8e docs/es/ \u3002 Tip \u4e3b\u8981\uff08\"\u5b98\u65b9\"\uff09\u8bed\u8a00\u662f\u82f1\u8bed\uff0c\u4f4d\u4e8e docs/en/ \u76ee\u5f55\u3002 \u73b0\u5728\u4e3a\u897f\u73ed\u7259\u8bed\u6587\u6863\u8fd0\u884c\u5b9e\u65f6\u670d\u52a1\u5668\uff1a // Use the command \"live\" and pass the language code as a CLI argument $ python ./scripts/docs.py live es <span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008 <span style=\"color: green;\">[INFO]</span> Start watching changes <span style=\"color: green;\">[INFO]</span> Start detecting changes \u73b0\u5728\u4f60\u53ef\u4ee5\u8bbf\u95ee http://127.0.0.1:8008 \u5b9e\u65f6\u67e5\u770b\u4f60\u6240\u505a\u7684\u66f4\u6539\u3002 \u5982\u679c\u4f60\u67e5\u770b FastAPI \u7684\u7ebf\u4e0a\u6587\u6863\u7f51\u7ad9\uff0c\u4f1a\u770b\u5230\u6bcf\u79cd\u8bed\u8a00\u90fd\u6709\u6240\u6709\u9875\u9762\u3002\u4f46\u662f\u67d0\u4e9b\u9875\u9762\u5e76\u672a\u88ab\u7ffb\u8bd1\u5e76\u4e14\u4f1a\u6709\u4e00\u5904\u5173\u4e8e\u7f3a\u5c11\u7ffb\u8bd1\u7684\u63d0\u793a\u3002 \u4f46\u662f\u5f53\u4f60\u50cf\u4e0a\u9762\u8fd9\u6837\u5728\u672c\u5730\u8fd0\u884c\u6587\u6863\u65f6\uff0c\u4f60\u53ea\u4f1a\u770b\u5230\u5df2\u7ecf\u7ffb\u8bd1\u7684\u9875\u9762\u3002 \u73b0\u5728\u5047\u8bbe\u4f60\u8981\u4e3a Features \u7ae0\u8282\u6dfb\u52a0\u7ffb\u8bd1\u3002 \u590d\u5236\u4e0b\u9762\u7684\u6587\u4ef6\uff1a docs/en/docs/features.md \u7c98\u8d34\u5230\u4f60\u60f3\u8981\u7ffb\u8bd1\u8bed\u8a00\u76ee\u5f55\u7684\u76f8\u540c\u4f4d\u7f6e\uff0c\u6bd4\u5982\uff1a docs/es/docs/features.md Tip \u6ce8\u610f\u8def\u5f84\u548c\u6587\u4ef6\u540d\u7684\u552f\u4e00\u53d8\u5316\u662f\u8bed\u8a00\u4ee3\u7801\uff0c\u4ece en \u66f4\u6539\u4e3a es \u3002 \u73b0\u5728\u6253\u5f00\u4f4d\u4e8e\u82f1\u8bed\u6587\u6863\u76ee\u5f55\u4e0b\u7684 MkDocs \u914d\u7f6e\u6587\u4ef6\uff1a docs/en/docs/mkdocs.yml \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u627e\u5230 docs/features.md \u6240\u5728\u7684\u4f4d\u7f6e\u3002\u7ed3\u679c\u50cf\u8fd9\u6837\uff1a site_name : FastAPI # More stuff nav : - FastAPI : index.md - Languages : - en : / - es : /es/ - features.md \u6253\u5f00\u4f60\u6b63\u5728\u7f16\u8f91\u7684\u8bed\u8a00\u76ee\u5f55\u4e2d\u7684 MkDocs \u914d\u7f6e\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a docs/es/docs/mkdocs.yml \u5c06\u5176\u6dfb\u52a0\u5230\u4e0e\u82f1\u8bed\u6587\u6863\u5b8c\u5168\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u4f8b\u5982\uff1a site_name : FastAPI # More stuff nav : - FastAPI : index.md - Languages : - en : / - es : /es/ - features.md \u5982\u679c\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fd8\u6709\u5176\u4ed6\u6761\u76ee\uff0c\u8bf7\u786e\u4fdd\u4f60\u6240\u7ffb\u8bd1\u7684\u65b0\u6761\u76ee\u548c\u5b83\u4eec\u4e4b\u95f4\u7684\u987a\u5e8f\u4e0e\u82f1\u6587\u7248\u672c\u5b8c\u5168\u76f8\u540c\u3002 \u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u73b0\u5728\u4f60\u5c06\u770b\u5230\u6587\u6863\u5c55\u793a\u4e86\u4f60\u6240\u52a0\u5165\u7684\u65b0\u7ae0\u8282\u3002 \ud83c\udf89 \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b83\u5168\u90e8\u7ffb\u8bd1\u5b8c\u5e76\u5728\u4fdd\u5b58\u6587\u4ef6\u540e\u8fdb\u884c\u9884\u89c8\u3002 \u65b0\u8bed\u8a00 \u00b6 \u5047\u8bbe\u4f60\u60f3\u8981\u4e3a\u5c1a\u672a\u6709\u4efb\u4f55\u9875\u9762\u88ab\u7ffb\u8bd1\u7684\u8bed\u8a00\u6dfb\u52a0\u7ffb\u8bd1\u3002 \u5047\u8bbe\u4f60\u60f3\u8981\u6dfb\u52a0\u514b\u91cc\u5965\u5c14\u8bed\u7ffb\u8bd1\uff0c\u800c\u4e14\u6587\u6863\u4e2d\u8fd8\u6ca1\u6709\u8be5\u8bed\u8a00\u7684\u7ffb\u8bd1\u3002 \u70b9\u51fb\u4e0a\u9762\u63d0\u5230\u7684\u94fe\u63a5\uff0c\u53ef\u4ee5\u67e5\u5230\"\u514b\u91cc\u5965\u5c14\u8bed\"\u7684\u4ee3\u7801\u4e3a ht \u3002 \u4e0b\u4e00\u6b65\u662f\u8fd0\u884c\u811a\u672c\u4ee5\u751f\u6210\u65b0\u7684\u7ffb\u8bd1\u76ee\u5f55\uff1a // Use the command new-lang, pass the language code as a CLI argument $ python ./scripts/docs.py new-lang ht Successfully initialized: docs/ht Updating ht Updating en \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u5728\u7f16\u8f91\u5668\u4e2d\u67e5\u770b\u65b0\u521b\u5efa\u7684\u76ee\u5f55 docs/ht/ \u3002 Tip \u5728\u6dfb\u52a0\u5b9e\u9645\u7684\u7ffb\u8bd1\u4e4b\u524d\uff0c\u4ec5\u4ee5\u6b64\u521b\u5efa\u9996\u4e2a pull request \u6765\u8bbe\u5b9a\u65b0\u8bed\u8a00\u7684\u914d\u7f6e\u3002 \u8fd9\u6837\u5f53\u4f60\u5728\u7ffb\u8bd1\u7b2c\u4e00\u4e2a\u9875\u9762\u65f6\uff0c\u5176\u4ed6\u4eba\u53ef\u4ee5\u5e2e\u52a9\u7ffb\u8bd1\u5176\u4ed6\u9875\u9762\u3002\ud83d\ude80 \u9996\u5148\u7ffb\u8bd1\u6587\u6863\u4e3b\u9875 docs/ht/index.md \u3002 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u7684\"\u5df2\u6709\u8bed\u8a00\"\u7684\u6307\u5f15\u7ee7\u7eed\u8fdb\u884c\u7ffb\u8bd1\u3002 \u4e0d\u652f\u6301\u7684\u65b0\u8bed\u8a00 \u00b6 \u5982\u679c\u5728\u8fd0\u884c\u5b9e\u65f6\u670d\u52a1\u5668\u811a\u672c\u65f6\u6536\u5230\u5173\u4e8e\u4e0d\u652f\u6301\u8be5\u8bed\u8a00\u7684\u9519\u8bef\uff0c\u7c7b\u4f3c\u4e8e\uff1a raise TemplateNotFound(template) jinja2.exceptions.TemplateNotFound: partials/language/xx.html \u8fd9\u610f\u5473\u7740\u6587\u6863\u7684\u4e3b\u9898\u4e0d\u652f\u6301\u8be5\u8bed\u8a00\uff08\u5728\u8fd9\u79cd\u4f8b\u5b50\u4e2d\uff0c\u7f16\u9020\u7684\u8bed\u8a00\u4ee3\u7801\u662f xx \uff09\u3002 \u4f46\u662f\u522b\u62c5\u5fc3\uff0c\u4f60\u53ef\u4ee5\u5c06\u4e3b\u9898\u8bed\u8a00\u8bbe\u7f6e\u4e3a\u82f1\u8bed\uff0c\u7136\u540e\u7ffb\u8bd1\u6587\u6863\u7684\u5185\u5bb9\u3002 \u5982\u679c\u4f60\u9700\u8981\u8fd9\u4e48\u505a\uff0c\u7f16\u8f91\u65b0\u8bed\u8a00\u76ee\u5f55\u4e0b\u7684 mkdocs.yml \uff0c\u5b83\u5c06\u6709\u7c7b\u4f3c\u4e0b\u9762\u7684\u5185\u5bb9\uff1a site_name : FastAPI # More stuff theme : # More stuff language : xx \u5c06\u5176\u4e2d\u7684 language \u9879\u4ece xx \uff08\u4f60\u7684\u8bed\u8a00\u4ee3\u7801\uff09\u66f4\u6539\u4e3a en \u3002 \u7136\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u518d\u6b21\u542f\u52a8\u5b9e\u65f6\u670d\u52a1\u5668\u4e86\u3002 \u9884\u89c8\u7ed3\u679c \u00b6 \u5f53\u4f60\u901a\u8fc7 live \u547d\u4ee4\u4f7f\u7528 ./scripts/docs.py \u4e2d\u7684\u811a\u672c\u65f6\uff0c\u8be5\u811a\u672c\u4ec5\u5c55\u793a\u5f53\u524d\u8bed\u8a00\u5df2\u6709\u7684\u6587\u4ef6\u548c\u7ffb\u8bd1\u3002 \u4f46\u662f\u5f53\u4f60\u5b8c\u6210\u7ffb\u8bd1\u540e\uff0c\u4f60\u53ef\u4ee5\u50cf\u5728\u7ebf\u4e0a\u5c55\u793a\u4e00\u6837\u6d4b\u8bd5\u6240\u6709\u5185\u5bb9\u3002 \u4e3a\u6b64\uff0c\u9996\u5148\u6784\u5efa\u6240\u6709\u6587\u6863\uff1a // Use the command \"build-all\", this will take a bit $ python ./scripts/docs.py build-all Updating es Updating en Building docs for: en Building docs for: es Successfully built docs for: es Copying en index.md to README.md \u8fd9\u5c06\u5728 ./docs_build/ \u76ee\u5f55\u4e2d\u4e3a\u6bcf\u4e00\u79cd\u8bed\u8a00\u751f\u6210\u5168\u90e8\u7684\u6587\u6863\u3002\u8fd8\u5305\u62ec\u6dfb\u52a0\u6240\u6709\u7f3a\u5c11\u7ffb\u8bd1\u7684\u6587\u4ef6\uff0c\u5e76\u5e26\u6709\u4e00\u6761\"\u6b64\u6587\u4ef6\u8fd8\u6ca1\u6709\u7ffb\u8bd1\"\u7684\u63d0\u9192\u3002\u4f46\u662f\u4f60\u4e0d\u9700\u8981\u5bf9\u8be5\u76ee\u5f55\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u7136\u540e\uff0c\u5b83\u9488\u5bf9\u6bcf\u79cd\u8bed\u8a00\u6784\u5efa\u72ec\u7acb\u7684 MkDocs \u7ad9\u70b9\uff0c\u5c06\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5e76\u5728 ./site/ \u76ee\u5f55\u4e2d\u751f\u6210\u6700\u7ec8\u7684\u8f93\u51fa\u3002 \u7136\u540e\u4f60\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4 serve \u6765\u8fd0\u884c\u751f\u6210\u7684\u7ad9\u70b9\uff1a // Use the command \"serve\" after running \"build-all\" $ python ./scripts/docs.py serve Warning: this is a very simple server. For development, use mkdocs serve instead. This is here only to preview a site with translations already built. Make sure you run the build-all command first. Serving at: http://127.0.0.1:8008 \u6d4b\u8bd5 \u00b6 \u4f60\u53ef\u4ee5\u5728\u672c\u5730\u8fd0\u884c\u4e0b\u9762\u7684\u811a\u672c\u6765\u6d4b\u8bd5\u6240\u6709\u4ee3\u7801\u5e76\u751f\u6210 HTML \u683c\u5f0f\u7684\u8986\u76d6\u7387\u62a5\u544a\uff1a $ bash scripts/test-cov-html.sh \u8be5\u547d\u4ee4\u751f\u6210\u4e86\u4e00\u4e2a ./htmlcov/ \u76ee\u5f55\uff0c\u5982\u679c\u4f60\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 ./htmlcov/index.html \u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4ea4\u4e92\u5f0f\u5730\u6d4f\u89c8\u88ab\u6d4b\u8bd5\u6240\u8986\u76d6\u7684\u4ee3\u7801\u533a\u5757\uff0c\u5e76\u6ce8\u610f\u662f\u5426\u7f3a\u5c11\u4e86\u4efb\u4f55\u533a\u5757\u3002","title":"\u5f00\u53d1 - \u8d21\u732e"},{"location":"contributing/#-","text":"\u9996\u5148\uff0c\u4f60\u6700\u597d\u5148\u4e86\u89e3 \u5e2e\u52a9 FastAPI \u53ca\u83b7\u53d6\u5e2e\u52a9 \u7684\u57fa\u672c\u65b9\u5f0f\u3002","title":"\u5f00\u53d1 - \u8d21\u732e"},{"location":"contributing/#_1","text":"\u5982\u679c\u4f60\u5df2\u7ecf\u514b\u9686\u4e86\u6e90\u7801\u4ed3\u5e93\uff0c\u5e76\u4e14\u9700\u8981\u6df1\u5165\u7814\u7a76\u4ee3\u7801\uff0c\u4e0b\u9762\u662f\u8bbe\u7f6e\u5f00\u53d1\u73af\u5883\u7684\u6307\u5357\u3002","title":"\u5f00\u53d1"},{"location":"contributing/#venv","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 Python \u7684 venv \u6a21\u5757\u5728\u4e00\u4e2a\u76ee\u5f55\u4e2d\u521b\u5efa\u865a\u62df\u73af\u5883\uff1a $ python -m venv env \u8fd9\u5c06\u4f7f\u7528 Python \u7a0b\u5e8f\u521b\u5efa\u4e00\u4e2a ./env/ \u76ee\u5f55\uff0c\u7136\u540e\u4f60\u5c06\u80fd\u591f\u4e3a\u8fd9\u4e2a\u9694\u79bb\u7684\u73af\u5883\u5b89\u88c5\u8f6f\u4ef6\u5305\u3002","title":"\u901a\u8fc7 venv \u7ba1\u7406\u865a\u62df\u73af\u5883"},{"location":"contributing/#_2","text":"\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u6fc0\u6d3b\u65b0\u73af\u5883\uff1a Linux, macOS Windows PowerShell Windows Bash $ source ./env/bin/activate $ . \\e nv \\S cripts \\A ctivate.ps1 Or if you use Bash for Windows (e.g. Git Bash ): $ source ./env/Scripts/activate \u8981\u68c0\u67e5\u64cd\u4f5c\u662f\u5426\u6210\u529f\uff0c\u8fd0\u884c\uff1a Linux, macOS, Windows Bash Windows PowerShell $ which pip some/directory/fastapi/env/bin/pip $ Get-Command pip some/directory/fastapi/env/bin/pip \u5982\u679c\u663e\u793a pip \u7a0b\u5e8f\u6587\u4ef6\u4f4d\u4e8e env/bin/pip \u5219\u8bf4\u660e\u6fc0\u6d3b\u6210\u529f\u3002 \ud83c\udf89 Tip \u6bcf\u4e00\u6b21\u4f60\u5728\u8be5\u73af\u5883\u4e0b\u4f7f\u7528 pip \u5b89\u88c5\u4e86\u65b0\u8f6f\u4ef6\u5305\u65f6\uff0c\u8bf7\u518d\u6b21\u6fc0\u6d3b\u8be5\u73af\u5883\u3002 \u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u4f60\u5728\u4f7f\u7528\u7531\u8be5\u8f6f\u4ef6\u5305\u5b89\u88c5\u7684\u7ec8\u7aef\u7a0b\u5e8f\uff08\u5982 flit \uff09\u65f6\u4f7f\u7528\u7684\u662f\u5f53\u524d\u865a\u62df\u73af\u5883\u4e2d\u7684\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u7684\u53ef\u80fd\u662f\u5168\u5c40\u5b89\u88c5\u7684\u7a0b\u5e8f\u3002","title":"\u6fc0\u6d3b\u865a\u62df\u73af\u5883"},{"location":"contributing/#flit","text":"FastAPI \u4f7f\u7528 Flit \u6765\u6784\u5efa\u3001\u6253\u5305\u548c\u53d1\u5e03\u9879\u76ee\u3002 \u5982\u4e0a\u6240\u8ff0\u6fc0\u6d3b\u73af\u5883\u540e\uff0c\u5b89\u88c5 flit \uff1a $ pip install flit ---> 100% \u73b0\u5728\u91cd\u65b0\u6fc0\u6d3b\u73af\u5883\uff0c\u4ee5\u786e\u4fdd\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u662f\u521a\u521a\u5b89\u88c5\u7684 flit \uff08\u800c\u4e0d\u662f\u5168\u5c40\u73af\u5883\u7684\uff09\u3002 \u7136\u540e\u4f7f\u7528 flit \u6765\u5b89\u88c5\u5f00\u53d1\u4f9d\u8d56\uff1a Linux, macOS Windows $ flit install --deps develop --symlink ---> 100% If you are on Windows, use --pth-file instead of --symlink : $ flit install --deps develop --pth-file ---> 100% \u8fd9\u5c06\u5728\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5\u6240\u6709\u4f9d\u8d56\u548c\u672c\u5730\u7248\u672c\u7684 FastAPI\u3002","title":"Flit"},{"location":"contributing/#fastapi","text":"\u5982\u679c\u4f60\u521b\u5efa\u4e00\u4e2a\u5bfc\u5165\u5e76\u4f7f\u7528 FastAPI \u7684 Python \u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528\u865a\u62df\u73af\u5883\u4e2d\u7684 Python \u8fd0\u884c\u5b83\uff0c\u5b83\u5c06\u4f7f\u7528\u4f60\u672c\u5730\u7684 FastAPI \u6e90\u7801\u3002 \u5e76\u4e14\u5982\u679c\u4f60\u66f4\u6539\u8be5\u672c\u5730 FastAPI \u7684\u6e90\u7801\uff0c\u7531\u4e8e\u5b83\u662f\u901a\u8fc7 --symlink \uff08\u6216 Windows \u4e0a\u7684 --pth-file \uff09\u5b89\u88c5\u7684\uff0c\u5f53\u4f60\u518d\u6b21\u8fd0\u884c\u90a3\u4e2a Python \u6587\u4ef6\uff0c\u5b83\u5c06\u4f7f\u7528\u4f60\u521a\u521a\u7f16\u8f91\u8fc7\u7684\u6700\u65b0\u7248\u672c\u7684 FastAPI\u3002 \u8fd9\u6837\uff0c\u4f60\u4e0d\u5fc5\u518d\u53bb\u91cd\u65b0\"\u5b89\u88c5\"\u4f60\u7684\u672c\u5730\u7248\u672c\u5373\u53ef\u6d4b\u8bd5\u6240\u6709\u66f4\u6539\u3002","title":"\u4f7f\u7528\u672c\u5730 FastAPI"},{"location":"contributing/#_3","text":"\u4f60\u53ef\u4ee5\u8fd0\u884c\u4e0b\u9762\u7684\u811a\u672c\u6765\u683c\u5f0f\u5316\u548c\u6e05\u7406\u6240\u6709\u4ee3\u7801\uff1a $ bash scripts/format.sh \u5b83\u8fd8\u4f1a\u81ea\u52a8\u5bf9\u6240\u6709\u5bfc\u5165\u4ee3\u7801\u8fdb\u884c\u6574\u7406\u3002 \u4e3a\u4e86\u4f7f\u6574\u7406\u6b63\u786e\u8fdb\u884c\uff0c\u4f60\u9700\u8981\u5728\u5f53\u524d\u73af\u5883\u4e2d\u5b89\u88c5\u672c\u5730\u7684 FastAPI\uff0c\u5373\u5728\u8fd0\u884c\u4e0a\u8ff0\u6bb5\u843d\u4e2d\u7684\u547d\u4ee4\u65f6\u6dfb\u52a0 --symlink \uff08\u6216 Windows \u4e0a\u7684 --pth-file \uff09\u3002","title":"\u683c\u5f0f\u5316"},{"location":"contributing/#_4","text":"\u8fd8\u6709\u53e6\u4e00\u4e2a\u811a\u672c\u53ef\u4ee5\u683c\u5f0f\u5316\u6240\u6709\u5bfc\u5165\uff0c\u5e76\u786e\u4fdd\u4f60\u6ca1\u6709\u672a\u4f7f\u7528\u7684\u5bfc\u5165\u4ee3\u7801\uff1a $ bash scripts/format-imports.sh \u7531\u4e8e\u5b83\u4f9d\u6b21\u8fd0\u884c\u4e86\u591a\u4e2a\u547d\u4ee4\uff0c\u5e76\u4fee\u6539\u548c\u8fd8\u539f\u4e86\u8bb8\u591a\u6587\u4ef6\uff0c\u6240\u4ee5\u8fd0\u884c\u65f6\u95f4\u4f1a\u66f4\u957f\u4e00\u4e9b\uff0c\u56e0\u6b64\u7ecf\u5e38\u5730\u4f7f\u7528 scripts/format.sh \u7136\u540e\u4ec5\u5728\u63d0\u4ea4\u524d\u6267\u884c scripts/format-imports.sh \u4f1a\u66f4\u597d\u4e00\u4e9b\u3002","title":"\u683c\u5f0f\u5316\u5bfc\u5165"},{"location":"contributing/#_5","text":"\u9996\u5148\uff0c\u8bf7\u786e\u4fdd\u6309\u4e0a\u8ff0\u6b65\u9aa4\u8bbe\u7f6e\u597d\u73af\u5883\uff0c\u8fd9\u5c06\u5b89\u88c5\u6240\u6709\u9700\u8981\u7684\u4f9d\u8d56\u3002 \u6587\u6863\u4f7f\u7528 MkDocs \u751f\u6210\u3002 \u5e76\u4e14\u5728 ./scripts/docs.py \u4e2d\u8fd8\u6709\u9002\u7528\u7684\u989d\u5916\u5de5\u5177/\u811a\u672c\u6765\u5904\u7406\u7ffb\u8bd1\u3002 Tip \u4f60\u4e0d\u9700\u8981\u53bb\u4e86\u89e3 ./scripts/docs.py \u4e2d\u7684\u4ee3\u7801\uff0c\u53ea\u9700\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528\u5b83\u5373\u53ef\u3002 \u6240\u6709\u6587\u6863\u5747\u5728 ./docs/en/ \u76ee\u5f55\u4e2d\u4ee5 Markdown \u6587\u4ef6\u683c\u5f0f\u4fdd\u5b58\u3002 \u8bb8\u591a\u7684\u6559\u7a0b\u7ae0\u8282\u91cc\u5305\u542b\u6709\u4ee3\u7801\u5757\u3002 \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5757\u662f\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u7684\u771f\u5b9e\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5757\u4e0d\u662f\u5199\u5728 Markdown \u6587\u4ef6\u5185\u7684\uff0c\u5b83\u4eec\u662f\u4f4d\u4e8e ./docs_src/ \u76ee\u5f55\u4e2d\u7684 Python \u6587\u4ef6\u3002 \u751f\u6210\u7ad9\u70b9\u65f6\uff0c\u8fd9\u4e9b Python \u6587\u4ef6\u4f1a\u88ab\u5305\u542b/\u6ce8\u5165\u5230\u6587\u6863\u4e2d\u3002","title":"\u6587\u6863"},{"location":"contributing/#_6","text":"\u5927\u591a\u6570\u7684\u6d4b\u8bd5\u5b9e\u9645\u4e0a\u90fd\u662f\u9488\u5bf9\u6587\u6863\u4e2d\u7684\u793a\u4f8b\u6e90\u6587\u4ef6\u8fd0\u884c\u7684\u3002 \u8fd9\u6709\u52a9\u4e8e\u786e\u4fdd\uff1a \u6587\u6863\u59cb\u7ec8\u662f\u6700\u65b0\u7684\u3002 \u6587\u6863\u793a\u4f8b\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u3002 \u7edd\u5927\u591a\u6570\u7279\u6027\u65e2\u5728\u6587\u6863\u4e2d\u5f97\u4ee5\u9610\u8ff0\uff0c\u53c8\u901a\u8fc7\u6d4b\u8bd5\u8986\u76d6\u8fdb\u884c\u4fdd\u969c\u3002 \u5728\u672c\u5730\u5f00\u53d1\u671f\u95f4\uff0c\u6709\u4e00\u4e2a\u811a\u672c\u53ef\u4ee5\u5b9e\u65f6\u91cd\u8f7d\u5730\u6784\u5efa\u7ad9\u70b9\u5e76\u7528\u6765\u68c0\u67e5\u6240\u505a\u7684\u4efb\u4f55\u66f4\u6539\uff1a $ python ./scripts/docs.py live <span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008 <span style=\"color: green;\">[INFO]</span> Start watching changes <span style=\"color: green;\">[INFO]</span> Start detecting changes \u5b83\u5c06\u5728 http://127.0.0.1:8008 \u63d0\u4f9b\u5bf9\u6587\u6863\u7684\u8bbf\u95ee\u3002 \u8fd9\u6837\uff0c\u4f60\u53ef\u4ee5\u7f16\u8f91\u6587\u6863/\u6e90\u6587\u4ef6\u5e76\u5b9e\u65f6\u67e5\u770b\u66f4\u6539\u3002","title":"\u7528\u4e8e\u6d4b\u8bd5\u7684\u6587\u6863"},{"location":"contributing/#typer-cli","text":"\u672c\u6307\u5f15\u5411\u4f60\u5c55\u793a\u4e86\u5982\u4f55\u76f4\u63a5\u7528 python \u7a0b\u5e8f\u8fd0\u884c ./scripts/docs.py \u4e2d\u7684\u811a\u672c\u3002 \u4f46\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 Typer CLI \uff0c\u800c\u4e14\u5728\u5b89\u88c5\u4e86\u8865\u5168\u529f\u80fd\u540e\uff0c\u4f60\u5c06\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e2d\u5bf9\u547d\u4ee4\u8fdb\u884c\u81ea\u52a8\u8865\u5168\u3002 \u5982\u679c\u4f60\u6253\u7b97\u5b89\u88c5 Typer CLI \uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\u81ea\u52a8\u8865\u5168\u529f\u80fd\uff1a $ typer --install-completion zsh completion installed in /home/user/.bashrc. Completion will take effect once you restart the terminal.","title":"Typer CLI \uff08\u53ef\u9009\uff09"},{"location":"contributing/#_7","text":"\u5982\u679c\u4f60\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u8fd0\u884c\u793a\u4f8b\u7a0b\u5e8f\uff1a $ uvicorn tutorial001:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u7531\u4e8e Uvicorn \u9ed8\u8ba4\u4f7f\u7528 8000 \u7aef\u53e3 \uff0c\u56e0\u6b64\u8fd0\u884c\u5728 8008 \u7aef\u53e3\u4e0a\u7684\u6587\u6863\u4e0d\u4f1a\u4e0e\u4e4b\u51b2\u7a81\u3002","title":"\u5e94\u7528\u548c\u6587\u6863\u540c\u65f6\u8fd0\u884c"},{"location":"contributing/#_8","text":"\u975e\u5e38\u611f\u8c22\u4f60\u80fd\u591f\u53c2\u4e0e\u6587\u6863\u7684\u7ffb\u8bd1\uff01\u8fd9\u9879\u5de5\u4f5c\u9700\u8981\u793e\u533a\u7684\u5e2e\u52a9\u624d\u80fd\u5b8c\u6210\u3002 \ud83c\udf0e \ud83d\ude80 \u4ee5\u4e0b\u662f\u53c2\u4e0e\u5e2e\u52a9\u7ffb\u8bd1\u7684\u6b65\u9aa4\u3002","title":"\u7ffb\u8bd1"},{"location":"contributing/#_9","text":"\u5728\u5f53\u524d \u5df2\u6709\u7684 pull requests \u4e2d\u67e5\u627e\u4f60\u4f7f\u7528\u7684\u8bed\u8a00\uff0c\u6dfb\u52a0\u8981\u6c42\u4fee\u6539\u6216\u540c\u610f\u5408\u5e76\u7684\u8bc4\u5ba1\u610f\u89c1\u3002 Tip \u4f60\u53ef\u4ee5\u4e3a\u5df2\u6709\u7684 pull requests \u6dfb\u52a0\u5305\u542b\u4fee\u6539\u5efa\u8bae\u7684\u8bc4\u8bba \u3002 \u8be6\u60c5\u53ef\u67e5\u770b\u5173\u4e8e \u6dfb\u52a0 pull request \u8bc4\u5ba1\u610f\u89c1 \u4ee5\u540c\u610f\u5408\u5e76\u6216\u8981\u6c42\u4fee\u6539\u7684\u6587\u6863\u3002 \u5728 issues \u4e2d\u67e5\u627e\u662f\u5426\u6709\u5bf9\u4f60\u6240\u7528\u8bed\u8a00\u6240\u8fdb\u884c\u7684\u534f\u4f5c\u7ffb\u8bd1\u3002 \u6bcf\u7ffb\u8bd1\u4e00\u4e2a\u9875\u9762\u65b0\u589e\u4e00\u4e2a pull request\u3002\u8fd9\u5c06\u4f7f\u5176\u4ed6\u4eba\u66f4\u5bb9\u6613\u5bf9\u5176\u8fdb\u884c\u8bc4\u5ba1\u3002 \u5bf9\u4e8e\u6211\uff08\u8bd1\u6ce8\uff1a\u4f5c\u8005\u4f7f\u7528\u897f\u73ed\u7259\u8bed\u548c\u82f1\u8bed\uff09\u4e0d\u61c2\u7684\u8bed\u8a00\uff0c\u6211\u5c06\u5728\u7b49\u5f85\u5176\u4ed6\u4eba\u8bc4\u5ba1\u7ffb\u8bd1\u4e4b\u540e\u5c06\u5176\u5408\u5e76\u3002 \u4f60\u8fd8\u53ef\u4ee5\u67e5\u770b\u662f\u5426\u6709\u4f60\u6240\u7528\u8bed\u8a00\u7684\u7ffb\u8bd1\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u8bc4\u5ba1\uff0c\u8fd9\u5c06\u5e2e\u52a9\u6211\u4e86\u89e3\u7ffb\u8bd1\u662f\u5426\u6b63\u786e\u4ee5\u53ca\u80fd\u5426\u5c06\u5176\u5408\u5e76\u3002 \u4f7f\u7528\u76f8\u540c\u7684 Python \u793a\u4f8b\u5e76\u4e14\u4ec5\u7ffb\u8bd1\u6587\u6863\u4e2d\u7684\u6587\u672c\u3002\u65e0\u9700\u8fdb\u884c\u4efb\u4f55\u5176\u4ed6\u66f4\u6539\u793a\u4f8b\u4e5f\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u4f7f\u7528\u76f8\u540c\u7684\u56fe\u7247\u3001\u6587\u4ef6\u540d\u4ee5\u53ca\u94fe\u63a5\u5730\u5740\u3002\u65e0\u9700\u8fdb\u884c\u4efb\u4f55\u5176\u4ed6\u8c03\u6574\u6765\u8ba9\u5b83\u4eec\u517c\u5bb9\u3002 \u4f60\u53ef\u4ee5\u4ece ISO 639-1 \u4ee3\u7801\u5217\u8868 \u8868\u4e2d\u67e5\u627e\u4f60\u60f3\u8981\u7ffb\u8bd1\u8bed\u8a00\u7684\u4e24\u4f4d\u5b57\u6bcd\u4ee3\u7801\u3002","title":"\u5efa\u8bae\u548c\u6307\u5357"},{"location":"contributing/#_10","text":"\u5047\u8bbe\u4f60\u60f3\u5c06\u67d0\u4e2a\u9875\u9762\u7ffb\u8bd1\u6210\u5df2\u7ecf\u7ffb\u8bd1\u4e86\u4e00\u4e9b\u9875\u9762\u7684\u8bed\u8a00\uff0c\u4f8b\u5982\u897f\u73ed\u7259\u8bed\u3002 \u5bf9\u4e8e\u897f\u73ed\u7259\u8bed\u6765\u8bf4\uff0c\u5b83\u7684\u4e24\u4f4d\u5b57\u6bcd\u4ee3\u7801\u662f es \u3002\u6240\u4ee5\u897f\u73ed\u7259\u8bed\u7ffb\u8bd1\u7684\u76ee\u5f55\u4f4d\u4e8e docs/es/ \u3002 Tip \u4e3b\u8981\uff08\"\u5b98\u65b9\"\uff09\u8bed\u8a00\u662f\u82f1\u8bed\uff0c\u4f4d\u4e8e docs/en/ \u76ee\u5f55\u3002 \u73b0\u5728\u4e3a\u897f\u73ed\u7259\u8bed\u6587\u6863\u8fd0\u884c\u5b9e\u65f6\u670d\u52a1\u5668\uff1a // Use the command \"live\" and pass the language code as a CLI argument $ python ./scripts/docs.py live es <span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008 <span style=\"color: green;\">[INFO]</span> Start watching changes <span style=\"color: green;\">[INFO]</span> Start detecting changes \u73b0\u5728\u4f60\u53ef\u4ee5\u8bbf\u95ee http://127.0.0.1:8008 \u5b9e\u65f6\u67e5\u770b\u4f60\u6240\u505a\u7684\u66f4\u6539\u3002 \u5982\u679c\u4f60\u67e5\u770b FastAPI \u7684\u7ebf\u4e0a\u6587\u6863\u7f51\u7ad9\uff0c\u4f1a\u770b\u5230\u6bcf\u79cd\u8bed\u8a00\u90fd\u6709\u6240\u6709\u9875\u9762\u3002\u4f46\u662f\u67d0\u4e9b\u9875\u9762\u5e76\u672a\u88ab\u7ffb\u8bd1\u5e76\u4e14\u4f1a\u6709\u4e00\u5904\u5173\u4e8e\u7f3a\u5c11\u7ffb\u8bd1\u7684\u63d0\u793a\u3002 \u4f46\u662f\u5f53\u4f60\u50cf\u4e0a\u9762\u8fd9\u6837\u5728\u672c\u5730\u8fd0\u884c\u6587\u6863\u65f6\uff0c\u4f60\u53ea\u4f1a\u770b\u5230\u5df2\u7ecf\u7ffb\u8bd1\u7684\u9875\u9762\u3002 \u73b0\u5728\u5047\u8bbe\u4f60\u8981\u4e3a Features \u7ae0\u8282\u6dfb\u52a0\u7ffb\u8bd1\u3002 \u590d\u5236\u4e0b\u9762\u7684\u6587\u4ef6\uff1a docs/en/docs/features.md \u7c98\u8d34\u5230\u4f60\u60f3\u8981\u7ffb\u8bd1\u8bed\u8a00\u76ee\u5f55\u7684\u76f8\u540c\u4f4d\u7f6e\uff0c\u6bd4\u5982\uff1a docs/es/docs/features.md Tip \u6ce8\u610f\u8def\u5f84\u548c\u6587\u4ef6\u540d\u7684\u552f\u4e00\u53d8\u5316\u662f\u8bed\u8a00\u4ee3\u7801\uff0c\u4ece en \u66f4\u6539\u4e3a es \u3002 \u73b0\u5728\u6253\u5f00\u4f4d\u4e8e\u82f1\u8bed\u6587\u6863\u76ee\u5f55\u4e0b\u7684 MkDocs \u914d\u7f6e\u6587\u4ef6\uff1a docs/en/docs/mkdocs.yml \u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u627e\u5230 docs/features.md \u6240\u5728\u7684\u4f4d\u7f6e\u3002\u7ed3\u679c\u50cf\u8fd9\u6837\uff1a site_name : FastAPI # More stuff nav : - FastAPI : index.md - Languages : - en : / - es : /es/ - features.md \u6253\u5f00\u4f60\u6b63\u5728\u7f16\u8f91\u7684\u8bed\u8a00\u76ee\u5f55\u4e2d\u7684 MkDocs \u914d\u7f6e\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a docs/es/docs/mkdocs.yml \u5c06\u5176\u6dfb\u52a0\u5230\u4e0e\u82f1\u8bed\u6587\u6863\u5b8c\u5168\u76f8\u540c\u7684\u4f4d\u7f6e\uff0c\u4f8b\u5982\uff1a site_name : FastAPI # More stuff nav : - FastAPI : index.md - Languages : - en : / - es : /es/ - features.md \u5982\u679c\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fd8\u6709\u5176\u4ed6\u6761\u76ee\uff0c\u8bf7\u786e\u4fdd\u4f60\u6240\u7ffb\u8bd1\u7684\u65b0\u6761\u76ee\u548c\u5b83\u4eec\u4e4b\u95f4\u7684\u987a\u5e8f\u4e0e\u82f1\u6587\u7248\u672c\u5b8c\u5168\u76f8\u540c\u3002 \u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u73b0\u5728\u4f60\u5c06\u770b\u5230\u6587\u6863\u5c55\u793a\u4e86\u4f60\u6240\u52a0\u5165\u7684\u65b0\u7ae0\u8282\u3002 \ud83c\udf89 \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b83\u5168\u90e8\u7ffb\u8bd1\u5b8c\u5e76\u5728\u4fdd\u5b58\u6587\u4ef6\u540e\u8fdb\u884c\u9884\u89c8\u3002","title":"\u5df2\u6709\u7684\u8bed\u8a00"},{"location":"contributing/#_11","text":"\u5047\u8bbe\u4f60\u60f3\u8981\u4e3a\u5c1a\u672a\u6709\u4efb\u4f55\u9875\u9762\u88ab\u7ffb\u8bd1\u7684\u8bed\u8a00\u6dfb\u52a0\u7ffb\u8bd1\u3002 \u5047\u8bbe\u4f60\u60f3\u8981\u6dfb\u52a0\u514b\u91cc\u5965\u5c14\u8bed\u7ffb\u8bd1\uff0c\u800c\u4e14\u6587\u6863\u4e2d\u8fd8\u6ca1\u6709\u8be5\u8bed\u8a00\u7684\u7ffb\u8bd1\u3002 \u70b9\u51fb\u4e0a\u9762\u63d0\u5230\u7684\u94fe\u63a5\uff0c\u53ef\u4ee5\u67e5\u5230\"\u514b\u91cc\u5965\u5c14\u8bed\"\u7684\u4ee3\u7801\u4e3a ht \u3002 \u4e0b\u4e00\u6b65\u662f\u8fd0\u884c\u811a\u672c\u4ee5\u751f\u6210\u65b0\u7684\u7ffb\u8bd1\u76ee\u5f55\uff1a // Use the command new-lang, pass the language code as a CLI argument $ python ./scripts/docs.py new-lang ht Successfully initialized: docs/ht Updating ht Updating en \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u5728\u7f16\u8f91\u5668\u4e2d\u67e5\u770b\u65b0\u521b\u5efa\u7684\u76ee\u5f55 docs/ht/ \u3002 Tip \u5728\u6dfb\u52a0\u5b9e\u9645\u7684\u7ffb\u8bd1\u4e4b\u524d\uff0c\u4ec5\u4ee5\u6b64\u521b\u5efa\u9996\u4e2a pull request \u6765\u8bbe\u5b9a\u65b0\u8bed\u8a00\u7684\u914d\u7f6e\u3002 \u8fd9\u6837\u5f53\u4f60\u5728\u7ffb\u8bd1\u7b2c\u4e00\u4e2a\u9875\u9762\u65f6\uff0c\u5176\u4ed6\u4eba\u53ef\u4ee5\u5e2e\u52a9\u7ffb\u8bd1\u5176\u4ed6\u9875\u9762\u3002\ud83d\ude80 \u9996\u5148\u7ffb\u8bd1\u6587\u6863\u4e3b\u9875 docs/ht/index.md \u3002 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u7684\"\u5df2\u6709\u8bed\u8a00\"\u7684\u6307\u5f15\u7ee7\u7eed\u8fdb\u884c\u7ffb\u8bd1\u3002","title":"\u65b0\u8bed\u8a00"},{"location":"contributing/#_12","text":"\u5982\u679c\u5728\u8fd0\u884c\u5b9e\u65f6\u670d\u52a1\u5668\u811a\u672c\u65f6\u6536\u5230\u5173\u4e8e\u4e0d\u652f\u6301\u8be5\u8bed\u8a00\u7684\u9519\u8bef\uff0c\u7c7b\u4f3c\u4e8e\uff1a raise TemplateNotFound(template) jinja2.exceptions.TemplateNotFound: partials/language/xx.html \u8fd9\u610f\u5473\u7740\u6587\u6863\u7684\u4e3b\u9898\u4e0d\u652f\u6301\u8be5\u8bed\u8a00\uff08\u5728\u8fd9\u79cd\u4f8b\u5b50\u4e2d\uff0c\u7f16\u9020\u7684\u8bed\u8a00\u4ee3\u7801\u662f xx \uff09\u3002 \u4f46\u662f\u522b\u62c5\u5fc3\uff0c\u4f60\u53ef\u4ee5\u5c06\u4e3b\u9898\u8bed\u8a00\u8bbe\u7f6e\u4e3a\u82f1\u8bed\uff0c\u7136\u540e\u7ffb\u8bd1\u6587\u6863\u7684\u5185\u5bb9\u3002 \u5982\u679c\u4f60\u9700\u8981\u8fd9\u4e48\u505a\uff0c\u7f16\u8f91\u65b0\u8bed\u8a00\u76ee\u5f55\u4e0b\u7684 mkdocs.yml \uff0c\u5b83\u5c06\u6709\u7c7b\u4f3c\u4e0b\u9762\u7684\u5185\u5bb9\uff1a site_name : FastAPI # More stuff theme : # More stuff language : xx \u5c06\u5176\u4e2d\u7684 language \u9879\u4ece xx \uff08\u4f60\u7684\u8bed\u8a00\u4ee3\u7801\uff09\u66f4\u6539\u4e3a en \u3002 \u7136\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u518d\u6b21\u542f\u52a8\u5b9e\u65f6\u670d\u52a1\u5668\u4e86\u3002","title":"\u4e0d\u652f\u6301\u7684\u65b0\u8bed\u8a00"},{"location":"contributing/#_13","text":"\u5f53\u4f60\u901a\u8fc7 live \u547d\u4ee4\u4f7f\u7528 ./scripts/docs.py \u4e2d\u7684\u811a\u672c\u65f6\uff0c\u8be5\u811a\u672c\u4ec5\u5c55\u793a\u5f53\u524d\u8bed\u8a00\u5df2\u6709\u7684\u6587\u4ef6\u548c\u7ffb\u8bd1\u3002 \u4f46\u662f\u5f53\u4f60\u5b8c\u6210\u7ffb\u8bd1\u540e\uff0c\u4f60\u53ef\u4ee5\u50cf\u5728\u7ebf\u4e0a\u5c55\u793a\u4e00\u6837\u6d4b\u8bd5\u6240\u6709\u5185\u5bb9\u3002 \u4e3a\u6b64\uff0c\u9996\u5148\u6784\u5efa\u6240\u6709\u6587\u6863\uff1a // Use the command \"build-all\", this will take a bit $ python ./scripts/docs.py build-all Updating es Updating en Building docs for: en Building docs for: es Successfully built docs for: es Copying en index.md to README.md \u8fd9\u5c06\u5728 ./docs_build/ \u76ee\u5f55\u4e2d\u4e3a\u6bcf\u4e00\u79cd\u8bed\u8a00\u751f\u6210\u5168\u90e8\u7684\u6587\u6863\u3002\u8fd8\u5305\u62ec\u6dfb\u52a0\u6240\u6709\u7f3a\u5c11\u7ffb\u8bd1\u7684\u6587\u4ef6\uff0c\u5e76\u5e26\u6709\u4e00\u6761\"\u6b64\u6587\u4ef6\u8fd8\u6ca1\u6709\u7ffb\u8bd1\"\u7684\u63d0\u9192\u3002\u4f46\u662f\u4f60\u4e0d\u9700\u8981\u5bf9\u8be5\u76ee\u5f55\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u7136\u540e\uff0c\u5b83\u9488\u5bf9\u6bcf\u79cd\u8bed\u8a00\u6784\u5efa\u72ec\u7acb\u7684 MkDocs \u7ad9\u70b9\uff0c\u5c06\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5e76\u5728 ./site/ \u76ee\u5f55\u4e2d\u751f\u6210\u6700\u7ec8\u7684\u8f93\u51fa\u3002 \u7136\u540e\u4f60\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4 serve \u6765\u8fd0\u884c\u751f\u6210\u7684\u7ad9\u70b9\uff1a // Use the command \"serve\" after running \"build-all\" $ python ./scripts/docs.py serve Warning: this is a very simple server. For development, use mkdocs serve instead. This is here only to preview a site with translations already built. Make sure you run the build-all command first. Serving at: http://127.0.0.1:8008","title":"\u9884\u89c8\u7ed3\u679c"},{"location":"contributing/#_14","text":"\u4f60\u53ef\u4ee5\u5728\u672c\u5730\u8fd0\u884c\u4e0b\u9762\u7684\u811a\u672c\u6765\u6d4b\u8bd5\u6240\u6709\u4ee3\u7801\u5e76\u751f\u6210 HTML \u683c\u5f0f\u7684\u8986\u76d6\u7387\u62a5\u544a\uff1a $ bash scripts/test-cov-html.sh \u8be5\u547d\u4ee4\u751f\u6210\u4e86\u4e00\u4e2a ./htmlcov/ \u76ee\u5f55\uff0c\u5982\u679c\u4f60\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 ./htmlcov/index.html \u6587\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4ea4\u4e92\u5f0f\u5730\u6d4f\u89c8\u88ab\u6d4b\u8bd5\u6240\u8986\u76d6\u7684\u4ee3\u7801\u533a\u5757\uff0c\u5e76\u6ce8\u610f\u662f\u5426\u7f3a\u5c11\u4e86\u4efb\u4f55\u533a\u5757\u3002","title":"\u6d4b\u8bd5"},{"location":"external-links/","text":"External Links and Articles \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI has a great community constantly growing. There are many posts, articles, tools, and projects, related to FastAPI . Here's an incomplete list of some of them. Tip If you have an article, project, tool, or anything related to FastAPI that is not yet listed here, create a Pull Request adding it . Articles \u00b6 English \u00b6 Building the Poll App From Django Tutorial With FastAPI And React by Jean-Baptiste Rocher . Seamless FastAPI Configuration with ConfZ by Silvan Melchior . 5 Advanced Features of FastAPI You Should Try by Kaustubh Gupta . Deploying ML Models as API Using FastAPI and Heroku by Kaustubh Gupta . Using GitHub Actions to Deploy a FastAPI Project to Heroku by Somraj Saha . How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI by @pystar . Building a realtime ticket booking solution with Kafka, FastAPI, and Ably by Ben Gamble . Building simple E-Commerce with NuxtJS and FastAPI by Shahriyar(Shako) Rzayev . Serve a machine learning model using Sklearn, FastAPI and Docker by Rodrigo Arenas . Building an API with FastAPI and Supabase and Deploying on Deta by Yashasvi Singh . Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server by Navule Pavan Kumar Rao . Python Facebook messenger webhook with FastAPI on Glitch by Patrick Ladon . Authenticate Your FastAPI App with auth0 by Dom Patmore . Deploy a dockerized FastAPI application to AWS by Valon Januzaj . FastAPI for Flask Users by Amit Chaudhary . How to monitor your FastAPI service by Louis Guitton . HTTP server to display desktop notifications by Julien Harbulot . Creating a CRUD App with FastAPI (Part one) by Precious Ndubueze . Build And Host Fast Data Science Applications Using FastAPI by Farhad Malik . Deploy FastAPI on Azure App Service by Navule Pavan Kumar Rao . Machine learning model serving in Python using FastAPI and streamlit by Davide Fiocco . Introducing Dispatch by Netflix . Using FastAPI with Django by Stavros Korokithakis . Build a Secure Twilio Webhook with Python and FastAPI by Twilio . Build a web API from scratch with FastAPI - the workshop by Sebasti\u00e1n Ram\u00edrez (tiangolo) . FastAPI + Zeit.co = \ud83d\ude80 by Paul Sec . Build simple API service with Python FastAPI \u2014 Part 1 by cuongld2 . Microservice in Python using FastAPI by Paurakh Sharma Humagain . Real-time Notifications with Python and Postgres by Guillermo Cruz . Apache Kafka producer and consumer with FastAPI and aiokafka by Benjamin Ramser . Create and Deploy FastAPI app to Heroku without using Docker by Navule Pavan Kumar Rao . How to continuously deploy a FastAPI to AWS Lambda with AWS SAM by Benjamin Ramser . Another Boilerplate to FastAPI: Azure Pipeline CI + Pytest by Arthur Henrique . Deploy Machine Learning Models with Keras, FastAPI, Redis and Docker by Shane Soh . Towards Data Science: Deploying Iris Classifications with FastAPI and Docker by Mandy Gu . TestDriven.io: Developing and Testing an Asynchronous API with FastAPI and Pytest by Michael Herman . How To Deploy Tensorflow 2.0 Models As An API Service With FastAPI & Docker by Bernard Brenyah . Why I'm Leaving Flask by Dylan Anthony . Setting up Tortoise ORM with FastAPI by Rob Wagner . Using Docker Compose to deploy a lightweight Python REST API with a job queue by Mike Moritz . A FastAPI and Swagger UI visual cheatsheet by @euri10 . Uber: Ludwig v0.2 Adds New Features and Other Improvements to its Deep Learning Toolbox [including a FastAPI server] by Uber Engineering . How to Deploy a Machine Learning Model by Maarten Grootendorst . JWT Authentication with FastAPI and AWS Cognito by Johannes Gontrum . Top 5 Asynchronous Web Frameworks for Python by Ankush Thakur . Deploying a scikit-learn model with ONNX and FastAPI by Nico Axtmann . FastAPI authentication revisited: Enabling API key authentication by Nils de Bruin . FastAPI and Scikit-Learn: Easily Deploy Models by Nick Cortale . Introduction to the fastapi python framework by Errieta Kostala . FastAPI\u200a\u2014\u200aHow to add basic and cookie authentication by Nils de Bruin . FastAPI\u200a\u2014\u200aGoogle as an external authentication provider by Nils de Bruin . FastAPI/Starlette debug vs prod by William Hayes . Developing FastAPI Application using K8s & AWS by Mukul Mantosh . Japanese \u00b6 [FastAPI] Python\u88fd\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI\u306b\u5165\u9580\u3059\u308b by @bee2 . Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03 (Django, Flask, responder, FastAPI, japronto) by @bee2 . \u3010\u7b2c4\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u7ba1\u7406\u8005\u30da\u30fc\u30b8\u6539\u826f\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c3\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u8a8d\u8a3c\u30fb\u30e6\u30fc\u30b6\u767b\u9332\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c2\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u30e2\u30c7\u30eb\u69cb\u7bc9\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c1\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u74b0\u5883\u69cb\u7bc9\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u958b\u767a\u8005\u5411\u3051\u306eDocker\u306b\u3088\u308bPython\u958b\u767a\u74b0\u5883\u69cb\u7bc9 by Hikaru Takahashi . FastAPI\u3067POST\u3055\u308c\u305fJSON\u306e\u30ec\u30b9\u30dd\u30f3\u30b9body\u3092\u53d7\u3051\u53d6\u308b by @angel_katayoku . FastAPI\u3092MySQL\u3068\u63a5\u7d9a\u3057\u3066Docker\u3067\u7ba1\u7406\u3057\u3066\u307f\u308b by @angel_katayoku . FastAPI\u3067CORS\u3092\u56de\u907f by @angel_katayoku . python\u88fd\u306e\u6700\u65b0API\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI \u3092\u89e6\u3063\u3066\u307f\u305f by @ryoryomaru . FastAPI\uff5cDB\u63a5\u7d9a\u3057\u3066CRUD\u3059\u308bPython\u88fdAPI\u30b5\u30fc\u30d0\u30fc\u3092\u69cb\u7bc9 by @mtitg . Vietnamese \u00b6 FASTAPI: TRI\u1ec2N KHAI B\u1eb0NG DOCKER by Nguy\u1ec5n Nh\u00e2n . Russian \u00b6 FastAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c by Troy K\u00f6hler . \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c FastAPI? by prostomarkeloff . \u041c\u0435\u043b\u043a\u0430\u044f \u043f\u0438\u0442\u043e\u043d\u044f\u0447\u0430\u044f \u0440\u0430\u0434\u043e\u0441\u0442\u044c #2: Starlette - \u0421\u043e\u043b\u0438\u0434\u043d\u0430\u044f \u043f\u0440\u0438\u043c\u043e\u0447\u043a\u0430 \u2013 FastAPI by Andrey Korchak . German \u00b6 Inbetriebnahme eines scikit-learn-Modells mit ONNX und FastAPI by Nico Axtmann . REST-API Programmieren mittels Python und dem FastAPI Modul by Felix Sch\u00fcrmeyer . Podcasts \u00b6 Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (tiangolo) by Podcast. __init__ . FastAPI on PythonBytes by Python Bytes FM . Talks \u00b6 [VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PyConBY 2020: Serve ML models easily with FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PyCon UK 2019: FastAPI from the ground up by Chris Withers . Projects \u00b6 Latest GitHub projects with the topic fastapi :","title":"External Links and Articles"},{"location":"external-links/#external-links-and-articles","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI has a great community constantly growing. There are many posts, articles, tools, and projects, related to FastAPI . Here's an incomplete list of some of them. Tip If you have an article, project, tool, or anything related to FastAPI that is not yet listed here, create a Pull Request adding it .","title":"External Links and Articles"},{"location":"external-links/#articles","text":"","title":"Articles"},{"location":"external-links/#english","text":"Building the Poll App From Django Tutorial With FastAPI And React by Jean-Baptiste Rocher . Seamless FastAPI Configuration with ConfZ by Silvan Melchior . 5 Advanced Features of FastAPI You Should Try by Kaustubh Gupta . Deploying ML Models as API Using FastAPI and Heroku by Kaustubh Gupta . Using GitHub Actions to Deploy a FastAPI Project to Heroku by Somraj Saha . How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI by @pystar . Building a realtime ticket booking solution with Kafka, FastAPI, and Ably by Ben Gamble . Building simple E-Commerce with NuxtJS and FastAPI by Shahriyar(Shako) Rzayev . Serve a machine learning model using Sklearn, FastAPI and Docker by Rodrigo Arenas . Building an API with FastAPI and Supabase and Deploying on Deta by Yashasvi Singh . Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server by Navule Pavan Kumar Rao . Python Facebook messenger webhook with FastAPI on Glitch by Patrick Ladon . Authenticate Your FastAPI App with auth0 by Dom Patmore . Deploy a dockerized FastAPI application to AWS by Valon Januzaj . FastAPI for Flask Users by Amit Chaudhary . How to monitor your FastAPI service by Louis Guitton . HTTP server to display desktop notifications by Julien Harbulot . Creating a CRUD App with FastAPI (Part one) by Precious Ndubueze . Build And Host Fast Data Science Applications Using FastAPI by Farhad Malik . Deploy FastAPI on Azure App Service by Navule Pavan Kumar Rao . Machine learning model serving in Python using FastAPI and streamlit by Davide Fiocco . Introducing Dispatch by Netflix . Using FastAPI with Django by Stavros Korokithakis . Build a Secure Twilio Webhook with Python and FastAPI by Twilio . Build a web API from scratch with FastAPI - the workshop by Sebasti\u00e1n Ram\u00edrez (tiangolo) . FastAPI + Zeit.co = \ud83d\ude80 by Paul Sec . Build simple API service with Python FastAPI \u2014 Part 1 by cuongld2 . Microservice in Python using FastAPI by Paurakh Sharma Humagain . Real-time Notifications with Python and Postgres by Guillermo Cruz . Apache Kafka producer and consumer with FastAPI and aiokafka by Benjamin Ramser . Create and Deploy FastAPI app to Heroku without using Docker by Navule Pavan Kumar Rao . How to continuously deploy a FastAPI to AWS Lambda with AWS SAM by Benjamin Ramser . Another Boilerplate to FastAPI: Azure Pipeline CI + Pytest by Arthur Henrique . Deploy Machine Learning Models with Keras, FastAPI, Redis and Docker by Shane Soh . Towards Data Science: Deploying Iris Classifications with FastAPI and Docker by Mandy Gu . TestDriven.io: Developing and Testing an Asynchronous API with FastAPI and Pytest by Michael Herman . How To Deploy Tensorflow 2.0 Models As An API Service With FastAPI & Docker by Bernard Brenyah . Why I'm Leaving Flask by Dylan Anthony . Setting up Tortoise ORM with FastAPI by Rob Wagner . Using Docker Compose to deploy a lightweight Python REST API with a job queue by Mike Moritz . A FastAPI and Swagger UI visual cheatsheet by @euri10 . Uber: Ludwig v0.2 Adds New Features and Other Improvements to its Deep Learning Toolbox [including a FastAPI server] by Uber Engineering . How to Deploy a Machine Learning Model by Maarten Grootendorst . JWT Authentication with FastAPI and AWS Cognito by Johannes Gontrum . Top 5 Asynchronous Web Frameworks for Python by Ankush Thakur . Deploying a scikit-learn model with ONNX and FastAPI by Nico Axtmann . FastAPI authentication revisited: Enabling API key authentication by Nils de Bruin . FastAPI and Scikit-Learn: Easily Deploy Models by Nick Cortale . Introduction to the fastapi python framework by Errieta Kostala . FastAPI\u200a\u2014\u200aHow to add basic and cookie authentication by Nils de Bruin . FastAPI\u200a\u2014\u200aGoogle as an external authentication provider by Nils de Bruin . FastAPI/Starlette debug vs prod by William Hayes . Developing FastAPI Application using K8s & AWS by Mukul Mantosh .","title":"English"},{"location":"external-links/#japanese","text":"[FastAPI] Python\u88fd\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI\u306b\u5165\u9580\u3059\u308b by @bee2 . Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03 (Django, Flask, responder, FastAPI, japronto) by @bee2 . \u3010\u7b2c4\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u7ba1\u7406\u8005\u30da\u30fc\u30b8\u6539\u826f\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c3\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u8a8d\u8a3c\u30fb\u30e6\u30fc\u30b6\u767b\u9332\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c2\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u30e2\u30c7\u30eb\u69cb\u7bc9\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c1\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u74b0\u5883\u69cb\u7bc9\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u958b\u767a\u8005\u5411\u3051\u306eDocker\u306b\u3088\u308bPython\u958b\u767a\u74b0\u5883\u69cb\u7bc9 by Hikaru Takahashi . FastAPI\u3067POST\u3055\u308c\u305fJSON\u306e\u30ec\u30b9\u30dd\u30f3\u30b9body\u3092\u53d7\u3051\u53d6\u308b by @angel_katayoku . FastAPI\u3092MySQL\u3068\u63a5\u7d9a\u3057\u3066Docker\u3067\u7ba1\u7406\u3057\u3066\u307f\u308b by @angel_katayoku . FastAPI\u3067CORS\u3092\u56de\u907f by @angel_katayoku . python\u88fd\u306e\u6700\u65b0API\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI \u3092\u89e6\u3063\u3066\u307f\u305f by @ryoryomaru . FastAPI\uff5cDB\u63a5\u7d9a\u3057\u3066CRUD\u3059\u308bPython\u88fdAPI\u30b5\u30fc\u30d0\u30fc\u3092\u69cb\u7bc9 by @mtitg .","title":"Japanese"},{"location":"external-links/#vietnamese","text":"FASTAPI: TRI\u1ec2N KHAI B\u1eb0NG DOCKER by Nguy\u1ec5n Nh\u00e2n .","title":"Vietnamese"},{"location":"external-links/#russian","text":"FastAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c by Troy K\u00f6hler . \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c FastAPI? by prostomarkeloff . \u041c\u0435\u043b\u043a\u0430\u044f \u043f\u0438\u0442\u043e\u043d\u044f\u0447\u0430\u044f \u0440\u0430\u0434\u043e\u0441\u0442\u044c #2: Starlette - \u0421\u043e\u043b\u0438\u0434\u043d\u0430\u044f \u043f\u0440\u0438\u043c\u043e\u0447\u043a\u0430 \u2013 FastAPI by Andrey Korchak .","title":"Russian"},{"location":"external-links/#german","text":"Inbetriebnahme eines scikit-learn-Modells mit ONNX und FastAPI by Nico Axtmann . REST-API Programmieren mittels Python und dem FastAPI Modul by Felix Sch\u00fcrmeyer .","title":"German"},{"location":"external-links/#podcasts","text":"Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (tiangolo) by Podcast. __init__ . FastAPI on PythonBytes by Python Bytes FM .","title":"Podcasts"},{"location":"external-links/#talks","text":"[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PyConBY 2020: Serve ML models easily with FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PyCon UK 2019: FastAPI from the ground up by Chris Withers .","title":"Talks"},{"location":"external-links/#projects","text":"Latest GitHub projects with the topic fastapi :","title":"Projects"},{"location":"fastapi-people/","text":"FastAPI \u793e\u533a \u00b6 FastAPI \u6709\u4e00\u4e2a\u975e\u5e38\u68d2\u7684\u793e\u533a\uff0c\u5b83\u6b22\u8fce\u6765\u81ea\u5404\u4e2a\u9886\u57df\u548c\u80cc\u666f\u7684\u670b\u53cb\u3002 \u521b\u5efa\u8005 & \u7ef4\u62a4\u8005 \u00b6 \u563f! \ud83d\udc4b \u8fd9\u5c31\u662f\u6211: @tiangolo Answers: 1248 Pull Requests: 318 \u6211\u662f FastAPI \u7684\u521b\u5efa\u8005\u548c\u7ef4\u62a4\u8005. \u4f60\u80fd\u5728 \u5e2e\u52a9 FastAPI - \u83b7\u53d6\u5e2e\u52a9 - \u4e0e\u4f5c\u8005\u8054\u7cfb \u9605\u8bfb\u6709\u5173\u6b64\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\u3002 ...\u4f46\u662f\u5728\u8fd9\u91cc\u6211\u60f3\u5411\u60a8\u5c55\u793a\u793e\u533a\u3002 FastAPI \u5f97\u5230\u4e86\u793e\u533a\u7684\u5927\u529b\u652f\u6301\u3002\u56e0\u6b64\u6211\u60f3\u7a81\u51fa\u4ed6\u4eec\u7684\u8d21\u732e\u3002 \u8fd9\u4e9b\u4eba\uff1a \u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3 GitHub \u7684 issues \u3002 \u521b\u5efa Pull Requests \u3002 \u5ba1\u6838 Pull Requests\uff0c \u5bf9\u4e8e \u7ffb\u8bd1 \u5c24\u4e3a\u91cd\u8981\u3002 \u5411\u4ed6\u4eec\u81f4\u4ee5\u638c\u58f0\u3002 \ud83d\udc4f \ud83d\ude47 \u4e0a\u4e2a\u6708\u6700\u6d3b\u8dc3\u7684\u7528\u6237 \u00b6 \u4e0a\u4e2a\u6708\u8fd9\u4e9b\u7528\u6237\u81f4\u529b\u4e8e \u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3 GitHub \u7684 issues \u3002 @JarroVGIT Issues replied: 30 @zoliknemet Issues replied: 9 @iudeen Issues replied: 5 @Kludex Issues replied: 5 @odiseo0 Issues replied: 4 @jonatasoli Issues replied: 3 \u4e13\u5bb6\u7ec4 \u00b6 \u4ee5\u4e0b\u662f FastAPI \u4e13\u5bb6 \u3002 \ud83e\udd13 \u8fd9\u4e9b\u7528\u6237\u4e00\u76f4\u4ee5\u6765\u81f4\u529b\u4e8e \u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3 GitHub \u7684 issues \u3002 \u4ed6\u4eec\u901a\u8fc7\u5e2e\u52a9\u8bb8\u591a\u4eba\u800c\u88ab\u8bc1\u660e\u662f\u4e13\u5bb6\u3002\u2728 @Kludex Issues replied: 352 @dmontagu Issues replied: 262 @ycd Issues replied: 221 @Mause Issues replied: 207 @euri10 Issues replied: 166 @phy25 Issues replied: 130 @raphaelauv Issues replied: 77 @ArcLightSlavik Issues replied: 71 @JarroVGIT Issues replied: 68 @falkben Issues replied: 58 @sm-Fifteen Issues replied: 49 @insomnes Issues replied: 46 @Dustyposa Issues replied: 43 @adriangb Issues replied: 40 @jgould22 Issues replied: 40 @includeamin Issues replied: 39 @STeveShary Issues replied: 37 @prostomarkeloff Issues replied: 33 @frankie567 Issues replied: 31 @krishnardt Issues replied: 31 @chbndrhnns Issues replied: 30 @wshayes Issues replied: 29 @panla Issues replied: 27 @acidjunk Issues replied: 25 @ghandic Issues replied: 25 @dbanty Issues replied: 25 @SirTelemak Issues replied: 24 @acnebs Issues replied: 22 @nsidnev Issues replied: 22 @chris-allnutt Issues replied: 21 @retnikt Issues replied: 19 @odiseo0 Issues replied: 19 @Hultner Issues replied: 18 @rafsaf Issues replied: 18 @jorgerpo Issues replied: 17 @nkhitrov Issues replied: 17 @harunyasar Issues replied: 17 @waynerv Issues replied: 16 @dstlny Issues replied: 16 @jonatasoli Issues replied: 15 @hellocoldworld Issues replied: 14 @haizaar Issues replied: 13 @valentin994 Issues replied: 13 @David-Lor Issues replied: 12 @yinziyan1206 Issues replied: 12 @n8sty Issues replied: 12 @lowercase00 Issues replied: 11 @zamiramir Issues replied: 11 \u6770\u51fa\u8d21\u732e\u8005 \u00b6 \u4ee5\u4e0b\u662f \u6770\u51fa\u7684\u8d21\u732e\u8005 \u3002 \ud83d\udc77 \u8fd9\u4e9b\u7528\u6237 \u521b\u5efa\u4e86\u6700\u591a\u5df2\u88ab\u5408\u5e76\u7684 Pull Requests \u3002 \u4ed6\u4eec\u8d21\u732e\u4e86\u6e90\u4ee3\u7801\uff0c\u6587\u6863\uff0c\u7ffb\u8bd1\u7b49\u3002 \ud83d\udce6 @waynerv Pull Requests: 25 @tokusumi Pull Requests: 22 @dmontagu Pull Requests: 16 @jaystone776 Pull Requests: 15 @euri10 Pull Requests: 13 @mariacamilagl Pull Requests: 12 @Kludex Pull Requests: 11 @Smlep Pull Requests: 10 @Serrones Pull Requests: 8 @RunningIkkyu Pull Requests: 7 @hard-coders Pull Requests: 7 @wshayes Pull Requests: 5 @SwftAlpc Pull Requests: 5 @Attsun1031 Pull Requests: 5 @dependabot Pull Requests: 5 @jekirl Pull Requests: 4 @jfunez Pull Requests: 4 @ycd Pull Requests: 4 @komtaki Pull Requests: 4 @hitrust Pull Requests: 4 @lsglucas Pull Requests: 4 @ComicShrimp Pull Requests: 4 @NinaHwang Pull Requests: 4 \u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u8d21\u732e\u8005\uff08\u8d85\u8fc7100\u4e2a\uff09\uff0c\u4f60\u53ef\u4ee5\u5728 FastAPI GitHub \u8d21\u732e\u8005\u9875\u9762 \u4e2d\u770b\u5230\u4ed6\u4eec\u3002\ud83d\udc77 \u6770\u51fa\u5ba1\u6838\u8005 \u00b6 \u4ee5\u4e0b\u7528\u6237\u662f\u300c\u6770\u51fa\u7684\u8bc4\u5ba1\u8005\u300d\u3002 \ud83d\udd75\ufe0f \u7ffb\u8bd1\u5ba1\u6838 \u00b6 \u6211\u53ea\u4f1a\u8bf4\u5c11\u6570\u51e0\u79cd\u8bed\u8a00\uff08\u800c\u4e14\u8fd8\u4e0d\u662f\u5f88\u6d41\u5229 \ud83d\ude05\uff09\u3002\u6240\u4ee5\uff0c\u5177\u5907 \u80fd\u529b\u53bb\u6279\u51c6\u6587\u6863\u7ffb\u8bd1 \u662f\u8fd9\u4e9b\u8bc4\u5ba1\u8005\u4eec\u3002\u5982\u679c\u6ca1\u6709\u5b83\u4eec\uff0c\u5c31\u4e0d\u4f1a\u6709\u591a\u8bed\u8a00\u6587\u6863\u3002 \u6770\u51fa\u7684\u8bc4\u5ba1\u8005 \ud83d\udd75\ufe0f \u8bc4\u5ba1\u4e86\u6700\u591a\u6765\u81ea\u4ed6\u4eba\u7684 Pull Requests\uff0c\u4ed6\u4eec\u4fdd\u8bc1\u4e86\u4ee3\u7801\u3001\u6587\u6863\u5c24\u5176\u662f \u7ffb\u8bd1 \u7684\u8d28\u91cf\u3002 @Kludex Reviews: 95 @tokusumi Reviews: 49 @waynerv Reviews: 47 @Laineyzhang55 Reviews: 47 @BilalAlpaslan Reviews: 45 @ycd Reviews: 45 @cikay Reviews: 41 @yezz123 Reviews: 34 @AdrianDeAnda Reviews: 33 @ArcLightSlavik Reviews: 31 @cassiobotaro Reviews: 25 @dmontagu Reviews: 23 @komtaki Reviews: 21 @hard-coders Reviews: 19 @0417taehyun Reviews: 19 @lsglucas Reviews: 18 @JarroVGIT Reviews: 18 @zy7y Reviews: 17 @yanever Reviews: 16 @SwftAlpc Reviews: 16 @rjNemo Reviews: 16 @Smlep Reviews: 16 @DevDae Reviews: 16 @pedabraham Reviews: 15 @delhi09 Reviews: 15 @sh0nk Reviews: 13 @RunningIkkyu Reviews: 12 @solomein-sv Reviews: 11 @mariacamilagl Reviews: 10 @Attsun1031 Reviews: 10 @maoyibo Reviews: 10 @odiseo0 Reviews: 10 @graingert Reviews: 9 @PandaHun Reviews: 9 @kty4119 Reviews: 9 @bezaca Reviews: 9 @raphaelauv Reviews: 8 @blt232018 Reviews: 8 @rogerbrinkmann Reviews: 8 @ComicShrimp Reviews: 8 @NinaHwang Reviews: 8 @dimaqq Reviews: 8 @Serrones Reviews: 7 @ryuckel Reviews: 7 @NastasiaSaby Reviews: 7 @Mause Reviews: 7 @wakabame Reviews: 7 @AlexandreBiguet Reviews: 7 @krocdort Reviews: 7 \u8d5e\u52a9\u5546 \u00b6 \u4ee5\u4e0b\u662f \u8d5e\u52a9\u5546 \u3002\ud83d\ude0e \u4ed6\u4eec\u4e3b\u8981\u901a\u8fc7 GitHub Sponsors \u652f\u6301\u6211\u5728 FastAPI (\u548c\u5176\u4ed6\u9879\u76ee)\u7684\u5de5\u4f5c\u3002 \u91d1\u724c\u8d5e\u52a9\u5546 \u00b6 \u94f6\u724c\u8d5e\u52a9\u5546 \u00b6 \u94dc\u724c\u8d5e\u52a9\u5546 \u00b6 \u4e2a\u4eba\u8d5e\u52a9 \u00b6 @github @chaserowbotham @Trivie @SendCloud @qaas @BoostryJP @nnfuzzy @johnadjei @HiredScore @wdwinslow @moellenbeck @RodneyU215 @tizz98 @jmaralc @marutoraman @leynier @mainframeindustries @A-Edge @DelfinaCare @povilasb @Kludex @samuelcolvin @jefftriplett @medecau @kamalgill @deserat @ericof @wshayes @koxudaxi @jqueguiner @alexsantos @tcsmith @ltieman @corleyma @madisonmay @saivarunk @andre1sk @Shark009 @grillazz @dblackrun @zsinx6 @anomaly @peterHoburg @gorhack @jaredtrog @oliverxchen @CINOAdam @ScrimForever @ennui93 @MacroPower @Yaleesa @iwpnd @simw @pkucmus @ioalloc @s3ich4n @Rehket @hiancdtrsnm @Shackelford-Arden @Vikka @Ge0f3 @svats2k @gokulyc @dannywade @pablonnaoji @robintully @wedwardbeck @stradivari96 @RedCarpetUp @Filimoa @shuheng-liu @Joeriksson @cometa-haley @LarryGF @veprimk @meysam81 @mauroalejandrojm @Leay15 @AlrasheedA @ProteinQure @guligon90 @ybressler @ddilidili @dbanty @VictorCalderon @arthuRHD @rafsaf @dudikbender @daisuke8000 @dazeddd @yakkonaut @primer-io @around @predictionmachine @daverin @anthonycepeda @dotlas @pyt3h @linux-china @ddanier @jhb @justinrmiller @bryanculbertson @yourkin @slafs @assem-ch @adamghill @eteq @dmig @rinckd @securancy @falkben @hardbyte @browniebroke @janfilips @woodrad @Pytlicek @allen0125 @WillHogan @cbonoz @rglsk @paul121 @igorcorrea @anthonycorletti @pawamoy @Alisa-lisa @danielunderwood @unredundant @holec @moonape1226 @davanstrien @yenchenLiu @xncbf @DMantis @hard-coders @satwikkansal @pheanex @JimFawkes @logan-connolly @sanghunka @stevenayers @cdsre @aprilcoskun @jangia @yannicschroeer @ghandic @fstau @mertguvencli @elisoncrum @HosamAlmoghraby @kitaramu0401 @engineerjoe440 @declon @alvarobartt @d-e-h-i-o @ww-daniel-mora @rwxd @ilias-ant @arrrrrmin @BomGard @akanz1 @shidenko97 @data-djinn @leo-jp-edwards @apar-tiwari @Vyvy-vi @0417taehyun @realabja @alessio-proietti @Mr-Sunglasses @backbord @gabrielmbmb @danburonline @zachspar @sownt @aahouzi \u5173\u4e8e\u6570\u636e - \u6280\u672f\u7ec6\u8282 \u00b6 \u8be5\u9875\u9762\u7684\u76ee\u7684\u662f\u7a81\u51fa\u793e\u533a\u4e3a\u5e2e\u52a9\u4ed6\u4eba\u800c\u4ed8\u51fa\u7684\u52aa\u529b\u3002 \u5c24\u5176\u662f\u90a3\u4e9b\u4e0d\u5f15\u4eba\u6ce8\u76ee\u4e14\u6d89\u53ca\u66f4\u56f0\u96be\u7684\u4efb\u52a1\uff0c\u4f8b\u5982\u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3\u95ee\u9898\u6216\u8005\u8bc4\u5ba1\u7ffb\u8bd1 Pull Requests\u3002 \u8be5\u6570\u636e\u6bcf\u6708\u8ba1\u7b97\u4e00\u6b21\uff0c\u60a8\u53ef\u4ee5\u9605\u8bfb \u6e90\u4ee3\u7801 \u3002 \u8fd9\u91cc\u4e5f\u5f3a\u8c03\u4e86\u8d5e\u52a9\u5546\u7684\u8d21\u732e\u3002 \u6211\u4e5f\u4fdd\u7559\u66f4\u65b0\u7b97\u6cd5\uff0c\u680f\u76ee\uff0c\u7edf\u8ba1\u9608\u503c\u7b49\u7684\u6743\u5229\uff08\u4ee5\u9632\u4e07\u4e00\ud83e\udd37\uff09\u3002","title":"FastAPI \u793e\u533a"},{"location":"fastapi-people/#fastapi","text":"FastAPI \u6709\u4e00\u4e2a\u975e\u5e38\u68d2\u7684\u793e\u533a\uff0c\u5b83\u6b22\u8fce\u6765\u81ea\u5404\u4e2a\u9886\u57df\u548c\u80cc\u666f\u7684\u670b\u53cb\u3002","title":"FastAPI \u793e\u533a"},{"location":"fastapi-people/#_1","text":"\u563f! \ud83d\udc4b \u8fd9\u5c31\u662f\u6211: @tiangolo Answers: 1248 Pull Requests: 318 \u6211\u662f FastAPI \u7684\u521b\u5efa\u8005\u548c\u7ef4\u62a4\u8005. \u4f60\u80fd\u5728 \u5e2e\u52a9 FastAPI - \u83b7\u53d6\u5e2e\u52a9 - \u4e0e\u4f5c\u8005\u8054\u7cfb \u9605\u8bfb\u6709\u5173\u6b64\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\u3002 ...\u4f46\u662f\u5728\u8fd9\u91cc\u6211\u60f3\u5411\u60a8\u5c55\u793a\u793e\u533a\u3002 FastAPI \u5f97\u5230\u4e86\u793e\u533a\u7684\u5927\u529b\u652f\u6301\u3002\u56e0\u6b64\u6211\u60f3\u7a81\u51fa\u4ed6\u4eec\u7684\u8d21\u732e\u3002 \u8fd9\u4e9b\u4eba\uff1a \u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3 GitHub \u7684 issues \u3002 \u521b\u5efa Pull Requests \u3002 \u5ba1\u6838 Pull Requests\uff0c \u5bf9\u4e8e \u7ffb\u8bd1 \u5c24\u4e3a\u91cd\u8981\u3002 \u5411\u4ed6\u4eec\u81f4\u4ee5\u638c\u58f0\u3002 \ud83d\udc4f \ud83d\ude47","title":"\u521b\u5efa\u8005 &amp; \u7ef4\u62a4\u8005"},{"location":"fastapi-people/#_2","text":"\u4e0a\u4e2a\u6708\u8fd9\u4e9b\u7528\u6237\u81f4\u529b\u4e8e \u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3 GitHub \u7684 issues \u3002 @JarroVGIT Issues replied: 30 @zoliknemet Issues replied: 9 @iudeen Issues replied: 5 @Kludex Issues replied: 5 @odiseo0 Issues replied: 4 @jonatasoli Issues replied: 3","title":"\u4e0a\u4e2a\u6708\u6700\u6d3b\u8dc3\u7684\u7528\u6237"},{"location":"fastapi-people/#_3","text":"\u4ee5\u4e0b\u662f FastAPI \u4e13\u5bb6 \u3002 \ud83e\udd13 \u8fd9\u4e9b\u7528\u6237\u4e00\u76f4\u4ee5\u6765\u81f4\u529b\u4e8e \u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3 GitHub \u7684 issues \u3002 \u4ed6\u4eec\u901a\u8fc7\u5e2e\u52a9\u8bb8\u591a\u4eba\u800c\u88ab\u8bc1\u660e\u662f\u4e13\u5bb6\u3002\u2728 @Kludex Issues replied: 352 @dmontagu Issues replied: 262 @ycd Issues replied: 221 @Mause Issues replied: 207 @euri10 Issues replied: 166 @phy25 Issues replied: 130 @raphaelauv Issues replied: 77 @ArcLightSlavik Issues replied: 71 @JarroVGIT Issues replied: 68 @falkben Issues replied: 58 @sm-Fifteen Issues replied: 49 @insomnes Issues replied: 46 @Dustyposa Issues replied: 43 @adriangb Issues replied: 40 @jgould22 Issues replied: 40 @includeamin Issues replied: 39 @STeveShary Issues replied: 37 @prostomarkeloff Issues replied: 33 @frankie567 Issues replied: 31 @krishnardt Issues replied: 31 @chbndrhnns Issues replied: 30 @wshayes Issues replied: 29 @panla Issues replied: 27 @acidjunk Issues replied: 25 @ghandic Issues replied: 25 @dbanty Issues replied: 25 @SirTelemak Issues replied: 24 @acnebs Issues replied: 22 @nsidnev Issues replied: 22 @chris-allnutt Issues replied: 21 @retnikt Issues replied: 19 @odiseo0 Issues replied: 19 @Hultner Issues replied: 18 @rafsaf Issues replied: 18 @jorgerpo Issues replied: 17 @nkhitrov Issues replied: 17 @harunyasar Issues replied: 17 @waynerv Issues replied: 16 @dstlny Issues replied: 16 @jonatasoli Issues replied: 15 @hellocoldworld Issues replied: 14 @haizaar Issues replied: 13 @valentin994 Issues replied: 13 @David-Lor Issues replied: 12 @yinziyan1206 Issues replied: 12 @n8sty Issues replied: 12 @lowercase00 Issues replied: 11 @zamiramir Issues replied: 11","title":"\u4e13\u5bb6\u7ec4"},{"location":"fastapi-people/#_4","text":"\u4ee5\u4e0b\u662f \u6770\u51fa\u7684\u8d21\u732e\u8005 \u3002 \ud83d\udc77 \u8fd9\u4e9b\u7528\u6237 \u521b\u5efa\u4e86\u6700\u591a\u5df2\u88ab\u5408\u5e76\u7684 Pull Requests \u3002 \u4ed6\u4eec\u8d21\u732e\u4e86\u6e90\u4ee3\u7801\uff0c\u6587\u6863\uff0c\u7ffb\u8bd1\u7b49\u3002 \ud83d\udce6 @waynerv Pull Requests: 25 @tokusumi Pull Requests: 22 @dmontagu Pull Requests: 16 @jaystone776 Pull Requests: 15 @euri10 Pull Requests: 13 @mariacamilagl Pull Requests: 12 @Kludex Pull Requests: 11 @Smlep Pull Requests: 10 @Serrones Pull Requests: 8 @RunningIkkyu Pull Requests: 7 @hard-coders Pull Requests: 7 @wshayes Pull Requests: 5 @SwftAlpc Pull Requests: 5 @Attsun1031 Pull Requests: 5 @dependabot Pull Requests: 5 @jekirl Pull Requests: 4 @jfunez Pull Requests: 4 @ycd Pull Requests: 4 @komtaki Pull Requests: 4 @hitrust Pull Requests: 4 @lsglucas Pull Requests: 4 @ComicShrimp Pull Requests: 4 @NinaHwang Pull Requests: 4 \u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u8d21\u732e\u8005\uff08\u8d85\u8fc7100\u4e2a\uff09\uff0c\u4f60\u53ef\u4ee5\u5728 FastAPI GitHub \u8d21\u732e\u8005\u9875\u9762 \u4e2d\u770b\u5230\u4ed6\u4eec\u3002\ud83d\udc77","title":"\u6770\u51fa\u8d21\u732e\u8005"},{"location":"fastapi-people/#_5","text":"\u4ee5\u4e0b\u7528\u6237\u662f\u300c\u6770\u51fa\u7684\u8bc4\u5ba1\u8005\u300d\u3002 \ud83d\udd75\ufe0f","title":"\u6770\u51fa\u5ba1\u6838\u8005"},{"location":"fastapi-people/#_6","text":"\u6211\u53ea\u4f1a\u8bf4\u5c11\u6570\u51e0\u79cd\u8bed\u8a00\uff08\u800c\u4e14\u8fd8\u4e0d\u662f\u5f88\u6d41\u5229 \ud83d\ude05\uff09\u3002\u6240\u4ee5\uff0c\u5177\u5907 \u80fd\u529b\u53bb\u6279\u51c6\u6587\u6863\u7ffb\u8bd1 \u662f\u8fd9\u4e9b\u8bc4\u5ba1\u8005\u4eec\u3002\u5982\u679c\u6ca1\u6709\u5b83\u4eec\uff0c\u5c31\u4e0d\u4f1a\u6709\u591a\u8bed\u8a00\u6587\u6863\u3002 \u6770\u51fa\u7684\u8bc4\u5ba1\u8005 \ud83d\udd75\ufe0f \u8bc4\u5ba1\u4e86\u6700\u591a\u6765\u81ea\u4ed6\u4eba\u7684 Pull Requests\uff0c\u4ed6\u4eec\u4fdd\u8bc1\u4e86\u4ee3\u7801\u3001\u6587\u6863\u5c24\u5176\u662f \u7ffb\u8bd1 \u7684\u8d28\u91cf\u3002 @Kludex Reviews: 95 @tokusumi Reviews: 49 @waynerv Reviews: 47 @Laineyzhang55 Reviews: 47 @BilalAlpaslan Reviews: 45 @ycd Reviews: 45 @cikay Reviews: 41 @yezz123 Reviews: 34 @AdrianDeAnda Reviews: 33 @ArcLightSlavik Reviews: 31 @cassiobotaro Reviews: 25 @dmontagu Reviews: 23 @komtaki Reviews: 21 @hard-coders Reviews: 19 @0417taehyun Reviews: 19 @lsglucas Reviews: 18 @JarroVGIT Reviews: 18 @zy7y Reviews: 17 @yanever Reviews: 16 @SwftAlpc Reviews: 16 @rjNemo Reviews: 16 @Smlep Reviews: 16 @DevDae Reviews: 16 @pedabraham Reviews: 15 @delhi09 Reviews: 15 @sh0nk Reviews: 13 @RunningIkkyu Reviews: 12 @solomein-sv Reviews: 11 @mariacamilagl Reviews: 10 @Attsun1031 Reviews: 10 @maoyibo Reviews: 10 @odiseo0 Reviews: 10 @graingert Reviews: 9 @PandaHun Reviews: 9 @kty4119 Reviews: 9 @bezaca Reviews: 9 @raphaelauv Reviews: 8 @blt232018 Reviews: 8 @rogerbrinkmann Reviews: 8 @ComicShrimp Reviews: 8 @NinaHwang Reviews: 8 @dimaqq Reviews: 8 @Serrones Reviews: 7 @ryuckel Reviews: 7 @NastasiaSaby Reviews: 7 @Mause Reviews: 7 @wakabame Reviews: 7 @AlexandreBiguet Reviews: 7 @krocdort Reviews: 7","title":"\u7ffb\u8bd1\u5ba1\u6838"},{"location":"fastapi-people/#_7","text":"\u4ee5\u4e0b\u662f \u8d5e\u52a9\u5546 \u3002\ud83d\ude0e \u4ed6\u4eec\u4e3b\u8981\u901a\u8fc7 GitHub Sponsors \u652f\u6301\u6211\u5728 FastAPI (\u548c\u5176\u4ed6\u9879\u76ee)\u7684\u5de5\u4f5c\u3002","title":"\u8d5e\u52a9\u5546"},{"location":"fastapi-people/#_8","text":"","title":"\u91d1\u724c\u8d5e\u52a9\u5546"},{"location":"fastapi-people/#_9","text":"","title":"\u94f6\u724c\u8d5e\u52a9\u5546"},{"location":"fastapi-people/#_10","text":"","title":"\u94dc\u724c\u8d5e\u52a9\u5546"},{"location":"fastapi-people/#_11","text":"@github @chaserowbotham @Trivie @SendCloud @qaas @BoostryJP @nnfuzzy @johnadjei @HiredScore @wdwinslow @moellenbeck @RodneyU215 @tizz98 @jmaralc @marutoraman @leynier @mainframeindustries @A-Edge @DelfinaCare @povilasb @Kludex @samuelcolvin @jefftriplett @medecau @kamalgill @deserat @ericof @wshayes @koxudaxi @jqueguiner @alexsantos @tcsmith @ltieman @corleyma @madisonmay @saivarunk @andre1sk @Shark009 @grillazz @dblackrun @zsinx6 @anomaly @peterHoburg @gorhack @jaredtrog @oliverxchen @CINOAdam @ScrimForever @ennui93 @MacroPower @Yaleesa @iwpnd @simw @pkucmus @ioalloc @s3ich4n @Rehket @hiancdtrsnm @Shackelford-Arden @Vikka @Ge0f3 @svats2k @gokulyc @dannywade @pablonnaoji @robintully @wedwardbeck @stradivari96 @RedCarpetUp @Filimoa @shuheng-liu @Joeriksson @cometa-haley @LarryGF @veprimk @meysam81 @mauroalejandrojm @Leay15 @AlrasheedA @ProteinQure @guligon90 @ybressler @ddilidili @dbanty @VictorCalderon @arthuRHD @rafsaf @dudikbender @daisuke8000 @dazeddd @yakkonaut @primer-io @around @predictionmachine @daverin @anthonycepeda @dotlas @pyt3h @linux-china @ddanier @jhb @justinrmiller @bryanculbertson @yourkin @slafs @assem-ch @adamghill @eteq @dmig @rinckd @securancy @falkben @hardbyte @browniebroke @janfilips @woodrad @Pytlicek @allen0125 @WillHogan @cbonoz @rglsk @paul121 @igorcorrea @anthonycorletti @pawamoy @Alisa-lisa @danielunderwood @unredundant @holec @moonape1226 @davanstrien @yenchenLiu @xncbf @DMantis @hard-coders @satwikkansal @pheanex @JimFawkes @logan-connolly @sanghunka @stevenayers @cdsre @aprilcoskun @jangia @yannicschroeer @ghandic @fstau @mertguvencli @elisoncrum @HosamAlmoghraby @kitaramu0401 @engineerjoe440 @declon @alvarobartt @d-e-h-i-o @ww-daniel-mora @rwxd @ilias-ant @arrrrrmin @BomGard @akanz1 @shidenko97 @data-djinn @leo-jp-edwards @apar-tiwari @Vyvy-vi @0417taehyun @realabja @alessio-proietti @Mr-Sunglasses @backbord @gabrielmbmb @danburonline @zachspar @sownt @aahouzi","title":"\u4e2a\u4eba\u8d5e\u52a9"},{"location":"fastapi-people/#-","text":"\u8be5\u9875\u9762\u7684\u76ee\u7684\u662f\u7a81\u51fa\u793e\u533a\u4e3a\u5e2e\u52a9\u4ed6\u4eba\u800c\u4ed8\u51fa\u7684\u52aa\u529b\u3002 \u5c24\u5176\u662f\u90a3\u4e9b\u4e0d\u5f15\u4eba\u6ce8\u76ee\u4e14\u6d89\u53ca\u66f4\u56f0\u96be\u7684\u4efb\u52a1\uff0c\u4f8b\u5982\u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3\u95ee\u9898\u6216\u8005\u8bc4\u5ba1\u7ffb\u8bd1 Pull Requests\u3002 \u8be5\u6570\u636e\u6bcf\u6708\u8ba1\u7b97\u4e00\u6b21\uff0c\u60a8\u53ef\u4ee5\u9605\u8bfb \u6e90\u4ee3\u7801 \u3002 \u8fd9\u91cc\u4e5f\u5f3a\u8c03\u4e86\u8d5e\u52a9\u5546\u7684\u8d21\u732e\u3002 \u6211\u4e5f\u4fdd\u7559\u66f4\u65b0\u7b97\u6cd5\uff0c\u680f\u76ee\uff0c\u7edf\u8ba1\u9608\u503c\u7b49\u7684\u6743\u5229\uff08\u4ee5\u9632\u4e07\u4e00\ud83e\udd37\uff09\u3002","title":"\u5173\u4e8e\u6570\u636e - \u6280\u672f\u7ec6\u8282"},{"location":"features/","text":"\u7279\u6027 \u00b6 FastAPI \u7279\u6027 \u00b6 FastAPI \u63d0\u4f9b\u4e86\u4ee5\u4e0b\u5185\u5bb9\uff1a \u57fa\u4e8e\u5f00\u653e\u6807\u51c6 \u00b6 \u7528\u4e8e\u521b\u5efa API \u7684 OpenAPI \u5305\u542b\u4e86 \u8def\u5f84 \u64cd\u4f5c \uff0c\u8bf7\u6c42\u53c2\u6570\uff0c\u8bf7\u6c42\u4f53\uff0c\u5b89\u5168\u6027\u7b49\u7684\u58f0\u660e\u3002 \u4f7f\u7528 JSON Schema (\u56e0\u4e3a OpenAPI \u672c\u8eab\u5c31\u662f\u57fa\u4e8e JSON Schema \u7684)\u81ea\u52a8\u751f\u6210\u6570\u636e\u6a21\u578b\u6587\u6863\u3002 \u7ecf\u8fc7\u4e86\u7f1c\u5bc6\u7684\u7814\u7a76\u540e\u56f4\u7ed5\u8fd9\u4e9b\u6807\u51c6\u800c\u8bbe\u8ba1\u3002\u5e76\u975e\u72d7\u5c3e\u7eed\u8c82\u3002 \u8fd9\u4e5f\u5141\u8bb8\u4e86\u5728\u5f88\u591a\u8bed\u8a00\u4e2d\u81ea\u52a8 \u751f\u6210\u5ba2\u6237\u7aef\u4ee3\u7801 \u3002 \u81ea\u52a8\u751f\u6210\u6587\u6863 \u00b6 \u4ea4\u4e92\u5f0f API \u6587\u6863\u4ee5\u53ca\u5177\u63a2\u7d22\u6027 web \u754c\u9762\u3002\u56e0\u4e3a\u8be5\u6846\u67b6\u662f\u57fa\u4e8e OpenAPI\uff0c\u6240\u4ee5\u6709\u5f88\u591a\u53ef\u9009\u9879\uff0cFastAPI \u9ed8\u8ba4\u81ea\u5e26\u4e24\u4e2a\u4ea4\u4e92\u5f0f API \u6587\u6863\u3002 Swagger UI \uff0c\u53ef\u4ea4\u4e92\u5f0f\u64cd\u4f5c\uff0c\u80fd\u5728\u6d4f\u89c8\u5668\u4e2d\u76f4\u63a5\u8c03\u7528\u548c\u6d4b\u8bd5\u4f60\u7684 API \u3002 \u53e6\u5916\u7684 API \u6587\u6863\uff1a ReDoc \u66f4\u4e3b\u6d41\u7684 Python \u00b6 \u5168\u90e8\u90fd\u57fa\u4e8e\u6807\u51c6\u7684 Python 3.6 \u7c7b\u578b \u58f0\u660e\uff08\u611f\u8c22 Pydantic \uff09\u3002\u6ca1\u6709\u65b0\u7684\u8bed\u6cd5\u9700\u8981\u5b66\u4e60\u3002\u53ea\u9700\u8981\u6807\u51c6\u7684 Python \u3002 \u5982\u679c\u4f60\u9700\u89812\u5206\u949f\u6765\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 Python \u7c7b\u578b\uff08\u5373\u4f7f\u4f60\u4e0d\u4f7f\u7528 FastAPI \uff09\uff0c\u770b\u770b\u8fd9\u4e2a\u7b80\u77ed\u7684\u6559\u7a0b\uff1a Python Types \u3002 \u7f16\u5199\u5e26\u6709\u7c7b\u578b\u6807\u6ce8\u7684\u6807\u51c6 Python\uff1a from datetime import date from pydantic import BaseModel # Declare a variable as a str # and get editor support inside the function def main ( user_id : str ): return user_id # A Pydantic model class User ( BaseModel ): id : int name : str joined : date \u53ef\u4ee5\u50cf\u8fd9\u6837\u6765\u4f7f\u7528\uff1a my_user : User = User ( id = 3 , name = \"John Doe\" , joined = \"2018-07-19\" ) second_user_data = { \"id\" : 4 , \"name\" : \"Mary\" , \"joined\" : \"2018-11-30\" , } my_second_user : User = User ( ** second_user_data ) Info **second_user_data \u610f\u601d\u662f: \u76f4\u63a5\u5c06 second_user_data \u5b57\u5178\u7684\u952e\u548c\u503c\u76f4\u63a5\u4f5c\u4e3akey-value\u53c2\u6570\u4f20\u9012\uff0c\u7b49\u540c\u4e8e\uff1a User(id=4, name=\"Mary\", joined=\"2018-11-30\") \u7f16\u8f91\u5668\u652f\u6301 \u00b6 \u6574\u4e2a\u6846\u67b6\u90fd\u88ab\u8bbe\u8ba1\u5f97\u6613\u4e8e\u4f7f\u7528\u4e14\u76f4\u89c2\uff0c\u6240\u6709\u7684\u51b3\u5b9a\u90fd\u5728\u5f00\u53d1\u4e4b\u524d\u5c31\u5728\u591a\u4e2a\u7f16\u8f91\u5668\u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u6765\u786e\u4fdd\u6700\u4f73\u7684\u5f00\u53d1\u4f53\u9a8c\u3002 \u5728\u6700\u8fd1\u7684 Python \u5f00\u53d1\u8005\u8c03\u67e5\u4e2d\uff0c\u6211\u4eec\u80fd\u770b\u5230 \u88ab\u4f7f\u7528\u6700\u591a\u7684\u529f\u80fd\u662f\"\u81ea\u52a8\u8865\u5168\" \u3002 \u6574\u4e2a FastAPI \u6846\u67b6\u5c31\u662f\u57fa\u4e8e\u8fd9\u4e00\u70b9\u7684\u3002\u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u4ee5\u8fdb\u884c\u81ea\u52a8\u8865\u5168\u3002 \u4f60\u51e0\u4e4e\u4e0d\u9700\u8981\u7ecf\u5e38\u56de\u6765\u770b\u6587\u6863\u3002 \u5728\u8fd9\u91cc\uff0c\u4f60\u7684\u7f16\u8f91\u5668\u53ef\u80fd\u4f1a\u8fd9\u6837\u5e2e\u52a9\u4f60\uff1a Visual Studio Code \u4e2d: PyCharm \u4e2d: \u4f60\u5c06\u80fd\u8fdb\u884c\u4ee3\u7801\u8865\u5168\uff0c\u8fd9\u662f\u5728\u4e4b\u524d\u4f60\u53ef\u80fd\u66fe\u8ba4\u4e3a\u4e0d\u53ef\u80fd\u7684\u4e8b\u3002\u4f8b\u5982\uff0c\u5728\u6765\u81ea\u8bf7\u6c42 JSON \u4f53\uff08\u53ef\u80fd\u662f\u5d4c\u5957\u7684\uff09\u4e2d\u7684\u952e price \u3002 \u4e0d\u4f1a\u518d\u8f93\u9519\u952e\u540d\uff0c\u6765\u56de\u7ffb\u770b\u6587\u6863\uff0c\u6216\u8005\u6765\u56de\u6eda\u52a8\u5bfb\u627e\u4f60\u6700\u540e\u4f7f\u7528\u7684 username \u6216\u8005 user_name \u3002 \u7b80\u6d01 \u00b6 \u4efb\u4f55\u7c7b\u578b\u90fd\u6709\u5408\u7406\u7684 \u9ed8\u8ba4\u503c \uff0c\u4efb\u4f55\u548c\u5730\u65b9\u90fd\u6709\u53ef\u9009\u914d\u7f6e\u3002\u6240\u6709\u7684\u53c2\u6570\u88ab\u5fae\u8c03\uff0c\u6765\u6ee1\u8db3\u4f60\u7684\u9700\u6c42\uff0c\u5b9a\u4e49\u6210\u4f60\u9700\u8981\u7684 API\u3002 \u4f46\u662f\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e00\u5207\u90fd\u80fd \u201c\u987a\u5229\u5de5\u4f5c\u201d \u3002 \u9a8c\u8bc1 \u00b6 \u6821\u9a8c\u5927\u90e8\u5206\uff08\u751a\u81f3\u6240\u6709\uff1f\uff09\u7684 Python \u6570\u636e\u7c7b\u578b \uff0c\u5305\u62ec\uff1a JSON \u5bf9\u8c61 ( dict ). JSON \u6570\u7ec4 ( list ) \u5b9a\u4e49\u6210\u5458\u7c7b\u578b\u3002 \u5b57\u7b26\u4e32 ( str ) \u5b57\u6bb5, \u5b9a\u4e49\u6700\u5c0f\u6216\u6700\u5927\u957f\u5ea6\u3002 \u6570\u5b57 ( int , float ) \u6709\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c \u7b49\u7b49\u3002 \u6821\u9a8c\u5916\u6765\u7c7b\u578b\uff0c \u6bd4\u5982: URL. Email. UUID. ...\u53ca\u5176\u4ed6. \u6240\u6709\u7684\u6821\u9a8c\u90fd\u7531\u5b8c\u5584\u4e14\u5f3a\u5927\u7684 Pydantic \u5904\u7406\u3002 \u5b89\u5168\u6027\u53ca\u8eab\u4efd\u9a8c\u8bc1 \u00b6 \u96c6\u6210\u4e86\u5b89\u5168\u6027\u548c\u8eab\u4efd\u8ba4\u8bc1\u3002\u675c\u7edd\u6570\u636e\u5e93\u6216\u8005\u6570\u636e\u6a21\u578b\u7684\u6e17\u900f\u98ce\u9669\u3002 OpenAPI \u4e2d\u5b9a\u4e49\u7684\u5b89\u5168\u6a21\u5f0f\uff0c\u5305\u62ec\uff1a HTTP \u57fa\u672c\u8ba4\u8bc1\u3002 OAuth2 (\u4e5f\u4f7f\u7528 JWT tokens )\u3002\u5728 OAuth2 with JWT \u67e5\u770b\u6559\u7a0b\u3002 API \u5bc6\u94a5\uff0c\u5728: \u8bf7\u6c42\u5934\u3002 \u67e5\u8be2\u53c2\u6570\u3002 Cookies, \u7b49\u7b49\u3002 \u52a0\u4e0a\u6765\u81ea Starlette\uff08\u5305\u62ec session cookie \uff09\u7684\u6240\u6709\u5b89\u5168\u7279\u6027\u3002 \u6240\u6709\u7684\u8fd9\u4e9b\u90fd\u662f\u53ef\u590d\u7528\u7684\u5de5\u5177\u548c\u7ec4\u4ef6\uff0c\u53ef\u4ee5\u8f7b\u677e\u4e0e\u4f60\u7684\u7cfb\u7edf\uff0c\u6570\u636e\u4ed3\u5e93\uff0c\u5173\u7cfb\u578b\u4ee5\u53ca NoSQL \u6570\u636e\u5e93\u7b49\u7b49\u96c6\u6210\u3002 \u4f9d\u8d56\u6ce8\u5165 \u00b6 FastAPI \u6709\u4e00\u4e2a\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u975e\u5e38\u5f3a\u5927\u7684 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u3002 \u751a\u81f3\u4f9d\u8d56\u4e5f\u53ef\u4ee5\u6709\u4f9d\u8d56\uff0c\u521b\u5efa\u4e00\u4e2a\u5c42\u7ea7\u6216\u8005 \u201c\u56fe\u201d\u4f9d\u8d56 \u3002 \u6240\u6709 \u81ea\u52a8\u5316\u5904\u7406 \u90fd\u7531\u6846\u67b6\u5b8c\u6210\u3002 \u6240\u6709\u7684\u4f9d\u8d56\u5173\u7cfb\u90fd\u53ef\u4ee5\u4ece\u8bf7\u6c42\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u5e76\u4e14 \u589e\u52a0\u4e86\u8def\u5f84\u64cd\u4f5c \u7ea6\u675f\u548c\u81ea\u52a8\u6587\u6863\u751f\u6210\u3002 \u5373\u4f7f\u5728\u4f9d\u8d56\u9879\u4e2d\u88ab\u5b9a\u4e49\u7684 \u8def\u5f84\u64cd\u4f5c \u4e5f\u4f1a \u81ea\u52a8\u9a8c\u8bc1 \u3002 \u652f\u6301\u590d\u6742\u7684\u7528\u6237\u8eab\u4efd\u8ba4\u8bc1\u7cfb\u7edf\uff0c \u6570\u636e\u5e93\u8fde\u63a5 \u7b49\u7b49\u3002 \u4e0d\u4f9d\u8d56 \u6570\u636e\u5e93\uff0c\u524d\u7aef\u7b49\u3002 \u4f46\u662f\u548c\u5b83\u4eec\u96c6\u6210\u5f88\u7b80\u5355\u3002 \u65e0\u9650\u5236\"\u63d2\u4ef6\" \u00b6 \u6216\u8005\u8bf4\uff0c\u5bfc\u5165\u5e76\u4f7f\u7528\u4f60\u9700\u8981\u7684\u4ee3\u7801\uff0c\u800c\u4e0d\u9700\u8981\u5b83\u4eec\u3002 \u4efb\u4f55\u96c6\u6210\u90fd\u88ab\u8bbe\u8ba1\u5f97\u88ab\u6613\u4e8e\u4f7f\u7528\uff08\u7528\u4f9d\u8d56\u5173\u7cfb\uff09\uff0c\u4f60\u53ef\u4ee5\u7528\u548c \u8def\u5f84\u64cd\u4f5c \u76f8\u540c\u7684\u7ed3\u6784\u548c\u8bed\u6cd5\uff0c\u5728\u4e24\u884c\u4ee3\u7801\u4e2d\u4e3a\u4f60\u7684\u5e94\u7528\u521b\u5efa\u4e00\u4e2a\u201c\u63d2\u4ef6\u201d\u3002 \u6d4b\u8bd5 \u00b6 100% \u6d4b\u8bd5\u8986\u76d6 \u3002 \u4ee3\u7801\u5e93100% \u7c7b\u578b\u6ce8\u91ca \u3002 \u7528\u4e8e\u751f\u4ea7\u5e94\u7528\u3002 Starlette \u7279\u6027 \u00b6 FastAPI \u548c Starlette \u5b8c\u5168\u517c\u5bb9(\u5e76\u57fa\u4e8e)\u3002\u6240\u4ee5\uff0c\u4f60\u6709\u7684\u5176\u4ed6\u7684 Starlette \u4ee3\u7801\u4e5f\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 FastAPI \u5b9e\u9645\u4e0a\u662f Starlette \u7684\u4e00\u4e2a\u5b50\u7c7b\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u77e5\u9053\u6216\u8005\u4f7f\u7528 Starlette\uff0c\u5927\u90e8\u5206\u7684\u529f\u80fd\u4f1a\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u5de5\u4f5c\u3002 \u901a\u8fc7 FastAPI \u4f60\u53ef\u4ee5\u83b7\u5f97\u6240\u6709 Starlette \u7684\u7279\u6027 ( FastAPI \u5c31\u50cf\u52a0\u5f3a\u7248\u7684 Starlette )\uff1a \u4ee4\u4eba\u60ca\u53f9\u7684\u6027\u80fd\u3002\u5b83\u662f Python \u53ef\u7528\u7684\u6700\u5feb\u7684\u6846\u67b6\u4e4b\u4e00\uff0c\u548c NodeJS \u53ca Go \u76f8\u5f53 \u3002 \u652f\u6301 WebSocket \u3002 \u652f\u6301 GraphQL \u3002 \u540e\u53f0\u4efb\u52a1\u5904\u7406\u3002 Startup \u548c shutdown \u4e8b\u4ef6\u3002 \u6d4b\u8bd5\u5ba2\u6237\u7aef\u57fa\u4e8e requests \u3002 CORS , GZip, \u9759\u6001\u6587\u4ef6, \u6d41\u54cd\u5e94\u3002 \u652f\u6301 Session \u548c Cookie \u3002 100% \u6d4b\u8bd5\u8986\u76d6\u7387\u3002 \u4ee3\u7801\u5e93 100% \u7c7b\u578b\u6ce8\u91ca\u3002 Pydantic \u7279\u6027 \u00b6 FastAPI \u548c Pydantic \u5b8c\u5168\u517c\u5bb9(\u5e76\u57fa\u4e8e)\u3002\u6240\u4ee5\uff0c\u4f60\u6709\u7684\u5176\u4ed6\u7684 Pydantic \u4ee3\u7801\u4e5f\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u517c\u5bb9\u5305\u62ec\u57fa\u4e8e Pydantic \u7684\u5916\u90e8\u5e93\uff0c \u4f8b\u5982\u7528\u4e0e\u6570\u636e\u5e93\u7684 ORM s, ODM s\u3002 \u8fd9\u4e5f\u610f\u5473\u7740\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c06\u4ece\u8bf7\u6c42\u4e2d\u83b7\u5f97\u7684\u76f8\u540c\u5bf9\u8c61 \u76f4\u63a5\u4f20\u5230\u6570\u636e\u5e93 \uff0c\u56e0\u4e3a\u6240\u6709\u7684\u9a8c\u8bc1\u90fd\u662f\u81ea\u52a8\u7684\u3002 \u53cd\u4e4b\u4ea6\u7136\uff0c\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c06\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u7684\u5bf9\u8c61 \u76f4\u63a5\u4f20\u5230\u5ba2\u6237\u7aef \u3002 \u901a\u8fc7 FastAPI \u4f60\u53ef\u4ee5\u83b7\u5f97\u6240\u6709 Pydantic (FastAPI \u57fa\u4e8e Pydantic \u505a\u4e86\u6240\u6709\u7684\u6570\u636e\u5904\u7406)\uff1a \u66f4\u7b80\u5355 \uff1a \u6ca1\u6709\u65b0\u7684\u6a21\u5f0f\u5b9a\u4e49 micro-language \u9700\u8981\u5b66\u4e60\u3002 \u5982\u679c\u4f60\u77e5\u9053 Python types\uff0c\u4f60\u5c31\u77e5\u9053\u5982\u4f55\u4f7f\u7528 Pydantic\u3002 \u548c\u4f60 IDE / linter /brain \u9002\u914d: \u56e0\u4e3a pydantic \u6570\u636e\u7ed3\u6784\u4ec5\u4ec5\u662f\u4f60\u5b9a\u4e49\u7684\u7c7b\u7684\u5b9e\u4f8b\uff1b\u81ea\u52a8\u8865\u5168\uff0clinting\uff0cmypy \u4ee5\u53ca\u4f60\u7684\u76f4\u89c9\u5e94\u8be5\u53ef\u4ee5\u548c\u4f60\u9a8c\u8bc1\u7684\u6570\u636e\u4e00\u8d77\u6b63\u5e38\u5de5\u4f5c\u3002 \u66f4\u5feb \uff1a \u5728 \u57fa\u51c6\u6d4b\u8bd5 \u4e2d\uff0cPydantic \u6bd4\u5176\u4ed6\u88ab\u6d4b\u8bd5\u7684\u5e93\u90fd\u8981\u5feb\u3002 \u9a8c\u8bc1 \u590d\u6742\u7ed3\u6784 : \u4f7f\u7528\u5206\u5c42\u7684 Pydantic \u6a21\u578b, Python typing \u7684 List \u548c Dict \u7b49\u7b49\u3002 \u9a8c\u8bc1\u5668\u4f7f\u6211\u4eec\u80fd\u591f\u7b80\u5355\u6e05\u695a\u7684\u5c06\u590d\u6742\u7684\u6570\u636e\u6a21\u5f0f\u5b9a\u4e49\u3001\u68c0\u67e5\u5e76\u8bb0\u5f55\u4e3a JSON Schema\u3002 \u4f60\u53ef\u4ee5\u62e5\u6709\u6df1\u5ea6 \u5d4c\u5957\u7684 JSON \u5bf9\u8c61\u5e76\u5bf9\u5b83\u4eec\u8fdb\u884c\u9a8c\u8bc1\u548c\u6ce8\u91ca\u3002 \u53ef\u6269\u5c55 : Pydantic \u5141\u8bb8\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\u6216\u8005\u4f60\u53ef\u4ee5\u7528\u9a8c\u8bc1\u5668\u88c5\u9970\u5668\u5bf9\u88ab\u88c5\u9970\u7684\u6a21\u578b\u4e0a\u7684\u65b9\u6cd5\u6269\u5c55\u9a8c\u8bc1\u3002 100% \u6d4b\u8bd5\u8986\u76d6\u7387\u3002","title":"\u7279\u6027"},{"location":"features/#_1","text":"","title":"\u7279\u6027"},{"location":"features/#fastapi","text":"FastAPI \u63d0\u4f9b\u4e86\u4ee5\u4e0b\u5185\u5bb9\uff1a","title":"FastAPI \u7279\u6027"},{"location":"features/#_2","text":"\u7528\u4e8e\u521b\u5efa API \u7684 OpenAPI \u5305\u542b\u4e86 \u8def\u5f84 \u64cd\u4f5c \uff0c\u8bf7\u6c42\u53c2\u6570\uff0c\u8bf7\u6c42\u4f53\uff0c\u5b89\u5168\u6027\u7b49\u7684\u58f0\u660e\u3002 \u4f7f\u7528 JSON Schema (\u56e0\u4e3a OpenAPI \u672c\u8eab\u5c31\u662f\u57fa\u4e8e JSON Schema \u7684)\u81ea\u52a8\u751f\u6210\u6570\u636e\u6a21\u578b\u6587\u6863\u3002 \u7ecf\u8fc7\u4e86\u7f1c\u5bc6\u7684\u7814\u7a76\u540e\u56f4\u7ed5\u8fd9\u4e9b\u6807\u51c6\u800c\u8bbe\u8ba1\u3002\u5e76\u975e\u72d7\u5c3e\u7eed\u8c82\u3002 \u8fd9\u4e5f\u5141\u8bb8\u4e86\u5728\u5f88\u591a\u8bed\u8a00\u4e2d\u81ea\u52a8 \u751f\u6210\u5ba2\u6237\u7aef\u4ee3\u7801 \u3002","title":"\u57fa\u4e8e\u5f00\u653e\u6807\u51c6"},{"location":"features/#_3","text":"\u4ea4\u4e92\u5f0f API \u6587\u6863\u4ee5\u53ca\u5177\u63a2\u7d22\u6027 web \u754c\u9762\u3002\u56e0\u4e3a\u8be5\u6846\u67b6\u662f\u57fa\u4e8e OpenAPI\uff0c\u6240\u4ee5\u6709\u5f88\u591a\u53ef\u9009\u9879\uff0cFastAPI \u9ed8\u8ba4\u81ea\u5e26\u4e24\u4e2a\u4ea4\u4e92\u5f0f API \u6587\u6863\u3002 Swagger UI \uff0c\u53ef\u4ea4\u4e92\u5f0f\u64cd\u4f5c\uff0c\u80fd\u5728\u6d4f\u89c8\u5668\u4e2d\u76f4\u63a5\u8c03\u7528\u548c\u6d4b\u8bd5\u4f60\u7684 API \u3002 \u53e6\u5916\u7684 API \u6587\u6863\uff1a ReDoc","title":"\u81ea\u52a8\u751f\u6210\u6587\u6863"},{"location":"features/#python","text":"\u5168\u90e8\u90fd\u57fa\u4e8e\u6807\u51c6\u7684 Python 3.6 \u7c7b\u578b \u58f0\u660e\uff08\u611f\u8c22 Pydantic \uff09\u3002\u6ca1\u6709\u65b0\u7684\u8bed\u6cd5\u9700\u8981\u5b66\u4e60\u3002\u53ea\u9700\u8981\u6807\u51c6\u7684 Python \u3002 \u5982\u679c\u4f60\u9700\u89812\u5206\u949f\u6765\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 Python \u7c7b\u578b\uff08\u5373\u4f7f\u4f60\u4e0d\u4f7f\u7528 FastAPI \uff09\uff0c\u770b\u770b\u8fd9\u4e2a\u7b80\u77ed\u7684\u6559\u7a0b\uff1a Python Types \u3002 \u7f16\u5199\u5e26\u6709\u7c7b\u578b\u6807\u6ce8\u7684\u6807\u51c6 Python\uff1a from datetime import date from pydantic import BaseModel # Declare a variable as a str # and get editor support inside the function def main ( user_id : str ): return user_id # A Pydantic model class User ( BaseModel ): id : int name : str joined : date \u53ef\u4ee5\u50cf\u8fd9\u6837\u6765\u4f7f\u7528\uff1a my_user : User = User ( id = 3 , name = \"John Doe\" , joined = \"2018-07-19\" ) second_user_data = { \"id\" : 4 , \"name\" : \"Mary\" , \"joined\" : \"2018-11-30\" , } my_second_user : User = User ( ** second_user_data ) Info **second_user_data \u610f\u601d\u662f: \u76f4\u63a5\u5c06 second_user_data \u5b57\u5178\u7684\u952e\u548c\u503c\u76f4\u63a5\u4f5c\u4e3akey-value\u53c2\u6570\u4f20\u9012\uff0c\u7b49\u540c\u4e8e\uff1a User(id=4, name=\"Mary\", joined=\"2018-11-30\")","title":"\u66f4\u4e3b\u6d41\u7684 Python"},{"location":"features/#_4","text":"\u6574\u4e2a\u6846\u67b6\u90fd\u88ab\u8bbe\u8ba1\u5f97\u6613\u4e8e\u4f7f\u7528\u4e14\u76f4\u89c2\uff0c\u6240\u6709\u7684\u51b3\u5b9a\u90fd\u5728\u5f00\u53d1\u4e4b\u524d\u5c31\u5728\u591a\u4e2a\u7f16\u8f91\u5668\u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u6765\u786e\u4fdd\u6700\u4f73\u7684\u5f00\u53d1\u4f53\u9a8c\u3002 \u5728\u6700\u8fd1\u7684 Python \u5f00\u53d1\u8005\u8c03\u67e5\u4e2d\uff0c\u6211\u4eec\u80fd\u770b\u5230 \u88ab\u4f7f\u7528\u6700\u591a\u7684\u529f\u80fd\u662f\"\u81ea\u52a8\u8865\u5168\" \u3002 \u6574\u4e2a FastAPI \u6846\u67b6\u5c31\u662f\u57fa\u4e8e\u8fd9\u4e00\u70b9\u7684\u3002\u4efb\u4f55\u5730\u65b9\u90fd\u53ef\u4ee5\u8fdb\u884c\u81ea\u52a8\u8865\u5168\u3002 \u4f60\u51e0\u4e4e\u4e0d\u9700\u8981\u7ecf\u5e38\u56de\u6765\u770b\u6587\u6863\u3002 \u5728\u8fd9\u91cc\uff0c\u4f60\u7684\u7f16\u8f91\u5668\u53ef\u80fd\u4f1a\u8fd9\u6837\u5e2e\u52a9\u4f60\uff1a Visual Studio Code \u4e2d: PyCharm \u4e2d: \u4f60\u5c06\u80fd\u8fdb\u884c\u4ee3\u7801\u8865\u5168\uff0c\u8fd9\u662f\u5728\u4e4b\u524d\u4f60\u53ef\u80fd\u66fe\u8ba4\u4e3a\u4e0d\u53ef\u80fd\u7684\u4e8b\u3002\u4f8b\u5982\uff0c\u5728\u6765\u81ea\u8bf7\u6c42 JSON \u4f53\uff08\u53ef\u80fd\u662f\u5d4c\u5957\u7684\uff09\u4e2d\u7684\u952e price \u3002 \u4e0d\u4f1a\u518d\u8f93\u9519\u952e\u540d\uff0c\u6765\u56de\u7ffb\u770b\u6587\u6863\uff0c\u6216\u8005\u6765\u56de\u6eda\u52a8\u5bfb\u627e\u4f60\u6700\u540e\u4f7f\u7528\u7684 username \u6216\u8005 user_name \u3002","title":"\u7f16\u8f91\u5668\u652f\u6301"},{"location":"features/#_5","text":"\u4efb\u4f55\u7c7b\u578b\u90fd\u6709\u5408\u7406\u7684 \u9ed8\u8ba4\u503c \uff0c\u4efb\u4f55\u548c\u5730\u65b9\u90fd\u6709\u53ef\u9009\u914d\u7f6e\u3002\u6240\u6709\u7684\u53c2\u6570\u88ab\u5fae\u8c03\uff0c\u6765\u6ee1\u8db3\u4f60\u7684\u9700\u6c42\uff0c\u5b9a\u4e49\u6210\u4f60\u9700\u8981\u7684 API\u3002 \u4f46\u662f\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e00\u5207\u90fd\u80fd \u201c\u987a\u5229\u5de5\u4f5c\u201d \u3002","title":"\u7b80\u6d01"},{"location":"features/#_6","text":"\u6821\u9a8c\u5927\u90e8\u5206\uff08\u751a\u81f3\u6240\u6709\uff1f\uff09\u7684 Python \u6570\u636e\u7c7b\u578b \uff0c\u5305\u62ec\uff1a JSON \u5bf9\u8c61 ( dict ). JSON \u6570\u7ec4 ( list ) \u5b9a\u4e49\u6210\u5458\u7c7b\u578b\u3002 \u5b57\u7b26\u4e32 ( str ) \u5b57\u6bb5, \u5b9a\u4e49\u6700\u5c0f\u6216\u6700\u5927\u957f\u5ea6\u3002 \u6570\u5b57 ( int , float ) \u6709\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c \u7b49\u7b49\u3002 \u6821\u9a8c\u5916\u6765\u7c7b\u578b\uff0c \u6bd4\u5982: URL. Email. UUID. ...\u53ca\u5176\u4ed6. \u6240\u6709\u7684\u6821\u9a8c\u90fd\u7531\u5b8c\u5584\u4e14\u5f3a\u5927\u7684 Pydantic \u5904\u7406\u3002","title":"\u9a8c\u8bc1"},{"location":"features/#_7","text":"\u96c6\u6210\u4e86\u5b89\u5168\u6027\u548c\u8eab\u4efd\u8ba4\u8bc1\u3002\u675c\u7edd\u6570\u636e\u5e93\u6216\u8005\u6570\u636e\u6a21\u578b\u7684\u6e17\u900f\u98ce\u9669\u3002 OpenAPI \u4e2d\u5b9a\u4e49\u7684\u5b89\u5168\u6a21\u5f0f\uff0c\u5305\u62ec\uff1a HTTP \u57fa\u672c\u8ba4\u8bc1\u3002 OAuth2 (\u4e5f\u4f7f\u7528 JWT tokens )\u3002\u5728 OAuth2 with JWT \u67e5\u770b\u6559\u7a0b\u3002 API \u5bc6\u94a5\uff0c\u5728: \u8bf7\u6c42\u5934\u3002 \u67e5\u8be2\u53c2\u6570\u3002 Cookies, \u7b49\u7b49\u3002 \u52a0\u4e0a\u6765\u81ea Starlette\uff08\u5305\u62ec session cookie \uff09\u7684\u6240\u6709\u5b89\u5168\u7279\u6027\u3002 \u6240\u6709\u7684\u8fd9\u4e9b\u90fd\u662f\u53ef\u590d\u7528\u7684\u5de5\u5177\u548c\u7ec4\u4ef6\uff0c\u53ef\u4ee5\u8f7b\u677e\u4e0e\u4f60\u7684\u7cfb\u7edf\uff0c\u6570\u636e\u4ed3\u5e93\uff0c\u5173\u7cfb\u578b\u4ee5\u53ca NoSQL \u6570\u636e\u5e93\u7b49\u7b49\u96c6\u6210\u3002","title":"\u5b89\u5168\u6027\u53ca\u8eab\u4efd\u9a8c\u8bc1"},{"location":"features/#_8","text":"FastAPI \u6709\u4e00\u4e2a\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u975e\u5e38\u5f3a\u5927\u7684 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u3002 \u751a\u81f3\u4f9d\u8d56\u4e5f\u53ef\u4ee5\u6709\u4f9d\u8d56\uff0c\u521b\u5efa\u4e00\u4e2a\u5c42\u7ea7\u6216\u8005 \u201c\u56fe\u201d\u4f9d\u8d56 \u3002 \u6240\u6709 \u81ea\u52a8\u5316\u5904\u7406 \u90fd\u7531\u6846\u67b6\u5b8c\u6210\u3002 \u6240\u6709\u7684\u4f9d\u8d56\u5173\u7cfb\u90fd\u53ef\u4ee5\u4ece\u8bf7\u6c42\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u5e76\u4e14 \u589e\u52a0\u4e86\u8def\u5f84\u64cd\u4f5c \u7ea6\u675f\u548c\u81ea\u52a8\u6587\u6863\u751f\u6210\u3002 \u5373\u4f7f\u5728\u4f9d\u8d56\u9879\u4e2d\u88ab\u5b9a\u4e49\u7684 \u8def\u5f84\u64cd\u4f5c \u4e5f\u4f1a \u81ea\u52a8\u9a8c\u8bc1 \u3002 \u652f\u6301\u590d\u6742\u7684\u7528\u6237\u8eab\u4efd\u8ba4\u8bc1\u7cfb\u7edf\uff0c \u6570\u636e\u5e93\u8fde\u63a5 \u7b49\u7b49\u3002 \u4e0d\u4f9d\u8d56 \u6570\u636e\u5e93\uff0c\u524d\u7aef\u7b49\u3002 \u4f46\u662f\u548c\u5b83\u4eec\u96c6\u6210\u5f88\u7b80\u5355\u3002","title":"\u4f9d\u8d56\u6ce8\u5165"},{"location":"features/#_9","text":"\u6216\u8005\u8bf4\uff0c\u5bfc\u5165\u5e76\u4f7f\u7528\u4f60\u9700\u8981\u7684\u4ee3\u7801\uff0c\u800c\u4e0d\u9700\u8981\u5b83\u4eec\u3002 \u4efb\u4f55\u96c6\u6210\u90fd\u88ab\u8bbe\u8ba1\u5f97\u88ab\u6613\u4e8e\u4f7f\u7528\uff08\u7528\u4f9d\u8d56\u5173\u7cfb\uff09\uff0c\u4f60\u53ef\u4ee5\u7528\u548c \u8def\u5f84\u64cd\u4f5c \u76f8\u540c\u7684\u7ed3\u6784\u548c\u8bed\u6cd5\uff0c\u5728\u4e24\u884c\u4ee3\u7801\u4e2d\u4e3a\u4f60\u7684\u5e94\u7528\u521b\u5efa\u4e00\u4e2a\u201c\u63d2\u4ef6\u201d\u3002","title":"\u65e0\u9650\u5236\"\u63d2\u4ef6\""},{"location":"features/#_10","text":"100% \u6d4b\u8bd5\u8986\u76d6 \u3002 \u4ee3\u7801\u5e93100% \u7c7b\u578b\u6ce8\u91ca \u3002 \u7528\u4e8e\u751f\u4ea7\u5e94\u7528\u3002","title":"\u6d4b\u8bd5"},{"location":"features/#starlette","text":"FastAPI \u548c Starlette \u5b8c\u5168\u517c\u5bb9(\u5e76\u57fa\u4e8e)\u3002\u6240\u4ee5\uff0c\u4f60\u6709\u7684\u5176\u4ed6\u7684 Starlette \u4ee3\u7801\u4e5f\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 FastAPI \u5b9e\u9645\u4e0a\u662f Starlette \u7684\u4e00\u4e2a\u5b50\u7c7b\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u77e5\u9053\u6216\u8005\u4f7f\u7528 Starlette\uff0c\u5927\u90e8\u5206\u7684\u529f\u80fd\u4f1a\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u5de5\u4f5c\u3002 \u901a\u8fc7 FastAPI \u4f60\u53ef\u4ee5\u83b7\u5f97\u6240\u6709 Starlette \u7684\u7279\u6027 ( FastAPI \u5c31\u50cf\u52a0\u5f3a\u7248\u7684 Starlette )\uff1a \u4ee4\u4eba\u60ca\u53f9\u7684\u6027\u80fd\u3002\u5b83\u662f Python \u53ef\u7528\u7684\u6700\u5feb\u7684\u6846\u67b6\u4e4b\u4e00\uff0c\u548c NodeJS \u53ca Go \u76f8\u5f53 \u3002 \u652f\u6301 WebSocket \u3002 \u652f\u6301 GraphQL \u3002 \u540e\u53f0\u4efb\u52a1\u5904\u7406\u3002 Startup \u548c shutdown \u4e8b\u4ef6\u3002 \u6d4b\u8bd5\u5ba2\u6237\u7aef\u57fa\u4e8e requests \u3002 CORS , GZip, \u9759\u6001\u6587\u4ef6, \u6d41\u54cd\u5e94\u3002 \u652f\u6301 Session \u548c Cookie \u3002 100% \u6d4b\u8bd5\u8986\u76d6\u7387\u3002 \u4ee3\u7801\u5e93 100% \u7c7b\u578b\u6ce8\u91ca\u3002","title":"Starlette \u7279\u6027"},{"location":"features/#pydantic","text":"FastAPI \u548c Pydantic \u5b8c\u5168\u517c\u5bb9(\u5e76\u57fa\u4e8e)\u3002\u6240\u4ee5\uff0c\u4f60\u6709\u7684\u5176\u4ed6\u7684 Pydantic \u4ee3\u7801\u4e5f\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u517c\u5bb9\u5305\u62ec\u57fa\u4e8e Pydantic \u7684\u5916\u90e8\u5e93\uff0c \u4f8b\u5982\u7528\u4e0e\u6570\u636e\u5e93\u7684 ORM s, ODM s\u3002 \u8fd9\u4e5f\u610f\u5473\u7740\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c06\u4ece\u8bf7\u6c42\u4e2d\u83b7\u5f97\u7684\u76f8\u540c\u5bf9\u8c61 \u76f4\u63a5\u4f20\u5230\u6570\u636e\u5e93 \uff0c\u56e0\u4e3a\u6240\u6709\u7684\u9a8c\u8bc1\u90fd\u662f\u81ea\u52a8\u7684\u3002 \u53cd\u4e4b\u4ea6\u7136\uff0c\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c06\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u7684\u5bf9\u8c61 \u76f4\u63a5\u4f20\u5230\u5ba2\u6237\u7aef \u3002 \u901a\u8fc7 FastAPI \u4f60\u53ef\u4ee5\u83b7\u5f97\u6240\u6709 Pydantic (FastAPI \u57fa\u4e8e Pydantic \u505a\u4e86\u6240\u6709\u7684\u6570\u636e\u5904\u7406)\uff1a \u66f4\u7b80\u5355 \uff1a \u6ca1\u6709\u65b0\u7684\u6a21\u5f0f\u5b9a\u4e49 micro-language \u9700\u8981\u5b66\u4e60\u3002 \u5982\u679c\u4f60\u77e5\u9053 Python types\uff0c\u4f60\u5c31\u77e5\u9053\u5982\u4f55\u4f7f\u7528 Pydantic\u3002 \u548c\u4f60 IDE / linter /brain \u9002\u914d: \u56e0\u4e3a pydantic \u6570\u636e\u7ed3\u6784\u4ec5\u4ec5\u662f\u4f60\u5b9a\u4e49\u7684\u7c7b\u7684\u5b9e\u4f8b\uff1b\u81ea\u52a8\u8865\u5168\uff0clinting\uff0cmypy \u4ee5\u53ca\u4f60\u7684\u76f4\u89c9\u5e94\u8be5\u53ef\u4ee5\u548c\u4f60\u9a8c\u8bc1\u7684\u6570\u636e\u4e00\u8d77\u6b63\u5e38\u5de5\u4f5c\u3002 \u66f4\u5feb \uff1a \u5728 \u57fa\u51c6\u6d4b\u8bd5 \u4e2d\uff0cPydantic \u6bd4\u5176\u4ed6\u88ab\u6d4b\u8bd5\u7684\u5e93\u90fd\u8981\u5feb\u3002 \u9a8c\u8bc1 \u590d\u6742\u7ed3\u6784 : \u4f7f\u7528\u5206\u5c42\u7684 Pydantic \u6a21\u578b, Python typing \u7684 List \u548c Dict \u7b49\u7b49\u3002 \u9a8c\u8bc1\u5668\u4f7f\u6211\u4eec\u80fd\u591f\u7b80\u5355\u6e05\u695a\u7684\u5c06\u590d\u6742\u7684\u6570\u636e\u6a21\u5f0f\u5b9a\u4e49\u3001\u68c0\u67e5\u5e76\u8bb0\u5f55\u4e3a JSON Schema\u3002 \u4f60\u53ef\u4ee5\u62e5\u6709\u6df1\u5ea6 \u5d4c\u5957\u7684 JSON \u5bf9\u8c61\u5e76\u5bf9\u5b83\u4eec\u8fdb\u884c\u9a8c\u8bc1\u548c\u6ce8\u91ca\u3002 \u53ef\u6269\u5c55 : Pydantic \u5141\u8bb8\u5b9a\u4e49\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\u6216\u8005\u4f60\u53ef\u4ee5\u7528\u9a8c\u8bc1\u5668\u88c5\u9970\u5668\u5bf9\u88ab\u88c5\u9970\u7684\u6a21\u578b\u4e0a\u7684\u65b9\u6cd5\u6269\u5c55\u9a8c\u8bc1\u3002 100% \u6d4b\u8bd5\u8986\u76d6\u7387\u3002","title":"Pydantic \u7279\u6027"},{"location":"help-fastapi/","text":"\u5e2e\u52a9 FastAPI \u4e0e\u6c42\u52a9 \u00b6 \u60a8\u559c\u6b22 FastAPI \u5417\uff1f \u60f3\u5e2e\u52a9 FastAPI\uff1f\u5176\u5b83\u7528\u6237\uff1f\u8fd8\u6709\u9879\u76ee\u4f5c\u8005\uff1f \u6216\u8981\u6c42\u52a9\u600e\u4e48\u4f7f\u7528 FastAPI \uff1f \u4ee5\u4e0b\u51e0\u79cd\u5e2e\u52a9\u7684\u65b9\u5f0f\u90fd\u975e\u5e38\u7b80\u5355\uff08\u6709\u4e9b\u53ea\u9700\u8981\u70b9\u51fb\u4e00\u4e24\u4e0b\u9f20\u6807\uff09\u3002 \u6c42\u52a9\u7684\u6e20\u9053\u4e5f\u5f88\u591a\u3002 \u8ba2\u9605\u65b0\u95fb\u90ae\u4ef6 \u00b6 \u60a8\u53ef\u4ee5\u8ba2\u9605 FastAPI \u548c\u5b83\u7684\u5c0f\u4f19\u4f34 \u65b0\u95fb\u90ae\u4ef6 \uff08\u4e0d\u4f1a\u7ecf\u5e38\u6536\u5230\uff09 FastAPI \u53ca\u5176\u5c0f\u4f19\u4f34\u7684\u65b0\u95fb \ud83d\ude80 \u6307\u5357 \ud83d\udcdd \u529f\u80fd \u2728 \u7834\u574f\u6027\u66f4\u6539 \ud83d\udea8 \u5f00\u53d1\u6280\u5de7 \u2705 \u5728\u63a8\u7279\u4e0a\u5173\u6ce8 FastAPI \u00b6 \u5728 Twitter \u4e0a\u5173\u6ce8 @fastapi \u83b7\u53d6 FastAPI \u7684\u6700\u65b0\u6d88\u606f\u3002\ud83d\udc26 \u5728 GitHub \u4e0a\u4e3a FastAPI \u52a0\u661f \u00b6 \u60a8\u53ef\u4ee5\u5728 GitHub \u4e0a Star FastAPI\uff08\u53ea\u8981\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u661f\u661f\u5c31\u53ef\u4ee5\u4e86\uff09\uff1a https://github.com/tiangolo/fastapi\u3002 \u2b50\ufe0f Star \u4ee5\u540e\uff0c\u5176\u5b83\u7528\u6237\u5c31\u80fd\u66f4\u5bb9\u6613\u627e\u5230 FastAPI\uff0c\u5e76\u4e86\u89e3\u5230\u5df2\u7ecf\u6709\u5176\u4ed6\u7528\u6237\u5728\u4f7f\u7528\u5b83\u4e86\u3002 \u5173\u6ce8 GitHub \u8d44\u6e90\u5e93\u7684\u7248\u672c\u53d1\u5e03 \u00b6 \u60a8\u8fd8\u53ef\u4ee5\u5728 GitHub \u4e0a Watch FastAPI\uff0c\uff08\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 Watch \u6309\u94ae\uff09 https://github.com/tiangolo/fastapi\u3002 \ud83d\udc40 \u60a8\u53ef\u4ee5\u9009\u62e9\u53ea\u5173\u6ce8\u53d1\u5e03\uff08 Releases only \uff09\u3002 \u8fd9\u6837\uff0c\u60a8\u5c31\u53ef\u4ee5\uff08\u5728\u7535\u5b50\u90ae\u4ef6\u91cc\uff09\u63a5\u6536\u5230 FastAPI \u65b0\u7248\u53d1\u5e03\u7684\u901a\u77e5\uff0c\u53ca\u65f6\u4e86\u89e3 bug \u4fee\u590d\u4e0e\u65b0\u529f\u80fd\u3002 \u8054\u7cfb\u4f5c\u8005 \u00b6 \u60a8\u53ef\u4ee5\u8054\u7cfb\u9879\u76ee\u4f5c\u8005\uff0c\u5c31\u662f \u6211\uff08Sebasti\u00e1n Ram\u00edrez / tiangolo \uff09\u3002 \u60a8\u53ef\u4ee5\uff1a \u5728 GitHub \u4e0a\u5173\u6ce8\u6211 \u4e86\u89e3\u5176\u5b83\u6211\u521b\u5efa\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u6216\u8bb8\u5bf9\u60a8\u4f1a\u6709\u5e2e\u52a9 \u5173\u6ce8\u6211\u4ec0\u4e48\u65f6\u5019\u521b\u5efa\u65b0\u7684\u5f00\u6e90\u9879\u76ee \u5728 Twitter \u4e0a\u5173\u6ce8\u6211 \u544a\u8bc9\u6211\u60a8\u4f7f\u7528 FastAPI\uff08\u6211\u975e\u5e38\u4e50\u610f\u542c\u5230\u8fd9\u79cd\u6d88\u606f\uff09 \u63a5\u6536\u6211\u53d1\u5e03\u516c\u544a\u6216\u65b0\u5de5\u5177\u7684\u6d88\u606f \u60a8\u8fd8\u53ef\u4ee5\u5173\u6ce8 @fastapi on Twitter \uff0c\u8fd9\u662f\u4e2a\u72ec\u7acb\u7684\u8d26\u53f7 \u5728 \u9886\u82f1 \u4e0a\u8054\u7cfb\u6211 \u63a5\u6536\u6211\u53d1\u5e03\u516c\u544a\u6216\u65b0\u5de5\u5177\u7684\u6d88\u606f\uff08\u867d\u7136\u6211\u7528 Twitter \u6bd4\u8f83\u591a\uff09 \u9605\u8bfb\u6211\u5728 Dev.to \u6216 Medium \u4e0a\u7684\u6587\u7ae0\uff0c\u6216\u5173\u6ce8\u6211 \u9605\u8bfb\u6211\u7684\u5176\u5b83\u60f3\u6cd5\u3001\u6587\u7ae0\uff0c\u4e86\u89e3\u6211\u521b\u5efa\u7684\u5de5\u5177 \u5173\u6ce8\u6211\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u968f\u65f6\u770b\u5230\u6211\u53d1\u5e03\u7684\u65b0\u6587\u7ae0 Tweet about FastAPI \u00b6 Tweet about FastAPI \u8ba9\u6211\u548c\u5927\u5bb6\u77e5\u9053\u60a8\u4e3a\u4ec0\u4e48\u559c\u6b22 FastAPI\u3002\ud83c\udf89 \u77e5\u9053\u6709\u4eba\u4f7f\u7528 FastAPI \uff0c\u6211\u4f1a\u5f88\u5f00\u5fc3\uff0c\u6211\u4e5f\u60f3\u77e5\u9053\u60a8\u4e3a\u4ec0\u4e48\u559c\u6b22 FastAPI\uff0c\u4ee5\u53ca\u60a8\u5728\u4ec0\u4e48\u9879\u76ee/\u54ea\u4e9b\u516c\u53f8\u4f7f\u7528 FastAPI\uff0c\u7b49\u7b49\u3002 \u4e3a FastAPI \u6295\u7968 \u00b6 \u5728 Slant \u4e0a\u4e3a FastAPI \u6295\u7968 \u5728 AlternativeTo \u4e0a\u4e3a FastAPI \u6295\u7968 \u5728 GitHub \u4e0a\u5e2e\u52a9\u5176\u4ed6\u4eba\u89e3\u51b3\u95ee\u9898 \u00b6 \u60a8\u53ef\u4ee5\u67e5\u770b \u73b0\u6709 issues \uff0c\u5e76\u5c1d\u8bd5\u5e2e\u52a9\u5176\u4ed6\u4eba\u89e3\u51b3\u95ee\u9898\uff0c\u8bf4\u4e0d\u5b9a\u60a8\u80fd\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u5462\u3002\ud83e\udd13 \u5982\u679c\u5e2e\u52a9\u5f88\u591a\u4eba\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u60a8\u5c31\u6709\u53ef\u80fd\u6210\u4e3a FastAPI \u7684\u5b98\u65b9\u4e13\u5bb6 \u3002\ud83c\udf89 \u76d1\u542c GitHub \u8d44\u6e90\u5e93 \u00b6 \u60a8\u53ef\u4ee5\u5728 GitHub \u4e0a\u300c\u76d1\u542c\u300dFastAPI\uff08\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 \"watch\" \u6309\u94ae\uff09\uff1a https://github.com/tiangolo/fastapi . \ud83d\udc40 \u5982\u679c\u60a8\u9009\u62e9 \"Watching\" \u800c\u4e0d\u662f \"Releases only\"\uff0c\u6709\u4eba\u521b\u5efa\u65b0 Issue \u65f6\uff0c\u60a8\u4f1a\u63a5\u6536\u5230\u901a\u77e5\u3002 \u7136\u540e\u60a8\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u5e76\u5e2e\u52a9\u4ed6\u4eec\u89e3\u51b3\u95ee\u9898\u3002 \u521b\u5efa Issue \u00b6 \u60a8\u53ef\u4ee5\u5728 GitHub \u8d44\u6e90\u5e93\u4e2d \u521b\u5efa Issue \uff0c\u4f8b\u5982\uff1a \u63d0\u51fa \u95ee\u9898 \u6216 \u610f\u89c1 \u63d0\u51fa\u65b0 \u7279\u6027 \u5efa\u8bae \u6ce8\u610f \uff1a\u5982\u679c\u60a8\u521b\u5efa Issue\uff0c\u6211\u4f1a\u8981\u6c42\u60a8\u4e5f\u8981\u5e2e\u52a9\u522b\u7684\u7528\u6237\u3002\ud83d\ude09 \u521b\u5efa PR \u00b6 \u60a8\u53ef\u4ee5\u521b\u5efa PR \u4e3a\u6e90\u4ee3\u7801\u505a \u8d21\u732e \uff0c\u4f8b\u5982\uff1a \u4fee\u6539\u6587\u6863\u9519\u522b\u5b57 \u7f16\u8f91\u8fd9\u4e2a\u6587\u4ef6 \uff0c\u5206\u4eab FastAPI \u7684\u6587\u7ae0\u3001\u89c6\u9891\u3001\u535a\u5ba2\uff0c\u4e0d\u8bba\u662f\u60a8\u81ea\u5df1\u7684\uff0c\u8fd8\u662f\u60a8\u770b\u5230\u7684\u90fd\u6210 \u6ce8\u610f\uff0c\u6dfb\u52a0\u7684\u94fe\u63a5\u8981\u653e\u5728\u5bf9\u5e94\u533a\u5757\u7684\u5f00\u5934 \u7ffb\u8bd1\u6587\u6863 \u5ba1\u9605\u522b\u4eba\u7ffb\u8bd1\u7684\u6587\u6863 \u6dfb\u52a0\u65b0\u7684\u6587\u6863\u5185\u5bb9 \u4fee\u590d\u73b0\u6709\u95ee\u9898/Bug \u6dfb\u52a0\u65b0\u529f\u80fd \u52a0\u5165\u804a\u5929 \u00b6 \u5feb\u52a0\u5165 \ud83d\udc65 Discord \u804a\u5929\u670d\u52a1\u5668 \ud83d\udc65 \u548c FastAPI \u793e\u533a\u91cc\u7684\u5c0f\u4f19\u4f34\u4e00\u8d77\u54c8\u76ae\u5427\u3002 \u63d0\u793a \u5982\u6709\u95ee\u9898\uff0c\u8bf7\u5728 GitHub Issues \u91cc\u63d0\u95ee\uff0c\u5728\u8fd9\u91cc\u66f4\u5bb9\u6613\u5f97\u5230 FastAPI \u4e13\u5bb6 \u7684\u5e2e\u52a9\u3002 \u804a\u5929\u5ba4\u4ec5\u4f9b\u95f2\u804a\u3002 \u6211\u4eec\u4e4b\u524d\u8fd8\u4f7f\u7528\u8fc7 Gitter chat \uff0c\u4f46\u5b83\u4e0d\u652f\u6301\u9891\u9053\u7b49\u9ad8\u7ea7\u529f\u80fd\uff0c\u804a\u5929\u4e5f\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u73b0\u5728\u63a8\u8350\u4f7f\u7528 Discord\u3002 \u522b\u5728\u804a\u5929\u5ba4\u91cc\u63d0\u95ee \u00b6 \u6ce8\u610f\uff0c\u804a\u5929\u5ba4\u66f4\u503e\u5411\u4e8e\u201c\u95f2\u804a\u201d\uff0c\u7ecf\u5e38\u6709\u4eba\u4f1a\u63d0\u51fa\u4e00\u4e9b\u7b3c\u7edf\u5f97\u8ba9\u4eba\u96be\u4ee5\u56de\u7b54\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u63d0\u95ee\u4e00\u822c\u6ca1\u4eba\u56de\u7b54\u3002 GitHub Issues \u91cc\u63d0\u4f9b\u4e86\u6a21\u677f\uff0c\u6307\u5f15\u60a8\u63d0\u51fa\u6b63\u786e\u7684\u95ee\u9898\uff0c\u6709\u5229\u4e8e\u83b7\u5f97\u4f18\u8d28\u7684\u56de\u7b54\uff0c\u751a\u81f3\u53ef\u80fd\u89e3\u51b3\u60a8\u8fd8\u6ca1\u6709\u60f3\u5230\u7684\u95ee\u9898\u3002\u800c\u4e14\u5c31\u7b97\u7b54\u7591\u89e3\u60d1\u8981\u8017\u8d39\u4e0d\u5c11\u65f6\u95f4\uff0c\u6211\u8fd8\u662f\u4f1a\u5c3d\u91cf\u5728 GitHub \u91cc\u56de\u7b54\u95ee\u9898\u3002\u4f46\u5728\u804a\u5929\u5ba4\u91cc\uff0c\u6211\u5c31\u6ca1\u529f\u592b\u8fd9\u4e48\u505a\u4e86\u3002\ud83d\ude05 \u804a\u5929\u5ba4\u91cc\u7684\u804a\u5929\u5185\u5bb9\u4e5f\u4e0d\u5982 GitHub \u91cc\u597d\u641c\u7d22\uff0c\u804a\u5929\u91cc\u7684\u95ee\u7b54\u5f88\u5bb9\u6613\u5c31\u627e\u4e0d\u5230\u4e86\u3002\u53ea\u6709\u5728 GitHub Issues \u91cc\u7684\u95ee\u7b54\u624d\u80fd\u5e2e\u52a9\u60a8\u6210\u4e3a FastAPI \u4e13\u5bb6 \uff0c\u5728 GitHub Issues \u4e2d\u4e3a\u60a8\u5e26\u6765\u66f4\u591a\u5173\u6ce8\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u804a\u5929\u5ba4\u91cc\u6709\u6210\u5343\u4e0a\u4e07\u7684\u7528\u6237\uff0c\u5728\u8fd9\u91cc\uff0c\u60a8\u6709\u5f88\u5927\u53ef\u80fd\u9047\u5230\u804a\u5f97\u6765\u7684\u4eba\u3002\ud83d\ude04 \u8d5e\u52a9\u4f5c\u8005 \u00b6 \u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7 GitHub \u8d5e\u52a9\u5546 \u8d44\u52a9\u672c\u9879\u76ee\u7684\u4f5c\u8005\uff08\u5c31\u662f\u6211\uff09\u3002 \u7ed9\u6211\u4e70\u676f\u5496\u5561 \u2615\ufe0f \u4ee5\u793a\u611f\u8c22 \ud83d\ude04 \u5f53\u7136\u60a8\u4e5f\u53ef\u4ee5\u6210\u4e3a FastAPI \u7684\u91d1\u724c\u6216\u94f6\u724c\u8d5e\u52a9\u5546\u3002\ud83c\udfc5\ud83c\udf89 \u8d5e\u52a9 FastAPI \u4f7f\u7528\u7684\u5de5\u5177 \u00b6 \u5982\u60a8\u5728\u672c\u6587\u6863\u4e2d\u6240\u89c1\uff0cFastAPI \u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\uff0c\u5b83\u4eec\u5206\u522b\u662f Starlette \u548c Pydantic\u3002 \u60a8\u8fd8\u53ef\u4ee5\u8d5e\u52a9\uff1a Samuel Colvin \uff08Pydantic\uff09 Encode \uff08Starlette, Uvicorn\uff09 \u8c22\u8c22\uff01\ud83d\ude80","title":"\u5e2e\u52a9 FastAPI \u4e0e\u6c42\u52a9"},{"location":"help-fastapi/#fastapi","text":"\u60a8\u559c\u6b22 FastAPI \u5417\uff1f \u60f3\u5e2e\u52a9 FastAPI\uff1f\u5176\u5b83\u7528\u6237\uff1f\u8fd8\u6709\u9879\u76ee\u4f5c\u8005\uff1f \u6216\u8981\u6c42\u52a9\u600e\u4e48\u4f7f\u7528 FastAPI \uff1f \u4ee5\u4e0b\u51e0\u79cd\u5e2e\u52a9\u7684\u65b9\u5f0f\u90fd\u975e\u5e38\u7b80\u5355\uff08\u6709\u4e9b\u53ea\u9700\u8981\u70b9\u51fb\u4e00\u4e24\u4e0b\u9f20\u6807\uff09\u3002 \u6c42\u52a9\u7684\u6e20\u9053\u4e5f\u5f88\u591a\u3002","title":"\u5e2e\u52a9 FastAPI \u4e0e\u6c42\u52a9"},{"location":"help-fastapi/#_1","text":"\u60a8\u53ef\u4ee5\u8ba2\u9605 FastAPI \u548c\u5b83\u7684\u5c0f\u4f19\u4f34 \u65b0\u95fb\u90ae\u4ef6 \uff08\u4e0d\u4f1a\u7ecf\u5e38\u6536\u5230\uff09 FastAPI \u53ca\u5176\u5c0f\u4f19\u4f34\u7684\u65b0\u95fb \ud83d\ude80 \u6307\u5357 \ud83d\udcdd \u529f\u80fd \u2728 \u7834\u574f\u6027\u66f4\u6539 \ud83d\udea8 \u5f00\u53d1\u6280\u5de7 \u2705","title":"\u8ba2\u9605\u65b0\u95fb\u90ae\u4ef6"},{"location":"help-fastapi/#fastapi_1","text":"\u5728 Twitter \u4e0a\u5173\u6ce8 @fastapi \u83b7\u53d6 FastAPI \u7684\u6700\u65b0\u6d88\u606f\u3002\ud83d\udc26","title":"\u5728\u63a8\u7279\u4e0a\u5173\u6ce8 FastAPI"},{"location":"help-fastapi/#github-fastapi","text":"\u60a8\u53ef\u4ee5\u5728 GitHub \u4e0a Star FastAPI\uff08\u53ea\u8981\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u661f\u661f\u5c31\u53ef\u4ee5\u4e86\uff09\uff1a https://github.com/tiangolo/fastapi\u3002 \u2b50\ufe0f Star \u4ee5\u540e\uff0c\u5176\u5b83\u7528\u6237\u5c31\u80fd\u66f4\u5bb9\u6613\u627e\u5230 FastAPI\uff0c\u5e76\u4e86\u89e3\u5230\u5df2\u7ecf\u6709\u5176\u4ed6\u7528\u6237\u5728\u4f7f\u7528\u5b83\u4e86\u3002","title":"\u5728 GitHub \u4e0a\u4e3a FastAPI \u52a0\u661f"},{"location":"help-fastapi/#github","text":"\u60a8\u8fd8\u53ef\u4ee5\u5728 GitHub \u4e0a Watch FastAPI\uff0c\uff08\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 Watch \u6309\u94ae\uff09 https://github.com/tiangolo/fastapi\u3002 \ud83d\udc40 \u60a8\u53ef\u4ee5\u9009\u62e9\u53ea\u5173\u6ce8\u53d1\u5e03\uff08 Releases only \uff09\u3002 \u8fd9\u6837\uff0c\u60a8\u5c31\u53ef\u4ee5\uff08\u5728\u7535\u5b50\u90ae\u4ef6\u91cc\uff09\u63a5\u6536\u5230 FastAPI \u65b0\u7248\u53d1\u5e03\u7684\u901a\u77e5\uff0c\u53ca\u65f6\u4e86\u89e3 bug \u4fee\u590d\u4e0e\u65b0\u529f\u80fd\u3002","title":"\u5173\u6ce8 GitHub \u8d44\u6e90\u5e93\u7684\u7248\u672c\u53d1\u5e03"},{"location":"help-fastapi/#_2","text":"\u60a8\u53ef\u4ee5\u8054\u7cfb\u9879\u76ee\u4f5c\u8005\uff0c\u5c31\u662f \u6211\uff08Sebasti\u00e1n Ram\u00edrez / tiangolo \uff09\u3002 \u60a8\u53ef\u4ee5\uff1a \u5728 GitHub \u4e0a\u5173\u6ce8\u6211 \u4e86\u89e3\u5176\u5b83\u6211\u521b\u5efa\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u6216\u8bb8\u5bf9\u60a8\u4f1a\u6709\u5e2e\u52a9 \u5173\u6ce8\u6211\u4ec0\u4e48\u65f6\u5019\u521b\u5efa\u65b0\u7684\u5f00\u6e90\u9879\u76ee \u5728 Twitter \u4e0a\u5173\u6ce8\u6211 \u544a\u8bc9\u6211\u60a8\u4f7f\u7528 FastAPI\uff08\u6211\u975e\u5e38\u4e50\u610f\u542c\u5230\u8fd9\u79cd\u6d88\u606f\uff09 \u63a5\u6536\u6211\u53d1\u5e03\u516c\u544a\u6216\u65b0\u5de5\u5177\u7684\u6d88\u606f \u60a8\u8fd8\u53ef\u4ee5\u5173\u6ce8 @fastapi on Twitter \uff0c\u8fd9\u662f\u4e2a\u72ec\u7acb\u7684\u8d26\u53f7 \u5728 \u9886\u82f1 \u4e0a\u8054\u7cfb\u6211 \u63a5\u6536\u6211\u53d1\u5e03\u516c\u544a\u6216\u65b0\u5de5\u5177\u7684\u6d88\u606f\uff08\u867d\u7136\u6211\u7528 Twitter \u6bd4\u8f83\u591a\uff09 \u9605\u8bfb\u6211\u5728 Dev.to \u6216 Medium \u4e0a\u7684\u6587\u7ae0\uff0c\u6216\u5173\u6ce8\u6211 \u9605\u8bfb\u6211\u7684\u5176\u5b83\u60f3\u6cd5\u3001\u6587\u7ae0\uff0c\u4e86\u89e3\u6211\u521b\u5efa\u7684\u5de5\u5177 \u5173\u6ce8\u6211\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u968f\u65f6\u770b\u5230\u6211\u53d1\u5e03\u7684\u65b0\u6587\u7ae0","title":"\u8054\u7cfb\u4f5c\u8005"},{"location":"help-fastapi/#tweet-about-fastapi","text":"Tweet about FastAPI \u8ba9\u6211\u548c\u5927\u5bb6\u77e5\u9053\u60a8\u4e3a\u4ec0\u4e48\u559c\u6b22 FastAPI\u3002\ud83c\udf89 \u77e5\u9053\u6709\u4eba\u4f7f\u7528 FastAPI \uff0c\u6211\u4f1a\u5f88\u5f00\u5fc3\uff0c\u6211\u4e5f\u60f3\u77e5\u9053\u60a8\u4e3a\u4ec0\u4e48\u559c\u6b22 FastAPI\uff0c\u4ee5\u53ca\u60a8\u5728\u4ec0\u4e48\u9879\u76ee/\u54ea\u4e9b\u516c\u53f8\u4f7f\u7528 FastAPI\uff0c\u7b49\u7b49\u3002","title":"Tweet about FastAPI"},{"location":"help-fastapi/#fastapi_2","text":"\u5728 Slant \u4e0a\u4e3a FastAPI \u6295\u7968 \u5728 AlternativeTo \u4e0a\u4e3a FastAPI \u6295\u7968","title":"\u4e3a FastAPI \u6295\u7968"},{"location":"help-fastapi/#github_1","text":"\u60a8\u53ef\u4ee5\u67e5\u770b \u73b0\u6709 issues \uff0c\u5e76\u5c1d\u8bd5\u5e2e\u52a9\u5176\u4ed6\u4eba\u89e3\u51b3\u95ee\u9898\uff0c\u8bf4\u4e0d\u5b9a\u60a8\u80fd\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u5462\u3002\ud83e\udd13 \u5982\u679c\u5e2e\u52a9\u5f88\u591a\u4eba\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u60a8\u5c31\u6709\u53ef\u80fd\u6210\u4e3a FastAPI \u7684\u5b98\u65b9\u4e13\u5bb6 \u3002\ud83c\udf89","title":"\u5728 GitHub \u4e0a\u5e2e\u52a9\u5176\u4ed6\u4eba\u89e3\u51b3\u95ee\u9898"},{"location":"help-fastapi/#github_2","text":"\u60a8\u53ef\u4ee5\u5728 GitHub \u4e0a\u300c\u76d1\u542c\u300dFastAPI\uff08\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 \"watch\" \u6309\u94ae\uff09\uff1a https://github.com/tiangolo/fastapi . \ud83d\udc40 \u5982\u679c\u60a8\u9009\u62e9 \"Watching\" \u800c\u4e0d\u662f \"Releases only\"\uff0c\u6709\u4eba\u521b\u5efa\u65b0 Issue \u65f6\uff0c\u60a8\u4f1a\u63a5\u6536\u5230\u901a\u77e5\u3002 \u7136\u540e\u60a8\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u5e76\u5e2e\u52a9\u4ed6\u4eec\u89e3\u51b3\u95ee\u9898\u3002","title":"\u76d1\u542c GitHub \u8d44\u6e90\u5e93"},{"location":"help-fastapi/#issue","text":"\u60a8\u53ef\u4ee5\u5728 GitHub \u8d44\u6e90\u5e93\u4e2d \u521b\u5efa Issue \uff0c\u4f8b\u5982\uff1a \u63d0\u51fa \u95ee\u9898 \u6216 \u610f\u89c1 \u63d0\u51fa\u65b0 \u7279\u6027 \u5efa\u8bae \u6ce8\u610f \uff1a\u5982\u679c\u60a8\u521b\u5efa Issue\uff0c\u6211\u4f1a\u8981\u6c42\u60a8\u4e5f\u8981\u5e2e\u52a9\u522b\u7684\u7528\u6237\u3002\ud83d\ude09","title":"\u521b\u5efa Issue"},{"location":"help-fastapi/#pr","text":"\u60a8\u53ef\u4ee5\u521b\u5efa PR \u4e3a\u6e90\u4ee3\u7801\u505a \u8d21\u732e \uff0c\u4f8b\u5982\uff1a \u4fee\u6539\u6587\u6863\u9519\u522b\u5b57 \u7f16\u8f91\u8fd9\u4e2a\u6587\u4ef6 \uff0c\u5206\u4eab FastAPI \u7684\u6587\u7ae0\u3001\u89c6\u9891\u3001\u535a\u5ba2\uff0c\u4e0d\u8bba\u662f\u60a8\u81ea\u5df1\u7684\uff0c\u8fd8\u662f\u60a8\u770b\u5230\u7684\u90fd\u6210 \u6ce8\u610f\uff0c\u6dfb\u52a0\u7684\u94fe\u63a5\u8981\u653e\u5728\u5bf9\u5e94\u533a\u5757\u7684\u5f00\u5934 \u7ffb\u8bd1\u6587\u6863 \u5ba1\u9605\u522b\u4eba\u7ffb\u8bd1\u7684\u6587\u6863 \u6dfb\u52a0\u65b0\u7684\u6587\u6863\u5185\u5bb9 \u4fee\u590d\u73b0\u6709\u95ee\u9898/Bug \u6dfb\u52a0\u65b0\u529f\u80fd","title":"\u521b\u5efa PR"},{"location":"help-fastapi/#_3","text":"\u5feb\u52a0\u5165 \ud83d\udc65 Discord \u804a\u5929\u670d\u52a1\u5668 \ud83d\udc65 \u548c FastAPI \u793e\u533a\u91cc\u7684\u5c0f\u4f19\u4f34\u4e00\u8d77\u54c8\u76ae\u5427\u3002 \u63d0\u793a \u5982\u6709\u95ee\u9898\uff0c\u8bf7\u5728 GitHub Issues \u91cc\u63d0\u95ee\uff0c\u5728\u8fd9\u91cc\u66f4\u5bb9\u6613\u5f97\u5230 FastAPI \u4e13\u5bb6 \u7684\u5e2e\u52a9\u3002 \u804a\u5929\u5ba4\u4ec5\u4f9b\u95f2\u804a\u3002 \u6211\u4eec\u4e4b\u524d\u8fd8\u4f7f\u7528\u8fc7 Gitter chat \uff0c\u4f46\u5b83\u4e0d\u652f\u6301\u9891\u9053\u7b49\u9ad8\u7ea7\u529f\u80fd\uff0c\u804a\u5929\u4e5f\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u73b0\u5728\u63a8\u8350\u4f7f\u7528 Discord\u3002","title":"\u52a0\u5165\u804a\u5929"},{"location":"help-fastapi/#_4","text":"\u6ce8\u610f\uff0c\u804a\u5929\u5ba4\u66f4\u503e\u5411\u4e8e\u201c\u95f2\u804a\u201d\uff0c\u7ecf\u5e38\u6709\u4eba\u4f1a\u63d0\u51fa\u4e00\u4e9b\u7b3c\u7edf\u5f97\u8ba9\u4eba\u96be\u4ee5\u56de\u7b54\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u63d0\u95ee\u4e00\u822c\u6ca1\u4eba\u56de\u7b54\u3002 GitHub Issues \u91cc\u63d0\u4f9b\u4e86\u6a21\u677f\uff0c\u6307\u5f15\u60a8\u63d0\u51fa\u6b63\u786e\u7684\u95ee\u9898\uff0c\u6709\u5229\u4e8e\u83b7\u5f97\u4f18\u8d28\u7684\u56de\u7b54\uff0c\u751a\u81f3\u53ef\u80fd\u89e3\u51b3\u60a8\u8fd8\u6ca1\u6709\u60f3\u5230\u7684\u95ee\u9898\u3002\u800c\u4e14\u5c31\u7b97\u7b54\u7591\u89e3\u60d1\u8981\u8017\u8d39\u4e0d\u5c11\u65f6\u95f4\uff0c\u6211\u8fd8\u662f\u4f1a\u5c3d\u91cf\u5728 GitHub \u91cc\u56de\u7b54\u95ee\u9898\u3002\u4f46\u5728\u804a\u5929\u5ba4\u91cc\uff0c\u6211\u5c31\u6ca1\u529f\u592b\u8fd9\u4e48\u505a\u4e86\u3002\ud83d\ude05 \u804a\u5929\u5ba4\u91cc\u7684\u804a\u5929\u5185\u5bb9\u4e5f\u4e0d\u5982 GitHub \u91cc\u597d\u641c\u7d22\uff0c\u804a\u5929\u91cc\u7684\u95ee\u7b54\u5f88\u5bb9\u6613\u5c31\u627e\u4e0d\u5230\u4e86\u3002\u53ea\u6709\u5728 GitHub Issues \u91cc\u7684\u95ee\u7b54\u624d\u80fd\u5e2e\u52a9\u60a8\u6210\u4e3a FastAPI \u4e13\u5bb6 \uff0c\u5728 GitHub Issues \u4e2d\u4e3a\u60a8\u5e26\u6765\u66f4\u591a\u5173\u6ce8\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u804a\u5929\u5ba4\u91cc\u6709\u6210\u5343\u4e0a\u4e07\u7684\u7528\u6237\uff0c\u5728\u8fd9\u91cc\uff0c\u60a8\u6709\u5f88\u5927\u53ef\u80fd\u9047\u5230\u804a\u5f97\u6765\u7684\u4eba\u3002\ud83d\ude04","title":"\u522b\u5728\u804a\u5929\u5ba4\u91cc\u63d0\u95ee"},{"location":"help-fastapi/#_5","text":"\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7 GitHub \u8d5e\u52a9\u5546 \u8d44\u52a9\u672c\u9879\u76ee\u7684\u4f5c\u8005\uff08\u5c31\u662f\u6211\uff09\u3002 \u7ed9\u6211\u4e70\u676f\u5496\u5561 \u2615\ufe0f \u4ee5\u793a\u611f\u8c22 \ud83d\ude04 \u5f53\u7136\u60a8\u4e5f\u53ef\u4ee5\u6210\u4e3a FastAPI \u7684\u91d1\u724c\u6216\u94f6\u724c\u8d5e\u52a9\u5546\u3002\ud83c\udfc5\ud83c\udf89","title":"\u8d5e\u52a9\u4f5c\u8005"},{"location":"help-fastapi/#fastapi_3","text":"\u5982\u60a8\u5728\u672c\u6587\u6863\u4e2d\u6240\u89c1\uff0cFastAPI \u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\uff0c\u5b83\u4eec\u5206\u522b\u662f Starlette \u548c Pydantic\u3002 \u60a8\u8fd8\u53ef\u4ee5\u8d5e\u52a9\uff1a Samuel Colvin \uff08Pydantic\uff09 Encode \uff08Starlette, Uvicorn\uff09 \u8c22\u8c22\uff01\ud83d\ude80","title":"\u8d5e\u52a9 FastAPI \u4f7f\u7528\u7684\u5de5\u5177"},{"location":"history-design-future/","text":"History, Design and Future \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Some time ago, a FastAPI user asked : What\u2019s the history of this project? It seems to have come from nowhere to awesome in a few weeks [...] Here's a little bit of that history. Alternatives \u00b6 I have been creating APIs with complex requirements for several years (Machine Learning, distributed systems, asynchronous jobs, NoSQL databases, etc), leading several teams of developers. As part of that, I needed to investigate, test and use many alternatives. The history of FastAPI is in great part the history of its predecessors. As said in the section Alternatives : FastAPI wouldn't exist if not for the previous work of others. There have been many tools created before that have helped inspire its creation. I have been avoiding the creation of a new framework for several years. First I tried to solve all the features covered by FastAPI using many different frameworks, plug-ins, and tools. But at some point, there was no other option than creating something that provided all these features, taking the best ideas from previous tools, and combining them in the best way possible, using language features that weren't even available before (Python 3.6+ type hints). Investigation \u00b6 By using all the previous alternatives I had the chance to learn from all of them, take ideas, and combine them in the best way I could find for myself and the teams of developers I have worked with. For example, it was clear that ideally it should be based on standard Python type hints. Also, the best approach was to use already existing standards. So, before even starting to code FastAPI , I spent several months studying the specs for OpenAPI, JSON Schema, OAuth2, etc. Understanding their relationship, overlap, and differences. Design \u00b6 Then I spent some time designing the developer \"API\" I wanted to have as a user (as a developer using FastAPI). I tested several ideas in the most popular Python editors: PyCharm, VS Code, Jedi based editors. By the last Python Developer Survey , that covers about 80% of the users. It means that FastAPI was specifically tested with the editors used by 80% of the Python developers. And as most of the other editors tend to work similarly, all its benefits should work for virtually all editors. That way I could find the best ways to reduce code duplication as much as possible, to have completion everywhere, type and error checks, etc. All in a way that provided the best development experience for all the developers. Requirements \u00b6 After testing several alternatives, I decided that I was going to use Pydantic for its advantages. Then I contributed to it, to make it fully compliant with JSON Schema, to support different ways to define constraint declarations, and to improve editor support (type checks, autocompletion) based on the tests in several editors. During the development, I also contributed to Starlette , the other key requirement. Development \u00b6 By the time I started creating FastAPI itself, most of the pieces were already in place, the design was defined, the requirements and tools were ready, and the knowledge about the standards and specifications was clear and fresh. Future \u00b6 By this point, it's already clear that FastAPI with its ideas is being useful for many people. It is being chosen over previous alternatives for suiting many use cases better. Many developers and teams already depend on FastAPI for their projects (including me and my team). But still, there are many improvements and features to come. FastAPI has a great future ahead. And your help is greatly appreciated.","title":"History, Design and Future"},{"location":"history-design-future/#history-design-and-future","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Some time ago, a FastAPI user asked : What\u2019s the history of this project? It seems to have come from nowhere to awesome in a few weeks [...] Here's a little bit of that history.","title":"History, Design and Future"},{"location":"history-design-future/#alternatives","text":"I have been creating APIs with complex requirements for several years (Machine Learning, distributed systems, asynchronous jobs, NoSQL databases, etc), leading several teams of developers. As part of that, I needed to investigate, test and use many alternatives. The history of FastAPI is in great part the history of its predecessors. As said in the section Alternatives : FastAPI wouldn't exist if not for the previous work of others. There have been many tools created before that have helped inspire its creation. I have been avoiding the creation of a new framework for several years. First I tried to solve all the features covered by FastAPI using many different frameworks, plug-ins, and tools. But at some point, there was no other option than creating something that provided all these features, taking the best ideas from previous tools, and combining them in the best way possible, using language features that weren't even available before (Python 3.6+ type hints).","title":"Alternatives"},{"location":"history-design-future/#investigation","text":"By using all the previous alternatives I had the chance to learn from all of them, take ideas, and combine them in the best way I could find for myself and the teams of developers I have worked with. For example, it was clear that ideally it should be based on standard Python type hints. Also, the best approach was to use already existing standards. So, before even starting to code FastAPI , I spent several months studying the specs for OpenAPI, JSON Schema, OAuth2, etc. Understanding their relationship, overlap, and differences.","title":"Investigation"},{"location":"history-design-future/#design","text":"Then I spent some time designing the developer \"API\" I wanted to have as a user (as a developer using FastAPI). I tested several ideas in the most popular Python editors: PyCharm, VS Code, Jedi based editors. By the last Python Developer Survey , that covers about 80% of the users. It means that FastAPI was specifically tested with the editors used by 80% of the Python developers. And as most of the other editors tend to work similarly, all its benefits should work for virtually all editors. That way I could find the best ways to reduce code duplication as much as possible, to have completion everywhere, type and error checks, etc. All in a way that provided the best development experience for all the developers.","title":"Design"},{"location":"history-design-future/#requirements","text":"After testing several alternatives, I decided that I was going to use Pydantic for its advantages. Then I contributed to it, to make it fully compliant with JSON Schema, to support different ways to define constraint declarations, and to improve editor support (type checks, autocompletion) based on the tests in several editors. During the development, I also contributed to Starlette , the other key requirement.","title":"Requirements"},{"location":"history-design-future/#development","text":"By the time I started creating FastAPI itself, most of the pieces were already in place, the design was defined, the requirements and tools were ready, and the knowledge about the standards and specifications was clear and fresh.","title":"Development"},{"location":"history-design-future/#future","text":"By this point, it's already clear that FastAPI with its ideas is being useful for many people. It is being chosen over previous alternatives for suiting many use cases better. Many developers and teams already depend on FastAPI for their projects (including me and my team). But still, there are many improvements and features to come. FastAPI has a great future ahead. And your help is greatly appreciated.","title":"Future"},{"location":"project-generation/","text":"Project Generation - Template \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use a project generator to get started, as it includes a lot of the initial set up, security, database and first API endpoints already done for you. A project generator will always have a very opinionated setup that you should update and adapt for your own needs, but it might be a good starting point for your project. Full Stack FastAPI PostgreSQL \u00b6 GitHub: https://github.com/tiangolo/full-stack-fastapi-postgresql Full Stack FastAPI PostgreSQL - Features \u00b6 Full Docker integration (Docker based). Docker Swarm Mode deployment. Docker Compose integration and optimization for local development. Production ready Python web server using Uvicorn and Gunicorn. Python FastAPI backend: Fast : Very high performance, on par with NodeJS and Go (thanks to Starlette and Pydantic). Intuitive : Great editor support. Completion everywhere. Less time debugging. Easy : Designed to be easy to use and learn. Less time reading docs. Short : Minimize code duplication. Multiple features from each parameter declaration. Robust : Get production-ready code. With automatic interactive documentation. Standards-based : Based on (and fully compatible with) the open standards for APIs: OpenAPI and JSON Schema . Many other features including automatic validation, serialization, interactive documentation, authentication with OAuth2 JWT tokens, etc. Secure password hashing by default. JWT token authentication. SQLAlchemy models (independent of Flask extensions, so they can be used with Celery workers directly). Basic starting models for users (modify and remove as you need). Alembic migrations. CORS (Cross Origin Resource Sharing). Celery worker that can import and use models and code from the rest of the backend selectively. REST backend tests based on Pytest , integrated with Docker, so you can test the full API interaction, independent on the database. As it runs in Docker, it can build a new data store from scratch each time (so you can use ElasticSearch, MongoDB, CouchDB, or whatever you want, and just test that the API works). Easy Python integration with Jupyter Kernels for remote or in-Docker development with extensions like Atom Hydrogen or Visual Studio Code Jupyter. Vue frontend: Generated with Vue CLI. JWT Authentication handling. Login view. After login, main dashboard view. Main dashboard with user creation and edition. Self user edition. Vuex . Vue-router . Vuetify for beautiful material design components. TypeScript . Docker server based on Nginx (configured to play nicely with Vue-router). Docker multi-stage building, so you don't need to save or commit compiled code. Frontend tests ran at build time (can be disabled too). Made as modular as possible, so it works out of the box, but you can re-generate with Vue CLI or create it as you need, and re-use what you want. PGAdmin for PostgreSQL database, you can modify it to use PHPMyAdmin and MySQL easily. Flower for Celery jobs monitoring. Load balancing between frontend and backend with Traefik , so you can have both under the same domain, separated by path, but served by different containers. Traefik integration, including Let's Encrypt HTTPS certificates automatic generation. GitLab CI (continuous integration), including frontend and backend testing. Full Stack FastAPI Couchbase \u00b6 GitHub: https://github.com/tiangolo/full-stack-fastapi-couchbase \u26a0\ufe0f WARNING \u26a0\ufe0f If you are starting a new project from scratch, check the alternatives here. For example, the project generator Full Stack FastAPI PostgreSQL might be a better alternative, as it is actively maintained and used. And it includes all the new features and improvements. You are still free to use the Couchbase-based generator if you want to, it should probably still work fine, and if you already have a project generated with it that's fine as well (and you probably already updated it to suit your needs). You can read more about it in the docs for the repo. Full Stack FastAPI MongoDB \u00b6 ...might come later, depending on my time availability and other factors. \ud83d\ude05 \ud83c\udf89 Machine Learning models with spaCy and FastAPI \u00b6 GitHub: https://github.com/microsoft/cookiecutter-spacy-fastapi Machine Learning models with spaCy and FastAPI - Features \u00b6 spaCy NER model integration. Azure Cognitive Search request format built in. Production ready Python web server using Uvicorn and Gunicorn. Azure DevOps Kubernetes (AKS) CI/CD deployment built in. Multilingual Easily choose one of spaCy's built in languages during project setup. Easily extensible to other model frameworks (Pytorch, Tensorflow), not just spaCy.","title":"Project Generation - Template"},{"location":"project-generation/#project-generation-template","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use a project generator to get started, as it includes a lot of the initial set up, security, database and first API endpoints already done for you. A project generator will always have a very opinionated setup that you should update and adapt for your own needs, but it might be a good starting point for your project.","title":"Project Generation - Template"},{"location":"project-generation/#full-stack-fastapi-postgresql","text":"GitHub: https://github.com/tiangolo/full-stack-fastapi-postgresql","title":"Full Stack FastAPI PostgreSQL"},{"location":"project-generation/#full-stack-fastapi-postgresql-features","text":"Full Docker integration (Docker based). Docker Swarm Mode deployment. Docker Compose integration and optimization for local development. Production ready Python web server using Uvicorn and Gunicorn. Python FastAPI backend: Fast : Very high performance, on par with NodeJS and Go (thanks to Starlette and Pydantic). Intuitive : Great editor support. Completion everywhere. Less time debugging. Easy : Designed to be easy to use and learn. Less time reading docs. Short : Minimize code duplication. Multiple features from each parameter declaration. Robust : Get production-ready code. With automatic interactive documentation. Standards-based : Based on (and fully compatible with) the open standards for APIs: OpenAPI and JSON Schema . Many other features including automatic validation, serialization, interactive documentation, authentication with OAuth2 JWT tokens, etc. Secure password hashing by default. JWT token authentication. SQLAlchemy models (independent of Flask extensions, so they can be used with Celery workers directly). Basic starting models for users (modify and remove as you need). Alembic migrations. CORS (Cross Origin Resource Sharing). Celery worker that can import and use models and code from the rest of the backend selectively. REST backend tests based on Pytest , integrated with Docker, so you can test the full API interaction, independent on the database. As it runs in Docker, it can build a new data store from scratch each time (so you can use ElasticSearch, MongoDB, CouchDB, or whatever you want, and just test that the API works). Easy Python integration with Jupyter Kernels for remote or in-Docker development with extensions like Atom Hydrogen or Visual Studio Code Jupyter. Vue frontend: Generated with Vue CLI. JWT Authentication handling. Login view. After login, main dashboard view. Main dashboard with user creation and edition. Self user edition. Vuex . Vue-router . Vuetify for beautiful material design components. TypeScript . Docker server based on Nginx (configured to play nicely with Vue-router). Docker multi-stage building, so you don't need to save or commit compiled code. Frontend tests ran at build time (can be disabled too). Made as modular as possible, so it works out of the box, but you can re-generate with Vue CLI or create it as you need, and re-use what you want. PGAdmin for PostgreSQL database, you can modify it to use PHPMyAdmin and MySQL easily. Flower for Celery jobs monitoring. Load balancing between frontend and backend with Traefik , so you can have both under the same domain, separated by path, but served by different containers. Traefik integration, including Let's Encrypt HTTPS certificates automatic generation. GitLab CI (continuous integration), including frontend and backend testing.","title":"Full Stack FastAPI PostgreSQL - Features"},{"location":"project-generation/#full-stack-fastapi-couchbase","text":"GitHub: https://github.com/tiangolo/full-stack-fastapi-couchbase \u26a0\ufe0f WARNING \u26a0\ufe0f If you are starting a new project from scratch, check the alternatives here. For example, the project generator Full Stack FastAPI PostgreSQL might be a better alternative, as it is actively maintained and used. And it includes all the new features and improvements. You are still free to use the Couchbase-based generator if you want to, it should probably still work fine, and if you already have a project generated with it that's fine as well (and you probably already updated it to suit your needs). You can read more about it in the docs for the repo.","title":"Full Stack FastAPI Couchbase"},{"location":"project-generation/#full-stack-fastapi-mongodb","text":"...might come later, depending on my time availability and other factors. \ud83d\ude05 \ud83c\udf89","title":"Full Stack FastAPI MongoDB"},{"location":"project-generation/#machine-learning-models-with-spacy-and-fastapi","text":"GitHub: https://github.com/microsoft/cookiecutter-spacy-fastapi","title":"Machine Learning models with spaCy and FastAPI"},{"location":"project-generation/#machine-learning-models-with-spacy-and-fastapi-features","text":"spaCy NER model integration. Azure Cognitive Search request format built in. Production ready Python web server using Uvicorn and Gunicorn. Azure DevOps Kubernetes (AKS) CI/CD deployment built in. Multilingual Easily choose one of spaCy's built in languages during project setup. Easily extensible to other model frameworks (Pytorch, Tensorflow), not just spaCy.","title":"Machine Learning models with spaCy and FastAPI - Features"},{"location":"python-types/","text":"Python \u7c7b\u578b\u63d0\u793a\u7b80\u4ecb \u00b6 Python 3.6+ \u7248\u672c \u52a0\u5165\u4e86\u5bf9\"\u7c7b\u578b\u63d0\u793a\"\u7684\u652f\u6301\u3002 \u8fd9\u4e9b \"\u7c7b\u578b\u63d0\u793a\" \u662f\u4e00\u79cd\u65b0\u7684\u8bed\u6cd5\uff08\u5728 Python 3.6 \u7248\u672c\u52a0\u5165\uff09\u7528\u6765\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u7684 \u7c7b\u578b \u3002 \u901a\u8fc7\u58f0\u660e\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u7f16\u8f91\u5668\u548c\u4e00\u4e9b\u5de5\u5177\u80fd\u7ed9\u4f60\u63d0\u4f9b\u66f4\u597d\u7684\u652f\u6301\u3002 \u8fd9\u53ea\u662f\u4e00\u4e2a\u5173\u4e8e Python \u7c7b\u578b\u63d0\u793a\u7684 \u5feb\u901f\u5165\u95e8 / \u590d\u4e60 \u3002\u5b83\u4ec5\u6db5\u76d6\u4e0e FastAPI \u4e00\u8d77\u4f7f\u7528\u6240\u9700\u7684\u6700\u5c11\u90e8\u5206...\u5b9e\u9645\u4e0a\u53ea\u6709\u5f88\u5c11\u4e00\u70b9\u3002 \u6574\u4e2a FastAPI \u90fd\u57fa\u4e8e\u8fd9\u4e9b\u7c7b\u578b\u63d0\u793a\u6784\u5efa\uff0c\u5b83\u4eec\u5e26\u6765\u4e86\u8bb8\u591a\u4f18\u70b9\u548c\u597d\u5904\u3002 \u4f46\u5373\u4f7f\u4f60\u4e0d\u4f1a\u7528\u5230 FastAPI \uff0c\u4e86\u89e3\u4e00\u4e0b\u7c7b\u578b\u63d0\u793a\u4e5f\u4f1a\u8ba9\u4f60\u4ece\u4e2d\u53d7\u76ca\u3002 Note \u5982\u679c\u4f60\u5df2\u7ecf\u7cbe\u901a Python\uff0c\u5e76\u4e14\u4e86\u89e3\u5173\u4e8e\u7c7b\u578b\u63d0\u793a\u7684\u4e00\u5207\u77e5\u8bc6\uff0c\u76f4\u63a5\u8df3\u5230\u4e0b\u4e00\u7ae0\u8282\u5427\u3002 \u52a8\u673a \u00b6 \u8ba9\u6211\u4eec\u4ece\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5f00\u59cb\uff1a def get_full_name ( first_name , last_name ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \u8fd0\u884c\u8fd9\u6bb5\u7a0b\u5e8f\u5c06\u8f93\u51fa\uff1a John Doe \u8fd9\u4e2a\u51fd\u6570\u505a\u4e86\u4e0b\u9762\u8fd9\u4e9b\u4e8b\u60c5\uff1a \u63a5\u6536 first_name \u548c last_name \u53c2\u6570\u3002 \u901a\u8fc7 title() \u5c06\u6bcf\u4e2a\u53c2\u6570\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u5f62\u5f0f\u3002 \u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u6765 \u62fc\u63a5 \u5b83\u4eec\u3002 def get_full_name ( first_name , last_name ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \u4fee\u6539\u793a\u4f8b \u00b6 \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u7a0b\u5e8f\u3002 \u73b0\u5728\u5047\u8bbe\u4f60\u5c06\u4ece\u5934\u5f00\u59cb\u7f16\u5199\u8fd9\u6bb5\u7a0b\u5e8f\u3002 \u5728\u67d0\u4e00\u65f6\u523b\uff0c\u4f60\u5f00\u59cb\u5b9a\u4e49\u51fd\u6570\uff0c\u5e76\u4e14\u51c6\u5907\u597d\u4e86\u53c2\u6570...\u3002 \u73b0\u5728\u4f60\u9700\u8981\u8c03\u7528\u4e00\u4e2a\"\u5c06\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u5f62\u5f0f\u7684\u65b9\u6cd5\"\u3002 \u7b49\u7b49\uff0c\u90a3\u4e2a\u65b9\u6cd5\u662f\u4ec0\u4e48\u6765\u7740\uff1f upper \uff1f\u8fd8\u662f uppercase \uff1f first_uppercase \uff1f capitalize \uff1f \u7136\u540e\u4f60\u5c1d\u8bd5\u5411\u7a0b\u5e8f\u5458\u8001\u624b\u7684\u670b\u53cb\u2014\u2014\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\u5bfb\u6c42\u5e2e\u52a9\u3002 \u8f93\u5165\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 first_name \uff0c\u8f93\u5165\u70b9\u53f7\uff08 . \uff09\u7136\u540e\u6572\u4e0b Ctrl+Space \u6765\u89e6\u53d1\u4ee3\u7801\u8865\u5168\u3002 \u4f46\u9057\u61be\u7684\u662f\u5e76\u6ca1\u6709\u8d77\u4ec0\u4e48\u4f5c\u7528\uff1a \u6dfb\u52a0\u7c7b\u578b \u00b6 \u8ba9\u6211\u4eec\u6765\u4fee\u6539\u4e0a\u9762\u4f8b\u5b50\u7684\u4e00\u884c\u4ee3\u7801\u3002 \u6211\u4eec\u5c06\u628a\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u7684\u51fd\u6570\u53c2\u6570\u4ece\uff1a first_name , last_name \u6539\u6210\uff1a first_name : str , last_name : str \u5c31\u662f\u8fd9\u6837\u3002 \u8fd9\u4e9b\u5c31\u662f\"\u7c7b\u578b\u63d0\u793a\"\uff1a def get_full_name ( first_name : str , last_name : str ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \u8fd9\u548c\u58f0\u660e\u9ed8\u8ba4\u503c\u662f\u4e0d\u540c\u7684\uff0c\u4f8b\u5982\uff1a first_name = \"john\" , last_name = \"doe\" \u8fd9\u4e24\u8005\u4e0d\u4e00\u6837\u3002 \u6211\u4eec\u7528\u7684\u662f\u5192\u53f7\uff08 : \uff09\uff0c\u4e0d\u662f\u7b49\u53f7\uff08 = \uff09\u3002 \u800c\u4e14\u6dfb\u52a0\u7c7b\u578b\u63d0\u793a\u4e00\u822c\u4e0d\u4f1a\u6539\u53d8\u539f\u6765\u7684\u8fd0\u884c\u7ed3\u679c\u3002 \u73b0\u5728\u5047\u8bbe\u6211\u4eec\u53c8\u4e00\u6b21\u6b63\u5728\u521b\u5efa\u8fd9\u4e2a\u51fd\u6570\uff0c\u8fd9\u6b21\u6dfb\u52a0\u4e86\u7c7b\u578b\u63d0\u793a\u3002 \u5728\u540c\u6837\u7684\u5730\u65b9\uff0c\u901a\u8fc7 Ctrl+Space \u89e6\u53d1\u81ea\u52a8\u8865\u5168\uff0c\u4f60\u4f1a\u53d1\u73b0\uff1a \u8fd9\u6837\uff0c\u4f60\u53ef\u4ee5\u6eda\u52a8\u67e5\u770b\u9009\u9879\uff0c\u76f4\u5230\u4f60\u627e\u5230\u770b\u8d77\u6765\u773c\u719f\u7684\u90a3\u4e2a\uff1a \u66f4\u591a\u52a8\u673a \u00b6 \u4e0b\u9762\u662f\u4e00\u4e2a\u5df2\u7ecf\u6709\u7c7b\u578b\u63d0\u793a\u7684\u51fd\u6570\uff1a def get_name_with_age ( name : str , age : int ): name_with_age = name + \" is this old: \" + age return name_with_age \u56e0\u4e3a\u7f16\u8f91\u5668\u5df2\u7ecf\u77e5\u9053\u4e86\u8fd9\u4e9b\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u4e0d\u4ec5\u80fd\u5bf9\u4ee3\u7801\u8fdb\u884c\u8865\u5168\uff0c\u8fd8\u80fd\u68c0\u67e5\u5176\u4e2d\u7684\u9519\u8bef\uff1a \u73b0\u5728\u4f60\u77e5\u9053\u4e86\u5fc5\u987b\u5148\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u901a\u8fc7 str(age) \u628a age \u8f6c\u6362\u6210\u5b57\u7b26\u4e32\uff1a def get_name_with_age ( name : str , age : int ): name_with_age = name + \" is this old: \" + str ( age ) return name_with_age \u58f0\u660e\u7c7b\u578b \u00b6 \u4f60\u521a\u521a\u770b\u5230\u7684\u5c31\u662f\u58f0\u660e\u7c7b\u578b\u63d0\u793a\u7684\u4e3b\u8981\u573a\u666f\u3002\u7528\u4e8e\u51fd\u6570\u7684\u53c2\u6570\u3002 \u8fd9\u4e5f\u662f\u4f60\u5c06\u5728 FastAPI \u4e2d\u4f7f\u7528\u5b83\u4eec\u7684\u4e3b\u8981\u573a\u666f\u3002 \u7b80\u5355\u7c7b\u578b \u00b6 \u4e0d\u53ea\u662f str \uff0c\u4f60\u80fd\u591f\u58f0\u660e\u6240\u6709\u7684\u6807\u51c6 Python \u7c7b\u578b\u3002 \u6bd4\u5982\u4ee5\u4e0b\u7c7b\u578b\uff1a int float bool bytes def get_items ( item_a : str , item_b : int , item_c : float , item_d : bool , item_e : bytes ): return item_a , item_b , item_c , item_d , item_d , item_e \u5d4c\u5957\u7c7b\u578b \u00b6 \u6709\u4e9b\u5bb9\u5668\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u5305\u542b\u5176\u4ed6\u7684\u503c\uff0c\u6bd4\u5982 dict \u3001 list \u3001 set \u548c tuple \u3002\u5b83\u4eec\u5185\u90e8\u7684\u503c\u4e5f\u4f1a\u62e5\u6709\u81ea\u5df1\u7684\u7c7b\u578b\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 Python \u7684 typing \u6807\u51c6\u5e93\u6765\u58f0\u660e\u8fd9\u4e9b\u7c7b\u578b\u4ee5\u53ca\u5b50\u7c7b\u578b\u3002 \u5b83\u4e13\u95e8\u7528\u6765\u652f\u6301\u8fd9\u4e9b\u7c7b\u578b\u63d0\u793a\u3002 \u5217\u8868 \u00b6 \u4f8b\u5982\uff0c\u8ba9\u6211\u4eec\u6765\u5b9a\u4e49\u4e00\u4e2a\u7531 str \u7ec4\u6210\u7684 list \u53d8\u91cf\u3002 \u4ece typing \u6a21\u5757\u5bfc\u5165 List \uff08\u6ce8\u610f\u662f\u5927\u5199\u7684 L \uff09\uff1a from typing import List def process_items ( items : List [ str ]): for item in items : print ( item ) \u540c\u6837\u4ee5\u5192\u53f7\uff08 : \uff09\u6765\u58f0\u660e\u8fd9\u4e2a\u53d8\u91cf\u3002 \u8f93\u5165 List \u4f5c\u4e3a\u7c7b\u578b\u3002 \u7531\u4e8e\u5217\u8868\u662f\u5e26\u6709\"\u5b50\u7c7b\u578b\"\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5b50\u7c7b\u578b\u653e\u5728\u65b9\u62ec\u53f7\u4e2d\uff1a from typing import List def process_items ( items : List [ str ]): for item in items : print ( item ) \u8fd9\u8868\u793a\uff1a\"\u53d8\u91cf items \u662f\u4e00\u4e2a list \uff0c\u5e76\u4e14\u8fd9\u4e2a\u5217\u8868\u91cc\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f str \"\u3002 \u8fd9\u6837\uff0c\u5373\u4f7f\u5728\u5904\u7406\u5217\u8868\u4e2d\u7684\u5143\u7d20\u65f6\uff0c\u4f60\u7684\u7f16\u8f91\u5668\u4e5f\u53ef\u4ee5\u63d0\u4f9b\u652f\u6301\u3002 \u6ca1\u6709\u7c7b\u578b\uff0c\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u5b9e\u73b0\u4e0b\u9762\u8fd9\u6837\uff1a \u6ce8\u610f\uff0c\u53d8\u91cf item \u662f\u5217\u8868 items \u4e2d\u7684\u5143\u7d20\u4e4b\u4e00\u3002 \u800c\u4e14\uff0c\u7f16\u8f91\u5668\u4ecd\u7136\u77e5\u9053\u5b83\u662f\u4e00\u4e2a str \uff0c\u5e76\u4e3a\u6b64\u63d0\u4f9b\u4e86\u652f\u6301\u3002 \u5143\u7ec4\u548c\u96c6\u5408 \u00b6 \u58f0\u660e tuple \u548c set \u7684\u65b9\u6cd5\u4e5f\u662f\u4e00\u6837\u7684\uff1a from typing import Set , Tuple def process_items ( items_t : Tuple [ int , int , str ], items_s : Set [ bytes ]): return items_t , items_s \u8fd9\u8868\u793a\uff1a \u53d8\u91cf items_t \u662f\u4e00\u4e2a tuple \uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f int \u7c7b\u578b\u3002 \u53d8\u91cf items_s \u662f\u4e00\u4e2a set \uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f bytes \u7c7b\u578b\u3002 \u5b57\u5178 \u00b6 \u5b9a\u4e49 dict \u65f6\uff0c\u9700\u8981\u4f20\u5165\u4e24\u4e2a\u5b50\u7c7b\u578b\uff0c\u7528\u9017\u53f7\u8fdb\u884c\u5206\u9694\u3002 \u7b2c\u4e00\u4e2a\u5b50\u7c7b\u578b\u58f0\u660e dict \u7684\u6240\u6709\u952e\u3002 \u7b2c\u4e8c\u4e2a\u5b50\u7c7b\u578b\u58f0\u660e dict \u7684\u6240\u6709\u503c\uff1a from typing import Dict def process_items ( prices : Dict [ str , float ]): for item_name , item_price in prices . items (): print ( item_name ) print ( item_price ) \u8fd9\u8868\u793a\uff1a \u53d8\u91cf prices \u662f\u4e00\u4e2a dict \uff1a \u8fd9\u4e2a dict \u7684\u6240\u6709\u952e\u4e3a str \u7c7b\u578b\uff08\u53ef\u4ee5\u770b\u4f5c\u662f\u5b57\u5178\u5185\u6bcf\u4e2a\u5143\u7d20\u7684\u540d\u79f0\uff09\u3002 \u8fd9\u4e2a dict \u7684\u6240\u6709\u503c\u4e3a float \u7c7b\u578b\uff08\u53ef\u4ee5\u770b\u4f5c\u662f\u5b57\u5178\u5185\u6bcf\u4e2a\u5143\u7d20\u7684\u4ef7\u683c\uff09\u3002 \u7c7b\u4f5c\u4e3a\u7c7b\u578b \u00b6 \u4f60\u4e5f\u53ef\u4ee5\u5c06\u7c7b\u58f0\u660e\u4e3a\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u540d\u4e3a Person \u7684\u7c7b\uff0c\u62e5\u6709 name \u5c5e\u6027\uff1a class Person : def __init__ ( self , name : str ): self . name = name def get_person_name ( one_person : Person ): return one_person . name \u63a5\u4e0b\u6765\uff0c\u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u53d8\u91cf\u58f0\u660e\u4e3a Person \u7c7b\u578b\uff1a class Person : def __init__ ( self , name : str ): self . name = name def get_person_name ( one_person : Person ): return one_person . name \u7136\u540e\uff0c\u4f60\u5c06\u518d\u6b21\u83b7\u5f97\u6240\u6709\u7684\u7f16\u8f91\u5668\u652f\u6301\uff1a Pydantic \u6a21\u578b \u00b6 Pydantic \u662f\u4e00\u4e2a\u7528\u6765\u7528\u6765\u6267\u884c\u6570\u636e\u6821\u9a8c\u7684 Python \u5e93\u3002 \u4f60\u53ef\u4ee5\u5c06\u6570\u636e\u7684\"\u7ed3\u6784\"\u58f0\u660e\u4e3a\u5177\u6709\u5c5e\u6027\u7684\u7c7b\u3002 \u6bcf\u4e2a\u5c5e\u6027\u90fd\u62e5\u6709\u7c7b\u578b\u3002 \u63a5\u7740\u4f60\u7528\u4e00\u4e9b\u503c\u6765\u521b\u5efa\u8fd9\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff0c\u8fd9\u4e9b\u503c\u4f1a\u88ab\u6821\u9a8c\uff0c\u5e76\u88ab\u8f6c\u6362\u4e3a\u9002\u5f53\u7684\u7c7b\u578b\uff08\u5728\u9700\u8981\u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6240\u6709\u6570\u636e\u7684\u5bf9\u8c61\u3002 \u7136\u540e\uff0c\u4f60\u5c06\u83b7\u5f97\u8fd9\u4e2a\u5bf9\u8c61\u7684\u6240\u6709\u7f16\u8f91\u5668\u652f\u6301\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u6765\u81ea Pydantic \u5b98\u65b9\u6587\u6863\uff1a class Person : def __init__ ( self , name : str ): self . name = name def get_person_name ( one_person : Person ): return one_person . name Info \u60f3\u8fdb\u4e00\u6b65\u4e86\u89e3 Pydantic\uff0c\u8bf7\u9605\u8bfb\u5176\u6587\u6863 . \u6574\u4e2a FastAPI \u5efa\u7acb\u5728 Pydantic \u7684\u57fa\u7840\u4e4b\u4e0a\u3002 \u5b9e\u9645\u4e0a\u4f60\u5c06\u5728 \u6559\u7a0b - \u7528\u6237\u6307\u5357 \u770b\u5230\u5f88\u591a\u8fd9\u79cd\u60c5\u51b5\u3002 FastAPI \u4e2d\u7684\u7c7b\u578b\u63d0\u793a \u00b6 FastAPI \u5229\u7528\u8fd9\u4e9b\u7c7b\u578b\u63d0\u793a\u6765\u505a\u4e0b\u9762\u51e0\u4ef6\u4e8b\u3002 \u4f7f\u7528 FastAPI \u65f6\u7528\u7c7b\u578b\u63d0\u793a\u58f0\u660e\u53c2\u6570\u53ef\u4ee5\u83b7\u5f97\uff1a \u7f16\u8f91\u5668\u652f\u6301 \u3002 \u7c7b\u578b\u68c0\u67e5 \u3002 ...\u5e76\u4e14 FastAPI \u8fd8\u4f1a\u7528\u8fd9\u4e9b\u7c7b\u578b\u58f0\u660e\u6765\uff1a \u5b9a\u4e49\u53c2\u6570\u8981\u6c42 \uff1a\u58f0\u660e\u5bf9\u8bf7\u6c42\u8def\u5f84\u53c2\u6570\u3001\u67e5\u8be2\u53c2\u6570\u3001\u8bf7\u6c42\u5934\u3001\u8bf7\u6c42\u4f53\u3001\u4f9d\u8d56\u7b49\u7684\u8981\u6c42\u3002 \u8f6c\u6362\u6570\u636e \uff1a\u5c06\u6765\u81ea\u8bf7\u6c42\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u9700\u8981\u7684\u7c7b\u578b\u3002 \u6821\u9a8c\u6570\u636e \uff1a \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8bf7\u6c42\uff1a \u5f53\u6570\u636e\u6821\u9a8c\u5931\u8d25\u65f6\u81ea\u52a8\u751f\u6210 \u9519\u8bef\u4fe1\u606f \u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 \u4f7f\u7528 OpenAPI \u8bb0\u5f55 API\uff1a \u7136\u540e\u7528\u4e8e\u81ea\u52a8\u751f\u6210\u4ea4\u4e92\u5f0f\u6587\u6863\u7684\u7528\u6237\u754c\u9762\u3002 \u542c\u4e0a\u53bb\u6709\u70b9\u62bd\u8c61\u3002\u4e0d\u8fc7\u4e0d\u7528\u62c5\u5fc3\u3002\u4f60\u5c06\u5728 \u6559\u7a0b - \u7528\u6237\u6307\u5357 \u4e2d\u770b\u5230\u6240\u6709\u7684\u5b9e\u6218\u3002 \u6700\u91cd\u8981\u7684\u662f\uff0c\u901a\u8fc7\u4f7f\u7528\u6807\u51c6\u7684 Python \u7c7b\u578b\uff0c\u53ea\u9700\u8981\u5728\u4e00\u4e2a\u5730\u65b9\u58f0\u660e\uff08\u800c\u4e0d\u662f\u6dfb\u52a0\u66f4\u591a\u7684\u7c7b\u3001\u88c5\u9970\u5668\u7b49\uff09\uff0c FastAPI \u4f1a\u4e3a\u4f60\u5b8c\u6210\u5f88\u591a\u7684\u5de5\u4f5c\u3002 Info \u5982\u679c\u4f60\u5df2\u7ecf\u9605\u8bfb\u4e86\u6240\u6709\u6559\u7a0b\uff0c\u56de\u8fc7\u5934\u6765\u60f3\u4e86\u89e3\u6709\u5173\u7c7b\u578b\u7684\u66f4\u591a\u4fe1\u606f\uff0c \u6765\u81ea mypy \u7684\"\u901f\u67e5\u8868\" \u662f\u4e0d\u9519\u7684\u8d44\u6e90\u3002","title":"Python \u7c7b\u578b\u63d0\u793a\u7b80\u4ecb"},{"location":"python-types/#python","text":"Python 3.6+ \u7248\u672c \u52a0\u5165\u4e86\u5bf9\"\u7c7b\u578b\u63d0\u793a\"\u7684\u652f\u6301\u3002 \u8fd9\u4e9b \"\u7c7b\u578b\u63d0\u793a\" \u662f\u4e00\u79cd\u65b0\u7684\u8bed\u6cd5\uff08\u5728 Python 3.6 \u7248\u672c\u52a0\u5165\uff09\u7528\u6765\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u7684 \u7c7b\u578b \u3002 \u901a\u8fc7\u58f0\u660e\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u7f16\u8f91\u5668\u548c\u4e00\u4e9b\u5de5\u5177\u80fd\u7ed9\u4f60\u63d0\u4f9b\u66f4\u597d\u7684\u652f\u6301\u3002 \u8fd9\u53ea\u662f\u4e00\u4e2a\u5173\u4e8e Python \u7c7b\u578b\u63d0\u793a\u7684 \u5feb\u901f\u5165\u95e8 / \u590d\u4e60 \u3002\u5b83\u4ec5\u6db5\u76d6\u4e0e FastAPI \u4e00\u8d77\u4f7f\u7528\u6240\u9700\u7684\u6700\u5c11\u90e8\u5206...\u5b9e\u9645\u4e0a\u53ea\u6709\u5f88\u5c11\u4e00\u70b9\u3002 \u6574\u4e2a FastAPI \u90fd\u57fa\u4e8e\u8fd9\u4e9b\u7c7b\u578b\u63d0\u793a\u6784\u5efa\uff0c\u5b83\u4eec\u5e26\u6765\u4e86\u8bb8\u591a\u4f18\u70b9\u548c\u597d\u5904\u3002 \u4f46\u5373\u4f7f\u4f60\u4e0d\u4f1a\u7528\u5230 FastAPI \uff0c\u4e86\u89e3\u4e00\u4e0b\u7c7b\u578b\u63d0\u793a\u4e5f\u4f1a\u8ba9\u4f60\u4ece\u4e2d\u53d7\u76ca\u3002 Note \u5982\u679c\u4f60\u5df2\u7ecf\u7cbe\u901a Python\uff0c\u5e76\u4e14\u4e86\u89e3\u5173\u4e8e\u7c7b\u578b\u63d0\u793a\u7684\u4e00\u5207\u77e5\u8bc6\uff0c\u76f4\u63a5\u8df3\u5230\u4e0b\u4e00\u7ae0\u8282\u5427\u3002","title":"Python \u7c7b\u578b\u63d0\u793a\u7b80\u4ecb"},{"location":"python-types/#_1","text":"\u8ba9\u6211\u4eec\u4ece\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5f00\u59cb\uff1a def get_full_name ( first_name , last_name ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \u8fd0\u884c\u8fd9\u6bb5\u7a0b\u5e8f\u5c06\u8f93\u51fa\uff1a John Doe \u8fd9\u4e2a\u51fd\u6570\u505a\u4e86\u4e0b\u9762\u8fd9\u4e9b\u4e8b\u60c5\uff1a \u63a5\u6536 first_name \u548c last_name \u53c2\u6570\u3002 \u901a\u8fc7 title() \u5c06\u6bcf\u4e2a\u53c2\u6570\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u5f62\u5f0f\u3002 \u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u6765 \u62fc\u63a5 \u5b83\u4eec\u3002 def get_full_name ( first_name , last_name ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" ))","title":"\u52a8\u673a"},{"location":"python-types/#_2","text":"\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u7a0b\u5e8f\u3002 \u73b0\u5728\u5047\u8bbe\u4f60\u5c06\u4ece\u5934\u5f00\u59cb\u7f16\u5199\u8fd9\u6bb5\u7a0b\u5e8f\u3002 \u5728\u67d0\u4e00\u65f6\u523b\uff0c\u4f60\u5f00\u59cb\u5b9a\u4e49\u51fd\u6570\uff0c\u5e76\u4e14\u51c6\u5907\u597d\u4e86\u53c2\u6570...\u3002 \u73b0\u5728\u4f60\u9700\u8981\u8c03\u7528\u4e00\u4e2a\"\u5c06\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u5f62\u5f0f\u7684\u65b9\u6cd5\"\u3002 \u7b49\u7b49\uff0c\u90a3\u4e2a\u65b9\u6cd5\u662f\u4ec0\u4e48\u6765\u7740\uff1f upper \uff1f\u8fd8\u662f uppercase \uff1f first_uppercase \uff1f capitalize \uff1f \u7136\u540e\u4f60\u5c1d\u8bd5\u5411\u7a0b\u5e8f\u5458\u8001\u624b\u7684\u670b\u53cb\u2014\u2014\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\u5bfb\u6c42\u5e2e\u52a9\u3002 \u8f93\u5165\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 first_name \uff0c\u8f93\u5165\u70b9\u53f7\uff08 . \uff09\u7136\u540e\u6572\u4e0b Ctrl+Space \u6765\u89e6\u53d1\u4ee3\u7801\u8865\u5168\u3002 \u4f46\u9057\u61be\u7684\u662f\u5e76\u6ca1\u6709\u8d77\u4ec0\u4e48\u4f5c\u7528\uff1a","title":"\u4fee\u6539\u793a\u4f8b"},{"location":"python-types/#_3","text":"\u8ba9\u6211\u4eec\u6765\u4fee\u6539\u4e0a\u9762\u4f8b\u5b50\u7684\u4e00\u884c\u4ee3\u7801\u3002 \u6211\u4eec\u5c06\u628a\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u7684\u51fd\u6570\u53c2\u6570\u4ece\uff1a first_name , last_name \u6539\u6210\uff1a first_name : str , last_name : str \u5c31\u662f\u8fd9\u6837\u3002 \u8fd9\u4e9b\u5c31\u662f\"\u7c7b\u578b\u63d0\u793a\"\uff1a def get_full_name ( first_name : str , last_name : str ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \u8fd9\u548c\u58f0\u660e\u9ed8\u8ba4\u503c\u662f\u4e0d\u540c\u7684\uff0c\u4f8b\u5982\uff1a first_name = \"john\" , last_name = \"doe\" \u8fd9\u4e24\u8005\u4e0d\u4e00\u6837\u3002 \u6211\u4eec\u7528\u7684\u662f\u5192\u53f7\uff08 : \uff09\uff0c\u4e0d\u662f\u7b49\u53f7\uff08 = \uff09\u3002 \u800c\u4e14\u6dfb\u52a0\u7c7b\u578b\u63d0\u793a\u4e00\u822c\u4e0d\u4f1a\u6539\u53d8\u539f\u6765\u7684\u8fd0\u884c\u7ed3\u679c\u3002 \u73b0\u5728\u5047\u8bbe\u6211\u4eec\u53c8\u4e00\u6b21\u6b63\u5728\u521b\u5efa\u8fd9\u4e2a\u51fd\u6570\uff0c\u8fd9\u6b21\u6dfb\u52a0\u4e86\u7c7b\u578b\u63d0\u793a\u3002 \u5728\u540c\u6837\u7684\u5730\u65b9\uff0c\u901a\u8fc7 Ctrl+Space \u89e6\u53d1\u81ea\u52a8\u8865\u5168\uff0c\u4f60\u4f1a\u53d1\u73b0\uff1a \u8fd9\u6837\uff0c\u4f60\u53ef\u4ee5\u6eda\u52a8\u67e5\u770b\u9009\u9879\uff0c\u76f4\u5230\u4f60\u627e\u5230\u770b\u8d77\u6765\u773c\u719f\u7684\u90a3\u4e2a\uff1a","title":"\u6dfb\u52a0\u7c7b\u578b"},{"location":"python-types/#_4","text":"\u4e0b\u9762\u662f\u4e00\u4e2a\u5df2\u7ecf\u6709\u7c7b\u578b\u63d0\u793a\u7684\u51fd\u6570\uff1a def get_name_with_age ( name : str , age : int ): name_with_age = name + \" is this old: \" + age return name_with_age \u56e0\u4e3a\u7f16\u8f91\u5668\u5df2\u7ecf\u77e5\u9053\u4e86\u8fd9\u4e9b\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u4e0d\u4ec5\u80fd\u5bf9\u4ee3\u7801\u8fdb\u884c\u8865\u5168\uff0c\u8fd8\u80fd\u68c0\u67e5\u5176\u4e2d\u7684\u9519\u8bef\uff1a \u73b0\u5728\u4f60\u77e5\u9053\u4e86\u5fc5\u987b\u5148\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u901a\u8fc7 str(age) \u628a age \u8f6c\u6362\u6210\u5b57\u7b26\u4e32\uff1a def get_name_with_age ( name : str , age : int ): name_with_age = name + \" is this old: \" + str ( age ) return name_with_age","title":"\u66f4\u591a\u52a8\u673a"},{"location":"python-types/#_5","text":"\u4f60\u521a\u521a\u770b\u5230\u7684\u5c31\u662f\u58f0\u660e\u7c7b\u578b\u63d0\u793a\u7684\u4e3b\u8981\u573a\u666f\u3002\u7528\u4e8e\u51fd\u6570\u7684\u53c2\u6570\u3002 \u8fd9\u4e5f\u662f\u4f60\u5c06\u5728 FastAPI \u4e2d\u4f7f\u7528\u5b83\u4eec\u7684\u4e3b\u8981\u573a\u666f\u3002","title":"\u58f0\u660e\u7c7b\u578b"},{"location":"python-types/#_6","text":"\u4e0d\u53ea\u662f str \uff0c\u4f60\u80fd\u591f\u58f0\u660e\u6240\u6709\u7684\u6807\u51c6 Python \u7c7b\u578b\u3002 \u6bd4\u5982\u4ee5\u4e0b\u7c7b\u578b\uff1a int float bool bytes def get_items ( item_a : str , item_b : int , item_c : float , item_d : bool , item_e : bytes ): return item_a , item_b , item_c , item_d , item_d , item_e","title":"\u7b80\u5355\u7c7b\u578b"},{"location":"python-types/#_7","text":"\u6709\u4e9b\u5bb9\u5668\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u5305\u542b\u5176\u4ed6\u7684\u503c\uff0c\u6bd4\u5982 dict \u3001 list \u3001 set \u548c tuple \u3002\u5b83\u4eec\u5185\u90e8\u7684\u503c\u4e5f\u4f1a\u62e5\u6709\u81ea\u5df1\u7684\u7c7b\u578b\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 Python \u7684 typing \u6807\u51c6\u5e93\u6765\u58f0\u660e\u8fd9\u4e9b\u7c7b\u578b\u4ee5\u53ca\u5b50\u7c7b\u578b\u3002 \u5b83\u4e13\u95e8\u7528\u6765\u652f\u6301\u8fd9\u4e9b\u7c7b\u578b\u63d0\u793a\u3002","title":"\u5d4c\u5957\u7c7b\u578b"},{"location":"python-types/#_8","text":"\u4f8b\u5982\uff0c\u8ba9\u6211\u4eec\u6765\u5b9a\u4e49\u4e00\u4e2a\u7531 str \u7ec4\u6210\u7684 list \u53d8\u91cf\u3002 \u4ece typing \u6a21\u5757\u5bfc\u5165 List \uff08\u6ce8\u610f\u662f\u5927\u5199\u7684 L \uff09\uff1a from typing import List def process_items ( items : List [ str ]): for item in items : print ( item ) \u540c\u6837\u4ee5\u5192\u53f7\uff08 : \uff09\u6765\u58f0\u660e\u8fd9\u4e2a\u53d8\u91cf\u3002 \u8f93\u5165 List \u4f5c\u4e3a\u7c7b\u578b\u3002 \u7531\u4e8e\u5217\u8868\u662f\u5e26\u6709\"\u5b50\u7c7b\u578b\"\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5b50\u7c7b\u578b\u653e\u5728\u65b9\u62ec\u53f7\u4e2d\uff1a from typing import List def process_items ( items : List [ str ]): for item in items : print ( item ) \u8fd9\u8868\u793a\uff1a\"\u53d8\u91cf items \u662f\u4e00\u4e2a list \uff0c\u5e76\u4e14\u8fd9\u4e2a\u5217\u8868\u91cc\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f str \"\u3002 \u8fd9\u6837\uff0c\u5373\u4f7f\u5728\u5904\u7406\u5217\u8868\u4e2d\u7684\u5143\u7d20\u65f6\uff0c\u4f60\u7684\u7f16\u8f91\u5668\u4e5f\u53ef\u4ee5\u63d0\u4f9b\u652f\u6301\u3002 \u6ca1\u6709\u7c7b\u578b\uff0c\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u5b9e\u73b0\u4e0b\u9762\u8fd9\u6837\uff1a \u6ce8\u610f\uff0c\u53d8\u91cf item \u662f\u5217\u8868 items \u4e2d\u7684\u5143\u7d20\u4e4b\u4e00\u3002 \u800c\u4e14\uff0c\u7f16\u8f91\u5668\u4ecd\u7136\u77e5\u9053\u5b83\u662f\u4e00\u4e2a str \uff0c\u5e76\u4e3a\u6b64\u63d0\u4f9b\u4e86\u652f\u6301\u3002","title":"\u5217\u8868"},{"location":"python-types/#_9","text":"\u58f0\u660e tuple \u548c set \u7684\u65b9\u6cd5\u4e5f\u662f\u4e00\u6837\u7684\uff1a from typing import Set , Tuple def process_items ( items_t : Tuple [ int , int , str ], items_s : Set [ bytes ]): return items_t , items_s \u8fd9\u8868\u793a\uff1a \u53d8\u91cf items_t \u662f\u4e00\u4e2a tuple \uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f int \u7c7b\u578b\u3002 \u53d8\u91cf items_s \u662f\u4e00\u4e2a set \uff0c\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f bytes \u7c7b\u578b\u3002","title":"\u5143\u7ec4\u548c\u96c6\u5408"},{"location":"python-types/#_10","text":"\u5b9a\u4e49 dict \u65f6\uff0c\u9700\u8981\u4f20\u5165\u4e24\u4e2a\u5b50\u7c7b\u578b\uff0c\u7528\u9017\u53f7\u8fdb\u884c\u5206\u9694\u3002 \u7b2c\u4e00\u4e2a\u5b50\u7c7b\u578b\u58f0\u660e dict \u7684\u6240\u6709\u952e\u3002 \u7b2c\u4e8c\u4e2a\u5b50\u7c7b\u578b\u58f0\u660e dict \u7684\u6240\u6709\u503c\uff1a from typing import Dict def process_items ( prices : Dict [ str , float ]): for item_name , item_price in prices . items (): print ( item_name ) print ( item_price ) \u8fd9\u8868\u793a\uff1a \u53d8\u91cf prices \u662f\u4e00\u4e2a dict \uff1a \u8fd9\u4e2a dict \u7684\u6240\u6709\u952e\u4e3a str \u7c7b\u578b\uff08\u53ef\u4ee5\u770b\u4f5c\u662f\u5b57\u5178\u5185\u6bcf\u4e2a\u5143\u7d20\u7684\u540d\u79f0\uff09\u3002 \u8fd9\u4e2a dict \u7684\u6240\u6709\u503c\u4e3a float \u7c7b\u578b\uff08\u53ef\u4ee5\u770b\u4f5c\u662f\u5b57\u5178\u5185\u6bcf\u4e2a\u5143\u7d20\u7684\u4ef7\u683c\uff09\u3002","title":"\u5b57\u5178"},{"location":"python-types/#_11","text":"\u4f60\u4e5f\u53ef\u4ee5\u5c06\u7c7b\u58f0\u660e\u4e3a\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u540d\u4e3a Person \u7684\u7c7b\uff0c\u62e5\u6709 name \u5c5e\u6027\uff1a class Person : def __init__ ( self , name : str ): self . name = name def get_person_name ( one_person : Person ): return one_person . name \u63a5\u4e0b\u6765\uff0c\u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u53d8\u91cf\u58f0\u660e\u4e3a Person \u7c7b\u578b\uff1a class Person : def __init__ ( self , name : str ): self . name = name def get_person_name ( one_person : Person ): return one_person . name \u7136\u540e\uff0c\u4f60\u5c06\u518d\u6b21\u83b7\u5f97\u6240\u6709\u7684\u7f16\u8f91\u5668\u652f\u6301\uff1a","title":"\u7c7b\u4f5c\u4e3a\u7c7b\u578b"},{"location":"python-types/#pydantic","text":"Pydantic \u662f\u4e00\u4e2a\u7528\u6765\u7528\u6765\u6267\u884c\u6570\u636e\u6821\u9a8c\u7684 Python \u5e93\u3002 \u4f60\u53ef\u4ee5\u5c06\u6570\u636e\u7684\"\u7ed3\u6784\"\u58f0\u660e\u4e3a\u5177\u6709\u5c5e\u6027\u7684\u7c7b\u3002 \u6bcf\u4e2a\u5c5e\u6027\u90fd\u62e5\u6709\u7c7b\u578b\u3002 \u63a5\u7740\u4f60\u7528\u4e00\u4e9b\u503c\u6765\u521b\u5efa\u8fd9\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff0c\u8fd9\u4e9b\u503c\u4f1a\u88ab\u6821\u9a8c\uff0c\u5e76\u88ab\u8f6c\u6362\u4e3a\u9002\u5f53\u7684\u7c7b\u578b\uff08\u5728\u9700\u8981\u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6240\u6709\u6570\u636e\u7684\u5bf9\u8c61\u3002 \u7136\u540e\uff0c\u4f60\u5c06\u83b7\u5f97\u8fd9\u4e2a\u5bf9\u8c61\u7684\u6240\u6709\u7f16\u8f91\u5668\u652f\u6301\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u6765\u81ea Pydantic \u5b98\u65b9\u6587\u6863\uff1a class Person : def __init__ ( self , name : str ): self . name = name def get_person_name ( one_person : Person ): return one_person . name Info \u60f3\u8fdb\u4e00\u6b65\u4e86\u89e3 Pydantic\uff0c\u8bf7\u9605\u8bfb\u5176\u6587\u6863 . \u6574\u4e2a FastAPI \u5efa\u7acb\u5728 Pydantic \u7684\u57fa\u7840\u4e4b\u4e0a\u3002 \u5b9e\u9645\u4e0a\u4f60\u5c06\u5728 \u6559\u7a0b - \u7528\u6237\u6307\u5357 \u770b\u5230\u5f88\u591a\u8fd9\u79cd\u60c5\u51b5\u3002","title":"Pydantic \u6a21\u578b"},{"location":"python-types/#fastapi","text":"FastAPI \u5229\u7528\u8fd9\u4e9b\u7c7b\u578b\u63d0\u793a\u6765\u505a\u4e0b\u9762\u51e0\u4ef6\u4e8b\u3002 \u4f7f\u7528 FastAPI \u65f6\u7528\u7c7b\u578b\u63d0\u793a\u58f0\u660e\u53c2\u6570\u53ef\u4ee5\u83b7\u5f97\uff1a \u7f16\u8f91\u5668\u652f\u6301 \u3002 \u7c7b\u578b\u68c0\u67e5 \u3002 ...\u5e76\u4e14 FastAPI \u8fd8\u4f1a\u7528\u8fd9\u4e9b\u7c7b\u578b\u58f0\u660e\u6765\uff1a \u5b9a\u4e49\u53c2\u6570\u8981\u6c42 \uff1a\u58f0\u660e\u5bf9\u8bf7\u6c42\u8def\u5f84\u53c2\u6570\u3001\u67e5\u8be2\u53c2\u6570\u3001\u8bf7\u6c42\u5934\u3001\u8bf7\u6c42\u4f53\u3001\u4f9d\u8d56\u7b49\u7684\u8981\u6c42\u3002 \u8f6c\u6362\u6570\u636e \uff1a\u5c06\u6765\u81ea\u8bf7\u6c42\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u9700\u8981\u7684\u7c7b\u578b\u3002 \u6821\u9a8c\u6570\u636e \uff1a \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8bf7\u6c42\uff1a \u5f53\u6570\u636e\u6821\u9a8c\u5931\u8d25\u65f6\u81ea\u52a8\u751f\u6210 \u9519\u8bef\u4fe1\u606f \u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 \u4f7f\u7528 OpenAPI \u8bb0\u5f55 API\uff1a \u7136\u540e\u7528\u4e8e\u81ea\u52a8\u751f\u6210\u4ea4\u4e92\u5f0f\u6587\u6863\u7684\u7528\u6237\u754c\u9762\u3002 \u542c\u4e0a\u53bb\u6709\u70b9\u62bd\u8c61\u3002\u4e0d\u8fc7\u4e0d\u7528\u62c5\u5fc3\u3002\u4f60\u5c06\u5728 \u6559\u7a0b - \u7528\u6237\u6307\u5357 \u4e2d\u770b\u5230\u6240\u6709\u7684\u5b9e\u6218\u3002 \u6700\u91cd\u8981\u7684\u662f\uff0c\u901a\u8fc7\u4f7f\u7528\u6807\u51c6\u7684 Python \u7c7b\u578b\uff0c\u53ea\u9700\u8981\u5728\u4e00\u4e2a\u5730\u65b9\u58f0\u660e\uff08\u800c\u4e0d\u662f\u6dfb\u52a0\u66f4\u591a\u7684\u7c7b\u3001\u88c5\u9970\u5668\u7b49\uff09\uff0c FastAPI \u4f1a\u4e3a\u4f60\u5b8c\u6210\u5f88\u591a\u7684\u5de5\u4f5c\u3002 Info \u5982\u679c\u4f60\u5df2\u7ecf\u9605\u8bfb\u4e86\u6240\u6709\u6559\u7a0b\uff0c\u56de\u8fc7\u5934\u6765\u60f3\u4e86\u89e3\u6709\u5173\u7c7b\u578b\u7684\u66f4\u591a\u4fe1\u606f\uff0c \u6765\u81ea mypy \u7684\"\u901f\u67e5\u8868\" \u662f\u4e0d\u9519\u7684\u8d44\u6e90\u3002","title":"FastAPI \u4e2d\u7684\u7c7b\u578b\u63d0\u793a"},{"location":"release-notes/","text":"Release Notes \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Latest Changes \u00b6 \ud83d\udd27 Update sponsors, Striveworks badge. PR #5179 by @tiangolo . \ud83c\udf10 Add Persian translation for docs/fa/docs/index.md and tweak right-to-left CSS. PR #2395 by @mohsen-mahmoodi . 0.79.0 \u00b6 Fixes - Breaking Changes \u00b6 \ud83d\udc1b Fix removing body from status codes that do not support it. PR #5145 by @tiangolo . Setting status_code to 204 , 304 , or any code below 200 (1xx) will remove the body from the response. This fixes an error in Uvicorn that otherwise would be thrown: RuntimeError: Response content longer than Content-Length . This removes fastapi.openapi.constants.STATUS_CODES_WITH_NO_BODY , it is replaced by a function in utils. Translations \u00b6 \ud83c\udf10 Start of Hebrew translation. PR #5050 by @itay-raveh . \ud83d\udd27 Add config for Swedish translations notification. PR #5147 by @tiangolo . \ud83c\udf10 Start of Swedish translation. PR #5062 by @MrRawbin . \ud83c\udf10 Add Japanese translation for docs/ja/docs/advanced/index.md . PR #5043 by @wakabame . \ud83c\udf10\ud83c\uddf5\ud83c\uddf1 Add Polish translation for docs/pl/docs/tutorial/first-steps.md . PR #5024 by @Valaraucoo . Internal \u00b6 \ud83d\udd27 Update translations notification for Hebrew. PR #5158 by @tiangolo . \ud83d\udd27 Update Dependabot commit message. PR #5156 by @tiangolo . \u2b06 Bump actions/upload-artifact from 2 to 3. PR #5148 by @dependabot[bot] . \u2b06 Bump actions/cache from 2 to 3. PR #5149 by @dependabot[bot] . \ud83d\udd27 Update sponsors badge configs. PR #5155 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #5154 by @tiangolo . \ud83d\udd27 Update Jina sponsor badges. PR #5151 by @tiangolo . \u2b06 Bump actions/checkout from 2 to 3. PR #5133 by @dependabot[bot] . \u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5030 by @pre-commit-ci[bot] . \u2b06 Bump nwtgck/actions-netlify from 1.1.5 to 1.2.3. PR #5132 by @dependabot[bot] . \u2b06 Bump codecov/codecov-action from 2 to 3. PR #5131 by @dependabot[bot] . \u2b06 Bump dawidd6/action-download-artifact from 2.9.0 to 2.21.1. PR #5130 by @dependabot[bot] . \u2b06 Bump actions/setup-python from 2 to 4. PR #5129 by @dependabot[bot] . \ud83d\udc77 Add Dependabot. PR #5128 by @tiangolo . \u267b\ufe0f Move from Optional[X] to Union[X, None] for internal utils. PR #5124 by @tiangolo . \ud83d\udd27 Update sponsors, remove Dropbase, add Doist. PR #5096 by @tiangolo . \ud83d\udd27 Update sponsors, remove Classiq, add ImgWhale. PR #5079 by @tiangolo . 0.78.0 \u00b6 Features \u00b6 \u2728 Add support for omitting ... as default value when declaring required parameters with: Path() Query() Header() Cookie() Body() Form() File() New docs at Tutorial - Query Parameters and String Validations - Make it required . PR #4906 by @tiangolo . Up to now, declaring a required parameter while adding additional validation or metadata needed using ... (Ellipsis). For example: from fastapi import Cookie , FastAPI , Header , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def main ( item_id : int = Path ( default =... , gt = 0 ), query : str = Query ( default =... , max_length = 10 ), session : str = Cookie ( default =... , min_length = 3 ), x_trace : str = Header ( default =... , title = \"Tracing header\" ), ): return { \"message\" : \"Hello World\" } ...all these parameters are required because the default value is ... (Ellipsis). But now it's possible and supported to just omit the default value, as would be done with Pydantic fields, and the parameters would still be required. \u2728 For example, this is now supported: from fastapi import Cookie , FastAPI , Header , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def main ( item_id : int = Path ( gt = 0 ), query : str = Query ( max_length = 10 ), session : str = Cookie ( min_length = 3 ), x_trace : str = Header ( title = \"Tracing header\" ), ): return { \"message\" : \"Hello World\" } To declare parameters as optional (not required), you can set a default value as always, for example using None : from typing import Union from fastapi import Cookie , FastAPI , Header , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def main ( item_id : int = Path ( gt = 0 ), query : Union [ str , None ] = Query ( default = None , max_length = 10 ), session : Union [ str , None ] = Cookie ( default = None , min_length = 3 ), x_trace : Union [ str , None ] = Header ( default = None , title = \"Tracing header\" ), ): return { \"message\" : \"Hello World\" } Docs \u00b6 \ud83d\udcdd Add docs recommending Union over Optional and migrate source examples. New docs at Python Types Intro - Using Union or Optional . PR #4908 by @tiangolo . \ud83c\udfa8 Fix default value as set in tutorial for Path Operations Advanced Configurations. PR #4899 by @tiangolo . \ud83d\udcdd Add documentation for redefined path operations. PR #4864 by @madkinsz . \ud83d\udcdd Updates links for Celery documentation. PR #4736 by @sammyzord . \u270f Fix example code with sets in tutorial for body nested models. PR #3030 by @hitrust . \u270f Fix links to Pydantic docs. PR #4670 by @kinuax . \ud83d\udcdd Update docs about Swagger UI self-hosting with newer source links. PR #4813 by @Kastakin . \ud83d\udcdd Add link to external article: Building the Poll App From Django Tutorial With FastAPI And React. PR #4778 by @jbrocher . \ud83d\udcdd Add OpenAPI warning to \"Body - Fields\" docs with extra schema extensions. PR #4846 by @ml-evs . Translations \u00b6 \ud83c\udf10 Fix code examples in Japanese translation for docs/ja/docs/tutorial/testing.md . PR #4623 by @hirotoKirimaru . Internal \u00b6 \u267b Refactor dict value extraction to minimize key lookups fastapi/utils.py . PR #3139 by @ShahriyarR . \u2705 Add tests for required nonable parameters and body fields. PR #4907 by @tiangolo . \ud83d\udc77 Fix installing Material for MkDocs Insiders in CI. PR #4897 by @tiangolo . \ud83d\udc77 Add pre-commit CI instead of custom GitHub Action. PR #4896 by @tiangolo . \ud83d\udc77 Add pre-commit GitHub Action workflow. PR #4895 by @tiangolo . \ud83d\udcdd Add dark mode auto switch to docs based on OS preference. PR #4869 by @ComicShrimp . \ud83d\udd25 Remove un-used old pending tests, already covered in other places. PR #4891 by @tiangolo . \ud83d\udd27 Add Python formatting hooks to pre-commit. PR #4890 by @tiangolo . \ud83d\udd27 Add pre-commit with first config and first formatting pass. PR #4888 by @tiangolo . \ud83d\udc77 Disable CI installing Material for MkDocs in forks. PR #4410 by @dolfinus . 0.77.1 \u00b6 Upgrades \u00b6 \u2b06 Upgrade Starlette from 0.19.0 to 0.19.1. PR #4819 by @Kludex . Docs \u00b6 \ud83d\udcdd Add link to german article: REST-API Programmieren mittels Python und dem FastAPI Modul. PR #4624 by @fschuermeyer . \ud83d\udcdd Add external link: PyCharm Guide to FastAPI. PR #4512 by @mukulmantosh . \ud83d\udcdd Add external link to article: Building an API with FastAPI and Supabase and Deploying on Deta. PR #4440 by @aUnicornDev . \u270f Fix small typo in docs/en/docs/tutorial/security/first-steps.md . PR #4515 by @KikoIlievski . Translations \u00b6 \ud83c\udf10 Add Polish translation for docs/pl/docs/tutorial/index.md . PR #4516 by @MKaczkow . \u270f Fix typo in deployment. PR #4629 by @raisulislam541 . \ud83c\udf10 Add Portuguese translation for docs/pt/docs/help-fastapi.md . PR #4583 by @mateusjs . Internal \u00b6 \ud83d\udd27 Add notifications in issue for Uzbek translations. PR #4884 by @tiangolo . 0.77.0 \u00b6 Upgrades \u00b6 \u2b06 Upgrade Starlette from 0.18.0 to 0.19.0. PR #4488 by @Kludex . When creating an explicit JSONResponse the content argument is now required. Docs \u00b6 \ud83d\udcdd Add external link to article: Seamless FastAPI Configuration with ConfZ. PR #4414 by @silvanmelchior . \ud83d\udcdd Add external link to article: 5 Advanced Features of FastAPI You Should Try. PR #4436 by @kaustubhgupta . \u270f Reword to improve legibility of docs about TestClient . PR #4389 by @rgilton . \ud83d\udcdd Add external link to blog post about Kafka, FastAPI, and Ably. PR #4044 by @Ugbot . \u270f Fix typo in docs/en/docs/tutorial/sql-databases.md . PR #4875 by @wpyoga . \u270f Fix typo in docs/en/docs/async.md . PR #4726 by @Prezu . Translations \u00b6 \ud83c\udf10 Update source example highlights for docs/zh/docs/tutorial/query-params-str-validations.md . PR #4237 by @caimaoy . \ud83c\udf10 Remove translation docs references to aiofiles as it's no longer needed since AnyIO. PR #3594 by @alonme . \u270f \ud83c\udf10 Fix typo in Portuguese translation for docs/pt/docs/tutorial/path-params.md . PR #4722 by @CleoMenezesJr . \ud83c\udf10 Fix live docs server for translations for some languages. PR #4729 by @wakabame . \ud83c\udf10 Add Portuguese translation for docs/pt/docs/tutorial/cookie-params.md . PR #4112 by @lbmendes . \ud83c\udf10 Fix French translation for docs/tutorial/body.md . PR #4332 by @Smlep . \ud83c\udf10 Add Japanese translation for docs/ja/docs/advanced/conditional-openapi.md . PR #2631 by @sh0nk . \ud83c\udf10 Fix Japanese translation of docs/ja/docs/tutorial/body.md . PR #3062 by @a-takahashi223 . \ud83c\udf10 Add Portuguese translation for docs/pt/docs/tutorial/background-tasks.md . PR #2170 by @izaguerreiro . \ud83c\udf10 Add Portuguese translation for docs/deployment/deta.md . PR #4442 by @lsglucas . \ud83c\udf10 Add Russian translation for docs/async.md . PR #4036 by @Winand . \ud83c\udf10 Add Portuguese translation for docs/tutorial/body.md . PR #3960 by @leandrodesouzadev . \ud83c\udf10 Add Portuguese translation of tutorial/extra-data-types.md . PR #4077 by @luccasmmg . \ud83c\udf10 Update German translation for docs/features.md . PR #3905 by @jomue . 0.76.0 \u00b6 Upgrades \u00b6 \u2b06 Upgrade Starlette from 0.17.1 to 0.18.0. PR #4483 by @Kludex . Internal \u00b6 \ud83d\udc65 Update FastAPI People. PR #4847 by @github-actions[bot] . \ud83d\udd27 Add Budget Insight sponsor. PR #4824 by @tiangolo . \ud83c\udf71 Update sponsor, ExoFlare badge. PR #4822 by @tiangolo . \ud83d\udd27 Update sponsors, enable Dropbase again, update TalkPython link. PR #4821 by @tiangolo . 0.75.2 \u00b6 This release includes upgrades to third-party packages that handle security issues. Although there's a chance these issues don't affect you in particular, please upgrade as soon as possible. Fixes \u00b6 \u2705 Fix new/recent tests with new fixed ValidationError JSON Schema. PR #4806 by @tiangolo . \ud83d\udc1b Fix JSON Schema for ValidationError at field loc . PR #3810 by @dconathan . \ud83d\udc1b Fix support for prefix on APIRouter WebSockets. PR #2640 by @Kludex . Upgrades \u00b6 \u2b06\ufe0f Update ujson ranges for CVE-2021-45958. PR #4804 by @tiangolo . \u2b06\ufe0f Upgrade dependencies upper range for extras \"all\". PR #4803 by @tiangolo . \u2b06 Upgrade Swagger UI - swagger-ui-dist@4. This handles a security issue in Swagger UI itself where it could be possible to inject HTML into Swagger UI. Please upgrade as soon as you can, in particular if you expose your Swagger UI ( /docs ) publicly to non-expert users. PR #4347 by @RAlanWright . Internal \u00b6 \ud83d\udd27 Update sponsors, add: ExoFlare, Ines Course; remove: Dropbase, Vim.so, Calmcode; update: Striveworks, TalkPython and TestDriven.io. PR #4805 by @tiangolo . \u2b06\ufe0f Upgrade Codecov GitHub Action. PR #4801 by @tiangolo . 0.75.1 \u00b6 Translations \u00b6 \ud83c\udf10 Start Dutch translations. PR #4703 by @tiangolo . \ud83c\udf10 Start Persian/Farsi translations. PR #4243 by @aminalaee . \u270f Reword sentence about handling errors. PR #1993 by @khuhroproeza . Internal \u00b6 \ud83d\udc65 Update FastAPI People. PR #4752 by @github-actions[bot] . \u2796 Temporarily remove typer-cli from dependencies and upgrade Black to unblock Pydantic CI. PR #4754 by @tiangolo . \ud83d\udd27 Add configuration to notify Dutch translations. PR #4702 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #4699 by @github-actions[bot] . \ud83d\udc1b Fix FastAPI People generation to include missing file in commit. PR #4695 by @tiangolo . \ud83d\udd27 Update Classiq sponsor links. PR #4688 by @tiangolo . \ud83d\udd27 Add Classiq sponsor. PR #4671 by @tiangolo . \ud83d\udcdd Add Jina's QA Bot to the docs to help people that want to ask quick questions. PR #4655 by @tiangolo based on original PR #4626 by @hanxiao . 0.75.0 \u00b6 Features \u00b6 \u2728 Add support for custom generate_unique_id_function and docs for generating clients. New docs: Advanced - Generate Clients . PR #4650 by @tiangolo . 0.74.1 \u00b6 Features \u00b6 \u2728 Include route in scope to allow middleware and other tools to extract its information. PR #4603 by @tiangolo . 0.74.0 \u00b6 Breaking Changes \u00b6 \u2728 Update internal AsyncExitStack to fix context for dependencies with yield . PR #4575 by @tiangolo . Dependencies with yield can now catch HTTPException and custom exceptions. For example: async def get_database (): with Session () as session : try : yield session except HTTPException : session . rollback () raise finally : session . close () After the dependency with yield handles the exception (or not) the exception is raised again. So that any exception handlers can catch it, or ultimately the default internal ServerErrorMiddleware . If you depended on exceptions not being received by dependencies with yield , and receiving an exception breaks the code after yield , you can use a block with try and finally : async def do_something (): try : yield something finally : some_cleanup () ...that way the finally block is run regardless of any exception that might happen. Features \u00b6 The same PR #4575 from above also fixes the contextvars context for the code before and after yield . This was the main objective of that PR. This means that now, if you set a value in a context variable before yield , the value would still be available after yield (as you would intuitively expect). And it also means that you can reset the context variable with a token afterwards. For example, this works correctly now: from contextvars import ContextVar from typing import Any , Dict , Optional legacy_request_state_context_var : ContextVar [ Optional [ Dict [ str , Any ]]] = ContextVar ( \"legacy_request_state_context_var\" , default = None ) async def set_up_request_state_dependency (): request_state = { \"user\" : \"deadpond\" } contextvar_token = legacy_request_state_context_var . set ( request_state ) yield request_state legacy_request_state_context_var . reset ( contextvar_token ) ...before this change it would raise an error when resetting the context variable, because the contextvars context was different, because of the way it was implemented. Note : You probably don't need contextvars , and you should probably avoid using them. But they are powerful and useful in some advanced scenarios, for example, migrating from code that used Flask's g semi-global variable. Technical Details : If you want to know more of the technical details you can check out the PR description #4575 . Internal \u00b6 \ud83d\udd27 Add Striveworks sponsor. PR #4596 by @tiangolo . \ud83d\udc9a Only build docs on push when on master to avoid duplicate runs from PRs. PR #4564 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #4502 by @github-actions[bot] . 0.73.0 \u00b6 Features \u00b6 \u2728 Add support for declaring UploadFile parameters without explicit File() . PR #4469 by @tiangolo . New docs: Request Files - File Parameters with UploadFile . \u2728 Add support for tags with Enums. PR #4468 by @tiangolo . New docs: Path Operation Configuration - Tags with Enums . \u2728 Allow hiding from OpenAPI (and Swagger UI) Query , Cookie , Header , and Path parameters. PR #3144 by @astraldawn . New docs: Query Parameters and String Validations - Exclude from OpenAPI . Docs \u00b6 \ud83d\udcdd Tweak and improve docs for Request Files. PR #4470 by @tiangolo . Fixes \u00b6 \ud83d\udc1b Fix bug preventing to use OpenAPI when using tuples. PR #3874 by @victorbenichoux . \ud83d\udc1b Prefer custom encoder over defaults if specified in jsonable_encoder . PR #2061 by @viveksunder . \ud83d\udc9a Duplicate PR to trigger CI. PR #4467 by @tiangolo . Internal \u00b6 \ud83d\udc1b Fix docs dependencies cache, to get the latest Material for MkDocs. PR #4466 by @tiangolo . \ud83d\udd27 Add sponsor Dropbase. PR #4465 by @tiangolo . 0.72.0 \u00b6 Features \u00b6 \u2728 Enable configuring Swagger UI parameters. Original PR #2568 by @jmriebold . Here are the new docs: Configuring Swagger UI . Docs \u00b6 \ud83d\udcdd Update Python Types docs, add missing 3.6 / 3.9 example. PR #4434 by @tiangolo . Translations \u00b6 \ud83c\udf10 Update Chinese translation for docs/help-fastapi.md . PR #3847 by @jaystone776 . \ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md . PR #4195 by @kty4119 . \ud83c\udf10 Add Polish translation for docs/pl/docs/index.md . PR #4245 by @MicroPanda123 . \ud83c\udf10 Add Chinese translation for docs\\tutorial\\path-operation-configuration.md . PR #3312 by @jaystone776 . Internal \u00b6 \ud83d\udd27 Enable MkDocs Material Insiders' content.tabs.link . PR #4399 by @tiangolo . 0.71.0 \u00b6 Features \u00b6 \u2728 Add docs and tests for Python 3.9 and Python 3.10. PR #3712 by @tiangolo . You can start with Python Types Intro , it explains what changes between different Python versions, in Python 3.9 and in Python 3.10. All the FastAPI docs are updated. Each code example in the docs that could use different syntax in Python 3.9 or Python 3.10 now has all the alternatives in tabs. \u2b06\ufe0f Upgrade Starlette to 0.17.1. PR #4145 by @simondale00 . Internal \u00b6 \ud83d\udc65 Update FastAPI People. PR #4354 by @github-actions[bot] . \ud83d\udd27 Add FastAPI Trove Classifier for PyPI as now there's one \ud83e\udd37\ud83d\ude01. PR #4386 by @tiangolo . \u2b06 Upgrade MkDocs Material and configs. PR #4385 by @tiangolo . 0.70.1 \u00b6 There's nothing interesting in this particular FastAPI release. It is mainly to enable/unblock the release of the next version of Pydantic that comes packed with features and improvements. \ud83e\udd29 Fixes \u00b6 \ud83d\udc1b Fix JSON Schema for dataclasses, supporting the fixes in Pydantic 1.9. PR #4272 by @PrettyWood . Translations \u00b6 \ud83c\udf10 Add Korean translation for docs/tutorial/request-forms-and-files.md . PR #3744 by @NinaHwang . \ud83c\udf10 Add Korean translation for docs/tutorial/request-files.md . PR #3743 by @NinaHwang . \ud83c\udf10 Add portuguese translation for docs/tutorial/query-params-str-validations.md . PR #3965 by @leandrodesouzadev . \ud83c\udf10 Add Korean translation for docs/tutorial/response-status-code.md . PR #3742 by @NinaHwang . \ud83c\udf10 Add Korean translation for Tutorial - JSON Compatible Encoder. PR #3152 by @NEONKID . \ud83c\udf10 Add Korean translation for Tutorial - Path Parameters and Numeric Validations. PR #2432 by @hard-coders . \ud83c\udf10 Add Korean translation for docs/ko/docs/deployment/versions.md . PR #4121 by @DevDae . \ud83c\udf10 Fix Korean translation for docs/ko/docs/tutorial/index.md . PR #4193 by @kimjaeyoonn . \ud83d\udd27 Add CryptAPI sponsor. PR #4264 by @tiangolo . \ud83d\udcdd Update docs/tutorial/dependencies/classes-as-dependencies : Add type of query parameters in a description of Classes as dependencies . PR #4015 by @0417taehyun . \ud83c\udf10 Add French translation for Tutorial - First steps. PR #3455 by @Smlep . \ud83c\udf10 Add French translation for docs/tutorial/path-params.md . PR #3548 by @Smlep . \ud83c\udf10 Add French translation for docs/tutorial/query-params.md . PR #3556 by @Smlep . \ud83c\udf10 Add Turkish translation for docs/python-types.md . PR #3926 by @BilalAlpaslan . Internal \u00b6 \ud83d\udc65 Update FastAPI People. PR #4274 by @github-actions[bot] . 0.70.0 \u00b6 This release just upgrades Starlette to the latest version, 0.16.0 , which includes several bug fixes and some small breaking changes. These last three consecutive releases are independent so that you can migrate gradually : First to FastAPI 0.68.2 , with no breaking changes, but upgrading all the sub-dependencies. Next to FastAPI 0.69.0 , which upgrades Starlette to 0.15.0 , with AnyIO support, and a higher chance of having breaking changes in your code. Finally to FastAPI 0.70.0 , just upgrading Starlette to the latest version 0.16.0 with additional bug fixes. This way, in case there was a breaking change for your code in one of the releases, you can still benefit from the previous upgrades. \u2728 Breaking Changes - Upgrade \u00b6 \u2b06\ufe0f Upgrade Starlette to 0.16.0. PR #4016 by @tiangolo . Also upgrades the ranges of optional dependencies: \"jinja2 >=2.11.2,<4.0.0\" \"itsdangerous >=1.1.0,<3.0.0\" 0.69.0 \u00b6 Breaking Changes - Upgrade \u00b6 This release adds support for Trio . \u2728 It upgrades the version of Starlette to 0.15.0 , now based on AnyIO , and the internal async components in FastAPI are now based on AnyIO as well, making it compatible with both asyncio and Trio . You can read the docs about running FastAPI with Trio using Hypercorn . This release also removes graphene as an optional dependency for GraphQL. If you need to work with GraphQL, the recommended library now is Strawberry . You can read the new FastAPI with GraphQL docs . Features \u00b6 \u2728 Add support for Trio via AnyIO, upgrading Starlette to 0.15.0 . PR #3372 by @graingert . \u2796 Remove graphene as an optional dependency. PR #4007 by @tiangolo . Docs \u00b6 \ud83d\udcdd Add docs for using Trio with Hypercorn. PR #4014 by @tiangolo . \u270f Fix typos in Deployment Guide. PR #3975 by @ghandic . \ud83d\udcdd Update docs with pip install calls when using extras with brackets, use quotes for compatibility with Zsh. PR #3131 by @tomwei7 . \ud83d\udcdd Add external link to article: Deploying ML Models as API Using FastAPI and Heroku. PR #3904 by @kaustubhgupta . \u270f Fix typo in file paths in docs/en/docs/contributing.md . PR #3752 by @NinaHwang . \u270f Fix a typo in docs/en/docs/advanced/path-operation-advanced-configuration.md and docs/en/docs/release-notes.md . PR #3750 by @saintmalik . \u270f\ufe0f Add a missing comma in the security tutorial. PR #3564 by @jalvaradosegura . \u270f Fix typo in docs/en/docs/help-fastapi.md . PR #3760 by @jaystone776 . \u270f Fix typo about file path in docs/en/docs/tutorial/bigger-applications.md . PR #3285 by @HolyDorus . \u270f Re-word to clarify test client in docs/en/docs/tutorial/testing.md . PR #3382 by @Bharat123rox . \ud83d\udcdd Fix incorrect highlighted code. PR #3325 by @paxcodes . \ud83d\udcdd Add external link to article: How-to deploy FastAPI app to Heroku. PR #3241 by @Jarmos-san . \u270f Fix typo (mistranslation) in docs/en/docs/advanced/templates.md . PR #3211 by @oerpli . \ud83d\udcdd Remove note about (now supported) feature from Swagger UI in docs/en/docs/tutorial/request-files.md . PR #2803 by @gsganden . \u270f Fix typo re-word in docs/tutorial/handling-errors.md . PR #2700 by @graue70 . Translations \u00b6 \ud83c\udf10 Initialize Azerbaijani translations. PR #3941 by @madatbay . \ud83c\udf10 Add Turkish translation for docs/fastapi-people.md . PR #3848 by @BilalAlpaslan . Internal \u00b6 \ud83d\udcdd Add supported Python versions badge. PR #2794 by @hramezani . \u270f Fix link in Japanese docs for docs/ja/docs/deployment/docker.md . PR #3245 by @utamori . \ud83d\udd27 Correct DeprecationWarning config and comment in pytest settings. PR #4008 by @graingert . \ud83d\udd27 Swap light/dark theme button icon. PR #3246 by @eddsalkield . \ud83d\udd27 Lint only in Python 3.7 and above. PR #4006 by @tiangolo . \ud83d\udd27 Add GitHub Action notify-translations config for Azerbaijani. PR #3995 by @tiangolo . 0.68.2 \u00b6 This release has no breaking changes . \ud83c\udf89 It upgrades the version ranges of sub-dependencies to allow applications using FastAPI to easily upgrade them. Soon there will be a new FastAPI release upgrading Starlette to take advantage of recent improvements, but as that has a higher chance of having breaking changes, it will be in a separate release. Features \u00b6 \u2b06Increase supported version of aiofiles to suppress warnings. PR #2899 by @SnkSynthesis . \u2796 Do not require backports in Python >= 3.7. PR #1880 by @FFY00 . \u2b06 Upgrade required Python version to >= 3.6.1, needed by typing.Deque, used by Pydantic. PR #2733 by @hukkin . \u2b06\ufe0f Bump Uvicorn max range to 0.15.0. PR #3345 by @Kludex . Docs \u00b6 \ud83d\udcdd Update GraphQL docs, recommend Strawberry. PR #3981 by @tiangolo . \ud83d\udcdd Re-write and extend Deployment guide: Concepts, Uvicorn, Gunicorn, Docker, Containers, Kubernetes. PR #3974 by @tiangolo . \ud83d\udcdd Upgrade HTTPS guide with more explanations and diagrams. PR #3950 by @tiangolo . Translations \u00b6 \ud83c\udf10 Add Turkish translation for docs/features.md . PR #1950 by @ycd . \ud83c\udf10 Add Turkish translation for docs/benchmarks.md . PR #2729 by @Telomeraz . \ud83c\udf10 Add Turkish translation for docs/index.md . PR #1908 by @ycd . \ud83c\udf10 Add French translation for docs/tutorial/body.md . PR #3671 by @Smlep . \ud83c\udf10 Add French translation for deployment/docker.md . PR #3694 by @rjNemo . \ud83c\udf10 Add Portuguese translation for docs/tutorial/path-params.md . PR #3664 by @FelipeSilva93 . \ud83c\udf10 Add Portuguese translation for docs/deployment/https.md . PR #3754 by @lsglucas . \ud83c\udf10 Add German translation for docs/features.md . PR #3699 by @mawassk . Internal \u00b6 \u2728 Update GitHub Action: notify-translations, to avoid a race conditions. PR #3989 by @tiangolo . \u2b06\ufe0f Upgrade development autoflake , supporting multi-line imports. PR #3988 by @tiangolo . \u2b06\ufe0f Increase dependency ranges for tests and docs: pytest-cov, pytest-asyncio, black, httpx, sqlalchemy, databases, mkdocs-markdownextradata-plugin. PR #3987 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #3986 by @github-actions[bot] . \ud83d\udc9a Fix badges in README and main page. PR #3979 by @ghandic . \u2b06 Upgrade internal testing dependencies: mypy to version 0.910, add newly needed type packages. PR #3350 by @ArcLightSlavik . \u2728 Add Deepset Sponsorship. PR #3976 by @tiangolo . \ud83c\udfa8 Tweak CSS styles for shell animations. PR #3888 by @tiangolo . \ud83d\udd27 Add new Sponsor Calmcode.io. PR #3777 by @tiangolo . 0.68.1 \u00b6 \u2728 Add support for read_with_orm_mode , to support SQLModel relationship attributes. PR #3757 by @tiangolo . Translations \u00b6 \ud83c\udf10 Add Portuguese translation of docs/fastapi-people.md . PR #3461 by @ComicShrimp . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md . PR #3492 by @jaystone776 . \ud83d\udd27 Add new Translation tracking issues for German and Indonesian. PR #3718 by @tiangolo . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/sub-dependencies.md . PR #3491 by @jaystone776 . \ud83c\udf10 Add Portuguese translation for docs/advanced/index.md . PR #3460 by @ComicShrimp . \ud83c\udf10 Portuguese translation of docs/async.md . PR #1330 by @Serrones . \ud83c\udf10 Add French translation for docs/async.md . PR #3416 by @Smlep . Internal \u00b6 \u2728 Add GitHub Action: Notify Translations. PR #3715 by @tiangolo . \u2728 Update computation of FastAPI People and sponsors. PR #3714 by @tiangolo . \u2728 Enable recent Material for MkDocs Insiders features. PR #3710 by @tiangolo . \ud83d\udd25 Remove/clean extra imports from examples in docs for features. PR #3709 by @tiangolo . \u2795 Update docs library to include sources in Markdown. PR #3648 by @tiangolo . \u2b06 Enable tests for Python 3.9. PR #2298 by @Kludex . \ud83d\udc65 Update FastAPI People. PR #3642 by @github-actions[bot] . 0.68.0 \u00b6 Features \u00b6 \u2728 Add support for extensions and updates to the OpenAPI schema in each path operation . New docs: FastAPI Path Operation Advanced Configuration - OpenAPI Extra . Initial PR #1922 by @edouardlp . \u2728 Add additional OpenAPI metadata parameters to FastAPI class, shown on the automatic API docs UI. New docs: Metadata and Docs URLs . Initial PR #1812 by @dkreeft . \u2728 Add description parameter to all the security scheme classes, e.g. APIKeyQuery(name=\"key\", description=\"A very cool API key\") . PR #1757 by @hylkepostma . \u2728 Update OpenAPI models, supporting recursive models and extensions. PR #3628 by @tiangolo . \u2728 Import and re-export data structures from Starlette, used by Request properties, on fastapi.datastructures . Initial PR #1872 by @jamescurtin . Docs \u00b6 \ud83d\udcdd Update docs about async and response-model with more gender neutral language. PR #1869 by @Edward-Knight . Translations \u00b6 \ud83c\udf10 Add Russian translation for docs/python-types.md . PR #3039 by @dukkee . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/index.md . PR #3489 by @jaystone776 . \ud83c\udf10 Add Russian translation for docs/external-links.md . PR #3036 by @dukkee . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/global-dependencies.md . PR #3493 by @jaystone776 . \ud83c\udf10 Add Portuguese translation for docs/deployment/versions.md . PR #3618 by @lsglucas . \ud83c\udf10 Add Japanese translation for docs/tutorial/security/oauth2-jwt.md . PR #3526 by @sattosan . Internal \u00b6 \u2705 Add the docs_src directory to test coverage and update tests. Initial PR #1904 by @Kludex . \ud83d\udd27 Add new GitHub templates with forms for new issues. PR #3612 by @tiangolo . \ud83d\udcdd Add official FastAPI Twitter to docs: @fastapi . PR #3578 by @tiangolo . 0.67.0 \u00b6 Features \u00b6 \u2728 Add support for dataclasses in request bodies and response_model . New documentation: Advanced User Guide - Using Dataclasses . PR #3577 by @tiangolo . \u2728 Support dataclasses in responses. PR #3576 by @tiangolo , continuation from initial PR #2722 by @amitlissack . Docs \u00b6 \ud83d\udcdd Add external link: How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI. PR #2839 by @aitoehigie . \u270f Fix code highlighted line in: body-nested-models.md . PR #3463 by @jaystone776 . \u270f Fix typo in body-nested-models.md . PR #3462 by @jaystone776 . \u270f Fix typo \"might me\" -> \"might be\" in docs/en/docs/tutorial/schema-extra-example.md . PR #3362 by @dbrakman . \ud83d\udcdd Add external link: Building simple E-Commerce with NuxtJS and FastAPI. PR #3271 by @ShahriyarR . \ud83d\udcdd Add external link: Serve a machine learning model using Sklearn, FastAPI and Docker. PR #2974 by @rodrigo-arenas . \u270f\ufe0f Fix typo on docstring in datastructures file. PR #2887 by @Kludex . \ud83d\udcdd Add External Link: Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server. PR #3572 by @tiangolo . \ud83d\udcdd Add External Link, replaces #1898. PR #3571 by @tiangolo . Internal \u00b6 \ud83c\udfa8 Improve style for sponsors, add radius border. PR #2388 by @Kludex . \ud83d\udc77 Update GitHub Action latest-changes. PR #3574 by @tiangolo . \ud83d\udc77 Update GitHub Action latest-changes. PR #3573 by @tiangolo . \ud83d\udc77 Rename and clarify CI workflow job names. PR #3570 by @tiangolo . \ud83d\udc77 Update GitHub Action latest-changes, strike 2 \u26be. PR #3575 by @tiangolo . \ud83d\udd27 Sort external links in docs to have the most recent at the top. PR #3568 by @tiangolo . 0.66.1 \u00b6 Translations \u00b6 \ud83c\udf10 Add basic setup for German translations. PR #3522 by @0x4Dark . \ud83c\udf10 Add Portuguese translation for docs/tutorial/security/index.md . PR #3507 by @oandersonmagalhaes . \ud83c\udf10 Add Portuguese translation for docs/deployment/index.md . PR #3337 by @lsglucas . Internal \u00b6 \ud83d\udd27 Configure strict pytest options and update/refactor tests. Upgrade pytest to >=6.2.4,<7.0.0 and pytest-cov to >=2.12.0,<3.0.0 . Initial PR #2790 by @graingert . \u2b06\ufe0f Upgrade python-jose dependency to >=3.3.0,<4.0.0 for tests. PR #3468 by @tiangolo . 0.66.0 \u00b6 Features \u00b6 \u2728 Allow setting the response_class to RedirectResponse or FileResponse and returning the URL from the function. New and updated docs are in the tutorial section Custom Response - HTML, Stream, File, others , in RedirectResponse and in FileResponse . PR #3457 by @tiangolo . Fixes \u00b6 \ud83d\udc1b Fix include/exclude for dicts in jsonable_encoder . PR #2016 by @Rubikoid . \ud83d\udc1b Support custom OpenAPI / JSON Schema fields in the generated output OpenAPI. PR #1429 by @jmagnusson . Translations \u00b6 \ud83c\udf10 Add Spanish translation for tutorial/query-params.md . PR #2243 by @mariacamilagl . \ud83c\udf10 Add Spanish translation for advanced/response-directly.md . PR #1253 by @jfunez . \ud83c\udf10 Add Spanish translation for advanced/additional-status-codes.md . PR #1252 by @jfunez . \ud83c\udf10 Add Spanish translation for advanced/path-operation-advanced-configuration.md . PR #1251 by @jfunez . 0.65.3 \u00b6 Fixes \u00b6 \u267b Assume request bodies contain JSON when no Content-Type header is provided. This fixes a breaking change introduced by 0.65.2 with PR #2118 . It should allow upgrading FastAPI applications with clients that send JSON data without a Content-Type header. And there's still protection against CSRFs. PR #3456 by @tiangolo . Translations \u00b6 \ud83c\udf10 Initialize Indonesian translations. PR #3014 by @pace-noge . \ud83c\udf10 Add Spanish translation of Tutorial - Path Parameters. PR #2219 by @mariacamilagl . \ud83c\udf10 Add Spanish translation of Tutorial - First Steps. PR #2208 by @mariacamilagl . \ud83c\udf10 Portuguese translation of Tutorial - Body - Fields. PR #3420 by @ComicShrimp . \ud83c\udf10 Add Chinese translation for Tutorial - Request - Forms - and - Files. PR #3249 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Handling - Errors. PR #3299 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Form - Data. PR #3248 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Body - Updates. PR #3237 by @jaystone776 . \ud83c\udf10 Add Chinese translation for FastAPI People. PR #3112 by @hareru . \ud83c\udf10 Add French translation for Project Generation. PR #3197 by @Smlep . \ud83c\udf10 Add French translation for Python Types Intro. PR #3185 by @Smlep . \ud83c\udf10 Add French translation for External Links. PR #3103 by @Smlep . \ud83c\udf10 Add French translation for Alternatives, Inspiration and Comparisons. PR #3020 by @rjNemo . \ud83c\udf10 Fix Chinese translation code snippet mismatch in Tutorial - Python Types Intro. PR #2573 by @BoYanZh . \ud83c\udf10 Add Portuguese translation for Development Contributing. PR #1364 by @Serrones . \ud83c\udf10 Add Chinese translation for Tutorial - Request - Files. PR #3244 by @jaystone776 . Internal \u00b6 \ud83d\udc65 Update FastAPI People. PR #3450 by @github-actions[bot] . \ud83d\udc65 Update FastAPI People. PR #3319 by @github-actions[bot] . \u2b06 Upgrade docs development dependency on typer-cli to >=0.0.12 to fix conflicts. PR #3429 by @tiangolo . 0.65.2 \u00b6 Security fixes \u00b6 \ud83d\udd12 Check Content-Type request header before assuming JSON. Initial PR #2118 by @patrickkwang . This change fixes a CSRF security vulnerability when using cookies for authentication in path operations with JSON payloads sent by browsers. In versions lower than 0.65.2 , FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json ). So, a request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. But requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests . So, the browser would execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. See CVE-2021-32677 for more details. Thanks to Dima Boger for the security report! \ud83d\ude47\ud83d\udd12 Internal \u00b6 \ud83d\udd27 Update sponsors badge, course bundle. PR #3340 by @tiangolo . \ud83d\udd27 Add new gold sponsor Jina \ud83c\udf89. PR #3291 by @tiangolo . \ud83d\udd27 Add new banner sponsor badge for FastAPI courses bundle. PR #3288 by @tiangolo . \ud83d\udc77 Upgrade Issue Manager GitHub Action. PR #3236 by @tiangolo . 0.65.1 \u00b6 Security fixes \u00b6 \ud83d\udccc Upgrade pydantic pin, to handle security vulnerability CVE-2021-29510 . PR #3213 by @tiangolo . 0.65.0 \u00b6 Breaking Changes - Upgrade \u00b6 \u2b06\ufe0f Upgrade Starlette to 0.14.2 , including internal UJSONResponse migrated from Starlette. This includes several bug fixes and features from Starlette. PR #2335 by @hanneskuettner . Translations \u00b6 \ud83c\udf10 Initialize new language Polish for translations. PR #3170 by @neternefer . Internal \u00b6 \ud83d\udc77 Add GitHub Action cache to speed up CI installs. PR #3204 by @tiangolo . \u2b06\ufe0f Upgrade setup-python GitHub Action to v2. PR #3203 by @tiangolo . \ud83d\udc1b Fix docs script to generate a new translation language with overrides boilerplate. PR #3202 by @tiangolo . \u2728 Add new Deta banner badge with new sponsorship tier \ud83d\ude47. PR #3194 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #3189 by @github-actions[bot] . \ud83d\udd0a Update FastAPI People to allow better debugging. PR #3188 by @tiangolo . 0.64.0 \u00b6 Features \u00b6 \u2728 Add support for adding multiple examples in request bodies and path, query, cookie, and header params. New docs: Declare Request Example Data . Initial PR #1267 by @austinorr . Fixes \u00b6 \ud83d\udccc Pin SQLAlchemy range for tests, as it doesn't use SemVer. PR #3001 by @tiangolo . \ud83c\udfa8 Add newly required type annotations for mypy. PR #2882 by @tiangolo . \ud83c\udfa8 Remove internal \"type: ignore\", now unnecessary. PR #2424 by @AsakuraMizu . Docs \u00b6 \ud83d\udcdd Add link to article in Russian \"FastAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c\". PR #2564 by @trkohler . \ud83d\udcdd Add external link to blog post \"Authenticate Your FastAPI App with Auth0\". PR #2172 by @dompatmore . \ud83d\udcdd Fix broken link to article: Machine learning model serving in Python using FastAPI and Streamlit. PR #2557 by @davidefiocco . \ud83d\udcdd Add FastAPI Medium Article: Deploy a dockerized FastAPI application to AWS. PR #2515 by @vjanz . \u270f Fix typo in Tutorial - Handling Errors. PR #2486 by @johnthagen . \u270f Fix typo in Security OAuth2 scopes. PR #2407 by @jugmac00 . \u270f Fix typo/clarify docs for SQL (Relational) Databases. PR #2393 by @kangni . \ud83d\udcdd Add external link to \"FastAPI for Flask Users\". PR #2280 by @amitness . Translations \u00b6 \ud83c\udf10 Fix Chinese translation of Tutorial - Query Parameters, remove obsolete content. PR #3051 by @louis70109 . \ud83c\udf10 Add French translation for Tutorial - Background Tasks. PR #3098 by @Smlep . \ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md. PR #3159 by @SueNaEunYang . \ud83c\udf10 Add Korean translation for Tutorial - Query Parameters. PR #2390 by @hard-coders . \ud83c\udf10 Add French translation for FastAPI People. PR #2232 by @JulianMaurin . \ud83c\udf10 Add Korean translation for Tutorial - Path Parameters. PR #2355 by @hard-coders . \ud83c\udf10 Add French translation for Features. PR #2157 by @Jefidev . \ud83d\udc65 Update FastAPI People. PR #3031 by @github-actions[bot] . \ud83c\udf10 Add Chinese translation for Tutorial - Debugging. PR #2737 by @blt232018 . \ud83c\udf10 Add Chinese translation for Tutorial - Security - OAuth2 with Password (and hashing), Bearer with JWT tokens. PR #2642 by @waynerv . \ud83c\udf10 Add Korean translation for Tutorial - Header Parameters. PR #2589 by @mode9 . \ud83c\udf10 Add Chinese translation for Tutorial - Metadata and Docs URLs. PR #2559 by @blt232018 . \ud83c\udf10 Add Korean translation for Tutorial - First Steps. PR #2323 by @hard-coders . \ud83c\udf10 Add Chinese translation for Tutorial - CORS (Cross-Origin Resource Sharing). PR #2540 by @blt232018 . \ud83c\udf10 Add Chinese translation for Tutorial - Middleware. PR #2334 by @lpdswing . \ud83c\udf10 Add Korean translation for Tutorial - Intro. PR #2317 by @hard-coders . \ud83c\udf10 Add Chinese translation for Tutorial - Bigger Applications - Multiple Files. PR #2453 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Security Intro. PR #2443 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Header Parameters. PR #2412 by @maoyibo . \ud83c\udf10 Add Chinese translation for Tutorial - Extra Data Types. PR #2410 by @maoyibo . \ud83c\udf10 Add Japanese translation for Deployment - Docker. PR #2312 by @tokusumi . \ud83c\udf10 Add Japanese translation for Deployment - Versions. PR #2310 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Cookie Parameters. PR #2261 by @alicrazy1947 . \ud83c\udf10 Add Japanese translation for Tutorial - Static files. PR #2260 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Testing. PR #2259 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Debugging. PR #2256 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Middleware. PR #2255 by @tokusumi . \ud83c\udf10 Add Japanese translation for Concurrency and async / await. PR #2058 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Simple OAuth2 with Password and Bearer. PR #2514 by @waynerv . \ud83c\udf10 Add Japanese translation for Deployment - Deta. PR #2314 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Get Current User. PR #2474 by @waynerv . \ud83c\udf10 Add Japanese translation for Deployment - Manually. PR #2313 by @tokusumi . \ud83c\udf10 Add Japanese translation for Deployment - Intro. PR #2309 by @tokusumi . \ud83c\udf10 Add Japanese translation for FastAPI People. PR #2254 by @tokusumi . \ud83c\udf10 Add Japanese translation for Advanced - Path Operation Advanced Configuration. PR #2124 by @Attsun1031 . \ud83c\udf10 Add Japanese translation for External Links. PR #2070 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Body - Updates. PR #1956 by @SwftAlpc . \ud83c\udf10 Add Japanese translation for Tutorial - Form Data. PR #1943 by @SwftAlpc . \ud83c\udf10 Add Japanese translation for Tutorial - Cookie Parameters. PR #1933 by @SwftAlpc . Internal \u00b6 \ud83d\udd27 Update top banner, point to newsletter. PR #3003 by @tiangolo . \ud83d\udd27 Disable sponsor WeTransfer. PR #3002 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2880 by @github-actions[bot] . \ud83d\udc65 Update FastAPI People. PR #2739 by @github-actions[bot] . \ud83d\udd27 Add new Gold Sponsor Talk Python \ud83c\udf89. PR #2673 by @tiangolo . \ud83d\udd27 Add new Gold Sponsor vim.so \ud83c\udf89. PR #2669 by @tiangolo . \ud83d\udd27 Add FastAPI user survey banner. PR #2623 by @tiangolo . \ud83d\udd27 Add new Bronze Sponsor(s) \ud83e\udd49\ud83c\udf89. PR #2622 by @tiangolo . \ud83d\udcdd Update social links: add Discord, fix GitHub. PR #2621 by @tiangolo . \ud83d\udd27 Update FastAPI People GitHub Sponsors order. PR #2620 by @tiangolo . \ud83d\udd27 Update InvestSuite sponsor data. PR #2608 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2590 by @github-actions[bot] . 0.63.0 \u00b6 Features \u00b6 \u2728 Improve type annotations, add support for mypy --strict, internally and for external packages. PR #2547 by @tiangolo . Breaking changes \u00b6 \u2b06\ufe0f Upgrade Uvicorn when installing fastapi[all] to the latest version including uvloop , the new range is uvicorn[standard] >=0.12.0,<0.14.0 . PR #2548 by @tiangolo . Fixes \u00b6 \ud83d\udc1b PR #2547 (read above) also fixes some false-positive mypy errors with callbacks parameters and when using the OAuth2 class. Docs \u00b6 \ud83d\udcdd Update Uvicorn installation instructions to use uvicorn[standard] (includes uvloop). PR #2543 by @tiangolo . \ud83d\udcdd Update title for Deta tutorial. PR #2466 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2454 by @github-actions[bot] . Translations \u00b6 \ud83c\udf10 Add docs lang selector widget. PR #2542 by @tiangolo . \ud83c\udf10 Add Chinese translation for Tutorial - Response Status Code. PR #2442 by @waynerv . \ud83c\udf10 Start translation of the documentation for the Albanian language. PR #2516 by @vjanz . \ud83c\udf10 Add Chinese translation for Tutorial - Extra Models. PR #2416 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Response Model. PR #2414 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Schema Extra Example. PR #2411 by @maoyibo . \ud83c\udf10 Add Korean translation for Index. PR #2192 by @hard-coders . \ud83c\udf10 Add Japanese translation for Advanced User Guide - Additional Status Codes. PR #2145 by @Attsun1031 . Internal \u00b6 \ud83d\udc1b Fix docs overrides directory for translations. PR #2541 by @tiangolo . \u2796 Remove Typer as a docs building dependency (covered by typer-cli) to fix pip resolver conflicts. PR #2539 by @tiangolo . \u2728 Add newsletter: FastAPI and friends. PR #2509 by @tiangolo . \u2728 Add new Gold Sponsor: InvestSuite \ud83c\udf89. PR #2508 by @tiangolo . \ud83d\udd27 Add issue template configs. PR #2476 by @tiangolo . 0.62.0 \u00b6 Features \u00b6 \u2728 Add support for shared/top-level parameters (dependencies, tags, etc). PR #2434 by @tiangolo . Up to now, for several options, the only way to apply them to a group of path operations was in include_router . That works well, but the call to app.include_router() or router.include_router() is normally done in another file. That means that, for example, to apply authentication to all the path operations in a router it would end up being done in a different file, instead of keeping related logic together. Setting options in include_router still makes sense in some cases, for example, to override or increase configurations from a third party router included in an app. But in a router that is part of a bigger application, it would probably make more sense to add those settings when creating the APIRouter . In FastAPI This allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and include_router . dependencies : to include \u2728 top-level dependencies \u2728 that apply to the whole application. E.g. to add global authentication. callbacks : OpenAPI callbacks that apply to all the path operations . deprecated : to mark all the path operations as deprecated. \ud83e\udd37 include_in_schema : to allow excluding all the path operations from the OpenAPI schema. responses : OpenAPI responses that apply to all the path operations . For example: from fastapi import FastAPI , Depends async def some_dependency (): return app = FastAPI ( dependencies = [ Depends ( some_dependency )]) In APIRouter This allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and include_router . For example, it's not needed to set it explicitly when creating callbacks . dependencies : to include \u2728 router-level dependencies \u2728 that apply to all the path operations in a router. Up to now, this was only possible with include_router . callbacks : OpenAPI callbacks that apply to all the path operations in this router. deprecated : to mark all the path operations in a router as deprecated. include_in_schema : to allow excluding all the path operations in a router from the OpenAPI schema. responses : OpenAPI responses that apply to all the path operations in a router. prefix : to set the path prefix for a router. Up to now, this was only possible when calling include_router . tags : OpenAPI tags to apply to all the path operations in this router. For example: from fastapi import APIRouter , Depends async def some_dependency (): return router = APIRouter ( prefix = \"/users\" , dependencies = [ Depends ( some_dependency )]) In include_router Most of these settings are now supported in APIRouter , which normally lives closer to the related code, so it is recommended to use APIRouter when possible. But include_router is still useful to, for example, adding options (like dependencies , prefix , and tags ) when including a third party router, or a generic router that is shared between several projects. This PR allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and FastAPI . deprecated : to mark all the path operations in a router as deprecated in OpenAPI. include_in_schema : to allow disabling all the path operations from showing in the OpenAPI schema. callbacks : OpenAPI callbacks that apply to all the path operations in this router. Note: all the previous parameters are still there, so it's still possible to declare dependencies in include_router . Breaking Changes \u00b6 PR #2434 includes several improvements that shouldn't affect normal use cases, but could affect in advanced scenarios: If you are testing the generated OpenAPI (you shouldn't, FastAPI already tests it extensively for you): the order for tags in include_router and path operations was updated for consistency, but it's a simple order change. If you have advanced custom logic to access each route's route.response_class , or the router.default_response_class , or the app.default_response_class : the default value for response_class in APIRoute and for default_response_class in APIRouter and FastAPI is now a DefaultPlaceholder used internally to handle and solve default values and overrides. The actual response class inside the DefaultPlaceholder is available at route.response_class.value . Docs \u00b6 PR #2434 (above) includes new or updated docs: Advanced User Guide - OpenAPI Callbacks . Tutorial - Bigger Applications . Tutorial - Dependencies - Dependencies in path operation decorators . Tutorial - Dependencies - Global Dependencies . \ud83d\udcdd Add FastAPI monitoring blog post to External Links. PR #2324 by @louisguitton . \u270f\ufe0f Fix typo in Deta tutorial. PR #2320 by @tiangolo . \u2728 Add Discord chat. PR #2322 by @tiangolo . \ud83d\udcdd Fix image links for sponsors. PR #2304 by @tiangolo . Translations \u00b6 \ud83c\udf10 Add Japanese translation for Advanced - Custom Response. PR #2193 by @Attsun1031 . \ud83c\udf10 Add Chinese translation for Benchmarks. PR #2119 by @spaceack . \ud83c\udf10 Add Chinese translation for Tutorial - Body - Nested Models. PR #1609 by @waynerv . \ud83c\udf10 Add Chinese translation for Advanced - Custom Response. PR #1459 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Return a Response Directly. PR #1452 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Additional Status Codes. PR #1451 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Path Operation Advanced Configuration. PR #1447 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced User Guide - Intro. PR #1445 by @RunningIkkyu . Internal \u00b6 \ud83d\udd27 Update TestDriven link to course in sponsors section. PR #2435 by @tiangolo . \ud83c\udf71 Update sponsor logos. PR #2418 by @tiangolo . \ud83d\udc9a Fix disabling install of Material for MkDocs Insiders in forks, strike 1 \u26be. PR #2340 by @tiangolo . \ud83d\udc1b Fix disabling Material for MkDocs Insiders install in forks. PR #2339 by @tiangolo . \u2728 Add silver sponsor WeTransfer. PR #2338 by @tiangolo . \u2728 Set up and enable Material for MkDocs Insiders for the docs. PR #2325 by @tiangolo . 0.61.2 \u00b6 Fixes \u00b6 \ud83d\udccc Relax Swagger UI version pin. PR #2089 by @jmriebold . \ud83d\udc1b Fix bug overriding custom HTTPException and RequestValidationError from exception_handlers. PR #1924 by @uriyyo . \u270f\ufe0f Fix typo on dependencies utils and cleanup unused variable. PR #1912 by @Kludex . Docs \u00b6 \u270f\ufe0f Fix typo in Tutorial - Path Parameters. PR #2231 by @mariacamilagl . \u270f Fix a stylistic error in docs. PR #2206 by @ddobrinskiy . \u270f Fix capitalizaiton typo in docs. PR #2204 by @imba-tjd . \u270f Fix typo in docs. PR #2179 by @ammarasmro . \ud83d\udcdd Update/fix links in docs to use HTTPS. PR #2165 by @imba-tjd . \u270f Fix typos and add rewording in docs. PR #2159 by @nukopy . \ud83d\udcdd Fix code consistency in examples for Tutorial - User Guide - Path Parameters. PR #2158 by @nukopy . \ud83d\udcdd Fix renamed parameter content_type typo. PR #2135 by @TeoZosa . \u270f Fix minor typos in docs. PR #2122 by @TeoZosa . \u270f Fix typos in docs and source examples. PR #2102 by @AdrianDeAnda . \u270f Fix incorrect Celery URLs in docs. PR #2100 by @CircleOnCircles . \ud83d\udcdd Simplify intro to Python Types, all currently supported Python versions include type hints \ud83c\udf89. PR #2085 by @ninjaaron . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 3. PR #2054 by @hitrust . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 2. PR #2053 by @hitrust . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models. PR #2052 by @hitrust . \u270f Fix typo in Benchmarks. PR #1995 by @AlejoAsd . \ud83d\udcdd Add note in CORS tutorial about allow_origins with [\"*\"] and allow_credentials. PR #1895 by @dsmurrell . \ud83d\udcdd Add deployment to Deta, the first gold sponsor \ud83c\udf89. PR #2303 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2282 by @github-actions[bot] . \u270f\ufe0f Fix uppercase in Tutorial - Query parameters. PR #2245 by @mariacamilagl . \ud83d\udcdd Add articles to External Links. PR #2247 by @tiangolo . \u270f Fix typo in Spanish tutorial index. PR #2020 by @aviloncho . Translations \u00b6 \ud83c\udf10 Add Japanese translation for Advanced Tutorial - Response Directly. PR #2191 by @Attsun1031 . \ud83d\udcdd Add Japanese translation for Tutorial - Security - First Steps. PR #2153 by @komtaki . \ud83c\udf10 Add Japanese translation for Tutorial - Query Parameters and String Validations. PR #1901 by @SwftAlpc . \ud83c\udf10 Add Portuguese translation for External Links. PR #1443 by @Serrones . \ud83c\udf10 Add Japanese translation for Tutorial - CORS. PR #2125 by @tokusumi . \ud83c\udf10 Add Japanese translation for Contributing. PR #2067 by @komtaki . \ud83c\udf10 Add Japanese translation for Project Generation. PR #2050 by @tokusumi . \ud83c\udf10 Add Japanese translation for Alternatives. PR #2043 by @Attsun1031 . \ud83c\udf10 Add Japanese translation for History Design and Future. PR #2002 by @komtaki . \ud83c\udf10 Add Japanese translation for Benchmarks. PR #1992 by @komtaki . \ud83c\udf10 Add Japanese translation for Tutorial - Header Parameters. PR #1935 by @SwftAlpc . \ud83c\udf10 Add Portuguese translation for Tutorial - First Steps. PR #1861 by @jessicapaz . \ud83c\udf10 Add Portuguese translation for Python Types. PR #1796 by @izaguerreiro . \ud83c\udf10 Add Japanese translation for Help FastAPI. PR #1692 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Body. PR #1683 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Query Params. PR #1674 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/path-params.md. PR #1671 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/first-steps.md. PR #1658 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/index.md. PR #1656 by @tokusumi . \ud83c\udf10 Add translation to Portuguese for Project Generation. PR #1602 by @Serrones . \ud83c\udf10 Add Japanese translation for Features. PR #1625 by @tokusumi . \ud83c\udf10 Initialize new language Korean for translations. PR #2018 by @hard-coders . \ud83c\udf10 Add Portuguese translation of Deployment. PR #1374 by @Serrones . Internal \u00b6 \ud83d\udd25 Cleanup after upgrade for Docs Previews GitHub Action. PR #2248 by @tiangolo . \ud83d\udc1b Fix CI docs preview, unzip docs. PR #2246 by @tiangolo . \u2728 Add instant docs deploy previews for PRs from forks. PR #2244 by @tiangolo . \u26a1\ufe0f Build docs for languages in parallel in subprocesses to speed up CI. PR #2242 by @tiangolo . \ud83d\udc1b Fix docs order generation for partial translations. PR #2238 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2202 by @github-actions[bot] . \u267b\ufe0f Update FastAPI People GitHub Action to send the PR as github-actions. PR #2201 by @tiangolo . \ud83d\udd27 Update FastAPI People GitHub Action config, run monthly. PR #2199 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action Docker dependency, strike 1 \u26be. PR #2198 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action Docker dependencies. PR #2197 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action when there's nothing to change. PR #2196 by @tiangolo . \ud83d\udc65 Add new section FastAPI People. PR #2195 by @tiangolo . \u2b06\ufe0f Upgrade GitHub Action Latest Changes. PR #2190 by @tiangolo . \u2b06\ufe0f Upgrade GitHub Action Label Approved. PR #2189 by @tiangolo . \ud83d\udd27 Update GitHub Action Label Approved, run at 12:00. PR #2185 by @tiangolo . \ud83d\udc77 Upgrade GitHub Action Latest Changes. PR #2184 by @tiangolo . \ud83d\udc77 Set GitHub Action Label Approved to run daily, not every minute. PR #2163 by @tiangolo . \ud83d\udd25 Remove pr-approvals GitHub Action as it's not compatible with forks. Use the new one. PR #2162 by @tiangolo . \ud83d\udc77 Add GitHub Action Latest Changes. PR #2160 . \ud83d\udc77 Add GitHub Action Label Approved. PR #2161 . 0.61.1 \u00b6 Fixes \u00b6 Fix issues using jsonable_encoder with SQLAlchemy models directly. PR #1987 . Docs \u00b6 Fix typo in NoSQL docs. PR #1980 by @facundojmaero . Translations \u00b6 Add translation for main page to Japanese PR #1571 by @ryuckel . Initialize French translations. PR #1975 by @JulianMaurin-BM . Initialize Turkish translations. PR #1905 by @ycd . Internal \u00b6 Improve docs maintainability by updating hl_lines syntax to use ranges. PR #1863 by @la-mar . 0.61.0 \u00b6 Features \u00b6 Add support for injecting HTTPConnection (as Request and WebSocket ). Useful for sharing app state in dependencies. PR #1827 by @nsidnev . Export WebSocketDisconnect and add example handling WebSocket disconnections to docs. PR #1822 by @rkbeatss . Breaking Changes \u00b6 Require Pydantic > 1.0.0 . Remove support for deprecated Pydantic 0.32.2 . This improves maintainability and allows new features. In FastAPI and APIRouter : Remove path operation decorators related/deprecated parameter response_model_skip_defaults (use response_model_exclude_unset instead). Change path operation decorators parameter default for response_model_exclude from set() to None (as is in Pydantic). In encoders.jsonable_encoder : Remove deprecated skip_defaults , use instead exclude_unset . Set default of exclude from set() to None (as is in Pydantic). PR #1862 . In encoders.jsonable_encoder remove parameter sqlalchemy_safe . It was an early hack to allow returning SQLAlchemy models, but it was never documented, and the recommended way is using Pydantic's orm_mode as described in the tutorial: SQL (Relational) Databases . PR #1864 . Docs \u00b6 Add link to the course by TestDriven.io: Test-Driven Development with FastAPI and Docker . PR #1860 . Fix empty log message in docs example about handling errors. PR #1815 by @manlix . Reword text to reduce ambiguity while not being gender-specific. PR #1824 by @Mause . Internal \u00b6 Add Flake8 linting. Original PR #1774 by @MashhadiNima . Disable Gitter bot, as it's currently broken, and Gitter's response doesn't show the problem. PR #1853 . 0.60.2 \u00b6 Fix typo in docs for query parameters. PR #1832 by @ycd . Add docs about Async Tests . PR #1619 by @empicano . Raise an exception when using form data ( Form , File ) without having python-multipart installed. Up to now the application would run, and raise an exception only when receiving a request with form data, the new behavior, raising early, will prevent from deploying applications with broken dependencies. It also detects if the correct package python-multipart is installed instead of the incorrect multipart (both importable as multipart ). PR #1851 based on original PR #1627 by @chrisngyn , @YKo20010 , @kx-chen . Re-enable Gitter releases bot. PR #1831 . Add link to async SQL databases tutorial from main SQL tutorial. PR #1813 by @short2strings . Fix typo in tutorial about behind a proxy. PR #1807 by @toidi . Fix typo in Portuguese docs. PR #1795 by @izaguerreiro . Add translations setup for Ukrainian. PR #1830 . Add external link Build And Host Fast Data Science Applications Using FastAPI . PR #1786 by @Kludex . Fix encoding of Pydantic models that inherit from others models with custom json_encoders . PR #1769 by @henrybetts . Simplify and improve jsonable_encoder . PR #1754 by @MashhadiNima . Simplify internal code syntax in several points. PR #1753 by @uriyyo . Improve internal typing, declare Optional parameters. PR #1731 by @MashhadiNima . Add external link Deploy FastAPI on Azure App Service to docs. PR #1726 by @windson . Add link to Starlette docs about WebSocket testing. PR #1717 by @hellocoldworld . Refactor generating dependant, merge for loops. PR #1714 by @Bloodielie . Update example for templates with Jinja to include HTML media type. PR #1690 by @frafra . Fix typos in docs for security. PR #1678 by @nilslindemann . Fix typos in docs for dependencies. PR #1675 by @nilslindemann . Fix type annotation for **extra parameters in FastAPI . PR #1659 by @bharel . Bump MkDocs Material to fix docs in browsers with dark mode. PR #1789 by @adriencaccia . Remove docs preview comment from each commit. PR #1826 . Update GitHub context extraction for Gitter notification bot. PR #1766 . 0.60.1 \u00b6 Add debugging logs for GitHub actions to introspect GitHub hidden context. PR #1764 . Use OS preference theme for online docs. PR #1760 by @adriencaccia . Upgrade Starlette to version 0.13.6 to handle a vulnerability when using static files in Windows. PR #1759 by @jamesag26 . Pin Swagger UI temporarily, waiting for a fix for swagger-api/swagger-ui#6249 . PR #1763 . Update GitHub Actions, use commit from PR for docs preview, not commit from pre-merge. PR #1761 . Update GitHub Actions, refactor Gitter bot. PR #1746 . 0.60.0 \u00b6 Add GitHub Action to watch for missing preview docs and trigger a preview deploy. PR #1740 . Add custom GitHub Action to get artifact with docs preview. PR #1739 . Add new GitHub Actions to preview docs from PRs. PR #1738 . Add XML test coverage to support GitHub Actions. PR #1737 . Update badges and remove Travis now that GitHub Actions is the main CI. PR #1736 . Add GitHub Actions for CI, move from Travis. PR #1735 . Add support for adding OpenAPI schema for GET requests with a body. PR #1626 by @victorphoenix3 . 0.59.0 \u00b6 Fix typo in docstring for OAuth2 utils. PR #1621 by @tomarv2 . Update JWT docs to use Python-jose instead of PyJWT. Initial PR #1610 by @asheux . Fix/re-enable search bar in docs. PR #1703 . Auto-generate a \"server\" in OpenAPI servers when there's a root_path instead of prefixing all the paths : Add a new parameter for FastAPI classes: root_path_in_servers to disable the auto-generation of servers . New docs about root_path and servers in Additional Servers . Update OAuth2 examples to use a relative URL for tokenUrl=\"token\" to make sure those examples keep working as-is even when behind a reverse proxy. Initial PR #1596 by @rkbeatss . Fix typo/link in External Links. PR #1702 . Update handling of External Links to use a data file and allow translating the headers without becoming obsolete quickly when new links are added. PR #https://github.com/tiangolo/fastapi/pull/1701 . Add external link Machine learning model serving in Python using FastAPI and Streamlit to docs. PR #1669 by @davidefiocco . Add note in docs on order in Pydantic Unions. PR #1591 by @kbanc . Improve support for tests in editor. PR #1699 . Pin dependencies. PR #1697 . Update isort to version 5.x.x. PR #1670 by @asheux . 0.58.1 \u00b6 Add link in docs to Pydantic data types. PR #1612 by @tayoogunbiyi . Fix link in warning logs for openapi_prefix . PR #1611 by @bavaria95 . Fix bad link in docs. PR #1603 by @molto0504 . Add Vim temporary files to .gitignore for contributors using Vim. PR #1590 by @asheux . Fix typo in docs for sub-applications. PR #1578 by @schlpbch . Use Optional in all the examples in the docs. Original PR #1574 by @chrisngyn , @kx-chen , @YKo20010 . Updated and merged PR #1644 . Update tests and handling of response_model_by_alias . PR #1642 . Add translation to Chinese for Body - Fields - \u8bf7\u6c42\u4f53 - \u5b57\u6bb5 . PR #1569 by @waynerv . Update Chinese translation of main page. PR #1564 by @waynerv . Add translation to Chinese for Body - Multiple Parameters - \u8bf7\u6c42\u4f53 - \u591a\u4e2a\u53c2\u6570 . PR #1532 by @waynerv . Add translation to Chinese for Path Parameters and Numeric Validations - \u8def\u5f84\u53c2\u6570\u548c\u6570\u503c\u6821\u9a8c . PR #1506 by @waynerv . Add GitHub action to auto-label approved PRs (mainly for translations). PR #1638 . 0.58.0 \u00b6 Deep merge OpenAPI responses to preserve all the additional metadata. PR #1577 . Mention in docs that only main app events are run (not sub-apps). PR #1554 by @amacfie . Fix body validation error response, do not include body variable when it is not embedded. PR #1553 by @amacfie . Fix testing OAuth2 security scopes when using dependency overrides. PR #1549 by @amacfie . Fix Model for JSON Schema keyword not as a JSON Schema instead of a list. PR #1548 by @v-do . Add support for OpenAPI servers . PR #1547 by @mikaello . 0.57.0 \u00b6 Remove broken link from \"External Links\". PR #1565 by @victorphoenix3 . Update/fix docs for WebSockets with dependencies . Original PR #1540 by @ChihSeanHsu . Add support for Python's http.HTTPStatus in status_code parameters. PR #1534 by @retnikt . When using Pydantic models with __root__ , use the internal value in jsonable_encoder . PR #1524 by @patrickkwang . Update docs for path parameters. PR #1521 by @yankeexe . Update docs for first steps, links and rewording. PR #1518 by @yankeexe . Enable showCommonExtensions in Swagger UI to show additional validations like maxLength , etc. PR #1466 by @TiewKH . Make OAuth2PasswordRequestFormStrict importable directly from fastapi.security . PR #1462 by @RichardHoekstra . Add docs about Default response class . PR #1455 by @TezRomacH . Add note in docs about additional parameters response_model_exclude_defaults and response_model_exclude_none in Response Model . PR #1427 by @wshayes . Add note about PyCharm Pydantic plugin to docs. PR #1420 by @koxudaxi . Update and clarify testing function name. PR #1395 by @chenl . Fix duplicated headers created by indirect dependencies that use the request directly. PR #1386 by @obataku from tests by @scottsmith2gmail . Upgrade Starlette version to 0.13.4 . PR #1361 by @rushton . Improve error handling and feedback for requests with invalid JSON. PR #1354 by @aviramha . Add support for declaring metadata for tags in OpenAPI. New docs at Tutorial - Metadata and Docs URLs - Metadata for tags . PR #1348 by @thomas-maschler . Add basic setup for Russian translations. PR #1566 . Remove obsolete Chinese articles after adding official community translations. PR #1510 by @waynerv . Add __repr__ for path operation function parameter helpers (like Query , Depends , etc) to simplify debugging. PR #1560 by @rkbeatss and @victorphoenix3 . 0.56.1 \u00b6 Add link to advanced docs from tutorial. PR #1512 by @kx-chen . Remove internal unnecessary f-strings. PR #1526 by @kotamatsuoka . Add translation to Chinese for Query Parameters and String Validations - \u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c . PR #1500 by @waynerv . Add translation to Chinese for Request Body - \u8bf7\u6c42\u4f53 . PR #1492 by @waynerv . Add translation to Chinese for Help FastAPI - Get Help - \u5e2e\u52a9 FastAPI - \u83b7\u53d6\u5e2e\u52a9 . PR #1465 by @waynerv . Add translation to Chinese for Query Parameters - \u67e5\u8be2\u53c2\u6570 . PR #1454 by @waynerv . Add translation to Chinese for Contributing - \u5f00\u53d1 - \u8d21\u732e . PR #1460 by @waynerv . Add translation to Chinese for Path Parameters - \u8def\u5f84\u53c2\u6570 . PR #1453 by @waynerv . Add official Microsoft project generator for serving spaCy with FastAPI and Azure Cognitive Skills to Project Generators . PR #1390 by @kabirkhan . Update docs in Python Types Intro to include info about Optional . Original PR #1377 by @yaegassy . Fix support for callable class dependencies with yield . PR #1365 by @mrosales . Fix/remove incorrect error logging when a client sends invalid payloads. PR #1351 by @dbanty . Add translation to Chinese for First Steps - \u7b2c\u4e00\u6b65 . PR #1323 by @waynerv . Fix generating OpenAPI for apps using callbacks with routers including Pydantic models. PR #1322 by @nsidnev . Optimize internal regex performance in get_path_param_names() . PR #1243 by @heckad . Remove *, from functions in docs where it's not needed. PR #1239 by @pankaj-giri . Start translations for Italian. PR #1557 by @csr . 0.56.0 \u00b6 Add support for ASGI root_path : Use root_path internally for mounted applications, so that OpenAPI and the docs UI works automatically without extra configurations and parameters. Add new root_path parameter for FastAPI applications to provide it in cases where it can be set with the command line (e.g. for Uvicorn and Hypercorn, with the parameter --root-path ). Deprecate openapi_prefix parameter in favor of the new root_path parameter. Add new/updated docs for Sub Applications - Mounts , without openapi_prefix (as it is now handled automatically). Add new/updated docs for Behind a Proxy , including how to setup a local testing proxy with Traefik and using root_path . Update docs for Extending OpenAPI with the new openapi_prefix parameter passed (internally generated from root_path ). Original PR #1199 by @iksteen . Update new issue templates and docs: Help FastAPI - Get Help . PR #1531 . Update GitHub action issue-manager. PR #1520 . Add new links: English articles : Real-time Notifications with Python and Postgres by Guillermo Cruz . Microservice in Python using FastAPI by Paurakh Sharma Humagain . Build simple API service with Python FastAPI \u2014 Part 1 by cuongld2 . FastAPI + Zeit.co = \ud83d\ude80 by Paul Sec . Build a web API from scratch with FastAPI - the workshop by Sebasti\u00e1n Ram\u00edrez (tiangolo) . Build a Secure Twilio Webhook with Python and FastAPI by Twilio . Using FastAPI with Django by Stavros Korokithakis . Introducing Dispatch by Netflix . Podcasts : Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (tiangolo) by Podcast. __init__ . Talks : PyConBY 2020: Serve ML models easily with FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . [VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PR #1467 . Add translation to Chinese for Python Types Intro - Python \u7c7b\u578b\u63d0\u793a\u7b80\u4ecb . PR #1197 by @waynerv . 0.55.1 \u00b6 Fix handling of enums with their own schema in path parameters. To support samuelcolvin/pydantic#1432 in FastAPI. PR #1463 . 0.55.0 \u00b6 Allow enums to allow them to have their own schemas in OpenAPI. To support samuelcolvin/pydantic#1432 in FastAPI. PR #1461 . Add links for funding through GitHub sponsors . PR #1425 . Update issue template for for questions. PR #1344 by @retnikt . Update warning about storing passwords in docs. PR #1336 by @skorokithakis . Fix typo. PR #1326 by @chenl . Add translation to Portuguese for Alternatives, Inspiration and Comparisons - Alternativas, Inspira\u00e7\u00e3o e Compara\u00e7\u00f5es . PR #1325 by @Serrones . Fix 2 typos in docs. PR #1324 by @waynerv . Update CORS docs, fix correct default of max_age=600 . PR #1301 by @derekbekoe . Add translation of main page to Portuguese . PR #1300 by @Serrones . Re-word and clarify docs for extra info in fields. PR #1299 by @chris-allnutt . Make sure the * in short features in the docs is consistent (after . ) in all languages. PR #1424 . Update order of execution for get_db in SQLAlchemy tutorial. PR #1293 by @bcb . Fix typos in Async docs. PR #1423 . 0.54.2 \u00b6 Add translation to Spanish for Concurrency and async / await - Concurrencia y async / await . PR #1290 by @alvaropernas . Remove obsolete vote link. PR #1289 by @donhui . Allow disabling docs UIs by just disabling OpenAPI with openapi_url=None . New example in docs: Advanced: Conditional OpenAPI . PR #1421 . Add translation to Portuguese for Benchmarks - Compara\u00e7\u00f5es . PR #1274 by @Serrones . Add translation to Portuguese for Tutorial - User Guide - Intro - Tutorial - Guia de Usu\u00e1rio - Introdu\u00e7\u00e3o . PR #1259 by @marcosmmb . Allow using Unicode in MkDocs for translations. PR #1419 . Add translation to Spanish for Advanced User Guide - Intro - Gu\u00eda de Usuario Avanzada - Introducci\u00f3n . PR #1250 by @jfunez . Add translation to Portuguese for History, Design and Future - Hist\u00f3ria, Design e Futuro . PR #1249 by @marcosmmb . Add translation to Portuguese for Features - Recursos . PR #1248 by @marcosmmb . Add translation to Spanish for Tutorial - User Guide - Intro - Tutorial - Gu\u00eda de Usuario - Introducci\u00f3n . PR #1244 by @MartinEliasQ . Add translation to Chinese for Deployment - \u90e8\u7f72 . PR #1203 by @RunningIkkyu . Add translation to Chinese for Tutorial - User Guide - Intro - \u6559\u7a0b - \u7528\u6237\u6307\u5357 - \u7b80\u4ecb . PR #1202 by @waynerv . Add translation to Chinese for Features - \u7279\u6027 . PR #1192 by @Dustyposa . Add translation for main page to Chinese PR #1191 by @waynerv . Update docs for project generation. PR #1287 . Add Spanish translation for Introducci\u00f3n a los Tipos de Python (Python Types Intro) . PR #1237 by @mariacamilagl . Add Spanish translation for Caracter\u00edsticas (Features) . PR #1220 by @mariacamilagl . 0.54.1 \u00b6 Update database test setup. PR #1226 . Improve test debugging by showing response text in failing tests. PR #1222 by @samuelcolvin . 0.54.0 \u00b6 Fix grammatical mistakes in async docs. PR #1188 by @mickeypash . Add support for response_model_exclude_defaults and response_model_exclude_none : Deprecate the parameter include_none in jsonable_encoder and add the inverted exclude_none , to keep in sync with Pydantic. PR #1166 by @voegtlel . Add example about Testing a Database . Initial PR #1144 by @duganchen . Update docs for Development - Contributing: Translations including note about reviewing translation PRs. #1215 . Update log style in README.md for GitHub Markdown compatibility. PR #1200 by #geekgao . Add Python venv env to .gitignore . PR #1212 by @cassiobotaro . Start Portuguese translations. PR #1210 by @cassiobotaro . Update docs for Pydantic's Settings using a dependency with @lru_cache() . PR #1214 . Add first translation to Spanish FastAPI . PR #1201 by @mariacamilagl . Add docs about Settings and Environment Variables . Initial PR 1118 by @alexmitelman . 0.53.2 \u00b6 Fix automatic embedding of body fields for dependencies and sub-dependencies. Original PR #1079 by @Toad2186 . Fix dependency overrides in WebSocket testing. PR #1122 by @amitlissack . Fix docs script to ensure languages are always sorted. PR #1189 . Start translations for Chinese. PR #1187 by @RunningIkkyu . Add docs for Schema Extra - Example . PR #1185 . 0.53.1 \u00b6 Fix included example after translations refactor. PR #1182 . Add docs example for example in Field . Docs at Body - Fields: JSON Schema extras . PR #1106 by @JohnPaton . Fix using recursive models in response_model . PR #1164 by @voegtlel . Add docs for Pycharm Debugging . PR #1096 by @youngquan . Fix typo in docs. PR #1148 by @PLNech . Update Windows development environment instructions. PR #1179 . 0.53.0 \u00b6 Update test coverage badge. PR #1175 . Add orjson to pip install fastapi[all] . PR #1161 by @michael0liver . Fix included example for GZipMiddleware . PR #1138 by @arimbr . Fix class name in docstring for OAuth2PasswordRequestFormStrict . PR #1126 by @adg-mh . Clarify function name in example in docs. PR #1121 by @tmsick . Add external link Apache Kafka producer and consumer with FastAPI and aiokafka to docs. PR #1112 by @iwpnd . Fix serialization when using by_alias or exclude_unset and returning data with Pydantic models. PR #1074 by @juhovh-aiven . Add Gitter chat to docs. PR #1061 by @aakashnand . Update and simplify translations docs. PR #1171 . Update development of FastAPI docs, set address to 127.0.0.1 to improve Windows support. PR #1169 by @mariacamilagl . Add support for docs translations. New docs: Development - Contributing: Docs: Translations . PR #1168 . Update terminal styles in docs and add note about Typer , the FastAPI of CLIs . PR #1139 . 0.52.0 \u00b6 Add new high-performance JSON response class using orjson . New docs: Custom Response - HTML, Stream, File, others: ORJSONResponse . PR #1065 . 0.51.0 \u00b6 Re-export utils from Starlette: This allows using things like from fastapi.responses import JSONResponse instead of from starlette.responses import JSONResponse . It's mainly syntax sugar, a convenience for developer experience. Now Request , Response , WebSocket , status can be imported directly from fastapi as in from fastapi import Response . This is because those are frequently used, to use the request directly, to set headers and cookies, to get status codes, etc. Documentation changes in many places, but new docs and noticeable improvements: Custom Response - HTML, Stream, File, others . Advanced Middleware . Including WSGI - Flask, Django, others . PR #1064 . 0.50.0 \u00b6 Add link to Release Notes from docs about pinning versions for deployment. PR #1058 . Upgrade code to use the latest version of Starlette, including: Several bug fixes. Optional redirects of slashes, with or without ending in / . Events for routers, \"startup\" , and \"shutdown\" . PR #1057 . Add docs about pinning FastAPI versions for deployment: Deployment: FastAPI versions . PR #1056 . 0.49.2 \u00b6 Fix links in release notes. PR #1052 by @sattosan . Fix typo in release notes. PR #1051 by @sattosan . Refactor/clarify serialize_response parameter name to avoid confusion. PR #1031 by @patrickmckenna . Refactor calling each a path operation's handler function in an isolated function, to simplify profiling. PR #1027 by @sm-Fifteen . Add missing dependencies for testing. PR #1026 by @sm-Fifteen . Fix accepting valid types for response models, including Python types like List[int] . PR #1017 by @patrickmckenna . Fix format in SQL tutorial. PR #1015 by @vegarsti . 0.49.1 \u00b6 Fix path operation duplicated parameters when used in dependencies and the path operation function. PR #994 by @merowinger92 . Update Netlify previews deployment GitHub action as the fix is already merged and there's a new release. PR #1047 . Move mypy configurations to config file. PR #987 by @hukkinj1 . Temporary fix to Netlify previews not deployable from PRs from forks. PR #1046 by @mariacamilagl . 0.49.0 \u00b6 Fix encoding of pathlib paths in jsonable_encoder . PR #978 by @patrickmckenna . Add articles to External Links : Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03 (Django, Flask, responder, FastAPI, japronto) and [FastAPI] Python\u88fd\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI\u306b\u5165\u9580\u3059\u308b . PR #974 by @tokusumi . Fix broken links in docs. PR #949 by @tsotnikov . Fix small typos. PR #941 by @NikitaKolesov . Update and clarify docs for dependencies with yield . PR #986 . Add Mermaid JS support for diagrams in docs. Add first diagrams to Dependencies: First Steps and Dependencies with yield and HTTPException . PR #985 . Update CI to run docs deployment in GitHub actions. PR #983 . Allow callable s in path operation functions , like functions modified with functools.partial . PR #977 . 0.48.0 \u00b6 Run linters first in tests to error out faster. PR #948 . Log warning about email-validator only when used. PR #946 . Simplify Peewee docs with double dependency with yield . PR #947 . Add article External Links : Create and Deploy FastAPI app to Heroku . PR #942 by @windson . Update description of Sanic, as it is now ASGI too. PR #932 by @raphaelauv . Fix typo in main page. PR #920 by @mMarzeta . Fix parsing of possibly invalid bodies. PR #918 by @dmontagu . Fix typo #916 by @adursun . Allow Any type for enums in OpenAPI. PR #906 by @songzhi . Add article to External Links : How to continuously deploy a FastAPI to AWS Lambda with AWS SAM . PR #901 by @iwpnd . Add note about using Body parameters without Pydantic. PR #900 by @pawamoy . Fix Pydantic field clone logic. PR #899 by @deuce2367 . Fix link in middleware docs. PR #893 by @linchiwei123 . Rename default API title from \"Fast API\" to \"FastAPI\" for consistency. PR #890 . 0.47.1 \u00b6 Fix model filtering in response_model , cloning sub-models. PR #889 . Fix FastAPI serialization of Pydantic models using ORM mode blocking the event loop. PR #888 . 0.47.0 \u00b6 Refactor documentation to make a simpler and shorter Tutorial - User Guide and an additional Advanced User Guide with all the additional docs. PR #887 . Tweak external links, Markdown format, typos. PR #881 . Fix bug in tutorial handling HTTP Basic Auth username and password . PR #865 by @isaevpd . Fix handling form path operation parameters declared with pure classes like list , tuple , etc. PR #856 by @nsidnev . Add request body to RequestValidationError , new docs: Use the RequestValidationError body . Initial PR #853 by @aviramha . Update External Links with new links and dynamic GitHub projects with fastapi topic. PR #850 . Fix Peewee contextvars handling in docs: SQL (Relational) Databases with Peewee . PR #879 . Setup development environment with Python's Venv and Flit, instead of requiring the extra Pipenv duplicating dependencies. Updated docs: Development - Contributing . PR #877 . Update docs for HTTP Basic Auth to improve security against timing attacks. Initial PR #807 by @zwass . 0.46.0 \u00b6 Fix typos and tweak configs. PR #837 . Add link to Chinese article in External Links . PR 810 by @wxq0309 . Implement OAuth2AuthorizationCodeBearer class. PR #797 by @kuwv . Update example upgrade in docs main page. PR #795 by @cdeil . Fix callback handling for sub-routers. PR #792 by @jekirl . Fix typos. PR #784 by @kkinder . Add 4 Japanese articles to External Links . PR #783 by @HymanZHAN . Add support for subtypes of main types in jsonable_encoder , e.g. asyncpg's UUIDs. PR #756 by @RmStorm . Fix usage of Pydantic's HttpUrl in docs. PR #832 by @Dustyposa . Fix Twitter links in docs. PR #813 by @justindujardin . Add docs for correctly using FastAPI with Peewee ORM . Including how to overwrite parts of Peewee to correctly handle async threads. PR #789 . 0.45.0 \u00b6 Add support for OpenAPI Callbacks: New docs: OpenAPI Callbacks . Refactor generation of operationId s to be valid Python names (also valid variables in most languages). Add default_response_class parameter to APIRouter . Original PR #722 by @booooh . Refactor logging to use the same logger everywhere, update log strings and levels. PR #781 . Add article to External Links : \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c FastAPI? . PR #766 by @prostomarkeloff . Remove gender bias in docs for handling errors. PR #780 . Original idea in PR #761 by @classywhetten . Rename docs and references to body-schema to body-fields to keep in line with Pydantic. PR #746 by @prostomarkeloff . 0.44.1 \u00b6 Add GitHub social preview images to git. PR #752 . Update PyPI \"trove classifiers\". PR #751 . Add full support for Python 3.8. Enable Python 3.8 in full in Travis. PR 749 . Update \"new issue\" templates. PR #749 . Fix serialization of errors for exotic Pydantic types. PR #748 by @dmontagu . 0.44.0 \u00b6 Add GitHub action Issue Manager . PR #742 . Fix typos in docs. PR 734 by @bundabrg . Fix usage of custom_encoder in jsonable_encoder . PR #715 by @matrixise . Fix invalid XML example. PR 710 by @OcasoProtal . Fix typos and update wording in deployment docs. PR #700 by @marier-nico . Add note about dependencies in APIRouter docs. PR #698 by @marier-nico . Add support for async class methods as dependencies #681 by @frankie567 . Add FastAPI with Swagger UI cheatsheet to external links. PR #671 by @euri10 . Fix typo in HTTP protocol in CORS example. PR #647 by @forestmonster . Add support for Pydantic versions 1.0.0 and above, with temporary (deprecated) backwards compatibility for Pydantic 0.32.2 . PR #646 by @dmontagu . 0.43.0 \u00b6 Update docs to reduce gender bias. PR #645 by @ticosax . Add docs about overriding the operationId for all the path operations based on their function name. PR #642 by @SKalt . Fix validators in models generating an incorrect key order. PR #637 by @jaddison . Generate correct OpenAPI docs for responses with no content. PR #621 by @brotskydotcom . Remove $ from Bash code blocks in docs for consistency. PR #613 by @nstapelbroek . Add docs for self-serving docs' (Swagger UI) static assets , e.g. to use the docs offline, or without Internet. Initial PR #557 by @svalouch . Fix black linting after upgrade. PR #682 by @frankie567 . 0.42.0 \u00b6 Add dependencies with yield , a.k.a. exit steps, context managers, cleanup, teardown, ... This allows adding extra code after a dependency is done. It can be used, for example, to close database connections. Dependencies with yield can be normal or async , FastAPI will run normal dependencies in a threadpool. They can be combined with normal dependencies. It's possible to have arbitrary trees/levels of dependencies with yield and exit steps are handled in the correct order automatically. It works by default in Python 3.7 or above. For Python 3.6, it requires the extra backport dependencies: async-exit-stack async-generator New docs at Dependencies with yield . Updated database docs SQL (Relational) Databases: Main FastAPI app . PR #595 . Fix sitemap.xml in website. PR #598 by @samuelcolvin . 0.41.0 \u00b6 Upgrade required Starlette to 0.12.9 , the new range is >=0.12.9,<=0.12.9 . Add State to FastAPI apps at app.state . PR #593 . Improve handling of custom classes for Request s and APIRoute s. This helps to more easily solve use cases like: Reading a body before and/or after a request (equivalent to a middleware). Run middleware-like code only for a subset of path operations . Process a request before passing it to a path operation function . E.g. decompressing, deserializing, etc. Processing a response after being generated by path operation functions but before returning it. E.g. adding custom headers, logging, adding extra metadata. New docs section: Custom Request and APIRoute class . PR #589 by @dmontagu . Fix preserving custom route class in routers when including other sub-routers. PR #538 by @dmontagu . 0.40.0 \u00b6 Add notes to docs about installing python-multipart when using forms. PR #574 by @sliptonic . Generate OpenAPI schemas in alphabetical order. PR #554 by @dmontagu . Add support for truncating docstrings from path operation functions . New docs at Advanced description from docstring . PR #556 by @svalouch . Fix DOCTYPE in HTML files generated for Swagger UI and ReDoc. PR #537 by @Trim21 . Fix handling 4XX responses overriding default 422 validation error responses. PR #517 by @tsouvarev . Fix typo in documentation for Simple HTTP Basic Auth . PR #514 by @prostomarkeloff . Fix incorrect documentation example in first steps . PR #511 by @IgnatovFedor . Add support for Swagger UI initOauth settings with the parameter swagger_ui_init_oauth . PR #499 by @zamiramir . 0.39.0 \u00b6 Allow path parameters to have default values (e.g. None ) and discard them instead of raising an error. This allows declaring a parameter like user_id: str = None that can be taken from a query parameter, but the same path operation can be included in a router with a path /users/{user_id} , in which case will be taken from the path and will be required. PR #464 by @jonathanunderwood . Add support for setting a default_response_class in the FastAPI instance or in include_router . Initial PR #467 by @toppk . Add support for type annotations using strings and from __future__ import annotations . PR #451 by @dmontagu . 0.38.1 \u00b6 Fix incorrect Request class import. PR #493 by @kamalgill . 0.38.0 \u00b6 Add recent articles to External Links and recent opinions. PR #490 . Upgrade support range for Starlette to include 0.12.8 . The new range is >=0.11.1,<=0.12.8\" . PR #477 by @dmontagu . Upgrade support to Pydantic version 0.32.2 and update internal code to use it (breaking change). PR #463 by @dmontagu . 0.37.0 \u00b6 Add support for custom route classes for advanced use cases. PR #468 by @dmontagu . Allow disabling Google fonts in ReDoc. PR #481 by @b1-luettje . Fix security issue: when returning a sub-class of a response model and using skip_defaults it could leak information. PR #485 by @dmontagu . Enable tests for Python 3.8-dev. PR #465 by @Jamim . Add support and tests for Pydantic dataclasses in response_model . PR #454 by @dconathan . Fix typo in OAuth2 JWT tutorial. PR #447 by @pablogamboa . Use the media_type parameter in Body() params to set the media type in OpenAPI for requestBody . PR #439 by @divums . Add article Deploying a scikit-learn model with ONNX and FastAPI by https://www.linkedin.com/in/nico-axtmann . PR #438 by @naxty . Allow setting custom 422 (validation error) response/schema in OpenAPI. And use media type from response class instead of fixed application/json (the default). PR #437 by @divums . Fix using \"default\" extra response with status codes at the same time. PR #489 . Allow additional responses to use status code ranges (like 5XX and 4XX ) and \"default\" . PR #435 by @divums . 0.36.0 \u00b6 Fix implementation for skip_defaults when returning a Pydantic model. PR #422 by @dmontagu . Fix OpenAPI generation when using the same dependency in multiple places for the same path operation . PR #417 by @dmontagu . Allow having empty paths in path operations used with include_router and a prefix . This allows having a router for /cats and all its path operations , while having one of them for /cats . Now it doesn't have to be only /cats/ (with a trailing slash). To use it, declare the path in the path operation as the empty string ( \"\" ). PR #415 by @vitalik . Fix mypy error after merging PR #415. PR #462 . 0.35.0 \u00b6 Fix typo in routing assert . PR #419 by @pablogamboa . Fix typo in docs. PR #411 by @bronsen . Fix parsing a body type declared with Union . PR #400 by @koxudaxi . 0.34.0 \u00b6 Upgrade Starlette supported range to include the latest 0.12.7 . The new range is 0.11.1,<=0.12.7 . PR #367 by @dedsm . Add test for OpenAPI schema with duplicate models from PR #333 by @dmontagu . PR #385 . 0.33.0 \u00b6 Upgrade Pydantic version to 0.30.0 . PR #384 by @jekirl . 0.32.0 \u00b6 Fix typo in docs for features. PR #380 by @MartinoMensio . Fix source code limit for example in Query Parameters . PR #366 by @Smashman . Update wording in docs about OAuth2 scopes . PR #371 by @cjw296 . Update docs for Enum s to inherit from str and improve Swagger UI rendering. PR #351 . Fix regression, add Swagger UI deep linking again. PR #350 . Add test for having path templates in prefix of .include_router . PR #349 . Add note to docs: Include the same router multiple times with different prefix . PR #348 . Fix OpenAPI/JSON Schema generation for two functions with the same name (in different modules) with the same composite bodies. Composite bodies' IDs are now based on path, not only on route name, as the auto-generated name uses the function names, that can be duplicated in different modules. The same new ID generation applies to response models. This also changes the generated title for those models. Only composite bodies and response models are affected because those are generated dynamically, they don't have a module (a Python file). This also adds the possibility of using .include_router() with the same APIRouter multiple times, with different prefixes, e.g. /api/v2 and /api/latest , and it will now work correctly. PR #347 . 0.31.0 \u00b6 Upgrade Pydantic supported version to 0.29.0 . New supported version range is \"pydantic >=0.28,<=0.29.0\" . This adds support for Pydantic Generic Models , kudos to @dmontagu . PR #344 . 0.30.1 \u00b6 Add section in docs about External Links and Articles . PR #341 . Remove Pipfile.lock from the repository as it is only used by FastAPI contributors (developers of FastAPI itself). See the PR for more details. PR #340 . Update section about Help FastAPI - Get Help . PR #339 . Refine internal type declarations to improve/remove Mypy errors in users' code. PR #338 . Update and clarify SQL tutorial with SQLAlchemy . PR #331 by @mariacamilagl . Add SQLite online viewers to the docs . PR #330 by @cyrilbois . 0.30.0 \u00b6 Add support for Pydantic's ORM mode: Updated documentation about SQL with SQLAlchemy, using Pydantic models with ORM mode, SQLAlchemy models with relations, separation of files, simplification of code and other changes. New docs: SQL (Relational) Databases . The new support for ORM mode fixes issues/adds features related to ORMs with lazy-loading, hybrid properties, dynamic/getters (using @property decorators) and several other use cases. This applies to ORMs like SQLAlchemy, Peewee, Tortoise ORM, GINO ORM and virtually any other. If your path operations return an arbitrary object with attributes (e.g. my_item.name instead of my_item[\"name\"] ) AND you use a response_model , make sure to update the Pydantic models with orm_mode = True as described in the docs (link above). New documentation about receiving plain dict s as request bodies: Bodies of arbitrary dict s . New documentation about returning arbitrary dict s in responses: Response with arbitrary dict . Technical Details : When declaring a response_model it is used directly to generate the response content, from whatever was returned from the path operation function . Before this, the return content was first passed through jsonable_encoder to ensure it was a \"jsonable\" object, like a dict , instead of an arbitrary object with attributes (like an ORM model). That's why you should make sure to update your Pydantic models for objects with attributes to use orm_mode = True . If you don't have a response_model , the return object will still be passed through jsonable_encoder first. When a response_model is declared, the same response_model type declaration won't be used as is, it will be \"cloned\" to create an new one (a cloned Pydantic Field with all the submodels cloned as well). This avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the response_model (e.g. you return a UserInDB that inherits from User but contains extra fields, like hashed_password , and User is used in the response_model ), it would still pass the validation (because UserInDB is a subclass of User ) and the object would be returned as-is, including the hashed_password . To fix this, the declared response_model is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a List[Item] ), the Pydantic model class(es) will be a different one (the \"cloned\" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned response_model . Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned response_model , containing only the declared fields as normally. PR #322 . Remove/clean unused RegEx code in routing. PR #314 by @dmontagu . Use default response status code descriptions for additional responses. PR #313 by @duxiaoyao . Upgrade Pydantic support to 0.28 . PR #320 by @jekirl . 0.29.1 \u00b6 Fix handling an empty-body request with a required body param. PR #311 . Fix broken link in docs: Return a Response directly . PR #306 by @dmontagu . Fix docs discrepancy in docs for Response Model . PR #288 by @awiddersheim . 0.29.0 \u00b6 Add support for declaring a Response parameter: This allows declaring: Response Cookies . Response Headers . An HTTP Status Code different than the default: Response - Change Status Code . All of this while still being able to return arbitrary objects ( dict , DB model, etc). Update attribution to Hug, for inspiring the response parameter pattern. PR #294 . 0.28.0 \u00b6 Implement dependency cache per request. This avoids calling each dependency multiple times for the same request. This is useful while calling external services, performing costly computation, etc. This also means that if a dependency was declared as a path operation decorator dependency, possibly at the router level (with .include_router() ) and then it is declared again in a specific path operation , the dependency will be called only once. The cache can be disabled per dependency declaration, using use_cache=False as in Depends(your_dependency, use_cache=False) . Updated docs at: Using the same dependency multiple times . PR #292 . Implement dependency overrides for testing. This allows using overrides/mocks of dependencies during tests. New docs: Testing Dependencies with Overrides . PR #291 . 0.27.2 \u00b6 Fix path and query parameters receiving dict as a valid type. It should be mapped to a body payload. PR #287 . Updated docs at: Query parameter list / multiple values with defaults: Using list . 0.27.1 \u00b6 Fix auto_error=False handling in HTTPBearer security scheme. Do not raise when there's an incorrect Authorization header if auto_error=False . PR #282 . Fix type declaration of HTTPException . PR #279 . 0.27.0 \u00b6 Fix broken link in docs about OAuth 2.0 with scopes. PR #275 by @dmontagu . Refactor param extraction using Pydantic Field : Large refactor, improvement, and simplification of param extraction from path operations . Fix/add support for list query parameters with list defaults. New documentation: Query parameter list / multiple values with defaults . Add support for enumerations in path operation parameters. New documentation: Path Parameters: Predefined values . Add support for type annotations using Optional as in param: Optional[str] = None . New documentation: Optional type declarations . PR #278 . 0.26.0 \u00b6 Separate error handling for validation errors. This will allow developers to customize the exception handlers. Document better how to handle exceptions and use error handlers. Include RequestValidationError and WebSocketRequestValidationError (this last one will be useful once encode/starlette#527 or equivalent is merged). New documentation about exceptions handlers: Install custom exception handlers . Override the default exception handlers . Re-use FastAPI's exception handlers . PR #273 . Fix support for paths in path parameters without needing explicit Path(...) . PR #256 . Documented in PR #272 by @wshayes . New documentation at: Path Parameters containing paths . Update docs for testing FastAPI. Include using POST , sending JSON, testing headers, etc. New documentation: Testing . PR #271 . Fix type declaration of response_model to allow generic Python types as List[Model] . Mainly to fix mypy for users. PR #266 . 0.25.0 \u00b6 Add support for Pydantic's include , exclude , by_alias . Update documentation: Response Model . Add docs for: Body - updates , using Pydantic's skip_defaults . Add method consistency tests. PR #264 . Add CONTRIBUTING.md file to GitHub, to help new contributors. PR #255 by @wshayes . Add support for Pydantic's skip_defaults : There's a new path operation decorator parameter response_model_skip_defaults . The name of the parameter will most probably change in a future version to response_skip_defaults , model_skip_defaults or something similar. New documentation section about using response_model_skip_defaults . PR #248 by @wshayes . 0.24.0 \u00b6 Add support for WebSockets with dependencies and parameters. Support included for: Depends Security Cookie Header Path Query ...as these are compatible with the WebSockets protocol (e.g. Body is not). Updated documentation for WebSockets . PR #178 by @jekirl . Upgrade the compatible version of Pydantic to 0.26.0 . This includes JSON Schema support for IP address and network objects, bug fixes, and other features. PR #247 by @euri10 . 0.23.0 \u00b6 Upgrade the compatible version of Starlette to 0.12.0 . This includes support for ASGI 3 (the latest version of the standard). It's now possible to use Starlette's StreamingResponse with iterators, like file-like objects (as those returned by open() ). It's now possible to use the low level utility iterate_in_threadpool from starlette.concurrency (for advanced scenarios). PR #243 . Add OAuth2 redirect page for Swagger UI. This allows having delegated authentication in the Swagger UI docs. For this to work, you need to add {your_origin}/docs/oauth2-redirect to the allowed callbacks in your OAuth2 provider (in Auth0, Facebook, Google, etc). For example, during development, it could be http://localhost:8000/docs/oauth2-redirect . Have in mind that this callback URL is independent of whichever one is used by your frontend. You might also have another callback at https://yourdomain.com/login/callback . This is only to allow delegated authentication in the API docs with Swagger UI. PR #198 by @steinitzu . Make Swagger UI and ReDoc route handlers ( path operations ) be async functions instead of lambdas to improve performance. PR #241 by @Trim21 . Make Swagger UI and ReDoc URLs parameterizable, allowing to host and serve local versions of them and have offline docs. PR #112 by @euri10 . 0.22.0 \u00b6 Add support for dependencies parameter: A parameter in path operation decorators , for dependencies that should be executed but the return value is not important or not used in the path operation function . A parameter in the .include_router() method of FastAPI applications and routers, to include dependencies that should be executed in each path operation in a router. This is useful, for example, to require authentication or permissions in specific group of path operations . Different dependencies can be applied to different routers. These dependencies are run before the normal parameter dependencies. And normal dependencies are run too. They can be combined. Dependencies declared in a router are executed first, then the ones defined in path operation decorators , and then the ones declared in normal parameters. They are all combined and executed. All this also supports using Security with scopes in those dependencies parameters, for more advanced OAuth 2.0 security scenarios with scopes. New documentation about dependencies in path operation decorators . New documentation about dependencies in the include_router() method . PR #235 . Fix OpenAPI documentation of Starlette URL convertors. Specially useful when using path convertors, to take a whole path as a parameter, like /some/url/{p:path} . PR #234 by @euri10 . Make default parameter utilities exported from fastapi be functions instead of classes (the new functions return instances of those classes). To be able to override the return types and fix mypy errors in FastAPI's users' code. Applies to Path , Query , Header , Cookie , Body , Form , File , Depends , and Security . PR #226 and PR #231 . Separate development scripts test.sh , lint.sh , and format.sh . PR #232 . Re-enable black formatting checks for Python 3.7. PR #229 by @zamiramir . 0.21.0 \u00b6 On body parsing errors, raise from previous exception, to allow better introspection in logging code. PR #192 by @ricardomomm . Use Python logger named \" fastapi \" instead of root logger. PR #222 by @euri10 . Upgrade Pydantic to version 0.25. PR #225 by @euri10 . Fix typo in routing. PR #221 by @djlambert . 0.20.1 \u00b6 Add typing information to package including file py.typed . PR #209 by @meadsteve . Add FastAPI bot for Gitter. To automatically announce new releases. PR #189 . 0.20.0 \u00b6 Upgrade OAuth2: Upgrade Password flow using Bearer tokens to use the correct HTTP status code 401 UNAUTHORIZED , with WWW-Authenticate headers. Update, simplify, and improve all the security docs . Add new scope_str to SecurityScopes and update docs: OAuth2 scopes . Update docs, images, tests. PR #188 . Include Hypercorn as an alternative ASGI server in the docs. PR #187 . Add docs for Static Files and Templates . PR #186 . Add docs for handling Response Cookies and Response Headers . PR #185 . Fix typos in docs. PR #176 by @chdsbd . 0.19.0 \u00b6 Rename path operation decorator parameter content_type to response_class . PR #183 . Add docs: How to use the jsonable_encoder in JSON compatible encoder . How to Return a Response directly . Update how to use a Custom Response Class . PR #184 . 0.18.0 \u00b6 Add docs for HTTP Basic Auth . PR #177 . Upgrade HTTP Basic Auth handling with automatic headers (automatic browser login prompt). PR #175 . Update dependencies for security. PR #174 . Add docs for Middleware . PR #173 . 0.17.0 \u00b6 Make Flit publish from CI. PR #170 . Add documentation about handling CORS (Cross-Origin Resource Sharing) . PR #169 . By default, encode by alias. This allows using Pydantic alias parameters working by default. PR #168 . 0.16.0 \u00b6 Upgrade path operation docstring parsing to support proper Markdown descriptions. New documentation at Path Operation Configuration . PR #163 . Refactor internal usage of Pydantic to use correct data types. PR #164 . Upgrade Pydantic to version 0.23 . PR #160 by @euri10 . Fix typo in Tutorial about Extra Models. PR #159 by @danielmichaels . Fix Query Parameters URL examples in docs. PR #157 by @hayata-yamamoto . 0.15.0 \u00b6 Add support for multiple file uploads (as a single form field). New docs at: Multiple file uploads . PR #158 . Add docs for: Additional Status Codes . PR #156 . 0.14.0 \u00b6 Improve automatically generated names of path operations in OpenAPI (in API docs). A function read_items instead of having a generated name \"Read Items Get\" will have \"Read Items\". PR #155 . Add docs for: Testing FastAPI . PR #151 . Update /docs Swagger UI to enable deep linking. This allows sharing the URL pointing directly to the path operation documentation in the docs. PR #148 by @wshayes . Update development dependencies, Pipfile.lock . PR #150 . Include Falcon and Hug in: Alternatives, Inspiration and Comparisons . 0.13.0 \u00b6 Improve/upgrade OAuth2 scopes support with SecurityScopes : SecurityScopes can be declared as a parameter like Request , to get the scopes of all super-dependencies/dependants. Improve Security handling, merging scopes when declaring SecurityScopes . Allow using SecurityBase (like OAuth2 ) classes with Depends and still document them. Security now is needed only to declare scopes . Updated docs about: OAuth2 with Password (and hashing), Bearer with JWT tokens . New docs about: OAuth2 scopes . PR #141 . 0.12.1 \u00b6 Fix bug: handling additional responses in APIRouter.include_router() . PR #140 . Fix typo in SQL tutorial. PR #138 by @mostaphaRoudsari . Fix typos in section about nested models and OAuth2 with JWT. PR #127 by @mmcloud . 0.12.0 \u00b6 Add additional responses parameter to path operation decorators to extend responses in OpenAPI (and API docs). It also allows extending existing responses generated from response_model , declare other media types (like images), etc. The new documentation is here: Additional Responses . responses can also be added to .include_router() , the updated docs are here: Bigger Applications . PR #97 originally initiated by @barsi . Update scripts/test-cov-html.sh to allow passing extra parameters like -vv , for development. 0.11.0 \u00b6 Add auto_error parameter to security utility functions. Allowing them to be optional. Also allowing to have multiple alternative security schemes that are then checked in a single dependency instead of each one verifying and returning the error to the client automatically when not satisfied. PR #134 . Update SQL Tutorial to close database sessions even when there are exceptions. PR #89 by @alexiri . Fix duplicate dependency in pyproject.toml . PR #128 by @zxalif . 0.10.3 \u00b6 Add Gitter chat, badge, links, etc. https://gitter.im/tiangolo/fastapi . PR #117 . Add docs about Extending OpenAPI . PR #126 . Make Travis run Ubuntu Xenial (newer version) and Python 3.7 instead of Python 3.7-dev. PR #92 by @blueyed . Fix duplicated param variable creation. PR #123 by @yihuang . Add note in Response Model docs about why using a function parameter instead of a function return type annotation. PR #109 by @JHSaunders . Fix event docs (startup/shutdown) function name. PR #105 by @stratosgear . 0.10.2 \u00b6 Fix OpenAPI (JSON Schema) for declarations of Python Union (JSON Schema additionalProperties ). PR #121 . Update Background Tasks with a note on Celery. Document response models using unions and lists, updated at: Extra Models . PR #108 . 0.10.1 \u00b6 Add docs and tests for encode/databases . New docs at: Async SQL (Relational) Databases . PR #107 . 0.10.0 \u00b6 Add support for Background Tasks in path operation functions and dependencies. New documentation about Background Tasks is here . PR #103 . Add support for .websocket_route() in APIRouter . PR #100 by @euri10 . New docs section about Events: startup - shutdown . PR #99 . 0.9.1 \u00b6 Document receiving Multiple values with the same query parameter and Duplicate headers . PR #95 . 0.9.0 \u00b6 Upgrade compatible Pydantic version to 0.21.0 . PR #90 . Add documentation for: Application Configuration . Fix typo in docs. PR #76 by @matthewhegarty . Fix link in \"Deployment\" to \"Bigger Applications\". 0.8.0 \u00b6 Make development scripts executable. PR #76 by @euri10 . Add support for adding tags in app.include_router() . PR #55 by @euri10 . Documentation updated in the section: Bigger Applications . Update docs related to Uvicorn to use new --reload option from version 0.5.x . PR #74 . Update isort imports and scripts to be compatible with newer versions. PR #75 . 0.7.1 \u00b6 Update technical details about async def handling with respect to previous frameworks. PR #64 by @haizaar . Add deployment documentation for Docker in Raspberry Pi and other architectures. Trigger Docker images build on Travis CI automatically. PR #65 . 0.7.0 \u00b6 Add support for UploadFile in File parameter annotations. This includes a file-like interface. Here's the updated documentation for declaring File parameters with UploadFile . And here's the updated documentation for using Form parameters mixed with File parameters, supporting bytes and UploadFile at the same time. PR #63 . 0.6.4 \u00b6 Add technical details about async def handling to docs . PR #61 . Add docs for Debugging FastAPI applications in editors . Clarify Bigger Applications deployed with Docker . Fix typos in docs. Add section about History, Design and Future . Add docs for using WebSockets with FastAPI . PR #62 . 0.6.3 \u00b6 Add Favicons to docs. PR #53 . 0.6.2 \u00b6 Introduce new project generator based on FastAPI and PostgreSQL: https://github.com/tiangolo/full-stack-fastapi-postgresql . PR #52 . Update SQL tutorial with SQLAlchemy, using Depends to improve editor support and reduce code repetition . PR #52 . Improve middleware naming in tutorial for SQL with SQLAlchemy https://fastapi.tiangolo.com/tutorial/sql-databases/ . 0.6.1 \u00b6 Add docs for GraphQL: https://fastapi.tiangolo.com/advanced/graphql/ . PR #48 . 0.6.0 \u00b6 Update SQL with SQLAlchemy tutorial at https://fastapi.tiangolo.com/tutorial/sql-databases/ using the new official request.state . PR #45 . Upgrade Starlette to version 0.11.1 and add required compatibility changes. PR #44 . 0.5.1 \u00b6 Add section about helping and getting help with FastAPI . Add note about path operations order in docs . Update section about error handling with more information and make relation with Starlette error handling utilities more explicit. PR #41 . Add Development - Contributing section to the docs . PR #42 . 0.5.0 \u00b6 Add new HTTPException with support for custom headers. With new documentation for handling errors at: https://fastapi.tiangolo.com/tutorial/handling-errors/ . PR #35 . Add documentation to use Starlette Request object directly. Check #25 by @euri10 . Add issue templates to simplify reporting bugs, getting help, etc: #34 . Update example for the SQLAlchemy tutorial at https://fastapi.tiangolo.com/tutorial/sql-databases/ using middleware and database session attached to request. 0.4.0 \u00b6 Add openapi_prefix , support for reverse proxy and mounting sub-applications. See the docs at https://fastapi.tiangolo.com/advanced/sub-applications-proxy/ : #26 by @kabirkhan . Update docs/tutorial for SQLAlchemy including note about DB Browser for SQLite . 0.3.0 \u00b6 Fix/add SQLAlchemy support, including ORM, and update docs for SQLAlchemy : #30 . 0.2.1 \u00b6 Fix jsonable_encoder for Pydantic models with Config but without json_encoders : #29 . 0.2.0 \u00b6 Fix typos in Security section: #24 by @kkinder . Add support for Pydantic custom JSON encoders: #21 by @euri10 . 0.1.19 \u00b6 Upgrade Starlette version to the current latest 0.10.1 : #17 by @euri10 .","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing .","title":"Release Notes"},{"location":"release-notes/#latest-changes","text":"\ud83d\udd27 Update sponsors, Striveworks badge. PR #5179 by @tiangolo . \ud83c\udf10 Add Persian translation for docs/fa/docs/index.md and tweak right-to-left CSS. PR #2395 by @mohsen-mahmoodi .","title":"Latest Changes"},{"location":"release-notes/#0790","text":"","title":"0.79.0"},{"location":"release-notes/#fixes-breaking-changes","text":"\ud83d\udc1b Fix removing body from status codes that do not support it. PR #5145 by @tiangolo . Setting status_code to 204 , 304 , or any code below 200 (1xx) will remove the body from the response. This fixes an error in Uvicorn that otherwise would be thrown: RuntimeError: Response content longer than Content-Length . This removes fastapi.openapi.constants.STATUS_CODES_WITH_NO_BODY , it is replaced by a function in utils.","title":"Fixes - Breaking Changes"},{"location":"release-notes/#translations","text":"\ud83c\udf10 Start of Hebrew translation. PR #5050 by @itay-raveh . \ud83d\udd27 Add config for Swedish translations notification. PR #5147 by @tiangolo . \ud83c\udf10 Start of Swedish translation. PR #5062 by @MrRawbin . \ud83c\udf10 Add Japanese translation for docs/ja/docs/advanced/index.md . PR #5043 by @wakabame . \ud83c\udf10\ud83c\uddf5\ud83c\uddf1 Add Polish translation for docs/pl/docs/tutorial/first-steps.md . PR #5024 by @Valaraucoo .","title":"Translations"},{"location":"release-notes/#internal","text":"\ud83d\udd27 Update translations notification for Hebrew. PR #5158 by @tiangolo . \ud83d\udd27 Update Dependabot commit message. PR #5156 by @tiangolo . \u2b06 Bump actions/upload-artifact from 2 to 3. PR #5148 by @dependabot[bot] . \u2b06 Bump actions/cache from 2 to 3. PR #5149 by @dependabot[bot] . \ud83d\udd27 Update sponsors badge configs. PR #5155 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #5154 by @tiangolo . \ud83d\udd27 Update Jina sponsor badges. PR #5151 by @tiangolo . \u2b06 Bump actions/checkout from 2 to 3. PR #5133 by @dependabot[bot] . \u2b06 [pre-commit.ci] pre-commit autoupdate. PR #5030 by @pre-commit-ci[bot] . \u2b06 Bump nwtgck/actions-netlify from 1.1.5 to 1.2.3. PR #5132 by @dependabot[bot] . \u2b06 Bump codecov/codecov-action from 2 to 3. PR #5131 by @dependabot[bot] . \u2b06 Bump dawidd6/action-download-artifact from 2.9.0 to 2.21.1. PR #5130 by @dependabot[bot] . \u2b06 Bump actions/setup-python from 2 to 4. PR #5129 by @dependabot[bot] . \ud83d\udc77 Add Dependabot. PR #5128 by @tiangolo . \u267b\ufe0f Move from Optional[X] to Union[X, None] for internal utils. PR #5124 by @tiangolo . \ud83d\udd27 Update sponsors, remove Dropbase, add Doist. PR #5096 by @tiangolo . \ud83d\udd27 Update sponsors, remove Classiq, add ImgWhale. PR #5079 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0780","text":"","title":"0.78.0"},{"location":"release-notes/#features","text":"\u2728 Add support for omitting ... as default value when declaring required parameters with: Path() Query() Header() Cookie() Body() Form() File() New docs at Tutorial - Query Parameters and String Validations - Make it required . PR #4906 by @tiangolo . Up to now, declaring a required parameter while adding additional validation or metadata needed using ... (Ellipsis). For example: from fastapi import Cookie , FastAPI , Header , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def main ( item_id : int = Path ( default =... , gt = 0 ), query : str = Query ( default =... , max_length = 10 ), session : str = Cookie ( default =... , min_length = 3 ), x_trace : str = Header ( default =... , title = \"Tracing header\" ), ): return { \"message\" : \"Hello World\" } ...all these parameters are required because the default value is ... (Ellipsis). But now it's possible and supported to just omit the default value, as would be done with Pydantic fields, and the parameters would still be required. \u2728 For example, this is now supported: from fastapi import Cookie , FastAPI , Header , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def main ( item_id : int = Path ( gt = 0 ), query : str = Query ( max_length = 10 ), session : str = Cookie ( min_length = 3 ), x_trace : str = Header ( title = \"Tracing header\" ), ): return { \"message\" : \"Hello World\" } To declare parameters as optional (not required), you can set a default value as always, for example using None : from typing import Union from fastapi import Cookie , FastAPI , Header , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def main ( item_id : int = Path ( gt = 0 ), query : Union [ str , None ] = Query ( default = None , max_length = 10 ), session : Union [ str , None ] = Cookie ( default = None , min_length = 3 ), x_trace : Union [ str , None ] = Header ( default = None , title = \"Tracing header\" ), ): return { \"message\" : \"Hello World\" }","title":"Features"},{"location":"release-notes/#docs","text":"\ud83d\udcdd Add docs recommending Union over Optional and migrate source examples. New docs at Python Types Intro - Using Union or Optional . PR #4908 by @tiangolo . \ud83c\udfa8 Fix default value as set in tutorial for Path Operations Advanced Configurations. PR #4899 by @tiangolo . \ud83d\udcdd Add documentation for redefined path operations. PR #4864 by @madkinsz . \ud83d\udcdd Updates links for Celery documentation. PR #4736 by @sammyzord . \u270f Fix example code with sets in tutorial for body nested models. PR #3030 by @hitrust . \u270f Fix links to Pydantic docs. PR #4670 by @kinuax . \ud83d\udcdd Update docs about Swagger UI self-hosting with newer source links. PR #4813 by @Kastakin . \ud83d\udcdd Add link to external article: Building the Poll App From Django Tutorial With FastAPI And React. PR #4778 by @jbrocher . \ud83d\udcdd Add OpenAPI warning to \"Body - Fields\" docs with extra schema extensions. PR #4846 by @ml-evs .","title":"Docs"},{"location":"release-notes/#translations_1","text":"\ud83c\udf10 Fix code examples in Japanese translation for docs/ja/docs/tutorial/testing.md . PR #4623 by @hirotoKirimaru .","title":"Translations"},{"location":"release-notes/#internal_1","text":"\u267b Refactor dict value extraction to minimize key lookups fastapi/utils.py . PR #3139 by @ShahriyarR . \u2705 Add tests for required nonable parameters and body fields. PR #4907 by @tiangolo . \ud83d\udc77 Fix installing Material for MkDocs Insiders in CI. PR #4897 by @tiangolo . \ud83d\udc77 Add pre-commit CI instead of custom GitHub Action. PR #4896 by @tiangolo . \ud83d\udc77 Add pre-commit GitHub Action workflow. PR #4895 by @tiangolo . \ud83d\udcdd Add dark mode auto switch to docs based on OS preference. PR #4869 by @ComicShrimp . \ud83d\udd25 Remove un-used old pending tests, already covered in other places. PR #4891 by @tiangolo . \ud83d\udd27 Add Python formatting hooks to pre-commit. PR #4890 by @tiangolo . \ud83d\udd27 Add pre-commit with first config and first formatting pass. PR #4888 by @tiangolo . \ud83d\udc77 Disable CI installing Material for MkDocs in forks. PR #4410 by @dolfinus .","title":"Internal"},{"location":"release-notes/#0771","text":"","title":"0.77.1"},{"location":"release-notes/#upgrades","text":"\u2b06 Upgrade Starlette from 0.19.0 to 0.19.1. PR #4819 by @Kludex .","title":"Upgrades"},{"location":"release-notes/#docs_1","text":"\ud83d\udcdd Add link to german article: REST-API Programmieren mittels Python und dem FastAPI Modul. PR #4624 by @fschuermeyer . \ud83d\udcdd Add external link: PyCharm Guide to FastAPI. PR #4512 by @mukulmantosh . \ud83d\udcdd Add external link to article: Building an API with FastAPI and Supabase and Deploying on Deta. PR #4440 by @aUnicornDev . \u270f Fix small typo in docs/en/docs/tutorial/security/first-steps.md . PR #4515 by @KikoIlievski .","title":"Docs"},{"location":"release-notes/#translations_2","text":"\ud83c\udf10 Add Polish translation for docs/pl/docs/tutorial/index.md . PR #4516 by @MKaczkow . \u270f Fix typo in deployment. PR #4629 by @raisulislam541 . \ud83c\udf10 Add Portuguese translation for docs/pt/docs/help-fastapi.md . PR #4583 by @mateusjs .","title":"Translations"},{"location":"release-notes/#internal_2","text":"\ud83d\udd27 Add notifications in issue for Uzbek translations. PR #4884 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0770","text":"","title":"0.77.0"},{"location":"release-notes/#upgrades_1","text":"\u2b06 Upgrade Starlette from 0.18.0 to 0.19.0. PR #4488 by @Kludex . When creating an explicit JSONResponse the content argument is now required.","title":"Upgrades"},{"location":"release-notes/#docs_2","text":"\ud83d\udcdd Add external link to article: Seamless FastAPI Configuration with ConfZ. PR #4414 by @silvanmelchior . \ud83d\udcdd Add external link to article: 5 Advanced Features of FastAPI You Should Try. PR #4436 by @kaustubhgupta . \u270f Reword to improve legibility of docs about TestClient . PR #4389 by @rgilton . \ud83d\udcdd Add external link to blog post about Kafka, FastAPI, and Ably. PR #4044 by @Ugbot . \u270f Fix typo in docs/en/docs/tutorial/sql-databases.md . PR #4875 by @wpyoga . \u270f Fix typo in docs/en/docs/async.md . PR #4726 by @Prezu .","title":"Docs"},{"location":"release-notes/#translations_3","text":"\ud83c\udf10 Update source example highlights for docs/zh/docs/tutorial/query-params-str-validations.md . PR #4237 by @caimaoy . \ud83c\udf10 Remove translation docs references to aiofiles as it's no longer needed since AnyIO. PR #3594 by @alonme . \u270f \ud83c\udf10 Fix typo in Portuguese translation for docs/pt/docs/tutorial/path-params.md . PR #4722 by @CleoMenezesJr . \ud83c\udf10 Fix live docs server for translations for some languages. PR #4729 by @wakabame . \ud83c\udf10 Add Portuguese translation for docs/pt/docs/tutorial/cookie-params.md . PR #4112 by @lbmendes . \ud83c\udf10 Fix French translation for docs/tutorial/body.md . PR #4332 by @Smlep . \ud83c\udf10 Add Japanese translation for docs/ja/docs/advanced/conditional-openapi.md . PR #2631 by @sh0nk . \ud83c\udf10 Fix Japanese translation of docs/ja/docs/tutorial/body.md . PR #3062 by @a-takahashi223 . \ud83c\udf10 Add Portuguese translation for docs/pt/docs/tutorial/background-tasks.md . PR #2170 by @izaguerreiro . \ud83c\udf10 Add Portuguese translation for docs/deployment/deta.md . PR #4442 by @lsglucas . \ud83c\udf10 Add Russian translation for docs/async.md . PR #4036 by @Winand . \ud83c\udf10 Add Portuguese translation for docs/tutorial/body.md . PR #3960 by @leandrodesouzadev . \ud83c\udf10 Add Portuguese translation of tutorial/extra-data-types.md . PR #4077 by @luccasmmg . \ud83c\udf10 Update German translation for docs/features.md . PR #3905 by @jomue .","title":"Translations"},{"location":"release-notes/#0760","text":"","title":"0.76.0"},{"location":"release-notes/#upgrades_2","text":"\u2b06 Upgrade Starlette from 0.17.1 to 0.18.0. PR #4483 by @Kludex .","title":"Upgrades"},{"location":"release-notes/#internal_3","text":"\ud83d\udc65 Update FastAPI People. PR #4847 by @github-actions[bot] . \ud83d\udd27 Add Budget Insight sponsor. PR #4824 by @tiangolo . \ud83c\udf71 Update sponsor, ExoFlare badge. PR #4822 by @tiangolo . \ud83d\udd27 Update sponsors, enable Dropbase again, update TalkPython link. PR #4821 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0752","text":"This release includes upgrades to third-party packages that handle security issues. Although there's a chance these issues don't affect you in particular, please upgrade as soon as possible.","title":"0.75.2"},{"location":"release-notes/#fixes","text":"\u2705 Fix new/recent tests with new fixed ValidationError JSON Schema. PR #4806 by @tiangolo . \ud83d\udc1b Fix JSON Schema for ValidationError at field loc . PR #3810 by @dconathan . \ud83d\udc1b Fix support for prefix on APIRouter WebSockets. PR #2640 by @Kludex .","title":"Fixes"},{"location":"release-notes/#upgrades_3","text":"\u2b06\ufe0f Update ujson ranges for CVE-2021-45958. PR #4804 by @tiangolo . \u2b06\ufe0f Upgrade dependencies upper range for extras \"all\". PR #4803 by @tiangolo . \u2b06 Upgrade Swagger UI - swagger-ui-dist@4. This handles a security issue in Swagger UI itself where it could be possible to inject HTML into Swagger UI. Please upgrade as soon as you can, in particular if you expose your Swagger UI ( /docs ) publicly to non-expert users. PR #4347 by @RAlanWright .","title":"Upgrades"},{"location":"release-notes/#internal_4","text":"\ud83d\udd27 Update sponsors, add: ExoFlare, Ines Course; remove: Dropbase, Vim.so, Calmcode; update: Striveworks, TalkPython and TestDriven.io. PR #4805 by @tiangolo . \u2b06\ufe0f Upgrade Codecov GitHub Action. PR #4801 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0751","text":"","title":"0.75.1"},{"location":"release-notes/#translations_4","text":"\ud83c\udf10 Start Dutch translations. PR #4703 by @tiangolo . \ud83c\udf10 Start Persian/Farsi translations. PR #4243 by @aminalaee . \u270f Reword sentence about handling errors. PR #1993 by @khuhroproeza .","title":"Translations"},{"location":"release-notes/#internal_5","text":"\ud83d\udc65 Update FastAPI People. PR #4752 by @github-actions[bot] . \u2796 Temporarily remove typer-cli from dependencies and upgrade Black to unblock Pydantic CI. PR #4754 by @tiangolo . \ud83d\udd27 Add configuration to notify Dutch translations. PR #4702 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #4699 by @github-actions[bot] . \ud83d\udc1b Fix FastAPI People generation to include missing file in commit. PR #4695 by @tiangolo . \ud83d\udd27 Update Classiq sponsor links. PR #4688 by @tiangolo . \ud83d\udd27 Add Classiq sponsor. PR #4671 by @tiangolo . \ud83d\udcdd Add Jina's QA Bot to the docs to help people that want to ask quick questions. PR #4655 by @tiangolo based on original PR #4626 by @hanxiao .","title":"Internal"},{"location":"release-notes/#0750","text":"","title":"0.75.0"},{"location":"release-notes/#features_1","text":"\u2728 Add support for custom generate_unique_id_function and docs for generating clients. New docs: Advanced - Generate Clients . PR #4650 by @tiangolo .","title":"Features"},{"location":"release-notes/#0741","text":"","title":"0.74.1"},{"location":"release-notes/#features_2","text":"\u2728 Include route in scope to allow middleware and other tools to extract its information. PR #4603 by @tiangolo .","title":"Features"},{"location":"release-notes/#0740","text":"","title":"0.74.0"},{"location":"release-notes/#breaking-changes","text":"\u2728 Update internal AsyncExitStack to fix context for dependencies with yield . PR #4575 by @tiangolo . Dependencies with yield can now catch HTTPException and custom exceptions. For example: async def get_database (): with Session () as session : try : yield session except HTTPException : session . rollback () raise finally : session . close () After the dependency with yield handles the exception (or not) the exception is raised again. So that any exception handlers can catch it, or ultimately the default internal ServerErrorMiddleware . If you depended on exceptions not being received by dependencies with yield , and receiving an exception breaks the code after yield , you can use a block with try and finally : async def do_something (): try : yield something finally : some_cleanup () ...that way the finally block is run regardless of any exception that might happen.","title":"Breaking Changes"},{"location":"release-notes/#features_3","text":"The same PR #4575 from above also fixes the contextvars context for the code before and after yield . This was the main objective of that PR. This means that now, if you set a value in a context variable before yield , the value would still be available after yield (as you would intuitively expect). And it also means that you can reset the context variable with a token afterwards. For example, this works correctly now: from contextvars import ContextVar from typing import Any , Dict , Optional legacy_request_state_context_var : ContextVar [ Optional [ Dict [ str , Any ]]] = ContextVar ( \"legacy_request_state_context_var\" , default = None ) async def set_up_request_state_dependency (): request_state = { \"user\" : \"deadpond\" } contextvar_token = legacy_request_state_context_var . set ( request_state ) yield request_state legacy_request_state_context_var . reset ( contextvar_token ) ...before this change it would raise an error when resetting the context variable, because the contextvars context was different, because of the way it was implemented. Note : You probably don't need contextvars , and you should probably avoid using them. But they are powerful and useful in some advanced scenarios, for example, migrating from code that used Flask's g semi-global variable. Technical Details : If you want to know more of the technical details you can check out the PR description #4575 .","title":"Features"},{"location":"release-notes/#internal_6","text":"\ud83d\udd27 Add Striveworks sponsor. PR #4596 by @tiangolo . \ud83d\udc9a Only build docs on push when on master to avoid duplicate runs from PRs. PR #4564 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #4502 by @github-actions[bot] .","title":"Internal"},{"location":"release-notes/#0730","text":"","title":"0.73.0"},{"location":"release-notes/#features_4","text":"\u2728 Add support for declaring UploadFile parameters without explicit File() . PR #4469 by @tiangolo . New docs: Request Files - File Parameters with UploadFile . \u2728 Add support for tags with Enums. PR #4468 by @tiangolo . New docs: Path Operation Configuration - Tags with Enums . \u2728 Allow hiding from OpenAPI (and Swagger UI) Query , Cookie , Header , and Path parameters. PR #3144 by @astraldawn . New docs: Query Parameters and String Validations - Exclude from OpenAPI .","title":"Features"},{"location":"release-notes/#docs_3","text":"\ud83d\udcdd Tweak and improve docs for Request Files. PR #4470 by @tiangolo .","title":"Docs"},{"location":"release-notes/#fixes_1","text":"\ud83d\udc1b Fix bug preventing to use OpenAPI when using tuples. PR #3874 by @victorbenichoux . \ud83d\udc1b Prefer custom encoder over defaults if specified in jsonable_encoder . PR #2061 by @viveksunder . \ud83d\udc9a Duplicate PR to trigger CI. PR #4467 by @tiangolo .","title":"Fixes"},{"location":"release-notes/#internal_7","text":"\ud83d\udc1b Fix docs dependencies cache, to get the latest Material for MkDocs. PR #4466 by @tiangolo . \ud83d\udd27 Add sponsor Dropbase. PR #4465 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0720","text":"","title":"0.72.0"},{"location":"release-notes/#features_5","text":"\u2728 Enable configuring Swagger UI parameters. Original PR #2568 by @jmriebold . Here are the new docs: Configuring Swagger UI .","title":"Features"},{"location":"release-notes/#docs_4","text":"\ud83d\udcdd Update Python Types docs, add missing 3.6 / 3.9 example. PR #4434 by @tiangolo .","title":"Docs"},{"location":"release-notes/#translations_5","text":"\ud83c\udf10 Update Chinese translation for docs/help-fastapi.md . PR #3847 by @jaystone776 . \ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md . PR #4195 by @kty4119 . \ud83c\udf10 Add Polish translation for docs/pl/docs/index.md . PR #4245 by @MicroPanda123 . \ud83c\udf10 Add Chinese translation for docs\\tutorial\\path-operation-configuration.md . PR #3312 by @jaystone776 .","title":"Translations"},{"location":"release-notes/#internal_8","text":"\ud83d\udd27 Enable MkDocs Material Insiders' content.tabs.link . PR #4399 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0710","text":"","title":"0.71.0"},{"location":"release-notes/#features_6","text":"\u2728 Add docs and tests for Python 3.9 and Python 3.10. PR #3712 by @tiangolo . You can start with Python Types Intro , it explains what changes between different Python versions, in Python 3.9 and in Python 3.10. All the FastAPI docs are updated. Each code example in the docs that could use different syntax in Python 3.9 or Python 3.10 now has all the alternatives in tabs. \u2b06\ufe0f Upgrade Starlette to 0.17.1. PR #4145 by @simondale00 .","title":"Features"},{"location":"release-notes/#internal_9","text":"\ud83d\udc65 Update FastAPI People. PR #4354 by @github-actions[bot] . \ud83d\udd27 Add FastAPI Trove Classifier for PyPI as now there's one \ud83e\udd37\ud83d\ude01. PR #4386 by @tiangolo . \u2b06 Upgrade MkDocs Material and configs. PR #4385 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0701","text":"There's nothing interesting in this particular FastAPI release. It is mainly to enable/unblock the release of the next version of Pydantic that comes packed with features and improvements. \ud83e\udd29","title":"0.70.1"},{"location":"release-notes/#fixes_2","text":"\ud83d\udc1b Fix JSON Schema for dataclasses, supporting the fixes in Pydantic 1.9. PR #4272 by @PrettyWood .","title":"Fixes"},{"location":"release-notes/#translations_6","text":"\ud83c\udf10 Add Korean translation for docs/tutorial/request-forms-and-files.md . PR #3744 by @NinaHwang . \ud83c\udf10 Add Korean translation for docs/tutorial/request-files.md . PR #3743 by @NinaHwang . \ud83c\udf10 Add portuguese translation for docs/tutorial/query-params-str-validations.md . PR #3965 by @leandrodesouzadev . \ud83c\udf10 Add Korean translation for docs/tutorial/response-status-code.md . PR #3742 by @NinaHwang . \ud83c\udf10 Add Korean translation for Tutorial - JSON Compatible Encoder. PR #3152 by @NEONKID . \ud83c\udf10 Add Korean translation for Tutorial - Path Parameters and Numeric Validations. PR #2432 by @hard-coders . \ud83c\udf10 Add Korean translation for docs/ko/docs/deployment/versions.md . PR #4121 by @DevDae . \ud83c\udf10 Fix Korean translation for docs/ko/docs/tutorial/index.md . PR #4193 by @kimjaeyoonn . \ud83d\udd27 Add CryptAPI sponsor. PR #4264 by @tiangolo . \ud83d\udcdd Update docs/tutorial/dependencies/classes-as-dependencies : Add type of query parameters in a description of Classes as dependencies . PR #4015 by @0417taehyun . \ud83c\udf10 Add French translation for Tutorial - First steps. PR #3455 by @Smlep . \ud83c\udf10 Add French translation for docs/tutorial/path-params.md . PR #3548 by @Smlep . \ud83c\udf10 Add French translation for docs/tutorial/query-params.md . PR #3556 by @Smlep . \ud83c\udf10 Add Turkish translation for docs/python-types.md . PR #3926 by @BilalAlpaslan .","title":"Translations"},{"location":"release-notes/#internal_10","text":"\ud83d\udc65 Update FastAPI People. PR #4274 by @github-actions[bot] .","title":"Internal"},{"location":"release-notes/#0700","text":"This release just upgrades Starlette to the latest version, 0.16.0 , which includes several bug fixes and some small breaking changes. These last three consecutive releases are independent so that you can migrate gradually : First to FastAPI 0.68.2 , with no breaking changes, but upgrading all the sub-dependencies. Next to FastAPI 0.69.0 , which upgrades Starlette to 0.15.0 , with AnyIO support, and a higher chance of having breaking changes in your code. Finally to FastAPI 0.70.0 , just upgrading Starlette to the latest version 0.16.0 with additional bug fixes. This way, in case there was a breaking change for your code in one of the releases, you can still benefit from the previous upgrades. \u2728","title":"0.70.0"},{"location":"release-notes/#breaking-changes-upgrade","text":"\u2b06\ufe0f Upgrade Starlette to 0.16.0. PR #4016 by @tiangolo . Also upgrades the ranges of optional dependencies: \"jinja2 >=2.11.2,<4.0.0\" \"itsdangerous >=1.1.0,<3.0.0\"","title":"Breaking Changes - Upgrade"},{"location":"release-notes/#0690","text":"","title":"0.69.0"},{"location":"release-notes/#breaking-changes-upgrade_1","text":"This release adds support for Trio . \u2728 It upgrades the version of Starlette to 0.15.0 , now based on AnyIO , and the internal async components in FastAPI are now based on AnyIO as well, making it compatible with both asyncio and Trio . You can read the docs about running FastAPI with Trio using Hypercorn . This release also removes graphene as an optional dependency for GraphQL. If you need to work with GraphQL, the recommended library now is Strawberry . You can read the new FastAPI with GraphQL docs .","title":"Breaking Changes - Upgrade"},{"location":"release-notes/#features_7","text":"\u2728 Add support for Trio via AnyIO, upgrading Starlette to 0.15.0 . PR #3372 by @graingert . \u2796 Remove graphene as an optional dependency. PR #4007 by @tiangolo .","title":"Features"},{"location":"release-notes/#docs_5","text":"\ud83d\udcdd Add docs for using Trio with Hypercorn. PR #4014 by @tiangolo . \u270f Fix typos in Deployment Guide. PR #3975 by @ghandic . \ud83d\udcdd Update docs with pip install calls when using extras with brackets, use quotes for compatibility with Zsh. PR #3131 by @tomwei7 . \ud83d\udcdd Add external link to article: Deploying ML Models as API Using FastAPI and Heroku. PR #3904 by @kaustubhgupta . \u270f Fix typo in file paths in docs/en/docs/contributing.md . PR #3752 by @NinaHwang . \u270f Fix a typo in docs/en/docs/advanced/path-operation-advanced-configuration.md and docs/en/docs/release-notes.md . PR #3750 by @saintmalik . \u270f\ufe0f Add a missing comma in the security tutorial. PR #3564 by @jalvaradosegura . \u270f Fix typo in docs/en/docs/help-fastapi.md . PR #3760 by @jaystone776 . \u270f Fix typo about file path in docs/en/docs/tutorial/bigger-applications.md . PR #3285 by @HolyDorus . \u270f Re-word to clarify test client in docs/en/docs/tutorial/testing.md . PR #3382 by @Bharat123rox . \ud83d\udcdd Fix incorrect highlighted code. PR #3325 by @paxcodes . \ud83d\udcdd Add external link to article: How-to deploy FastAPI app to Heroku. PR #3241 by @Jarmos-san . \u270f Fix typo (mistranslation) in docs/en/docs/advanced/templates.md . PR #3211 by @oerpli . \ud83d\udcdd Remove note about (now supported) feature from Swagger UI in docs/en/docs/tutorial/request-files.md . PR #2803 by @gsganden . \u270f Fix typo re-word in docs/tutorial/handling-errors.md . PR #2700 by @graue70 .","title":"Docs"},{"location":"release-notes/#translations_7","text":"\ud83c\udf10 Initialize Azerbaijani translations. PR #3941 by @madatbay . \ud83c\udf10 Add Turkish translation for docs/fastapi-people.md . PR #3848 by @BilalAlpaslan .","title":"Translations"},{"location":"release-notes/#internal_11","text":"\ud83d\udcdd Add supported Python versions badge. PR #2794 by @hramezani . \u270f Fix link in Japanese docs for docs/ja/docs/deployment/docker.md . PR #3245 by @utamori . \ud83d\udd27 Correct DeprecationWarning config and comment in pytest settings. PR #4008 by @graingert . \ud83d\udd27 Swap light/dark theme button icon. PR #3246 by @eddsalkield . \ud83d\udd27 Lint only in Python 3.7 and above. PR #4006 by @tiangolo . \ud83d\udd27 Add GitHub Action notify-translations config for Azerbaijani. PR #3995 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0682","text":"This release has no breaking changes . \ud83c\udf89 It upgrades the version ranges of sub-dependencies to allow applications using FastAPI to easily upgrade them. Soon there will be a new FastAPI release upgrading Starlette to take advantage of recent improvements, but as that has a higher chance of having breaking changes, it will be in a separate release.","title":"0.68.2"},{"location":"release-notes/#features_8","text":"\u2b06Increase supported version of aiofiles to suppress warnings. PR #2899 by @SnkSynthesis . \u2796 Do not require backports in Python >= 3.7. PR #1880 by @FFY00 . \u2b06 Upgrade required Python version to >= 3.6.1, needed by typing.Deque, used by Pydantic. PR #2733 by @hukkin . \u2b06\ufe0f Bump Uvicorn max range to 0.15.0. PR #3345 by @Kludex .","title":"Features"},{"location":"release-notes/#docs_6","text":"\ud83d\udcdd Update GraphQL docs, recommend Strawberry. PR #3981 by @tiangolo . \ud83d\udcdd Re-write and extend Deployment guide: Concepts, Uvicorn, Gunicorn, Docker, Containers, Kubernetes. PR #3974 by @tiangolo . \ud83d\udcdd Upgrade HTTPS guide with more explanations and diagrams. PR #3950 by @tiangolo .","title":"Docs"},{"location":"release-notes/#translations_8","text":"\ud83c\udf10 Add Turkish translation for docs/features.md . PR #1950 by @ycd . \ud83c\udf10 Add Turkish translation for docs/benchmarks.md . PR #2729 by @Telomeraz . \ud83c\udf10 Add Turkish translation for docs/index.md . PR #1908 by @ycd . \ud83c\udf10 Add French translation for docs/tutorial/body.md . PR #3671 by @Smlep . \ud83c\udf10 Add French translation for deployment/docker.md . PR #3694 by @rjNemo . \ud83c\udf10 Add Portuguese translation for docs/tutorial/path-params.md . PR #3664 by @FelipeSilva93 . \ud83c\udf10 Add Portuguese translation for docs/deployment/https.md . PR #3754 by @lsglucas . \ud83c\udf10 Add German translation for docs/features.md . PR #3699 by @mawassk .","title":"Translations"},{"location":"release-notes/#internal_12","text":"\u2728 Update GitHub Action: notify-translations, to avoid a race conditions. PR #3989 by @tiangolo . \u2b06\ufe0f Upgrade development autoflake , supporting multi-line imports. PR #3988 by @tiangolo . \u2b06\ufe0f Increase dependency ranges for tests and docs: pytest-cov, pytest-asyncio, black, httpx, sqlalchemy, databases, mkdocs-markdownextradata-plugin. PR #3987 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #3986 by @github-actions[bot] . \ud83d\udc9a Fix badges in README and main page. PR #3979 by @ghandic . \u2b06 Upgrade internal testing dependencies: mypy to version 0.910, add newly needed type packages. PR #3350 by @ArcLightSlavik . \u2728 Add Deepset Sponsorship. PR #3976 by @tiangolo . \ud83c\udfa8 Tweak CSS styles for shell animations. PR #3888 by @tiangolo . \ud83d\udd27 Add new Sponsor Calmcode.io. PR #3777 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0681","text":"\u2728 Add support for read_with_orm_mode , to support SQLModel relationship attributes. PR #3757 by @tiangolo .","title":"0.68.1"},{"location":"release-notes/#translations_9","text":"\ud83c\udf10 Add Portuguese translation of docs/fastapi-people.md . PR #3461 by @ComicShrimp . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md . PR #3492 by @jaystone776 . \ud83d\udd27 Add new Translation tracking issues for German and Indonesian. PR #3718 by @tiangolo . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/sub-dependencies.md . PR #3491 by @jaystone776 . \ud83c\udf10 Add Portuguese translation for docs/advanced/index.md . PR #3460 by @ComicShrimp . \ud83c\udf10 Portuguese translation of docs/async.md . PR #1330 by @Serrones . \ud83c\udf10 Add French translation for docs/async.md . PR #3416 by @Smlep .","title":"Translations"},{"location":"release-notes/#internal_13","text":"\u2728 Add GitHub Action: Notify Translations. PR #3715 by @tiangolo . \u2728 Update computation of FastAPI People and sponsors. PR #3714 by @tiangolo . \u2728 Enable recent Material for MkDocs Insiders features. PR #3710 by @tiangolo . \ud83d\udd25 Remove/clean extra imports from examples in docs for features. PR #3709 by @tiangolo . \u2795 Update docs library to include sources in Markdown. PR #3648 by @tiangolo . \u2b06 Enable tests for Python 3.9. PR #2298 by @Kludex . \ud83d\udc65 Update FastAPI People. PR #3642 by @github-actions[bot] .","title":"Internal"},{"location":"release-notes/#0680","text":"","title":"0.68.0"},{"location":"release-notes/#features_9","text":"\u2728 Add support for extensions and updates to the OpenAPI schema in each path operation . New docs: FastAPI Path Operation Advanced Configuration - OpenAPI Extra . Initial PR #1922 by @edouardlp . \u2728 Add additional OpenAPI metadata parameters to FastAPI class, shown on the automatic API docs UI. New docs: Metadata and Docs URLs . Initial PR #1812 by @dkreeft . \u2728 Add description parameter to all the security scheme classes, e.g. APIKeyQuery(name=\"key\", description=\"A very cool API key\") . PR #1757 by @hylkepostma . \u2728 Update OpenAPI models, supporting recursive models and extensions. PR #3628 by @tiangolo . \u2728 Import and re-export data structures from Starlette, used by Request properties, on fastapi.datastructures . Initial PR #1872 by @jamescurtin .","title":"Features"},{"location":"release-notes/#docs_7","text":"\ud83d\udcdd Update docs about async and response-model with more gender neutral language. PR #1869 by @Edward-Knight .","title":"Docs"},{"location":"release-notes/#translations_10","text":"\ud83c\udf10 Add Russian translation for docs/python-types.md . PR #3039 by @dukkee . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/index.md . PR #3489 by @jaystone776 . \ud83c\udf10 Add Russian translation for docs/external-links.md . PR #3036 by @dukkee . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/global-dependencies.md . PR #3493 by @jaystone776 . \ud83c\udf10 Add Portuguese translation for docs/deployment/versions.md . PR #3618 by @lsglucas . \ud83c\udf10 Add Japanese translation for docs/tutorial/security/oauth2-jwt.md . PR #3526 by @sattosan .","title":"Translations"},{"location":"release-notes/#internal_14","text":"\u2705 Add the docs_src directory to test coverage and update tests. Initial PR #1904 by @Kludex . \ud83d\udd27 Add new GitHub templates with forms for new issues. PR #3612 by @tiangolo . \ud83d\udcdd Add official FastAPI Twitter to docs: @fastapi . PR #3578 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0670","text":"","title":"0.67.0"},{"location":"release-notes/#features_10","text":"\u2728 Add support for dataclasses in request bodies and response_model . New documentation: Advanced User Guide - Using Dataclasses . PR #3577 by @tiangolo . \u2728 Support dataclasses in responses. PR #3576 by @tiangolo , continuation from initial PR #2722 by @amitlissack .","title":"Features"},{"location":"release-notes/#docs_8","text":"\ud83d\udcdd Add external link: How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI. PR #2839 by @aitoehigie . \u270f Fix code highlighted line in: body-nested-models.md . PR #3463 by @jaystone776 . \u270f Fix typo in body-nested-models.md . PR #3462 by @jaystone776 . \u270f Fix typo \"might me\" -> \"might be\" in docs/en/docs/tutorial/schema-extra-example.md . PR #3362 by @dbrakman . \ud83d\udcdd Add external link: Building simple E-Commerce with NuxtJS and FastAPI. PR #3271 by @ShahriyarR . \ud83d\udcdd Add external link: Serve a machine learning model using Sklearn, FastAPI and Docker. PR #2974 by @rodrigo-arenas . \u270f\ufe0f Fix typo on docstring in datastructures file. PR #2887 by @Kludex . \ud83d\udcdd Add External Link: Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server. PR #3572 by @tiangolo . \ud83d\udcdd Add External Link, replaces #1898. PR #3571 by @tiangolo .","title":"Docs"},{"location":"release-notes/#internal_15","text":"\ud83c\udfa8 Improve style for sponsors, add radius border. PR #2388 by @Kludex . \ud83d\udc77 Update GitHub Action latest-changes. PR #3574 by @tiangolo . \ud83d\udc77 Update GitHub Action latest-changes. PR #3573 by @tiangolo . \ud83d\udc77 Rename and clarify CI workflow job names. PR #3570 by @tiangolo . \ud83d\udc77 Update GitHub Action latest-changes, strike 2 \u26be. PR #3575 by @tiangolo . \ud83d\udd27 Sort external links in docs to have the most recent at the top. PR #3568 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0661","text":"","title":"0.66.1"},{"location":"release-notes/#translations_11","text":"\ud83c\udf10 Add basic setup for German translations. PR #3522 by @0x4Dark . \ud83c\udf10 Add Portuguese translation for docs/tutorial/security/index.md . PR #3507 by @oandersonmagalhaes . \ud83c\udf10 Add Portuguese translation for docs/deployment/index.md . PR #3337 by @lsglucas .","title":"Translations"},{"location":"release-notes/#internal_16","text":"\ud83d\udd27 Configure strict pytest options and update/refactor tests. Upgrade pytest to >=6.2.4,<7.0.0 and pytest-cov to >=2.12.0,<3.0.0 . Initial PR #2790 by @graingert . \u2b06\ufe0f Upgrade python-jose dependency to >=3.3.0,<4.0.0 for tests. PR #3468 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0660","text":"","title":"0.66.0"},{"location":"release-notes/#features_11","text":"\u2728 Allow setting the response_class to RedirectResponse or FileResponse and returning the URL from the function. New and updated docs are in the tutorial section Custom Response - HTML, Stream, File, others , in RedirectResponse and in FileResponse . PR #3457 by @tiangolo .","title":"Features"},{"location":"release-notes/#fixes_3","text":"\ud83d\udc1b Fix include/exclude for dicts in jsonable_encoder . PR #2016 by @Rubikoid . \ud83d\udc1b Support custom OpenAPI / JSON Schema fields in the generated output OpenAPI. PR #1429 by @jmagnusson .","title":"Fixes"},{"location":"release-notes/#translations_12","text":"\ud83c\udf10 Add Spanish translation for tutorial/query-params.md . PR #2243 by @mariacamilagl . \ud83c\udf10 Add Spanish translation for advanced/response-directly.md . PR #1253 by @jfunez . \ud83c\udf10 Add Spanish translation for advanced/additional-status-codes.md . PR #1252 by @jfunez . \ud83c\udf10 Add Spanish translation for advanced/path-operation-advanced-configuration.md . PR #1251 by @jfunez .","title":"Translations"},{"location":"release-notes/#0653","text":"","title":"0.65.3"},{"location":"release-notes/#fixes_4","text":"\u267b Assume request bodies contain JSON when no Content-Type header is provided. This fixes a breaking change introduced by 0.65.2 with PR #2118 . It should allow upgrading FastAPI applications with clients that send JSON data without a Content-Type header. And there's still protection against CSRFs. PR #3456 by @tiangolo .","title":"Fixes"},{"location":"release-notes/#translations_13","text":"\ud83c\udf10 Initialize Indonesian translations. PR #3014 by @pace-noge . \ud83c\udf10 Add Spanish translation of Tutorial - Path Parameters. PR #2219 by @mariacamilagl . \ud83c\udf10 Add Spanish translation of Tutorial - First Steps. PR #2208 by @mariacamilagl . \ud83c\udf10 Portuguese translation of Tutorial - Body - Fields. PR #3420 by @ComicShrimp . \ud83c\udf10 Add Chinese translation for Tutorial - Request - Forms - and - Files. PR #3249 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Handling - Errors. PR #3299 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Form - Data. PR #3248 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Body - Updates. PR #3237 by @jaystone776 . \ud83c\udf10 Add Chinese translation for FastAPI People. PR #3112 by @hareru . \ud83c\udf10 Add French translation for Project Generation. PR #3197 by @Smlep . \ud83c\udf10 Add French translation for Python Types Intro. PR #3185 by @Smlep . \ud83c\udf10 Add French translation for External Links. PR #3103 by @Smlep . \ud83c\udf10 Add French translation for Alternatives, Inspiration and Comparisons. PR #3020 by @rjNemo . \ud83c\udf10 Fix Chinese translation code snippet mismatch in Tutorial - Python Types Intro. PR #2573 by @BoYanZh . \ud83c\udf10 Add Portuguese translation for Development Contributing. PR #1364 by @Serrones . \ud83c\udf10 Add Chinese translation for Tutorial - Request - Files. PR #3244 by @jaystone776 .","title":"Translations"},{"location":"release-notes/#internal_17","text":"\ud83d\udc65 Update FastAPI People. PR #3450 by @github-actions[bot] . \ud83d\udc65 Update FastAPI People. PR #3319 by @github-actions[bot] . \u2b06 Upgrade docs development dependency on typer-cli to >=0.0.12 to fix conflicts. PR #3429 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0652","text":"","title":"0.65.2"},{"location":"release-notes/#security-fixes","text":"\ud83d\udd12 Check Content-Type request header before assuming JSON. Initial PR #2118 by @patrickkwang . This change fixes a CSRF security vulnerability when using cookies for authentication in path operations with JSON payloads sent by browsers. In versions lower than 0.65.2 , FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json ). So, a request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. But requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests . So, the browser would execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. See CVE-2021-32677 for more details. Thanks to Dima Boger for the security report! \ud83d\ude47\ud83d\udd12","title":"Security fixes"},{"location":"release-notes/#internal_18","text":"\ud83d\udd27 Update sponsors badge, course bundle. PR #3340 by @tiangolo . \ud83d\udd27 Add new gold sponsor Jina \ud83c\udf89. PR #3291 by @tiangolo . \ud83d\udd27 Add new banner sponsor badge for FastAPI courses bundle. PR #3288 by @tiangolo . \ud83d\udc77 Upgrade Issue Manager GitHub Action. PR #3236 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0651","text":"","title":"0.65.1"},{"location":"release-notes/#security-fixes_1","text":"\ud83d\udccc Upgrade pydantic pin, to handle security vulnerability CVE-2021-29510 . PR #3213 by @tiangolo .","title":"Security fixes"},{"location":"release-notes/#0650","text":"","title":"0.65.0"},{"location":"release-notes/#breaking-changes-upgrade_2","text":"\u2b06\ufe0f Upgrade Starlette to 0.14.2 , including internal UJSONResponse migrated from Starlette. This includes several bug fixes and features from Starlette. PR #2335 by @hanneskuettner .","title":"Breaking Changes - Upgrade"},{"location":"release-notes/#translations_14","text":"\ud83c\udf10 Initialize new language Polish for translations. PR #3170 by @neternefer .","title":"Translations"},{"location":"release-notes/#internal_19","text":"\ud83d\udc77 Add GitHub Action cache to speed up CI installs. PR #3204 by @tiangolo . \u2b06\ufe0f Upgrade setup-python GitHub Action to v2. PR #3203 by @tiangolo . \ud83d\udc1b Fix docs script to generate a new translation language with overrides boilerplate. PR #3202 by @tiangolo . \u2728 Add new Deta banner badge with new sponsorship tier \ud83d\ude47. PR #3194 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #3189 by @github-actions[bot] . \ud83d\udd0a Update FastAPI People to allow better debugging. PR #3188 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0640","text":"","title":"0.64.0"},{"location":"release-notes/#features_12","text":"\u2728 Add support for adding multiple examples in request bodies and path, query, cookie, and header params. New docs: Declare Request Example Data . Initial PR #1267 by @austinorr .","title":"Features"},{"location":"release-notes/#fixes_5","text":"\ud83d\udccc Pin SQLAlchemy range for tests, as it doesn't use SemVer. PR #3001 by @tiangolo . \ud83c\udfa8 Add newly required type annotations for mypy. PR #2882 by @tiangolo . \ud83c\udfa8 Remove internal \"type: ignore\", now unnecessary. PR #2424 by @AsakuraMizu .","title":"Fixes"},{"location":"release-notes/#docs_9","text":"\ud83d\udcdd Add link to article in Russian \"FastAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c\". PR #2564 by @trkohler . \ud83d\udcdd Add external link to blog post \"Authenticate Your FastAPI App with Auth0\". PR #2172 by @dompatmore . \ud83d\udcdd Fix broken link to article: Machine learning model serving in Python using FastAPI and Streamlit. PR #2557 by @davidefiocco . \ud83d\udcdd Add FastAPI Medium Article: Deploy a dockerized FastAPI application to AWS. PR #2515 by @vjanz . \u270f Fix typo in Tutorial - Handling Errors. PR #2486 by @johnthagen . \u270f Fix typo in Security OAuth2 scopes. PR #2407 by @jugmac00 . \u270f Fix typo/clarify docs for SQL (Relational) Databases. PR #2393 by @kangni . \ud83d\udcdd Add external link to \"FastAPI for Flask Users\". PR #2280 by @amitness .","title":"Docs"},{"location":"release-notes/#translations_15","text":"\ud83c\udf10 Fix Chinese translation of Tutorial - Query Parameters, remove obsolete content. PR #3051 by @louis70109 . \ud83c\udf10 Add French translation for Tutorial - Background Tasks. PR #3098 by @Smlep . \ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md. PR #3159 by @SueNaEunYang . \ud83c\udf10 Add Korean translation for Tutorial - Query Parameters. PR #2390 by @hard-coders . \ud83c\udf10 Add French translation for FastAPI People. PR #2232 by @JulianMaurin . \ud83c\udf10 Add Korean translation for Tutorial - Path Parameters. PR #2355 by @hard-coders . \ud83c\udf10 Add French translation for Features. PR #2157 by @Jefidev . \ud83d\udc65 Update FastAPI People. PR #3031 by @github-actions[bot] . \ud83c\udf10 Add Chinese translation for Tutorial - Debugging. PR #2737 by @blt232018 . \ud83c\udf10 Add Chinese translation for Tutorial - Security - OAuth2 with Password (and hashing), Bearer with JWT tokens. PR #2642 by @waynerv . \ud83c\udf10 Add Korean translation for Tutorial - Header Parameters. PR #2589 by @mode9 . \ud83c\udf10 Add Chinese translation for Tutorial - Metadata and Docs URLs. PR #2559 by @blt232018 . \ud83c\udf10 Add Korean translation for Tutorial - First Steps. PR #2323 by @hard-coders . \ud83c\udf10 Add Chinese translation for Tutorial - CORS (Cross-Origin Resource Sharing). PR #2540 by @blt232018 . \ud83c\udf10 Add Chinese translation for Tutorial - Middleware. PR #2334 by @lpdswing . \ud83c\udf10 Add Korean translation for Tutorial - Intro. PR #2317 by @hard-coders . \ud83c\udf10 Add Chinese translation for Tutorial - Bigger Applications - Multiple Files. PR #2453 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Security Intro. PR #2443 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Header Parameters. PR #2412 by @maoyibo . \ud83c\udf10 Add Chinese translation for Tutorial - Extra Data Types. PR #2410 by @maoyibo . \ud83c\udf10 Add Japanese translation for Deployment - Docker. PR #2312 by @tokusumi . \ud83c\udf10 Add Japanese translation for Deployment - Versions. PR #2310 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Cookie Parameters. PR #2261 by @alicrazy1947 . \ud83c\udf10 Add Japanese translation for Tutorial - Static files. PR #2260 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Testing. PR #2259 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Debugging. PR #2256 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Middleware. PR #2255 by @tokusumi . \ud83c\udf10 Add Japanese translation for Concurrency and async / await. PR #2058 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Simple OAuth2 with Password and Bearer. PR #2514 by @waynerv . \ud83c\udf10 Add Japanese translation for Deployment - Deta. PR #2314 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Get Current User. PR #2474 by @waynerv . \ud83c\udf10 Add Japanese translation for Deployment - Manually. PR #2313 by @tokusumi . \ud83c\udf10 Add Japanese translation for Deployment - Intro. PR #2309 by @tokusumi . \ud83c\udf10 Add Japanese translation for FastAPI People. PR #2254 by @tokusumi . \ud83c\udf10 Add Japanese translation for Advanced - Path Operation Advanced Configuration. PR #2124 by @Attsun1031 . \ud83c\udf10 Add Japanese translation for External Links. PR #2070 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Body - Updates. PR #1956 by @SwftAlpc . \ud83c\udf10 Add Japanese translation for Tutorial - Form Data. PR #1943 by @SwftAlpc . \ud83c\udf10 Add Japanese translation for Tutorial - Cookie Parameters. PR #1933 by @SwftAlpc .","title":"Translations"},{"location":"release-notes/#internal_20","text":"\ud83d\udd27 Update top banner, point to newsletter. PR #3003 by @tiangolo . \ud83d\udd27 Disable sponsor WeTransfer. PR #3002 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2880 by @github-actions[bot] . \ud83d\udc65 Update FastAPI People. PR #2739 by @github-actions[bot] . \ud83d\udd27 Add new Gold Sponsor Talk Python \ud83c\udf89. PR #2673 by @tiangolo . \ud83d\udd27 Add new Gold Sponsor vim.so \ud83c\udf89. PR #2669 by @tiangolo . \ud83d\udd27 Add FastAPI user survey banner. PR #2623 by @tiangolo . \ud83d\udd27 Add new Bronze Sponsor(s) \ud83e\udd49\ud83c\udf89. PR #2622 by @tiangolo . \ud83d\udcdd Update social links: add Discord, fix GitHub. PR #2621 by @tiangolo . \ud83d\udd27 Update FastAPI People GitHub Sponsors order. PR #2620 by @tiangolo . \ud83d\udd27 Update InvestSuite sponsor data. PR #2608 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2590 by @github-actions[bot] .","title":"Internal"},{"location":"release-notes/#0630","text":"","title":"0.63.0"},{"location":"release-notes/#features_13","text":"\u2728 Improve type annotations, add support for mypy --strict, internally and for external packages. PR #2547 by @tiangolo .","title":"Features"},{"location":"release-notes/#breaking-changes_1","text":"\u2b06\ufe0f Upgrade Uvicorn when installing fastapi[all] to the latest version including uvloop , the new range is uvicorn[standard] >=0.12.0,<0.14.0 . PR #2548 by @tiangolo .","title":"Breaking changes"},{"location":"release-notes/#fixes_6","text":"\ud83d\udc1b PR #2547 (read above) also fixes some false-positive mypy errors with callbacks parameters and when using the OAuth2 class.","title":"Fixes"},{"location":"release-notes/#docs_10","text":"\ud83d\udcdd Update Uvicorn installation instructions to use uvicorn[standard] (includes uvloop). PR #2543 by @tiangolo . \ud83d\udcdd Update title for Deta tutorial. PR #2466 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2454 by @github-actions[bot] .","title":"Docs"},{"location":"release-notes/#translations_16","text":"\ud83c\udf10 Add docs lang selector widget. PR #2542 by @tiangolo . \ud83c\udf10 Add Chinese translation for Tutorial - Response Status Code. PR #2442 by @waynerv . \ud83c\udf10 Start translation of the documentation for the Albanian language. PR #2516 by @vjanz . \ud83c\udf10 Add Chinese translation for Tutorial - Extra Models. PR #2416 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Response Model. PR #2414 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Schema Extra Example. PR #2411 by @maoyibo . \ud83c\udf10 Add Korean translation for Index. PR #2192 by @hard-coders . \ud83c\udf10 Add Japanese translation for Advanced User Guide - Additional Status Codes. PR #2145 by @Attsun1031 .","title":"Translations"},{"location":"release-notes/#internal_21","text":"\ud83d\udc1b Fix docs overrides directory for translations. PR #2541 by @tiangolo . \u2796 Remove Typer as a docs building dependency (covered by typer-cli) to fix pip resolver conflicts. PR #2539 by @tiangolo . \u2728 Add newsletter: FastAPI and friends. PR #2509 by @tiangolo . \u2728 Add new Gold Sponsor: InvestSuite \ud83c\udf89. PR #2508 by @tiangolo . \ud83d\udd27 Add issue template configs. PR #2476 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0620","text":"","title":"0.62.0"},{"location":"release-notes/#features_14","text":"\u2728 Add support for shared/top-level parameters (dependencies, tags, etc). PR #2434 by @tiangolo . Up to now, for several options, the only way to apply them to a group of path operations was in include_router . That works well, but the call to app.include_router() or router.include_router() is normally done in another file. That means that, for example, to apply authentication to all the path operations in a router it would end up being done in a different file, instead of keeping related logic together. Setting options in include_router still makes sense in some cases, for example, to override or increase configurations from a third party router included in an app. But in a router that is part of a bigger application, it would probably make more sense to add those settings when creating the APIRouter . In FastAPI This allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and include_router . dependencies : to include \u2728 top-level dependencies \u2728 that apply to the whole application. E.g. to add global authentication. callbacks : OpenAPI callbacks that apply to all the path operations . deprecated : to mark all the path operations as deprecated. \ud83e\udd37 include_in_schema : to allow excluding all the path operations from the OpenAPI schema. responses : OpenAPI responses that apply to all the path operations . For example: from fastapi import FastAPI , Depends async def some_dependency (): return app = FastAPI ( dependencies = [ Depends ( some_dependency )]) In APIRouter This allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and include_router . For example, it's not needed to set it explicitly when creating callbacks . dependencies : to include \u2728 router-level dependencies \u2728 that apply to all the path operations in a router. Up to now, this was only possible with include_router . callbacks : OpenAPI callbacks that apply to all the path operations in this router. deprecated : to mark all the path operations in a router as deprecated. include_in_schema : to allow excluding all the path operations in a router from the OpenAPI schema. responses : OpenAPI responses that apply to all the path operations in a router. prefix : to set the path prefix for a router. Up to now, this was only possible when calling include_router . tags : OpenAPI tags to apply to all the path operations in this router. For example: from fastapi import APIRouter , Depends async def some_dependency (): return router = APIRouter ( prefix = \"/users\" , dependencies = [ Depends ( some_dependency )]) In include_router Most of these settings are now supported in APIRouter , which normally lives closer to the related code, so it is recommended to use APIRouter when possible. But include_router is still useful to, for example, adding options (like dependencies , prefix , and tags ) when including a third party router, or a generic router that is shared between several projects. This PR allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and FastAPI . deprecated : to mark all the path operations in a router as deprecated in OpenAPI. include_in_schema : to allow disabling all the path operations from showing in the OpenAPI schema. callbacks : OpenAPI callbacks that apply to all the path operations in this router. Note: all the previous parameters are still there, so it's still possible to declare dependencies in include_router .","title":"Features"},{"location":"release-notes/#breaking-changes_2","text":"PR #2434 includes several improvements that shouldn't affect normal use cases, but could affect in advanced scenarios: If you are testing the generated OpenAPI (you shouldn't, FastAPI already tests it extensively for you): the order for tags in include_router and path operations was updated for consistency, but it's a simple order change. If you have advanced custom logic to access each route's route.response_class , or the router.default_response_class , or the app.default_response_class : the default value for response_class in APIRoute and for default_response_class in APIRouter and FastAPI is now a DefaultPlaceholder used internally to handle and solve default values and overrides. The actual response class inside the DefaultPlaceholder is available at route.response_class.value .","title":"Breaking Changes"},{"location":"release-notes/#docs_11","text":"PR #2434 (above) includes new or updated docs: Advanced User Guide - OpenAPI Callbacks . Tutorial - Bigger Applications . Tutorial - Dependencies - Dependencies in path operation decorators . Tutorial - Dependencies - Global Dependencies . \ud83d\udcdd Add FastAPI monitoring blog post to External Links. PR #2324 by @louisguitton . \u270f\ufe0f Fix typo in Deta tutorial. PR #2320 by @tiangolo . \u2728 Add Discord chat. PR #2322 by @tiangolo . \ud83d\udcdd Fix image links for sponsors. PR #2304 by @tiangolo .","title":"Docs"},{"location":"release-notes/#translations_17","text":"\ud83c\udf10 Add Japanese translation for Advanced - Custom Response. PR #2193 by @Attsun1031 . \ud83c\udf10 Add Chinese translation for Benchmarks. PR #2119 by @spaceack . \ud83c\udf10 Add Chinese translation for Tutorial - Body - Nested Models. PR #1609 by @waynerv . \ud83c\udf10 Add Chinese translation for Advanced - Custom Response. PR #1459 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Return a Response Directly. PR #1452 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Additional Status Codes. PR #1451 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Path Operation Advanced Configuration. PR #1447 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced User Guide - Intro. PR #1445 by @RunningIkkyu .","title":"Translations"},{"location":"release-notes/#internal_22","text":"\ud83d\udd27 Update TestDriven link to course in sponsors section. PR #2435 by @tiangolo . \ud83c\udf71 Update sponsor logos. PR #2418 by @tiangolo . \ud83d\udc9a Fix disabling install of Material for MkDocs Insiders in forks, strike 1 \u26be. PR #2340 by @tiangolo . \ud83d\udc1b Fix disabling Material for MkDocs Insiders install in forks. PR #2339 by @tiangolo . \u2728 Add silver sponsor WeTransfer. PR #2338 by @tiangolo . \u2728 Set up and enable Material for MkDocs Insiders for the docs. PR #2325 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0612","text":"","title":"0.61.2"},{"location":"release-notes/#fixes_7","text":"\ud83d\udccc Relax Swagger UI version pin. PR #2089 by @jmriebold . \ud83d\udc1b Fix bug overriding custom HTTPException and RequestValidationError from exception_handlers. PR #1924 by @uriyyo . \u270f\ufe0f Fix typo on dependencies utils and cleanup unused variable. PR #1912 by @Kludex .","title":"Fixes"},{"location":"release-notes/#docs_12","text":"\u270f\ufe0f Fix typo in Tutorial - Path Parameters. PR #2231 by @mariacamilagl . \u270f Fix a stylistic error in docs. PR #2206 by @ddobrinskiy . \u270f Fix capitalizaiton typo in docs. PR #2204 by @imba-tjd . \u270f Fix typo in docs. PR #2179 by @ammarasmro . \ud83d\udcdd Update/fix links in docs to use HTTPS. PR #2165 by @imba-tjd . \u270f Fix typos and add rewording in docs. PR #2159 by @nukopy . \ud83d\udcdd Fix code consistency in examples for Tutorial - User Guide - Path Parameters. PR #2158 by @nukopy . \ud83d\udcdd Fix renamed parameter content_type typo. PR #2135 by @TeoZosa . \u270f Fix minor typos in docs. PR #2122 by @TeoZosa . \u270f Fix typos in docs and source examples. PR #2102 by @AdrianDeAnda . \u270f Fix incorrect Celery URLs in docs. PR #2100 by @CircleOnCircles . \ud83d\udcdd Simplify intro to Python Types, all currently supported Python versions include type hints \ud83c\udf89. PR #2085 by @ninjaaron . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 3. PR #2054 by @hitrust . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 2. PR #2053 by @hitrust . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models. PR #2052 by @hitrust . \u270f Fix typo in Benchmarks. PR #1995 by @AlejoAsd . \ud83d\udcdd Add note in CORS tutorial about allow_origins with [\"*\"] and allow_credentials. PR #1895 by @dsmurrell . \ud83d\udcdd Add deployment to Deta, the first gold sponsor \ud83c\udf89. PR #2303 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2282 by @github-actions[bot] . \u270f\ufe0f Fix uppercase in Tutorial - Query parameters. PR #2245 by @mariacamilagl . \ud83d\udcdd Add articles to External Links. PR #2247 by @tiangolo . \u270f Fix typo in Spanish tutorial index. PR #2020 by @aviloncho .","title":"Docs"},{"location":"release-notes/#translations_18","text":"\ud83c\udf10 Add Japanese translation for Advanced Tutorial - Response Directly. PR #2191 by @Attsun1031 . \ud83d\udcdd Add Japanese translation for Tutorial - Security - First Steps. PR #2153 by @komtaki . \ud83c\udf10 Add Japanese translation for Tutorial - Query Parameters and String Validations. PR #1901 by @SwftAlpc . \ud83c\udf10 Add Portuguese translation for External Links. PR #1443 by @Serrones . \ud83c\udf10 Add Japanese translation for Tutorial - CORS. PR #2125 by @tokusumi . \ud83c\udf10 Add Japanese translation for Contributing. PR #2067 by @komtaki . \ud83c\udf10 Add Japanese translation for Project Generation. PR #2050 by @tokusumi . \ud83c\udf10 Add Japanese translation for Alternatives. PR #2043 by @Attsun1031 . \ud83c\udf10 Add Japanese translation for History Design and Future. PR #2002 by @komtaki . \ud83c\udf10 Add Japanese translation for Benchmarks. PR #1992 by @komtaki . \ud83c\udf10 Add Japanese translation for Tutorial - Header Parameters. PR #1935 by @SwftAlpc . \ud83c\udf10 Add Portuguese translation for Tutorial - First Steps. PR #1861 by @jessicapaz . \ud83c\udf10 Add Portuguese translation for Python Types. PR #1796 by @izaguerreiro . \ud83c\udf10 Add Japanese translation for Help FastAPI. PR #1692 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Body. PR #1683 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Query Params. PR #1674 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/path-params.md. PR #1671 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/first-steps.md. PR #1658 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/index.md. PR #1656 by @tokusumi . \ud83c\udf10 Add translation to Portuguese for Project Generation. PR #1602 by @Serrones . \ud83c\udf10 Add Japanese translation for Features. PR #1625 by @tokusumi . \ud83c\udf10 Initialize new language Korean for translations. PR #2018 by @hard-coders . \ud83c\udf10 Add Portuguese translation of Deployment. PR #1374 by @Serrones .","title":"Translations"},{"location":"release-notes/#internal_23","text":"\ud83d\udd25 Cleanup after upgrade for Docs Previews GitHub Action. PR #2248 by @tiangolo . \ud83d\udc1b Fix CI docs preview, unzip docs. PR #2246 by @tiangolo . \u2728 Add instant docs deploy previews for PRs from forks. PR #2244 by @tiangolo . \u26a1\ufe0f Build docs for languages in parallel in subprocesses to speed up CI. PR #2242 by @tiangolo . \ud83d\udc1b Fix docs order generation for partial translations. PR #2238 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2202 by @github-actions[bot] . \u267b\ufe0f Update FastAPI People GitHub Action to send the PR as github-actions. PR #2201 by @tiangolo . \ud83d\udd27 Update FastAPI People GitHub Action config, run monthly. PR #2199 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action Docker dependency, strike 1 \u26be. PR #2198 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action Docker dependencies. PR #2197 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action when there's nothing to change. PR #2196 by @tiangolo . \ud83d\udc65 Add new section FastAPI People. PR #2195 by @tiangolo . \u2b06\ufe0f Upgrade GitHub Action Latest Changes. PR #2190 by @tiangolo . \u2b06\ufe0f Upgrade GitHub Action Label Approved. PR #2189 by @tiangolo . \ud83d\udd27 Update GitHub Action Label Approved, run at 12:00. PR #2185 by @tiangolo . \ud83d\udc77 Upgrade GitHub Action Latest Changes. PR #2184 by @tiangolo . \ud83d\udc77 Set GitHub Action Label Approved to run daily, not every minute. PR #2163 by @tiangolo . \ud83d\udd25 Remove pr-approvals GitHub Action as it's not compatible with forks. Use the new one. PR #2162 by @tiangolo . \ud83d\udc77 Add GitHub Action Latest Changes. PR #2160 . \ud83d\udc77 Add GitHub Action Label Approved. PR #2161 .","title":"Internal"},{"location":"release-notes/#0611","text":"","title":"0.61.1"},{"location":"release-notes/#fixes_8","text":"Fix issues using jsonable_encoder with SQLAlchemy models directly. PR #1987 .","title":"Fixes"},{"location":"release-notes/#docs_13","text":"Fix typo in NoSQL docs. PR #1980 by @facundojmaero .","title":"Docs"},{"location":"release-notes/#translations_19","text":"Add translation for main page to Japanese PR #1571 by @ryuckel . Initialize French translations. PR #1975 by @JulianMaurin-BM . Initialize Turkish translations. PR #1905 by @ycd .","title":"Translations"},{"location":"release-notes/#internal_24","text":"Improve docs maintainability by updating hl_lines syntax to use ranges. PR #1863 by @la-mar .","title":"Internal"},{"location":"release-notes/#0610","text":"","title":"0.61.0"},{"location":"release-notes/#features_15","text":"Add support for injecting HTTPConnection (as Request and WebSocket ). Useful for sharing app state in dependencies. PR #1827 by @nsidnev . Export WebSocketDisconnect and add example handling WebSocket disconnections to docs. PR #1822 by @rkbeatss .","title":"Features"},{"location":"release-notes/#breaking-changes_3","text":"Require Pydantic > 1.0.0 . Remove support for deprecated Pydantic 0.32.2 . This improves maintainability and allows new features. In FastAPI and APIRouter : Remove path operation decorators related/deprecated parameter response_model_skip_defaults (use response_model_exclude_unset instead). Change path operation decorators parameter default for response_model_exclude from set() to None (as is in Pydantic). In encoders.jsonable_encoder : Remove deprecated skip_defaults , use instead exclude_unset . Set default of exclude from set() to None (as is in Pydantic). PR #1862 . In encoders.jsonable_encoder remove parameter sqlalchemy_safe . It was an early hack to allow returning SQLAlchemy models, but it was never documented, and the recommended way is using Pydantic's orm_mode as described in the tutorial: SQL (Relational) Databases . PR #1864 .","title":"Breaking Changes"},{"location":"release-notes/#docs_14","text":"Add link to the course by TestDriven.io: Test-Driven Development with FastAPI and Docker . PR #1860 . Fix empty log message in docs example about handling errors. PR #1815 by @manlix . Reword text to reduce ambiguity while not being gender-specific. PR #1824 by @Mause .","title":"Docs"},{"location":"release-notes/#internal_25","text":"Add Flake8 linting. Original PR #1774 by @MashhadiNima . Disable Gitter bot, as it's currently broken, and Gitter's response doesn't show the problem. PR #1853 .","title":"Internal"},{"location":"release-notes/#0602","text":"Fix typo in docs for query parameters. PR #1832 by @ycd . Add docs about Async Tests . PR #1619 by @empicano . Raise an exception when using form data ( Form , File ) without having python-multipart installed. Up to now the application would run, and raise an exception only when receiving a request with form data, the new behavior, raising early, will prevent from deploying applications with broken dependencies. It also detects if the correct package python-multipart is installed instead of the incorrect multipart (both importable as multipart ). PR #1851 based on original PR #1627 by @chrisngyn , @YKo20010 , @kx-chen . Re-enable Gitter releases bot. PR #1831 . Add link to async SQL databases tutorial from main SQL tutorial. PR #1813 by @short2strings . Fix typo in tutorial about behind a proxy. PR #1807 by @toidi . Fix typo in Portuguese docs. PR #1795 by @izaguerreiro . Add translations setup for Ukrainian. PR #1830 . Add external link Build And Host Fast Data Science Applications Using FastAPI . PR #1786 by @Kludex . Fix encoding of Pydantic models that inherit from others models with custom json_encoders . PR #1769 by @henrybetts . Simplify and improve jsonable_encoder . PR #1754 by @MashhadiNima . Simplify internal code syntax in several points. PR #1753 by @uriyyo . Improve internal typing, declare Optional parameters. PR #1731 by @MashhadiNima . Add external link Deploy FastAPI on Azure App Service to docs. PR #1726 by @windson . Add link to Starlette docs about WebSocket testing. PR #1717 by @hellocoldworld . Refactor generating dependant, merge for loops. PR #1714 by @Bloodielie . Update example for templates with Jinja to include HTML media type. PR #1690 by @frafra . Fix typos in docs for security. PR #1678 by @nilslindemann . Fix typos in docs for dependencies. PR #1675 by @nilslindemann . Fix type annotation for **extra parameters in FastAPI . PR #1659 by @bharel . Bump MkDocs Material to fix docs in browsers with dark mode. PR #1789 by @adriencaccia . Remove docs preview comment from each commit. PR #1826 . Update GitHub context extraction for Gitter notification bot. PR #1766 .","title":"0.60.2"},{"location":"release-notes/#0601","text":"Add debugging logs for GitHub actions to introspect GitHub hidden context. PR #1764 . Use OS preference theme for online docs. PR #1760 by @adriencaccia . Upgrade Starlette to version 0.13.6 to handle a vulnerability when using static files in Windows. PR #1759 by @jamesag26 . Pin Swagger UI temporarily, waiting for a fix for swagger-api/swagger-ui#6249 . PR #1763 . Update GitHub Actions, use commit from PR for docs preview, not commit from pre-merge. PR #1761 . Update GitHub Actions, refactor Gitter bot. PR #1746 .","title":"0.60.1"},{"location":"release-notes/#0600","text":"Add GitHub Action to watch for missing preview docs and trigger a preview deploy. PR #1740 . Add custom GitHub Action to get artifact with docs preview. PR #1739 . Add new GitHub Actions to preview docs from PRs. PR #1738 . Add XML test coverage to support GitHub Actions. PR #1737 . Update badges and remove Travis now that GitHub Actions is the main CI. PR #1736 . Add GitHub Actions for CI, move from Travis. PR #1735 . Add support for adding OpenAPI schema for GET requests with a body. PR #1626 by @victorphoenix3 .","title":"0.60.0"},{"location":"release-notes/#0590","text":"Fix typo in docstring for OAuth2 utils. PR #1621 by @tomarv2 . Update JWT docs to use Python-jose instead of PyJWT. Initial PR #1610 by @asheux . Fix/re-enable search bar in docs. PR #1703 . Auto-generate a \"server\" in OpenAPI servers when there's a root_path instead of prefixing all the paths : Add a new parameter for FastAPI classes: root_path_in_servers to disable the auto-generation of servers . New docs about root_path and servers in Additional Servers . Update OAuth2 examples to use a relative URL for tokenUrl=\"token\" to make sure those examples keep working as-is even when behind a reverse proxy. Initial PR #1596 by @rkbeatss . Fix typo/link in External Links. PR #1702 . Update handling of External Links to use a data file and allow translating the headers without becoming obsolete quickly when new links are added. PR #https://github.com/tiangolo/fastapi/pull/1701 . Add external link Machine learning model serving in Python using FastAPI and Streamlit to docs. PR #1669 by @davidefiocco . Add note in docs on order in Pydantic Unions. PR #1591 by @kbanc . Improve support for tests in editor. PR #1699 . Pin dependencies. PR #1697 . Update isort to version 5.x.x. PR #1670 by @asheux .","title":"0.59.0"},{"location":"release-notes/#0581","text":"Add link in docs to Pydantic data types. PR #1612 by @tayoogunbiyi . Fix link in warning logs for openapi_prefix . PR #1611 by @bavaria95 . Fix bad link in docs. PR #1603 by @molto0504 . Add Vim temporary files to .gitignore for contributors using Vim. PR #1590 by @asheux . Fix typo in docs for sub-applications. PR #1578 by @schlpbch . Use Optional in all the examples in the docs. Original PR #1574 by @chrisngyn , @kx-chen , @YKo20010 . Updated and merged PR #1644 . Update tests and handling of response_model_by_alias . PR #1642 . Add translation to Chinese for Body - Fields - \u8bf7\u6c42\u4f53 - \u5b57\u6bb5 . PR #1569 by @waynerv . Update Chinese translation of main page. PR #1564 by @waynerv . Add translation to Chinese for Body - Multiple Parameters - \u8bf7\u6c42\u4f53 - \u591a\u4e2a\u53c2\u6570 . PR #1532 by @waynerv . Add translation to Chinese for Path Parameters and Numeric Validations - \u8def\u5f84\u53c2\u6570\u548c\u6570\u503c\u6821\u9a8c . PR #1506 by @waynerv . Add GitHub action to auto-label approved PRs (mainly for translations). PR #1638 .","title":"0.58.1"},{"location":"release-notes/#0580","text":"Deep merge OpenAPI responses to preserve all the additional metadata. PR #1577 . Mention in docs that only main app events are run (not sub-apps). PR #1554 by @amacfie . Fix body validation error response, do not include body variable when it is not embedded. PR #1553 by @amacfie . Fix testing OAuth2 security scopes when using dependency overrides. PR #1549 by @amacfie . Fix Model for JSON Schema keyword not as a JSON Schema instead of a list. PR #1548 by @v-do . Add support for OpenAPI servers . PR #1547 by @mikaello .","title":"0.58.0"},{"location":"release-notes/#0570","text":"Remove broken link from \"External Links\". PR #1565 by @victorphoenix3 . Update/fix docs for WebSockets with dependencies . Original PR #1540 by @ChihSeanHsu . Add support for Python's http.HTTPStatus in status_code parameters. PR #1534 by @retnikt . When using Pydantic models with __root__ , use the internal value in jsonable_encoder . PR #1524 by @patrickkwang . Update docs for path parameters. PR #1521 by @yankeexe . Update docs for first steps, links and rewording. PR #1518 by @yankeexe . Enable showCommonExtensions in Swagger UI to show additional validations like maxLength , etc. PR #1466 by @TiewKH . Make OAuth2PasswordRequestFormStrict importable directly from fastapi.security . PR #1462 by @RichardHoekstra . Add docs about Default response class . PR #1455 by @TezRomacH . Add note in docs about additional parameters response_model_exclude_defaults and response_model_exclude_none in Response Model . PR #1427 by @wshayes . Add note about PyCharm Pydantic plugin to docs. PR #1420 by @koxudaxi . Update and clarify testing function name. PR #1395 by @chenl . Fix duplicated headers created by indirect dependencies that use the request directly. PR #1386 by @obataku from tests by @scottsmith2gmail . Upgrade Starlette version to 0.13.4 . PR #1361 by @rushton . Improve error handling and feedback for requests with invalid JSON. PR #1354 by @aviramha . Add support for declaring metadata for tags in OpenAPI. New docs at Tutorial - Metadata and Docs URLs - Metadata for tags . PR #1348 by @thomas-maschler . Add basic setup for Russian translations. PR #1566 . Remove obsolete Chinese articles after adding official community translations. PR #1510 by @waynerv . Add __repr__ for path operation function parameter helpers (like Query , Depends , etc) to simplify debugging. PR #1560 by @rkbeatss and @victorphoenix3 .","title":"0.57.0"},{"location":"release-notes/#0561","text":"Add link to advanced docs from tutorial. PR #1512 by @kx-chen . Remove internal unnecessary f-strings. PR #1526 by @kotamatsuoka . Add translation to Chinese for Query Parameters and String Validations - \u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c . PR #1500 by @waynerv . Add translation to Chinese for Request Body - \u8bf7\u6c42\u4f53 . PR #1492 by @waynerv . Add translation to Chinese for Help FastAPI - Get Help - \u5e2e\u52a9 FastAPI - \u83b7\u53d6\u5e2e\u52a9 . PR #1465 by @waynerv . Add translation to Chinese for Query Parameters - \u67e5\u8be2\u53c2\u6570 . PR #1454 by @waynerv . Add translation to Chinese for Contributing - \u5f00\u53d1 - \u8d21\u732e . PR #1460 by @waynerv . Add translation to Chinese for Path Parameters - \u8def\u5f84\u53c2\u6570 . PR #1453 by @waynerv . Add official Microsoft project generator for serving spaCy with FastAPI and Azure Cognitive Skills to Project Generators . PR #1390 by @kabirkhan . Update docs in Python Types Intro to include info about Optional . Original PR #1377 by @yaegassy . Fix support for callable class dependencies with yield . PR #1365 by @mrosales . Fix/remove incorrect error logging when a client sends invalid payloads. PR #1351 by @dbanty . Add translation to Chinese for First Steps - \u7b2c\u4e00\u6b65 . PR #1323 by @waynerv . Fix generating OpenAPI for apps using callbacks with routers including Pydantic models. PR #1322 by @nsidnev . Optimize internal regex performance in get_path_param_names() . PR #1243 by @heckad . Remove *, from functions in docs where it's not needed. PR #1239 by @pankaj-giri . Start translations for Italian. PR #1557 by @csr .","title":"0.56.1"},{"location":"release-notes/#0560","text":"Add support for ASGI root_path : Use root_path internally for mounted applications, so that OpenAPI and the docs UI works automatically without extra configurations and parameters. Add new root_path parameter for FastAPI applications to provide it in cases where it can be set with the command line (e.g. for Uvicorn and Hypercorn, with the parameter --root-path ). Deprecate openapi_prefix parameter in favor of the new root_path parameter. Add new/updated docs for Sub Applications - Mounts , without openapi_prefix (as it is now handled automatically). Add new/updated docs for Behind a Proxy , including how to setup a local testing proxy with Traefik and using root_path . Update docs for Extending OpenAPI with the new openapi_prefix parameter passed (internally generated from root_path ). Original PR #1199 by @iksteen . Update new issue templates and docs: Help FastAPI - Get Help . PR #1531 . Update GitHub action issue-manager. PR #1520 . Add new links: English articles : Real-time Notifications with Python and Postgres by Guillermo Cruz . Microservice in Python using FastAPI by Paurakh Sharma Humagain . Build simple API service with Python FastAPI \u2014 Part 1 by cuongld2 . FastAPI + Zeit.co = \ud83d\ude80 by Paul Sec . Build a web API from scratch with FastAPI - the workshop by Sebasti\u00e1n Ram\u00edrez (tiangolo) . Build a Secure Twilio Webhook with Python and FastAPI by Twilio . Using FastAPI with Django by Stavros Korokithakis . Introducing Dispatch by Netflix . Podcasts : Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (tiangolo) by Podcast. __init__ . Talks : PyConBY 2020: Serve ML models easily with FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . [VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PR #1467 . Add translation to Chinese for Python Types Intro - Python \u7c7b\u578b\u63d0\u793a\u7b80\u4ecb . PR #1197 by @waynerv .","title":"0.56.0"},{"location":"release-notes/#0551","text":"Fix handling of enums with their own schema in path parameters. To support samuelcolvin/pydantic#1432 in FastAPI. PR #1463 .","title":"0.55.1"},{"location":"release-notes/#0550","text":"Allow enums to allow them to have their own schemas in OpenAPI. To support samuelcolvin/pydantic#1432 in FastAPI. PR #1461 . Add links for funding through GitHub sponsors . PR #1425 . Update issue template for for questions. PR #1344 by @retnikt . Update warning about storing passwords in docs. PR #1336 by @skorokithakis . Fix typo. PR #1326 by @chenl . Add translation to Portuguese for Alternatives, Inspiration and Comparisons - Alternativas, Inspira\u00e7\u00e3o e Compara\u00e7\u00f5es . PR #1325 by @Serrones . Fix 2 typos in docs. PR #1324 by @waynerv . Update CORS docs, fix correct default of max_age=600 . PR #1301 by @derekbekoe . Add translation of main page to Portuguese . PR #1300 by @Serrones . Re-word and clarify docs for extra info in fields. PR #1299 by @chris-allnutt . Make sure the * in short features in the docs is consistent (after . ) in all languages. PR #1424 . Update order of execution for get_db in SQLAlchemy tutorial. PR #1293 by @bcb . Fix typos in Async docs. PR #1423 .","title":"0.55.0"},{"location":"release-notes/#0542","text":"Add translation to Spanish for Concurrency and async / await - Concurrencia y async / await . PR #1290 by @alvaropernas . Remove obsolete vote link. PR #1289 by @donhui . Allow disabling docs UIs by just disabling OpenAPI with openapi_url=None . New example in docs: Advanced: Conditional OpenAPI . PR #1421 . Add translation to Portuguese for Benchmarks - Compara\u00e7\u00f5es . PR #1274 by @Serrones . Add translation to Portuguese for Tutorial - User Guide - Intro - Tutorial - Guia de Usu\u00e1rio - Introdu\u00e7\u00e3o . PR #1259 by @marcosmmb . Allow using Unicode in MkDocs for translations. PR #1419 . Add translation to Spanish for Advanced User Guide - Intro - Gu\u00eda de Usuario Avanzada - Introducci\u00f3n . PR #1250 by @jfunez . Add translation to Portuguese for History, Design and Future - Hist\u00f3ria, Design e Futuro . PR #1249 by @marcosmmb . Add translation to Portuguese for Features - Recursos . PR #1248 by @marcosmmb . Add translation to Spanish for Tutorial - User Guide - Intro - Tutorial - Gu\u00eda de Usuario - Introducci\u00f3n . PR #1244 by @MartinEliasQ . Add translation to Chinese for Deployment - \u90e8\u7f72 . PR #1203 by @RunningIkkyu . Add translation to Chinese for Tutorial - User Guide - Intro - \u6559\u7a0b - \u7528\u6237\u6307\u5357 - \u7b80\u4ecb . PR #1202 by @waynerv . Add translation to Chinese for Features - \u7279\u6027 . PR #1192 by @Dustyposa . Add translation for main page to Chinese PR #1191 by @waynerv . Update docs for project generation. PR #1287 . Add Spanish translation for Introducci\u00f3n a los Tipos de Python (Python Types Intro) . PR #1237 by @mariacamilagl . Add Spanish translation for Caracter\u00edsticas (Features) . PR #1220 by @mariacamilagl .","title":"0.54.2"},{"location":"release-notes/#0541","text":"Update database test setup. PR #1226 . Improve test debugging by showing response text in failing tests. PR #1222 by @samuelcolvin .","title":"0.54.1"},{"location":"release-notes/#0540","text":"Fix grammatical mistakes in async docs. PR #1188 by @mickeypash . Add support for response_model_exclude_defaults and response_model_exclude_none : Deprecate the parameter include_none in jsonable_encoder and add the inverted exclude_none , to keep in sync with Pydantic. PR #1166 by @voegtlel . Add example about Testing a Database . Initial PR #1144 by @duganchen . Update docs for Development - Contributing: Translations including note about reviewing translation PRs. #1215 . Update log style in README.md for GitHub Markdown compatibility. PR #1200 by #geekgao . Add Python venv env to .gitignore . PR #1212 by @cassiobotaro . Start Portuguese translations. PR #1210 by @cassiobotaro . Update docs for Pydantic's Settings using a dependency with @lru_cache() . PR #1214 . Add first translation to Spanish FastAPI . PR #1201 by @mariacamilagl . Add docs about Settings and Environment Variables . Initial PR 1118 by @alexmitelman .","title":"0.54.0"},{"location":"release-notes/#0532","text":"Fix automatic embedding of body fields for dependencies and sub-dependencies. Original PR #1079 by @Toad2186 . Fix dependency overrides in WebSocket testing. PR #1122 by @amitlissack . Fix docs script to ensure languages are always sorted. PR #1189 . Start translations for Chinese. PR #1187 by @RunningIkkyu . Add docs for Schema Extra - Example . PR #1185 .","title":"0.53.2"},{"location":"release-notes/#0531","text":"Fix included example after translations refactor. PR #1182 . Add docs example for example in Field . Docs at Body - Fields: JSON Schema extras . PR #1106 by @JohnPaton . Fix using recursive models in response_model . PR #1164 by @voegtlel . Add docs for Pycharm Debugging . PR #1096 by @youngquan . Fix typo in docs. PR #1148 by @PLNech . Update Windows development environment instructions. PR #1179 .","title":"0.53.1"},{"location":"release-notes/#0530","text":"Update test coverage badge. PR #1175 . Add orjson to pip install fastapi[all] . PR #1161 by @michael0liver . Fix included example for GZipMiddleware . PR #1138 by @arimbr . Fix class name in docstring for OAuth2PasswordRequestFormStrict . PR #1126 by @adg-mh . Clarify function name in example in docs. PR #1121 by @tmsick . Add external link Apache Kafka producer and consumer with FastAPI and aiokafka to docs. PR #1112 by @iwpnd . Fix serialization when using by_alias or exclude_unset and returning data with Pydantic models. PR #1074 by @juhovh-aiven . Add Gitter chat to docs. PR #1061 by @aakashnand . Update and simplify translations docs. PR #1171 . Update development of FastAPI docs, set address to 127.0.0.1 to improve Windows support. PR #1169 by @mariacamilagl . Add support for docs translations. New docs: Development - Contributing: Docs: Translations . PR #1168 . Update terminal styles in docs and add note about Typer , the FastAPI of CLIs . PR #1139 .","title":"0.53.0"},{"location":"release-notes/#0520","text":"Add new high-performance JSON response class using orjson . New docs: Custom Response - HTML, Stream, File, others: ORJSONResponse . PR #1065 .","title":"0.52.0"},{"location":"release-notes/#0510","text":"Re-export utils from Starlette: This allows using things like from fastapi.responses import JSONResponse instead of from starlette.responses import JSONResponse . It's mainly syntax sugar, a convenience for developer experience. Now Request , Response , WebSocket , status can be imported directly from fastapi as in from fastapi import Response . This is because those are frequently used, to use the request directly, to set headers and cookies, to get status codes, etc. Documentation changes in many places, but new docs and noticeable improvements: Custom Response - HTML, Stream, File, others . Advanced Middleware . Including WSGI - Flask, Django, others . PR #1064 .","title":"0.51.0"},{"location":"release-notes/#0500","text":"Add link to Release Notes from docs about pinning versions for deployment. PR #1058 . Upgrade code to use the latest version of Starlette, including: Several bug fixes. Optional redirects of slashes, with or without ending in / . Events for routers, \"startup\" , and \"shutdown\" . PR #1057 . Add docs about pinning FastAPI versions for deployment: Deployment: FastAPI versions . PR #1056 .","title":"0.50.0"},{"location":"release-notes/#0492","text":"Fix links in release notes. PR #1052 by @sattosan . Fix typo in release notes. PR #1051 by @sattosan . Refactor/clarify serialize_response parameter name to avoid confusion. PR #1031 by @patrickmckenna . Refactor calling each a path operation's handler function in an isolated function, to simplify profiling. PR #1027 by @sm-Fifteen . Add missing dependencies for testing. PR #1026 by @sm-Fifteen . Fix accepting valid types for response models, including Python types like List[int] . PR #1017 by @patrickmckenna . Fix format in SQL tutorial. PR #1015 by @vegarsti .","title":"0.49.2"},{"location":"release-notes/#0491","text":"Fix path operation duplicated parameters when used in dependencies and the path operation function. PR #994 by @merowinger92 . Update Netlify previews deployment GitHub action as the fix is already merged and there's a new release. PR #1047 . Move mypy configurations to config file. PR #987 by @hukkinj1 . Temporary fix to Netlify previews not deployable from PRs from forks. PR #1046 by @mariacamilagl .","title":"0.49.1"},{"location":"release-notes/#0490","text":"Fix encoding of pathlib paths in jsonable_encoder . PR #978 by @patrickmckenna . Add articles to External Links : Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03 (Django, Flask, responder, FastAPI, japronto) and [FastAPI] Python\u88fd\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI\u306b\u5165\u9580\u3059\u308b . PR #974 by @tokusumi . Fix broken links in docs. PR #949 by @tsotnikov . Fix small typos. PR #941 by @NikitaKolesov . Update and clarify docs for dependencies with yield . PR #986 . Add Mermaid JS support for diagrams in docs. Add first diagrams to Dependencies: First Steps and Dependencies with yield and HTTPException . PR #985 . Update CI to run docs deployment in GitHub actions. PR #983 . Allow callable s in path operation functions , like functions modified with functools.partial . PR #977 .","title":"0.49.0"},{"location":"release-notes/#0480","text":"Run linters first in tests to error out faster. PR #948 . Log warning about email-validator only when used. PR #946 . Simplify Peewee docs with double dependency with yield . PR #947 . Add article External Links : Create and Deploy FastAPI app to Heroku . PR #942 by @windson . Update description of Sanic, as it is now ASGI too. PR #932 by @raphaelauv . Fix typo in main page. PR #920 by @mMarzeta . Fix parsing of possibly invalid bodies. PR #918 by @dmontagu . Fix typo #916 by @adursun . Allow Any type for enums in OpenAPI. PR #906 by @songzhi . Add article to External Links : How to continuously deploy a FastAPI to AWS Lambda with AWS SAM . PR #901 by @iwpnd . Add note about using Body parameters without Pydantic. PR #900 by @pawamoy . Fix Pydantic field clone logic. PR #899 by @deuce2367 . Fix link in middleware docs. PR #893 by @linchiwei123 . Rename default API title from \"Fast API\" to \"FastAPI\" for consistency. PR #890 .","title":"0.48.0"},{"location":"release-notes/#0471","text":"Fix model filtering in response_model , cloning sub-models. PR #889 . Fix FastAPI serialization of Pydantic models using ORM mode blocking the event loop. PR #888 .","title":"0.47.1"},{"location":"release-notes/#0470","text":"Refactor documentation to make a simpler and shorter Tutorial - User Guide and an additional Advanced User Guide with all the additional docs. PR #887 . Tweak external links, Markdown format, typos. PR #881 . Fix bug in tutorial handling HTTP Basic Auth username and password . PR #865 by @isaevpd . Fix handling form path operation parameters declared with pure classes like list , tuple , etc. PR #856 by @nsidnev . Add request body to RequestValidationError , new docs: Use the RequestValidationError body . Initial PR #853 by @aviramha . Update External Links with new links and dynamic GitHub projects with fastapi topic. PR #850 . Fix Peewee contextvars handling in docs: SQL (Relational) Databases with Peewee . PR #879 . Setup development environment with Python's Venv and Flit, instead of requiring the extra Pipenv duplicating dependencies. Updated docs: Development - Contributing . PR #877 . Update docs for HTTP Basic Auth to improve security against timing attacks. Initial PR #807 by @zwass .","title":"0.47.0"},{"location":"release-notes/#0460","text":"Fix typos and tweak configs. PR #837 . Add link to Chinese article in External Links . PR 810 by @wxq0309 . Implement OAuth2AuthorizationCodeBearer class. PR #797 by @kuwv . Update example upgrade in docs main page. PR #795 by @cdeil . Fix callback handling for sub-routers. PR #792 by @jekirl . Fix typos. PR #784 by @kkinder . Add 4 Japanese articles to External Links . PR #783 by @HymanZHAN . Add support for subtypes of main types in jsonable_encoder , e.g. asyncpg's UUIDs. PR #756 by @RmStorm . Fix usage of Pydantic's HttpUrl in docs. PR #832 by @Dustyposa . Fix Twitter links in docs. PR #813 by @justindujardin . Add docs for correctly using FastAPI with Peewee ORM . Including how to overwrite parts of Peewee to correctly handle async threads. PR #789 .","title":"0.46.0"},{"location":"release-notes/#0450","text":"Add support for OpenAPI Callbacks: New docs: OpenAPI Callbacks . Refactor generation of operationId s to be valid Python names (also valid variables in most languages). Add default_response_class parameter to APIRouter . Original PR #722 by @booooh . Refactor logging to use the same logger everywhere, update log strings and levels. PR #781 . Add article to External Links : \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c FastAPI? . PR #766 by @prostomarkeloff . Remove gender bias in docs for handling errors. PR #780 . Original idea in PR #761 by @classywhetten . Rename docs and references to body-schema to body-fields to keep in line with Pydantic. PR #746 by @prostomarkeloff .","title":"0.45.0"},{"location":"release-notes/#0441","text":"Add GitHub social preview images to git. PR #752 . Update PyPI \"trove classifiers\". PR #751 . Add full support for Python 3.8. Enable Python 3.8 in full in Travis. PR 749 . Update \"new issue\" templates. PR #749 . Fix serialization of errors for exotic Pydantic types. PR #748 by @dmontagu .","title":"0.44.1"},{"location":"release-notes/#0440","text":"Add GitHub action Issue Manager . PR #742 . Fix typos in docs. PR 734 by @bundabrg . Fix usage of custom_encoder in jsonable_encoder . PR #715 by @matrixise . Fix invalid XML example. PR 710 by @OcasoProtal . Fix typos and update wording in deployment docs. PR #700 by @marier-nico . Add note about dependencies in APIRouter docs. PR #698 by @marier-nico . Add support for async class methods as dependencies #681 by @frankie567 . Add FastAPI with Swagger UI cheatsheet to external links. PR #671 by @euri10 . Fix typo in HTTP protocol in CORS example. PR #647 by @forestmonster . Add support for Pydantic versions 1.0.0 and above, with temporary (deprecated) backwards compatibility for Pydantic 0.32.2 . PR #646 by @dmontagu .","title":"0.44.0"},{"location":"release-notes/#0430","text":"Update docs to reduce gender bias. PR #645 by @ticosax . Add docs about overriding the operationId for all the path operations based on their function name. PR #642 by @SKalt . Fix validators in models generating an incorrect key order. PR #637 by @jaddison . Generate correct OpenAPI docs for responses with no content. PR #621 by @brotskydotcom . Remove $ from Bash code blocks in docs for consistency. PR #613 by @nstapelbroek . Add docs for self-serving docs' (Swagger UI) static assets , e.g. to use the docs offline, or without Internet. Initial PR #557 by @svalouch . Fix black linting after upgrade. PR #682 by @frankie567 .","title":"0.43.0"},{"location":"release-notes/#0420","text":"Add dependencies with yield , a.k.a. exit steps, context managers, cleanup, teardown, ... This allows adding extra code after a dependency is done. It can be used, for example, to close database connections. Dependencies with yield can be normal or async , FastAPI will run normal dependencies in a threadpool. They can be combined with normal dependencies. It's possible to have arbitrary trees/levels of dependencies with yield and exit steps are handled in the correct order automatically. It works by default in Python 3.7 or above. For Python 3.6, it requires the extra backport dependencies: async-exit-stack async-generator New docs at Dependencies with yield . Updated database docs SQL (Relational) Databases: Main FastAPI app . PR #595 . Fix sitemap.xml in website. PR #598 by @samuelcolvin .","title":"0.42.0"},{"location":"release-notes/#0410","text":"Upgrade required Starlette to 0.12.9 , the new range is >=0.12.9,<=0.12.9 . Add State to FastAPI apps at app.state . PR #593 . Improve handling of custom classes for Request s and APIRoute s. This helps to more easily solve use cases like: Reading a body before and/or after a request (equivalent to a middleware). Run middleware-like code only for a subset of path operations . Process a request before passing it to a path operation function . E.g. decompressing, deserializing, etc. Processing a response after being generated by path operation functions but before returning it. E.g. adding custom headers, logging, adding extra metadata. New docs section: Custom Request and APIRoute class . PR #589 by @dmontagu . Fix preserving custom route class in routers when including other sub-routers. PR #538 by @dmontagu .","title":"0.41.0"},{"location":"release-notes/#0400","text":"Add notes to docs about installing python-multipart when using forms. PR #574 by @sliptonic . Generate OpenAPI schemas in alphabetical order. PR #554 by @dmontagu . Add support for truncating docstrings from path operation functions . New docs at Advanced description from docstring . PR #556 by @svalouch . Fix DOCTYPE in HTML files generated for Swagger UI and ReDoc. PR #537 by @Trim21 . Fix handling 4XX responses overriding default 422 validation error responses. PR #517 by @tsouvarev . Fix typo in documentation for Simple HTTP Basic Auth . PR #514 by @prostomarkeloff . Fix incorrect documentation example in first steps . PR #511 by @IgnatovFedor . Add support for Swagger UI initOauth settings with the parameter swagger_ui_init_oauth . PR #499 by @zamiramir .","title":"0.40.0"},{"location":"release-notes/#0390","text":"Allow path parameters to have default values (e.g. None ) and discard them instead of raising an error. This allows declaring a parameter like user_id: str = None that can be taken from a query parameter, but the same path operation can be included in a router with a path /users/{user_id} , in which case will be taken from the path and will be required. PR #464 by @jonathanunderwood . Add support for setting a default_response_class in the FastAPI instance or in include_router . Initial PR #467 by @toppk . Add support for type annotations using strings and from __future__ import annotations . PR #451 by @dmontagu .","title":"0.39.0"},{"location":"release-notes/#0381","text":"Fix incorrect Request class import. PR #493 by @kamalgill .","title":"0.38.1"},{"location":"release-notes/#0380","text":"Add recent articles to External Links and recent opinions. PR #490 . Upgrade support range for Starlette to include 0.12.8 . The new range is >=0.11.1,<=0.12.8\" . PR #477 by @dmontagu . Upgrade support to Pydantic version 0.32.2 and update internal code to use it (breaking change). PR #463 by @dmontagu .","title":"0.38.0"},{"location":"release-notes/#0370","text":"Add support for custom route classes for advanced use cases. PR #468 by @dmontagu . Allow disabling Google fonts in ReDoc. PR #481 by @b1-luettje . Fix security issue: when returning a sub-class of a response model and using skip_defaults it could leak information. PR #485 by @dmontagu . Enable tests for Python 3.8-dev. PR #465 by @Jamim . Add support and tests for Pydantic dataclasses in response_model . PR #454 by @dconathan . Fix typo in OAuth2 JWT tutorial. PR #447 by @pablogamboa . Use the media_type parameter in Body() params to set the media type in OpenAPI for requestBody . PR #439 by @divums . Add article Deploying a scikit-learn model with ONNX and FastAPI by https://www.linkedin.com/in/nico-axtmann . PR #438 by @naxty . Allow setting custom 422 (validation error) response/schema in OpenAPI. And use media type from response class instead of fixed application/json (the default). PR #437 by @divums . Fix using \"default\" extra response with status codes at the same time. PR #489 . Allow additional responses to use status code ranges (like 5XX and 4XX ) and \"default\" . PR #435 by @divums .","title":"0.37.0"},{"location":"release-notes/#0360","text":"Fix implementation for skip_defaults when returning a Pydantic model. PR #422 by @dmontagu . Fix OpenAPI generation when using the same dependency in multiple places for the same path operation . PR #417 by @dmontagu . Allow having empty paths in path operations used with include_router and a prefix . This allows having a router for /cats and all its path operations , while having one of them for /cats . Now it doesn't have to be only /cats/ (with a trailing slash). To use it, declare the path in the path operation as the empty string ( \"\" ). PR #415 by @vitalik . Fix mypy error after merging PR #415. PR #462 .","title":"0.36.0"},{"location":"release-notes/#0350","text":"Fix typo in routing assert . PR #419 by @pablogamboa . Fix typo in docs. PR #411 by @bronsen . Fix parsing a body type declared with Union . PR #400 by @koxudaxi .","title":"0.35.0"},{"location":"release-notes/#0340","text":"Upgrade Starlette supported range to include the latest 0.12.7 . The new range is 0.11.1,<=0.12.7 . PR #367 by @dedsm . Add test for OpenAPI schema with duplicate models from PR #333 by @dmontagu . PR #385 .","title":"0.34.0"},{"location":"release-notes/#0330","text":"Upgrade Pydantic version to 0.30.0 . PR #384 by @jekirl .","title":"0.33.0"},{"location":"release-notes/#0320","text":"Fix typo in docs for features. PR #380 by @MartinoMensio . Fix source code limit for example in Query Parameters . PR #366 by @Smashman . Update wording in docs about OAuth2 scopes . PR #371 by @cjw296 . Update docs for Enum s to inherit from str and improve Swagger UI rendering. PR #351 . Fix regression, add Swagger UI deep linking again. PR #350 . Add test for having path templates in prefix of .include_router . PR #349 . Add note to docs: Include the same router multiple times with different prefix . PR #348 . Fix OpenAPI/JSON Schema generation for two functions with the same name (in different modules) with the same composite bodies. Composite bodies' IDs are now based on path, not only on route name, as the auto-generated name uses the function names, that can be duplicated in different modules. The same new ID generation applies to response models. This also changes the generated title for those models. Only composite bodies and response models are affected because those are generated dynamically, they don't have a module (a Python file). This also adds the possibility of using .include_router() with the same APIRouter multiple times, with different prefixes, e.g. /api/v2 and /api/latest , and it will now work correctly. PR #347 .","title":"0.32.0"},{"location":"release-notes/#0310","text":"Upgrade Pydantic supported version to 0.29.0 . New supported version range is \"pydantic >=0.28,<=0.29.0\" . This adds support for Pydantic Generic Models , kudos to @dmontagu . PR #344 .","title":"0.31.0"},{"location":"release-notes/#0301","text":"Add section in docs about External Links and Articles . PR #341 . Remove Pipfile.lock from the repository as it is only used by FastAPI contributors (developers of FastAPI itself). See the PR for more details. PR #340 . Update section about Help FastAPI - Get Help . PR #339 . Refine internal type declarations to improve/remove Mypy errors in users' code. PR #338 . Update and clarify SQL tutorial with SQLAlchemy . PR #331 by @mariacamilagl . Add SQLite online viewers to the docs . PR #330 by @cyrilbois .","title":"0.30.1"},{"location":"release-notes/#0300","text":"Add support for Pydantic's ORM mode: Updated documentation about SQL with SQLAlchemy, using Pydantic models with ORM mode, SQLAlchemy models with relations, separation of files, simplification of code and other changes. New docs: SQL (Relational) Databases . The new support for ORM mode fixes issues/adds features related to ORMs with lazy-loading, hybrid properties, dynamic/getters (using @property decorators) and several other use cases. This applies to ORMs like SQLAlchemy, Peewee, Tortoise ORM, GINO ORM and virtually any other. If your path operations return an arbitrary object with attributes (e.g. my_item.name instead of my_item[\"name\"] ) AND you use a response_model , make sure to update the Pydantic models with orm_mode = True as described in the docs (link above). New documentation about receiving plain dict s as request bodies: Bodies of arbitrary dict s . New documentation about returning arbitrary dict s in responses: Response with arbitrary dict . Technical Details : When declaring a response_model it is used directly to generate the response content, from whatever was returned from the path operation function . Before this, the return content was first passed through jsonable_encoder to ensure it was a \"jsonable\" object, like a dict , instead of an arbitrary object with attributes (like an ORM model). That's why you should make sure to update your Pydantic models for objects with attributes to use orm_mode = True . If you don't have a response_model , the return object will still be passed through jsonable_encoder first. When a response_model is declared, the same response_model type declaration won't be used as is, it will be \"cloned\" to create an new one (a cloned Pydantic Field with all the submodels cloned as well). This avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the response_model (e.g. you return a UserInDB that inherits from User but contains extra fields, like hashed_password , and User is used in the response_model ), it would still pass the validation (because UserInDB is a subclass of User ) and the object would be returned as-is, including the hashed_password . To fix this, the declared response_model is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a List[Item] ), the Pydantic model class(es) will be a different one (the \"cloned\" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned response_model . Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned response_model , containing only the declared fields as normally. PR #322 . Remove/clean unused RegEx code in routing. PR #314 by @dmontagu . Use default response status code descriptions for additional responses. PR #313 by @duxiaoyao . Upgrade Pydantic support to 0.28 . PR #320 by @jekirl .","title":"0.30.0"},{"location":"release-notes/#0291","text":"Fix handling an empty-body request with a required body param. PR #311 . Fix broken link in docs: Return a Response directly . PR #306 by @dmontagu . Fix docs discrepancy in docs for Response Model . PR #288 by @awiddersheim .","title":"0.29.1"},{"location":"release-notes/#0290","text":"Add support for declaring a Response parameter: This allows declaring: Response Cookies . Response Headers . An HTTP Status Code different than the default: Response - Change Status Code . All of this while still being able to return arbitrary objects ( dict , DB model, etc). Update attribution to Hug, for inspiring the response parameter pattern. PR #294 .","title":"0.29.0"},{"location":"release-notes/#0280","text":"Implement dependency cache per request. This avoids calling each dependency multiple times for the same request. This is useful while calling external services, performing costly computation, etc. This also means that if a dependency was declared as a path operation decorator dependency, possibly at the router level (with .include_router() ) and then it is declared again in a specific path operation , the dependency will be called only once. The cache can be disabled per dependency declaration, using use_cache=False as in Depends(your_dependency, use_cache=False) . Updated docs at: Using the same dependency multiple times . PR #292 . Implement dependency overrides for testing. This allows using overrides/mocks of dependencies during tests. New docs: Testing Dependencies with Overrides . PR #291 .","title":"0.28.0"},{"location":"release-notes/#0272","text":"Fix path and query parameters receiving dict as a valid type. It should be mapped to a body payload. PR #287 . Updated docs at: Query parameter list / multiple values with defaults: Using list .","title":"0.27.2"},{"location":"release-notes/#0271","text":"Fix auto_error=False handling in HTTPBearer security scheme. Do not raise when there's an incorrect Authorization header if auto_error=False . PR #282 . Fix type declaration of HTTPException . PR #279 .","title":"0.27.1"},{"location":"release-notes/#0270","text":"Fix broken link in docs about OAuth 2.0 with scopes. PR #275 by @dmontagu . Refactor param extraction using Pydantic Field : Large refactor, improvement, and simplification of param extraction from path operations . Fix/add support for list query parameters with list defaults. New documentation: Query parameter list / multiple values with defaults . Add support for enumerations in path operation parameters. New documentation: Path Parameters: Predefined values . Add support for type annotations using Optional as in param: Optional[str] = None . New documentation: Optional type declarations . PR #278 .","title":"0.27.0"},{"location":"release-notes/#0260","text":"Separate error handling for validation errors. This will allow developers to customize the exception handlers. Document better how to handle exceptions and use error handlers. Include RequestValidationError and WebSocketRequestValidationError (this last one will be useful once encode/starlette#527 or equivalent is merged). New documentation about exceptions handlers: Install custom exception handlers . Override the default exception handlers . Re-use FastAPI's exception handlers . PR #273 . Fix support for paths in path parameters without needing explicit Path(...) . PR #256 . Documented in PR #272 by @wshayes . New documentation at: Path Parameters containing paths . Update docs for testing FastAPI. Include using POST , sending JSON, testing headers, etc. New documentation: Testing . PR #271 . Fix type declaration of response_model to allow generic Python types as List[Model] . Mainly to fix mypy for users. PR #266 .","title":"0.26.0"},{"location":"release-notes/#0250","text":"Add support for Pydantic's include , exclude , by_alias . Update documentation: Response Model . Add docs for: Body - updates , using Pydantic's skip_defaults . Add method consistency tests. PR #264 . Add CONTRIBUTING.md file to GitHub, to help new contributors. PR #255 by @wshayes . Add support for Pydantic's skip_defaults : There's a new path operation decorator parameter response_model_skip_defaults . The name of the parameter will most probably change in a future version to response_skip_defaults , model_skip_defaults or something similar. New documentation section about using response_model_skip_defaults . PR #248 by @wshayes .","title":"0.25.0"},{"location":"release-notes/#0240","text":"Add support for WebSockets with dependencies and parameters. Support included for: Depends Security Cookie Header Path Query ...as these are compatible with the WebSockets protocol (e.g. Body is not). Updated documentation for WebSockets . PR #178 by @jekirl . Upgrade the compatible version of Pydantic to 0.26.0 . This includes JSON Schema support for IP address and network objects, bug fixes, and other features. PR #247 by @euri10 .","title":"0.24.0"},{"location":"release-notes/#0230","text":"Upgrade the compatible version of Starlette to 0.12.0 . This includes support for ASGI 3 (the latest version of the standard). It's now possible to use Starlette's StreamingResponse with iterators, like file-like objects (as those returned by open() ). It's now possible to use the low level utility iterate_in_threadpool from starlette.concurrency (for advanced scenarios). PR #243 . Add OAuth2 redirect page for Swagger UI. This allows having delegated authentication in the Swagger UI docs. For this to work, you need to add {your_origin}/docs/oauth2-redirect to the allowed callbacks in your OAuth2 provider (in Auth0, Facebook, Google, etc). For example, during development, it could be http://localhost:8000/docs/oauth2-redirect . Have in mind that this callback URL is independent of whichever one is used by your frontend. You might also have another callback at https://yourdomain.com/login/callback . This is only to allow delegated authentication in the API docs with Swagger UI. PR #198 by @steinitzu . Make Swagger UI and ReDoc route handlers ( path operations ) be async functions instead of lambdas to improve performance. PR #241 by @Trim21 . Make Swagger UI and ReDoc URLs parameterizable, allowing to host and serve local versions of them and have offline docs. PR #112 by @euri10 .","title":"0.23.0"},{"location":"release-notes/#0220","text":"Add support for dependencies parameter: A parameter in path operation decorators , for dependencies that should be executed but the return value is not important or not used in the path operation function . A parameter in the .include_router() method of FastAPI applications and routers, to include dependencies that should be executed in each path operation in a router. This is useful, for example, to require authentication or permissions in specific group of path operations . Different dependencies can be applied to different routers. These dependencies are run before the normal parameter dependencies. And normal dependencies are run too. They can be combined. Dependencies declared in a router are executed first, then the ones defined in path operation decorators , and then the ones declared in normal parameters. They are all combined and executed. All this also supports using Security with scopes in those dependencies parameters, for more advanced OAuth 2.0 security scenarios with scopes. New documentation about dependencies in path operation decorators . New documentation about dependencies in the include_router() method . PR #235 . Fix OpenAPI documentation of Starlette URL convertors. Specially useful when using path convertors, to take a whole path as a parameter, like /some/url/{p:path} . PR #234 by @euri10 . Make default parameter utilities exported from fastapi be functions instead of classes (the new functions return instances of those classes). To be able to override the return types and fix mypy errors in FastAPI's users' code. Applies to Path , Query , Header , Cookie , Body , Form , File , Depends , and Security . PR #226 and PR #231 . Separate development scripts test.sh , lint.sh , and format.sh . PR #232 . Re-enable black formatting checks for Python 3.7. PR #229 by @zamiramir .","title":"0.22.0"},{"location":"release-notes/#0210","text":"On body parsing errors, raise from previous exception, to allow better introspection in logging code. PR #192 by @ricardomomm . Use Python logger named \" fastapi \" instead of root logger. PR #222 by @euri10 . Upgrade Pydantic to version 0.25. PR #225 by @euri10 . Fix typo in routing. PR #221 by @djlambert .","title":"0.21.0"},{"location":"release-notes/#0201","text":"Add typing information to package including file py.typed . PR #209 by @meadsteve . Add FastAPI bot for Gitter. To automatically announce new releases. PR #189 .","title":"0.20.1"},{"location":"release-notes/#0200","text":"Upgrade OAuth2: Upgrade Password flow using Bearer tokens to use the correct HTTP status code 401 UNAUTHORIZED , with WWW-Authenticate headers. Update, simplify, and improve all the security docs . Add new scope_str to SecurityScopes and update docs: OAuth2 scopes . Update docs, images, tests. PR #188 . Include Hypercorn as an alternative ASGI server in the docs. PR #187 . Add docs for Static Files and Templates . PR #186 . Add docs for handling Response Cookies and Response Headers . PR #185 . Fix typos in docs. PR #176 by @chdsbd .","title":"0.20.0"},{"location":"release-notes/#0190","text":"Rename path operation decorator parameter content_type to response_class . PR #183 . Add docs: How to use the jsonable_encoder in JSON compatible encoder . How to Return a Response directly . Update how to use a Custom Response Class . PR #184 .","title":"0.19.0"},{"location":"release-notes/#0180","text":"Add docs for HTTP Basic Auth . PR #177 . Upgrade HTTP Basic Auth handling with automatic headers (automatic browser login prompt). PR #175 . Update dependencies for security. PR #174 . Add docs for Middleware . PR #173 .","title":"0.18.0"},{"location":"release-notes/#0170","text":"Make Flit publish from CI. PR #170 . Add documentation about handling CORS (Cross-Origin Resource Sharing) . PR #169 . By default, encode by alias. This allows using Pydantic alias parameters working by default. PR #168 .","title":"0.17.0"},{"location":"release-notes/#0160","text":"Upgrade path operation docstring parsing to support proper Markdown descriptions. New documentation at Path Operation Configuration . PR #163 . Refactor internal usage of Pydantic to use correct data types. PR #164 . Upgrade Pydantic to version 0.23 . PR #160 by @euri10 . Fix typo in Tutorial about Extra Models. PR #159 by @danielmichaels . Fix Query Parameters URL examples in docs. PR #157 by @hayata-yamamoto .","title":"0.16.0"},{"location":"release-notes/#0150","text":"Add support for multiple file uploads (as a single form field). New docs at: Multiple file uploads . PR #158 . Add docs for: Additional Status Codes . PR #156 .","title":"0.15.0"},{"location":"release-notes/#0140","text":"Improve automatically generated names of path operations in OpenAPI (in API docs). A function read_items instead of having a generated name \"Read Items Get\" will have \"Read Items\". PR #155 . Add docs for: Testing FastAPI . PR #151 . Update /docs Swagger UI to enable deep linking. This allows sharing the URL pointing directly to the path operation documentation in the docs. PR #148 by @wshayes . Update development dependencies, Pipfile.lock . PR #150 . Include Falcon and Hug in: Alternatives, Inspiration and Comparisons .","title":"0.14.0"},{"location":"release-notes/#0130","text":"Improve/upgrade OAuth2 scopes support with SecurityScopes : SecurityScopes can be declared as a parameter like Request , to get the scopes of all super-dependencies/dependants. Improve Security handling, merging scopes when declaring SecurityScopes . Allow using SecurityBase (like OAuth2 ) classes with Depends and still document them. Security now is needed only to declare scopes . Updated docs about: OAuth2 with Password (and hashing), Bearer with JWT tokens . New docs about: OAuth2 scopes . PR #141 .","title":"0.13.0"},{"location":"release-notes/#0121","text":"Fix bug: handling additional responses in APIRouter.include_router() . PR #140 . Fix typo in SQL tutorial. PR #138 by @mostaphaRoudsari . Fix typos in section about nested models and OAuth2 with JWT. PR #127 by @mmcloud .","title":"0.12.1"},{"location":"release-notes/#0120","text":"Add additional responses parameter to path operation decorators to extend responses in OpenAPI (and API docs). It also allows extending existing responses generated from response_model , declare other media types (like images), etc. The new documentation is here: Additional Responses . responses can also be added to .include_router() , the updated docs are here: Bigger Applications . PR #97 originally initiated by @barsi . Update scripts/test-cov-html.sh to allow passing extra parameters like -vv , for development.","title":"0.12.0"},{"location":"release-notes/#0110","text":"Add auto_error parameter to security utility functions. Allowing them to be optional. Also allowing to have multiple alternative security schemes that are then checked in a single dependency instead of each one verifying and returning the error to the client automatically when not satisfied. PR #134 . Update SQL Tutorial to close database sessions even when there are exceptions. PR #89 by @alexiri . Fix duplicate dependency in pyproject.toml . PR #128 by @zxalif .","title":"0.11.0"},{"location":"release-notes/#0103","text":"Add Gitter chat, badge, links, etc. https://gitter.im/tiangolo/fastapi . PR #117 . Add docs about Extending OpenAPI . PR #126 . Make Travis run Ubuntu Xenial (newer version) and Python 3.7 instead of Python 3.7-dev. PR #92 by @blueyed . Fix duplicated param variable creation. PR #123 by @yihuang . Add note in Response Model docs about why using a function parameter instead of a function return type annotation. PR #109 by @JHSaunders . Fix event docs (startup/shutdown) function name. PR #105 by @stratosgear .","title":"0.10.3"},{"location":"release-notes/#0102","text":"Fix OpenAPI (JSON Schema) for declarations of Python Union (JSON Schema additionalProperties ). PR #121 . Update Background Tasks with a note on Celery. Document response models using unions and lists, updated at: Extra Models . PR #108 .","title":"0.10.2"},{"location":"release-notes/#0101","text":"Add docs and tests for encode/databases . New docs at: Async SQL (Relational) Databases . PR #107 .","title":"0.10.1"},{"location":"release-notes/#0100","text":"Add support for Background Tasks in path operation functions and dependencies. New documentation about Background Tasks is here . PR #103 . Add support for .websocket_route() in APIRouter . PR #100 by @euri10 . New docs section about Events: startup - shutdown . PR #99 .","title":"0.10.0"},{"location":"release-notes/#091","text":"Document receiving Multiple values with the same query parameter and Duplicate headers . PR #95 .","title":"0.9.1"},{"location":"release-notes/#090","text":"Upgrade compatible Pydantic version to 0.21.0 . PR #90 . Add documentation for: Application Configuration . Fix typo in docs. PR #76 by @matthewhegarty . Fix link in \"Deployment\" to \"Bigger Applications\".","title":"0.9.0"},{"location":"release-notes/#080","text":"Make development scripts executable. PR #76 by @euri10 . Add support for adding tags in app.include_router() . PR #55 by @euri10 . Documentation updated in the section: Bigger Applications . Update docs related to Uvicorn to use new --reload option from version 0.5.x . PR #74 . Update isort imports and scripts to be compatible with newer versions. PR #75 .","title":"0.8.0"},{"location":"release-notes/#071","text":"Update technical details about async def handling with respect to previous frameworks. PR #64 by @haizaar . Add deployment documentation for Docker in Raspberry Pi and other architectures. Trigger Docker images build on Travis CI automatically. PR #65 .","title":"0.7.1"},{"location":"release-notes/#070","text":"Add support for UploadFile in File parameter annotations. This includes a file-like interface. Here's the updated documentation for declaring File parameters with UploadFile . And here's the updated documentation for using Form parameters mixed with File parameters, supporting bytes and UploadFile at the same time. PR #63 .","title":"0.7.0"},{"location":"release-notes/#064","text":"Add technical details about async def handling to docs . PR #61 . Add docs for Debugging FastAPI applications in editors . Clarify Bigger Applications deployed with Docker . Fix typos in docs. Add section about History, Design and Future . Add docs for using WebSockets with FastAPI . PR #62 .","title":"0.6.4"},{"location":"release-notes/#063","text":"Add Favicons to docs. PR #53 .","title":"0.6.3"},{"location":"release-notes/#062","text":"Introduce new project generator based on FastAPI and PostgreSQL: https://github.com/tiangolo/full-stack-fastapi-postgresql . PR #52 . Update SQL tutorial with SQLAlchemy, using Depends to improve editor support and reduce code repetition . PR #52 . Improve middleware naming in tutorial for SQL with SQLAlchemy https://fastapi.tiangolo.com/tutorial/sql-databases/ .","title":"0.6.2"},{"location":"release-notes/#061","text":"Add docs for GraphQL: https://fastapi.tiangolo.com/advanced/graphql/ . PR #48 .","title":"0.6.1"},{"location":"release-notes/#060","text":"Update SQL with SQLAlchemy tutorial at https://fastapi.tiangolo.com/tutorial/sql-databases/ using the new official request.state . PR #45 . Upgrade Starlette to version 0.11.1 and add required compatibility changes. PR #44 .","title":"0.6.0"},{"location":"release-notes/#051","text":"Add section about helping and getting help with FastAPI . Add note about path operations order in docs . Update section about error handling with more information and make relation with Starlette error handling utilities more explicit. PR #41 . Add Development - Contributing section to the docs . PR #42 .","title":"0.5.1"},{"location":"release-notes/#050","text":"Add new HTTPException with support for custom headers. With new documentation for handling errors at: https://fastapi.tiangolo.com/tutorial/handling-errors/ . PR #35 . Add documentation to use Starlette Request object directly. Check #25 by @euri10 . Add issue templates to simplify reporting bugs, getting help, etc: #34 . Update example for the SQLAlchemy tutorial at https://fastapi.tiangolo.com/tutorial/sql-databases/ using middleware and database session attached to request.","title":"0.5.0"},{"location":"release-notes/#040","text":"Add openapi_prefix , support for reverse proxy and mounting sub-applications. See the docs at https://fastapi.tiangolo.com/advanced/sub-applications-proxy/ : #26 by @kabirkhan . Update docs/tutorial for SQLAlchemy including note about DB Browser for SQLite .","title":"0.4.0"},{"location":"release-notes/#030","text":"Fix/add SQLAlchemy support, including ORM, and update docs for SQLAlchemy : #30 .","title":"0.3.0"},{"location":"release-notes/#021","text":"Fix jsonable_encoder for Pydantic models with Config but without json_encoders : #29 .","title":"0.2.1"},{"location":"release-notes/#020","text":"Fix typos in Security section: #24 by @kkinder . Add support for Pydantic custom JSON encoders: #21 by @euri10 .","title":"0.2.0"},{"location":"release-notes/#0119","text":"Upgrade Starlette version to the current latest 0.10.1 : #17 by @euri10 .","title":"0.1.19"},{"location":"advanced/","text":"\u9ad8\u7ea7\u7528\u6237\u6307\u5357 - \u7b80\u4ecb \u00b6 \u989d\u5916\u7279\u6027 \u00b6 \u4e3b\u8981\u7684\u6559\u7a0b \u6559\u7a0b - \u7528\u6237\u6307\u5357 \u5e94\u8be5\u8db3\u4ee5\u8ba9\u4f60\u4e86\u89e3 FastAPI \u7684\u6240\u6709\u4e3b\u8981\u7279\u6027\u3002 \u4f60\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u4e86\u89e3\u5230\u5176\u4ed6\u7684\u9009\u9879\u3001\u914d\u7f6e\u4ee5\u53ca\u989d\u5916\u7684\u7279\u6027\u3002 Tip \u63a5\u4e0b\u6765\u7684\u7ae0\u8282 \u5e76\u4e0d\u4e00\u5b9a\u662f \u300c\u9ad8\u7ea7\u7684\u300d\u3002 \u800c\u4e14\u5bf9\u4e8e\u4f60\u7684\u4f7f\u7528\u573a\u666f\u6765\u8bf4\uff0c\u89e3\u51b3\u65b9\u6848\u5f88\u53ef\u80fd\u5c31\u5728\u5176\u4e2d\u3002 \u5148\u9605\u8bfb\u6559\u7a0b \u00b6 \u4f60\u53ef\u80fd\u4ecd\u4f1a\u7528\u5230 FastAPI \u4e3b\u6559\u7a0b \u6559\u7a0b - \u7528\u6237\u6307\u5357 \u4e2d\u7684\u5927\u591a\u6570\u7279\u6027\u3002 \u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u6211\u4eec\u8ba4\u4e3a\u4f60\u5df2\u7ecf\u8bfb\u8fc7 \u6559\u7a0b - \u7528\u6237\u6307\u5357 \uff0c\u5e76\u4e14\u5047\u8bbe\u4f60\u5df2\u7ecf\u77e5\u6653\u5176\u4e2d\u4e3b\u8981\u601d\u60f3\u3002","title":"\u9ad8\u7ea7\u7528\u6237\u6307\u5357 - \u7b80\u4ecb"},{"location":"advanced/#-","text":"","title":"\u9ad8\u7ea7\u7528\u6237\u6307\u5357 - \u7b80\u4ecb"},{"location":"advanced/#_1","text":"\u4e3b\u8981\u7684\u6559\u7a0b \u6559\u7a0b - \u7528\u6237\u6307\u5357 \u5e94\u8be5\u8db3\u4ee5\u8ba9\u4f60\u4e86\u89e3 FastAPI \u7684\u6240\u6709\u4e3b\u8981\u7279\u6027\u3002 \u4f60\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u4e86\u89e3\u5230\u5176\u4ed6\u7684\u9009\u9879\u3001\u914d\u7f6e\u4ee5\u53ca\u989d\u5916\u7684\u7279\u6027\u3002 Tip \u63a5\u4e0b\u6765\u7684\u7ae0\u8282 \u5e76\u4e0d\u4e00\u5b9a\u662f \u300c\u9ad8\u7ea7\u7684\u300d\u3002 \u800c\u4e14\u5bf9\u4e8e\u4f60\u7684\u4f7f\u7528\u573a\u666f\u6765\u8bf4\uff0c\u89e3\u51b3\u65b9\u6848\u5f88\u53ef\u80fd\u5c31\u5728\u5176\u4e2d\u3002","title":"\u989d\u5916\u7279\u6027"},{"location":"advanced/#_2","text":"\u4f60\u53ef\u80fd\u4ecd\u4f1a\u7528\u5230 FastAPI \u4e3b\u6559\u7a0b \u6559\u7a0b - \u7528\u6237\u6307\u5357 \u4e2d\u7684\u5927\u591a\u6570\u7279\u6027\u3002 \u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u6211\u4eec\u8ba4\u4e3a\u4f60\u5df2\u7ecf\u8bfb\u8fc7 \u6559\u7a0b - \u7528\u6237\u6307\u5357 \uff0c\u5e76\u4e14\u5047\u8bbe\u4f60\u5df2\u7ecf\u77e5\u6653\u5176\u4e2d\u4e3b\u8981\u601d\u60f3\u3002","title":"\u5148\u9605\u8bfb\u6559\u7a0b"},{"location":"advanced/additional-responses/","text":"Additional Responses in OpenAPI \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Warning This is a rather advanced topic. If you are starting with FastAPI , you might not need this. You can declare additional responses, with additional status codes, media types, descriptions, etc. Those additional responses will be included in the OpenAPI schema, so they will also appear in the API docs. But for those additional responses you have to make sure you return a Response like JSONResponse directly, with your status code and content. Additional Response with model \u00b6 You can pass to your path operation decorators a parameter responses . It receives a dict , the keys are status codes for each response, like 200 , and the values are other dict s with the information for each of them. Each of those response dict s can have a key model , containing a Pydantic model, just like response_model . FastAPI will take that model, generate its JSON Schema and include it in the correct place in OpenAPI. For example, to declare another response with a status code 404 and a Pydantic model Message , you can write: from fastapi import FastAPI from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str class Message ( BaseModel ): message : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 404 : { \"model\" : Message }}) async def read_item ( item_id : str ): if item_id == \"foo\" : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } else : return JSONResponse ( status_code = 404 , content = { \"message\" : \"Item not found\" }) Note Have in mind that you have to return the JSONResponse directly. Info The model key is not part of OpenAPI. FastAPI will take the Pydantic model from there, generate the JSON Schema , and put it in the correct place. The correct place is: In the key content , that has as value another JSON object ( dict ) that contains: A key with the media type, e.g. application/json , that contains as value another JSON object, that contains: A key schema , that has as the value the JSON Schema from the model, here's the correct place. FastAPI adds a reference here to the global JSON Schemas in another place in your OpenAPI instead of including it directly. This way, other applications and clients can use those JSON Schemas directly, provide better code generation tools, etc. The generated responses in the OpenAPI for this path operation will be: { \"responses\" : { \"404\" : { \"description\" : \"Additional Response\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/Message\" } } } }, \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/Item\" } } } }, \"422\" : { \"description\" : \"Validation Error\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/HTTPValidationError\" } } } } } } The schemas are referenced to another place inside the OpenAPI schema: { \"components\" : { \"schemas\" : { \"Message\" : { \"title\" : \"Message\" , \"required\" : [ \"message\" ], \"type\" : \"object\" , \"properties\" : { \"message\" : { \"title\" : \"Message\" , \"type\" : \"string\" } } }, \"Item\" : { \"title\" : \"Item\" , \"required\" : [ \"id\" , \"value\" ], \"type\" : \"object\" , \"properties\" : { \"id\" : { \"title\" : \"Id\" , \"type\" : \"string\" }, \"value\" : { \"title\" : \"Value\" , \"type\" : \"string\" } } }, \"ValidationError\" : { \"title\" : \"ValidationError\" , \"required\" : [ \"loc\" , \"msg\" , \"type\" ], \"type\" : \"object\" , \"properties\" : { \"loc\" : { \"title\" : \"Location\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"string\" } }, \"msg\" : { \"title\" : \"Message\" , \"type\" : \"string\" }, \"type\" : { \"title\" : \"Error Type\" , \"type\" : \"string\" } } }, \"HTTPValidationError\" : { \"title\" : \"HTTPValidationError\" , \"type\" : \"object\" , \"properties\" : { \"detail\" : { \"title\" : \"Detail\" , \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" } } } } } } } Additional media types for the main response \u00b6 You can use this same responses parameter to add different media types for the same main response. For example, you can add an additional media type of image/png , declaring that your path operation can return a JSON object (with media type application/json ) or a PNG image: from typing import Union from fastapi import FastAPI from fastapi.responses import FileResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 200 : { \"content\" : { \"image/png\" : {}}, \"description\" : \"Return the JSON item or an image.\" , } }, ) async def read_item ( item_id : str , img : Union [ bool , None ] = None ): if img : return FileResponse ( \"image.png\" , media_type = \"image/png\" ) else : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } Note Notice that you have to return the image using a FileResponse directly. Info Unless you specify a different media type explicitly in your responses parameter, FastAPI will assume the response has the same media type as the main response class (default application/json ). But if you have specified a custom response class with None as its media type, FastAPI will use application/json for any additional response that has an associated model. Combining information \u00b6 You can also combine response information from multiple places, including the response_model , status_code , and responses parameters. You can declare a response_model , using the default status code 200 (or a custom one if you need), and then declare additional information for that same response in responses , directly in the OpenAPI schema. FastAPI will keep the additional information from responses , and combine it with the JSON Schema from your model. For example, you can declare a response with a status code 404 that uses a Pydantic model and has a custom description . And a response with a status code 200 that uses your response_model , but includes a custom example : from fastapi import FastAPI from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str class Message ( BaseModel ): message : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 404 : { \"model\" : Message , \"description\" : \"The item was not found\" }, 200 : { \"description\" : \"Item requested by ID\" , \"content\" : { \"application/json\" : { \"example\" : { \"id\" : \"bar\" , \"value\" : \"The bar tenders\" } } }, }, }, ) async def read_item ( item_id : str ): if item_id == \"foo\" : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } else : return JSONResponse ( status_code = 404 , content = { \"message\" : \"Item not found\" }) It will all be combined and included in your OpenAPI, and shown in the API docs: Combine predefined responses and custom ones \u00b6 You might want to have some predefined responses that apply to many path operations , but you want to combine them with custom responses needed by each path operation . For those cases, you can use the Python technique of \"unpacking\" a dict with **dict_to_unpack : old_dict = { \"old key\" : \"old value\" , \"second old key\" : \"second old value\" , } new_dict = { ** old_dict , \"new key\" : \"new value\" } Here, new_dict will contain all the key-value pairs from old_dict plus the new key-value pair: { \"old key\" : \"old value\" , \"second old key\" : \"second old value\" , \"new key\" : \"new value\" , } You can use that technique to re-use some predefined responses in your path operations and combine them with additional custom ones. For example: from typing import Union from fastapi import FastAPI from fastapi.responses import FileResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str responses = { 404 : { \"description\" : \"Item not found\" }, 302 : { \"description\" : \"The item was moved\" }, 403 : { \"description\" : \"Not enough privileges\" }, } app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { ** responses , 200 : { \"content\" : { \"image/png\" : {}}}}, ) async def read_item ( item_id : str , img : Union [ bool , None ] = None ): if img : return FileResponse ( \"image.png\" , media_type = \"image/png\" ) else : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } More information about OpenAPI responses \u00b6 To see what exactly you can include in the responses, you can check these sections in the OpenAPI specification: OpenAPI Responses Object , it includes the Response Object . OpenAPI Response Object , you can include anything from this directly in each response inside your responses parameter. Including description , headers , content (inside of this is that you declare different media types and JSON Schemas), and links .","title":"Additional Responses in OpenAPI"},{"location":"advanced/additional-responses/#additional-responses-in-openapi","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Warning This is a rather advanced topic. If you are starting with FastAPI , you might not need this. You can declare additional responses, with additional status codes, media types, descriptions, etc. Those additional responses will be included in the OpenAPI schema, so they will also appear in the API docs. But for those additional responses you have to make sure you return a Response like JSONResponse directly, with your status code and content.","title":"Additional Responses in OpenAPI"},{"location":"advanced/additional-responses/#additional-response-with-model","text":"You can pass to your path operation decorators a parameter responses . It receives a dict , the keys are status codes for each response, like 200 , and the values are other dict s with the information for each of them. Each of those response dict s can have a key model , containing a Pydantic model, just like response_model . FastAPI will take that model, generate its JSON Schema and include it in the correct place in OpenAPI. For example, to declare another response with a status code 404 and a Pydantic model Message , you can write: from fastapi import FastAPI from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str class Message ( BaseModel ): message : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 404 : { \"model\" : Message }}) async def read_item ( item_id : str ): if item_id == \"foo\" : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } else : return JSONResponse ( status_code = 404 , content = { \"message\" : \"Item not found\" }) Note Have in mind that you have to return the JSONResponse directly. Info The model key is not part of OpenAPI. FastAPI will take the Pydantic model from there, generate the JSON Schema , and put it in the correct place. The correct place is: In the key content , that has as value another JSON object ( dict ) that contains: A key with the media type, e.g. application/json , that contains as value another JSON object, that contains: A key schema , that has as the value the JSON Schema from the model, here's the correct place. FastAPI adds a reference here to the global JSON Schemas in another place in your OpenAPI instead of including it directly. This way, other applications and clients can use those JSON Schemas directly, provide better code generation tools, etc. The generated responses in the OpenAPI for this path operation will be: { \"responses\" : { \"404\" : { \"description\" : \"Additional Response\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/Message\" } } } }, \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/Item\" } } } }, \"422\" : { \"description\" : \"Validation Error\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/HTTPValidationError\" } } } } } } The schemas are referenced to another place inside the OpenAPI schema: { \"components\" : { \"schemas\" : { \"Message\" : { \"title\" : \"Message\" , \"required\" : [ \"message\" ], \"type\" : \"object\" , \"properties\" : { \"message\" : { \"title\" : \"Message\" , \"type\" : \"string\" } } }, \"Item\" : { \"title\" : \"Item\" , \"required\" : [ \"id\" , \"value\" ], \"type\" : \"object\" , \"properties\" : { \"id\" : { \"title\" : \"Id\" , \"type\" : \"string\" }, \"value\" : { \"title\" : \"Value\" , \"type\" : \"string\" } } }, \"ValidationError\" : { \"title\" : \"ValidationError\" , \"required\" : [ \"loc\" , \"msg\" , \"type\" ], \"type\" : \"object\" , \"properties\" : { \"loc\" : { \"title\" : \"Location\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"string\" } }, \"msg\" : { \"title\" : \"Message\" , \"type\" : \"string\" }, \"type\" : { \"title\" : \"Error Type\" , \"type\" : \"string\" } } }, \"HTTPValidationError\" : { \"title\" : \"HTTPValidationError\" , \"type\" : \"object\" , \"properties\" : { \"detail\" : { \"title\" : \"Detail\" , \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" } } } } } } }","title":"Additional Response with model"},{"location":"advanced/additional-responses/#additional-media-types-for-the-main-response","text":"You can use this same responses parameter to add different media types for the same main response. For example, you can add an additional media type of image/png , declaring that your path operation can return a JSON object (with media type application/json ) or a PNG image: from typing import Union from fastapi import FastAPI from fastapi.responses import FileResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 200 : { \"content\" : { \"image/png\" : {}}, \"description\" : \"Return the JSON item or an image.\" , } }, ) async def read_item ( item_id : str , img : Union [ bool , None ] = None ): if img : return FileResponse ( \"image.png\" , media_type = \"image/png\" ) else : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } Note Notice that you have to return the image using a FileResponse directly. Info Unless you specify a different media type explicitly in your responses parameter, FastAPI will assume the response has the same media type as the main response class (default application/json ). But if you have specified a custom response class with None as its media type, FastAPI will use application/json for any additional response that has an associated model.","title":"Additional media types for the main response"},{"location":"advanced/additional-responses/#combining-information","text":"You can also combine response information from multiple places, including the response_model , status_code , and responses parameters. You can declare a response_model , using the default status code 200 (or a custom one if you need), and then declare additional information for that same response in responses , directly in the OpenAPI schema. FastAPI will keep the additional information from responses , and combine it with the JSON Schema from your model. For example, you can declare a response with a status code 404 that uses a Pydantic model and has a custom description . And a response with a status code 200 that uses your response_model , but includes a custom example : from fastapi import FastAPI from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str class Message ( BaseModel ): message : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 404 : { \"model\" : Message , \"description\" : \"The item was not found\" }, 200 : { \"description\" : \"Item requested by ID\" , \"content\" : { \"application/json\" : { \"example\" : { \"id\" : \"bar\" , \"value\" : \"The bar tenders\" } } }, }, }, ) async def read_item ( item_id : str ): if item_id == \"foo\" : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } else : return JSONResponse ( status_code = 404 , content = { \"message\" : \"Item not found\" }) It will all be combined and included in your OpenAPI, and shown in the API docs:","title":"Combining information"},{"location":"advanced/additional-responses/#combine-predefined-responses-and-custom-ones","text":"You might want to have some predefined responses that apply to many path operations , but you want to combine them with custom responses needed by each path operation . For those cases, you can use the Python technique of \"unpacking\" a dict with **dict_to_unpack : old_dict = { \"old key\" : \"old value\" , \"second old key\" : \"second old value\" , } new_dict = { ** old_dict , \"new key\" : \"new value\" } Here, new_dict will contain all the key-value pairs from old_dict plus the new key-value pair: { \"old key\" : \"old value\" , \"second old key\" : \"second old value\" , \"new key\" : \"new value\" , } You can use that technique to re-use some predefined responses in your path operations and combine them with additional custom ones. For example: from typing import Union from fastapi import FastAPI from fastapi.responses import FileResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str responses = { 404 : { \"description\" : \"Item not found\" }, 302 : { \"description\" : \"The item was moved\" }, 403 : { \"description\" : \"Not enough privileges\" }, } app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { ** responses , 200 : { \"content\" : { \"image/png\" : {}}}}, ) async def read_item ( item_id : str , img : Union [ bool , None ] = None ): if img : return FileResponse ( \"image.png\" , media_type = \"image/png\" ) else : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" }","title":"Combine predefined responses and custom ones"},{"location":"advanced/additional-responses/#more-information-about-openapi-responses","text":"To see what exactly you can include in the responses, you can check these sections in the OpenAPI specification: OpenAPI Responses Object , it includes the Response Object . OpenAPI Response Object , you can include anything from this directly in each response inside your responses parameter. Including description , headers , content (inside of this is that you declare different media types and JSON Schemas), and links .","title":"More information about OpenAPI responses"},{"location":"advanced/additional-status-codes/","text":"\u989d\u5916\u7684\u72b6\u6001\u7801 \u00b6 FastAPI \u9ed8\u8ba4\u4f7f\u7528 JSONResponse \u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\uff0c\u5c06\u4f60\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u7684\u8fd4\u56de\u5185\u5bb9\u653e\u5230\u8be5 JSONResponse \u4e2d\u3002 FastAPI \u4f1a\u81ea\u52a8\u4f7f\u7528\u9ed8\u8ba4\u7684\u72b6\u6001\u7801\u6216\u8005\u4f7f\u7528\u4f60\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u8bbe\u7f6e\u7684\u72b6\u6001\u7801\u3002 \u989d\u5916\u7684\u72b6\u6001\u7801 \u00b6 \u5982\u679c\u4f60\u60f3\u8981\u8fd4\u56de\u4e3b\u8981\u72b6\u6001\u7801\u4e4b\u5916\u7684\u72b6\u6001\u7801\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a Response \u6765\u5b9e\u73b0\uff0c\u6bd4\u5982 JSONResponse \uff0c\u7136\u540e\u76f4\u63a5\u8bbe\u7f6e\u989d\u5916\u7684\u72b6\u6001\u7801\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u60f3\u6709\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u80fd\u591f\u66f4\u65b0\u6761\u76ee\uff0c\u5e76\u4e14\u66f4\u65b0\u6210\u529f\u65f6\u8fd4\u56de 200 \u300c\u6210\u529f\u300d \u7684 HTTP \u72b6\u6001\u7801\u3002 \u4f46\u662f\u4f60\u4e5f\u5e0c\u671b\u5b83\u80fd\u591f\u63a5\u53d7\u65b0\u7684\u6761\u76ee\u3002\u5e76\u4e14\u5f53\u8fd9\u4e9b\u6761\u76ee\u4e0d\u5b58\u5728\u65f6\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa\u5e76\u8fd4\u56de 201 \u300c\u521b\u5efa\u300d\u7684 HTTP \u72b6\u6001\u7801\u3002 \u8981\u5b9e\u73b0\u5b83\uff0c\u5bfc\u5165 JSONResponse \uff0c\u7136\u540e\u5728\u5176\u4e2d\u76f4\u63a5\u8fd4\u56de\u4f60\u7684\u5185\u5bb9\uff0c\u5e76\u5c06 status_code \u8bbe\u7f6e\u4e3a\u4e3a\u4f60\u8981\u7684\u503c\u3002 from typing import Union from fastapi import Body , FastAPI , status from fastapi.responses import JSONResponse app = FastAPI () items = { \"foo\" : { \"name\" : \"Fighters\" , \"size\" : 6 }, \"bar\" : { \"name\" : \"Tenders\" , \"size\" : 3 }} @app . put ( \"/items/ {item_id} \" ) async def upsert_item ( item_id : str , name : Union [ str , None ] = Body ( default = None ), size : Union [ int , None ] = Body ( default = None ), ): if item_id in items : item = items [ item_id ] item [ \"name\" ] = name item [ \"size\" ] = size return item else : item = { \"name\" : name , \"size\" : size } items [ item_id ] = item return JSONResponse ( status_code = status . HTTP_201_CREATED , content = item ) \u8b66\u544a \u5f53\u4f60\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u50cf\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 Response \u5bf9\u8c61\u65f6\uff0c\u5b83\u4f1a\u76f4\u63a5\u8fd4\u56de\u3002 FastAPI \u4e0d\u4f1a\u7528\u6a21\u578b\u7b49\u5bf9\u8be5\u54cd\u5e94\u8fdb\u884c\u5e8f\u5217\u5316\u3002 \u786e\u4fdd\u5176\u4e2d\u6709\u4f60\u60f3\u8981\u7684\u6570\u636e\uff0c\u4e14\u8fd4\u56de\u7684\u503c\u4e3a\u5408\u6cd5\u7684 JSON\uff08\u5982\u679c\u4f60\u4f7f\u7528 JSONResponse \u7684\u8bdd\uff09\u3002 \u6280\u672f\u7ec6\u8282 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import JSONResponse \u3002\u3000 \u51fa\u4e8e\u65b9\u4fbf\uff0c FastAPI \u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u540c starlette.responses \u4e00\u6837\u7684 fastapi.responses \u3002\u4f46\u662f\u5927\u591a\u6570\u53ef\u7528\u7684\u54cd\u5e94\u90fd\u662f\u76f4\u63a5\u6765\u81ea Starlette\u3002 status \u4e5f\u662f\u4e00\u6837\u3002 OpenAPI \u548c API \u6587\u6863 \u00b6 \u5982\u679c\u4f60\u76f4\u63a5\u8fd4\u56de\u989d\u5916\u7684\u72b6\u6001\u7801\u548c\u54cd\u5e94\uff0c\u5b83\u4eec\u4e0d\u4f1a\u5305\u542b\u5728 OpenAPI \u65b9\u6848\uff08API \u6587\u6863\uff09\u4e2d\uff0c\u56e0\u4e3a FastAPI \u6ca1\u529e\u6cd5\u9884\u5148\u77e5\u9053\u4f60\u8981\u8fd4\u56de\u4ec0\u4e48\u3002 \u4f46\u662f\u4f60\u53ef\u4ee5\u4f7f\u7528 \u989d\u5916\u7684\u54cd\u5e94 \u5728\u4ee3\u7801\u4e2d\u8bb0\u5f55\u8fd9\u4e9b\u5185\u5bb9\u3002","title":"\u989d\u5916\u7684\u72b6\u6001\u7801"},{"location":"advanced/additional-status-codes/#_1","text":"FastAPI \u9ed8\u8ba4\u4f7f\u7528 JSONResponse \u8fd4\u56de\u4e00\u4e2a\u54cd\u5e94\uff0c\u5c06\u4f60\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u7684\u8fd4\u56de\u5185\u5bb9\u653e\u5230\u8be5 JSONResponse \u4e2d\u3002 FastAPI \u4f1a\u81ea\u52a8\u4f7f\u7528\u9ed8\u8ba4\u7684\u72b6\u6001\u7801\u6216\u8005\u4f7f\u7528\u4f60\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u8bbe\u7f6e\u7684\u72b6\u6001\u7801\u3002","title":"\u989d\u5916\u7684\u72b6\u6001\u7801"},{"location":"advanced/additional-status-codes/#_2","text":"\u5982\u679c\u4f60\u60f3\u8981\u8fd4\u56de\u4e3b\u8981\u72b6\u6001\u7801\u4e4b\u5916\u7684\u72b6\u6001\u7801\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a Response \u6765\u5b9e\u73b0\uff0c\u6bd4\u5982 JSONResponse \uff0c\u7136\u540e\u76f4\u63a5\u8bbe\u7f6e\u989d\u5916\u7684\u72b6\u6001\u7801\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u60f3\u6709\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u80fd\u591f\u66f4\u65b0\u6761\u76ee\uff0c\u5e76\u4e14\u66f4\u65b0\u6210\u529f\u65f6\u8fd4\u56de 200 \u300c\u6210\u529f\u300d \u7684 HTTP \u72b6\u6001\u7801\u3002 \u4f46\u662f\u4f60\u4e5f\u5e0c\u671b\u5b83\u80fd\u591f\u63a5\u53d7\u65b0\u7684\u6761\u76ee\u3002\u5e76\u4e14\u5f53\u8fd9\u4e9b\u6761\u76ee\u4e0d\u5b58\u5728\u65f6\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa\u5e76\u8fd4\u56de 201 \u300c\u521b\u5efa\u300d\u7684 HTTP \u72b6\u6001\u7801\u3002 \u8981\u5b9e\u73b0\u5b83\uff0c\u5bfc\u5165 JSONResponse \uff0c\u7136\u540e\u5728\u5176\u4e2d\u76f4\u63a5\u8fd4\u56de\u4f60\u7684\u5185\u5bb9\uff0c\u5e76\u5c06 status_code \u8bbe\u7f6e\u4e3a\u4e3a\u4f60\u8981\u7684\u503c\u3002 from typing import Union from fastapi import Body , FastAPI , status from fastapi.responses import JSONResponse app = FastAPI () items = { \"foo\" : { \"name\" : \"Fighters\" , \"size\" : 6 }, \"bar\" : { \"name\" : \"Tenders\" , \"size\" : 3 }} @app . put ( \"/items/ {item_id} \" ) async def upsert_item ( item_id : str , name : Union [ str , None ] = Body ( default = None ), size : Union [ int , None ] = Body ( default = None ), ): if item_id in items : item = items [ item_id ] item [ \"name\" ] = name item [ \"size\" ] = size return item else : item = { \"name\" : name , \"size\" : size } items [ item_id ] = item return JSONResponse ( status_code = status . HTTP_201_CREATED , content = item ) \u8b66\u544a \u5f53\u4f60\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a\u50cf\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 Response \u5bf9\u8c61\u65f6\uff0c\u5b83\u4f1a\u76f4\u63a5\u8fd4\u56de\u3002 FastAPI \u4e0d\u4f1a\u7528\u6a21\u578b\u7b49\u5bf9\u8be5\u54cd\u5e94\u8fdb\u884c\u5e8f\u5217\u5316\u3002 \u786e\u4fdd\u5176\u4e2d\u6709\u4f60\u60f3\u8981\u7684\u6570\u636e\uff0c\u4e14\u8fd4\u56de\u7684\u503c\u4e3a\u5408\u6cd5\u7684 JSON\uff08\u5982\u679c\u4f60\u4f7f\u7528 JSONResponse \u7684\u8bdd\uff09\u3002 \u6280\u672f\u7ec6\u8282 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import JSONResponse \u3002\u3000 \u51fa\u4e8e\u65b9\u4fbf\uff0c FastAPI \u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u540c starlette.responses \u4e00\u6837\u7684 fastapi.responses \u3002\u4f46\u662f\u5927\u591a\u6570\u53ef\u7528\u7684\u54cd\u5e94\u90fd\u662f\u76f4\u63a5\u6765\u81ea Starlette\u3002 status \u4e5f\u662f\u4e00\u6837\u3002","title":"\u989d\u5916\u7684\u72b6\u6001\u7801"},{"location":"advanced/additional-status-codes/#openapi-api","text":"\u5982\u679c\u4f60\u76f4\u63a5\u8fd4\u56de\u989d\u5916\u7684\u72b6\u6001\u7801\u548c\u54cd\u5e94\uff0c\u5b83\u4eec\u4e0d\u4f1a\u5305\u542b\u5728 OpenAPI \u65b9\u6848\uff08API \u6587\u6863\uff09\u4e2d\uff0c\u56e0\u4e3a FastAPI \u6ca1\u529e\u6cd5\u9884\u5148\u77e5\u9053\u4f60\u8981\u8fd4\u56de\u4ec0\u4e48\u3002 \u4f46\u662f\u4f60\u53ef\u4ee5\u4f7f\u7528 \u989d\u5916\u7684\u54cd\u5e94 \u5728\u4ee3\u7801\u4e2d\u8bb0\u5f55\u8fd9\u4e9b\u5185\u5bb9\u3002","title":"OpenAPI \u548c API \u6587\u6863"},{"location":"advanced/advanced-dependencies/","text":"Advanced Dependencies \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Parameterized dependencies \u00b6 All the dependencies we have seen are a fixed function or class. But there could be cases where you want to be able to set parameters on the dependency, without having to declare many different functions or classes. Let's imagine that we want to have a dependency that checks if the query parameter q contains some fixed content. But we want to be able to parameterize that fixed content. A \"callable\" instance \u00b6 In Python there's a way to make an instance of a class a \"callable\". Not the class itself (which is already a callable), but an instance of that class. To do that, we declare a method __call__ : from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } In this case, this __call__ is what FastAPI will use to check for additional parameters and sub-dependencies, and this is what will be called to pass a value to the parameter in your path operation function later. Parameterize the instance \u00b6 And now, we can use __init__ to declare the parameters of the instance that we can use to \"parameterize\" the dependency: from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } In this case, FastAPI won't ever touch or care about __init__ , we will use it directly in our code. Create an instance \u00b6 We could create an instance of this class with: from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } And that way we are able to \"parameterize\" our dependency, that now has \"bar\" inside of it, as the attribute checker.fixed_content . Use the instance as a dependency \u00b6 Then, we could use this checker in a Depends(checker) , instead of Depends(FixedContentQueryChecker) , because the dependency is the instance, checker , not the class itself. And when solving the dependency, FastAPI will call this checker like: checker ( q = \"somequery\" ) ...and pass whatever that returns as the value of the dependency in our path operation function as the parameter fixed_content_included : from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } Tip All this might seem contrived. And it might not be very clear how is it useful yet. These examples are intentionally simple, but show how it all works. In the chapters about security, there are utility functions that are implemented in this same way. If you understood all this, you already know how those utility tools for security work underneath.","title":"Advanced Dependencies"},{"location":"advanced/advanced-dependencies/#advanced-dependencies","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing .","title":"Advanced Dependencies"},{"location":"advanced/advanced-dependencies/#parameterized-dependencies","text":"All the dependencies we have seen are a fixed function or class. But there could be cases where you want to be able to set parameters on the dependency, without having to declare many different functions or classes. Let's imagine that we want to have a dependency that checks if the query parameter q contains some fixed content. But we want to be able to parameterize that fixed content.","title":"Parameterized dependencies"},{"location":"advanced/advanced-dependencies/#a-callable-instance","text":"In Python there's a way to make an instance of a class a \"callable\". Not the class itself (which is already a callable), but an instance of that class. To do that, we declare a method __call__ : from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } In this case, this __call__ is what FastAPI will use to check for additional parameters and sub-dependencies, and this is what will be called to pass a value to the parameter in your path operation function later.","title":"A \"callable\" instance"},{"location":"advanced/advanced-dependencies/#parameterize-the-instance","text":"And now, we can use __init__ to declare the parameters of the instance that we can use to \"parameterize\" the dependency: from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } In this case, FastAPI won't ever touch or care about __init__ , we will use it directly in our code.","title":"Parameterize the instance"},{"location":"advanced/advanced-dependencies/#create-an-instance","text":"We could create an instance of this class with: from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } And that way we are able to \"parameterize\" our dependency, that now has \"bar\" inside of it, as the attribute checker.fixed_content .","title":"Create an instance"},{"location":"advanced/advanced-dependencies/#use-the-instance-as-a-dependency","text":"Then, we could use this checker in a Depends(checker) , instead of Depends(FixedContentQueryChecker) , because the dependency is the instance, checker , not the class itself. And when solving the dependency, FastAPI will call this checker like: checker ( q = \"somequery\" ) ...and pass whatever that returns as the value of the dependency in our path operation function as the parameter fixed_content_included : from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } Tip All this might seem contrived. And it might not be very clear how is it useful yet. These examples are intentionally simple, but show how it all works. In the chapters about security, there are utility functions that are implemented in this same way. If you understood all this, you already know how those utility tools for security work underneath.","title":"Use the instance as a dependency"},{"location":"advanced/async-sql-databases/","text":"Async SQL (Relational) Databases \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can also use encode/databases with FastAPI to connect to databases using async and await . It is compatible with: PostgreSQL MySQL SQLite In this example, we'll use SQLite , because it uses a single file and Python has integrated support. So, you can copy this example and run it as is. Later, for your production application, you might want to use a database server like PostgreSQL . Tip You could adopt ideas from the section about SQLAlchemy ORM ( SQL (Relational) Databases ), like using utility functions to perform operations in the database, independent of your FastAPI code. This section doesn't apply those ideas, to be equivalent to the counterpart in Starlette . Import and set up SQLAlchemy \u00b6 Import SQLAlchemy . Create a metadata object. Create a table notes using the metadata object. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Tip Notice that all this code is pure SQLAlchemy Core. databases is not doing anything here yet. Import and set up databases \u00b6 Import databases . Create a DATABASE_URL . Create a database object. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Tip If you were connecting to a different database (e.g. PostgreSQL), you would need to change the DATABASE_URL . Create the tables \u00b6 In this case, we are creating the tables in the same Python file, but in production, you would probably want to create them with Alembic, integrated with migrations, etc. Here, this section would run directly, right before starting your FastAPI application. Create an engine . Create all the tables from the metadata object. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Create models \u00b6 Create Pydantic models for: Notes to be created ( NoteIn ). Notes to be returned ( Note ). from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } By creating these Pydantic models, the input data will be validated, serialized (converted), and annotated (documented). So, you will be able to see it all in the interactive API docs. Connect and disconnect \u00b6 Create your FastAPI application. Create event handlers to connect and disconnect from the database. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Read notes \u00b6 Create the path operation function to read notes: from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Note Notice that as we communicate with the database using await , the path operation function is declared with async . Notice the response_model=List[Note] \u00b6 It uses typing.List . That documents (and validates, serializes, filters) the output data, as a list of Note s. Create notes \u00b6 Create the path operation function to create notes: from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Note Notice that as we communicate with the database using await , the path operation function is declared with async . About {**note.dict(), \"id\": last_record_id} \u00b6 note is a Pydantic Note object. note.dict() returns a dict with its data, something like: { \"text\" : \"Some note\" , \"completed\" : False , } but it doesn't have the id field. So we create a new dict , that contains the key-value pairs from note.dict() with: { ** note . dict ()} **note.dict() \"unpacks\" the key value pairs directly, so, {**note.dict()} would be, more or less, a copy of note.dict() . And then, we extend that copy dict , adding another key-value pair: \"id\": last_record_id : { ** note . dict (), \"id\" : last_record_id } So, the final result returned would be something like: { \"id\" : 1 , \"text\" : \"Some note\" , \"completed\" : False , } Check it \u00b6 You can copy this code as is, and see the docs at http://127.0.0.1:8000/docs . There you can see all your API documented and interact with it: More info \u00b6 You can read more about encode/databases at its GitHub page .","title":"Async SQL (Relational) Databases"},{"location":"advanced/async-sql-databases/#async-sql-relational-databases","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can also use encode/databases with FastAPI to connect to databases using async and await . It is compatible with: PostgreSQL MySQL SQLite In this example, we'll use SQLite , because it uses a single file and Python has integrated support. So, you can copy this example and run it as is. Later, for your production application, you might want to use a database server like PostgreSQL . Tip You could adopt ideas from the section about SQLAlchemy ORM ( SQL (Relational) Databases ), like using utility functions to perform operations in the database, independent of your FastAPI code. This section doesn't apply those ideas, to be equivalent to the counterpart in Starlette .","title":"Async SQL (Relational) Databases"},{"location":"advanced/async-sql-databases/#import-and-set-up-sqlalchemy","text":"Import SQLAlchemy . Create a metadata object. Create a table notes using the metadata object. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Tip Notice that all this code is pure SQLAlchemy Core. databases is not doing anything here yet.","title":"Import and set up SQLAlchemy"},{"location":"advanced/async-sql-databases/#import-and-set-up-databases","text":"Import databases . Create a DATABASE_URL . Create a database object. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Tip If you were connecting to a different database (e.g. PostgreSQL), you would need to change the DATABASE_URL .","title":"Import and set up databases"},{"location":"advanced/async-sql-databases/#create-the-tables","text":"In this case, we are creating the tables in the same Python file, but in production, you would probably want to create them with Alembic, integrated with migrations, etc. Here, this section would run directly, right before starting your FastAPI application. Create an engine . Create all the tables from the metadata object. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id }","title":"Create the tables"},{"location":"advanced/async-sql-databases/#create-models","text":"Create Pydantic models for: Notes to be created ( NoteIn ). Notes to be returned ( Note ). from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } By creating these Pydantic models, the input data will be validated, serialized (converted), and annotated (documented). So, you will be able to see it all in the interactive API docs.","title":"Create models"},{"location":"advanced/async-sql-databases/#connect-and-disconnect","text":"Create your FastAPI application. Create event handlers to connect and disconnect from the database. from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id }","title":"Connect and disconnect"},{"location":"advanced/async-sql-databases/#read-notes","text":"Create the path operation function to read notes: from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Note Notice that as we communicate with the database using await , the path operation function is declared with async .","title":"Read notes"},{"location":"advanced/async-sql-databases/#notice-the-response_modellistnote","text":"It uses typing.List . That documents (and validates, serializes, filters) the output data, as a list of Note s.","title":"Notice the response_model=List[Note]"},{"location":"advanced/async-sql-databases/#create-notes","text":"Create the path operation function to create notes: from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } Note Notice that as we communicate with the database using await , the path operation function is declared with async .","title":"Create notes"},{"location":"advanced/async-sql-databases/#about-notedict-id-last_record_id","text":"note is a Pydantic Note object. note.dict() returns a dict with its data, something like: { \"text\" : \"Some note\" , \"completed\" : False , } but it doesn't have the id field. So we create a new dict , that contains the key-value pairs from note.dict() with: { ** note . dict ()} **note.dict() \"unpacks\" the key value pairs directly, so, {**note.dict()} would be, more or less, a copy of note.dict() . And then, we extend that copy dict , adding another key-value pair: \"id\": last_record_id : { ** note . dict (), \"id\" : last_record_id } So, the final result returned would be something like: { \"id\" : 1 , \"text\" : \"Some note\" , \"completed\" : False , }","title":"About {**note.dict(), \"id\": last_record_id}"},{"location":"advanced/async-sql-databases/#check-it","text":"You can copy this code as is, and see the docs at http://127.0.0.1:8000/docs . There you can see all your API documented and interact with it:","title":"Check it"},{"location":"advanced/async-sql-databases/#more-info","text":"You can read more about encode/databases at its GitHub page .","title":"More info"},{"location":"advanced/async-tests/","text":"Async Tests \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You have already seen how to test your FastAPI applications using the provided TestClient , but with it, you can't test or run any other async function in your (synchronous) pytest functions. Being able to use asynchronous functions in your tests could be useful, for example, when you're querying your database asynchronously. Imagine you want to test sending requests to your FastAPI application and then verify that your backend successfully wrote the correct data in the database, while using an async database library. Let's look at how we can make that work. pytest.mark.anyio \u00b6 If we want to call asynchronous functions in our tests, our test functions have to be asynchronous. Anyio provides a neat plugin for this, that allows us to specify that some test functions are to be called asynchronously. HTTPX \u00b6 Even if your FastAPI application uses normal def functions instead of async def , it is still an async application underneath. The TestClient does some magic inside to call the asynchronous FastAPI application in your normal def test functions, using standard pytest. But that magic doesn't work anymore when we're using it inside asynchronous functions. By running our tests asynchronously, we can no longer use the TestClient inside our test functions. Luckily there's a nice alternative, called HTTPX . HTTPX is an HTTP client for Python 3 that allows us to query our FastAPI application similarly to how we did it with the TestClient . If you're familiar with the Requests library, you'll find that the API of HTTPX is almost identical. The important difference for us is that with HTTPX we are not limited to synchronous, but can also make asynchronous requests. Example \u00b6 For a simple example, let's consider the following main.py module: from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Tomato\" } The test_main.py module that contains the tests for main.py could look like this now: import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } Run it \u00b6 You can run your tests as usual via: $ pytest ---> 100% In Detail \u00b6 The marker @pytest.mark.anyio tells pytest that this test function should be called asynchronously: import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } Tip Note that the test function is now async def instead of just def as before when using the TestClient . Then we can create an AsyncClient with the app, and send async requests to it, using await . import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } This is the equivalent to: response = client . get ( '/' ) that we used to make our requests with the TestClient . Tip Note that we're using async/await with the new AsyncClient - the request is asynchronous. Other Asynchronous Function Calls \u00b6 As the testing function is now asynchronous, you can now also call (and await ) other async functions apart from sending requests to your FastAPI application in your tests, exactly as you would call them anywhere else in your code. Tip If you encounter a RuntimeError: Task attached to a different loop when integrating asynchronous function calls in your tests (e.g. when using MongoDB's MotorClient ) Remember to instantiate objects that need an event loop only within async functions, e.g. an '@app.on_event(\"startup\") callback.","title":"Async Tests"},{"location":"advanced/async-tests/#async-tests","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You have already seen how to test your FastAPI applications using the provided TestClient , but with it, you can't test or run any other async function in your (synchronous) pytest functions. Being able to use asynchronous functions in your tests could be useful, for example, when you're querying your database asynchronously. Imagine you want to test sending requests to your FastAPI application and then verify that your backend successfully wrote the correct data in the database, while using an async database library. Let's look at how we can make that work.","title":"Async Tests"},{"location":"advanced/async-tests/#pytestmarkanyio","text":"If we want to call asynchronous functions in our tests, our test functions have to be asynchronous. Anyio provides a neat plugin for this, that allows us to specify that some test functions are to be called asynchronously.","title":"pytest.mark.anyio"},{"location":"advanced/async-tests/#httpx","text":"Even if your FastAPI application uses normal def functions instead of async def , it is still an async application underneath. The TestClient does some magic inside to call the asynchronous FastAPI application in your normal def test functions, using standard pytest. But that magic doesn't work anymore when we're using it inside asynchronous functions. By running our tests asynchronously, we can no longer use the TestClient inside our test functions. Luckily there's a nice alternative, called HTTPX . HTTPX is an HTTP client for Python 3 that allows us to query our FastAPI application similarly to how we did it with the TestClient . If you're familiar with the Requests library, you'll find that the API of HTTPX is almost identical. The important difference for us is that with HTTPX we are not limited to synchronous, but can also make asynchronous requests.","title":"HTTPX"},{"location":"advanced/async-tests/#example","text":"For a simple example, let's consider the following main.py module: from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Tomato\" } The test_main.py module that contains the tests for main.py could look like this now: import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" }","title":"Example"},{"location":"advanced/async-tests/#run-it","text":"You can run your tests as usual via: $ pytest ---> 100%","title":"Run it"},{"location":"advanced/async-tests/#in-detail","text":"The marker @pytest.mark.anyio tells pytest that this test function should be called asynchronously: import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } Tip Note that the test function is now async def instead of just def as before when using the TestClient . Then we can create an AsyncClient with the app, and send async requests to it, using await . import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } This is the equivalent to: response = client . get ( '/' ) that we used to make our requests with the TestClient . Tip Note that we're using async/await with the new AsyncClient - the request is asynchronous.","title":"In Detail"},{"location":"advanced/async-tests/#other-asynchronous-function-calls","text":"As the testing function is now asynchronous, you can now also call (and await ) other async functions apart from sending requests to your FastAPI application in your tests, exactly as you would call them anywhere else in your code. Tip If you encounter a RuntimeError: Task attached to a different loop when integrating asynchronous function calls in your tests (e.g. when using MongoDB's MotorClient ) Remember to instantiate objects that need an event loop only within async functions, e.g. an '@app.on_event(\"startup\") callback.","title":"Other Asynchronous Function Calls"},{"location":"advanced/behind-a-proxy/","text":"Behind a Proxy \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In some situations, you might need to use a proxy server like Traefik or Nginx with a configuration that adds an extra path prefix that is not seen by your application. In these cases you can use root_path to configure your application. The root_path is a mechanism provided by the ASGI specification (that FastAPI is built on, through Starlette). The root_path is used to handle these specific cases. And it's also used internally when mounting sub-applications. Proxy with a stripped path prefix \u00b6 Having a proxy with a stripped path prefix, in this case, means that you could declare a path at /app in your code, but then, you add a layer on top (the proxy) that would put your FastAPI application under a path like /api/v1 . In this case, the original path /app would actually be served at /api/v1/app . Even though all your code is written assuming there's just /app . And the proxy would be \"stripping\" the path prefix on the fly before transmitting the request to Uvicorn, keep your application convinced that it is serving at /app , so that you don't have to update all your code to include the prefix /api/v1 . Up to here, everything would work as normally. But then, when you open the integrated docs UI (the frontend), it would expect to get the OpenAPI schema at /openapi.json , instead of /api/v1/openapi.json . So, the frontend (that runs in the browser) would try to reach /openapi.json and wouldn't be able to get the OpenAPI schema. Because we have a proxy with a path prefix of /api/v1 for our app, the frontend needs to fetch the OpenAPI schema at /api/v1/openapi.json . graph LR browser(\"Browser\") proxy[\"Proxy on http://0.0.0.0:9999/api/v1/app\"] server[\"Server on http://127.0.0.1:8000/app\"] browser --> proxy proxy --> server Tip The IP 0.0.0.0 is commonly used to mean that the program listens on all the IPs available in that machine/server. The docs UI would also need the OpenAPI schema to declare that this API server is located at /api/v1 (behind the proxy). For example: { \"openapi\" : \"3.0.2\" , // More stuff here \"servers\" : [ { \"url\" : \"/api/v1\" } ], \"paths\" : { // More stuff here } } In this example, the \"Proxy\" could be something like Traefik . And the server would be something like Uvicorn , running your FastAPI application. Providing the root_path \u00b6 To achieve this, you can use the command line option --root-path like: $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) If you use Hypercorn, it also has the option --root-path . Technical Details The ASGI specification defines a root_path for this use case. And the --root-path command line option provides that root_path . Checking the current root_path \u00b6 You can get the current root_path used by your application for each request, it is part of the scope dictionary (that's part of the ASGI spec). Here we are including it in the message just for demonstration purposes. from fastapi import FastAPI , Request app = FastAPI () @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} Then, if you start Uvicorn with: $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) The response would be something like: { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } Setting the root_path in the FastAPI app \u00b6 Alternatively, if you don't have a way to provide a command line option like --root-path or equivalent, you can set the root_path parameter when creating your FastAPI app: from fastapi import FastAPI , Request app = FastAPI ( root_path = \"/api/v1\" ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} Passing the root_path to FastAPI would be the equivalent of passing the --root-path command line option to Uvicorn or Hypercorn. About root_path \u00b6 Have in mind that the server (Uvicorn) won't use that root_path for anything else than passing it to the app. But if you go with your browser to http://127.0.0.1:8000/app you will see the normal response: { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } So, it won't expect to be accessed at http://127.0.0.1:8000/api/v1/app . Uvicorn will expect the proxy to access Uvicorn at http://127.0.0.1:8000/app , and then it would be the proxy's responsibility to add the extra /api/v1 prefix on top. About proxies with a stripped path prefix \u00b6 Have in mind that a proxy with stripped path prefix is only one of the ways to configure it. Probably in many cases the default will be that the proxy doesn't have a stripped path prefix. In a case like that (without a stripped path prefix), the proxy would listen on something like https://myawesomeapp.com , and then if the browser goes to https://myawesomeapp.com/api/v1/app and your server (e.g. Uvicorn) listens on http://127.0.0.1:8000 the proxy (without a stripped path prefix) would access Uvicorn at the same path: http://127.0.0.1:8000/api/v1/app . Testing locally with Traefik \u00b6 You can easily run the experiment locally with a stripped path prefix using Traefik . Download Traefik , it's a single binary, you can extract the compressed file and run it directly from the terminal. Then create a file traefik.toml with: [entryPoints] [entryPoints.http] address = \":9999\" [providers] [providers.file] filename = \"routes.toml\" This tells Traefik to listen on port 9999 and to use another file routes.toml . Tip We are using port 9999 instead of the standard HTTP port 80 so that you don't have to run it with admin ( sudo ) privileges. Now create that other file routes.toml : [http] [http.middlewares] [http.middlewares.api-stripprefix.stripPrefix] prefixes = [ \"/api/v1\" ] [http.routers] [http.routers.app-http] entryPoints = [ \"http\" ] service = \"app\" rule = \"PathPrefix(`/api/v1`)\" middlewares = [ \"api-stripprefix\" ] [http.services] [http.services.app] [http.services.app.loadBalancer] [[http.services.app.loadBalancer.servers]] url = \"http://127.0.0.1:8000\" This file configures Traefik to use the path prefix /api/v1 . And then it will redirect its requests to your Uvicorn running on http://127.0.0.1:8000 . Now start Traefik: $ ./traefik --configFile = traefik.toml INFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml And now start your app with Uvicorn, using the --root-path option: $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Check the responses \u00b6 Now, if you go to the URL with the port for Uvicorn: http://127.0.0.1:8000/app , you will see the normal response: { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } Tip Notice that even though you are accessing it at http://127.0.0.1:8000/app it shows the root_path of /api/v1 , taken from the option --root-path . And now open the URL with the port for Traefik, including the path prefix: http://127.0.0.1:9999/api/v1/app . We get the same response: { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } but this time at the URL with the prefix path provided by the proxy: /api/v1 . Of course, the idea here is that everyone would access the app through the proxy, so the version with the path prefix /app/v1 is the \"correct\" one. And the version without the path prefix ( http://127.0.0.1:8000/app ), provided by Uvicorn directly, would be exclusively for the proxy (Traefik) to access it. That demonstrates how the Proxy (Traefik) uses the path prefix and how the server (Uvicorn) uses the root_path from the option --root-path . Check the docs UI \u00b6 But here's the fun part. \u2728 The \"official\" way to access the app would be through the proxy with the path prefix that we defined. So, as we would expect, if you try the docs UI served by Uvicorn directly, without the path prefix in the URL, it won't work, because it expects to be accessed through the proxy. You can check it at http://127.0.0.1:8000/docs : But if we access the docs UI at the \"official\" URL using the proxy with port 9999 , at /api/v1/docs , it works correctly! \ud83c\udf89 You can check it at http://127.0.0.1:9999/api/v1/docs : Right as we wanted it. \u2714\ufe0f This is because FastAPI uses this root_path to create the default server in OpenAPI with the URL provided by root_path . Additional servers \u00b6 Warning This is a more advanced use case. Feel free to skip it. By default, FastAPI will create a server in the OpenAPI schema with the URL for the root_path . But you can also provide other alternative servers , for example if you want the same docs UI to interact with a staging and production environments. If you pass a custom list of servers and there's a root_path (because your API lives behind a proxy), FastAPI will insert a \"server\" with this root_path at the beginning of the list. For example: from fastapi import FastAPI , Request app = FastAPI ( servers = [ { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" }, ], root_path = \"/api/v1\" , ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} Will generate an OpenAPI schema like: { \"openapi\" : \"3.0.2\" , // More stuff here \"servers\" : [ { \"url\" : \"/api/v1\" }, { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" } ], \"paths\" : { // More stuff here } } Tip Notice the auto-generated server with a url value of /api/v1 , taken from the root_path . In the docs UI at http://127.0.0.1:9999/api/v1/docs it would look like: Tip The docs UI will interact with the server that you select. Disable automatic server from root_path \u00b6 If you don't want FastAPI to include an automatic server using the root_path , you can use the parameter root_path_in_servers=False : from fastapi import FastAPI , Request app = FastAPI ( servers = [ { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" }, ], root_path = \"/api/v1\" , root_path_in_servers = False , ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} and then it won't include it in the OpenAPI schema. Mounting a sub-application \u00b6 If you need to mount a sub-application (as described in Sub Applications - Mounts ) while also using a proxy with root_path , you can do it normally, as you would expect. FastAPI will internally use the root_path smartly, so it will just work. \u2728","title":"Behind a Proxy"},{"location":"advanced/behind-a-proxy/#behind-a-proxy","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In some situations, you might need to use a proxy server like Traefik or Nginx with a configuration that adds an extra path prefix that is not seen by your application. In these cases you can use root_path to configure your application. The root_path is a mechanism provided by the ASGI specification (that FastAPI is built on, through Starlette). The root_path is used to handle these specific cases. And it's also used internally when mounting sub-applications.","title":"Behind a Proxy"},{"location":"advanced/behind-a-proxy/#proxy-with-a-stripped-path-prefix","text":"Having a proxy with a stripped path prefix, in this case, means that you could declare a path at /app in your code, but then, you add a layer on top (the proxy) that would put your FastAPI application under a path like /api/v1 . In this case, the original path /app would actually be served at /api/v1/app . Even though all your code is written assuming there's just /app . And the proxy would be \"stripping\" the path prefix on the fly before transmitting the request to Uvicorn, keep your application convinced that it is serving at /app , so that you don't have to update all your code to include the prefix /api/v1 . Up to here, everything would work as normally. But then, when you open the integrated docs UI (the frontend), it would expect to get the OpenAPI schema at /openapi.json , instead of /api/v1/openapi.json . So, the frontend (that runs in the browser) would try to reach /openapi.json and wouldn't be able to get the OpenAPI schema. Because we have a proxy with a path prefix of /api/v1 for our app, the frontend needs to fetch the OpenAPI schema at /api/v1/openapi.json . graph LR browser(\"Browser\") proxy[\"Proxy on http://0.0.0.0:9999/api/v1/app\"] server[\"Server on http://127.0.0.1:8000/app\"] browser --> proxy proxy --> server Tip The IP 0.0.0.0 is commonly used to mean that the program listens on all the IPs available in that machine/server. The docs UI would also need the OpenAPI schema to declare that this API server is located at /api/v1 (behind the proxy). For example: { \"openapi\" : \"3.0.2\" , // More stuff here \"servers\" : [ { \"url\" : \"/api/v1\" } ], \"paths\" : { // More stuff here } } In this example, the \"Proxy\" could be something like Traefik . And the server would be something like Uvicorn , running your FastAPI application.","title":"Proxy with a stripped path prefix"},{"location":"advanced/behind-a-proxy/#providing-the-root_path","text":"To achieve this, you can use the command line option --root-path like: $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) If you use Hypercorn, it also has the option --root-path . Technical Details The ASGI specification defines a root_path for this use case. And the --root-path command line option provides that root_path .","title":"Providing the root_path"},{"location":"advanced/behind-a-proxy/#checking-the-current-root_path","text":"You can get the current root_path used by your application for each request, it is part of the scope dictionary (that's part of the ASGI spec). Here we are including it in the message just for demonstration purposes. from fastapi import FastAPI , Request app = FastAPI () @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} Then, if you start Uvicorn with: $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) The response would be something like: { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" }","title":"Checking the current root_path"},{"location":"advanced/behind-a-proxy/#setting-the-root_path-in-the-fastapi-app","text":"Alternatively, if you don't have a way to provide a command line option like --root-path or equivalent, you can set the root_path parameter when creating your FastAPI app: from fastapi import FastAPI , Request app = FastAPI ( root_path = \"/api/v1\" ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} Passing the root_path to FastAPI would be the equivalent of passing the --root-path command line option to Uvicorn or Hypercorn.","title":"Setting the root_path in the FastAPI app"},{"location":"advanced/behind-a-proxy/#about-root_path","text":"Have in mind that the server (Uvicorn) won't use that root_path for anything else than passing it to the app. But if you go with your browser to http://127.0.0.1:8000/app you will see the normal response: { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } So, it won't expect to be accessed at http://127.0.0.1:8000/api/v1/app . Uvicorn will expect the proxy to access Uvicorn at http://127.0.0.1:8000/app , and then it would be the proxy's responsibility to add the extra /api/v1 prefix on top.","title":"About root_path"},{"location":"advanced/behind-a-proxy/#about-proxies-with-a-stripped-path-prefix","text":"Have in mind that a proxy with stripped path prefix is only one of the ways to configure it. Probably in many cases the default will be that the proxy doesn't have a stripped path prefix. In a case like that (without a stripped path prefix), the proxy would listen on something like https://myawesomeapp.com , and then if the browser goes to https://myawesomeapp.com/api/v1/app and your server (e.g. Uvicorn) listens on http://127.0.0.1:8000 the proxy (without a stripped path prefix) would access Uvicorn at the same path: http://127.0.0.1:8000/api/v1/app .","title":"About proxies with a stripped path prefix"},{"location":"advanced/behind-a-proxy/#testing-locally-with-traefik","text":"You can easily run the experiment locally with a stripped path prefix using Traefik . Download Traefik , it's a single binary, you can extract the compressed file and run it directly from the terminal. Then create a file traefik.toml with: [entryPoints] [entryPoints.http] address = \":9999\" [providers] [providers.file] filename = \"routes.toml\" This tells Traefik to listen on port 9999 and to use another file routes.toml . Tip We are using port 9999 instead of the standard HTTP port 80 so that you don't have to run it with admin ( sudo ) privileges. Now create that other file routes.toml : [http] [http.middlewares] [http.middlewares.api-stripprefix.stripPrefix] prefixes = [ \"/api/v1\" ] [http.routers] [http.routers.app-http] entryPoints = [ \"http\" ] service = \"app\" rule = \"PathPrefix(`/api/v1`)\" middlewares = [ \"api-stripprefix\" ] [http.services] [http.services.app] [http.services.app.loadBalancer] [[http.services.app.loadBalancer.servers]] url = \"http://127.0.0.1:8000\" This file configures Traefik to use the path prefix /api/v1 . And then it will redirect its requests to your Uvicorn running on http://127.0.0.1:8000 . Now start Traefik: $ ./traefik --configFile = traefik.toml INFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml And now start your app with Uvicorn, using the --root-path option: $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Testing locally with Traefik"},{"location":"advanced/behind-a-proxy/#check-the-responses","text":"Now, if you go to the URL with the port for Uvicorn: http://127.0.0.1:8000/app , you will see the normal response: { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } Tip Notice that even though you are accessing it at http://127.0.0.1:8000/app it shows the root_path of /api/v1 , taken from the option --root-path . And now open the URL with the port for Traefik, including the path prefix: http://127.0.0.1:9999/api/v1/app . We get the same response: { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } but this time at the URL with the prefix path provided by the proxy: /api/v1 . Of course, the idea here is that everyone would access the app through the proxy, so the version with the path prefix /app/v1 is the \"correct\" one. And the version without the path prefix ( http://127.0.0.1:8000/app ), provided by Uvicorn directly, would be exclusively for the proxy (Traefik) to access it. That demonstrates how the Proxy (Traefik) uses the path prefix and how the server (Uvicorn) uses the root_path from the option --root-path .","title":"Check the responses"},{"location":"advanced/behind-a-proxy/#check-the-docs-ui","text":"But here's the fun part. \u2728 The \"official\" way to access the app would be through the proxy with the path prefix that we defined. So, as we would expect, if you try the docs UI served by Uvicorn directly, without the path prefix in the URL, it won't work, because it expects to be accessed through the proxy. You can check it at http://127.0.0.1:8000/docs : But if we access the docs UI at the \"official\" URL using the proxy with port 9999 , at /api/v1/docs , it works correctly! \ud83c\udf89 You can check it at http://127.0.0.1:9999/api/v1/docs : Right as we wanted it. \u2714\ufe0f This is because FastAPI uses this root_path to create the default server in OpenAPI with the URL provided by root_path .","title":"Check the docs UI"},{"location":"advanced/behind-a-proxy/#additional-servers","text":"Warning This is a more advanced use case. Feel free to skip it. By default, FastAPI will create a server in the OpenAPI schema with the URL for the root_path . But you can also provide other alternative servers , for example if you want the same docs UI to interact with a staging and production environments. If you pass a custom list of servers and there's a root_path (because your API lives behind a proxy), FastAPI will insert a \"server\" with this root_path at the beginning of the list. For example: from fastapi import FastAPI , Request app = FastAPI ( servers = [ { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" }, ], root_path = \"/api/v1\" , ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} Will generate an OpenAPI schema like: { \"openapi\" : \"3.0.2\" , // More stuff here \"servers\" : [ { \"url\" : \"/api/v1\" }, { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" } ], \"paths\" : { // More stuff here } } Tip Notice the auto-generated server with a url value of /api/v1 , taken from the root_path . In the docs UI at http://127.0.0.1:9999/api/v1/docs it would look like: Tip The docs UI will interact with the server that you select.","title":"Additional servers"},{"location":"advanced/behind-a-proxy/#disable-automatic-server-from-root_path","text":"If you don't want FastAPI to include an automatic server using the root_path , you can use the parameter root_path_in_servers=False : from fastapi import FastAPI , Request app = FastAPI ( servers = [ { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" }, ], root_path = \"/api/v1\" , root_path_in_servers = False , ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} and then it won't include it in the OpenAPI schema.","title":"Disable automatic server from root_path"},{"location":"advanced/behind-a-proxy/#mounting-a-sub-application","text":"If you need to mount a sub-application (as described in Sub Applications - Mounts ) while also using a proxy with root_path , you can do it normally, as you would expect. FastAPI will internally use the root_path smartly, so it will just work. \u2728","title":"Mounting a sub-application"},{"location":"advanced/conditional-openapi/","text":"Conditional OpenAPI \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . If you needed to, you could use settings and environment variables to configure OpenAPI conditionally depending on the environment, and even disable it entirely. About security, APIs, and docs \u00b6 Hiding your documentation user interfaces in production shouldn't be the way to protect your API. That doesn't add any extra security to your API, the path operations will still be available where they are. If there's a security flaw in your code, it will still exist. Hiding the documentation just makes it more difficult to understand how to interact with your API, and could make it more difficult for you to debug it in production. It could be considered simply a form of Security through obscurity . If you want to secure your API, there are several better things you can do, for example: Make sure you have well defined Pydantic models for your request bodies and responses. Configure any required permissions and roles using dependencies. Never store plaintext passwords, only password hashes. Implement and use well-known cryptographic tools, like Passlib and JWT tokens, etc. Add more granular permission controls with OAuth2 scopes where needed. ...etc. Nevertheless, you might have a very specific use case where you really need to disable the API docs for some environment (e.g. for production) or depending on configurations from environment variables. Conditional OpenAPI from settings and env vars \u00b6 You can easily use the same Pydantic settings to configure your generated OpenAPI and the docs UIs. For example: from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): openapi_url : str = \"/openapi.json\" settings = Settings () app = FastAPI ( openapi_url = settings . openapi_url ) @app . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } Here we declare the setting openapi_url with the same default of \"/openapi.json\" . And then we use it when creating the FastAPI app. Then you could disable OpenAPI (including the UI docs) by setting the environment variable OPENAPI_URL to the empty string, like: $ OPENAPI_URL = uvicorn main:app <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Then if you go to the URLs at /openapi.json , /docs , or /redoc you will just get a 404 Not Found error like: { \"detail\" : \"Not Found\" }","title":"Conditional OpenAPI"},{"location":"advanced/conditional-openapi/#conditional-openapi","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . If you needed to, you could use settings and environment variables to configure OpenAPI conditionally depending on the environment, and even disable it entirely.","title":"Conditional OpenAPI"},{"location":"advanced/conditional-openapi/#about-security-apis-and-docs","text":"Hiding your documentation user interfaces in production shouldn't be the way to protect your API. That doesn't add any extra security to your API, the path operations will still be available where they are. If there's a security flaw in your code, it will still exist. Hiding the documentation just makes it more difficult to understand how to interact with your API, and could make it more difficult for you to debug it in production. It could be considered simply a form of Security through obscurity . If you want to secure your API, there are several better things you can do, for example: Make sure you have well defined Pydantic models for your request bodies and responses. Configure any required permissions and roles using dependencies. Never store plaintext passwords, only password hashes. Implement and use well-known cryptographic tools, like Passlib and JWT tokens, etc. Add more granular permission controls with OAuth2 scopes where needed. ...etc. Nevertheless, you might have a very specific use case where you really need to disable the API docs for some environment (e.g. for production) or depending on configurations from environment variables.","title":"About security, APIs, and docs"},{"location":"advanced/conditional-openapi/#conditional-openapi-from-settings-and-env-vars","text":"You can easily use the same Pydantic settings to configure your generated OpenAPI and the docs UIs. For example: from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): openapi_url : str = \"/openapi.json\" settings = Settings () app = FastAPI ( openapi_url = settings . openapi_url ) @app . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } Here we declare the setting openapi_url with the same default of \"/openapi.json\" . And then we use it when creating the FastAPI app. Then you could disable OpenAPI (including the UI docs) by setting the environment variable OPENAPI_URL to the empty string, like: $ OPENAPI_URL = uvicorn main:app <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Then if you go to the URLs at /openapi.json , /docs , or /redoc you will just get a 404 Not Found error like: { \"detail\" : \"Not Found\" }","title":"Conditional OpenAPI from settings and env vars"},{"location":"advanced/custom-request-and-route/","text":"Custom Request and APIRoute class \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In some cases, you may want to override the logic used by the Request and APIRoute classes. In particular, this may be a good alternative to logic in a middleware. For example, if you want to read or manipulate the request body before it is processed by your application. Danger This is an \"advanced\" feature. If you are just starting with FastAPI you might want to skip this section. Use cases \u00b6 Some use cases include: Converting non-JSON request bodies to JSON (e.g. msgpack ). Decompressing gzip-compressed request bodies. Automatically logging all request bodies. Handling custom request body encodings \u00b6 Let's see how to make use of a custom Request subclass to decompress gzip requests. And an APIRoute subclass to use that custom request class. Create a custom GzipRequest class \u00b6 Tip This is a toy example to demonstrate how it works, if you need Gzip support, you can use the provided GzipMiddleware . First, we create a GzipRequest class, which will overwrite the Request.body() method to decompress the body in the presence of an appropriate header. If there's no gzip in the header, it will not try to decompress the body. That way, the same route class can handle gzip compressed or uncompressed requests. import gzip from typing import Callable , List from fastapi import Body , FastAPI , Request , Response from fastapi.routing import APIRoute class GzipRequest ( Request ): async def body ( self ) -> bytes : if not hasattr ( self , \"_body\" ): body = await super () . body () if \"gzip\" in self . headers . getlist ( \"Content-Encoding\" ): body = gzip . decompress ( body ) self . _body = body return self . _body class GzipRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : request = GzipRequest ( request . scope , request . receive ) return await original_route_handler ( request ) return custom_route_handler app = FastAPI () app . router . route_class = GzipRoute @app . post ( \"/sum\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return { \"sum\" : sum ( numbers )} Create a custom GzipRoute class \u00b6 Next, we create a custom subclass of fastapi.routing.APIRoute that will make use of the GzipRequest . This time, it will overwrite the method APIRoute.get_route_handler() . This method returns a function. And that function is what will receive a request and return a response. Here we use it to create a GzipRequest from the original request. import gzip from typing import Callable , List from fastapi import Body , FastAPI , Request , Response from fastapi.routing import APIRoute class GzipRequest ( Request ): async def body ( self ) -> bytes : if not hasattr ( self , \"_body\" ): body = await super () . body () if \"gzip\" in self . headers . getlist ( \"Content-Encoding\" ): body = gzip . decompress ( body ) self . _body = body return self . _body class GzipRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : request = GzipRequest ( request . scope , request . receive ) return await original_route_handler ( request ) return custom_route_handler app = FastAPI () app . router . route_class = GzipRoute @app . post ( \"/sum\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return { \"sum\" : sum ( numbers )} Technical Details A Request has a request.scope attribute, that's just a Python dict containing the metadata related to the request. A Request also has a request.receive , that's a function to \"receive\" the body of the request. The scope dict and receive function are both part of the ASGI specification. And those two things, scope and receive , are what is needed to create a new Request instance. To learn more about the Request check Starlette's docs about Requests . The only thing the function returned by GzipRequest.get_route_handler does differently is convert the Request to a GzipRequest . Doing this, our GzipRequest will take care of decompressing the data (if necessary) before passing it to our path operations . After that, all of the processing logic is the same. But because of our changes in GzipRequest.body , the request body will be automatically decompressed when it is loaded by FastAPI when needed. Accessing the request body in an exception handler \u00b6 Tip To solve this same problem, it's probably a lot easier to use the body in a custom handler for RequestValidationError ( Handling Errors ). But this example is still valid and it shows how to interact with the internal components. We can also use this same approach to access the request body in an exception handler. All we need to do is handle the request inside a try / except block: from typing import Callable , List from fastapi import Body , FastAPI , HTTPException , Request , Response from fastapi.exceptions import RequestValidationError from fastapi.routing import APIRoute class ValidationErrorLoggingRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : try : return await original_route_handler ( request ) except RequestValidationError as exc : body = await request . body () detail = { \"errors\" : exc . errors (), \"body\" : body . decode ()} raise HTTPException ( status_code = 422 , detail = detail ) return custom_route_handler app = FastAPI () app . router . route_class = ValidationErrorLoggingRoute @app . post ( \"/\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return sum ( numbers ) If an exception occurs, the Request instance will still be in scope, so we can read and make use of the request body when handling the error: from typing import Callable , List from fastapi import Body , FastAPI , HTTPException , Request , Response from fastapi.exceptions import RequestValidationError from fastapi.routing import APIRoute class ValidationErrorLoggingRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : try : return await original_route_handler ( request ) except RequestValidationError as exc : body = await request . body () detail = { \"errors\" : exc . errors (), \"body\" : body . decode ()} raise HTTPException ( status_code = 422 , detail = detail ) return custom_route_handler app = FastAPI () app . router . route_class = ValidationErrorLoggingRoute @app . post ( \"/\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return sum ( numbers ) Custom APIRoute class in a router \u00b6 You can also set the route_class parameter of an APIRouter : import time from typing import Callable from fastapi import APIRouter , FastAPI , Request , Response from fastapi.routing import APIRoute class TimedRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : before = time . time () response : Response = await original_route_handler ( request ) duration = time . time () - before response . headers [ \"X-Response-Time\" ] = str ( duration ) print ( f \"route duration: { duration } \" ) print ( f \"route response: { response } \" ) print ( f \"route response headers: { response . headers } \" ) return response return custom_route_handler app = FastAPI () router = APIRouter ( route_class = TimedRoute ) @app . get ( \"/\" ) async def not_timed (): return { \"message\" : \"Not timed\" } @router . get ( \"/timed\" ) async def timed (): return { \"message\" : \"It's the time of my life\" } app . include_router ( router ) In this example, the path operations under the router will use the custom TimedRoute class, and will have an extra X-Response-Time header in the response with the time it took to generate the response: import time from typing import Callable from fastapi import APIRouter , FastAPI , Request , Response from fastapi.routing import APIRoute class TimedRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : before = time . time () response : Response = await original_route_handler ( request ) duration = time . time () - before response . headers [ \"X-Response-Time\" ] = str ( duration ) print ( f \"route duration: { duration } \" ) print ( f \"route response: { response } \" ) print ( f \"route response headers: { response . headers } \" ) return response return custom_route_handler app = FastAPI () router = APIRouter ( route_class = TimedRoute ) @app . get ( \"/\" ) async def not_timed (): return { \"message\" : \"Not timed\" } @router . get ( \"/timed\" ) async def timed (): return { \"message\" : \"It's the time of my life\" } app . include_router ( router )","title":"Custom Request and APIRoute class"},{"location":"advanced/custom-request-and-route/#custom-request-and-apiroute-class","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In some cases, you may want to override the logic used by the Request and APIRoute classes. In particular, this may be a good alternative to logic in a middleware. For example, if you want to read or manipulate the request body before it is processed by your application. Danger This is an \"advanced\" feature. If you are just starting with FastAPI you might want to skip this section.","title":"Custom Request and APIRoute class"},{"location":"advanced/custom-request-and-route/#use-cases","text":"Some use cases include: Converting non-JSON request bodies to JSON (e.g. msgpack ). Decompressing gzip-compressed request bodies. Automatically logging all request bodies.","title":"Use cases"},{"location":"advanced/custom-request-and-route/#handling-custom-request-body-encodings","text":"Let's see how to make use of a custom Request subclass to decompress gzip requests. And an APIRoute subclass to use that custom request class.","title":"Handling custom request body encodings"},{"location":"advanced/custom-request-and-route/#create-a-custom-gziprequest-class","text":"Tip This is a toy example to demonstrate how it works, if you need Gzip support, you can use the provided GzipMiddleware . First, we create a GzipRequest class, which will overwrite the Request.body() method to decompress the body in the presence of an appropriate header. If there's no gzip in the header, it will not try to decompress the body. That way, the same route class can handle gzip compressed or uncompressed requests. import gzip from typing import Callable , List from fastapi import Body , FastAPI , Request , Response from fastapi.routing import APIRoute class GzipRequest ( Request ): async def body ( self ) -> bytes : if not hasattr ( self , \"_body\" ): body = await super () . body () if \"gzip\" in self . headers . getlist ( \"Content-Encoding\" ): body = gzip . decompress ( body ) self . _body = body return self . _body class GzipRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : request = GzipRequest ( request . scope , request . receive ) return await original_route_handler ( request ) return custom_route_handler app = FastAPI () app . router . route_class = GzipRoute @app . post ( \"/sum\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return { \"sum\" : sum ( numbers )}","title":"Create a custom GzipRequest class"},{"location":"advanced/custom-request-and-route/#create-a-custom-gziproute-class","text":"Next, we create a custom subclass of fastapi.routing.APIRoute that will make use of the GzipRequest . This time, it will overwrite the method APIRoute.get_route_handler() . This method returns a function. And that function is what will receive a request and return a response. Here we use it to create a GzipRequest from the original request. import gzip from typing import Callable , List from fastapi import Body , FastAPI , Request , Response from fastapi.routing import APIRoute class GzipRequest ( Request ): async def body ( self ) -> bytes : if not hasattr ( self , \"_body\" ): body = await super () . body () if \"gzip\" in self . headers . getlist ( \"Content-Encoding\" ): body = gzip . decompress ( body ) self . _body = body return self . _body class GzipRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : request = GzipRequest ( request . scope , request . receive ) return await original_route_handler ( request ) return custom_route_handler app = FastAPI () app . router . route_class = GzipRoute @app . post ( \"/sum\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return { \"sum\" : sum ( numbers )} Technical Details A Request has a request.scope attribute, that's just a Python dict containing the metadata related to the request. A Request also has a request.receive , that's a function to \"receive\" the body of the request. The scope dict and receive function are both part of the ASGI specification. And those two things, scope and receive , are what is needed to create a new Request instance. To learn more about the Request check Starlette's docs about Requests . The only thing the function returned by GzipRequest.get_route_handler does differently is convert the Request to a GzipRequest . Doing this, our GzipRequest will take care of decompressing the data (if necessary) before passing it to our path operations . After that, all of the processing logic is the same. But because of our changes in GzipRequest.body , the request body will be automatically decompressed when it is loaded by FastAPI when needed.","title":"Create a custom GzipRoute class"},{"location":"advanced/custom-request-and-route/#accessing-the-request-body-in-an-exception-handler","text":"Tip To solve this same problem, it's probably a lot easier to use the body in a custom handler for RequestValidationError ( Handling Errors ). But this example is still valid and it shows how to interact with the internal components. We can also use this same approach to access the request body in an exception handler. All we need to do is handle the request inside a try / except block: from typing import Callable , List from fastapi import Body , FastAPI , HTTPException , Request , Response from fastapi.exceptions import RequestValidationError from fastapi.routing import APIRoute class ValidationErrorLoggingRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : try : return await original_route_handler ( request ) except RequestValidationError as exc : body = await request . body () detail = { \"errors\" : exc . errors (), \"body\" : body . decode ()} raise HTTPException ( status_code = 422 , detail = detail ) return custom_route_handler app = FastAPI () app . router . route_class = ValidationErrorLoggingRoute @app . post ( \"/\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return sum ( numbers ) If an exception occurs, the Request instance will still be in scope, so we can read and make use of the request body when handling the error: from typing import Callable , List from fastapi import Body , FastAPI , HTTPException , Request , Response from fastapi.exceptions import RequestValidationError from fastapi.routing import APIRoute class ValidationErrorLoggingRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : try : return await original_route_handler ( request ) except RequestValidationError as exc : body = await request . body () detail = { \"errors\" : exc . errors (), \"body\" : body . decode ()} raise HTTPException ( status_code = 422 , detail = detail ) return custom_route_handler app = FastAPI () app . router . route_class = ValidationErrorLoggingRoute @app . post ( \"/\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return sum ( numbers )","title":"Accessing the request body in an exception handler"},{"location":"advanced/custom-request-and-route/#custom-apiroute-class-in-a-router","text":"You can also set the route_class parameter of an APIRouter : import time from typing import Callable from fastapi import APIRouter , FastAPI , Request , Response from fastapi.routing import APIRoute class TimedRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : before = time . time () response : Response = await original_route_handler ( request ) duration = time . time () - before response . headers [ \"X-Response-Time\" ] = str ( duration ) print ( f \"route duration: { duration } \" ) print ( f \"route response: { response } \" ) print ( f \"route response headers: { response . headers } \" ) return response return custom_route_handler app = FastAPI () router = APIRouter ( route_class = TimedRoute ) @app . get ( \"/\" ) async def not_timed (): return { \"message\" : \"Not timed\" } @router . get ( \"/timed\" ) async def timed (): return { \"message\" : \"It's the time of my life\" } app . include_router ( router ) In this example, the path operations under the router will use the custom TimedRoute class, and will have an extra X-Response-Time header in the response with the time it took to generate the response: import time from typing import Callable from fastapi import APIRouter , FastAPI , Request , Response from fastapi.routing import APIRoute class TimedRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : before = time . time () response : Response = await original_route_handler ( request ) duration = time . time () - before response . headers [ \"X-Response-Time\" ] = str ( duration ) print ( f \"route duration: { duration } \" ) print ( f \"route response: { response } \" ) print ( f \"route response headers: { response . headers } \" ) return response return custom_route_handler app = FastAPI () router = APIRouter ( route_class = TimedRoute ) @app . get ( \"/\" ) async def not_timed (): return { \"message\" : \"Not timed\" } @router . get ( \"/timed\" ) async def timed (): return { \"message\" : \"It's the time of my life\" } app . include_router ( router )","title":"Custom APIRoute class in a router"},{"location":"advanced/custom-response/","text":"\u81ea\u5b9a\u4e49\u54cd\u5e94 - HTML\uff0c\u6d41\uff0c\u6587\u4ef6\u548c\u5176\u4ed6 \u00b6 FastAPI \u9ed8\u8ba4\u4f1a\u4f7f\u7528 JSONResponse \u8fd4\u56de\u54cd\u5e94\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8fd4\u56de Response \u6765\u91cd\u8f7d\u5b83\uff0c\u53c2\u89c1 \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94 \u3002 \u4f46\u5982\u679c\u4f60\u76f4\u63a5\u8fd4\u56de Response \uff0c\u8fd4\u56de\u6570\u636e\u4e0d\u4f1a\u81ea\u52a8\u8f6c\u6362\uff0c\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u751f\u6210\u6587\u6863\uff08\u4f8b\u5982\uff0c\u5728 HTTP \u5934 Content-Type \u4e2d\u5305\u542b\u7279\u5b9a\u7684\u300c\u5a92\u4f53\u7c7b\u578b\u300d\u4f5c\u4e3a\u751f\u6210\u7684 OpenAPI \u7684\u4e00\u90e8\u5206\uff09\u3002 \u4f60\u8fd8\u53ef\u4ee5\u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u58f0\u660e\u4f60\u60f3\u7528\u7684 Response \u3002 \u4f60\u4ece \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u8fd4\u56de\u7684\u5185\u5bb9\u5c06\u88ab\u653e\u5728\u8be5 Response \u4e2d\u3002 \u5e76\u4e14\u5982\u679c\u8be5 Response \u6709\u4e00\u4e2a JSON \u5a92\u4f53\u7c7b\u578b\uff08 application/json \uff09\uff0c\u6bd4\u5982\u4f7f\u7528 JSONResponse \u6216\u8005 UJSONResponse \u7684\u65f6\u5019\uff0c\u8fd4\u56de\u7684\u6570\u636e\u5c06\u4f7f\u7528\u4f60\u5728\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4e2d\u58f0\u660e\u7684\u4efb\u4f55 Pydantic \u7684 response_model \u81ea\u52a8\u8f6c\u6362\uff08\u548c\u8fc7\u6ee4\uff09\u3002 \u8bf4\u660e \u5982\u679c\u4f60\u4f7f\u7528\u4e0d\u5e26\u6709\u4efb\u4f55\u5a92\u4f53\u7c7b\u578b\u7684\u54cd\u5e94\u7c7b\uff0cFastAPI \u8ba4\u4e3a\u4f60\u7684\u54cd\u5e94\u6ca1\u6709\u4efb\u4f55\u5185\u5bb9\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5728\u751f\u6210\u7684OpenAPI\u6587\u6863\u4e2d\u8bb0\u5f55\u54cd\u5e94\u683c\u5f0f\u3002 \u4f7f\u7528 ORJSONResponse \u00b6 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u9700\u8981\u538b\u69a8\u6027\u80fd\uff0c\u4f60\u53ef\u4ee5\u5b89\u88c5\u5e76\u4f7f\u7528 orjson \u5e76\u5c06\u54cd\u5e94\u8bbe\u7f6e\u4e3a ORJSONResponse \u3002 \u5bfc\u5165\u4f60\u60f3\u8981\u4f7f\u7528\u7684 Response \u7c7b\uff08\u5b50\u7c7b\uff09\u7136\u540e\u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u58f0\u660e\u5b83\u3002 from fastapi import FastAPI from fastapi.responses import ORJSONResponse app = FastAPI () @app . get ( \"/items/\" , response_class = ORJSONResponse ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] \u63d0\u793a \u53c2\u6570 response_class \u4e5f\u4f1a\u7528\u6765\u5b9a\u4e49\u54cd\u5e94\u7684\u300c\u5a92\u4f53\u7c7b\u578b\u300d\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cHTTP \u5934\u7684 Content-Type \u4f1a\u88ab\u8bbe\u7f6e\u6210 application/json \u3002 \u5e76\u4e14\u5728 OpenAPI \u6587\u6863\u4e2d\u4e5f\u4f1a\u8fd9\u6837\u8bb0\u5f55\u3002 \u5c0f\u8d34\u58eb ORJSONResponse \u76ee\u524d\u53ea\u5728 FastAPI \u4e2d\u53ef\u7528\uff0c\u800c\u5728 Starlette \u4e2d\u4e0d\u53ef\u7528\u3002 HTML \u54cd\u5e94 \u00b6 \u4f7f\u7528 HTMLResponse \u6765\u4ece FastAPI \u4e2d\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a HTML \u54cd\u5e94\u3002 \u5bfc\u5165 HTMLResponse \u3002 \u5c06 HTMLResponse \u4f5c\u4e3a\u4f60\u7684 \u8def\u5f84\u64cd\u4f5c \u7684 response_class \u53c2\u6570\u4f20\u5165\u3002 from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () @app . get ( \"/items/\" , response_class = HTMLResponse ) async def read_items (): return \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" \u63d0\u793a \u53c2\u6570 response_class \u4e5f\u4f1a\u7528\u6765\u5b9a\u4e49\u54cd\u5e94\u7684\u300c\u5a92\u4f53\u7c7b\u578b\u300d\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cHTTP \u5934\u7684 Content-Type \u4f1a\u88ab\u8bbe\u7f6e\u6210 text/html \u3002 \u5e76\u4e14\u5728 OpenAPI \u6587\u6863\u4e2d\u4e5f\u4f1a\u8fd9\u6837\u8bb0\u5f55\u3002 \u8fd4\u56de\u4e00\u4e2a Response \u00b6 \u6b63\u5982\u4f60\u5728 \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94 \u4e2d\u4e86\u89e3\u5230\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u76f4\u63a5\u91cd\u8f7d\u54cd\u5e94\u3002 \u548c\u4e0a\u9762\u4e00\u6837\u7684\u4f8b\u5b50\uff0c\u8fd4\u56de\u4e00\u4e2a HTMLResponse \u770b\u8d77\u6765\u53ef\u80fd\u662f\u8fd9\u6837\uff1a from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): html_content = \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" return HTMLResponse ( content = html_content , status_code = 200 ) \u8b66\u544a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u76f4\u63a5\u8fd4\u56de\u7684 Response \u4e0d\u4f1a\u88ab OpenAPI \u7684\u6587\u6863\u8bb0\u5f55\uff08\u6bd4\u5982\uff0c Content-Type \u4e0d\u4f1a\u88ab\u6587\u6863\u8bb0\u5f55\uff09\uff0c\u5e76\u4e14\u5728\u81ea\u52a8\u5316\u4ea4\u4e92\u6587\u6863\u4e2d\u4e5f\u662f\u4e0d\u53ef\u89c1\u7684\u3002 \u63d0\u793a \u5f53\u7136\uff0c\u5b9e\u9645\u7684 Content-Type \u5934\uff0c\u72b6\u6001\u7801\u7b49\u7b49\uff0c\u5c06\u6765\u81ea\u4e8e\u4f60\u8fd4\u56de\u7684 Response \u5bf9\u8c61\u3002 OpenAPI \u4e2d\u7684\u6587\u6863\u548c\u91cd\u8f7d Response \u00b6 \u5982\u679c\u4f60\u60f3\u8981\u5728\u51fd\u6570\u5185\u91cd\u8f7d\u54cd\u5e94\uff0c\u4f46\u662f\u540c\u65f6\u5728 OpenAPI \u4e2d\u6587\u6863\u5316\u300c\u5a92\u4f53\u7c7b\u578b\u300d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 response_class \u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a Response \u5bf9\u8c61\u3002 \u63a5\u7740 response_class \u53c2\u6570\u53ea\u4f1a\u88ab\u7528\u6765\u6587\u6863\u5316 OpenAPI \u7684 \u8def\u5f84\u64cd\u4f5c \uff0c\u4f60\u7684 Response \u7528\u6765\u8fd4\u56de\u54cd\u5e94\u3002 \u76f4\u63a5\u8fd4\u56de HTMLResponse \u00b6 \u6bd4\u5982\u50cf\u8fd9\u6837\uff1a from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () def generate_html_response (): html_content = \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" return HTMLResponse ( content = html_content , status_code = 200 ) @app . get ( \"/items/\" , response_class = HTMLResponse ) async def read_items (): return generate_html_response () \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u51fd\u6570 generate_html_response() \u5df2\u7ecf\u751f\u6210\u5e76\u8fd4\u56de Response \u5bf9\u8c61\u800c\u4e0d\u662f\u5728 str \u4e2d\u8fd4\u56de HTML\u3002 \u901a\u8fc7\u8fd4\u56de\u51fd\u6570 generate_html_response() \u7684\u8c03\u7528\u7ed3\u679c\uff0c\u4f60\u5df2\u7ecf\u8fd4\u56de\u4e00\u4e2a\u91cd\u8f7d FastAPI \u9ed8\u8ba4\u884c\u4e3a\u7684 Response \u5bf9\u8c61\uff0c \u4f46\u5982\u679c\u4f60\u5728 response_class \u4e2d\u4e5f\u4f20\u5165\u4e86 HTMLResponse \uff0c FastAPI \u4f1a\u77e5\u9053\u5982\u4f55\u5728 OpenAPI \u548c\u4ea4\u4e92\u5f0f\u6587\u6863\u4e2d\u4f7f\u7528 text/html \u5c06\u5176\u6587\u6863\u5316\u4e3a HTML\u3002 \u53ef\u7528\u54cd\u5e94 \u00b6 \u8fd9\u91cc\u6709\u4e00\u4e9b\u53ef\u7528\u7684\u54cd\u5e94\u3002 \u8981\u8bb0\u5f97\u4f60\u53ef\u4ee5\u4f7f\u7528 Response \u6765\u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u4e1c\u897f\uff0c\u751a\u81f3\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5b50\u7c7b\u3002 \u6280\u672f\u7ec6\u8282 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import HTMLResponse \u3002 FastAPI \u63d0\u4f9b\u4e86\u540c fastapi.responses \u76f8\u540c\u7684 starlette.responses \u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u3002\u4f46\u5927\u591a\u6570\u53ef\u7528\u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u6765\u81ea Starlette\u3002 Response \u00b6 \u5176\u4ed6\u5168\u90e8\u7684\u54cd\u5e94\u90fd\u7ee7\u627f\u81ea\u4e3b\u7c7b Response \u3002 \u4f60\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u5b83\u3002 Response \u7c7b\u63a5\u53d7\u5982\u4e0b\u53c2\u6570\uff1a content - \u4e00\u4e2a str \u6216\u8005 bytes \u3002 status_code - \u4e00\u4e2a int \u7c7b\u578b\u7684 HTTP \u72b6\u6001\u7801\u3002 headers - \u4e00\u4e2a\u7531\u5b57\u7b26\u4e32\u7ec4\u6210\u7684 dict \u3002 media_type - \u4e00\u4e2a\u7ed9\u51fa\u5a92\u4f53\u7c7b\u578b\u7684 str \uff0c\u6bd4\u5982 \"text/html\" \u3002 FastAPI\uff08\u5b9e\u9645\u4e0a\u662f Starlette\uff09\u5c06\u81ea\u52a8\u5305\u542b Content-Length \u7684\u5934\u3002\u5b83\u8fd8\u5c06\u5305\u542b\u4e00\u4e2a\u57fa\u4e8e media_type \u7684 Content-Type \u5934\uff0c\u5e76\u4e3a\u6587\u672c\u7c7b\u578b\u9644\u52a0\u4e00\u4e2a\u5b57\u7b26\u96c6\u3002 from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/legacy/\" ) def get_legacy_data (): data = \"\"\"<?xml version=\"1.0\"?> <shampoo> <Header> Apply shampoo here. </Header> <Body> You'll have to use soap here. </Body> </shampoo> \"\"\" return Response ( content = data , media_type = \"application/xml\" ) HTMLResponse \u00b6 \u5982\u4e0a\u6587\u6240\u8ff0\uff0c\u63a5\u53d7\u6587\u672c\u6216\u5b57\u8282\u5e76\u8fd4\u56de HTML \u54cd\u5e94\u3002 PlainTextResponse \u00b6 \u63a5\u53d7\u6587\u672c\u6216\u5b57\u8282\u5e76\u8fd4\u56de\u7eaf\u6587\u672c\u54cd\u5e94\u3002 from fastapi import FastAPI from fastapi.responses import PlainTextResponse app = FastAPI () @app . get ( \"/\" , response_class = PlainTextResponse ) async def main (): return \"Hello World\" JSONResponse \u00b6 \u63a5\u53d7\u6570\u636e\u5e76\u8fd4\u56de\u4e00\u4e2a application/json \u7f16\u7801\u7684\u54cd\u5e94\u3002 \u5982\u4e0a\u6587\u6240\u8ff0\uff0c\u8fd9\u662f FastAPI \u4e2d\u4f7f\u7528\u7684\u9ed8\u8ba4\u54cd\u5e94\u3002 ORJSONResponse \u00b6 \u5982\u4e0a\u6587\u6240\u8ff0\uff0c ORJSONResponse \u662f\u4e00\u4e2a\u4f7f\u7528 orjson \u7684\u5feb\u901f\u7684\u53ef\u9009 JSON \u54cd\u5e94\u3002 UJSONResponse \u00b6 UJSONResponse \u662f\u4e00\u4e2a\u4f7f\u7528 ujson \u7684\u53ef\u9009 JSON \u54cd\u5e94\u3002 \u8b66\u544a \u5728\u5904\u7406\u67d0\u4e9b\u8fb9\u7f18\u60c5\u51b5\u65f6\uff0c ujson \u4e0d\u5982 Python \u7684\u5185\u7f6e\u5b9e\u73b0\u90a3\u4e48\u8c28\u614e\u3002 from fastapi import FastAPI from fastapi.responses import UJSONResponse app = FastAPI () @app . get ( \"/items/\" , response_class = UJSONResponse ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] \u5c0f\u8d34\u58eb ORJSONResponse \u53ef\u80fd\u662f\u4e00\u4e2a\u66f4\u5feb\u7684\u9009\u62e9\u3002 RedirectResponse \u00b6 \u8fd4\u56de HTTP \u91cd\u5b9a\u5411\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528 307 \u72b6\u6001\u4ee3\u7801\uff08\u4e34\u65f6\u91cd\u5b9a\u5411\uff09\u3002 from fastapi import FastAPI from fastapi.responses import RedirectResponse app = FastAPI () @app . get ( \"/typer\" ) async def redirect_typer (): return RedirectResponse ( \"https://typer.tiangolo.com\" ) StreamingResponse \u00b6 \u91c7\u7528\u5f02\u6b65\u751f\u6210\u5668\u6216\u666e\u901a\u751f\u6210\u5668/\u8fed\u4ee3\u5668\uff0c\u7136\u540e\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\u4e3b\u4f53\u3002 from fastapi import FastAPI from fastapi.responses import StreamingResponse app = FastAPI () async def fake_video_streamer (): for i in range ( 10 ): yield b \"some fake video bytes\" @app . get ( \"/\" ) async def main (): return StreamingResponse ( fake_video_streamer ()) \u5bf9\u7c7b\u4f3c\u6587\u4ef6\u7684\u5bf9\u8c61\u4f7f\u7528 StreamingResponse \u00b6 \u5982\u679c\u60a8\u6709\u7c7b\u4f3c\u6587\u4ef6\u7684\u5bf9\u8c61\uff08\u4f8b\u5982\uff0c\u7531 open() \u8fd4\u56de\u7684\u5bf9\u8c61\uff09\uff0c\u5219\u53ef\u4ee5\u5728 StreamingResponse \u4e2d\u5c06\u5176\u8fd4\u56de\u3002 \u5305\u62ec\u8bb8\u591a\u4e0e\u4e91\u5b58\u50a8\uff0c\u89c6\u9891\u5904\u7406\u7b49\u4ea4\u4e92\u7684\u5e93\u3002 from fastapi import FastAPI from fastapi.responses import StreamingResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" ) def main (): def iterfile (): # (1) with open ( some_file_path , mode = \"rb\" ) as file_like : # (2) yield from file_like # (3) return StreamingResponse ( iterfile (), media_type = \"video/mp4\" ) \u5c0f\u8d34\u58eb \u6ce8\u610f\u5728\u8fd9\u91cc\uff0c\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662f\u4e0d\u652f\u6301 async \u548c await \u7684\u6807\u51c6 open() \uff0c\u6211\u4eec\u4f7f\u7528\u666e\u901a\u7684 def \u58f0\u660e\u4e86\u8def\u5f84\u64cd\u4f5c\u3002 FileResponse \u00b6 \u5f02\u6b65\u4f20\u8f93\u6587\u4ef6\u4f5c\u4e3a\u54cd\u5e94\u3002 \u4e0e\u5176\u4ed6\u54cd\u5e94\u7c7b\u578b\u76f8\u6bd4\uff0c\u63a5\u53d7\u4e0d\u540c\u7684\u53c2\u6570\u96c6\u8fdb\u884c\u5b9e\u4f8b\u5316\uff1a path - \u8981\u6d41\u5f0f\u4f20\u8f93\u7684\u6587\u4ef6\u7684\u6587\u4ef6\u8def\u5f84\u3002 headers - \u4efb\u4f55\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\uff0c\u4f20\u5165\u5b57\u5178\u7c7b\u578b\u3002 media_type - \u7ed9\u51fa\u5a92\u4f53\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5219\u6587\u4ef6\u540d\u6216\u8def\u5f84\u5c06\u7528\u4e8e\u63a8\u65ad\u5a92\u4f53\u7c7b\u578b\u3002 filename - \u5982\u679c\u7ed9\u51fa\uff0c\u5b83\u5c06\u5305\u542b\u5728\u54cd\u5e94\u7684 Content-Disposition \u4e2d\u3002 \u6587\u4ef6\u54cd\u5e94\u5c06\u5305\u542b\u9002\u5f53\u7684 Content-Length \uff0c Last-Modified \u548c ETag \u7684\u54cd\u5e94\u5934\u3002 from fastapi import FastAPI from fastapi.responses import FileResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" ) async def main (): return FileResponse ( some_file_path ) \u989d\u5916\u6587\u6863 \u00b6 \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 response \u5728 OpenAPI \u4e2d\u58f0\u660e\u5a92\u4f53\u7c7b\u578b\u548c\u8bb8\u591a\u5176\u4ed6\u8be6\u7ec6\u4fe1\u606f\uff1a OpenAPI \u4e2d\u7684\u989d\u5916\u6587\u6863 \u3002","title":"\u81ea\u5b9a\u4e49\u54cd\u5e94 - HTML\uff0c\u6d41\uff0c\u6587\u4ef6\u548c\u5176\u4ed6"},{"location":"advanced/custom-response/#-html","text":"FastAPI \u9ed8\u8ba4\u4f1a\u4f7f\u7528 JSONResponse \u8fd4\u56de\u54cd\u5e94\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8fd4\u56de Response \u6765\u91cd\u8f7d\u5b83\uff0c\u53c2\u89c1 \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94 \u3002 \u4f46\u5982\u679c\u4f60\u76f4\u63a5\u8fd4\u56de Response \uff0c\u8fd4\u56de\u6570\u636e\u4e0d\u4f1a\u81ea\u52a8\u8f6c\u6362\uff0c\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u751f\u6210\u6587\u6863\uff08\u4f8b\u5982\uff0c\u5728 HTTP \u5934 Content-Type \u4e2d\u5305\u542b\u7279\u5b9a\u7684\u300c\u5a92\u4f53\u7c7b\u578b\u300d\u4f5c\u4e3a\u751f\u6210\u7684 OpenAPI \u7684\u4e00\u90e8\u5206\uff09\u3002 \u4f60\u8fd8\u53ef\u4ee5\u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u58f0\u660e\u4f60\u60f3\u7528\u7684 Response \u3002 \u4f60\u4ece \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u8fd4\u56de\u7684\u5185\u5bb9\u5c06\u88ab\u653e\u5728\u8be5 Response \u4e2d\u3002 \u5e76\u4e14\u5982\u679c\u8be5 Response \u6709\u4e00\u4e2a JSON \u5a92\u4f53\u7c7b\u578b\uff08 application/json \uff09\uff0c\u6bd4\u5982\u4f7f\u7528 JSONResponse \u6216\u8005 UJSONResponse \u7684\u65f6\u5019\uff0c\u8fd4\u56de\u7684\u6570\u636e\u5c06\u4f7f\u7528\u4f60\u5728\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4e2d\u58f0\u660e\u7684\u4efb\u4f55 Pydantic \u7684 response_model \u81ea\u52a8\u8f6c\u6362\uff08\u548c\u8fc7\u6ee4\uff09\u3002 \u8bf4\u660e \u5982\u679c\u4f60\u4f7f\u7528\u4e0d\u5e26\u6709\u4efb\u4f55\u5a92\u4f53\u7c7b\u578b\u7684\u54cd\u5e94\u7c7b\uff0cFastAPI \u8ba4\u4e3a\u4f60\u7684\u54cd\u5e94\u6ca1\u6709\u4efb\u4f55\u5185\u5bb9\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5728\u751f\u6210\u7684OpenAPI\u6587\u6863\u4e2d\u8bb0\u5f55\u54cd\u5e94\u683c\u5f0f\u3002","title":"\u81ea\u5b9a\u4e49\u54cd\u5e94 - HTML\uff0c\u6d41\uff0c\u6587\u4ef6\u548c\u5176\u4ed6"},{"location":"advanced/custom-response/#orjsonresponse","text":"\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u9700\u8981\u538b\u69a8\u6027\u80fd\uff0c\u4f60\u53ef\u4ee5\u5b89\u88c5\u5e76\u4f7f\u7528 orjson \u5e76\u5c06\u54cd\u5e94\u8bbe\u7f6e\u4e3a ORJSONResponse \u3002 \u5bfc\u5165\u4f60\u60f3\u8981\u4f7f\u7528\u7684 Response \u7c7b\uff08\u5b50\u7c7b\uff09\u7136\u540e\u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u58f0\u660e\u5b83\u3002 from fastapi import FastAPI from fastapi.responses import ORJSONResponse app = FastAPI () @app . get ( \"/items/\" , response_class = ORJSONResponse ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] \u63d0\u793a \u53c2\u6570 response_class \u4e5f\u4f1a\u7528\u6765\u5b9a\u4e49\u54cd\u5e94\u7684\u300c\u5a92\u4f53\u7c7b\u578b\u300d\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cHTTP \u5934\u7684 Content-Type \u4f1a\u88ab\u8bbe\u7f6e\u6210 application/json \u3002 \u5e76\u4e14\u5728 OpenAPI \u6587\u6863\u4e2d\u4e5f\u4f1a\u8fd9\u6837\u8bb0\u5f55\u3002 \u5c0f\u8d34\u58eb ORJSONResponse \u76ee\u524d\u53ea\u5728 FastAPI \u4e2d\u53ef\u7528\uff0c\u800c\u5728 Starlette \u4e2d\u4e0d\u53ef\u7528\u3002","title":"\u4f7f\u7528 ORJSONResponse"},{"location":"advanced/custom-response/#html","text":"\u4f7f\u7528 HTMLResponse \u6765\u4ece FastAPI \u4e2d\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a HTML \u54cd\u5e94\u3002 \u5bfc\u5165 HTMLResponse \u3002 \u5c06 HTMLResponse \u4f5c\u4e3a\u4f60\u7684 \u8def\u5f84\u64cd\u4f5c \u7684 response_class \u53c2\u6570\u4f20\u5165\u3002 from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () @app . get ( \"/items/\" , response_class = HTMLResponse ) async def read_items (): return \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" \u63d0\u793a \u53c2\u6570 response_class \u4e5f\u4f1a\u7528\u6765\u5b9a\u4e49\u54cd\u5e94\u7684\u300c\u5a92\u4f53\u7c7b\u578b\u300d\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cHTTP \u5934\u7684 Content-Type \u4f1a\u88ab\u8bbe\u7f6e\u6210 text/html \u3002 \u5e76\u4e14\u5728 OpenAPI \u6587\u6863\u4e2d\u4e5f\u4f1a\u8fd9\u6837\u8bb0\u5f55\u3002","title":"HTML \u54cd\u5e94"},{"location":"advanced/custom-response/#response","text":"\u6b63\u5982\u4f60\u5728 \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94 \u4e2d\u4e86\u89e3\u5230\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u76f4\u63a5\u91cd\u8f7d\u54cd\u5e94\u3002 \u548c\u4e0a\u9762\u4e00\u6837\u7684\u4f8b\u5b50\uff0c\u8fd4\u56de\u4e00\u4e2a HTMLResponse \u770b\u8d77\u6765\u53ef\u80fd\u662f\u8fd9\u6837\uff1a from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): html_content = \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" return HTMLResponse ( content = html_content , status_code = 200 ) \u8b66\u544a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u76f4\u63a5\u8fd4\u56de\u7684 Response \u4e0d\u4f1a\u88ab OpenAPI \u7684\u6587\u6863\u8bb0\u5f55\uff08\u6bd4\u5982\uff0c Content-Type \u4e0d\u4f1a\u88ab\u6587\u6863\u8bb0\u5f55\uff09\uff0c\u5e76\u4e14\u5728\u81ea\u52a8\u5316\u4ea4\u4e92\u6587\u6863\u4e2d\u4e5f\u662f\u4e0d\u53ef\u89c1\u7684\u3002 \u63d0\u793a \u5f53\u7136\uff0c\u5b9e\u9645\u7684 Content-Type \u5934\uff0c\u72b6\u6001\u7801\u7b49\u7b49\uff0c\u5c06\u6765\u81ea\u4e8e\u4f60\u8fd4\u56de\u7684 Response \u5bf9\u8c61\u3002","title":"\u8fd4\u56de\u4e00\u4e2a Response"},{"location":"advanced/custom-response/#openapi-response","text":"\u5982\u679c\u4f60\u60f3\u8981\u5728\u51fd\u6570\u5185\u91cd\u8f7d\u54cd\u5e94\uff0c\u4f46\u662f\u540c\u65f6\u5728 OpenAPI \u4e2d\u6587\u6863\u5316\u300c\u5a92\u4f53\u7c7b\u578b\u300d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 response_class \u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a Response \u5bf9\u8c61\u3002 \u63a5\u7740 response_class \u53c2\u6570\u53ea\u4f1a\u88ab\u7528\u6765\u6587\u6863\u5316 OpenAPI \u7684 \u8def\u5f84\u64cd\u4f5c \uff0c\u4f60\u7684 Response \u7528\u6765\u8fd4\u56de\u54cd\u5e94\u3002","title":"OpenAPI \u4e2d\u7684\u6587\u6863\u548c\u91cd\u8f7d Response"},{"location":"advanced/custom-response/#htmlresponse","text":"\u6bd4\u5982\u50cf\u8fd9\u6837\uff1a from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () def generate_html_response (): html_content = \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" return HTMLResponse ( content = html_content , status_code = 200 ) @app . get ( \"/items/\" , response_class = HTMLResponse ) async def read_items (): return generate_html_response () \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u51fd\u6570 generate_html_response() \u5df2\u7ecf\u751f\u6210\u5e76\u8fd4\u56de Response \u5bf9\u8c61\u800c\u4e0d\u662f\u5728 str \u4e2d\u8fd4\u56de HTML\u3002 \u901a\u8fc7\u8fd4\u56de\u51fd\u6570 generate_html_response() \u7684\u8c03\u7528\u7ed3\u679c\uff0c\u4f60\u5df2\u7ecf\u8fd4\u56de\u4e00\u4e2a\u91cd\u8f7d FastAPI \u9ed8\u8ba4\u884c\u4e3a\u7684 Response \u5bf9\u8c61\uff0c \u4f46\u5982\u679c\u4f60\u5728 response_class \u4e2d\u4e5f\u4f20\u5165\u4e86 HTMLResponse \uff0c FastAPI \u4f1a\u77e5\u9053\u5982\u4f55\u5728 OpenAPI \u548c\u4ea4\u4e92\u5f0f\u6587\u6863\u4e2d\u4f7f\u7528 text/html \u5c06\u5176\u6587\u6863\u5316\u4e3a HTML\u3002","title":"\u76f4\u63a5\u8fd4\u56de HTMLResponse"},{"location":"advanced/custom-response/#_1","text":"\u8fd9\u91cc\u6709\u4e00\u4e9b\u53ef\u7528\u7684\u54cd\u5e94\u3002 \u8981\u8bb0\u5f97\u4f60\u53ef\u4ee5\u4f7f\u7528 Response \u6765\u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u4e1c\u897f\uff0c\u751a\u81f3\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5b50\u7c7b\u3002 \u6280\u672f\u7ec6\u8282 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import HTMLResponse \u3002 FastAPI \u63d0\u4f9b\u4e86\u540c fastapi.responses \u76f8\u540c\u7684 starlette.responses \u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u3002\u4f46\u5927\u591a\u6570\u53ef\u7528\u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u6765\u81ea Starlette\u3002","title":"\u53ef\u7528\u54cd\u5e94"},{"location":"advanced/custom-response/#response_1","text":"\u5176\u4ed6\u5168\u90e8\u7684\u54cd\u5e94\u90fd\u7ee7\u627f\u81ea\u4e3b\u7c7b Response \u3002 \u4f60\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u5b83\u3002 Response \u7c7b\u63a5\u53d7\u5982\u4e0b\u53c2\u6570\uff1a content - \u4e00\u4e2a str \u6216\u8005 bytes \u3002 status_code - \u4e00\u4e2a int \u7c7b\u578b\u7684 HTTP \u72b6\u6001\u7801\u3002 headers - \u4e00\u4e2a\u7531\u5b57\u7b26\u4e32\u7ec4\u6210\u7684 dict \u3002 media_type - \u4e00\u4e2a\u7ed9\u51fa\u5a92\u4f53\u7c7b\u578b\u7684 str \uff0c\u6bd4\u5982 \"text/html\" \u3002 FastAPI\uff08\u5b9e\u9645\u4e0a\u662f Starlette\uff09\u5c06\u81ea\u52a8\u5305\u542b Content-Length \u7684\u5934\u3002\u5b83\u8fd8\u5c06\u5305\u542b\u4e00\u4e2a\u57fa\u4e8e media_type \u7684 Content-Type \u5934\uff0c\u5e76\u4e3a\u6587\u672c\u7c7b\u578b\u9644\u52a0\u4e00\u4e2a\u5b57\u7b26\u96c6\u3002 from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/legacy/\" ) def get_legacy_data (): data = \"\"\"<?xml version=\"1.0\"?> <shampoo> <Header> Apply shampoo here. </Header> <Body> You'll have to use soap here. </Body> </shampoo> \"\"\" return Response ( content = data , media_type = \"application/xml\" )","title":"Response"},{"location":"advanced/custom-response/#htmlresponse_1","text":"\u5982\u4e0a\u6587\u6240\u8ff0\uff0c\u63a5\u53d7\u6587\u672c\u6216\u5b57\u8282\u5e76\u8fd4\u56de HTML \u54cd\u5e94\u3002","title":"HTMLResponse"},{"location":"advanced/custom-response/#plaintextresponse","text":"\u63a5\u53d7\u6587\u672c\u6216\u5b57\u8282\u5e76\u8fd4\u56de\u7eaf\u6587\u672c\u54cd\u5e94\u3002 from fastapi import FastAPI from fastapi.responses import PlainTextResponse app = FastAPI () @app . get ( \"/\" , response_class = PlainTextResponse ) async def main (): return \"Hello World\"","title":"PlainTextResponse"},{"location":"advanced/custom-response/#jsonresponse","text":"\u63a5\u53d7\u6570\u636e\u5e76\u8fd4\u56de\u4e00\u4e2a application/json \u7f16\u7801\u7684\u54cd\u5e94\u3002 \u5982\u4e0a\u6587\u6240\u8ff0\uff0c\u8fd9\u662f FastAPI \u4e2d\u4f7f\u7528\u7684\u9ed8\u8ba4\u54cd\u5e94\u3002","title":"JSONResponse"},{"location":"advanced/custom-response/#orjsonresponse_1","text":"\u5982\u4e0a\u6587\u6240\u8ff0\uff0c ORJSONResponse \u662f\u4e00\u4e2a\u4f7f\u7528 orjson \u7684\u5feb\u901f\u7684\u53ef\u9009 JSON \u54cd\u5e94\u3002","title":"ORJSONResponse"},{"location":"advanced/custom-response/#ujsonresponse","text":"UJSONResponse \u662f\u4e00\u4e2a\u4f7f\u7528 ujson \u7684\u53ef\u9009 JSON \u54cd\u5e94\u3002 \u8b66\u544a \u5728\u5904\u7406\u67d0\u4e9b\u8fb9\u7f18\u60c5\u51b5\u65f6\uff0c ujson \u4e0d\u5982 Python \u7684\u5185\u7f6e\u5b9e\u73b0\u90a3\u4e48\u8c28\u614e\u3002 from fastapi import FastAPI from fastapi.responses import UJSONResponse app = FastAPI () @app . get ( \"/items/\" , response_class = UJSONResponse ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] \u5c0f\u8d34\u58eb ORJSONResponse \u53ef\u80fd\u662f\u4e00\u4e2a\u66f4\u5feb\u7684\u9009\u62e9\u3002","title":"UJSONResponse"},{"location":"advanced/custom-response/#redirectresponse","text":"\u8fd4\u56de HTTP \u91cd\u5b9a\u5411\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528 307 \u72b6\u6001\u4ee3\u7801\uff08\u4e34\u65f6\u91cd\u5b9a\u5411\uff09\u3002 from fastapi import FastAPI from fastapi.responses import RedirectResponse app = FastAPI () @app . get ( \"/typer\" ) async def redirect_typer (): return RedirectResponse ( \"https://typer.tiangolo.com\" )","title":"RedirectResponse"},{"location":"advanced/custom-response/#streamingresponse","text":"\u91c7\u7528\u5f02\u6b65\u751f\u6210\u5668\u6216\u666e\u901a\u751f\u6210\u5668/\u8fed\u4ee3\u5668\uff0c\u7136\u540e\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\u4e3b\u4f53\u3002 from fastapi import FastAPI from fastapi.responses import StreamingResponse app = FastAPI () async def fake_video_streamer (): for i in range ( 10 ): yield b \"some fake video bytes\" @app . get ( \"/\" ) async def main (): return StreamingResponse ( fake_video_streamer ())","title":"StreamingResponse"},{"location":"advanced/custom-response/#streamingresponse_1","text":"\u5982\u679c\u60a8\u6709\u7c7b\u4f3c\u6587\u4ef6\u7684\u5bf9\u8c61\uff08\u4f8b\u5982\uff0c\u7531 open() \u8fd4\u56de\u7684\u5bf9\u8c61\uff09\uff0c\u5219\u53ef\u4ee5\u5728 StreamingResponse \u4e2d\u5c06\u5176\u8fd4\u56de\u3002 \u5305\u62ec\u8bb8\u591a\u4e0e\u4e91\u5b58\u50a8\uff0c\u89c6\u9891\u5904\u7406\u7b49\u4ea4\u4e92\u7684\u5e93\u3002 from fastapi import FastAPI from fastapi.responses import StreamingResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" ) def main (): def iterfile (): # (1) with open ( some_file_path , mode = \"rb\" ) as file_like : # (2) yield from file_like # (3) return StreamingResponse ( iterfile (), media_type = \"video/mp4\" ) \u5c0f\u8d34\u58eb \u6ce8\u610f\u5728\u8fd9\u91cc\uff0c\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u7684\u662f\u4e0d\u652f\u6301 async \u548c await \u7684\u6807\u51c6 open() \uff0c\u6211\u4eec\u4f7f\u7528\u666e\u901a\u7684 def \u58f0\u660e\u4e86\u8def\u5f84\u64cd\u4f5c\u3002","title":"\u5bf9\u7c7b\u4f3c\u6587\u4ef6\u7684\u5bf9\u8c61\u4f7f\u7528 StreamingResponse"},{"location":"advanced/custom-response/#fileresponse","text":"\u5f02\u6b65\u4f20\u8f93\u6587\u4ef6\u4f5c\u4e3a\u54cd\u5e94\u3002 \u4e0e\u5176\u4ed6\u54cd\u5e94\u7c7b\u578b\u76f8\u6bd4\uff0c\u63a5\u53d7\u4e0d\u540c\u7684\u53c2\u6570\u96c6\u8fdb\u884c\u5b9e\u4f8b\u5316\uff1a path - \u8981\u6d41\u5f0f\u4f20\u8f93\u7684\u6587\u4ef6\u7684\u6587\u4ef6\u8def\u5f84\u3002 headers - \u4efb\u4f55\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\uff0c\u4f20\u5165\u5b57\u5178\u7c7b\u578b\u3002 media_type - \u7ed9\u51fa\u5a92\u4f53\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5219\u6587\u4ef6\u540d\u6216\u8def\u5f84\u5c06\u7528\u4e8e\u63a8\u65ad\u5a92\u4f53\u7c7b\u578b\u3002 filename - \u5982\u679c\u7ed9\u51fa\uff0c\u5b83\u5c06\u5305\u542b\u5728\u54cd\u5e94\u7684 Content-Disposition \u4e2d\u3002 \u6587\u4ef6\u54cd\u5e94\u5c06\u5305\u542b\u9002\u5f53\u7684 Content-Length \uff0c Last-Modified \u548c ETag \u7684\u54cd\u5e94\u5934\u3002 from fastapi import FastAPI from fastapi.responses import FileResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" ) async def main (): return FileResponse ( some_file_path )","title":"FileResponse"},{"location":"advanced/custom-response/#_2","text":"\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 response \u5728 OpenAPI \u4e2d\u58f0\u660e\u5a92\u4f53\u7c7b\u578b\u548c\u8bb8\u591a\u5176\u4ed6\u8be6\u7ec6\u4fe1\u606f\uff1a OpenAPI \u4e2d\u7684\u989d\u5916\u6587\u6863 \u3002","title":"\u989d\u5916\u6587\u6863"},{"location":"advanced/dataclasses/","text":"Using Dataclasses \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI is built on top of Pydantic , and I have been showing you how to use Pydantic models to declare requests and responses. But FastAPI also supports using dataclasses the same way: from dataclasses import dataclass from typing import Union from fastapi import FastAPI @dataclass class Item : name : str price : float description : Union [ str , None ] = None tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item This is still thanks to Pydantic , as it has internal support for dataclasses . So, even with the code above that doesn't use Pydantic explicitly, FastAPI is using Pydantic to convert those standard dataclasses to Pydantic's own flavor of dataclasses. And of course, it supports the same: data validation data serialization data documentation, etc. This works the same way as with Pydantic models. And it is actually achieved in the same way underneath, using Pydantic. Info Have in mind that dataclasses can't do everything Pydantic models can do. So, you might still need to use Pydantic models. But if you have a bunch of dataclasses laying around, this is a nice trick to use them to power a web API using FastAPI. \ud83e\udd13 Dataclasses in response_model \u00b6 You can also use dataclasses in the response_model parameter: from dataclasses import dataclass , field from typing import List , Union from fastapi import FastAPI @dataclass class Item : name : str price : float tags : List [ str ] = field ( default_factory = list ) description : Union [ str , None ] = None tax : Union [ float , None ] = None app = FastAPI () @app . get ( \"/items/next\" , response_model = Item ) async def read_next_item (): return { \"name\" : \"Island In The Moon\" , \"price\" : 12.99 , \"description\" : \"A place to be be playin' and havin' fun\" , \"tags\" : [ \"breater\" ], } The dataclass will be automatically converted to a Pydantic dataclass. This way, its schema will show up in the API docs user interface: Dataclasses in Nested Data Structures \u00b6 You can also combine dataclasses with other type annotations to make nested data structures. In some cases, you might still have to use Pydantic's version of dataclasses . For example, if you have errors with the automatically generated API documentation. In that case, you can simply swap the standard dataclasses with pydantic.dataclasses , which is a drop-in replacement: from dataclasses import field # (1) from typing import List , Union from fastapi import FastAPI from pydantic.dataclasses import dataclass # (2) @dataclass class Item : name : str description : Union [ str , None ] = None @dataclass class Author : name : str items : List [ Item ] = field ( default_factory = list ) # (3) app = FastAPI () @app . post ( \"/authors/ {author_id} /items/\" , response_model = Author ) # (4) async def create_author_items ( author_id : str , items : List [ Item ]): # (5) return { \"name\" : author_id , \"items\" : items } # (6) @app . get ( \"/authors/\" , response_model = List [ Author ]) # (7) def get_authors (): # (8) return [ # (9) { \"name\" : \"Breaters\" , \"items\" : [ { \"name\" : \"Island In The Moon\" , \"description\" : \"A place to be be playin' and havin' fun\" , }, { \"name\" : \"Holy Buddies\" }, ], }, { \"name\" : \"System of an Up\" , \"items\" : [ { \"name\" : \"Salt\" , \"description\" : \"The kombucha mushroom people's favorite\" , }, { \"name\" : \"Pad Thai\" }, { \"name\" : \"Lonely Night\" , \"description\" : \"The mostests lonliest nightiest of allest\" , }, ], }, ] We still import field from standard dataclasses . pydantic.dataclasses is a drop-in replacement for dataclasses . The Author dataclass includes a list of Item dataclasses. The Author dataclass is used as the response_model parameter. You can use other standard type annotations with dataclasses as the request body. In this case, it's a list of Item dataclasses. Here we are returning a dictionary that contains items which is a list of dataclasses. FastAPI is still capable of serializing the data to JSON. Here the response_model is using a type annotation of a list of Author dataclasses. Again, you can combine dataclasses with standard type annotations. Notice that this path operation function uses regular def instead of async def . As always, in FastAPI you can combine def and async def as needed. If you need a refresher about when to use which, check out the section \"In a hurry?\" in the docs about async and await . This path operation function is not returning dataclasses (although it could), but a list of dictionaries with internal data. FastAPI will use the response_model parameter (that includes dataclasses) to convert the response. You can combine dataclasses with other type annotations in many different combinations to form complex data structures. Check the in-code annotation tips above to see more specific details. Learn More \u00b6 You can also combine dataclasses with other Pydantic models, inherit from them, include them in your own models, etc. To learn more, check the Pydantic docs about dataclasses . Version \u00b6 This is available since FastAPI version 0.67.0 . \ud83d\udd16","title":"Using Dataclasses"},{"location":"advanced/dataclasses/#using-dataclasses","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI is built on top of Pydantic , and I have been showing you how to use Pydantic models to declare requests and responses. But FastAPI also supports using dataclasses the same way: from dataclasses import dataclass from typing import Union from fastapi import FastAPI @dataclass class Item : name : str price : float description : Union [ str , None ] = None tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item This is still thanks to Pydantic , as it has internal support for dataclasses . So, even with the code above that doesn't use Pydantic explicitly, FastAPI is using Pydantic to convert those standard dataclasses to Pydantic's own flavor of dataclasses. And of course, it supports the same: data validation data serialization data documentation, etc. This works the same way as with Pydantic models. And it is actually achieved in the same way underneath, using Pydantic. Info Have in mind that dataclasses can't do everything Pydantic models can do. So, you might still need to use Pydantic models. But if you have a bunch of dataclasses laying around, this is a nice trick to use them to power a web API using FastAPI. \ud83e\udd13","title":"Using Dataclasses"},{"location":"advanced/dataclasses/#dataclasses-in-response_model","text":"You can also use dataclasses in the response_model parameter: from dataclasses import dataclass , field from typing import List , Union from fastapi import FastAPI @dataclass class Item : name : str price : float tags : List [ str ] = field ( default_factory = list ) description : Union [ str , None ] = None tax : Union [ float , None ] = None app = FastAPI () @app . get ( \"/items/next\" , response_model = Item ) async def read_next_item (): return { \"name\" : \"Island In The Moon\" , \"price\" : 12.99 , \"description\" : \"A place to be be playin' and havin' fun\" , \"tags\" : [ \"breater\" ], } The dataclass will be automatically converted to a Pydantic dataclass. This way, its schema will show up in the API docs user interface:","title":"Dataclasses in response_model"},{"location":"advanced/dataclasses/#dataclasses-in-nested-data-structures","text":"You can also combine dataclasses with other type annotations to make nested data structures. In some cases, you might still have to use Pydantic's version of dataclasses . For example, if you have errors with the automatically generated API documentation. In that case, you can simply swap the standard dataclasses with pydantic.dataclasses , which is a drop-in replacement: from dataclasses import field # (1) from typing import List , Union from fastapi import FastAPI from pydantic.dataclasses import dataclass # (2) @dataclass class Item : name : str description : Union [ str , None ] = None @dataclass class Author : name : str items : List [ Item ] = field ( default_factory = list ) # (3) app = FastAPI () @app . post ( \"/authors/ {author_id} /items/\" , response_model = Author ) # (4) async def create_author_items ( author_id : str , items : List [ Item ]): # (5) return { \"name\" : author_id , \"items\" : items } # (6) @app . get ( \"/authors/\" , response_model = List [ Author ]) # (7) def get_authors (): # (8) return [ # (9) { \"name\" : \"Breaters\" , \"items\" : [ { \"name\" : \"Island In The Moon\" , \"description\" : \"A place to be be playin' and havin' fun\" , }, { \"name\" : \"Holy Buddies\" }, ], }, { \"name\" : \"System of an Up\" , \"items\" : [ { \"name\" : \"Salt\" , \"description\" : \"The kombucha mushroom people's favorite\" , }, { \"name\" : \"Pad Thai\" }, { \"name\" : \"Lonely Night\" , \"description\" : \"The mostests lonliest nightiest of allest\" , }, ], }, ] We still import field from standard dataclasses . pydantic.dataclasses is a drop-in replacement for dataclasses . The Author dataclass includes a list of Item dataclasses. The Author dataclass is used as the response_model parameter. You can use other standard type annotations with dataclasses as the request body. In this case, it's a list of Item dataclasses. Here we are returning a dictionary that contains items which is a list of dataclasses. FastAPI is still capable of serializing the data to JSON. Here the response_model is using a type annotation of a list of Author dataclasses. Again, you can combine dataclasses with standard type annotations. Notice that this path operation function uses regular def instead of async def . As always, in FastAPI you can combine def and async def as needed. If you need a refresher about when to use which, check out the section \"In a hurry?\" in the docs about async and await . This path operation function is not returning dataclasses (although it could), but a list of dictionaries with internal data. FastAPI will use the response_model parameter (that includes dataclasses) to convert the response. You can combine dataclasses with other type annotations in many different combinations to form complex data structures. Check the in-code annotation tips above to see more specific details.","title":"Dataclasses in Nested Data Structures"},{"location":"advanced/dataclasses/#learn-more","text":"You can also combine dataclasses with other Pydantic models, inherit from them, include them in your own models, etc. To learn more, check the Pydantic docs about dataclasses .","title":"Learn More"},{"location":"advanced/dataclasses/#version","text":"This is available since FastAPI version 0.67.0 . \ud83d\udd16","title":"Version"},{"location":"advanced/events/","text":"Events: startup - shutdown \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can define event handlers (functions) that need to be executed before the application starts up, or when the application is shutting down. These functions can be declared with async def or normal def . Warning Only event handlers for the main application will be executed, not for Sub Applications - Mounts . startup event \u00b6 To add a function that should be run before the application starts, declare it with the event \"startup\" : from fastapi import FastAPI app = FastAPI () items = {} @app . on_event ( \"startup\" ) async def startup_event (): items [ \"foo\" ] = { \"name\" : \"Fighters\" } items [ \"bar\" ] = { \"name\" : \"Tenders\" } @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : str ): return items [ item_id ] In this case, the startup event handler function will initialize the items \"database\" (just a dict ) with some values. You can add more than one event handler function. And your application won't start receiving requests until all the startup event handlers have completed. shutdown event \u00b6 To add a function that should be run when the application is shutting down, declare it with the event \"shutdown\" : from fastapi import FastAPI app = FastAPI () @app . on_event ( \"shutdown\" ) def shutdown_event (): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( \"Application shutdown\" ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] Here, the shutdown event handler function will write a text line \"Application shutdown\" to a file log.txt . Info In the open() function, the mode=\"a\" means \"append\", so, the line will be added after whatever is on that file, without overwriting the previous contents. Tip Notice that in this case we are using a standard Python open() function that interacts with a file. So, it involves I/O (input/output), that requires \"waiting\" for things to be written to disk. But open() doesn't use async and await . So, we declare the event handler function with standard def instead of async def . Info You can read more about these event handlers in Starlette's Events' docs .","title":"Events: startup - shutdown"},{"location":"advanced/events/#events-startup-shutdown","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can define event handlers (functions) that need to be executed before the application starts up, or when the application is shutting down. These functions can be declared with async def or normal def . Warning Only event handlers for the main application will be executed, not for Sub Applications - Mounts .","title":"Events: startup - shutdown"},{"location":"advanced/events/#startup-event","text":"To add a function that should be run before the application starts, declare it with the event \"startup\" : from fastapi import FastAPI app = FastAPI () items = {} @app . on_event ( \"startup\" ) async def startup_event (): items [ \"foo\" ] = { \"name\" : \"Fighters\" } items [ \"bar\" ] = { \"name\" : \"Tenders\" } @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : str ): return items [ item_id ] In this case, the startup event handler function will initialize the items \"database\" (just a dict ) with some values. You can add more than one event handler function. And your application won't start receiving requests until all the startup event handlers have completed.","title":"startup event"},{"location":"advanced/events/#shutdown-event","text":"To add a function that should be run when the application is shutting down, declare it with the event \"shutdown\" : from fastapi import FastAPI app = FastAPI () @app . on_event ( \"shutdown\" ) def shutdown_event (): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( \"Application shutdown\" ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] Here, the shutdown event handler function will write a text line \"Application shutdown\" to a file log.txt . Info In the open() function, the mode=\"a\" means \"append\", so, the line will be added after whatever is on that file, without overwriting the previous contents. Tip Notice that in this case we are using a standard Python open() function that interacts with a file. So, it involves I/O (input/output), that requires \"waiting\" for things to be written to disk. But open() doesn't use async and await . So, we declare the event handler function with standard def instead of async def . Info You can read more about these event handlers in Starlette's Events' docs .","title":"shutdown event"},{"location":"advanced/extending-openapi/","text":"Extending OpenAPI \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Warning This is a rather advanced feature. You probably can skip it. If you are just following the tutorial - user guide, you can probably skip this section. If you already know that you need to modify the generated OpenAPI schema, continue reading. There are some cases where you might need to modify the generated OpenAPI schema. In this section you will see how. The normal process \u00b6 The normal (default) process, is as follows. A FastAPI application (instance) has an .openapi() method that is expected to return the OpenAPI schema. As part of the application object creation, a path operation for /openapi.json (or for whatever you set your openapi_url ) is registered. It just returns a JSON response with the result of the application's .openapi() method. By default, what the method .openapi() does is check the property .openapi_schema to see if it has contents and return them. If it doesn't, it generates them using the utility function at fastapi.openapi.utils.get_openapi . And that function get_openapi() receives as parameters: title : The OpenAPI title, shown in the docs. version : The version of your API, e.g. 2.5.0 . openapi_version : The version of the OpenAPI specification used. By default, the latest: 3.0.2 . description : The description of your API. routes : A list of routes, these are each of the registered path operations . They are taken from app.routes . Overriding the defaults \u00b6 Using the information above, you can use the same utility function to generate the OpenAPI schema and override each part that you need. For example, let's add ReDoc's OpenAPI extension to include a custom logo . Normal FastAPI \u00b6 First, write all your FastAPI application as normally: from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi Generate the OpenAPI schema \u00b6 Then, use the same utility function to generate the OpenAPI schema, inside a custom_openapi() function: from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi Modify the OpenAPI schema \u00b6 Now you can add the ReDoc extension, adding a custom x-logo to the info \"object\" in the OpenAPI schema: from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi Cache the OpenAPI schema \u00b6 You can use the property .openapi_schema as a \"cache\", to store your generated schema. That way, your application won't have to generate the schema every time a user opens your API docs. It will be generated only once, and then the same cached schema will be used for the next requests. from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi Override the method \u00b6 Now you can replace the .openapi() method with your new function. from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi Check it \u00b6 Once you go to http://127.0.0.1:8000/redoc you will see that you are using your custom logo (in this example, FastAPI 's logo): Self-hosting JavaScript and CSS for docs \u00b6 The API docs use Swagger UI and ReDoc , and each of those need some JavaScript and CSS files. By default, those files are served from a CDN . But it's possible to customize it, you can set a specific CDN, or serve the files yourself. That's useful, for example, if you need your app to keep working even while offline, without open Internet access, or in a local network. Here you'll see how to serve those files yourself, in the same FastAPI app, and configure the docs to use them. Project file structure \u00b6 Let's say your project file structure looks like this: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py Now create a directory to store those static files. Your new file structure could look like this: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2514\u2500\u2500 static/ Download the files \u00b6 Download the static files needed for the docs and put them on that static/ directory. You can probably right-click each link and select an option similar to Save link as... . Swagger UI uses the files: swagger-ui-bundle.js swagger-ui.css And ReDoc uses the file: redoc.standalone.js After that, your file structure could look like: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2514\u2500\u2500 static \u251c\u2500\u2500 redoc.standalone.js \u251c\u2500\u2500 swagger-ui-bundle.js \u2514\u2500\u2500 swagger-ui.css Serve the static files \u00b6 Import StaticFiles . \"Mount\" a StaticFiles() instance in a specific path. from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } Test the static files \u00b6 Start your application and go to http://127.0.0.1:8000/static/redoc.standalone.js . You should see a very long JavaScript file for ReDoc . It could start with something like: /*! * ReDoc - OpenAPI/Swagger-generated API Reference Documentation * ------------------------------------------------------------- * Version: \"2.0.0-rc.18\" * Repo: https://github.com/Redocly/redoc */ ! function ( e , t ){ \"object\" == typeof exports && \"object\" == typeof m ... That confirms that you are being able to serve static files from your app, and that you placed the static files for the docs in the correct place. Now we can configure the app to use those static files for the docs. Disable the automatic docs \u00b6 The first step is to disable the automatic docs, as those use the CDN by default. To disable them, set their URLs to None when creating your FastAPI app: from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } Include the custom docs \u00b6 Now you can create the path operations for the custom docs. You can re-use FastAPI's internal functions to create the HTML pages for the docs, and pass them the needed arguments: openapi_url : the URL where the HTML page for the docs can get the OpenAPI schema for your API. You can use here the attribute app.openapi_url . title : the title of your API. oauth2_redirect_url : you can use app.swagger_ui_oauth2_redirect_url here to use the default. swagger_js_url : the URL where the HTML for your Swagger UI docs can get the JavaScript file. This is the one that your own app is now serving. swagger_css_url : the URL where the HTML for your Swagger UI docs can get the CSS file. This is the one that your own app is now serving. And similarly for ReDoc... from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } Tip The path operation for swagger_ui_redirect is a helper for when you use OAuth2. If you integrate your API with an OAuth2 provider, you will be able to authenticate and come back to the API docs with the acquired credentials. And interact with it using the real OAuth2 authentication. Swagger UI will handle it behind the scenes for you, but it needs this \"redirect\" helper. Create a path operation to test it \u00b6 Now, to be able to test that everything works, create a path operation : from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } Test it \u00b6 Now, you should be able to disconnect your WiFi, go to your docs at http://127.0.0.1:8000/docs , and reload the page. And even without Internet, you would be able to see the docs for your API and interact with it. Configuring Swagger UI \u00b6 You can configure some extra Swagger UI parameters . To configure them, pass the swagger_ui_parameters argument when creating the FastAPI() app object or to the get_swagger_ui_html() function. swagger_ui_parameters receives a dictionary with the configurations passed to Swagger UI directly. FastAPI converts the configurations to JSON to make them compatible with JavaScript, as that's what Swagger UI needs. Disable Syntax Highlighting \u00b6 For example, you could disable syntax highlighting in Swagger UI. Without changing the settings, syntax highlighting is enabled by default: But you can disable it by setting syntaxHighlight to False : from fastapi import FastAPI app = FastAPI ( swagger_ui_parameters = { \"syntaxHighlight\" : False }) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } ...and then Swagger UI won't show the syntax highlighting anymore: Change the Theme \u00b6 The same way you could set the syntax highlighting theme with the key \"syntaxHighlight.theme\" (notice that it has a dot in the middle): from fastapi import FastAPI app = FastAPI ( swagger_ui_parameters = { \"syntaxHighlight.theme\" : \"obsidian\" }) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } That configuration would change the syntax highlighting color theme: Change Default Swagger UI Parameters \u00b6 FastAPI includes some default configuration parameters appropriate for most of the use cases. It includes these default configurations: swagger_ui_default_parameters = { \"dom_id\" : \"#swagger-ui\" , \"layout\" : \"BaseLayout\" , \"deepLinking\" : True , \"showExtensions\" : True , \"showCommonExtensions\" : True , } You can override any of them by setting a different value in the argument swagger_ui_parameters . For example, to disable deepLinking you could pass these settings to swagger_ui_parameters : from fastapi import FastAPI app = FastAPI ( swagger_ui_parameters = { \"deepLinking\" : False }) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } Other Swagger UI Parameters \u00b6 To see all the other possible configurations you can use, read the official docs for Swagger UI parameters . JavaScript-only settings \u00b6 Swagger UI also allows other configurations to be JavaScript-only objects (for example, JavaScript functions). FastAPI also includes these JavaScript-only presets settings: presets : [ SwaggerUIBundle . presets . apis , SwaggerUIBundle . SwaggerUIStandalonePreset ] These are JavaScript objects, not strings, so you can't pass them from Python code directly. If you need to use JavaScript-only configurations like those, you can use one of the methods above. Override all the Swagger UI path operation and manually write any JavaScript you need.","title":"Extending OpenAPI"},{"location":"advanced/extending-openapi/#extending-openapi","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Warning This is a rather advanced feature. You probably can skip it. If you are just following the tutorial - user guide, you can probably skip this section. If you already know that you need to modify the generated OpenAPI schema, continue reading. There are some cases where you might need to modify the generated OpenAPI schema. In this section you will see how.","title":"Extending OpenAPI"},{"location":"advanced/extending-openapi/#the-normal-process","text":"The normal (default) process, is as follows. A FastAPI application (instance) has an .openapi() method that is expected to return the OpenAPI schema. As part of the application object creation, a path operation for /openapi.json (or for whatever you set your openapi_url ) is registered. It just returns a JSON response with the result of the application's .openapi() method. By default, what the method .openapi() does is check the property .openapi_schema to see if it has contents and return them. If it doesn't, it generates them using the utility function at fastapi.openapi.utils.get_openapi . And that function get_openapi() receives as parameters: title : The OpenAPI title, shown in the docs. version : The version of your API, e.g. 2.5.0 . openapi_version : The version of the OpenAPI specification used. By default, the latest: 3.0.2 . description : The description of your API. routes : A list of routes, these are each of the registered path operations . They are taken from app.routes .","title":"The normal process"},{"location":"advanced/extending-openapi/#overriding-the-defaults","text":"Using the information above, you can use the same utility function to generate the OpenAPI schema and override each part that you need. For example, let's add ReDoc's OpenAPI extension to include a custom logo .","title":"Overriding the defaults"},{"location":"advanced/extending-openapi/#normal-fastapi","text":"First, write all your FastAPI application as normally: from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"Normal FastAPI"},{"location":"advanced/extending-openapi/#generate-the-openapi-schema","text":"Then, use the same utility function to generate the OpenAPI schema, inside a custom_openapi() function: from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"Generate the OpenAPI schema"},{"location":"advanced/extending-openapi/#modify-the-openapi-schema","text":"Now you can add the ReDoc extension, adding a custom x-logo to the info \"object\" in the OpenAPI schema: from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"Modify the OpenAPI schema"},{"location":"advanced/extending-openapi/#cache-the-openapi-schema","text":"You can use the property .openapi_schema as a \"cache\", to store your generated schema. That way, your application won't have to generate the schema every time a user opens your API docs. It will be generated only once, and then the same cached schema will be used for the next requests. from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"Cache the OpenAPI schema"},{"location":"advanced/extending-openapi/#override-the-method","text":"Now you can replace the .openapi() method with your new function. from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"Override the method"},{"location":"advanced/extending-openapi/#check-it","text":"Once you go to http://127.0.0.1:8000/redoc you will see that you are using your custom logo (in this example, FastAPI 's logo):","title":"Check it"},{"location":"advanced/extending-openapi/#self-hosting-javascript-and-css-for-docs","text":"The API docs use Swagger UI and ReDoc , and each of those need some JavaScript and CSS files. By default, those files are served from a CDN . But it's possible to customize it, you can set a specific CDN, or serve the files yourself. That's useful, for example, if you need your app to keep working even while offline, without open Internet access, or in a local network. Here you'll see how to serve those files yourself, in the same FastAPI app, and configure the docs to use them.","title":"Self-hosting JavaScript and CSS for docs"},{"location":"advanced/extending-openapi/#project-file-structure","text":"Let's say your project file structure looks like this: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py Now create a directory to store those static files. Your new file structure could look like this: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2514\u2500\u2500 static/","title":"Project file structure"},{"location":"advanced/extending-openapi/#download-the-files","text":"Download the static files needed for the docs and put them on that static/ directory. You can probably right-click each link and select an option similar to Save link as... . Swagger UI uses the files: swagger-ui-bundle.js swagger-ui.css And ReDoc uses the file: redoc.standalone.js After that, your file structure could look like: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2514\u2500\u2500 static \u251c\u2500\u2500 redoc.standalone.js \u251c\u2500\u2500 swagger-ui-bundle.js \u2514\u2500\u2500 swagger-ui.css","title":"Download the files"},{"location":"advanced/extending-openapi/#serve-the-static-files","text":"Import StaticFiles . \"Mount\" a StaticFiles() instance in a specific path. from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" }","title":"Serve the static files"},{"location":"advanced/extending-openapi/#test-the-static-files","text":"Start your application and go to http://127.0.0.1:8000/static/redoc.standalone.js . You should see a very long JavaScript file for ReDoc . It could start with something like: /*! * ReDoc - OpenAPI/Swagger-generated API Reference Documentation * ------------------------------------------------------------- * Version: \"2.0.0-rc.18\" * Repo: https://github.com/Redocly/redoc */ ! function ( e , t ){ \"object\" == typeof exports && \"object\" == typeof m ... That confirms that you are being able to serve static files from your app, and that you placed the static files for the docs in the correct place. Now we can configure the app to use those static files for the docs.","title":"Test the static files"},{"location":"advanced/extending-openapi/#disable-the-automatic-docs","text":"The first step is to disable the automatic docs, as those use the CDN by default. To disable them, set their URLs to None when creating your FastAPI app: from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" }","title":"Disable the automatic docs"},{"location":"advanced/extending-openapi/#include-the-custom-docs","text":"Now you can create the path operations for the custom docs. You can re-use FastAPI's internal functions to create the HTML pages for the docs, and pass them the needed arguments: openapi_url : the URL where the HTML page for the docs can get the OpenAPI schema for your API. You can use here the attribute app.openapi_url . title : the title of your API. oauth2_redirect_url : you can use app.swagger_ui_oauth2_redirect_url here to use the default. swagger_js_url : the URL where the HTML for your Swagger UI docs can get the JavaScript file. This is the one that your own app is now serving. swagger_css_url : the URL where the HTML for your Swagger UI docs can get the CSS file. This is the one that your own app is now serving. And similarly for ReDoc... from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } Tip The path operation for swagger_ui_redirect is a helper for when you use OAuth2. If you integrate your API with an OAuth2 provider, you will be able to authenticate and come back to the API docs with the acquired credentials. And interact with it using the real OAuth2 authentication. Swagger UI will handle it behind the scenes for you, but it needs this \"redirect\" helper.","title":"Include the custom docs"},{"location":"advanced/extending-openapi/#create-a-path-operation-to-test-it","text":"Now, to be able to test that everything works, create a path operation : from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" }","title":"Create a path operation to test it"},{"location":"advanced/extending-openapi/#test-it","text":"Now, you should be able to disconnect your WiFi, go to your docs at http://127.0.0.1:8000/docs , and reload the page. And even without Internet, you would be able to see the docs for your API and interact with it.","title":"Test it"},{"location":"advanced/extending-openapi/#configuring-swagger-ui","text":"You can configure some extra Swagger UI parameters . To configure them, pass the swagger_ui_parameters argument when creating the FastAPI() app object or to the get_swagger_ui_html() function. swagger_ui_parameters receives a dictionary with the configurations passed to Swagger UI directly. FastAPI converts the configurations to JSON to make them compatible with JavaScript, as that's what Swagger UI needs.","title":"Configuring Swagger UI"},{"location":"advanced/extending-openapi/#disable-syntax-highlighting","text":"For example, you could disable syntax highlighting in Swagger UI. Without changing the settings, syntax highlighting is enabled by default: But you can disable it by setting syntaxHighlight to False : from fastapi import FastAPI app = FastAPI ( swagger_ui_parameters = { \"syntaxHighlight\" : False }) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } ...and then Swagger UI won't show the syntax highlighting anymore:","title":"Disable Syntax Highlighting"},{"location":"advanced/extending-openapi/#change-the-theme","text":"The same way you could set the syntax highlighting theme with the key \"syntaxHighlight.theme\" (notice that it has a dot in the middle): from fastapi import FastAPI app = FastAPI ( swagger_ui_parameters = { \"syntaxHighlight.theme\" : \"obsidian\" }) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } That configuration would change the syntax highlighting color theme:","title":"Change the Theme"},{"location":"advanced/extending-openapi/#change-default-swagger-ui-parameters","text":"FastAPI includes some default configuration parameters appropriate for most of the use cases. It includes these default configurations: swagger_ui_default_parameters = { \"dom_id\" : \"#swagger-ui\" , \"layout\" : \"BaseLayout\" , \"deepLinking\" : True , \"showExtensions\" : True , \"showCommonExtensions\" : True , } You can override any of them by setting a different value in the argument swagger_ui_parameters . For example, to disable deepLinking you could pass these settings to swagger_ui_parameters : from fastapi import FastAPI app = FastAPI ( swagger_ui_parameters = { \"deepLinking\" : False }) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" }","title":"Change Default Swagger UI Parameters"},{"location":"advanced/extending-openapi/#other-swagger-ui-parameters","text":"To see all the other possible configurations you can use, read the official docs for Swagger UI parameters .","title":"Other Swagger UI Parameters"},{"location":"advanced/extending-openapi/#javascript-only-settings","text":"Swagger UI also allows other configurations to be JavaScript-only objects (for example, JavaScript functions). FastAPI also includes these JavaScript-only presets settings: presets : [ SwaggerUIBundle . presets . apis , SwaggerUIBundle . SwaggerUIStandalonePreset ] These are JavaScript objects, not strings, so you can't pass them from Python code directly. If you need to use JavaScript-only configurations like those, you can use one of the methods above. Override all the Swagger UI path operation and manually write any JavaScript you need.","title":"JavaScript-only settings"},{"location":"advanced/generate-clients/","text":"Generate Clients \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . As FastAPI is based on the OpenAPI specification, you get automatic compatibility with many tools, including the automatic API docs (provided by Swagger UI). One particular advantage that is not necessarily obvious is that you can generate clients (sometimes called SDKs ) for your API, for many different programming languages . OpenAPI Client Generators \u00b6 There are many tools to generate clients from OpenAPI . A common tool is OpenAPI Generator . If you are building a frontend , a very interesting alternative is openapi-typescript-codegen . Generate a TypeScript Frontend Client \u00b6 Let's start with a simple FastAPI application: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str @app . post ( \"/items/\" , response_model = ResponseMessage ) async def create_item ( item : Item ): return { \"message\" : \"item received\" } @app . get ( \"/items/\" , response_model = List [ Item ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str @app . post ( \"/items/\" , response_model = ResponseMessage ) async def create_item ( item : Item ): return { \"message\" : \"item received\" } @app . get ( \"/items/\" , response_model = list [ Item ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] Notice that the path operations define the models they use for request payload and response payload, using the models Item and ResponseMessage . API Docs \u00b6 If you go to the API docs, you will see that it has the schemas for the data to be sent in requests and received in responses: You can see those schemas because they were declared with the models in the app. That information is available in the app's OpenAPI schema , and then shown in the API docs (by Swagger UI). And that same information from the models that is included in OpenAPI is what can be used to generate the client code . Generate a TypeScript Client \u00b6 Now that we have the app with the models, we can generate the client code for the frontend. Install openapi-typescript-codegen \u00b6 You can install openapi-typescript-codegen in your frontend code with: $ npm install openapi-typescript-codegen --save-dev ---> 100% Generate Client Code \u00b6 To generate the client code you can use the command line application openapi that would now be installed. Because it is installed in the local project, you probably wouldn't be able to call that command directly, but you would put it on your package.json file. It could look like this: { \"name\" : \"frontend-app\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"index.js\" , \"scripts\" : { \"generate-client\" : \"openapi --input http://localhost:8000/openapi.json --output ./src/client --client axios\" }, \"author\" : \"\" , \"license\" : \"\" , \"devDependencies\" : { \"openapi-typescript-codegen\" : \"^0.20.1\" , \"typescript\" : \"^4.6.2\" } } After having that NPM generate-client script there, you can run it with: $ npm run generate-client frontend-app@1.0.0 generate-client /home/user/code/frontend-app > openapi --input http://localhost:8000/openapi.json --output ./src/client --client axios That command will generate code in ./src/client and will use axios (the frontend HTTP library) internally. Try Out the Client Code \u00b6 Now you can import and use the client code, it could look like this, notice that you get autocompletion for the methods: You will also get autocompletion for the payload to send: Tip Notice the autocompletion for name and price , that was defined in the FastAPI application, in the Item model. You will have inline errors for the data that you send: The response object will also have autocompletion: FastAPI App with Tags \u00b6 In many cases your FastAPI app will be bigger, and you will probably use tags to separate different groups of path operations . For example, you could have a section for items and another section for users , and they could be separated by tags: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = List [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = list [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } Generate a TypeScript Client with Tags \u00b6 If you generate a client for a FastAPI app using tags, it will normally also separate the client code based on the tags. This way you will be able to have things ordered and grouped correctly for the client code: In this case you have: ItemsService UsersService Client Method Names \u00b6 Right now the generated method names like createItemItemsPost don't look very clean: ItemsService . createItemItemsPost ({ name : \"Plumbus\" , price : 5 }) ...that's because the client generator uses the OpenAPI internal operation ID for each path operation . OpenAPI requires that each operation ID is unique across all the path operations , so FastAPI uses the function name , the path , and the HTTP method/operation to generate that operation ID, because that way it can make sure that the operation IDs are unique. But I'll show you how to improve that next. \ud83e\udd13 Custom Operation IDs and Better Method Names \u00b6 You can modify the way these operation IDs are generated to make them simpler and have simpler method names in the clients. In this case you will have to ensure that each operation ID is unique in some other way. For example, you could make sure that each path operation has a tag, and then generate the operation ID based on the tag and the path operation name (the function name). Custom Generate Unique ID Function \u00b6 FastAPI uses a unique ID for each path operation , it is used for the operation ID and also for the names of any needed custom models, for requests or responses. You can customize that function. It takes an APIRoute and outputs a string. For example, here it is using the first tag (you will probably have only one tag) and the path operation name (the function name). You can then pass that custom function to FastAPI as the generate_unique_id_function parameter: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from fastapi.routing import APIRoute from pydantic import BaseModel def custom_generate_unique_id ( route : APIRoute ): return f \" { route . tags [ 0 ] } - { route . name } \" app = FastAPI ( generate_unique_id_function = custom_generate_unique_id ) class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = List [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } from fastapi import FastAPI from fastapi.routing import APIRoute from pydantic import BaseModel def custom_generate_unique_id ( route : APIRoute ): return f \" { route . tags [ 0 ] } - { route . name } \" app = FastAPI ( generate_unique_id_function = custom_generate_unique_id ) class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = list [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } Generate a TypeScript Client with Custom Operation IDs \u00b6 Now if you generate the client again, you will see that it has the improved method names: As you see, the method names now have the tag and then the function name, now they don't include information from the URL path and the HTTP operation. Preprocess the OpenAPI Specification for the Client Generator \u00b6 The generated code still has some duplicated information . We already know that this method is related to the items because that word is in the ItemsService (taken from the tag), but we still have the tag name prefixed in the method name too. \ud83d\ude15 We will probably still want to keep it for OpenAPI in general, as that will ensure that the operation IDs are unique . But for the generated client we could modify the OpenAPI operation IDs right before generating the clients, just to make those method names nicer and cleaner . We could download the OpenAPI JSON to a file openapi.json and then we could remove that prefixed tag with a script like this: import json from pathlib import Path file_path = Path ( \"./openapi.json\" ) openapi_content = json . loads ( file_path . read_text ()) for path_data in openapi_content [ \"paths\" ] . values (): for operation in path_data . values (): tag = operation [ \"tags\" ][ 0 ] operation_id = operation [ \"operationId\" ] to_remove = f \" { tag } -\" new_operation_id = operation_id [ len ( to_remove ) :] operation [ \"operationId\" ] = new_operation_id file_path . write_text ( json . dumps ( openapi_content )) With that, the operation IDs would be renamed from things like items-get_items to just get_items , that way the client generator can generate simpler method names. Generate a TypeScript Client with the Preprocessed OpenAPI \u00b6 Now as the end result is in a file openapi.json , you would modify the package.json to use that local file, for example: { \"name\" : \"frontend-app\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"index.js\" , \"scripts\" : { \"generate-client\" : \"openapi --input ./openapi.json --output ./src/client --client axios\" }, \"author\" : \"\" , \"license\" : \"\" , \"devDependencies\" : { \"openapi-typescript-codegen\" : \"^0.20.1\" , \"typescript\" : \"^4.6.2\" } } After generating the new client, you would now have clean method names , with all the autocompletion , inline errors , etc: Benefits \u00b6 When using the automatically generated clients you would autocompletion for: Methods. Request payloads in the body, query parameters, etc. Response payloads. You would also have inline errors for everything. And whenever you update the backend code, and regenerate the frontend, it would have any new path operations available as methods, the old ones removed, and any other change would be reflected on the generated code. \ud83e\udd13 This also means that if something changed it will be reflected on the client code automatically. And if you build the client it will error out if you have any mismatch in the data used. So, you would detect many errors very early in the development cycle instead of having to wait for the errors to show up to your final users in production and then trying to debug where the problem is. \u2728","title":"Generate Clients"},{"location":"advanced/generate-clients/#generate-clients","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . As FastAPI is based on the OpenAPI specification, you get automatic compatibility with many tools, including the automatic API docs (provided by Swagger UI). One particular advantage that is not necessarily obvious is that you can generate clients (sometimes called SDKs ) for your API, for many different programming languages .","title":"Generate Clients"},{"location":"advanced/generate-clients/#openapi-client-generators","text":"There are many tools to generate clients from OpenAPI . A common tool is OpenAPI Generator . If you are building a frontend , a very interesting alternative is openapi-typescript-codegen .","title":"OpenAPI Client Generators"},{"location":"advanced/generate-clients/#generate-a-typescript-frontend-client","text":"Let's start with a simple FastAPI application: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str @app . post ( \"/items/\" , response_model = ResponseMessage ) async def create_item ( item : Item ): return { \"message\" : \"item received\" } @app . get ( \"/items/\" , response_model = List [ Item ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str @app . post ( \"/items/\" , response_model = ResponseMessage ) async def create_item ( item : Item ): return { \"message\" : \"item received\" } @app . get ( \"/items/\" , response_model = list [ Item ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] Notice that the path operations define the models they use for request payload and response payload, using the models Item and ResponseMessage .","title":"Generate a TypeScript Frontend Client"},{"location":"advanced/generate-clients/#api-docs","text":"If you go to the API docs, you will see that it has the schemas for the data to be sent in requests and received in responses: You can see those schemas because they were declared with the models in the app. That information is available in the app's OpenAPI schema , and then shown in the API docs (by Swagger UI). And that same information from the models that is included in OpenAPI is what can be used to generate the client code .","title":"API Docs"},{"location":"advanced/generate-clients/#generate-a-typescript-client","text":"Now that we have the app with the models, we can generate the client code for the frontend.","title":"Generate a TypeScript Client"},{"location":"advanced/generate-clients/#install-openapi-typescript-codegen","text":"You can install openapi-typescript-codegen in your frontend code with: $ npm install openapi-typescript-codegen --save-dev ---> 100%","title":"Install openapi-typescript-codegen"},{"location":"advanced/generate-clients/#generate-client-code","text":"To generate the client code you can use the command line application openapi that would now be installed. Because it is installed in the local project, you probably wouldn't be able to call that command directly, but you would put it on your package.json file. It could look like this: { \"name\" : \"frontend-app\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"index.js\" , \"scripts\" : { \"generate-client\" : \"openapi --input http://localhost:8000/openapi.json --output ./src/client --client axios\" }, \"author\" : \"\" , \"license\" : \"\" , \"devDependencies\" : { \"openapi-typescript-codegen\" : \"^0.20.1\" , \"typescript\" : \"^4.6.2\" } } After having that NPM generate-client script there, you can run it with: $ npm run generate-client frontend-app@1.0.0 generate-client /home/user/code/frontend-app > openapi --input http://localhost:8000/openapi.json --output ./src/client --client axios That command will generate code in ./src/client and will use axios (the frontend HTTP library) internally.","title":"Generate Client Code"},{"location":"advanced/generate-clients/#try-out-the-client-code","text":"Now you can import and use the client code, it could look like this, notice that you get autocompletion for the methods: You will also get autocompletion for the payload to send: Tip Notice the autocompletion for name and price , that was defined in the FastAPI application, in the Item model. You will have inline errors for the data that you send: The response object will also have autocompletion:","title":"Try Out the Client Code"},{"location":"advanced/generate-clients/#fastapi-app-with-tags","text":"In many cases your FastAPI app will be bigger, and you will probably use tags to separate different groups of path operations . For example, you could have a section for items and another section for users , and they could be separated by tags: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = List [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = list [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" }","title":"FastAPI App with Tags"},{"location":"advanced/generate-clients/#generate-a-typescript-client-with-tags","text":"If you generate a client for a FastAPI app using tags, it will normally also separate the client code based on the tags. This way you will be able to have things ordered and grouped correctly for the client code: In this case you have: ItemsService UsersService","title":"Generate a TypeScript Client with Tags"},{"location":"advanced/generate-clients/#client-method-names","text":"Right now the generated method names like createItemItemsPost don't look very clean: ItemsService . createItemItemsPost ({ name : \"Plumbus\" , price : 5 }) ...that's because the client generator uses the OpenAPI internal operation ID for each path operation . OpenAPI requires that each operation ID is unique across all the path operations , so FastAPI uses the function name , the path , and the HTTP method/operation to generate that operation ID, because that way it can make sure that the operation IDs are unique. But I'll show you how to improve that next. \ud83e\udd13","title":"Client Method Names"},{"location":"advanced/generate-clients/#custom-operation-ids-and-better-method-names","text":"You can modify the way these operation IDs are generated to make them simpler and have simpler method names in the clients. In this case you will have to ensure that each operation ID is unique in some other way. For example, you could make sure that each path operation has a tag, and then generate the operation ID based on the tag and the path operation name (the function name).","title":"Custom Operation IDs and Better Method Names"},{"location":"advanced/generate-clients/#custom-generate-unique-id-function","text":"FastAPI uses a unique ID for each path operation , it is used for the operation ID and also for the names of any needed custom models, for requests or responses. You can customize that function. It takes an APIRoute and outputs a string. For example, here it is using the first tag (you will probably have only one tag) and the path operation name (the function name). You can then pass that custom function to FastAPI as the generate_unique_id_function parameter: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from fastapi.routing import APIRoute from pydantic import BaseModel def custom_generate_unique_id ( route : APIRoute ): return f \" { route . tags [ 0 ] } - { route . name } \" app = FastAPI ( generate_unique_id_function = custom_generate_unique_id ) class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = List [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } from fastapi import FastAPI from fastapi.routing import APIRoute from pydantic import BaseModel def custom_generate_unique_id ( route : APIRoute ): return f \" { route . tags [ 0 ] } - { route . name } \" app = FastAPI ( generate_unique_id_function = custom_generate_unique_id ) class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = list [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" }","title":"Custom Generate Unique ID Function"},{"location":"advanced/generate-clients/#generate-a-typescript-client-with-custom-operation-ids","text":"Now if you generate the client again, you will see that it has the improved method names: As you see, the method names now have the tag and then the function name, now they don't include information from the URL path and the HTTP operation.","title":"Generate a TypeScript Client with Custom Operation IDs"},{"location":"advanced/generate-clients/#preprocess-the-openapi-specification-for-the-client-generator","text":"The generated code still has some duplicated information . We already know that this method is related to the items because that word is in the ItemsService (taken from the tag), but we still have the tag name prefixed in the method name too. \ud83d\ude15 We will probably still want to keep it for OpenAPI in general, as that will ensure that the operation IDs are unique . But for the generated client we could modify the OpenAPI operation IDs right before generating the clients, just to make those method names nicer and cleaner . We could download the OpenAPI JSON to a file openapi.json and then we could remove that prefixed tag with a script like this: import json from pathlib import Path file_path = Path ( \"./openapi.json\" ) openapi_content = json . loads ( file_path . read_text ()) for path_data in openapi_content [ \"paths\" ] . values (): for operation in path_data . values (): tag = operation [ \"tags\" ][ 0 ] operation_id = operation [ \"operationId\" ] to_remove = f \" { tag } -\" new_operation_id = operation_id [ len ( to_remove ) :] operation [ \"operationId\" ] = new_operation_id file_path . write_text ( json . dumps ( openapi_content )) With that, the operation IDs would be renamed from things like items-get_items to just get_items , that way the client generator can generate simpler method names.","title":"Preprocess the OpenAPI Specification for the Client Generator"},{"location":"advanced/generate-clients/#generate-a-typescript-client-with-the-preprocessed-openapi","text":"Now as the end result is in a file openapi.json , you would modify the package.json to use that local file, for example: { \"name\" : \"frontend-app\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"index.js\" , \"scripts\" : { \"generate-client\" : \"openapi --input ./openapi.json --output ./src/client --client axios\" }, \"author\" : \"\" , \"license\" : \"\" , \"devDependencies\" : { \"openapi-typescript-codegen\" : \"^0.20.1\" , \"typescript\" : \"^4.6.2\" } } After generating the new client, you would now have clean method names , with all the autocompletion , inline errors , etc:","title":"Generate a TypeScript Client with the Preprocessed OpenAPI"},{"location":"advanced/generate-clients/#benefits","text":"When using the automatically generated clients you would autocompletion for: Methods. Request payloads in the body, query parameters, etc. Response payloads. You would also have inline errors for everything. And whenever you update the backend code, and regenerate the frontend, it would have any new path operations available as methods, the old ones removed, and any other change would be reflected on the generated code. \ud83e\udd13 This also means that if something changed it will be reflected on the client code automatically. And if you build the client it will error out if you have any mismatch in the data used. So, you would detect many errors very early in the development cycle instead of having to wait for the errors to show up to your final users in production and then trying to debug where the problem is. \u2728","title":"Benefits"},{"location":"advanced/graphql/","text":"GraphQL \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . As FastAPI is based on the ASGI standard, it's very easy to integrate any GraphQL library also compatible with ASGI. You can combine normal FastAPI path operations with GraphQL on the same application. Tip GraphQL solves some very specific use cases. It has advantages and disadvantages when compared to common web APIs . Make sure you evaluate if the benefits for your use case compensate the drawbacks . \ud83e\udd13 GraphQL Libraries \u00b6 Here are some of the GraphQL libraries that have ASGI support. You could use them with FastAPI : Strawberry \ud83c\udf53 With docs for FastAPI Ariadne With docs for Starlette (that also apply to FastAPI) Tartiflette With Tartiflette ASGI to provide ASGI integration Graphene With starlette-graphene3 GraphQL with Strawberry \u00b6 If you need or want to work with GraphQL , Strawberry is the recommended library as it has the design closest to FastAPI's design, it's all based on type annotations . Depending on your use case, you might prefer to use a different library, but if you asked me, I would probably suggest you try Strawberry . Here's a small preview of how you could integrate Strawberry with FastAPI: import strawberry from fastapi import FastAPI from strawberry.asgi import GraphQL @strawberry . type class User : name : str age : int @strawberry . type class Query : @strawberry . field def user ( self ) -> User : return User ( name = \"Patrick\" , age = 100 ) schema = strawberry . Schema ( query = Query ) graphql_app = GraphQL ( schema ) app = FastAPI () app . add_route ( \"/graphql\" , graphql_app ) app . add_websocket_route ( \"/graphql\" , graphql_app ) You can learn more about Strawberry in the Strawberry documentation . And also the docs about Strawberry with FastAPI . Older GraphQLApp from Starlette \u00b6 Previous versions of Starlette included a GraphQLApp class to integrate with Graphene . It was deprecated from Starlette, but if you have code that used it, you can easily migrate to starlette-graphene3 , that covers the same use case and has an almost identical interface . Tip If you need GraphQL, I still would recommend you check out Strawberry , as it's based on type annotations instead of custom classes and types. Learn More \u00b6 You can learn more about GraphQL in the official GraphQL documentation . You can also read more about each those libraries described above in their links.","title":"GraphQL"},{"location":"advanced/graphql/#graphql","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . As FastAPI is based on the ASGI standard, it's very easy to integrate any GraphQL library also compatible with ASGI. You can combine normal FastAPI path operations with GraphQL on the same application. Tip GraphQL solves some very specific use cases. It has advantages and disadvantages when compared to common web APIs . Make sure you evaluate if the benefits for your use case compensate the drawbacks . \ud83e\udd13","title":"GraphQL"},{"location":"advanced/graphql/#graphql-libraries","text":"Here are some of the GraphQL libraries that have ASGI support. You could use them with FastAPI : Strawberry \ud83c\udf53 With docs for FastAPI Ariadne With docs for Starlette (that also apply to FastAPI) Tartiflette With Tartiflette ASGI to provide ASGI integration Graphene With starlette-graphene3","title":"GraphQL Libraries"},{"location":"advanced/graphql/#graphql-with-strawberry","text":"If you need or want to work with GraphQL , Strawberry is the recommended library as it has the design closest to FastAPI's design, it's all based on type annotations . Depending on your use case, you might prefer to use a different library, but if you asked me, I would probably suggest you try Strawberry . Here's a small preview of how you could integrate Strawberry with FastAPI: import strawberry from fastapi import FastAPI from strawberry.asgi import GraphQL @strawberry . type class User : name : str age : int @strawberry . type class Query : @strawberry . field def user ( self ) -> User : return User ( name = \"Patrick\" , age = 100 ) schema = strawberry . Schema ( query = Query ) graphql_app = GraphQL ( schema ) app = FastAPI () app . add_route ( \"/graphql\" , graphql_app ) app . add_websocket_route ( \"/graphql\" , graphql_app ) You can learn more about Strawberry in the Strawberry documentation . And also the docs about Strawberry with FastAPI .","title":"GraphQL with Strawberry"},{"location":"advanced/graphql/#older-graphqlapp-from-starlette","text":"Previous versions of Starlette included a GraphQLApp class to integrate with Graphene . It was deprecated from Starlette, but if you have code that used it, you can easily migrate to starlette-graphene3 , that covers the same use case and has an almost identical interface . Tip If you need GraphQL, I still would recommend you check out Strawberry , as it's based on type annotations instead of custom classes and types.","title":"Older GraphQLApp from Starlette"},{"location":"advanced/graphql/#learn-more","text":"You can learn more about GraphQL in the official GraphQL documentation . You can also read more about each those libraries described above in their links.","title":"Learn More"},{"location":"advanced/middleware/","text":"Advanced Middleware \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In the main tutorial you read how to add Custom Middleware to your application. And then you also read how to handle CORS with the CORSMiddleware . In this section we'll see how to use other middlewares. Adding ASGI middlewares \u00b6 As FastAPI is based on Starlette and implements the ASGI specification, you can use any ASGI middleware. A middleware doesn't have to be made for FastAPI or Starlette to work, as long as it follows the ASGI spec. In general, ASGI middlewares are classes that expect to receive an ASGI app as the first argument. So, in the documentation for third-party ASGI middlewares they will probably tell you to do something like: from unicorn import UnicornMiddleware app = SomeASGIApp () new_app = UnicornMiddleware ( app , some_config = \"rainbow\" ) But FastAPI (actually Starlette) provides a simpler way to do it that makes sure that the internal middlewares to handle server errors and custom exception handlers work properly. For that, you use app.add_middleware() (as in the example for CORS). from fastapi import FastAPI from unicorn import UnicornMiddleware app = FastAPI () app . add_middleware ( UnicornMiddleware , some_config = \"rainbow\" ) app.add_middleware() receives a middleware class as the first argument and any additional arguments to be passed to the middleware. Integrated middlewares \u00b6 FastAPI includes several middlewares for common use cases, we'll see next how to use them. Technical Details For the next examples, you could also use from starlette.middleware.something import SomethingMiddleware . FastAPI provides several middlewares in fastapi.middleware just as a convenience for you, the developer. But most of the available middlewares come directly from Starlette. HTTPSRedirectMiddleware \u00b6 Enforces that all incoming requests must either be https or wss . Any incoming requests to http or ws will be redirected to the secure scheme instead. from fastapi import FastAPI from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware app = FastAPI () app . add_middleware ( HTTPSRedirectMiddleware ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } TrustedHostMiddleware \u00b6 Enforces that all incoming requests have a correctly set Host header, in order to guard against HTTP Host Header attacks. from fastapi import FastAPI from fastapi.middleware.trustedhost import TrustedHostMiddleware app = FastAPI () app . add_middleware ( TrustedHostMiddleware , allowed_hosts = [ \"example.com\" , \"*.example.com\" ] ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } The following arguments are supported: allowed_hosts - A list of domain names that should be allowed as hostnames. Wildcard domains such as *.example.com are supported for matching subdomains to allow any hostname either use allowed_hosts=[\"*\"] or omit the middleware. If an incoming request does not validate correctly then a 400 response will be sent. GZipMiddleware \u00b6 Handles GZip responses for any request that includes \"gzip\" in the Accept-Encoding header. The middleware will handle both standard and streaming responses. from fastapi import FastAPI from fastapi.middleware.gzip import GZipMiddleware app = FastAPI () app . add_middleware ( GZipMiddleware , minimum_size = 1000 ) @app . get ( \"/\" ) async def main (): return \"somebigcontent\" The following arguments are supported: minimum_size - Do not GZip responses that are smaller than this minimum size in bytes. Defaults to 500 . Other middlewares \u00b6 There are many other ASGI middlewares. For example: Sentry Uvicorn's ProxyHeadersMiddleware MessagePack To see other available middlewares check Starlette's Middleware docs and the ASGI Awesome List .","title":"Advanced Middleware"},{"location":"advanced/middleware/#advanced-middleware","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In the main tutorial you read how to add Custom Middleware to your application. And then you also read how to handle CORS with the CORSMiddleware . In this section we'll see how to use other middlewares.","title":"Advanced Middleware"},{"location":"advanced/middleware/#adding-asgi-middlewares","text":"As FastAPI is based on Starlette and implements the ASGI specification, you can use any ASGI middleware. A middleware doesn't have to be made for FastAPI or Starlette to work, as long as it follows the ASGI spec. In general, ASGI middlewares are classes that expect to receive an ASGI app as the first argument. So, in the documentation for third-party ASGI middlewares they will probably tell you to do something like: from unicorn import UnicornMiddleware app = SomeASGIApp () new_app = UnicornMiddleware ( app , some_config = \"rainbow\" ) But FastAPI (actually Starlette) provides a simpler way to do it that makes sure that the internal middlewares to handle server errors and custom exception handlers work properly. For that, you use app.add_middleware() (as in the example for CORS). from fastapi import FastAPI from unicorn import UnicornMiddleware app = FastAPI () app . add_middleware ( UnicornMiddleware , some_config = \"rainbow\" ) app.add_middleware() receives a middleware class as the first argument and any additional arguments to be passed to the middleware.","title":"Adding ASGI middlewares"},{"location":"advanced/middleware/#integrated-middlewares","text":"FastAPI includes several middlewares for common use cases, we'll see next how to use them. Technical Details For the next examples, you could also use from starlette.middleware.something import SomethingMiddleware . FastAPI provides several middlewares in fastapi.middleware just as a convenience for you, the developer. But most of the available middlewares come directly from Starlette.","title":"Integrated middlewares"},{"location":"advanced/middleware/#httpsredirectmiddleware","text":"Enforces that all incoming requests must either be https or wss . Any incoming requests to http or ws will be redirected to the secure scheme instead. from fastapi import FastAPI from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware app = FastAPI () app . add_middleware ( HTTPSRedirectMiddleware ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" }","title":"HTTPSRedirectMiddleware"},{"location":"advanced/middleware/#trustedhostmiddleware","text":"Enforces that all incoming requests have a correctly set Host header, in order to guard against HTTP Host Header attacks. from fastapi import FastAPI from fastapi.middleware.trustedhost import TrustedHostMiddleware app = FastAPI () app . add_middleware ( TrustedHostMiddleware , allowed_hosts = [ \"example.com\" , \"*.example.com\" ] ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } The following arguments are supported: allowed_hosts - A list of domain names that should be allowed as hostnames. Wildcard domains such as *.example.com are supported for matching subdomains to allow any hostname either use allowed_hosts=[\"*\"] or omit the middleware. If an incoming request does not validate correctly then a 400 response will be sent.","title":"TrustedHostMiddleware"},{"location":"advanced/middleware/#gzipmiddleware","text":"Handles GZip responses for any request that includes \"gzip\" in the Accept-Encoding header. The middleware will handle both standard and streaming responses. from fastapi import FastAPI from fastapi.middleware.gzip import GZipMiddleware app = FastAPI () app . add_middleware ( GZipMiddleware , minimum_size = 1000 ) @app . get ( \"/\" ) async def main (): return \"somebigcontent\" The following arguments are supported: minimum_size - Do not GZip responses that are smaller than this minimum size in bytes. Defaults to 500 .","title":"GZipMiddleware"},{"location":"advanced/middleware/#other-middlewares","text":"There are many other ASGI middlewares. For example: Sentry Uvicorn's ProxyHeadersMiddleware MessagePack To see other available middlewares check Starlette's Middleware docs and the ASGI Awesome List .","title":"Other middlewares"},{"location":"advanced/nosql-databases/","text":"NoSQL (Distributed / Big Data) Databases \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI can also be integrated with any NoSQL . Here we'll see an example using Couchbase , a document based NoSQL database. You can adapt it to any other NoSQL database like: MongoDB Cassandra CouchDB ArangoDB ElasticSearch , etc. Tip There is an official project generator with FastAPI and Couchbase , all based on Docker , including a frontend and more tools: https://github.com/tiangolo/full-stack-fastapi-couchbase Import Couchbase components \u00b6 For now, don't pay attention to the rest, only the imports: from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user Define a constant to use as a \"document type\" \u00b6 We will use it later as a fixed field type in our documents. This is not required by Couchbase, but is a good practice that will help you afterwards. from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user Add a function to get a Bucket \u00b6 In Couchbase , a bucket is a set of documents, that can be of different types. They are generally all related to the same application. The analogy in the relational database world would be a \"database\" (a specific database, not the database server). The analogy in MongoDB would be a \"collection\". In the code, a Bucket represents the main entrypoint of communication with the database. This utility function will: Connect to a Couchbase cluster (that might be a single machine). Set defaults for timeouts. Authenticate in the cluster. Get a Bucket instance. Set defaults for timeouts. Return it. from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user Create Pydantic models \u00b6 As Couchbase \"documents\" are actually just \"JSON objects\", we can model them with Pydantic. User model \u00b6 First, let's create a User model: from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user We will use this model in our path operation function , so, we don't include in it the hashed_password . UserInDB model \u00b6 Now, let's create a UserInDB model. This will have the data that is actually stored in the database. We don't create it as a subclass of Pydantic's BaseModel but as a subclass of our own User , because it will have all the attributes in User plus a couple more: from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user Note Notice that we have a hashed_password and a type field that will be stored in the database. But it is not part of the general User model (the one we will return in the path operation ). Get the user \u00b6 Now create a function that will: Take a username. Generate a document ID from it. Get the document with that ID. Put the contents of the document in a UserInDB model. By creating a function that is only dedicated to getting your user from a username (or any other parameter) independent of your path operation function , you can more easily re-use it in multiple parts and also add unit tests for it: from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user f-strings \u00b6 If you are not familiar with the f\"userprofile::{username}\" , it is a Python \" f-string \". Any variable that is put inside of {} in an f-string will be expanded / injected in the string. dict unpacking \u00b6 If you are not familiar with the UserInDB(**result.value) , it is using dict \"unpacking\" . It will take the dict at result.value , and take each of its keys and values and pass them as key-values to UserInDB as keyword arguments. So, if the dict contains: { \"username\" : \"johndoe\" , \"hashed_password\" : \"some_hash\" , } It will be passed to UserInDB as: UserInDB ( username = \"johndoe\" , hashed_password = \"some_hash\" ) Create your FastAPI code \u00b6 Create the FastAPI app \u00b6 from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user Create the path operation function \u00b6 As our code is calling Couchbase and we are not using the experimental Python await support , we should declare our function with normal def instead of async def . Also, Couchbase recommends not using a single Bucket object in multiple \" thread s\", so, we can just get the bucket directly and pass it to our utility functions: from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user Recap \u00b6 You can integrate any third party NoSQL database, just using their standard packages. The same applies to any other external tool, system or API.","title":"NoSQL (Distributed / Big Data) Databases"},{"location":"advanced/nosql-databases/#nosql-distributed-big-data-databases","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI can also be integrated with any NoSQL . Here we'll see an example using Couchbase , a document based NoSQL database. You can adapt it to any other NoSQL database like: MongoDB Cassandra CouchDB ArangoDB ElasticSearch , etc. Tip There is an official project generator with FastAPI and Couchbase , all based on Docker , including a frontend and more tools: https://github.com/tiangolo/full-stack-fastapi-couchbase","title":"NoSQL (Distributed / Big Data) Databases"},{"location":"advanced/nosql-databases/#import-couchbase-components","text":"For now, don't pay attention to the rest, only the imports: from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"Import Couchbase components"},{"location":"advanced/nosql-databases/#define-a-constant-to-use-as-a-document-type","text":"We will use it later as a fixed field type in our documents. This is not required by Couchbase, but is a good practice that will help you afterwards. from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"Define a constant to use as a \"document type\""},{"location":"advanced/nosql-databases/#add-a-function-to-get-a-bucket","text":"In Couchbase , a bucket is a set of documents, that can be of different types. They are generally all related to the same application. The analogy in the relational database world would be a \"database\" (a specific database, not the database server). The analogy in MongoDB would be a \"collection\". In the code, a Bucket represents the main entrypoint of communication with the database. This utility function will: Connect to a Couchbase cluster (that might be a single machine). Set defaults for timeouts. Authenticate in the cluster. Get a Bucket instance. Set defaults for timeouts. Return it. from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"Add a function to get a Bucket"},{"location":"advanced/nosql-databases/#create-pydantic-models","text":"As Couchbase \"documents\" are actually just \"JSON objects\", we can model them with Pydantic.","title":"Create Pydantic models"},{"location":"advanced/nosql-databases/#user-model","text":"First, let's create a User model: from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user We will use this model in our path operation function , so, we don't include in it the hashed_password .","title":"User model"},{"location":"advanced/nosql-databases/#userindb-model","text":"Now, let's create a UserInDB model. This will have the data that is actually stored in the database. We don't create it as a subclass of Pydantic's BaseModel but as a subclass of our own User , because it will have all the attributes in User plus a couple more: from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user Note Notice that we have a hashed_password and a type field that will be stored in the database. But it is not part of the general User model (the one we will return in the path operation ).","title":"UserInDB model"},{"location":"advanced/nosql-databases/#get-the-user","text":"Now create a function that will: Take a username. Generate a document ID from it. Get the document with that ID. Put the contents of the document in a UserInDB model. By creating a function that is only dedicated to getting your user from a username (or any other parameter) independent of your path operation function , you can more easily re-use it in multiple parts and also add unit tests for it: from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"Get the user"},{"location":"advanced/nosql-databases/#f-strings","text":"If you are not familiar with the f\"userprofile::{username}\" , it is a Python \" f-string \". Any variable that is put inside of {} in an f-string will be expanded / injected in the string.","title":"f-strings"},{"location":"advanced/nosql-databases/#dict-unpacking","text":"If you are not familiar with the UserInDB(**result.value) , it is using dict \"unpacking\" . It will take the dict at result.value , and take each of its keys and values and pass them as key-values to UserInDB as keyword arguments. So, if the dict contains: { \"username\" : \"johndoe\" , \"hashed_password\" : \"some_hash\" , } It will be passed to UserInDB as: UserInDB ( username = \"johndoe\" , hashed_password = \"some_hash\" )","title":"dict unpacking"},{"location":"advanced/nosql-databases/#create-your-fastapi-code","text":"","title":"Create your FastAPI code"},{"location":"advanced/nosql-databases/#create-the-fastapi-app","text":"from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"Create the FastAPI app"},{"location":"advanced/nosql-databases/#create-the-path-operation-function","text":"As our code is calling Couchbase and we are not using the experimental Python await support , we should declare our function with normal def instead of async def . Also, Couchbase recommends not using a single Bucket object in multiple \" thread s\", so, we can just get the bucket directly and pass it to our utility functions: from typing import Union from couchbase.options import LockMode from couchbase.bucket import Bucket from couchbase.cluster import Cluster , ClusterOptions from couchbase.auth import PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" , ClusterOptions ( PasswordAuthenticator ( \"username\" , \"password\" )) ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LockMode . WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"Create the path operation function"},{"location":"advanced/nosql-databases/#recap","text":"You can integrate any third party NoSQL database, just using their standard packages. The same applies to any other external tool, system or API.","title":"Recap"},{"location":"advanced/openapi-callbacks/","text":"OpenAPI Callbacks \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You could create an API with a path operation that could trigger a request to an external API created by someone else (probably the same developer that would be using your API). The process that happens when your API app calls the external API is named a \"callback\". Because the software that the external developer wrote sends a request to your API and then your API calls back , sending a request to an external API (that was probably created by the same developer). In this case, you could want to document how that external API should look like. What path operation it should have, what body it should expect, what response it should return, etc. An app with callbacks \u00b6 Let's see all this with an example. Imagine you develop an app that allows creating invoices. These invoices will have an id , title (optional), customer , and total . The user of your API (an external developer) will create an invoice in your API with a POST request. Then your API will (let's imagine): Send the invoice to some customer of the external developer. Collect the money. Send a notification back to the API user (the external developer). This will be done by sending a POST request (from your API ) to some external API provided by that external developer (this is the \"callback\"). The normal FastAPI app \u00b6 Let's first see how the normal API app would look like before adding the callback. It will have a path operation that will receive an Invoice body, and a query parameter callback_url that will contain the URL for the callback. This part is pretty normal, most of the code is probably already familiar to you: from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } Tip The callback_url query parameter uses a Pydantic URL type. The only new thing is the callbacks=messages_callback_router.routes as an argument to the path operation decorator . We'll see what that is next. Documenting the callback \u00b6 The actual callback code will depend heavily on your own API app. And it will probably vary a lot from one app to the next. It could be just one or two lines of code, like: callback_url = \"https://example.com/api/v1/invoices/events/\" requests . post ( callback_url , json = { \"description\" : \"Invoice paid\" , \"paid\" : True }) But possibly the most important part of the callback is making sure that your API user (the external developer) implements the external API correctly, according to the data that your API is going to send in the request body of the callback, etc. So, what we will do next is add the code to document how that external API should look like to receive the callback from your API . That documentation will show up in the Swagger UI at /docs in your API, and it will let external developers know how to build the external API . This example doesn't implement the callback itself (that could be just a line of code), only the documentation part. Tip The actual callback is just an HTTP request. When implementing the callback yourself, you could use something like HTTPX or Requests . Write the callback documentation code \u00b6 This code won't be executed in your app, we only need it to document how that external API should look like. But, you already know how to easily create automatic documentation for an API with FastAPI . So we are going to use that same knowledge to document how the external API should look like... by creating the path operation(s) that the external API should implement (the ones your API will call). Tip When writing the code to document a callback, it might be useful to imagine that you are that external developer . And that you are currently implementing the external API , not your API . Temporarily adopting this point of view (of the external developer ) can help you feel like it's more obvious where to put the parameters, the Pydantic model for the body, for the response, etc. for that external API . Create a callback APIRouter \u00b6 First create a new APIRouter that will contain one or more callbacks. from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } Create the callback path operation \u00b6 To create the callback path operation use the same APIRouter you created above. It should look just like a normal FastAPI path operation : It should probably have a declaration of the body it should receive, e.g. body: InvoiceEvent . And it could also have a declaration of the response it should return, e.g. response_model=InvoiceEventReceived . from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } There are 2 main differences from a normal path operation : It doesn't need to have any actual code, because your app will never call this code. It's only used to document the external API . So, the function could just have pass . The path can contain an OpenAPI 3 expression (see more below) where it can use variables with parameters and parts of the original request sent to your API . The callback path expression \u00b6 The callback path can have an OpenAPI 3 expression that can contain parts of the original request sent to your API . In this case, it's the str : \"{$callback_url}/invoices/{$request.body.id}\" So, if your API user (the external developer) sends a request to your API to: https://yourapi.com/invoices/?callback_url=https://www.external.org/events with a JSON body of: { \"id\" : \"2expen51ve\" , \"customer\" : \"Mr. Richie Rich\" , \"total\" : \"9999\" } Then your API will process the invoice, and at some point later, send a callback request to the callback_url (the external API ): https://www.external.org/events/invoices/2expen51ve with a JSON body containing something like: { \"description\" : \"Payment celebration\" , \"paid\" : true } and it would expect a response from that external API with a JSON body like: { \"ok\" : true } Tip Notice how the callback URL used contains the URL received as a query parameter in callback_url ( https://www.external.org/events ) and also the invoice id from inside of the JSON body ( 2expen51ve ). Add the callback router \u00b6 At this point you have the callback path operation(s) needed (the one(s) that the external developer should implement in the external API ) in the callback router you created above. Now use the parameter callbacks in your API's path operation decorator to pass the attribute .routes (that's actually just a list of routes/ path operations ) from that callback router: from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } Tip Notice that you are not passing the router itself ( invoices_callback_router ) to callback= , but the attribute .routes , as in invoices_callback_router.routes . Check the docs \u00b6 Now you can start your app with Uvicorn and go to http://127.0.0.1:8000/docs . You will see your docs including a \"Callback\" section for your path operation that shows how the external API should look like:","title":"OpenAPI Callbacks"},{"location":"advanced/openapi-callbacks/#openapi-callbacks","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You could create an API with a path operation that could trigger a request to an external API created by someone else (probably the same developer that would be using your API). The process that happens when your API app calls the external API is named a \"callback\". Because the software that the external developer wrote sends a request to your API and then your API calls back , sending a request to an external API (that was probably created by the same developer). In this case, you could want to document how that external API should look like. What path operation it should have, what body it should expect, what response it should return, etc.","title":"OpenAPI Callbacks"},{"location":"advanced/openapi-callbacks/#an-app-with-callbacks","text":"Let's see all this with an example. Imagine you develop an app that allows creating invoices. These invoices will have an id , title (optional), customer , and total . The user of your API (an external developer) will create an invoice in your API with a POST request. Then your API will (let's imagine): Send the invoice to some customer of the external developer. Collect the money. Send a notification back to the API user (the external developer). This will be done by sending a POST request (from your API ) to some external API provided by that external developer (this is the \"callback\").","title":"An app with callbacks"},{"location":"advanced/openapi-callbacks/#the-normal-fastapi-app","text":"Let's first see how the normal API app would look like before adding the callback. It will have a path operation that will receive an Invoice body, and a query parameter callback_url that will contain the URL for the callback. This part is pretty normal, most of the code is probably already familiar to you: from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } Tip The callback_url query parameter uses a Pydantic URL type. The only new thing is the callbacks=messages_callback_router.routes as an argument to the path operation decorator . We'll see what that is next.","title":"The normal FastAPI app"},{"location":"advanced/openapi-callbacks/#documenting-the-callback","text":"The actual callback code will depend heavily on your own API app. And it will probably vary a lot from one app to the next. It could be just one or two lines of code, like: callback_url = \"https://example.com/api/v1/invoices/events/\" requests . post ( callback_url , json = { \"description\" : \"Invoice paid\" , \"paid\" : True }) But possibly the most important part of the callback is making sure that your API user (the external developer) implements the external API correctly, according to the data that your API is going to send in the request body of the callback, etc. So, what we will do next is add the code to document how that external API should look like to receive the callback from your API . That documentation will show up in the Swagger UI at /docs in your API, and it will let external developers know how to build the external API . This example doesn't implement the callback itself (that could be just a line of code), only the documentation part. Tip The actual callback is just an HTTP request. When implementing the callback yourself, you could use something like HTTPX or Requests .","title":"Documenting the callback"},{"location":"advanced/openapi-callbacks/#write-the-callback-documentation-code","text":"This code won't be executed in your app, we only need it to document how that external API should look like. But, you already know how to easily create automatic documentation for an API with FastAPI . So we are going to use that same knowledge to document how the external API should look like... by creating the path operation(s) that the external API should implement (the ones your API will call). Tip When writing the code to document a callback, it might be useful to imagine that you are that external developer . And that you are currently implementing the external API , not your API . Temporarily adopting this point of view (of the external developer ) can help you feel like it's more obvious where to put the parameters, the Pydantic model for the body, for the response, etc. for that external API .","title":"Write the callback documentation code"},{"location":"advanced/openapi-callbacks/#create-a-callback-apirouter","text":"First create a new APIRouter that will contain one or more callbacks. from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" }","title":"Create a callback APIRouter"},{"location":"advanced/openapi-callbacks/#create-the-callback-path-operation","text":"To create the callback path operation use the same APIRouter you created above. It should look just like a normal FastAPI path operation : It should probably have a declaration of the body it should receive, e.g. body: InvoiceEvent . And it could also have a declaration of the response it should return, e.g. response_model=InvoiceEventReceived . from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } There are 2 main differences from a normal path operation : It doesn't need to have any actual code, because your app will never call this code. It's only used to document the external API . So, the function could just have pass . The path can contain an OpenAPI 3 expression (see more below) where it can use variables with parameters and parts of the original request sent to your API .","title":"Create the callback path operation"},{"location":"advanced/openapi-callbacks/#the-callback-path-expression","text":"The callback path can have an OpenAPI 3 expression that can contain parts of the original request sent to your API . In this case, it's the str : \"{$callback_url}/invoices/{$request.body.id}\" So, if your API user (the external developer) sends a request to your API to: https://yourapi.com/invoices/?callback_url=https://www.external.org/events with a JSON body of: { \"id\" : \"2expen51ve\" , \"customer\" : \"Mr. Richie Rich\" , \"total\" : \"9999\" } Then your API will process the invoice, and at some point later, send a callback request to the callback_url (the external API ): https://www.external.org/events/invoices/2expen51ve with a JSON body containing something like: { \"description\" : \"Payment celebration\" , \"paid\" : true } and it would expect a response from that external API with a JSON body like: { \"ok\" : true } Tip Notice how the callback URL used contains the URL received as a query parameter in callback_url ( https://www.external.org/events ) and also the invoice id from inside of the JSON body ( 2expen51ve ).","title":"The callback path expression"},{"location":"advanced/openapi-callbacks/#add-the-callback-router","text":"At this point you have the callback path operation(s) needed (the one(s) that the external developer should implement in the external API ) in the callback router you created above. Now use the parameter callbacks in your API's path operation decorator to pass the attribute .routes (that's actually just a list of routes/ path operations ) from that callback router: from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } Tip Notice that you are not passing the router itself ( invoices_callback_router ) to callback= , but the attribute .routes , as in invoices_callback_router.routes .","title":"Add the callback router"},{"location":"advanced/openapi-callbacks/#check-the-docs","text":"Now you can start your app with Uvicorn and go to http://127.0.0.1:8000/docs . You will see your docs including a \"Callback\" section for your path operation that shows how the external API should look like:","title":"Check the docs"},{"location":"advanced/path-operation-advanced-configuration/","text":"\u8def\u5f84\u64cd\u4f5c\u7684\u9ad8\u7ea7\u914d\u7f6e \u00b6 OpenAPI \u7684 operationId \u00b6 Warning \u5982\u679c\u4f60\u5e76\u975e OpenAPI \u7684\u300c\u4e13\u5bb6\u300d\uff0c\u4f60\u53ef\u80fd\u4e0d\u9700\u8981\u8fd9\u90e8\u5206\u5185\u5bb9\u3002 \u4f60\u53ef\u4ee5\u5728\u8def\u5f84\u64cd\u4f5c\u4e2d\u901a\u8fc7\u53c2\u6570 operation_id \u8bbe\u7f6e\u8981\u4f7f\u7528\u7684 OpenAPI operationId \u3002 \u52a1\u5fc5\u786e\u4fdd\u6bcf\u4e2a\u64cd\u4f5c\u8def\u5f84\u7684 operation_id \u90fd\u662f\u552f\u4e00\u7684\u3002 from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , operation_id = \"some_specific_id_you_define\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] \u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u51fd\u6570\u540d\u4f5c\u4e3a operationId \u00b6 \u5982\u679c\u4f60\u60f3\u7528\u4f60\u7684 API \u7684\u51fd\u6570\u540d\u4f5c\u4e3a operationId \u7684\u540d\u5b57\uff0c\u4f60\u53ef\u4ee5\u904d\u5386\u4e00\u904d API \u7684\u51fd\u6570\u540d\uff0c\u7136\u540e\u4f7f\u7528\u4ed6\u4eec\u7684 APIRoute.name \u91cd\u5199\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u7684 operation_id \u3002 \u4f60\u5e94\u8be5\u5728\u6dfb\u52a0\u4e86\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u4e4b\u540e\u6267\u884c\u6b64\u64cd\u4f5c\u3002 from fastapi import FastAPI from fastapi.routing import APIRoute app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] def use_route_names_as_operation_ids ( app : FastAPI ) -> None : \"\"\" Simplify operation IDs so that generated API clients have simpler function names. Should be called only after all routes have been added. \"\"\" for route in app . routes : if isinstance ( route , APIRoute ): route . operation_id = route . name # in this case, 'read_items' use_route_names_as_operation_ids ( app ) Tip \u5982\u679c\u4f60\u624b\u52a8\u8c03\u7528 app.openapi() \uff0c\u4f60\u5e94\u8be5\u5728\u6b64\u4e4b\u524d\u66f4\u65b0 operationId \u3002 Warning \u5982\u679c\u4f60\u8fd9\u6837\u505a\uff0c\u52a1\u5fc5\u786e\u4fdd\u4f60\u7684\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u540d\u5b57\u552f\u4e00\u3002 \u5373\u4f7f\u5b83\u4eec\u5728\u4e0d\u540c\u7684\u6a21\u5757\u4e2d\uff08Python \u6587\u4ef6\uff09\u3002 \u4ece OpenAPI \u4e2d\u6392\u9664 \u00b6 \u4f7f\u7528\u53c2\u6570 include_in_schema \u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a False \uff0c\u6765\u4ece\u751f\u6210\u7684 OpenAPI \u65b9\u6848\u4e2d\u6392\u9664\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \uff08\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u4ece\u81ea\u52a8\u5316\u6587\u6863\u7cfb\u7edf\u4e2d\u6392\u9664\u6389\u4e86\uff09\u3002 from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , include_in_schema = False ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] docstring \u7684\u9ad8\u7ea7\u63cf\u8ff0 \u00b6 \u4f60\u53ef\u4ee5\u9650\u5236 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684 docstring \u4e2d\u7528\u4e8e OpenAPI \u7684\u884c\u6570\u3002 \u6dfb\u52a0\u4e00\u4e2a \\f \uff08\u4e00\u4e2a\u300c\u6362\u9875\u300d\u7684\u8f6c\u4e49\u5b57\u7b26\uff09\u53ef\u4ee5\u4f7f FastAPI \u5728\u90a3\u4e00\u4f4d\u7f6e\u622a\u65ad\u7528\u4e8e OpenAPI \u7684\u8f93\u51fa\u3002 \u5269\u4f59\u90e8\u5206\u4e0d\u4f1a\u51fa\u73b0\u5728\u6587\u6863\u4e2d\uff0c\u4f46\u662f\u5176\u4ed6\u5de5\u5177\uff08\u6bd4\u5982 Sphinx\uff09\u53ef\u4ee5\u4f7f\u7528\u5269\u4f59\u90e8\u5206\u3002 from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \\f :param item: User input. \"\"\" return item","title":"\u8def\u5f84\u64cd\u4f5c\u7684\u9ad8\u7ea7\u914d\u7f6e"},{"location":"advanced/path-operation-advanced-configuration/#_1","text":"","title":"\u8def\u5f84\u64cd\u4f5c\u7684\u9ad8\u7ea7\u914d\u7f6e"},{"location":"advanced/path-operation-advanced-configuration/#openapi-operationid","text":"Warning \u5982\u679c\u4f60\u5e76\u975e OpenAPI \u7684\u300c\u4e13\u5bb6\u300d\uff0c\u4f60\u53ef\u80fd\u4e0d\u9700\u8981\u8fd9\u90e8\u5206\u5185\u5bb9\u3002 \u4f60\u53ef\u4ee5\u5728\u8def\u5f84\u64cd\u4f5c\u4e2d\u901a\u8fc7\u53c2\u6570 operation_id \u8bbe\u7f6e\u8981\u4f7f\u7528\u7684 OpenAPI operationId \u3002 \u52a1\u5fc5\u786e\u4fdd\u6bcf\u4e2a\u64cd\u4f5c\u8def\u5f84\u7684 operation_id \u90fd\u662f\u552f\u4e00\u7684\u3002 from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , operation_id = \"some_specific_id_you_define\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }]","title":"OpenAPI \u7684 operationId"},{"location":"advanced/path-operation-advanced-configuration/#operationid","text":"\u5982\u679c\u4f60\u60f3\u7528\u4f60\u7684 API \u7684\u51fd\u6570\u540d\u4f5c\u4e3a operationId \u7684\u540d\u5b57\uff0c\u4f60\u53ef\u4ee5\u904d\u5386\u4e00\u904d API \u7684\u51fd\u6570\u540d\uff0c\u7136\u540e\u4f7f\u7528\u4ed6\u4eec\u7684 APIRoute.name \u91cd\u5199\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u7684 operation_id \u3002 \u4f60\u5e94\u8be5\u5728\u6dfb\u52a0\u4e86\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u4e4b\u540e\u6267\u884c\u6b64\u64cd\u4f5c\u3002 from fastapi import FastAPI from fastapi.routing import APIRoute app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] def use_route_names_as_operation_ids ( app : FastAPI ) -> None : \"\"\" Simplify operation IDs so that generated API clients have simpler function names. Should be called only after all routes have been added. \"\"\" for route in app . routes : if isinstance ( route , APIRoute ): route . operation_id = route . name # in this case, 'read_items' use_route_names_as_operation_ids ( app ) Tip \u5982\u679c\u4f60\u624b\u52a8\u8c03\u7528 app.openapi() \uff0c\u4f60\u5e94\u8be5\u5728\u6b64\u4e4b\u524d\u66f4\u65b0 operationId \u3002 Warning \u5982\u679c\u4f60\u8fd9\u6837\u505a\uff0c\u52a1\u5fc5\u786e\u4fdd\u4f60\u7684\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u540d\u5b57\u552f\u4e00\u3002 \u5373\u4f7f\u5b83\u4eec\u5728\u4e0d\u540c\u7684\u6a21\u5757\u4e2d\uff08Python \u6587\u4ef6\uff09\u3002","title":"\u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u51fd\u6570\u540d\u4f5c\u4e3a operationId"},{"location":"advanced/path-operation-advanced-configuration/#openapi","text":"\u4f7f\u7528\u53c2\u6570 include_in_schema \u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a False \uff0c\u6765\u4ece\u751f\u6210\u7684 OpenAPI \u65b9\u6848\u4e2d\u6392\u9664\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \uff08\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u4ece\u81ea\u52a8\u5316\u6587\u6863\u7cfb\u7edf\u4e2d\u6392\u9664\u6389\u4e86\uff09\u3002 from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , include_in_schema = False ) async def read_items (): return [{ \"item_id\" : \"Foo\" }]","title":"\u4ece OpenAPI \u4e2d\u6392\u9664"},{"location":"advanced/path-operation-advanced-configuration/#docstring","text":"\u4f60\u53ef\u4ee5\u9650\u5236 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684 docstring \u4e2d\u7528\u4e8e OpenAPI \u7684\u884c\u6570\u3002 \u6dfb\u52a0\u4e00\u4e2a \\f \uff08\u4e00\u4e2a\u300c\u6362\u9875\u300d\u7684\u8f6c\u4e49\u5b57\u7b26\uff09\u53ef\u4ee5\u4f7f FastAPI \u5728\u90a3\u4e00\u4f4d\u7f6e\u622a\u65ad\u7528\u4e8e OpenAPI \u7684\u8f93\u51fa\u3002 \u5269\u4f59\u90e8\u5206\u4e0d\u4f1a\u51fa\u73b0\u5728\u6587\u6863\u4e2d\uff0c\u4f46\u662f\u5176\u4ed6\u5de5\u5177\uff08\u6bd4\u5982 Sphinx\uff09\u53ef\u4ee5\u4f7f\u7528\u5269\u4f59\u90e8\u5206\u3002 from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \\f :param item: User input. \"\"\" return item","title":"docstring \u7684\u9ad8\u7ea7\u63cf\u8ff0"},{"location":"advanced/response-change-status-code/","text":"Response - Change Status Code \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You probably read before that you can set a default Response Status Code . But in some cases you need to return a different status code than the default. Use case \u00b6 For example, imagine that you want to return an HTTP status code of \"OK\" 200 by default. But if the data didn't exist, you want to create it, and return an HTTP status code of \"CREATED\" 201 . But you still want to be able to filter and convert the data you return with a response_model . For those cases, you can use a Response parameter. Use a Response parameter \u00b6 You can declare a parameter of type Response in your path operation function (as you can do for cookies and headers). And then you can set the status_code in that temporal response object. from fastapi import FastAPI , Response , status app = FastAPI () tasks = { \"foo\" : \"Listen to the Bar Fighters\" } @app . put ( \"/get-or-create-task/ {task_id} \" , status_code = 200 ) def get_or_create_task ( task_id : str , response : Response ): if task_id not in tasks : tasks [ task_id ] = \"This didn't exist before\" response . status_code = status . HTTP_201_CREATED return tasks [ task_id ] And then you can return any object you need, as you normally would (a dict , a database model, etc). And if you declared a response_model , it will still be used to filter and convert the object you returned. FastAPI will use that temporal response to extract the status code (also cookies and headers), and will put them in the final response that contains the value you returned, filtered by any response_model . You can also declare the Response parameter in dependencies, and set the status code in them. But have in mind that the last one to be set will win.","title":"Response - Change Status Code"},{"location":"advanced/response-change-status-code/#response-change-status-code","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You probably read before that you can set a default Response Status Code . But in some cases you need to return a different status code than the default.","title":"Response - Change Status Code"},{"location":"advanced/response-change-status-code/#use-case","text":"For example, imagine that you want to return an HTTP status code of \"OK\" 200 by default. But if the data didn't exist, you want to create it, and return an HTTP status code of \"CREATED\" 201 . But you still want to be able to filter and convert the data you return with a response_model . For those cases, you can use a Response parameter.","title":"Use case"},{"location":"advanced/response-change-status-code/#use-a-response-parameter","text":"You can declare a parameter of type Response in your path operation function (as you can do for cookies and headers). And then you can set the status_code in that temporal response object. from fastapi import FastAPI , Response , status app = FastAPI () tasks = { \"foo\" : \"Listen to the Bar Fighters\" } @app . put ( \"/get-or-create-task/ {task_id} \" , status_code = 200 ) def get_or_create_task ( task_id : str , response : Response ): if task_id not in tasks : tasks [ task_id ] = \"This didn't exist before\" response . status_code = status . HTTP_201_CREATED return tasks [ task_id ] And then you can return any object you need, as you normally would (a dict , a database model, etc). And if you declared a response_model , it will still be used to filter and convert the object you returned. FastAPI will use that temporal response to extract the status code (also cookies and headers), and will put them in the final response that contains the value you returned, filtered by any response_model . You can also declare the Response parameter in dependencies, and set the status code in them. But have in mind that the last one to be set will win.","title":"Use a Response parameter"},{"location":"advanced/response-cookies/","text":"Response Cookies \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Use a Response parameter \u00b6 You can declare a parameter of type Response in your path operation function . And then you can set cookies in that temporal response object. from fastapi import FastAPI , Response app = FastAPI () @app . post ( \"/cookie-and-object/\" ) def create_cookie ( response : Response ): response . set_cookie ( key = \"fakesession\" , value = \"fake-cookie-session-value\" ) return { \"message\" : \"Come to the dark side, we have cookies\" } And then you can return any object you need, as you normally would (a dict , a database model, etc). And if you declared a response_model , it will still be used to filter and convert the object you returned. FastAPI will use that temporal response to extract the cookies (also headers and status code), and will put them in the final response that contains the value you returned, filtered by any response_model . You can also declare the Response parameter in dependencies, and set cookies (and headers) in them. Return a Response directly \u00b6 You can also create cookies when returning a Response directly in your code. To do that, you can create a response as described in Return a Response Directly . Then set Cookies in it, and then return it: from fastapi import FastAPI from fastapi.responses import JSONResponse app = FastAPI () @app . post ( \"/cookie/\" ) def create_cookie (): content = { \"message\" : \"Come to the dark side, we have cookies\" } response = JSONResponse ( content = content ) response . set_cookie ( key = \"fakesession\" , value = \"fake-cookie-session-value\" ) return response Tip Have in mind that if you return a response directly instead of using the Response parameter, FastAPI will return it directly. So, you will have to make sure your data is of the correct type. E.g. it is compatible with JSON, if you are returning a JSONResponse . And also that you are not sending any data that should have been filtered by a response_model . More info \u00b6 Technical Details You could also use from starlette.responses import Response or from starlette.responses import JSONResponse . FastAPI provides the same starlette.responses as fastapi.responses just as a convenience for you, the developer. But most of the available responses come directly from Starlette. And as the Response can be used frequently to set headers and cookies, FastAPI also provides it at fastapi.Response . To see all the available parameters and options, check the documentation in Starlette .","title":"Response Cookies"},{"location":"advanced/response-cookies/#response-cookies","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing .","title":"Response Cookies"},{"location":"advanced/response-cookies/#use-a-response-parameter","text":"You can declare a parameter of type Response in your path operation function . And then you can set cookies in that temporal response object. from fastapi import FastAPI , Response app = FastAPI () @app . post ( \"/cookie-and-object/\" ) def create_cookie ( response : Response ): response . set_cookie ( key = \"fakesession\" , value = \"fake-cookie-session-value\" ) return { \"message\" : \"Come to the dark side, we have cookies\" } And then you can return any object you need, as you normally would (a dict , a database model, etc). And if you declared a response_model , it will still be used to filter and convert the object you returned. FastAPI will use that temporal response to extract the cookies (also headers and status code), and will put them in the final response that contains the value you returned, filtered by any response_model . You can also declare the Response parameter in dependencies, and set cookies (and headers) in them.","title":"Use a Response parameter"},{"location":"advanced/response-cookies/#return-a-response-directly","text":"You can also create cookies when returning a Response directly in your code. To do that, you can create a response as described in Return a Response Directly . Then set Cookies in it, and then return it: from fastapi import FastAPI from fastapi.responses import JSONResponse app = FastAPI () @app . post ( \"/cookie/\" ) def create_cookie (): content = { \"message\" : \"Come to the dark side, we have cookies\" } response = JSONResponse ( content = content ) response . set_cookie ( key = \"fakesession\" , value = \"fake-cookie-session-value\" ) return response Tip Have in mind that if you return a response directly instead of using the Response parameter, FastAPI will return it directly. So, you will have to make sure your data is of the correct type. E.g. it is compatible with JSON, if you are returning a JSONResponse . And also that you are not sending any data that should have been filtered by a response_model .","title":"Return a Response directly"},{"location":"advanced/response-cookies/#more-info","text":"Technical Details You could also use from starlette.responses import Response or from starlette.responses import JSONResponse . FastAPI provides the same starlette.responses as fastapi.responses just as a convenience for you, the developer. But most of the available responses come directly from Starlette. And as the Response can be used frequently to set headers and cookies, FastAPI also provides it at fastapi.Response . To see all the available parameters and options, check the documentation in Starlette .","title":"More info"},{"location":"advanced/response-directly/","text":"\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94 \u00b6 \u5f53\u4f60\u521b\u5efa\u4e00\u4e2a FastAPI \u8def\u5f84\u64cd\u4f5c \u65f6\uff0c\u4f60\u53ef\u4ee5\u6b63\u5e38\u8fd4\u56de\u4ee5\u4e0b\u4efb\u610f\u4e00\u79cd\u6570\u636e\uff1a dict \uff0c list \uff0cPydantic \u6a21\u578b\uff0c\u6570\u636e\u5e93\u6a21\u578b\u7b49\u7b49\u3002 FastAPI \u9ed8\u8ba4\u4f1a\u4f7f\u7528 jsonable_encoder \u5c06\u8fd9\u4e9b\u7c7b\u578b\u7684\u8fd4\u56de\u503c\u8f6c\u6362\u6210 JSON \u683c\u5f0f\uff0c jsonable_encoder \u5728 JSON \u517c\u5bb9\u7f16\u7801\u5668 \u4e2d\u6709\u9610\u8ff0\u3002 \u7136\u540e\uff0c FastAPI \u4f1a\u5728\u540e\u53f0\u5c06\u8fd9\u4e9b\u517c\u5bb9 JSON \u7684\u6570\u636e\uff08\u6bd4\u5982\u5b57\u5178\uff09\u653e\u5230\u4e00\u4e2a JSONResponse \u4e2d\uff0c\u8be5 JSONResponse \u4f1a\u7528\u6765\u53d1\u9001\u54cd\u5e94\u7ed9\u5ba2\u6237\u7aef\u3002 \u4f46\u662f\u4f60\u53ef\u4ee5\u5728\u4f60\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a JSONResponse \u3002 \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94\u53ef\u80fd\u4f1a\u6709\u7528\u5904\uff0c\u6bd4\u5982\u8fd4\u56de\u81ea\u5b9a\u4e49\u7684\u54cd\u5e94\u5934\u548c cookies\u3002 \u8fd4\u56de Response \u00b6 \u4e8b\u5b9e\u4e0a\uff0c\u4f60\u53ef\u4ee5\u8fd4\u56de\u4efb\u610f Response \u6216\u8005\u4efb\u610f Response \u7684\u5b50\u7c7b\u3002 \u5c0f\u8d34\u58eb JSONResponse \u672c\u8eab\u662f\u4e00\u4e2a Response \u7684\u5b50\u7c7b\u3002 \u5f53\u4f60\u8fd4\u56de\u4e00\u4e2a Response \u65f6\uff0c FastAPI \u4f1a\u76f4\u63a5\u4f20\u9012\u5b83\u3002 FastAPI \u4e0d\u4f1a\u7528 Pydantic \u6a21\u578b\u505a\u4efb\u4f55\u6570\u636e\u8f6c\u6362\uff0c\u4e0d\u4f1a\u5c06\u54cd\u5e94\u5185\u5bb9\u8f6c\u6362\u6210\u4efb\u4f55\u7c7b\u578b\uff0c\u7b49\u7b49\u3002 \u8fd9\u79cd\u7279\u6027\u7ed9\u4f60\u6781\u5927\u7684\u53ef\u6269\u5c55\u6027\u3002\u4f60\u53ef\u4ee5\u8fd4\u56de\u4efb\u4f55\u6570\u636e\u7c7b\u578b\uff0c\u91cd\u5199\u4efb\u4f55\u6570\u636e\u58f0\u660e\u6216\u8005\u6821\u9a8c\uff0c\u7b49\u7b49\u3002 \u5728 Response \u4e2d\u4f7f\u7528 jsonable_encoder \u00b6 \u7531\u4e8e FastAPI \u5e76\u672a\u5bf9\u4f60\u8fd4\u56de\u7684 Response \u505a\u4efb\u4f55\u6539\u53d8\uff0c\u4f60\u5fc5\u987b\u786e\u4fdd\u4f60\u5df2\u7ecf\u51c6\u5907\u597d\u54cd\u5e94\u5185\u5bb9\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4e0d\u9996\u5148\u5c06 Pydantic \u6a21\u578b\u8f6c\u6362\u4e3a dict \uff0c\u5e76\u5c06\u6240\u6709\u6570\u636e\u7c7b\u578b\uff08\u5982 datetime \u3001 UUID \u7b49\uff09\u8f6c\u6362\u4e3a\u517c\u5bb9 JSON \u7684\u7c7b\u578b\uff0c\u5219\u4e0d\u80fd\u5c06\u5176\u653e\u5165JSONResponse\u4e2d\u3002 \u5bf9\u4e8e\u8fd9\u4e9b\u60c5\u51b5\uff0c\u5728\u5c06\u6570\u636e\u4f20\u9012\u7ed9\u54cd\u5e94\u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 jsonable_encoder \u6765\u8f6c\u6362\u4f60\u7684\u6570\u636e\u3002 from datetime import datetime from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): title : str timestamp : datetime description : Union [ str , None ] = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) return JSONResponse ( content = json_compatible_item_data ) \u6280\u672f\u7ec6\u8282 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import JSONResponse \u3002 \u51fa\u4e8e\u65b9\u4fbf\uff0c FastAPI \u4f1a\u63d0\u4f9b\u4e0e starlette.responses \u76f8\u540c\u7684 fastapi.responses \u7ed9\u5f00\u53d1\u8005\u3002\u4f46\u662f\u5927\u591a\u6570\u53ef\u7528\u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u6765\u81ea Starlette\u3002 \u8fd4\u56de\u81ea\u5b9a\u4e49 Response \u00b6 \u4e0a\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u9700\u8981\u7684\u6240\u6709\u90e8\u5206\uff0c\u4f46\u8fd8\u4e0d\u591f\u5b9e\u7528\uff0c\u56e0\u4e3a\u4f60\u672c\u53ef\u4ee5\u53ea\u662f\u76f4\u63a5\u8fd4\u56de item \uff0c\u800c FastAPI \u9ed8\u8ba4\u5e2e\u4f60\u628a\u8fd9\u4e2a item \u653e\u5230 JSONResponse \u4e2d\uff0c\u53c8\u9ed8\u8ba4\u5c06\u5176\u8f6c\u6362\u6210\u4e86 dict \u7b49\u7b49\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u4f60\u5982\u4f55\u624d\u80fd\u8fd4\u56de\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u54cd\u5e94\u3002 \u5047\u8bbe\u4f60\u60f3\u8981\u8fd4\u56de\u4e00\u4e2a XML \u54cd\u5e94\u3002 \u4f60\u53ef\u4ee5\u628a\u4f60\u7684 XML \u5185\u5bb9\u653e\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u653e\u5230\u4e00\u4e2a Response \u4e2d\uff0c\u7136\u540e\u8fd4\u56de\u3002 from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/legacy/\" ) def get_legacy_data (): data = \"\"\"<?xml version=\"1.0\"?> <shampoo> <Header> Apply shampoo here. </Header> <Body> You'll have to use soap here. </Body> </shampoo> \"\"\" return Response ( content = data , media_type = \"application/xml\" ) \u8bf4\u660e \u00b6 \u5f53\u4f60\u76f4\u63a5\u8fd4\u56de Response \u65f6\uff0c\u5b83\u7684\u6570\u636e\u65e2\u6ca1\u6709\u6821\u9a8c\uff0c\u53c8\u4e0d\u4f1a\u8fdb\u884c\u8f6c\u6362\uff08\u5e8f\u5217\u5316\uff09\uff0c\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u751f\u6210\u6587\u6863\u3002 \u4f46\u662f\u4f60\u4ecd\u53ef\u4ee5\u53c2\u8003 OpenApI \u4e2d\u7684\u989d\u5916\u54cd\u5e94 \u7ed9\u54cd\u5e94\u7f16\u5199\u6587\u6863\u3002 \u5728\u540e\u7eed\u7684\u7ae0\u8282\u4e2d\u4f60\u53ef\u4ee5\u4e86\u89e3\u5230\u5982\u4f55\u4f7f\u7528/\u58f0\u660e\u8fd9\u4e9b\u81ea\u5b9a\u4e49\u7684 Response \u7684\u540c\u65f6\u8fd8\u4fdd\u7559\u81ea\u52a8\u5316\u7684\u6570\u636e\u8f6c\u6362\u548c\u6587\u6863\u7b49\u3002","title":"\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94"},{"location":"advanced/response-directly/#_1","text":"\u5f53\u4f60\u521b\u5efa\u4e00\u4e2a FastAPI \u8def\u5f84\u64cd\u4f5c \u65f6\uff0c\u4f60\u53ef\u4ee5\u6b63\u5e38\u8fd4\u56de\u4ee5\u4e0b\u4efb\u610f\u4e00\u79cd\u6570\u636e\uff1a dict \uff0c list \uff0cPydantic \u6a21\u578b\uff0c\u6570\u636e\u5e93\u6a21\u578b\u7b49\u7b49\u3002 FastAPI \u9ed8\u8ba4\u4f1a\u4f7f\u7528 jsonable_encoder \u5c06\u8fd9\u4e9b\u7c7b\u578b\u7684\u8fd4\u56de\u503c\u8f6c\u6362\u6210 JSON \u683c\u5f0f\uff0c jsonable_encoder \u5728 JSON \u517c\u5bb9\u7f16\u7801\u5668 \u4e2d\u6709\u9610\u8ff0\u3002 \u7136\u540e\uff0c FastAPI \u4f1a\u5728\u540e\u53f0\u5c06\u8fd9\u4e9b\u517c\u5bb9 JSON \u7684\u6570\u636e\uff08\u6bd4\u5982\u5b57\u5178\uff09\u653e\u5230\u4e00\u4e2a JSONResponse \u4e2d\uff0c\u8be5 JSONResponse \u4f1a\u7528\u6765\u53d1\u9001\u54cd\u5e94\u7ed9\u5ba2\u6237\u7aef\u3002 \u4f46\u662f\u4f60\u53ef\u4ee5\u5728\u4f60\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a JSONResponse \u3002 \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94\u53ef\u80fd\u4f1a\u6709\u7528\u5904\uff0c\u6bd4\u5982\u8fd4\u56de\u81ea\u5b9a\u4e49\u7684\u54cd\u5e94\u5934\u548c cookies\u3002","title":"\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94"},{"location":"advanced/response-directly/#response","text":"\u4e8b\u5b9e\u4e0a\uff0c\u4f60\u53ef\u4ee5\u8fd4\u56de\u4efb\u610f Response \u6216\u8005\u4efb\u610f Response \u7684\u5b50\u7c7b\u3002 \u5c0f\u8d34\u58eb JSONResponse \u672c\u8eab\u662f\u4e00\u4e2a Response \u7684\u5b50\u7c7b\u3002 \u5f53\u4f60\u8fd4\u56de\u4e00\u4e2a Response \u65f6\uff0c FastAPI \u4f1a\u76f4\u63a5\u4f20\u9012\u5b83\u3002 FastAPI \u4e0d\u4f1a\u7528 Pydantic \u6a21\u578b\u505a\u4efb\u4f55\u6570\u636e\u8f6c\u6362\uff0c\u4e0d\u4f1a\u5c06\u54cd\u5e94\u5185\u5bb9\u8f6c\u6362\u6210\u4efb\u4f55\u7c7b\u578b\uff0c\u7b49\u7b49\u3002 \u8fd9\u79cd\u7279\u6027\u7ed9\u4f60\u6781\u5927\u7684\u53ef\u6269\u5c55\u6027\u3002\u4f60\u53ef\u4ee5\u8fd4\u56de\u4efb\u4f55\u6570\u636e\u7c7b\u578b\uff0c\u91cd\u5199\u4efb\u4f55\u6570\u636e\u58f0\u660e\u6216\u8005\u6821\u9a8c\uff0c\u7b49\u7b49\u3002","title":"\u8fd4\u56de Response"},{"location":"advanced/response-directly/#response-jsonable_encoder","text":"\u7531\u4e8e FastAPI \u5e76\u672a\u5bf9\u4f60\u8fd4\u56de\u7684 Response \u505a\u4efb\u4f55\u6539\u53d8\uff0c\u4f60\u5fc5\u987b\u786e\u4fdd\u4f60\u5df2\u7ecf\u51c6\u5907\u597d\u54cd\u5e94\u5185\u5bb9\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4e0d\u9996\u5148\u5c06 Pydantic \u6a21\u578b\u8f6c\u6362\u4e3a dict \uff0c\u5e76\u5c06\u6240\u6709\u6570\u636e\u7c7b\u578b\uff08\u5982 datetime \u3001 UUID \u7b49\uff09\u8f6c\u6362\u4e3a\u517c\u5bb9 JSON \u7684\u7c7b\u578b\uff0c\u5219\u4e0d\u80fd\u5c06\u5176\u653e\u5165JSONResponse\u4e2d\u3002 \u5bf9\u4e8e\u8fd9\u4e9b\u60c5\u51b5\uff0c\u5728\u5c06\u6570\u636e\u4f20\u9012\u7ed9\u54cd\u5e94\u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 jsonable_encoder \u6765\u8f6c\u6362\u4f60\u7684\u6570\u636e\u3002 from datetime import datetime from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): title : str timestamp : datetime description : Union [ str , None ] = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) return JSONResponse ( content = json_compatible_item_data ) \u6280\u672f\u7ec6\u8282 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import JSONResponse \u3002 \u51fa\u4e8e\u65b9\u4fbf\uff0c FastAPI \u4f1a\u63d0\u4f9b\u4e0e starlette.responses \u76f8\u540c\u7684 fastapi.responses \u7ed9\u5f00\u53d1\u8005\u3002\u4f46\u662f\u5927\u591a\u6570\u53ef\u7528\u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u6765\u81ea Starlette\u3002","title":"\u5728 Response \u4e2d\u4f7f\u7528 jsonable_encoder"},{"location":"advanced/response-directly/#response_1","text":"\u4e0a\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u9700\u8981\u7684\u6240\u6709\u90e8\u5206\uff0c\u4f46\u8fd8\u4e0d\u591f\u5b9e\u7528\uff0c\u56e0\u4e3a\u4f60\u672c\u53ef\u4ee5\u53ea\u662f\u76f4\u63a5\u8fd4\u56de item \uff0c\u800c FastAPI \u9ed8\u8ba4\u5e2e\u4f60\u628a\u8fd9\u4e2a item \u653e\u5230 JSONResponse \u4e2d\uff0c\u53c8\u9ed8\u8ba4\u5c06\u5176\u8f6c\u6362\u6210\u4e86 dict \u7b49\u7b49\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u4f60\u5982\u4f55\u624d\u80fd\u8fd4\u56de\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u54cd\u5e94\u3002 \u5047\u8bbe\u4f60\u60f3\u8981\u8fd4\u56de\u4e00\u4e2a XML \u54cd\u5e94\u3002 \u4f60\u53ef\u4ee5\u628a\u4f60\u7684 XML \u5185\u5bb9\u653e\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u653e\u5230\u4e00\u4e2a Response \u4e2d\uff0c\u7136\u540e\u8fd4\u56de\u3002 from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/legacy/\" ) def get_legacy_data (): data = \"\"\"<?xml version=\"1.0\"?> <shampoo> <Header> Apply shampoo here. </Header> <Body> You'll have to use soap here. </Body> </shampoo> \"\"\" return Response ( content = data , media_type = \"application/xml\" )","title":"\u8fd4\u56de\u81ea\u5b9a\u4e49 Response"},{"location":"advanced/response-directly/#_2","text":"\u5f53\u4f60\u76f4\u63a5\u8fd4\u56de Response \u65f6\uff0c\u5b83\u7684\u6570\u636e\u65e2\u6ca1\u6709\u6821\u9a8c\uff0c\u53c8\u4e0d\u4f1a\u8fdb\u884c\u8f6c\u6362\uff08\u5e8f\u5217\u5316\uff09\uff0c\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u751f\u6210\u6587\u6863\u3002 \u4f46\u662f\u4f60\u4ecd\u53ef\u4ee5\u53c2\u8003 OpenApI \u4e2d\u7684\u989d\u5916\u54cd\u5e94 \u7ed9\u54cd\u5e94\u7f16\u5199\u6587\u6863\u3002 \u5728\u540e\u7eed\u7684\u7ae0\u8282\u4e2d\u4f60\u53ef\u4ee5\u4e86\u89e3\u5230\u5982\u4f55\u4f7f\u7528/\u58f0\u660e\u8fd9\u4e9b\u81ea\u5b9a\u4e49\u7684 Response \u7684\u540c\u65f6\u8fd8\u4fdd\u7559\u81ea\u52a8\u5316\u7684\u6570\u636e\u8f6c\u6362\u548c\u6587\u6863\u7b49\u3002","title":"\u8bf4\u660e"},{"location":"advanced/response-headers/","text":"Response Headers \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Use a Response parameter \u00b6 You can declare a parameter of type Response in your path operation function (as you can do for cookies). And then you can set headers in that temporal response object. from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/headers-and-object/\" ) def get_headers ( response : Response ): response . headers [ \"X-Cat-Dog\" ] = \"alone in the world\" return { \"message\" : \"Hello World\" } And then you can return any object you need, as you normally would (a dict , a database model, etc). And if you declared a response_model , it will still be used to filter and convert the object you returned. FastAPI will use that temporal response to extract the headers (also cookies and status code), and will put them in the final response that contains the value you returned, filtered by any response_model . You can also declare the Response parameter in dependencies, and set headers (and cookies) in them. Return a Response directly \u00b6 You can also add headers when you return a Response directly. Create a response as described in Return a Response Directly and pass the headers as an additional parameter: from fastapi import FastAPI from fastapi.responses import JSONResponse app = FastAPI () @app . get ( \"/headers/\" ) def get_headers (): content = { \"message\" : \"Hello World\" } headers = { \"X-Cat-Dog\" : \"alone in the world\" , \"Content-Language\" : \"en-US\" } return JSONResponse ( content = content , headers = headers ) Technical Details You could also use from starlette.responses import Response or from starlette.responses import JSONResponse . FastAPI provides the same starlette.responses as fastapi.responses just as a convenience for you, the developer. But most of the available responses come directly from Starlette. And as the Response can be used frequently to set headers and cookies, FastAPI also provides it at fastapi.Response . Custom Headers \u00b6 Have in mind that custom proprietary headers can be added using the 'X-' prefix . But if you have custom headers that you want a client in a browser to be able to see, you need to add them to your CORS configurations (read more in CORS (Cross-Origin Resource Sharing) ), using the parameter expose_headers documented in Starlette's CORS docs .","title":"Response Headers"},{"location":"advanced/response-headers/#response-headers","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing .","title":"Response Headers"},{"location":"advanced/response-headers/#use-a-response-parameter","text":"You can declare a parameter of type Response in your path operation function (as you can do for cookies). And then you can set headers in that temporal response object. from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/headers-and-object/\" ) def get_headers ( response : Response ): response . headers [ \"X-Cat-Dog\" ] = \"alone in the world\" return { \"message\" : \"Hello World\" } And then you can return any object you need, as you normally would (a dict , a database model, etc). And if you declared a response_model , it will still be used to filter and convert the object you returned. FastAPI will use that temporal response to extract the headers (also cookies and status code), and will put them in the final response that contains the value you returned, filtered by any response_model . You can also declare the Response parameter in dependencies, and set headers (and cookies) in them.","title":"Use a Response parameter"},{"location":"advanced/response-headers/#return-a-response-directly","text":"You can also add headers when you return a Response directly. Create a response as described in Return a Response Directly and pass the headers as an additional parameter: from fastapi import FastAPI from fastapi.responses import JSONResponse app = FastAPI () @app . get ( \"/headers/\" ) def get_headers (): content = { \"message\" : \"Hello World\" } headers = { \"X-Cat-Dog\" : \"alone in the world\" , \"Content-Language\" : \"en-US\" } return JSONResponse ( content = content , headers = headers ) Technical Details You could also use from starlette.responses import Response or from starlette.responses import JSONResponse . FastAPI provides the same starlette.responses as fastapi.responses just as a convenience for you, the developer. But most of the available responses come directly from Starlette. And as the Response can be used frequently to set headers and cookies, FastAPI also provides it at fastapi.Response .","title":"Return a Response directly"},{"location":"advanced/response-headers/#custom-headers","text":"Have in mind that custom proprietary headers can be added using the 'X-' prefix . But if you have custom headers that you want a client in a browser to be able to see, you need to add them to your CORS configurations (read more in CORS (Cross-Origin Resource Sharing) ), using the parameter expose_headers documented in Starlette's CORS docs .","title":"Custom Headers"},{"location":"advanced/settings/","text":"Settings and Environment Variables \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In many cases your application could need some external settings or configurations, for example secret keys, database credentials, credentials for email services, etc. Most of these settings are variable (can change), like database URLs. And many could be sensitive, like secrets. For this reason it's common to provide them in environment variables that are read by the application. Environment Variables \u00b6 Tip If you already know what \"environment variables\" are and how to use them, feel free to skip to the next section below. An environment variable (also known as \"env var\") is a variable that lives outside of the Python code, in the operating system, and could be read by your Python code (or by other programs as well). You can create and use environment variables in the shell, without needing Python: Linux, macOS, Windows Bash Windows PowerShell // You could create an env var MY_NAME with $ export MY_NAME = \"Wade Wilson\" // Then you could use it with other programs, like $ echo \"Hello $MY_NAME \" Hello Wade Wilson // Create an env var MY_NAME $ $Env :MY_NAME = \"Wade Wilson\" // Use it with other programs, like $ echo \"Hello $Env :MY_NAME\" Hello Wade Wilson Read env vars in Python \u00b6 You could also create environment variables outside of Python, in the terminal (or with any other method), and then read them in Python. For example you could have a file main.py with: import os name = os . getenv ( \"MY_NAME\" , \"World\" ) print ( f \"Hello { name } from Python\" ) Tip The second argument to os.getenv() is the default value to return. If not provided, it's None by default, here we provide \"World\" as the default value to use. Then you could call that Python program: // Here we don't set the env var yet $ python main.py // As we didn't set the env var, we get the default value Hello World from Python // But if we create an environment variable first $ export MY_NAME = \"Wade Wilson\" // And then call the program again $ python main.py // Now it can read the environment variable Hello Wade Wilson from Python As environment variables can be set outside of the code, but can be read by the code, and don't have to be stored (committed to git ) with the rest of the files, it's common to use them for configurations or settings. You can also create an environment variable only for a specific program invocation, that is only available to that program, and only for its duration. To do that, create it right before the program itself, on the same line: // Create an env var MY_NAME in line for this program call $ MY_NAME = \"Wade Wilson\" python main.py // Now it can read the environment variable Hello Wade Wilson from Python // The env var no longer exists afterwards $ python main.py Hello World from Python Tip You can read more about it at The Twelve-Factor App: Config . Types and validation \u00b6 These environment variables can only handle text strings, as they are external to Python and have to be compatible with other programs and the rest of the system (and even with different operating systems, as Linux, Windows, macOS). That means that any value read in Python from an environment variable will be a str , and any conversion to a different type or validation has to be done in code. Pydantic Settings \u00b6 Fortunately, Pydantic provides a great utility to handle these settings coming from environment variables with Pydantic: Settings management . Create the Settings object \u00b6 Import BaseSettings from Pydantic and create a sub-class, very much like with a Pydantic model. The same way as with Pydantic models, you declare class attributes with type annotations, and possibly default values. You can use all the same validation features and tools you use for Pydantic models, like different data types and additional validations with Field() . from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Tip If you want something quick to copy and paste, don't use this example, use the last one below. Then, when you create an instance of that Settings class (in this case, in the settings object), Pydantic will read the environment variables in a case-insensitive way, so, an upper-case variable APP_NAME will still be read for the attribute app_name . Next it will convert and validate the data. So, when you use that settings object, you will have data of the types you declared (e.g. items_per_user will be an int ). Use the settings \u00b6 Then you can use the new settings object in your application: from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Run the server \u00b6 Next, you would run the server passing the configurations as environment variables, for example you could set an ADMIN_EMAIL and APP_NAME with: $ ADMIN_EMAIL = \"deadpool@example.com\" APP_NAME = \"ChimichangApp\" uvicorn main:app <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Tip To set multiple env vars for a single command just separate them with a space, and put them all before the command. And then the admin_email setting would be set to \"deadpool@example.com\" . The app_name would be \"ChimichangApp\" . And the items_per_user would keep its default value of 50 . Settings in another module \u00b6 You could put those settings in another module file as you saw in Bigger Applications - Multiple Files . For example, you could have a file config.py with: from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () And then use it in a file main.py : from fastapi import FastAPI from .config import settings app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Tip You would also need a file __init__.py as you saw on Bigger Applications - Multiple Files . Settings in a dependency \u00b6 In some occasions it might be useful to provide the settings from a dependency, instead of having a global object with settings that is used everywhere. This could be especially useful during testing, as it's very easy to override a dependency with your own custom settings. The config file \u00b6 Coming from the previous example, your config.py file could look like: from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 Notice that now we don't create a default instance settings = Settings() . The main app file \u00b6 Now we create a dependency that returns a new config.Settings() . from functools import lru_cache from fastapi import Depends , FastAPI from .config import Settings app = FastAPI () @lru_cache () def get_settings (): return Settings () @app . get ( \"/info\" ) async def info ( settings : Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Tip We'll discuss the @lru_cache() in a bit. For now you can assume get_settings() is a normal function. And then we can require it from the path operation function as a dependency and use it anywhere we need it. from functools import lru_cache from fastapi import Depends , FastAPI from .config import Settings app = FastAPI () @lru_cache () def get_settings (): return Settings () @app . get ( \"/info\" ) async def info ( settings : Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Settings and testing \u00b6 Then it would be very easy to provide a different settings object during testing by creating a dependency override for get_settings : from fastapi.testclient import TestClient from .config import Settings from .main import app , get_settings client = TestClient ( app ) def get_settings_override (): return Settings ( admin_email = \"testing_admin@example.com\" ) app . dependency_overrides [ get_settings ] = get_settings_override def test_app (): response = client . get ( \"/info\" ) data = response . json () assert data == { \"app_name\" : \"Awesome API\" , \"admin_email\" : \"testing_admin@example.com\" , \"items_per_user\" : 50 , } In the dependency override we set a new value for the admin_email when creating the new Settings object, and then we return that new object. Then we can test that it is used. Reading a .env file \u00b6 If you have many settings that possibly change a lot, maybe in different environments, it might be useful to put them on a file and then read them from it as if they were environment variables. This practice is common enough that it has a name, these environment variables are commonly placed in a file .env , and the file is called a \"dotenv\". Tip A file starting with a dot ( . ) is a hidden file in Unix-like systems, like Linux and macOS. But a dotenv file doesn't really have to have that exact filename. Pydantic has support for reading from these types of files using an external library. You can read more at Pydantic Settings: Dotenv (.env) support . Tip For this to work, you need to pip install python-dotenv . The .env file \u00b6 You could have a .env file with: ADMIN_EMAIL = \"deadpool@example.com\" APP_NAME = \"ChimichangApp\" Read settings from .env \u00b6 And then update your config.py with: from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 class Config : env_file = \".env\" Here we create a class Config inside of your Pydantic Settings class, and set the env_file to the filename with the dotenv file we want to use. Tip The Config class is used just for Pydantic configuration. You can read more at Pydantic Model Config Creating the Settings only once with lru_cache \u00b6 Reading a file from disk is normally a costly (slow) operation, so you probably want to do it only once and then re-use the same settings object, instead of reading it for each request. But every time we do: Settings () a new Settings object would be created, and at creation it would read the .env file again. If the dependency function was just like: def get_settings (): return Settings () we would create that object for each request, and we would be reading the .env file for each request. \u26a0\ufe0f But as we are using the @lru_cache() decorator on top, the Settings object will be created only once, the first time it's called. \u2714\ufe0f from functools import lru_cache from fastapi import Depends , FastAPI from . import config app = FastAPI () @lru_cache () def get_settings (): return config . Settings () @app . get ( \"/info\" ) async def info ( settings : config . Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Then for any subsequent calls of get_settings() in the dependencies for the next requests, instead of executing the internal code of get_settings() and creating a new Settings object, it will return the same object that was returned on the first call, again and again. lru_cache Technical Details \u00b6 @lru_cache() modifies the function it decorates to return the same value that was returned the first time, instead of computing it again, executing the code of the function every time. So, the function below it will be executed once for each combination of arguments. And then the values returned by each of those combinations of arguments will be used again and again whenever the function is called with exactly the same combination of arguments. For example, if you have a function: @lru_cache () def say_hi ( name : str , salutation : str = \"Ms.\" ): return f \"Hello { salutation } { name } \" your program could execute like this: sequenceDiagram participant code as Code participant function as say_hi() participant execute as Execute function rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Camila\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Camila\") function ->> code: return stored result end rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Rick\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Rick\", salutation=\"Mr.\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Rick\") function ->> code: return stored result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Camila\") function ->> code: return stored result end In the case of our dependency get_settings() , the function doesn't even take any arguments, so it always returns the same value. That way, it behaves almost as if it was just a global variable. But as it uses a dependency function, then we can override it easily for testing. @lru_cache() is part of functools which is part of Python's standard library, you can read more about it in the Python docs for @lru_cache() . Recap \u00b6 You can use Pydantic Settings to handle the settings or configurations for your application, with all the power of Pydantic models. By using a dependency you can simplify testing. You can use .env files with it. Using @lru_cache() lets you avoid reading the dotenv file again and again for each request, while allowing you to override it during testing.","title":"Settings and Environment Variables"},{"location":"advanced/settings/#settings-and-environment-variables","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In many cases your application could need some external settings or configurations, for example secret keys, database credentials, credentials for email services, etc. Most of these settings are variable (can change), like database URLs. And many could be sensitive, like secrets. For this reason it's common to provide them in environment variables that are read by the application.","title":"Settings and Environment Variables"},{"location":"advanced/settings/#environment-variables","text":"Tip If you already know what \"environment variables\" are and how to use them, feel free to skip to the next section below. An environment variable (also known as \"env var\") is a variable that lives outside of the Python code, in the operating system, and could be read by your Python code (or by other programs as well). You can create and use environment variables in the shell, without needing Python: Linux, macOS, Windows Bash Windows PowerShell // You could create an env var MY_NAME with $ export MY_NAME = \"Wade Wilson\" // Then you could use it with other programs, like $ echo \"Hello $MY_NAME \" Hello Wade Wilson // Create an env var MY_NAME $ $Env :MY_NAME = \"Wade Wilson\" // Use it with other programs, like $ echo \"Hello $Env :MY_NAME\" Hello Wade Wilson","title":"Environment Variables"},{"location":"advanced/settings/#read-env-vars-in-python","text":"You could also create environment variables outside of Python, in the terminal (or with any other method), and then read them in Python. For example you could have a file main.py with: import os name = os . getenv ( \"MY_NAME\" , \"World\" ) print ( f \"Hello { name } from Python\" ) Tip The second argument to os.getenv() is the default value to return. If not provided, it's None by default, here we provide \"World\" as the default value to use. Then you could call that Python program: // Here we don't set the env var yet $ python main.py // As we didn't set the env var, we get the default value Hello World from Python // But if we create an environment variable first $ export MY_NAME = \"Wade Wilson\" // And then call the program again $ python main.py // Now it can read the environment variable Hello Wade Wilson from Python As environment variables can be set outside of the code, but can be read by the code, and don't have to be stored (committed to git ) with the rest of the files, it's common to use them for configurations or settings. You can also create an environment variable only for a specific program invocation, that is only available to that program, and only for its duration. To do that, create it right before the program itself, on the same line: // Create an env var MY_NAME in line for this program call $ MY_NAME = \"Wade Wilson\" python main.py // Now it can read the environment variable Hello Wade Wilson from Python // The env var no longer exists afterwards $ python main.py Hello World from Python Tip You can read more about it at The Twelve-Factor App: Config .","title":"Read env vars in Python"},{"location":"advanced/settings/#types-and-validation","text":"These environment variables can only handle text strings, as they are external to Python and have to be compatible with other programs and the rest of the system (and even with different operating systems, as Linux, Windows, macOS). That means that any value read in Python from an environment variable will be a str , and any conversion to a different type or validation has to be done in code.","title":"Types and validation"},{"location":"advanced/settings/#pydantic-settings","text":"Fortunately, Pydantic provides a great utility to handle these settings coming from environment variables with Pydantic: Settings management .","title":"Pydantic Settings"},{"location":"advanced/settings/#create-the-settings-object","text":"Import BaseSettings from Pydantic and create a sub-class, very much like with a Pydantic model. The same way as with Pydantic models, you declare class attributes with type annotations, and possibly default values. You can use all the same validation features and tools you use for Pydantic models, like different data types and additional validations with Field() . from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Tip If you want something quick to copy and paste, don't use this example, use the last one below. Then, when you create an instance of that Settings class (in this case, in the settings object), Pydantic will read the environment variables in a case-insensitive way, so, an upper-case variable APP_NAME will still be read for the attribute app_name . Next it will convert and validate the data. So, when you use that settings object, you will have data of the types you declared (e.g. items_per_user will be an int ).","title":"Create the Settings object"},{"location":"advanced/settings/#use-the-settings","text":"Then you can use the new settings object in your application: from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , }","title":"Use the settings"},{"location":"advanced/settings/#run-the-server","text":"Next, you would run the server passing the configurations as environment variables, for example you could set an ADMIN_EMAIL and APP_NAME with: $ ADMIN_EMAIL = \"deadpool@example.com\" APP_NAME = \"ChimichangApp\" uvicorn main:app <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Tip To set multiple env vars for a single command just separate them with a space, and put them all before the command. And then the admin_email setting would be set to \"deadpool@example.com\" . The app_name would be \"ChimichangApp\" . And the items_per_user would keep its default value of 50 .","title":"Run the server"},{"location":"advanced/settings/#settings-in-another-module","text":"You could put those settings in another module file as you saw in Bigger Applications - Multiple Files . For example, you could have a file config.py with: from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () And then use it in a file main.py : from fastapi import FastAPI from .config import settings app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Tip You would also need a file __init__.py as you saw on Bigger Applications - Multiple Files .","title":"Settings in another module"},{"location":"advanced/settings/#settings-in-a-dependency","text":"In some occasions it might be useful to provide the settings from a dependency, instead of having a global object with settings that is used everywhere. This could be especially useful during testing, as it's very easy to override a dependency with your own custom settings.","title":"Settings in a dependency"},{"location":"advanced/settings/#the-config-file","text":"Coming from the previous example, your config.py file could look like: from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 Notice that now we don't create a default instance settings = Settings() .","title":"The config file"},{"location":"advanced/settings/#the-main-app-file","text":"Now we create a dependency that returns a new config.Settings() . from functools import lru_cache from fastapi import Depends , FastAPI from .config import Settings app = FastAPI () @lru_cache () def get_settings (): return Settings () @app . get ( \"/info\" ) async def info ( settings : Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Tip We'll discuss the @lru_cache() in a bit. For now you can assume get_settings() is a normal function. And then we can require it from the path operation function as a dependency and use it anywhere we need it. from functools import lru_cache from fastapi import Depends , FastAPI from .config import Settings app = FastAPI () @lru_cache () def get_settings (): return Settings () @app . get ( \"/info\" ) async def info ( settings : Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , }","title":"The main app file"},{"location":"advanced/settings/#settings-and-testing","text":"Then it would be very easy to provide a different settings object during testing by creating a dependency override for get_settings : from fastapi.testclient import TestClient from .config import Settings from .main import app , get_settings client = TestClient ( app ) def get_settings_override (): return Settings ( admin_email = \"testing_admin@example.com\" ) app . dependency_overrides [ get_settings ] = get_settings_override def test_app (): response = client . get ( \"/info\" ) data = response . json () assert data == { \"app_name\" : \"Awesome API\" , \"admin_email\" : \"testing_admin@example.com\" , \"items_per_user\" : 50 , } In the dependency override we set a new value for the admin_email when creating the new Settings object, and then we return that new object. Then we can test that it is used.","title":"Settings and testing"},{"location":"advanced/settings/#reading-a-env-file","text":"If you have many settings that possibly change a lot, maybe in different environments, it might be useful to put them on a file and then read them from it as if they were environment variables. This practice is common enough that it has a name, these environment variables are commonly placed in a file .env , and the file is called a \"dotenv\". Tip A file starting with a dot ( . ) is a hidden file in Unix-like systems, like Linux and macOS. But a dotenv file doesn't really have to have that exact filename. Pydantic has support for reading from these types of files using an external library. You can read more at Pydantic Settings: Dotenv (.env) support . Tip For this to work, you need to pip install python-dotenv .","title":"Reading a .env file"},{"location":"advanced/settings/#the-env-file","text":"You could have a .env file with: ADMIN_EMAIL = \"deadpool@example.com\" APP_NAME = \"ChimichangApp\"","title":"The .env file"},{"location":"advanced/settings/#read-settings-from-env","text":"And then update your config.py with: from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 class Config : env_file = \".env\" Here we create a class Config inside of your Pydantic Settings class, and set the env_file to the filename with the dotenv file we want to use. Tip The Config class is used just for Pydantic configuration. You can read more at Pydantic Model Config","title":"Read settings from .env"},{"location":"advanced/settings/#creating-the-settings-only-once-with-lru_cache","text":"Reading a file from disk is normally a costly (slow) operation, so you probably want to do it only once and then re-use the same settings object, instead of reading it for each request. But every time we do: Settings () a new Settings object would be created, and at creation it would read the .env file again. If the dependency function was just like: def get_settings (): return Settings () we would create that object for each request, and we would be reading the .env file for each request. \u26a0\ufe0f But as we are using the @lru_cache() decorator on top, the Settings object will be created only once, the first time it's called. \u2714\ufe0f from functools import lru_cache from fastapi import Depends , FastAPI from . import config app = FastAPI () @lru_cache () def get_settings (): return config . Settings () @app . get ( \"/info\" ) async def info ( settings : config . Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } Then for any subsequent calls of get_settings() in the dependencies for the next requests, instead of executing the internal code of get_settings() and creating a new Settings object, it will return the same object that was returned on the first call, again and again.","title":"Creating the Settings only once with lru_cache"},{"location":"advanced/settings/#lru_cache-technical-details","text":"@lru_cache() modifies the function it decorates to return the same value that was returned the first time, instead of computing it again, executing the code of the function every time. So, the function below it will be executed once for each combination of arguments. And then the values returned by each of those combinations of arguments will be used again and again whenever the function is called with exactly the same combination of arguments. For example, if you have a function: @lru_cache () def say_hi ( name : str , salutation : str = \"Ms.\" ): return f \"Hello { salutation } { name } \" your program could execute like this: sequenceDiagram participant code as Code participant function as say_hi() participant execute as Execute function rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Camila\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Camila\") function ->> code: return stored result end rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Rick\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Rick\", salutation=\"Mr.\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Rick\") function ->> code: return stored result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Camila\") function ->> code: return stored result end In the case of our dependency get_settings() , the function doesn't even take any arguments, so it always returns the same value. That way, it behaves almost as if it was just a global variable. But as it uses a dependency function, then we can override it easily for testing. @lru_cache() is part of functools which is part of Python's standard library, you can read more about it in the Python docs for @lru_cache() .","title":"lru_cache Technical Details"},{"location":"advanced/settings/#recap","text":"You can use Pydantic Settings to handle the settings or configurations for your application, with all the power of Pydantic models. By using a dependency you can simplify testing. You can use .env files with it. Using @lru_cache() lets you avoid reading the dotenv file again and again for each request, while allowing you to override it during testing.","title":"Recap"},{"location":"advanced/sql-databases-peewee/","text":"SQL (Relational) Databases with Peewee \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Warning If you are just starting, the tutorial SQL (Relational) Databases that uses SQLAlchemy should be enough. Feel free to skip this. If you are starting a project from scratch, you are probably better off with SQLAlchemy ORM ( SQL (Relational) Databases ), or any other async ORM. If you already have a code base that uses Peewee ORM , you can check here how to use it with FastAPI . Python 3.7+ required You will need Python 3.7 or above to safely use Peewee with FastAPI. Peewee for async \u00b6 Peewee was not designed for async frameworks, or with them in mind. Peewee has some heavy assumptions about its defaults and about how it should be used. If you are developing an application with an older non-async framework, and can work with all its defaults, it can be a great tool . But if you need to change some of the defaults, support more than one predefined database, work with an async framework (like FastAPI), etc, you will need to add quite some complex extra code to override those defaults. Nevertheless, it's possible to do it, and here you'll see exactly what code you have to add to be able to use Peewee with FastAPI. Technical Details You can read more about Peewee's stand about async in Python in the docs , an issue , a PR . The same app \u00b6 We are going to create the same application as in the SQLAlchemy tutorial ( SQL (Relational) Databases ). Most of the code is actually the same. So, we are going to focus only on the differences. File structure \u00b6 Let's say you have a directory named my_super_project that contains a sub-directory called sql_app with a structure like this: . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u2514\u2500\u2500 schemas.py This is almost the same structure as we had for the SQLAlchemy tutorial. Now let's see what each file/module does. Create the Peewee parts \u00b6 Let's refer to the file sql_app/database.py . The standard Peewee code \u00b6 Let's first check all the normal Peewee code, create a Peewee database: from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () Tip Have in mind that if you wanted to use a different database, like PostgreSQL, you couldn't just change the string. You would need to use a different Peewee database class. Note \u00b6 The argument: check_same_thread = False is equivalent to the one in the SQLAlchemy tutorial: connect_args = { \"check_same_thread\" : False } ...it is needed only for SQLite . Technical Details Exactly the same technical details as in SQL (Relational) Databases apply. Make Peewee async-compatible PeeweeConnectionState \u00b6 The main issue with Peewee and FastAPI is that Peewee relies heavily on Python's threading.local , and it doesn't have a direct way to override it or let you handle connections/sessions directly (as is done in the SQLAlchemy tutorial). And threading.local is not compatible with the new async features of modern Python. Technical Details threading.local is used to have a \"magic\" variable that has a different value for each thread. This was useful in older frameworks designed to have one single thread per request, no more, no less. Using this, each request would have its own database connection/session, which is the actual final goal. But FastAPI, using the new async features, could handle more than one request on the same thread. And at the same time, for a single request, it could run multiple things in different threads (in a threadpool), depending on if you use async def or normal def . This is what gives all the performance improvements to FastAPI. But Python 3.7 and above provide a more advanced alternative to threading.local , that can also be used in the places where threading.local would be used, but is compatible with the new async features. We are going to use that. It's called contextvars . We are going to override the internal parts of Peewee that use threading.local and replace them with contextvars , with the corresponding updates. This might seem a bit complex (and it actually is), you don't really need to completely understand how it works to use it. We will create a PeeweeConnectionState : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () This class inherits from a special internal class used by Peewee. It has all the logic to make Peewee use contextvars instead of threading.local . contextvars works a bit differently than threading.local . But the rest of Peewee's internal code assumes that this class works with threading.local . So, we need to do some extra tricks to make it work as if it was just using threading.local . The __init__ , __setattr__ , and __getattr__ implement all the required tricks for this to be used by Peewee without knowing that it is now compatible with FastAPI. Tip This will just make Peewee behave correctly when used with FastAPI. Not randomly opening or closing connections that are being used, creating errors, etc. But it doesn't give Peewee async super-powers. You should still use normal def functions and not async def . Use the custom PeeweeConnectionState class \u00b6 Now, overwrite the ._state internal attribute in the Peewee database db object using the new PeeweeConnectionState : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () Tip Make sure you overwrite db._state after creating db . Tip You would do the same for any other Peewee database, including PostgresqlDatabase , MySQLDatabase , etc. Create the database models \u00b6 Let's now see the file sql_app/models.py . Create Peewee models for our data \u00b6 Now create the Peewee models (classes) for User and Item . This is the same you would do if you followed the Peewee tutorial and updated the models to have the same data as in the SQLAlchemy tutorial. Tip Peewee also uses the term \" model \" to refer to these classes and instances that interact with the database. But Pydantic also uses the term \" model \" to refer to something different, the data validation, conversion, and documentation classes and instances. Import db from database (the file database.py from above) and use it here. import peewee from .database import db class User ( peewee . Model ): email = peewee . CharField ( unique = True , index = True ) hashed_password = peewee . CharField () is_active = peewee . BooleanField ( default = True ) class Meta : database = db class Item ( peewee . Model ): title = peewee . CharField ( index = True ) description = peewee . CharField ( index = True ) owner = peewee . ForeignKeyField ( User , backref = \"items\" ) class Meta : database = db Tip Peewee creates several magic attributes. It will automatically add an id attribute as an integer to be the primary key. It will chose the name of the tables based on the class names. For the Item , it will create an attribute owner_id with the integer ID of the User . But we don't declare it anywhere. Create the Pydantic models \u00b6 Now let's check the file sql_app/schemas.py . Tip To avoid confusion between the Peewee models and the Pydantic models , we will have the file models.py with the Peewee models, and the file schemas.py with the Pydantic models. These Pydantic models define more or less a \"schema\" (a valid data shape). So this will help us avoiding confusion while using both. Create the Pydantic models / schemas \u00b6 Create all the same Pydantic models as in the SQLAlchemy tutorial: from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict Tip Here we are creating the models with an id . We didn't explicitly specify an id attribute in the Peewee models, but Peewee adds one automatically. We are also adding the magic owner_id attribute to Item . Create a PeeweeGetterDict for the Pydantic models / schemas \u00b6 When you access a relationship in a Peewee object, like in some_user.items , Peewee doesn't provide a list of Item . It provides a special custom object of class ModelSelect . It's possible to create a list of its items with list(some_user.items) . But the object itself is not a list . And it's also not an actual Python generator . Because of this, Pydantic doesn't know by default how to convert it to a list of Pydantic models / schemas. But recent versions of Pydantic allow providing a custom class that inherits from pydantic.utils.GetterDict , to provide the functionality used when using the orm_mode = True to retrieve the values for ORM model attributes. We are going to create a custom PeeweeGetterDict class and use it in all the same Pydantic models / schemas that use orm_mode : from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict Here we are checking if the attribute that is being accessed (e.g. .items in some_user.items ) is an instance of peewee.ModelSelect . And if that's the case, just return a list with it. And then we use it in the Pydantic models / schemas that use orm_mode = True , with the configuration variable getter_dict = PeeweeGetterDict . Tip We only need to create one PeeweeGetterDict class, and we can use it in all the Pydantic models / schemas. CRUD utils \u00b6 Now let's see the file sql_app/crud.py . Create all the CRUD utils \u00b6 Create all the same CRUD utils as in the SQLAlchemy tutorial, all the code is very similar: from . import models , schemas def get_user ( user_id : int ): return models . User . filter ( models . User . id == user_id ) . first () def get_user_by_email ( email : str ): return models . User . filter ( models . User . email == email ) . first () def get_users ( skip : int = 0 , limit : int = 100 ): return list ( models . User . select () . offset ( skip ) . limit ( limit )) def create_user ( user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db_user . save () return db_user def get_items ( skip : int = 0 , limit : int = 100 ): return list ( models . Item . select () . offset ( skip ) . limit ( limit )) def create_user_item ( item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db_item . save () return db_item There are some differences with the code for the SQLAlchemy tutorial. We don't pass a db attribute around. Instead we use the models directly. This is because the db object is a global object, that includes all the connection logic. That's why we had to do all the contextvars updates above. Aso, when returning several objects, like in get_users , we directly call list , like in: list ( models . User . select ()) This is for the same reason that we had to create a custom PeeweeGetterDict . But by returning something that is already a list instead of the peewee.ModelSelect the response_model in the path operation with List[models.User] (that we'll see later) will work correctly. Main FastAPI app \u00b6 And now in the file sql_app/main.py let's integrate and use all the other parts we created before. Create the database tables \u00b6 In a very simplistic way create the database tables: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Create a dependency \u00b6 Create a dependency that will connect the database right at the beginning of a request and disconnect it at the end: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Here we have an empty yield because we are actually not using the database object directly. It is connecting to the database and storing the connection data in an internal variable that is independent for each request (using the contextvars tricks from above). Because the database connection is potentially I/O blocking, this dependency is created with a normal def function. And then, in each path operation function that needs to access the database we add it as a dependency. But we are not using the value given by this dependency (it actually doesn't give any value, as it has an empty yield ). So, we don't add it to the path operation function but to the path operation decorator in the dependencies parameter: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Context variable sub-dependency \u00b6 For all the contextvars parts to work, we need to make sure we have an independent value in the ContextVar for each request that uses the database, and that value will be used as the database state (connection, transactions, etc) for the whole request. For that, we need to create another async dependency reset_db_state() that is used as a sub-dependency in get_db() . It will set the value for the context variable (with just a default dict ) that will be used as the database state for the whole request. And then the dependency get_db() will store in it the database state (connection, transactions, etc). import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users For the next request , as we will reset that context variable again in the async dependency reset_db_state() and then create a new connection in the get_db() dependency, that new request will have its own database state (connection, transactions, etc). Tip As FastAPI is an async framework, one request could start being processed, and before finishing, another request could be received and start processing as well, and it all could be processed in the same thread. But context variables are aware of these async features, so, a Peewee database state set in the async dependency reset_db_state() will keep its own data throughout the entire request. And at the same time, the other concurrent request will have its own database state that will be independent for the whole request. Peewee Proxy \u00b6 If you are using a Peewee Proxy , the actual database is at db.obj . So, you would reset it with: async def reset_db_state (): database . db . obj . _state . _state . set ( db_state_default . copy ()) database . db . obj . _state . reset () Create your FastAPI path operations \u00b6 Now, finally, here's the standard FastAPI path operations code. import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users About def vs async def \u00b6 The same as with SQLAlchemy, we are not doing something like: user = await models . User . select () . first () ...but instead we are using: user = models . User . select () . first () So, again, we should declare the path operation functions and the dependency without async def , just with a normal def , as: # Something goes here def read_users ( skip : int = 0 , limit : int = 100 ): # Something goes here Testing Peewee with async \u00b6 This example includes an extra path operation that simulates a long processing request with time.sleep(sleep_time) . It will have the database connection open at the beginning and will just wait some seconds before replying back. And each new request will wait one second less. This will easily let you test that your app with Peewee and FastAPI is behaving correctly with all the stuff about threads. If you want to check how Peewee would break your app if used without modification, go the the sql_app/database.py file and comment the line: # db._state = PeeweeConnectionState() And in the file sql_app/main.py file, comment the body of the async dependency reset_db_state() and replace it with a pass : async def reset_db_state (): # database.db._state._state.set(db_state_default.copy()) # database.db._state.reset() pass Then run your app with Uvicorn: $ uvicorn sql_app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Open your browser at http://127.0.0.1:8000/docs and create a couple of users. Then open 10 tabs at http://127.0.0.1:8000/docs#/default/read_slow_users_slowusers__get at the same time. Go to the path operation \"Get /slowusers/ \" in all of the tabs. Use the \"Try it out\" button and execute the request in each tab, one right after the other. The tabs will wait for a bit and then some of them will show Internal Server Error . What happens \u00b6 The first tab will make your app create a connection to the database and wait for some seconds before replying back and closing the database connection. Then, for the request in the next tab, your app will wait for one second less, and so on. This means that it will end up finishing some of the last tabs' requests earlier than some of the previous ones. Then one the last requests that wait less seconds will try to open a database connection, but as one of those previous requests for the other tabs will probably be handled in the same thread as the first one, it will have the same database connection that is already open, and Peewee will throw an error and you will see it in the terminal, and the response will have an Internal Server Error . This will probably happen for more than one of those tabs. If you had multiple clients talking to your app exactly at the same time, this is what could happen. And as your app starts to handle more and more clients at the same time, the waiting time in a single request needs to be shorter and shorter to trigger the error. Fix Peewee with FastAPI \u00b6 Now go back to the file sql_app/database.py , and uncomment the line: db . _state = PeeweeConnectionState () And in the file sql_app/main.py file, uncomment the body of the async dependency reset_db_state() : async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () Terminate your running app and start it again. Repeat the same process with the 10 tabs. This time all of them will wait and you will get all the results without errors. ...You fixed it! Review all the files \u00b6 Remember you should have a directory named my_super_project (or however you want) that contains a sub-directory called sql_app . sql_app should have the following files: sql_app/__init__.py : is an empty file. sql_app/database.py : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () sql_app/models.py : import peewee from .database import db class User ( peewee . Model ): email = peewee . CharField ( unique = True , index = True ) hashed_password = peewee . CharField () is_active = peewee . BooleanField ( default = True ) class Meta : database = db class Item ( peewee . Model ): title = peewee . CharField ( index = True ) description = peewee . CharField ( index = True ) owner = peewee . ForeignKeyField ( User , backref = \"items\" ) class Meta : database = db sql_app/schemas.py : from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict sql_app/crud.py : from . import models , schemas def get_user ( user_id : int ): return models . User . filter ( models . User . id == user_id ) . first () def get_user_by_email ( email : str ): return models . User . filter ( models . User . email == email ) . first () def get_users ( skip : int = 0 , limit : int = 100 ): return list ( models . User . select () . offset ( skip ) . limit ( limit )) def create_user ( user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db_user . save () return db_user def get_items ( skip : int = 0 , limit : int = 100 ): return list ( models . Item . select () . offset ( skip ) . limit ( limit )) def create_user_item ( item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db_item . save () return db_item sql_app/main.py : import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Technical Details \u00b6 Warning These are very technical details that you probably don't need. The problem \u00b6 Peewee uses threading.local by default to store it's database \"state\" data (connection, transactions, etc). threading.local creates a value exclusive to the current thread, but an async framework would run all the code (e.g. for each request) in the same thread, and possibly not in order. On top of that, an async framework could run some sync code in a threadpool (using asyncio.run_in_executor ), but belonging to the same request. This means that, with Peewee's current implementation, multiple tasks could be using the same threading.local variable and end up sharing the same connection and data (that they shouldn't), and at the same time, if they execute sync I/O-blocking code in a threadpool (as with normal def functions in FastAPI, in path operations and dependencies), that code won't have access to the database state variables, even while it's part of the same request and it should be able to get access to the same database state. Context variables \u00b6 Python 3.7 has contextvars that can create a local variable very similar to threading.local , but also supporting these async features. There are several things to have in mind. The ContextVar has to be created at the top of the module, like: some_var = ContextVar ( \"some_var\" , default = \"default value\" ) To set a value used in the current \"context\" (e.g. for the current request) use: some_var . set ( \"new value\" ) To get a value anywhere inside of the context (e.g. in any part handling the current request) use: some_var . get () Set context variables in the async dependency reset_db_state() \u00b6 If some part of the async code sets the value with some_var.set(\"updated in function\") (e.g. like the async dependency), the rest of the code in it and the code that goes after (including code inside of async functions called with await ) will see that new value. So, in our case, if we set the Peewee state variable (with a default dict ) in the async dependency, all the rest of the internal code in our app will see this value and will be able to reuse it for the whole request. And the context variable would be set again for the next request, even if they are concurrent. Set database state in the dependency get_db() \u00b6 As get_db() is a normal def function, FastAPI will make it run in a threadpool, with a copy of the \"context\", holding the same value for the context variable (the dict with the reset database state). Then it can add database state to that dict , like the connection, etc. But if the value of the context variable (the default dict ) was set in that normal def function, it would create a new value that would stay only in that thread of the threadpool, and the rest of the code (like the path operation functions ) wouldn't have access to it. In get_db() we can only set values in the dict , but not the entire dict itself. So, we need to have the async dependency reset_db_state() to set the dict in the context variable. That way, all the code has access to the same dict for the database state for a single request. Connect and disconnect in the dependency get_db() \u00b6 Then the next question would be, why not just connect and disconnect the database in the async dependency itself, instead of in get_db() ? The async dependency has to be async for the context variable to be preserved for the rest of the request, but creating and closing the database connection is potentially blocking, so it could degrade performance if it was there. So we also need the normal def dependency get_db() .","title":"SQL (Relational) Databases with Peewee"},{"location":"advanced/sql-databases-peewee/#sql-relational-databases-with-peewee","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Warning If you are just starting, the tutorial SQL (Relational) Databases that uses SQLAlchemy should be enough. Feel free to skip this. If you are starting a project from scratch, you are probably better off with SQLAlchemy ORM ( SQL (Relational) Databases ), or any other async ORM. If you already have a code base that uses Peewee ORM , you can check here how to use it with FastAPI . Python 3.7+ required You will need Python 3.7 or above to safely use Peewee with FastAPI.","title":"SQL (Relational) Databases with Peewee"},{"location":"advanced/sql-databases-peewee/#peewee-for-async","text":"Peewee was not designed for async frameworks, or with them in mind. Peewee has some heavy assumptions about its defaults and about how it should be used. If you are developing an application with an older non-async framework, and can work with all its defaults, it can be a great tool . But if you need to change some of the defaults, support more than one predefined database, work with an async framework (like FastAPI), etc, you will need to add quite some complex extra code to override those defaults. Nevertheless, it's possible to do it, and here you'll see exactly what code you have to add to be able to use Peewee with FastAPI. Technical Details You can read more about Peewee's stand about async in Python in the docs , an issue , a PR .","title":"Peewee for async"},{"location":"advanced/sql-databases-peewee/#the-same-app","text":"We are going to create the same application as in the SQLAlchemy tutorial ( SQL (Relational) Databases ). Most of the code is actually the same. So, we are going to focus only on the differences.","title":"The same app"},{"location":"advanced/sql-databases-peewee/#file-structure","text":"Let's say you have a directory named my_super_project that contains a sub-directory called sql_app with a structure like this: . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u2514\u2500\u2500 schemas.py This is almost the same structure as we had for the SQLAlchemy tutorial. Now let's see what each file/module does.","title":"File structure"},{"location":"advanced/sql-databases-peewee/#create-the-peewee-parts","text":"Let's refer to the file sql_app/database.py .","title":"Create the Peewee parts"},{"location":"advanced/sql-databases-peewee/#the-standard-peewee-code","text":"Let's first check all the normal Peewee code, create a Peewee database: from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () Tip Have in mind that if you wanted to use a different database, like PostgreSQL, you couldn't just change the string. You would need to use a different Peewee database class.","title":"The standard Peewee code"},{"location":"advanced/sql-databases-peewee/#note","text":"The argument: check_same_thread = False is equivalent to the one in the SQLAlchemy tutorial: connect_args = { \"check_same_thread\" : False } ...it is needed only for SQLite . Technical Details Exactly the same technical details as in SQL (Relational) Databases apply.","title":"Note"},{"location":"advanced/sql-databases-peewee/#make-peewee-async-compatible-peeweeconnectionstate","text":"The main issue with Peewee and FastAPI is that Peewee relies heavily on Python's threading.local , and it doesn't have a direct way to override it or let you handle connections/sessions directly (as is done in the SQLAlchemy tutorial). And threading.local is not compatible with the new async features of modern Python. Technical Details threading.local is used to have a \"magic\" variable that has a different value for each thread. This was useful in older frameworks designed to have one single thread per request, no more, no less. Using this, each request would have its own database connection/session, which is the actual final goal. But FastAPI, using the new async features, could handle more than one request on the same thread. And at the same time, for a single request, it could run multiple things in different threads (in a threadpool), depending on if you use async def or normal def . This is what gives all the performance improvements to FastAPI. But Python 3.7 and above provide a more advanced alternative to threading.local , that can also be used in the places where threading.local would be used, but is compatible with the new async features. We are going to use that. It's called contextvars . We are going to override the internal parts of Peewee that use threading.local and replace them with contextvars , with the corresponding updates. This might seem a bit complex (and it actually is), you don't really need to completely understand how it works to use it. We will create a PeeweeConnectionState : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () This class inherits from a special internal class used by Peewee. It has all the logic to make Peewee use contextvars instead of threading.local . contextvars works a bit differently than threading.local . But the rest of Peewee's internal code assumes that this class works with threading.local . So, we need to do some extra tricks to make it work as if it was just using threading.local . The __init__ , __setattr__ , and __getattr__ implement all the required tricks for this to be used by Peewee without knowing that it is now compatible with FastAPI. Tip This will just make Peewee behave correctly when used with FastAPI. Not randomly opening or closing connections that are being used, creating errors, etc. But it doesn't give Peewee async super-powers. You should still use normal def functions and not async def .","title":"Make Peewee async-compatible PeeweeConnectionState"},{"location":"advanced/sql-databases-peewee/#use-the-custom-peeweeconnectionstate-class","text":"Now, overwrite the ._state internal attribute in the Peewee database db object using the new PeeweeConnectionState : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () Tip Make sure you overwrite db._state after creating db . Tip You would do the same for any other Peewee database, including PostgresqlDatabase , MySQLDatabase , etc.","title":"Use the custom PeeweeConnectionState class"},{"location":"advanced/sql-databases-peewee/#create-the-database-models","text":"Let's now see the file sql_app/models.py .","title":"Create the database models"},{"location":"advanced/sql-databases-peewee/#create-peewee-models-for-our-data","text":"Now create the Peewee models (classes) for User and Item . This is the same you would do if you followed the Peewee tutorial and updated the models to have the same data as in the SQLAlchemy tutorial. Tip Peewee also uses the term \" model \" to refer to these classes and instances that interact with the database. But Pydantic also uses the term \" model \" to refer to something different, the data validation, conversion, and documentation classes and instances. Import db from database (the file database.py from above) and use it here. import peewee from .database import db class User ( peewee . Model ): email = peewee . CharField ( unique = True , index = True ) hashed_password = peewee . CharField () is_active = peewee . BooleanField ( default = True ) class Meta : database = db class Item ( peewee . Model ): title = peewee . CharField ( index = True ) description = peewee . CharField ( index = True ) owner = peewee . ForeignKeyField ( User , backref = \"items\" ) class Meta : database = db Tip Peewee creates several magic attributes. It will automatically add an id attribute as an integer to be the primary key. It will chose the name of the tables based on the class names. For the Item , it will create an attribute owner_id with the integer ID of the User . But we don't declare it anywhere.","title":"Create Peewee models for our data"},{"location":"advanced/sql-databases-peewee/#create-the-pydantic-models","text":"Now let's check the file sql_app/schemas.py . Tip To avoid confusion between the Peewee models and the Pydantic models , we will have the file models.py with the Peewee models, and the file schemas.py with the Pydantic models. These Pydantic models define more or less a \"schema\" (a valid data shape). So this will help us avoiding confusion while using both.","title":"Create the Pydantic models"},{"location":"advanced/sql-databases-peewee/#create-the-pydantic-models-schemas","text":"Create all the same Pydantic models as in the SQLAlchemy tutorial: from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict Tip Here we are creating the models with an id . We didn't explicitly specify an id attribute in the Peewee models, but Peewee adds one automatically. We are also adding the magic owner_id attribute to Item .","title":"Create the Pydantic models / schemas"},{"location":"advanced/sql-databases-peewee/#create-a-peeweegetterdict-for-the-pydantic-models-schemas","text":"When you access a relationship in a Peewee object, like in some_user.items , Peewee doesn't provide a list of Item . It provides a special custom object of class ModelSelect . It's possible to create a list of its items with list(some_user.items) . But the object itself is not a list . And it's also not an actual Python generator . Because of this, Pydantic doesn't know by default how to convert it to a list of Pydantic models / schemas. But recent versions of Pydantic allow providing a custom class that inherits from pydantic.utils.GetterDict , to provide the functionality used when using the orm_mode = True to retrieve the values for ORM model attributes. We are going to create a custom PeeweeGetterDict class and use it in all the same Pydantic models / schemas that use orm_mode : from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict Here we are checking if the attribute that is being accessed (e.g. .items in some_user.items ) is an instance of peewee.ModelSelect . And if that's the case, just return a list with it. And then we use it in the Pydantic models / schemas that use orm_mode = True , with the configuration variable getter_dict = PeeweeGetterDict . Tip We only need to create one PeeweeGetterDict class, and we can use it in all the Pydantic models / schemas.","title":"Create a PeeweeGetterDict for the Pydantic models / schemas"},{"location":"advanced/sql-databases-peewee/#crud-utils","text":"Now let's see the file sql_app/crud.py .","title":"CRUD utils"},{"location":"advanced/sql-databases-peewee/#create-all-the-crud-utils","text":"Create all the same CRUD utils as in the SQLAlchemy tutorial, all the code is very similar: from . import models , schemas def get_user ( user_id : int ): return models . User . filter ( models . User . id == user_id ) . first () def get_user_by_email ( email : str ): return models . User . filter ( models . User . email == email ) . first () def get_users ( skip : int = 0 , limit : int = 100 ): return list ( models . User . select () . offset ( skip ) . limit ( limit )) def create_user ( user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db_user . save () return db_user def get_items ( skip : int = 0 , limit : int = 100 ): return list ( models . Item . select () . offset ( skip ) . limit ( limit )) def create_user_item ( item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db_item . save () return db_item There are some differences with the code for the SQLAlchemy tutorial. We don't pass a db attribute around. Instead we use the models directly. This is because the db object is a global object, that includes all the connection logic. That's why we had to do all the contextvars updates above. Aso, when returning several objects, like in get_users , we directly call list , like in: list ( models . User . select ()) This is for the same reason that we had to create a custom PeeweeGetterDict . But by returning something that is already a list instead of the peewee.ModelSelect the response_model in the path operation with List[models.User] (that we'll see later) will work correctly.","title":"Create all the CRUD utils"},{"location":"advanced/sql-databases-peewee/#main-fastapi-app","text":"And now in the file sql_app/main.py let's integrate and use all the other parts we created before.","title":"Main FastAPI app"},{"location":"advanced/sql-databases-peewee/#create-the-database-tables","text":"In a very simplistic way create the database tables: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users","title":"Create the database tables"},{"location":"advanced/sql-databases-peewee/#create-a-dependency","text":"Create a dependency that will connect the database right at the beginning of a request and disconnect it at the end: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Here we have an empty yield because we are actually not using the database object directly. It is connecting to the database and storing the connection data in an internal variable that is independent for each request (using the contextvars tricks from above). Because the database connection is potentially I/O blocking, this dependency is created with a normal def function. And then, in each path operation function that needs to access the database we add it as a dependency. But we are not using the value given by this dependency (it actually doesn't give any value, as it has an empty yield ). So, we don't add it to the path operation function but to the path operation decorator in the dependencies parameter: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users","title":"Create a dependency"},{"location":"advanced/sql-databases-peewee/#context-variable-sub-dependency","text":"For all the contextvars parts to work, we need to make sure we have an independent value in the ContextVar for each request that uses the database, and that value will be used as the database state (connection, transactions, etc) for the whole request. For that, we need to create another async dependency reset_db_state() that is used as a sub-dependency in get_db() . It will set the value for the context variable (with just a default dict ) that will be used as the database state for the whole request. And then the dependency get_db() will store in it the database state (connection, transactions, etc). import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users For the next request , as we will reset that context variable again in the async dependency reset_db_state() and then create a new connection in the get_db() dependency, that new request will have its own database state (connection, transactions, etc). Tip As FastAPI is an async framework, one request could start being processed, and before finishing, another request could be received and start processing as well, and it all could be processed in the same thread. But context variables are aware of these async features, so, a Peewee database state set in the async dependency reset_db_state() will keep its own data throughout the entire request. And at the same time, the other concurrent request will have its own database state that will be independent for the whole request.","title":"Context variable sub-dependency"},{"location":"advanced/sql-databases-peewee/#peewee-proxy","text":"If you are using a Peewee Proxy , the actual database is at db.obj . So, you would reset it with: async def reset_db_state (): database . db . obj . _state . _state . set ( db_state_default . copy ()) database . db . obj . _state . reset ()","title":"Peewee Proxy"},{"location":"advanced/sql-databases-peewee/#create-your-fastapi-path-operations","text":"Now, finally, here's the standard FastAPI path operations code. import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users","title":"Create your FastAPI path operations"},{"location":"advanced/sql-databases-peewee/#about-def-vs-async-def","text":"The same as with SQLAlchemy, we are not doing something like: user = await models . User . select () . first () ...but instead we are using: user = models . User . select () . first () So, again, we should declare the path operation functions and the dependency without async def , just with a normal def , as: # Something goes here def read_users ( skip : int = 0 , limit : int = 100 ): # Something goes here","title":"About def vs async def"},{"location":"advanced/sql-databases-peewee/#testing-peewee-with-async","text":"This example includes an extra path operation that simulates a long processing request with time.sleep(sleep_time) . It will have the database connection open at the beginning and will just wait some seconds before replying back. And each new request will wait one second less. This will easily let you test that your app with Peewee and FastAPI is behaving correctly with all the stuff about threads. If you want to check how Peewee would break your app if used without modification, go the the sql_app/database.py file and comment the line: # db._state = PeeweeConnectionState() And in the file sql_app/main.py file, comment the body of the async dependency reset_db_state() and replace it with a pass : async def reset_db_state (): # database.db._state._state.set(db_state_default.copy()) # database.db._state.reset() pass Then run your app with Uvicorn: $ uvicorn sql_app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Open your browser at http://127.0.0.1:8000/docs and create a couple of users. Then open 10 tabs at http://127.0.0.1:8000/docs#/default/read_slow_users_slowusers__get at the same time. Go to the path operation \"Get /slowusers/ \" in all of the tabs. Use the \"Try it out\" button and execute the request in each tab, one right after the other. The tabs will wait for a bit and then some of them will show Internal Server Error .","title":"Testing Peewee with async"},{"location":"advanced/sql-databases-peewee/#what-happens","text":"The first tab will make your app create a connection to the database and wait for some seconds before replying back and closing the database connection. Then, for the request in the next tab, your app will wait for one second less, and so on. This means that it will end up finishing some of the last tabs' requests earlier than some of the previous ones. Then one the last requests that wait less seconds will try to open a database connection, but as one of those previous requests for the other tabs will probably be handled in the same thread as the first one, it will have the same database connection that is already open, and Peewee will throw an error and you will see it in the terminal, and the response will have an Internal Server Error . This will probably happen for more than one of those tabs. If you had multiple clients talking to your app exactly at the same time, this is what could happen. And as your app starts to handle more and more clients at the same time, the waiting time in a single request needs to be shorter and shorter to trigger the error.","title":"What happens"},{"location":"advanced/sql-databases-peewee/#fix-peewee-with-fastapi","text":"Now go back to the file sql_app/database.py , and uncomment the line: db . _state = PeeweeConnectionState () And in the file sql_app/main.py file, uncomment the body of the async dependency reset_db_state() : async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () Terminate your running app and start it again. Repeat the same process with the 10 tabs. This time all of them will wait and you will get all the results without errors. ...You fixed it!","title":"Fix Peewee with FastAPI"},{"location":"advanced/sql-databases-peewee/#review-all-the-files","text":"Remember you should have a directory named my_super_project (or however you want) that contains a sub-directory called sql_app . sql_app should have the following files: sql_app/__init__.py : is an empty file. sql_app/database.py : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () sql_app/models.py : import peewee from .database import db class User ( peewee . Model ): email = peewee . CharField ( unique = True , index = True ) hashed_password = peewee . CharField () is_active = peewee . BooleanField ( default = True ) class Meta : database = db class Item ( peewee . Model ): title = peewee . CharField ( index = True ) description = peewee . CharField ( index = True ) owner = peewee . ForeignKeyField ( User , backref = \"items\" ) class Meta : database = db sql_app/schemas.py : from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict sql_app/crud.py : from . import models , schemas def get_user ( user_id : int ): return models . User . filter ( models . User . id == user_id ) . first () def get_user_by_email ( email : str ): return models . User . filter ( models . User . email == email ) . first () def get_users ( skip : int = 0 , limit : int = 100 ): return list ( models . User . select () . offset ( skip ) . limit ( limit )) def create_user ( user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db_user . save () return db_user def get_items ( skip : int = 0 , limit : int = 100 ): return list ( models . Item . select () . offset ( skip ) . limit ( limit )) def create_user_item ( item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db_item . save () return db_item sql_app/main.py : import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users","title":"Review all the files"},{"location":"advanced/sql-databases-peewee/#technical-details","text":"Warning These are very technical details that you probably don't need.","title":"Technical Details"},{"location":"advanced/sql-databases-peewee/#the-problem","text":"Peewee uses threading.local by default to store it's database \"state\" data (connection, transactions, etc). threading.local creates a value exclusive to the current thread, but an async framework would run all the code (e.g. for each request) in the same thread, and possibly not in order. On top of that, an async framework could run some sync code in a threadpool (using asyncio.run_in_executor ), but belonging to the same request. This means that, with Peewee's current implementation, multiple tasks could be using the same threading.local variable and end up sharing the same connection and data (that they shouldn't), and at the same time, if they execute sync I/O-blocking code in a threadpool (as with normal def functions in FastAPI, in path operations and dependencies), that code won't have access to the database state variables, even while it's part of the same request and it should be able to get access to the same database state.","title":"The problem"},{"location":"advanced/sql-databases-peewee/#context-variables","text":"Python 3.7 has contextvars that can create a local variable very similar to threading.local , but also supporting these async features. There are several things to have in mind. The ContextVar has to be created at the top of the module, like: some_var = ContextVar ( \"some_var\" , default = \"default value\" ) To set a value used in the current \"context\" (e.g. for the current request) use: some_var . set ( \"new value\" ) To get a value anywhere inside of the context (e.g. in any part handling the current request) use: some_var . get ()","title":"Context variables"},{"location":"advanced/sql-databases-peewee/#set-context-variables-in-the-async-dependency-reset_db_state","text":"If some part of the async code sets the value with some_var.set(\"updated in function\") (e.g. like the async dependency), the rest of the code in it and the code that goes after (including code inside of async functions called with await ) will see that new value. So, in our case, if we set the Peewee state variable (with a default dict ) in the async dependency, all the rest of the internal code in our app will see this value and will be able to reuse it for the whole request. And the context variable would be set again for the next request, even if they are concurrent.","title":"Set context variables in the async dependency reset_db_state()"},{"location":"advanced/sql-databases-peewee/#set-database-state-in-the-dependency-get_db","text":"As get_db() is a normal def function, FastAPI will make it run in a threadpool, with a copy of the \"context\", holding the same value for the context variable (the dict with the reset database state). Then it can add database state to that dict , like the connection, etc. But if the value of the context variable (the default dict ) was set in that normal def function, it would create a new value that would stay only in that thread of the threadpool, and the rest of the code (like the path operation functions ) wouldn't have access to it. In get_db() we can only set values in the dict , but not the entire dict itself. So, we need to have the async dependency reset_db_state() to set the dict in the context variable. That way, all the code has access to the same dict for the database state for a single request.","title":"Set database state in the dependency get_db()"},{"location":"advanced/sql-databases-peewee/#connect-and-disconnect-in-the-dependency-get_db","text":"Then the next question would be, why not just connect and disconnect the database in the async dependency itself, instead of in get_db() ? The async dependency has to be async for the context variable to be preserved for the rest of the request, but creating and closing the database connection is potentially blocking, so it could degrade performance if it was there. So we also need the normal def dependency get_db() .","title":"Connect and disconnect in the dependency get_db()"},{"location":"advanced/sub-applications/","text":"Sub Applications - Mounts \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . If you need to have two independent FastAPI applications, with their own independent OpenAPI and their own docs UIs, you can have a main app and \"mount\" one (or more) sub-application(s). Mounting a FastAPI application \u00b6 \"Mounting\" means adding a completely \"independent\" application in a specific path, that then takes care of handling everything under that path, with the path operations declared in that sub-application. Top-level application \u00b6 First, create the main, top-level, FastAPI application, and its path operations : from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi ) Sub-application \u00b6 Then, create your sub-application, and its path operations . This sub-application is just another standard FastAPI application, but this is the one that will be \"mounted\": from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi ) Mount the sub-application \u00b6 In your top-level application, app , mount the sub-application, subapi . In this case, it will be mounted at the path /subapi : from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi ) Check the automatic API docs \u00b6 Now, run uvicorn with the main app, if your file is main.py , it would be: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) And open the docs at http://127.0.0.1:8000/docs . You will see the automatic API docs for the main app, including only its own path operations : And then, open the docs for the sub-application, at http://127.0.0.1:8000/subapi/docs . You will see the automatic API docs for the sub-application, including only its own path operations , all under the correct sub-path prefix /subapi : If you try interacting with any of the two user interfaces, they will work correctly, because the browser will be able to talk to each specific app or sub-app. Technical Details: root_path \u00b6 When you mount a sub-application as described above, FastAPI will take care of communicating the mount path for the sub-application using a mechanism from the ASGI specification called a root_path . That way, the sub-application will know to use that path prefix for the docs UI. And the sub-application could also have its own mounted sub-applications and everything would work correctly, because FastAPI handles all these root_path s automatically. You will learn more about the root_path and how to use it explicitly in the section about Behind a Proxy .","title":"Sub Applications - Mounts"},{"location":"advanced/sub-applications/#sub-applications-mounts","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . If you need to have two independent FastAPI applications, with their own independent OpenAPI and their own docs UIs, you can have a main app and \"mount\" one (or more) sub-application(s).","title":"Sub Applications - Mounts"},{"location":"advanced/sub-applications/#mounting-a-fastapi-application","text":"\"Mounting\" means adding a completely \"independent\" application in a specific path, that then takes care of handling everything under that path, with the path operations declared in that sub-application.","title":"Mounting a FastAPI application"},{"location":"advanced/sub-applications/#top-level-application","text":"First, create the main, top-level, FastAPI application, and its path operations : from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi )","title":"Top-level application"},{"location":"advanced/sub-applications/#sub-application","text":"Then, create your sub-application, and its path operations . This sub-application is just another standard FastAPI application, but this is the one that will be \"mounted\": from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi )","title":"Sub-application"},{"location":"advanced/sub-applications/#mount-the-sub-application","text":"In your top-level application, app , mount the sub-application, subapi . In this case, it will be mounted at the path /subapi : from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi )","title":"Mount the sub-application"},{"location":"advanced/sub-applications/#check-the-automatic-api-docs","text":"Now, run uvicorn with the main app, if your file is main.py , it would be: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) And open the docs at http://127.0.0.1:8000/docs . You will see the automatic API docs for the main app, including only its own path operations : And then, open the docs for the sub-application, at http://127.0.0.1:8000/subapi/docs . You will see the automatic API docs for the sub-application, including only its own path operations , all under the correct sub-path prefix /subapi : If you try interacting with any of the two user interfaces, they will work correctly, because the browser will be able to talk to each specific app or sub-app.","title":"Check the automatic API docs"},{"location":"advanced/sub-applications/#technical-details-root_path","text":"When you mount a sub-application as described above, FastAPI will take care of communicating the mount path for the sub-application using a mechanism from the ASGI specification called a root_path . That way, the sub-application will know to use that path prefix for the docs UI. And the sub-application could also have its own mounted sub-applications and everything would work correctly, because FastAPI handles all these root_path s automatically. You will learn more about the root_path and how to use it explicitly in the section about Behind a Proxy .","title":"Technical Details: root_path"},{"location":"advanced/templates/","text":"Templates \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use any template engine you want with FastAPI . A common choice is Jinja2, the same one used by Flask and other tools. There are utilities to configure it easily that you can use directly in your FastAPI application (provided by Starlette). Install dependencies \u00b6 Install jinja2 : $ pip install jinja2 ---> 100% Using Jinja2Templates \u00b6 Import Jinja2Templates . Create a templates object that you can re-use later. Declare a Request parameter in the path operation that will return a template. Use the templates you created to render and return a TemplateResponse , passing the request as one of the key-value pairs in the Jinja2 \"context\". from fastapi import FastAPI , Request from fastapi.responses import HTMLResponse from fastapi.staticfiles import StaticFiles from fastapi.templating import Jinja2Templates app = FastAPI () app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) templates = Jinja2Templates ( directory = \"templates\" ) @app . get ( \"/items/ {id} \" , response_class = HTMLResponse ) async def read_item ( request : Request , id : str ): return templates . TemplateResponse ( \"item.html\" , { \"request\" : request , \"id\" : id }) Note Notice that you have to pass the request as part of the key-value pairs in the context for Jinja2. So, you also have to declare it in your path operation . Tip By declaring response_class=HTMLResponse the docs UI will be able to know that the response will be HTML. Technical Details You could also use from starlette.templating import Jinja2Templates . FastAPI provides the same starlette.templating as fastapi.templating just as a convenience for you, the developer. But most of the available responses come directly from Starlette. The same with Request and StaticFiles . Writing templates \u00b6 Then you can write a template at templates/item.html with: <html> <head> <title>Item Details</title> <link href=\" {{ url_for ( 'static' , path = '/styles.css' ) }} \" rel=\"stylesheet\"> </head> <body> <h1>Item ID: {{ id }} </h1> </body> </html> It will show the id taken from the \"context\" dict you passed: { \"request\" : request , \"id\" : id } Templates and static files \u00b6 And you can also use url_for() inside of the template, and use it, for example, with the StaticFiles you mounted. <html> <head> <title>Item Details</title> <link href=\" {{ url_for ( 'static' , path = '/styles.css' ) }} \" rel=\"stylesheet\"> </head> <body> <h1>Item ID: {{ id }} </h1> </body> </html> In this example, it would link to a CSS file at static/styles.css with: h1 { color : green ; } And because you are using StaticFiles , that CSS file would be served automatically by your FastAPI application at the URL /static/styles.css . More details \u00b6 For more details, including how to test templates, check Starlette's docs on templates .","title":"Templates"},{"location":"advanced/templates/#templates","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use any template engine you want with FastAPI . A common choice is Jinja2, the same one used by Flask and other tools. There are utilities to configure it easily that you can use directly in your FastAPI application (provided by Starlette).","title":"Templates"},{"location":"advanced/templates/#install-dependencies","text":"Install jinja2 : $ pip install jinja2 ---> 100%","title":"Install dependencies"},{"location":"advanced/templates/#using-jinja2templates","text":"Import Jinja2Templates . Create a templates object that you can re-use later. Declare a Request parameter in the path operation that will return a template. Use the templates you created to render and return a TemplateResponse , passing the request as one of the key-value pairs in the Jinja2 \"context\". from fastapi import FastAPI , Request from fastapi.responses import HTMLResponse from fastapi.staticfiles import StaticFiles from fastapi.templating import Jinja2Templates app = FastAPI () app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) templates = Jinja2Templates ( directory = \"templates\" ) @app . get ( \"/items/ {id} \" , response_class = HTMLResponse ) async def read_item ( request : Request , id : str ): return templates . TemplateResponse ( \"item.html\" , { \"request\" : request , \"id\" : id }) Note Notice that you have to pass the request as part of the key-value pairs in the context for Jinja2. So, you also have to declare it in your path operation . Tip By declaring response_class=HTMLResponse the docs UI will be able to know that the response will be HTML. Technical Details You could also use from starlette.templating import Jinja2Templates . FastAPI provides the same starlette.templating as fastapi.templating just as a convenience for you, the developer. But most of the available responses come directly from Starlette. The same with Request and StaticFiles .","title":"Using Jinja2Templates"},{"location":"advanced/templates/#writing-templates","text":"Then you can write a template at templates/item.html with: <html> <head> <title>Item Details</title> <link href=\" {{ url_for ( 'static' , path = '/styles.css' ) }} \" rel=\"stylesheet\"> </head> <body> <h1>Item ID: {{ id }} </h1> </body> </html> It will show the id taken from the \"context\" dict you passed: { \"request\" : request , \"id\" : id }","title":"Writing templates"},{"location":"advanced/templates/#templates-and-static-files","text":"And you can also use url_for() inside of the template, and use it, for example, with the StaticFiles you mounted. <html> <head> <title>Item Details</title> <link href=\" {{ url_for ( 'static' , path = '/styles.css' ) }} \" rel=\"stylesheet\"> </head> <body> <h1>Item ID: {{ id }} </h1> </body> </html> In this example, it would link to a CSS file at static/styles.css with: h1 { color : green ; } And because you are using StaticFiles , that CSS file would be served automatically by your FastAPI application at the URL /static/styles.css .","title":"Templates and static files"},{"location":"advanced/templates/#more-details","text":"For more details, including how to test templates, check Starlette's docs on templates .","title":"More details"},{"location":"advanced/testing-database/","text":"Testing a Database \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use the same dependency overrides from Testing Dependencies with Overrides to alter a database for testing. You could want to set up a different database for testing, rollback the data after the tests, pre-fill it with some testing data, etc. The main idea is exactly the same you saw in that previous chapter. Add tests for the SQL app \u00b6 Let's update the example from SQL (Relational) Databases to use a testing database. All the app code is the same, you can go back to that chapter check how it was. The only changes here are in the new testing file. Your normal dependency get_db() would return a database session. In the test, you could use a dependency override to return your custom database session instead of the one that would be used normally. In this example we'll create a temporary database only for the tests. File structure \u00b6 We create a new file at sql_app/tests/test_sql_app.py . So the new file structure looks like: . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 models.py \u251c\u2500\u2500 schemas.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_sql_app.py Create the new database session \u00b6 First, we create a new database session with the new database. For the tests we'll use a file test.db instead of sql_app.db . But the rest of the session code is more or less the same, we just copy it. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id Tip You could reduce duplication in that code by putting it in a function and using it from both database.py and tests/test_sql_app.py . For simplicity and to focus on the specific testing code, we are just copying it. Create the database \u00b6 Because now we are going to use a new database in a new file, we need to make sure we create the database with: Base . metadata . create_all ( bind = engine ) That is normally called in main.py , but the line in main.py uses the database file sql_app.db , and we need to make sure we create test.db for the tests. So we add that line here, with the new file. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id Dependency override \u00b6 Now we create the dependency override and add it to the overrides for our app. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id Tip The code for override_get_db() is almost exactly the same as for get_db() , but in override_get_db() we use the TestingSessionLocal for the testing database instead. Test the app \u00b6 Then we can just test the app as normally. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id And all the modifications we made in the database during the tests will be in the test.db database instead of the main sql_app.db .","title":"Testing a Database"},{"location":"advanced/testing-database/#testing-a-database","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use the same dependency overrides from Testing Dependencies with Overrides to alter a database for testing. You could want to set up a different database for testing, rollback the data after the tests, pre-fill it with some testing data, etc. The main idea is exactly the same you saw in that previous chapter.","title":"Testing a Database"},{"location":"advanced/testing-database/#add-tests-for-the-sql-app","text":"Let's update the example from SQL (Relational) Databases to use a testing database. All the app code is the same, you can go back to that chapter check how it was. The only changes here are in the new testing file. Your normal dependency get_db() would return a database session. In the test, you could use a dependency override to return your custom database session instead of the one that would be used normally. In this example we'll create a temporary database only for the tests.","title":"Add tests for the SQL app"},{"location":"advanced/testing-database/#file-structure","text":"We create a new file at sql_app/tests/test_sql_app.py . So the new file structure looks like: . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 models.py \u251c\u2500\u2500 schemas.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_sql_app.py","title":"File structure"},{"location":"advanced/testing-database/#create-the-new-database-session","text":"First, we create a new database session with the new database. For the tests we'll use a file test.db instead of sql_app.db . But the rest of the session code is more or less the same, we just copy it. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id Tip You could reduce duplication in that code by putting it in a function and using it from both database.py and tests/test_sql_app.py . For simplicity and to focus on the specific testing code, we are just copying it.","title":"Create the new database session"},{"location":"advanced/testing-database/#create-the-database","text":"Because now we are going to use a new database in a new file, we need to make sure we create the database with: Base . metadata . create_all ( bind = engine ) That is normally called in main.py , but the line in main.py uses the database file sql_app.db , and we need to make sure we create test.db for the tests. So we add that line here, with the new file. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id","title":"Create the database"},{"location":"advanced/testing-database/#dependency-override","text":"Now we create the dependency override and add it to the overrides for our app. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id Tip The code for override_get_db() is almost exactly the same as for get_db() , but in override_get_db() we use the TestingSessionLocal for the testing database instead.","title":"Dependency override"},{"location":"advanced/testing-database/#test-the-app","text":"Then we can just test the app as normally. from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id And all the modifications we made in the database during the tests will be in the test.db database instead of the main sql_app.db .","title":"Test the app"},{"location":"advanced/testing-dependencies/","text":"Testing Dependencies with Overrides \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Overriding dependencies during testing \u00b6 There are some scenarios where you might want to override a dependency during testing. You don't want the original dependency to run (nor any of the sub-dependencies it might have). Instead, you want to provide a different dependency that will be used only during tests (possibly only some specific tests), and will provide a value that can be used where the value of the original dependency was used. Use cases: external service \u00b6 An example could be that you have an external authentication provider that you need to call. You send it a token and it returns an authenticated user. This provider might be charging you per request, and calling it might take some extra time than if you had a fixed mock user for tests. You probably want to test the external provider once, but not necessarily call it for every test that runs. In this case, you can override the dependency that calls that provider, and use a custom dependency that returns a mock user, only for your tests. Use the app.dependency_overrides attribute \u00b6 For these cases, your FastAPI application has an attribute app.dependency_overrides , it is a simple dict . To override a dependency for testing, you put as a key the original dependency (a function), and as the value, your dependency override (another function). And then FastAPI will call that override instead of the original dependency. from typing import Union from fastapi import Depends , FastAPI from fastapi.testclient import TestClient app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return { \"message\" : \"Hello Items!\" , \"params\" : commons } @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return { \"message\" : \"Hello Users!\" , \"params\" : commons } client = TestClient ( app ) async def override_dependency ( q : Union [ str , None ] = None ): return { \"q\" : q , \"skip\" : 5 , \"limit\" : 10 } app . dependency_overrides [ common_parameters ] = override_dependency def test_override_in_items (): response = client . get ( \"/items/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : None , \"skip\" : 5 , \"limit\" : 10 }, } def test_override_in_items_with_q (): response = client . get ( \"/items/?q=foo\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : \"foo\" , \"skip\" : 5 , \"limit\" : 10 }, } def test_override_in_items_with_params (): response = client . get ( \"/items/?q=foo&skip=100&limit=200\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : \"foo\" , \"skip\" : 5 , \"limit\" : 10 }, } Tip You can set a dependency override for a dependency used anywhere in your FastAPI application. The original dependency could be used in a path operation function , a path operation decorator (when you don't use the return value), a .include_router() call, etc. FastAPI will still be able to override it. Then you can reset your overrides (remove them) by setting app.dependency_overrides to be an empty dict : app . dependency_overrides = {} Tip If you want to override a dependency only during some tests, you can set the override at the beginning of the test (inside the test function) and reset it at the end (at the end of the test function).","title":"Testing Dependencies with Overrides"},{"location":"advanced/testing-dependencies/#testing-dependencies-with-overrides","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing .","title":"Testing Dependencies with Overrides"},{"location":"advanced/testing-dependencies/#overriding-dependencies-during-testing","text":"There are some scenarios where you might want to override a dependency during testing. You don't want the original dependency to run (nor any of the sub-dependencies it might have). Instead, you want to provide a different dependency that will be used only during tests (possibly only some specific tests), and will provide a value that can be used where the value of the original dependency was used.","title":"Overriding dependencies during testing"},{"location":"advanced/testing-dependencies/#use-cases-external-service","text":"An example could be that you have an external authentication provider that you need to call. You send it a token and it returns an authenticated user. This provider might be charging you per request, and calling it might take some extra time than if you had a fixed mock user for tests. You probably want to test the external provider once, but not necessarily call it for every test that runs. In this case, you can override the dependency that calls that provider, and use a custom dependency that returns a mock user, only for your tests.","title":"Use cases: external service"},{"location":"advanced/testing-dependencies/#use-the-appdependency_overrides-attribute","text":"For these cases, your FastAPI application has an attribute app.dependency_overrides , it is a simple dict . To override a dependency for testing, you put as a key the original dependency (a function), and as the value, your dependency override (another function). And then FastAPI will call that override instead of the original dependency. from typing import Union from fastapi import Depends , FastAPI from fastapi.testclient import TestClient app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return { \"message\" : \"Hello Items!\" , \"params\" : commons } @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return { \"message\" : \"Hello Users!\" , \"params\" : commons } client = TestClient ( app ) async def override_dependency ( q : Union [ str , None ] = None ): return { \"q\" : q , \"skip\" : 5 , \"limit\" : 10 } app . dependency_overrides [ common_parameters ] = override_dependency def test_override_in_items (): response = client . get ( \"/items/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : None , \"skip\" : 5 , \"limit\" : 10 }, } def test_override_in_items_with_q (): response = client . get ( \"/items/?q=foo\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : \"foo\" , \"skip\" : 5 , \"limit\" : 10 }, } def test_override_in_items_with_params (): response = client . get ( \"/items/?q=foo&skip=100&limit=200\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : \"foo\" , \"skip\" : 5 , \"limit\" : 10 }, } Tip You can set a dependency override for a dependency used anywhere in your FastAPI application. The original dependency could be used in a path operation function , a path operation decorator (when you don't use the return value), a .include_router() call, etc. FastAPI will still be able to override it. Then you can reset your overrides (remove them) by setting app.dependency_overrides to be an empty dict : app . dependency_overrides = {} Tip If you want to override a dependency only during some tests, you can set the override at the beginning of the test (inside the test function) and reset it at the end (at the end of the test function).","title":"Use the app.dependency_overrides attribute"},{"location":"advanced/testing-events/","text":"Testing Events: startup - shutdown \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . When you need your event handlers ( startup and shutdown ) to run in your tests, you can use the TestClient with a with statement: from fastapi import FastAPI from fastapi.testclient import TestClient app = FastAPI () items = {} @app . on_event ( \"startup\" ) async def startup_event (): items [ \"foo\" ] = { \"name\" : \"Fighters\" } items [ \"bar\" ] = { \"name\" : \"Tenders\" } @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : str ): return items [ item_id ] def test_read_items (): with TestClient ( app ) as client : response = client . get ( \"/items/foo\" ) assert response . status_code == 200 assert response . json () == { \"name\" : \"Fighters\" }","title":"Testing Events: startup - shutdown"},{"location":"advanced/testing-events/#testing-events-startup-shutdown","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . When you need your event handlers ( startup and shutdown ) to run in your tests, you can use the TestClient with a with statement: from fastapi import FastAPI from fastapi.testclient import TestClient app = FastAPI () items = {} @app . on_event ( \"startup\" ) async def startup_event (): items [ \"foo\" ] = { \"name\" : \"Fighters\" } items [ \"bar\" ] = { \"name\" : \"Tenders\" } @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : str ): return items [ item_id ] def test_read_items (): with TestClient ( app ) as client : response = client . get ( \"/items/foo\" ) assert response . status_code == 200 assert response . json () == { \"name\" : \"Fighters\" }","title":"Testing Events: startup - shutdown"},{"location":"advanced/testing-websockets/","text":"Testing WebSockets \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use the same TestClient to test WebSockets. For this, you use the TestClient in a with statement, connecting to the WebSocket: from fastapi import FastAPI from fastapi.testclient import TestClient from fastapi.websockets import WebSocket app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } @app . websocket_route ( \"/ws\" ) async def websocket ( websocket : WebSocket ): await websocket . accept () await websocket . send_json ({ \"msg\" : \"Hello WebSocket\" }) await websocket . close () def test_read_main (): client = TestClient ( app ) response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } def test_websocket (): client = TestClient ( app ) with client . websocket_connect ( \"/ws\" ) as websocket : data = websocket . receive_json () assert data == { \"msg\" : \"Hello WebSocket\" } Note For more details, check Starlette's documentation for testing WebSockets .","title":"Testing WebSockets"},{"location":"advanced/testing-websockets/#testing-websockets","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use the same TestClient to test WebSockets. For this, you use the TestClient in a with statement, connecting to the WebSocket: from fastapi import FastAPI from fastapi.testclient import TestClient from fastapi.websockets import WebSocket app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } @app . websocket_route ( \"/ws\" ) async def websocket ( websocket : WebSocket ): await websocket . accept () await websocket . send_json ({ \"msg\" : \"Hello WebSocket\" }) await websocket . close () def test_read_main (): client = TestClient ( app ) response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } def test_websocket (): client = TestClient ( app ) with client . websocket_connect ( \"/ws\" ) as websocket : data = websocket . receive_json () assert data == { \"msg\" : \"Hello WebSocket\" } Note For more details, check Starlette's documentation for testing WebSockets .","title":"Testing WebSockets"},{"location":"advanced/using-request-directly/","text":"Using the Request Directly \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Up to now, you have been declaring the parts of the request that you need with their types. Taking data from: The path as parameters. Headers. Cookies. etc. And by doing so, FastAPI is validating that data, converting it and generating documentation for your API automatically. But there are situations where you might need to access the Request object directly. Details about the Request object \u00b6 As FastAPI is actually Starlette underneath, with a layer of several tools on top, you can use Starlette's Request object directly when you need to. It would also mean that if you get data from the Request object directly (for example, read the body) it won't be validated, converted or documented (with OpenAPI, for the automatic API user interface) by FastAPI. Although any other parameter declared normally (for example, the body with a Pydantic model) would still be validated, converted, annotated, etc. But there are specific cases where it's useful to get the Request object. Use the Request object directly \u00b6 Let's imagine you want to get the client's IP address/host inside of your path operation function . For that you need to access the request directly. from fastapi import FastAPI , Request app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def read_root ( item_id : str , request : Request ): client_host = request . client . host return { \"client_host\" : client_host , \"item_id\" : item_id } By declaring a path operation function parameter with the type being the Request FastAPI will know to pass the Request in that parameter. Tip Note that in this case, we are declaring a path parameter beside the request parameter. So, the path parameter will be extracted, validated, converted to the specified type and annotated with OpenAPI. The same way, you can declare any other parameter as normally, and additionally, get the Request too. Request documentation \u00b6 You can read more details about the Request object in the official Starlette documentation site . Technical Details You could also use from starlette.requests import Request . FastAPI provides it directly just as a convenience for you, the developer. But it comes directly from Starlette.","title":"Using the Request Directly"},{"location":"advanced/using-request-directly/#using-the-request-directly","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Up to now, you have been declaring the parts of the request that you need with their types. Taking data from: The path as parameters. Headers. Cookies. etc. And by doing so, FastAPI is validating that data, converting it and generating documentation for your API automatically. But there are situations where you might need to access the Request object directly.","title":"Using the Request Directly"},{"location":"advanced/using-request-directly/#details-about-the-request-object","text":"As FastAPI is actually Starlette underneath, with a layer of several tools on top, you can use Starlette's Request object directly when you need to. It would also mean that if you get data from the Request object directly (for example, read the body) it won't be validated, converted or documented (with OpenAPI, for the automatic API user interface) by FastAPI. Although any other parameter declared normally (for example, the body with a Pydantic model) would still be validated, converted, annotated, etc. But there are specific cases where it's useful to get the Request object.","title":"Details about the Request object"},{"location":"advanced/using-request-directly/#use-the-request-object-directly","text":"Let's imagine you want to get the client's IP address/host inside of your path operation function . For that you need to access the request directly. from fastapi import FastAPI , Request app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def read_root ( item_id : str , request : Request ): client_host = request . client . host return { \"client_host\" : client_host , \"item_id\" : item_id } By declaring a path operation function parameter with the type being the Request FastAPI will know to pass the Request in that parameter. Tip Note that in this case, we are declaring a path parameter beside the request parameter. So, the path parameter will be extracted, validated, converted to the specified type and annotated with OpenAPI. The same way, you can declare any other parameter as normally, and additionally, get the Request too.","title":"Use the Request object directly"},{"location":"advanced/using-request-directly/#request-documentation","text":"You can read more details about the Request object in the official Starlette documentation site . Technical Details You could also use from starlette.requests import Request . FastAPI provides it directly just as a convenience for you, the developer. But it comes directly from Starlette.","title":"Request documentation"},{"location":"advanced/websockets/","text":"WebSockets \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use WebSockets with FastAPI . WebSockets client \u00b6 In production \u00b6 In your production system, you probably have a frontend created with a modern framework like React, Vue.js or Angular. And to communicate using WebSockets with your backend you would probably use your frontend's utilities. Or you might have a native mobile application that communicates with your WebSocket backend directly, in native code. Or you might have any other way to communicate with the WebSocket endpoint. But for this example, we'll use a very simple HTML document with some JavaScript, all inside a long string. This, of course, is not optimal and you wouldn't use it for production. In production you would have one of the options above. But it's the simplest way to focus on the server-side of WebSockets and have a working example: from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) Create a websocket \u00b6 In your FastAPI application, create a websocket : from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) Technical Details You could also use from starlette.websockets import WebSocket . FastAPI provides the same WebSocket directly just as a convenience for you, the developer. But it comes directly from Starlette. Await for messages and send messages \u00b6 In your WebSocket route you can await for messages and send messages. from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) You can receive and send binary, text, and JSON data. Try it \u00b6 If your file is named main.py , run your application with: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Open your browser at http://127.0.0.1:8000 . You will see a simple page like: You can type messages in the input box, and send them: And your FastAPI application with WebSockets will respond back: You can send (and receive) many messages: And all of them will use the same WebSocket connection. Using Depends and others \u00b6 In WebSocket endpoints you can import from fastapi and use: Depends Security Cookie Header Path Query They work the same way as for other FastAPI endpoints/ path operations : from typing import Union from fastapi import Cookie , Depends , FastAPI , Query , WebSocket , status from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label> <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label> <button onclick=\"connect(event)\">Connect</button> <hr> <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = null; function connect(event) { var itemId = document.getElementById(\"itemId\") var token = document.getElementById(\"token\") ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; event.preventDefault() } function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) async def get_cookie_or_token ( websocket : WebSocket , session : Union [ str , None ] = Cookie ( default = None ), token : Union [ str , None ] = Query ( default = None ), ): if session is None and token is None : await websocket . close ( code = status . WS_1008_POLICY_VIOLATION ) return session or token @app . websocket ( \"/items/ {item_id} /ws\" ) async def websocket_endpoint ( websocket : WebSocket , item_id : str , q : Union [ int , None ] = None , cookie_or_token : str = Depends ( get_cookie_or_token ), ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Session cookie or query token value is: { cookie_or_token } \" ) if q is not None : await websocket . send_text ( f \"Query parameter q is: { q } \" ) await websocket . send_text ( f \"Message text was: { data } , for item ID: { item_id } \" ) Info In a WebSocket it doesn't really make sense to raise an HTTPException . So it's better to close the WebSocket connection directly. You can use a closing code from the valid codes defined in the specification . In the future, there will be a WebSocketException that you will be able to raise from anywhere, and add exception handlers for it. It depends on the PR #527 in Starlette. Try the WebSockets with dependencies \u00b6 If your file is named main.py , run your application with: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Open your browser at http://127.0.0.1:8000 . There you can set: The \"Item ID\", used in the path. The \"Token\" used as a query parameter. Tip Notice that the query token will be handled by a dependency. With that you can connect the WebSocket and then send and receive messages: Handling disconnections and multiple clients \u00b6 When a WebSocket connection is closed, the await websocket.receive_text() will raise a WebSocketDisconnect exception, which you can then catch and handle like in this example. from typing import List from fastapi import FastAPI , WebSocket , WebSocketDisconnect from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <h2>Your ID: <span id=\"ws-id\"></span></h2> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var client_id = Date.now() document.querySelector(\"#ws-id\").textContent = client_id; var ws = new WebSocket(`ws://localhost:8000/ws/$ {client_id} `); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" class ConnectionManager : def __init__ ( self ): self . active_connections : List [ WebSocket ] = [] async def connect ( self , websocket : WebSocket ): await websocket . accept () self . active_connections . append ( websocket ) def disconnect ( self , websocket : WebSocket ): self . active_connections . remove ( websocket ) async def send_personal_message ( self , message : str , websocket : WebSocket ): await websocket . send_text ( message ) async def broadcast ( self , message : str ): for connection in self . active_connections : await connection . send_text ( message ) manager = ConnectionManager () @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws/ {client_id} \" ) async def websocket_endpoint ( websocket : WebSocket , client_id : int ): await manager . connect ( websocket ) try : while True : data = await websocket . receive_text () await manager . send_personal_message ( f \"You wrote: { data } \" , websocket ) await manager . broadcast ( f \"Client # { client_id } says: { data } \" ) except WebSocketDisconnect : manager . disconnect ( websocket ) await manager . broadcast ( f \"Client # { client_id } left the chat\" ) To try it out: Open the app with several browser tabs. Write messages from them. Then close one of the tabs. That will raise the WebSocketDisconnect exception, and all the other clients will receive a message like: Client #1596980209979 left the chat Tip The app above is a minimal and simple example to demonstrate how to handle and broadcast messages to several WebSocket connections. But have in mind that, as everything is handled in memory, in a single list, it will only work while the process is running, and will only work with a single process. If you need something easy to integrate with FastAPI but that is more robust, supported by Redis, PostgreSQL or others, check encode/broadcaster . More info \u00b6 To learn more about the options, check Starlette's documentation for: The WebSocket class . Class-based WebSocket handling .","title":"WebSockets"},{"location":"advanced/websockets/#websockets","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use WebSockets with FastAPI .","title":"WebSockets"},{"location":"advanced/websockets/#websockets-client","text":"","title":"WebSockets client"},{"location":"advanced/websockets/#in-production","text":"In your production system, you probably have a frontend created with a modern framework like React, Vue.js or Angular. And to communicate using WebSockets with your backend you would probably use your frontend's utilities. Or you might have a native mobile application that communicates with your WebSocket backend directly, in native code. Or you might have any other way to communicate with the WebSocket endpoint. But for this example, we'll use a very simple HTML document with some JavaScript, all inside a long string. This, of course, is not optimal and you wouldn't use it for production. In production you would have one of the options above. But it's the simplest way to focus on the server-side of WebSockets and have a working example: from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" )","title":"In production"},{"location":"advanced/websockets/#create-a-websocket","text":"In your FastAPI application, create a websocket : from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) Technical Details You could also use from starlette.websockets import WebSocket . FastAPI provides the same WebSocket directly just as a convenience for you, the developer. But it comes directly from Starlette.","title":"Create a websocket"},{"location":"advanced/websockets/#await-for-messages-and-send-messages","text":"In your WebSocket route you can await for messages and send messages. from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) You can receive and send binary, text, and JSON data.","title":"Await for messages and send messages"},{"location":"advanced/websockets/#try-it","text":"If your file is named main.py , run your application with: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Open your browser at http://127.0.0.1:8000 . You will see a simple page like: You can type messages in the input box, and send them: And your FastAPI application with WebSockets will respond back: You can send (and receive) many messages: And all of them will use the same WebSocket connection.","title":"Try it"},{"location":"advanced/websockets/#using-depends-and-others","text":"In WebSocket endpoints you can import from fastapi and use: Depends Security Cookie Header Path Query They work the same way as for other FastAPI endpoints/ path operations : from typing import Union from fastapi import Cookie , Depends , FastAPI , Query , WebSocket , status from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label> <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label> <button onclick=\"connect(event)\">Connect</button> <hr> <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = null; function connect(event) { var itemId = document.getElementById(\"itemId\") var token = document.getElementById(\"token\") ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; event.preventDefault() } function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) async def get_cookie_or_token ( websocket : WebSocket , session : Union [ str , None ] = Cookie ( default = None ), token : Union [ str , None ] = Query ( default = None ), ): if session is None and token is None : await websocket . close ( code = status . WS_1008_POLICY_VIOLATION ) return session or token @app . websocket ( \"/items/ {item_id} /ws\" ) async def websocket_endpoint ( websocket : WebSocket , item_id : str , q : Union [ int , None ] = None , cookie_or_token : str = Depends ( get_cookie_or_token ), ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Session cookie or query token value is: { cookie_or_token } \" ) if q is not None : await websocket . send_text ( f \"Query parameter q is: { q } \" ) await websocket . send_text ( f \"Message text was: { data } , for item ID: { item_id } \" ) Info In a WebSocket it doesn't really make sense to raise an HTTPException . So it's better to close the WebSocket connection directly. You can use a closing code from the valid codes defined in the specification . In the future, there will be a WebSocketException that you will be able to raise from anywhere, and add exception handlers for it. It depends on the PR #527 in Starlette.","title":"Using Depends and others"},{"location":"advanced/websockets/#try-the-websockets-with-dependencies","text":"If your file is named main.py , run your application with: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Open your browser at http://127.0.0.1:8000 . There you can set: The \"Item ID\", used in the path. The \"Token\" used as a query parameter. Tip Notice that the query token will be handled by a dependency. With that you can connect the WebSocket and then send and receive messages:","title":"Try the WebSockets with dependencies"},{"location":"advanced/websockets/#handling-disconnections-and-multiple-clients","text":"When a WebSocket connection is closed, the await websocket.receive_text() will raise a WebSocketDisconnect exception, which you can then catch and handle like in this example. from typing import List from fastapi import FastAPI , WebSocket , WebSocketDisconnect from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <h2>Your ID: <span id=\"ws-id\"></span></h2> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var client_id = Date.now() document.querySelector(\"#ws-id\").textContent = client_id; var ws = new WebSocket(`ws://localhost:8000/ws/$ {client_id} `); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" class ConnectionManager : def __init__ ( self ): self . active_connections : List [ WebSocket ] = [] async def connect ( self , websocket : WebSocket ): await websocket . accept () self . active_connections . append ( websocket ) def disconnect ( self , websocket : WebSocket ): self . active_connections . remove ( websocket ) async def send_personal_message ( self , message : str , websocket : WebSocket ): await websocket . send_text ( message ) async def broadcast ( self , message : str ): for connection in self . active_connections : await connection . send_text ( message ) manager = ConnectionManager () @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws/ {client_id} \" ) async def websocket_endpoint ( websocket : WebSocket , client_id : int ): await manager . connect ( websocket ) try : while True : data = await websocket . receive_text () await manager . send_personal_message ( f \"You wrote: { data } \" , websocket ) await manager . broadcast ( f \"Client # { client_id } says: { data } \" ) except WebSocketDisconnect : manager . disconnect ( websocket ) await manager . broadcast ( f \"Client # { client_id } left the chat\" ) To try it out: Open the app with several browser tabs. Write messages from them. Then close one of the tabs. That will raise the WebSocketDisconnect exception, and all the other clients will receive a message like: Client #1596980209979 left the chat Tip The app above is a minimal and simple example to demonstrate how to handle and broadcast messages to several WebSocket connections. But have in mind that, as everything is handled in memory, in a single list, it will only work while the process is running, and will only work with a single process. If you need something easy to integrate with FastAPI but that is more robust, supported by Redis, PostgreSQL or others, check encode/broadcaster .","title":"Handling disconnections and multiple clients"},{"location":"advanced/websockets/#more-info","text":"To learn more about the options, check Starlette's documentation for: The WebSocket class . Class-based WebSocket handling .","title":"More info"},{"location":"advanced/wsgi/","text":"Including WSGI - Flask, Django, others \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can mount WSGI applications as you saw with Sub Applications - Mounts , Behind a Proxy . For that, you can use the WSGIMiddleware and use it to wrap your WSGI application, for example, Flask, Django, etc. Using WSGIMiddleware \u00b6 You need to import WSGIMiddleware . Then wrap the WSGI (e.g. Flask) app with the middleware. And then mount that under a path. from fastapi import FastAPI from fastapi.middleware.wsgi import WSGIMiddleware from flask import Flask , escape , request flask_app = Flask ( __name__ ) @flask_app . route ( \"/\" ) def flask_main (): name = request . args . get ( \"name\" , \"World\" ) return f \"Hello, { escape ( name ) } from Flask!\" app = FastAPI () @app . get ( \"/v2\" ) def read_main (): return { \"message\" : \"Hello World\" } app . mount ( \"/v1\" , WSGIMiddleware ( flask_app )) Check it \u00b6 Now, every request under the path /v1/ will be handled by the Flask application. And the rest will be handled by FastAPI . If you run it with Uvicorn and go to http://localhost:8000/v1/ you will see the response from Flask: Hello, World from Flask! And if you go to http://localhost:8000/v2 you will see the response from FastAPI: { \"message\" : \"Hello World\" }","title":"Including WSGI - Flask, Django, others"},{"location":"advanced/wsgi/#including-wsgi-flask-django-others","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can mount WSGI applications as you saw with Sub Applications - Mounts , Behind a Proxy . For that, you can use the WSGIMiddleware and use it to wrap your WSGI application, for example, Flask, Django, etc.","title":"Including WSGI - Flask, Django, others"},{"location":"advanced/wsgi/#using-wsgimiddleware","text":"You need to import WSGIMiddleware . Then wrap the WSGI (e.g. Flask) app with the middleware. And then mount that under a path. from fastapi import FastAPI from fastapi.middleware.wsgi import WSGIMiddleware from flask import Flask , escape , request flask_app = Flask ( __name__ ) @flask_app . route ( \"/\" ) def flask_main (): name = request . args . get ( \"name\" , \"World\" ) return f \"Hello, { escape ( name ) } from Flask!\" app = FastAPI () @app . get ( \"/v2\" ) def read_main (): return { \"message\" : \"Hello World\" } app . mount ( \"/v1\" , WSGIMiddleware ( flask_app ))","title":"Using WSGIMiddleware"},{"location":"advanced/wsgi/#check-it","text":"Now, every request under the path /v1/ will be handled by the Flask application. And the rest will be handled by FastAPI . If you run it with Uvicorn and go to http://localhost:8000/v1/ you will see the response from Flask: Hello, World from Flask! And if you go to http://localhost:8000/v2 you will see the response from FastAPI: { \"message\" : \"Hello World\" }","title":"Check it"},{"location":"advanced/security/","text":"Advanced Security - Intro \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Additional Features \u00b6 There are some extra features to handle security apart from the ones covered in the Tutorial - User Guide: Security . Tip The next sections are not necessarily \"advanced\" . And it's possible that for your use case, the solution is in one of them. Read the Tutorial first \u00b6 The next sections assume you already read the main Tutorial - User Guide: Security . They are all based on the same concepts, but allow some extra functionalities.","title":"Advanced Security - Intro"},{"location":"advanced/security/#advanced-security-intro","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing .","title":"Advanced Security - Intro"},{"location":"advanced/security/#additional-features","text":"There are some extra features to handle security apart from the ones covered in the Tutorial - User Guide: Security . Tip The next sections are not necessarily \"advanced\" . And it's possible that for your use case, the solution is in one of them.","title":"Additional Features"},{"location":"advanced/security/#read-the-tutorial-first","text":"The next sections assume you already read the main Tutorial - User Guide: Security . They are all based on the same concepts, but allow some extra functionalities.","title":"Read the Tutorial first"},{"location":"advanced/security/http-basic-auth/","text":"HTTP Basic Auth \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . For the simplest cases, you can use HTTP Basic Auth. In HTTP Basic Auth, the application expects a header that contains a username and a password. If it doesn't receive it, it returns an HTTP 401 \"Unauthorized\" error. And returns a header WWW-Authenticate with a value of Basic , and an optional realm parameter. That tells the browser to show the integrated prompt for a username and password. Then, when you type that username and password, the browser sends them in the header automatically. Simple HTTP Basic Auth \u00b6 Import HTTPBasic and HTTPBasicCredentials . Create a \" security scheme\" using HTTPBasic . Use that security with a dependency in your path operation . It returns an object of type HTTPBasicCredentials : It contains the username and password sent. from fastapi import Depends , FastAPI from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () @app . get ( \"/users/me\" ) def read_current_user ( credentials : HTTPBasicCredentials = Depends ( security )): return { \"username\" : credentials . username , \"password\" : credentials . password } When you try to open the URL for the first time (or click the \"Execute\" button in the docs) the browser will ask you for your username and password: Check the username \u00b6 Here's a more complete example. Use a dependency to check if the username and password are correct. For this, use the Python standard module secrets to check the username and password: import secrets from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () def get_current_username ( credentials : HTTPBasicCredentials = Depends ( security )): correct_username = secrets . compare_digest ( credentials . username , \"stanleyjobson\" ) correct_password = secrets . compare_digest ( credentials . password , \"swordfish\" ) if not ( correct_username and correct_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect email or password\" , headers = { \"WWW-Authenticate\" : \"Basic\" }, ) return credentials . username @app . get ( \"/users/me\" ) def read_current_user ( username : str = Depends ( get_current_username )): return { \"username\" : username } This will ensure that credentials.username is \"stanleyjobson\" , and that credentials.password is \"swordfish\" . This would be similar to: if not ( credentials . username == \"stanleyjobson\" ) or not ( credentials . password == \"swordfish\" ): # Return some error ... But by using the secrets.compare_digest() it will be secure against a type of attacks called \"timing attacks\". Timing Attacks \u00b6 But what's a \"timing attack\"? Let's imagine some attackers are trying to guess the username and password. And they send a request with a username johndoe and a password love123 . Then the Python code in your application would be equivalent to something like: if \"johndoe\" == \"stanleyjobson\" and \"love123\" == \"swordfish\" : ... But right at the moment Python compares the first j in johndoe to the first s in stanleyjobson , it will return False , because it already knows that those two strings are not the same, thinking that \"there's no need to waste more computation comparing the rest of the letters\". And your application will say \"incorrect user or password\". But then the attackers try with username stanleyjobsox and password love123 . And your application code does something like: if \"stanleyjobsox\" == \"stanleyjobson\" and \"love123\" == \"swordfish\" : ... Python will have to compare the whole stanleyjobso in both stanleyjobsox and stanleyjobson before realizing that both strings are not the same. So it will take some extra microseconds to reply back \"incorrect user or password\". The time to answer helps the attackers \u00b6 At that point, by noticing that the server took some microseconds longer to send the \"incorrect user or password\" response, the attackers will know that they got something right, some of the initial letters were right. And then they can try again knowing that it's probably something more similar to stanleyjobsox than to johndoe . A \"professional\" attack \u00b6 Of course, the attackers would not try all this by hand, they would write a program to do it, possibly with thousands or millions of tests per second. And would get just one extra correct letter at a time. But doing that, in some minutes or hours the attackers would have guessed the correct username and password, with the \"help\" of our application, just using the time taken to answer. Fix it with secrets.compare_digest() \u00b6 But in our code we are actually using secrets.compare_digest() . In short, it will take the same time to compare stanleyjobsox to stanleyjobson than it takes to compare johndoe to stanleyjobson . And the same for the password. That way, using secrets.compare_digest() in your application code, it will be safe against this whole range of security attacks. Return the error \u00b6 After detecting that the credentials are incorrect, return an HTTPException with a status code 401 (the same returned when no credentials are provided) and add the header WWW-Authenticate to make the browser show the login prompt again: import secrets from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () def get_current_username ( credentials : HTTPBasicCredentials = Depends ( security )): correct_username = secrets . compare_digest ( credentials . username , \"stanleyjobson\" ) correct_password = secrets . compare_digest ( credentials . password , \"swordfish\" ) if not ( correct_username and correct_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect email or password\" , headers = { \"WWW-Authenticate\" : \"Basic\" }, ) return credentials . username @app . get ( \"/users/me\" ) def read_current_user ( username : str = Depends ( get_current_username )): return { \"username\" : username }","title":"HTTP Basic Auth"},{"location":"advanced/security/http-basic-auth/#http-basic-auth","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . For the simplest cases, you can use HTTP Basic Auth. In HTTP Basic Auth, the application expects a header that contains a username and a password. If it doesn't receive it, it returns an HTTP 401 \"Unauthorized\" error. And returns a header WWW-Authenticate with a value of Basic , and an optional realm parameter. That tells the browser to show the integrated prompt for a username and password. Then, when you type that username and password, the browser sends them in the header automatically.","title":"HTTP Basic Auth"},{"location":"advanced/security/http-basic-auth/#simple-http-basic-auth","text":"Import HTTPBasic and HTTPBasicCredentials . Create a \" security scheme\" using HTTPBasic . Use that security with a dependency in your path operation . It returns an object of type HTTPBasicCredentials : It contains the username and password sent. from fastapi import Depends , FastAPI from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () @app . get ( \"/users/me\" ) def read_current_user ( credentials : HTTPBasicCredentials = Depends ( security )): return { \"username\" : credentials . username , \"password\" : credentials . password } When you try to open the URL for the first time (or click the \"Execute\" button in the docs) the browser will ask you for your username and password:","title":"Simple HTTP Basic Auth"},{"location":"advanced/security/http-basic-auth/#check-the-username","text":"Here's a more complete example. Use a dependency to check if the username and password are correct. For this, use the Python standard module secrets to check the username and password: import secrets from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () def get_current_username ( credentials : HTTPBasicCredentials = Depends ( security )): correct_username = secrets . compare_digest ( credentials . username , \"stanleyjobson\" ) correct_password = secrets . compare_digest ( credentials . password , \"swordfish\" ) if not ( correct_username and correct_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect email or password\" , headers = { \"WWW-Authenticate\" : \"Basic\" }, ) return credentials . username @app . get ( \"/users/me\" ) def read_current_user ( username : str = Depends ( get_current_username )): return { \"username\" : username } This will ensure that credentials.username is \"stanleyjobson\" , and that credentials.password is \"swordfish\" . This would be similar to: if not ( credentials . username == \"stanleyjobson\" ) or not ( credentials . password == \"swordfish\" ): # Return some error ... But by using the secrets.compare_digest() it will be secure against a type of attacks called \"timing attacks\".","title":"Check the username"},{"location":"advanced/security/http-basic-auth/#timing-attacks","text":"But what's a \"timing attack\"? Let's imagine some attackers are trying to guess the username and password. And they send a request with a username johndoe and a password love123 . Then the Python code in your application would be equivalent to something like: if \"johndoe\" == \"stanleyjobson\" and \"love123\" == \"swordfish\" : ... But right at the moment Python compares the first j in johndoe to the first s in stanleyjobson , it will return False , because it already knows that those two strings are not the same, thinking that \"there's no need to waste more computation comparing the rest of the letters\". And your application will say \"incorrect user or password\". But then the attackers try with username stanleyjobsox and password love123 . And your application code does something like: if \"stanleyjobsox\" == \"stanleyjobson\" and \"love123\" == \"swordfish\" : ... Python will have to compare the whole stanleyjobso in both stanleyjobsox and stanleyjobson before realizing that both strings are not the same. So it will take some extra microseconds to reply back \"incorrect user or password\".","title":"Timing Attacks"},{"location":"advanced/security/http-basic-auth/#the-time-to-answer-helps-the-attackers","text":"At that point, by noticing that the server took some microseconds longer to send the \"incorrect user or password\" response, the attackers will know that they got something right, some of the initial letters were right. And then they can try again knowing that it's probably something more similar to stanleyjobsox than to johndoe .","title":"The time to answer helps the attackers"},{"location":"advanced/security/http-basic-auth/#a-professional-attack","text":"Of course, the attackers would not try all this by hand, they would write a program to do it, possibly with thousands or millions of tests per second. And would get just one extra correct letter at a time. But doing that, in some minutes or hours the attackers would have guessed the correct username and password, with the \"help\" of our application, just using the time taken to answer.","title":"A \"professional\" attack"},{"location":"advanced/security/http-basic-auth/#fix-it-with-secretscompare_digest","text":"But in our code we are actually using secrets.compare_digest() . In short, it will take the same time to compare stanleyjobsox to stanleyjobson than it takes to compare johndoe to stanleyjobson . And the same for the password. That way, using secrets.compare_digest() in your application code, it will be safe against this whole range of security attacks.","title":"Fix it with secrets.compare_digest()"},{"location":"advanced/security/http-basic-auth/#return-the-error","text":"After detecting that the credentials are incorrect, return an HTTPException with a status code 401 (the same returned when no credentials are provided) and add the header WWW-Authenticate to make the browser show the login prompt again: import secrets from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () def get_current_username ( credentials : HTTPBasicCredentials = Depends ( security )): correct_username = secrets . compare_digest ( credentials . username , \"stanleyjobson\" ) correct_password = secrets . compare_digest ( credentials . password , \"swordfish\" ) if not ( correct_username and correct_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect email or password\" , headers = { \"WWW-Authenticate\" : \"Basic\" }, ) return credentials . username @app . get ( \"/users/me\" ) def read_current_user ( username : str = Depends ( get_current_username )): return { \"username\" : username }","title":"Return the error"},{"location":"advanced/security/oauth2-scopes/","text":"OAuth2 scopes \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use OAuth2 scopes directly with FastAPI , they are integrated to work seamlessly. This would allow you to have a more fine-grained permission system, following the OAuth2 standard, integrated into your OpenAPI application (and the API docs). OAuth2 with scopes is the mechanism used by many big authentication providers, like Facebook, Google, GitHub, Microsoft, Twitter, etc. They use it to provide specific permissions to users and applications. Every time you \"log in with\" Facebook, Google, GitHub, Microsoft, Twitter, that application is using OAuth2 with scopes. In this section you will see how to manage authentication and authorization with the same OAuth2 with scopes in your FastAPI application. Warning This is a more or less advanced section. If you are just starting, you can skip it. You don't necessarily need OAuth2 scopes, and you can handle authentication and authorization however you want. But OAuth2 with scopes can be nicely integrated into your API (with OpenAPI) and your API docs. Nevertheless, you still enforce those scopes, or any other security/authorization requirement, however you need, in your code. In many cases, OAuth2 with scopes can be an overkill. But if you know you need it, or you are curious, keep reading. OAuth2 scopes and OpenAPI \u00b6 The OAuth2 specification defines \"scopes\" as a list of strings separated by spaces. The content of each of these strings can have any format, but should not contain spaces. These scopes represent \"permissions\". In OpenAPI (e.g. the API docs), you can define \"security schemes\". When one of these security schemes uses OAuth2, you can also declare and use scopes. Each \"scope\" is just a string (without spaces). They are normally used to declare specific security permissions, for example: users:read or users:write are common examples. instagram_basic is used by Facebook / Instagram. https://www.googleapis.com/auth/drive is used by Google. Info In OAuth2 a \"scope\" is just a string that declares a specific permission required. It doesn't matter if it has other characters like : or if it is a URL. Those details are implementation specific. For OAuth2 they are just strings. Global view \u00b6 First, let's quickly see the parts that change from the examples in the main Tutorial - User Guide for OAuth2 with Password (and hashing), Bearer with JWT tokens . Now using OAuth2 scopes: from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Now let's review those changes step by step. OAuth2 Security scheme \u00b6 The first change is that now we are declaring the OAuth2 security scheme with two available scopes, me and items . The scopes parameter receives a dict with each scope as a key and the description as the value: from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Because we are now declaring those scopes, they will show up in the API docs when you log-in/authorize. And you will be able to select which scopes you want to give access to: me and items . This is the same mechanism used when you give permissions while logging in with Facebook, Google, GitHub, etc: JWT token with scopes \u00b6 Now, modify the token path operation to return the scopes requested. We are still using the same OAuth2PasswordRequestForm . It includes a property scopes with a list of str , with each scope it received in the request. And we return the scopes as part of the JWT token. Danger For simplicity, here we are just adding the scopes received directly to the token. But in your application, for security, you should make sure you only add the scopes that the user is actually able to have, or the ones you have predefined. from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Declare scopes in path operations and dependencies \u00b6 Now we declare that the path operation for /users/me/items/ requires the scope items . For this, we import and use Security from fastapi . You can use Security to declare dependencies (just like Depends ), but Security also receives a parameter scopes with a list of scopes (strings). In this case, we pass a dependency function get_current_active_user to Security (the same way we would do with Depends ). But we also pass a list of scopes, in this case with just one scope: items (it could have more). And the dependency function get_current_active_user can also declare sub-dependencies, not only with Depends but also with Security . Declaring its own sub-dependency function ( get_current_user ), and more scope requirements. In this case, it requires the scope me (it could require more than one scope). Note You don't necessarily need to add different scopes in different places. We are doing it here to demonstrate how FastAPI handles scopes declared at different levels. from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Technical Details Security is actually a subclass of Depends , and it has just one extra parameter that we'll see later. But by using Security instead of Depends , FastAPI will know that it can declare security scopes, use them internally, and document the API with OpenAPI. But when you import Query , Path , Depends , Security and others from fastapi , those are actually functions that return special classes. Use SecurityScopes \u00b6 Now update the dependency get_current_user . This is the one used by the dependencies above. Here's were we are using the same OAuth2 scheme we created before, declaring it as a dependency: oauth2_scheme . Because this dependency function doesn't have any scope requirements itself, we can use Depends with oauth2_scheme , we don't have to use Security when we don't need to specify security scopes. We also declare a special parameter of type SecurityScopes , imported from fastapi.security . This SecurityScopes class is similar to Request ( Request was used to get the request object directly). from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Use the scopes \u00b6 The parameter security_scopes will be of type SecurityScopes . It will have a property scopes with a list containing all the scopes required by itself and all the dependencies that use this as a sub-dependency. That means, all the \"dependants\"... this might sound confusing, it is explained again later below. The security_scopes object (of class SecurityScopes ) also provides a scope_str attribute with a single string, containing those scopes separated by spaces (we are going to use it). We create an HTTPException that we can re-use ( raise ) later at several points. In this exception, we include the scopes required (if any) as a string separated by spaces (using scope_str ). We put that string containing the scopes in the WWW-Authenticate header (this is part of the spec). from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Verify the username and data shape \u00b6 We verify that we get a username , and extract the scopes. And then we validate that data with the Pydantic model (catching the ValidationError exception), and if we get an error reading the JWT token or validating the data with Pydantic, we raise the HTTPException we created before. For that, we update the Pydantic model TokenData with a new property scopes . By validating the data with Pydantic we can make sure that we have, for example, exactly a list of str with the scopes and a str with the username . Instead of, for example, a dict , or something else, as it could break the application at some point later, making it a security risk. We also verify that we have a user with that username, and if not, we raise that same exception we created before. from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Verify the scopes \u00b6 We now verify that all the scopes required, by this dependency and all the dependants (including path operations ), are included in the scopes provided in the token received, otherwise raise an HTTPException . For this, we use security_scopes.scopes , that contains a list with all these scopes as str . from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Dependency tree and scopes \u00b6 Let's review again this dependency tree and the scopes. As the get_current_active_user dependency has as a sub-dependency on get_current_user , the scope \"me\" declared at get_current_active_user will be included in the list of required scopes in the security_scopes.scopes passed to get_current_user . The path operation itself also declares a scope, \"items\" , so this will also be in the list of security_scopes.scopes passed to get_current_user . Here's how the hierarchy of dependencies and scopes looks like: The path operation read_own_items has: Required scopes [\"items\"] with the dependency: get_current_active_user : The dependency function get_current_active_user has: Required scopes [\"me\"] with the dependency: get_current_user : The dependency function get_current_user has: No scopes required by itself. A dependency using oauth2_scheme . A security_scopes parameter of type SecurityScopes : This security_scopes parameter has a property scopes with a list containing all these scopes declared above, so: security_scopes.scopes will contain [\"me\", \"items\"] for the path operation read_own_items . security_scopes.scopes will contain [\"me\"] for the path operation read_users_me , because it is declared in the dependency get_current_active_user . security_scopes.scopes will contain [] (nothing) for the path operation read_system_status , because it didn't declare any Security with scopes , and its dependency, get_current_user , doesn't declare any scope either. Tip The important and \"magic\" thing here is that get_current_user will have a different list of scopes to check for each path operation . All depending on the scopes declared in each path operation and each dependency in the dependency tree for that specific path operation . More details about SecurityScopes \u00b6 You can use SecurityScopes at any point, and in multiple places, it doesn't have to be at the \"root\" dependency. It will always have the security scopes declared in the current Security dependencies and all the dependants for that specific path operation and that specific dependency tree. Because the SecurityScopes will have all the scopes declared by dependants, you can use it to verify that a token has the required scopes in a central dependency function, and then declare different scope requirements in different path operations . They will be checked independently for each path operation . Check it \u00b6 If you open the API docs, you can authenticate and specify which scopes you want to authorize. If you don't select any scope, you will be \"authenticated\", but when you try to access /users/me/ or /users/me/items/ you will get an error saying that you don't have enough permissions. You will still be able to access /status/ . And if you select the scope me but not the scope items , you will be able to access /users/me/ but not /users/me/items/ . That's what would happen to a third party application that tried to access one of these path operations with a token provided by a user, depending on how many permissions the user gave the application. About third party integrations \u00b6 In this example we are using the OAuth2 \"password\" flow. This is appropriate when we are logging in to our own application, probably with our own frontend. Because we can trust it to receive the username and password , as we control it. But if you are building an OAuth2 application that others would connect to (i.e., if you are building an authentication provider equivalent to Facebook, Google, GitHub, etc.) you should use one of the other flows. The most common is the implicit flow. The most secure is the code flow, but is more complex to implement as it requires more steps. As it is more complex, many providers end up suggesting the implicit flow. Note It's common that each authentication provider names their flows in a different way, to make it part of their brand. But in the end, they are implementing the same OAuth2 standard. FastAPI includes utilities for all these OAuth2 authentication flows in fastapi.security.oauth2 . Security in decorator dependencies \u00b6 The same way you can define a list of Depends in the decorator's dependencies parameter (as explained in Dependencies in path operation decorators ), you could also use Security with scopes there.","title":"OAuth2 scopes"},{"location":"advanced/security/oauth2-scopes/#oauth2-scopes","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can use OAuth2 scopes directly with FastAPI , they are integrated to work seamlessly. This would allow you to have a more fine-grained permission system, following the OAuth2 standard, integrated into your OpenAPI application (and the API docs). OAuth2 with scopes is the mechanism used by many big authentication providers, like Facebook, Google, GitHub, Microsoft, Twitter, etc. They use it to provide specific permissions to users and applications. Every time you \"log in with\" Facebook, Google, GitHub, Microsoft, Twitter, that application is using OAuth2 with scopes. In this section you will see how to manage authentication and authorization with the same OAuth2 with scopes in your FastAPI application. Warning This is a more or less advanced section. If you are just starting, you can skip it. You don't necessarily need OAuth2 scopes, and you can handle authentication and authorization however you want. But OAuth2 with scopes can be nicely integrated into your API (with OpenAPI) and your API docs. Nevertheless, you still enforce those scopes, or any other security/authorization requirement, however you need, in your code. In many cases, OAuth2 with scopes can be an overkill. But if you know you need it, or you are curious, keep reading.","title":"OAuth2 scopes"},{"location":"advanced/security/oauth2-scopes/#oauth2-scopes-and-openapi","text":"The OAuth2 specification defines \"scopes\" as a list of strings separated by spaces. The content of each of these strings can have any format, but should not contain spaces. These scopes represent \"permissions\". In OpenAPI (e.g. the API docs), you can define \"security schemes\". When one of these security schemes uses OAuth2, you can also declare and use scopes. Each \"scope\" is just a string (without spaces). They are normally used to declare specific security permissions, for example: users:read or users:write are common examples. instagram_basic is used by Facebook / Instagram. https://www.googleapis.com/auth/drive is used by Google. Info In OAuth2 a \"scope\" is just a string that declares a specific permission required. It doesn't matter if it has other characters like : or if it is a URL. Those details are implementation specific. For OAuth2 they are just strings.","title":"OAuth2 scopes and OpenAPI"},{"location":"advanced/security/oauth2-scopes/#global-view","text":"First, let's quickly see the parts that change from the examples in the main Tutorial - User Guide for OAuth2 with Password (and hashing), Bearer with JWT tokens . Now using OAuth2 scopes: from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Now let's review those changes step by step.","title":"Global view"},{"location":"advanced/security/oauth2-scopes/#oauth2-security-scheme","text":"The first change is that now we are declaring the OAuth2 security scheme with two available scopes, me and items . The scopes parameter receives a dict with each scope as a key and the description as the value: from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Because we are now declaring those scopes, they will show up in the API docs when you log-in/authorize. And you will be able to select which scopes you want to give access to: me and items . This is the same mechanism used when you give permissions while logging in with Facebook, Google, GitHub, etc:","title":"OAuth2 Security scheme"},{"location":"advanced/security/oauth2-scopes/#jwt-token-with-scopes","text":"Now, modify the token path operation to return the scopes requested. We are still using the same OAuth2PasswordRequestForm . It includes a property scopes with a list of str , with each scope it received in the request. And we return the scopes as part of the JWT token. Danger For simplicity, here we are just adding the scopes received directly to the token. But in your application, for security, you should make sure you only add the scopes that the user is actually able to have, or the ones you have predefined. from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"JWT token with scopes"},{"location":"advanced/security/oauth2-scopes/#declare-scopes-in-path-operations-and-dependencies","text":"Now we declare that the path operation for /users/me/items/ requires the scope items . For this, we import and use Security from fastapi . You can use Security to declare dependencies (just like Depends ), but Security also receives a parameter scopes with a list of scopes (strings). In this case, we pass a dependency function get_current_active_user to Security (the same way we would do with Depends ). But we also pass a list of scopes, in this case with just one scope: items (it could have more). And the dependency function get_current_active_user can also declare sub-dependencies, not only with Depends but also with Security . Declaring its own sub-dependency function ( get_current_user ), and more scope requirements. In this case, it requires the scope me (it could require more than one scope). Note You don't necessarily need to add different scopes in different places. We are doing it here to demonstrate how FastAPI handles scopes declared at different levels. from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } Technical Details Security is actually a subclass of Depends , and it has just one extra parameter that we'll see later. But by using Security instead of Depends , FastAPI will know that it can declare security scopes, use them internally, and document the API with OpenAPI. But when you import Query , Path , Depends , Security and others from fastapi , those are actually functions that return special classes.","title":"Declare scopes in path operations and dependencies"},{"location":"advanced/security/oauth2-scopes/#use-securityscopes","text":"Now update the dependency get_current_user . This is the one used by the dependencies above. Here's were we are using the same OAuth2 scheme we created before, declaring it as a dependency: oauth2_scheme . Because this dependency function doesn't have any scope requirements itself, we can use Depends with oauth2_scheme , we don't have to use Security when we don't need to specify security scopes. We also declare a special parameter of type SecurityScopes , imported from fastapi.security . This SecurityScopes class is similar to Request ( Request was used to get the request object directly). from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"Use SecurityScopes"},{"location":"advanced/security/oauth2-scopes/#use-the-scopes","text":"The parameter security_scopes will be of type SecurityScopes . It will have a property scopes with a list containing all the scopes required by itself and all the dependencies that use this as a sub-dependency. That means, all the \"dependants\"... this might sound confusing, it is explained again later below. The security_scopes object (of class SecurityScopes ) also provides a scope_str attribute with a single string, containing those scopes separated by spaces (we are going to use it). We create an HTTPException that we can re-use ( raise ) later at several points. In this exception, we include the scopes required (if any) as a string separated by spaces (using scope_str ). We put that string containing the scopes in the WWW-Authenticate header (this is part of the spec). from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"Use the scopes"},{"location":"advanced/security/oauth2-scopes/#verify-the-username-and-data-shape","text":"We verify that we get a username , and extract the scopes. And then we validate that data with the Pydantic model (catching the ValidationError exception), and if we get an error reading the JWT token or validating the data with Pydantic, we raise the HTTPException we created before. For that, we update the Pydantic model TokenData with a new property scopes . By validating the data with Pydantic we can make sure that we have, for example, exactly a list of str with the scopes and a str with the username . Instead of, for example, a dict , or something else, as it could break the application at some point later, making it a security risk. We also verify that we have a user with that username, and if not, we raise that same exception we created before. from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"Verify the username and data shape"},{"location":"advanced/security/oauth2-scopes/#verify-the-scopes","text":"We now verify that all the scopes required, by this dependency and all the dependants (including path operations ), are included in the scopes provided in the token received, otherwise raise an HTTPException . For this, we use security_scopes.scopes , that contains a list with all these scopes as str . from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = f \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"Verify the scopes"},{"location":"advanced/security/oauth2-scopes/#dependency-tree-and-scopes","text":"Let's review again this dependency tree and the scopes. As the get_current_active_user dependency has as a sub-dependency on get_current_user , the scope \"me\" declared at get_current_active_user will be included in the list of required scopes in the security_scopes.scopes passed to get_current_user . The path operation itself also declares a scope, \"items\" , so this will also be in the list of security_scopes.scopes passed to get_current_user . Here's how the hierarchy of dependencies and scopes looks like: The path operation read_own_items has: Required scopes [\"items\"] with the dependency: get_current_active_user : The dependency function get_current_active_user has: Required scopes [\"me\"] with the dependency: get_current_user : The dependency function get_current_user has: No scopes required by itself. A dependency using oauth2_scheme . A security_scopes parameter of type SecurityScopes : This security_scopes parameter has a property scopes with a list containing all these scopes declared above, so: security_scopes.scopes will contain [\"me\", \"items\"] for the path operation read_own_items . security_scopes.scopes will contain [\"me\"] for the path operation read_users_me , because it is declared in the dependency get_current_active_user . security_scopes.scopes will contain [] (nothing) for the path operation read_system_status , because it didn't declare any Security with scopes , and its dependency, get_current_user , doesn't declare any scope either. Tip The important and \"magic\" thing here is that get_current_user will have a different list of scopes to check for each path operation . All depending on the scopes declared in each path operation and each dependency in the dependency tree for that specific path operation .","title":"Dependency tree and scopes"},{"location":"advanced/security/oauth2-scopes/#more-details-about-securityscopes","text":"You can use SecurityScopes at any point, and in multiple places, it doesn't have to be at the \"root\" dependency. It will always have the security scopes declared in the current Security dependencies and all the dependants for that specific path operation and that specific dependency tree. Because the SecurityScopes will have all the scopes declared by dependants, you can use it to verify that a token has the required scopes in a central dependency function, and then declare different scope requirements in different path operations . They will be checked independently for each path operation .","title":"More details about SecurityScopes"},{"location":"advanced/security/oauth2-scopes/#check-it","text":"If you open the API docs, you can authenticate and specify which scopes you want to authorize. If you don't select any scope, you will be \"authenticated\", but when you try to access /users/me/ or /users/me/items/ you will get an error saying that you don't have enough permissions. You will still be able to access /status/ . And if you select the scope me but not the scope items , you will be able to access /users/me/ but not /users/me/items/ . That's what would happen to a third party application that tried to access one of these path operations with a token provided by a user, depending on how many permissions the user gave the application.","title":"Check it"},{"location":"advanced/security/oauth2-scopes/#about-third-party-integrations","text":"In this example we are using the OAuth2 \"password\" flow. This is appropriate when we are logging in to our own application, probably with our own frontend. Because we can trust it to receive the username and password , as we control it. But if you are building an OAuth2 application that others would connect to (i.e., if you are building an authentication provider equivalent to Facebook, Google, GitHub, etc.) you should use one of the other flows. The most common is the implicit flow. The most secure is the code flow, but is more complex to implement as it requires more steps. As it is more complex, many providers end up suggesting the implicit flow. Note It's common that each authentication provider names their flows in a different way, to make it part of their brand. But in the end, they are implementing the same OAuth2 standard. FastAPI includes utilities for all these OAuth2 authentication flows in fastapi.security.oauth2 .","title":"About third party integrations"},{"location":"advanced/security/oauth2-scopes/#security-in-decorator-dependencies","text":"The same way you can define a list of Depends in the decorator's dependencies parameter (as explained in Dependencies in path operation decorators ), you could also use Security with scopes there.","title":"Security in decorator dependencies"},{"location":"deployment/","text":"Deployment - Intro \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Deploying a FastAPI application is relatively easy. What Does Deployment Mean \u00b6 To deploy an application means to perform the necessary steps to make it available to the users . For a web API , it normally involves putting it in a remote machine , with a server program that provides good performance, stability, etc, so that your users can access the application efficiently and without interruptions or problems. This is in contrast to the development stages, where you are constantly changing the code, breaking it and fixing it, stopping and restarting the development server, etc. Deployment Strategies \u00b6 There are several ways to do it depending on your specific use case and the tools that you use. You could deploy a server yourself using a combination of tools, you could use a cloud service that does part of the work for you, or other possible options. I will show you some of the main concepts you should probably have in mind when deploying a FastAPI application (although most of it applies to any other type of web application). You will see more details to have in mind and some of the techniques to do it in the next sections. \u2728","title":"Deployment - Intro"},{"location":"deployment/#deployment-intro","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Deploying a FastAPI application is relatively easy.","title":"Deployment - Intro"},{"location":"deployment/#what-does-deployment-mean","text":"To deploy an application means to perform the necessary steps to make it available to the users . For a web API , it normally involves putting it in a remote machine , with a server program that provides good performance, stability, etc, so that your users can access the application efficiently and without interruptions or problems. This is in contrast to the development stages, where you are constantly changing the code, breaking it and fixing it, stopping and restarting the development server, etc.","title":"What Does Deployment Mean"},{"location":"deployment/#deployment-strategies","text":"There are several ways to do it depending on your specific use case and the tools that you use. You could deploy a server yourself using a combination of tools, you could use a cloud service that does part of the work for you, or other possible options. I will show you some of the main concepts you should probably have in mind when deploying a FastAPI application (although most of it applies to any other type of web application). You will see more details to have in mind and some of the techniques to do it in the next sections. \u2728","title":"Deployment Strategies"},{"location":"deployment/concepts/","text":"Deployments Concepts \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . When deploying a FastAPI application, or actually, any type of web API, there are several concepts that you probably care about, and using them you can find the most appropriate way to deploy your application . Some of the important concepts are: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting We'll see how they would affect deployments . In the end, the ultimate objective is to be able to serve your API clients in a way that is secure , to avoid disruptions , and to use the compute resources (for example remote servers/virtual machines) as efficiently as possible. \ud83d\ude80 I'll tell you a bit more about these concepts here, and that would hopefully give you the intuition you would need to decide how to deploy your API in very different environments, possibly even in future ones that don't exist yet. By considering these concepts, you will be able to evaluate and design the best way to deploy your own APIs . In the next chapters, I'll give you more concrete recipes to deploy FastAPI applications. But for now, let's check these important conceptual ideas . These concepts also apply to any other type of web API. \ud83d\udca1 Security - HTTPS \u00b6 In the previous chapter about HTTPS we learned about how HTTPS provides encryption for your API. We also saw that HTTPS is normally provided by a component external to your application server, a TLS Termination Proxy . And there has to be something in charge of renewing the HTTPS certificates , it could be the same component or it could be something different. Example Tools for HTTPS \u00b6 Some of the tools you could use as a TLS Termination Proxy are: Traefik Automatically handles certificates renewals \u2728 Caddy Automatically handles certificates renewals \u2728 Nginx With an external component like Certbot for certificate renewals HAProxy With an external component like Certbot for certificate renewals Kubernetes with an Ingress Controller like Nginx With an external component like cert-manager for certificate renewals Handled internally by a cloud provider as part of their services (read below \ud83d\udc47) Another option is that you could use a cloud service that does more of the work including setting up HTTPS. It could have some restrictions or charge you more, etc. But in that case, you wouldn't have to set up a TLS Termination Proxy yourself. I'll show you some concrete examples in the next chapters. Then the next concepts to consider are all about the program running your actual API (e.g. Uvicorn). Program and Process \u00b6 We will talk a lot about the running \" process \", so it's useful to have clarity about what it means, and what's the difference with the word \" program \". What is a Program \u00b6 The word program is commonly used to describe many things: The code that you write, the Python files . The file that can be executed by the operating system, for example: python , python.exe or uvicorn . A particular program while it is running on the operating system, using the CPU, and storing things on memory. This is also called a process . What is a Process \u00b6 The word process is normally used in a more specific way, only referring to the thing that is running in the operating system (like in the last point above): A particular program while it is running on the operating system. This doesn't refer to the file, nor to the code, it refers specifically to the thing that is being executed and managed by the operating system. Any program, any code, can only do things when it is being executed . So, when there's a process running . The process can be terminated (or \"killed\") by you, or by the operating system. At that point, it stops running/being executed, and it can no longer do things . Each application that you have running on your computer has some process behind it, each running program, each window, etc. And there are normally many processes running at the same time while a computer is on. There can be multiple processes of the same program running at the same time. If you check out the \"task manager\" or \"system monitor\" (or similar tools) in your operating system, you will be able to see many of those processes running. And, for example, you will probably see that there are multiple processes running the same browser program (Firefox, Chrome, Edge, etc). They normally run one process per tab, plus some other extra processes. Now that we know the difference between the terms process and program , let's continue talking about deployments. Running on Startup \u00b6 In most cases, when you create a web API, you want it to be always running , uninterrupted, so that your clients can always access it. This is of course, unless you have a specific reason why you want it to run only in certain situations, but most of the time you want it constantly running and available . In a Remote Server \u00b6 When you set up a remote server (a cloud server, a virtual machine, etc.) the simplest thing you can do is to run Uvicorn (or similar) manually, the same way you do when developing locally. And it will work and will be useful during development . But if your connection to the server is lost, the running process will probably die. And if the server is restarted (for example after updates, or migrations from the cloud provider) you probably won't notice it . And because of that, you won't even know that you have to restart the process manually. So, your API will just stay dead. \ud83d\ude31 Run Automatically on Startup \u00b6 In general, you will probably want the server program (e.g. Uvicorn) to be started automatically on server startup, and without needing any human intervention , to have a process always running with your API (e.g. Uvicorn running your FastAPI app). Separate Program \u00b6 To achieve this, you will normally have a separate program that would make sure your application is run on startup. And in many cases, it would also make sure other components or applications are also run, for example, a database. Example Tools to Run at Startup \u00b6 Some examples of the tools that can do this job are: Docker Kubernetes Docker Compose Docker in Swarm Mode Systemd Supervisor Handled internally by a cloud provider as part of their services Others... I'll give you more concrete examples in the next chapters. Restarts \u00b6 Similar to making sure your application is run on startup, you probably also want to make sure it is restarted after failures. We Make Mistakes \u00b6 We, as humans, make mistakes , all the time. Software almost always has bugs hidden in different places. \ud83d\udc1b And we as developers keep improving the code as we find those bugs and as we implement new features (possibly adding new bugs too \ud83d\ude05). Small Errors Automatically Handled \u00b6 When building web APIs with FastAPI, if there's an error in our code, FastAPI will normally contain it to the single request that triggered the error. \ud83d\udee1 The client will get a 500 Internal Server Error for that request, but the application will continue working for the next requests instead of just crashing completely. Bigger Errors - Crashes \u00b6 Nevertheless, there might be cases where we write some code that crashes the entire application making Uvicorn and Python crash. \ud83d\udca5 And still, you would probably not want the application to stay dead because there was an error in one place, you probably want it to continue running at least for the path operations that are not broken. Restart After Crash \u00b6 But in those cases with really bad errors that crash the running process , you would want an external component that is in charge of restarting the process, at least a couple of times... Tip ...Although if the whole application is just crashing immediately it probably doesn't make sense to keep restarting it forever. But in those cases, you will probably notice it during development, or at least right after deployment. So let's focus on the main cases, where it could crash entirely in some particular cases in the future , and it still makes sense to restart it. You would probably want to have the thing in charge of restarting your application as an external component , because by that point, the same application with Uvicorn and Python already crashed, so there's nothing in the same code of the same app that could do anything about it. Example Tools to Restart Automatically \u00b6 In most cases, the same tool that is used to run the program on startup is also used to handle automatic restarts . For example, this could be handled by: Docker Kubernetes Docker Compose Docker in Swarm Mode Systemd Supervisor Handled internally by a cloud provider as part of their services Others... Replication - Processes and Memory \u00b6 With a FastAPI application, using a server program like Uvicorn, running it once in one process can serve multiple clients concurrently. But in many cases, you will want to run several worker processes at the same time. Multiple Processes - Workers \u00b6 If you have more clients than what a single process can handle (for example if the virtual machine is not too big) and you have multiple cores in the server's CPU, then you could have multiple processes running with the same application at the same time, and distribute all the requests among them. When you run multiple processes of the same API program, they are commonly called workers . Worker Processes and Ports \u00b6 Remember from the docs About HTTPS that only one process can be listening on one combination of port and IP address in a server? This is still true. So, to be able to have multiple processes at the same time, there has to be a single process listening on a port that then transmits the communication to each worker process in some way. Memory per Process \u00b6 Now, when the program loads things in memory, for example, a machine learning model in a variable, or the contents of a large file in a variable, all that consumes a bit of the memory (RAM) of the server. And multiple processes normally don't share any memory . This means that each running process has its own things, variables, and memory. And if you are consuming a large amount of memory in your code, each process will consume an equivalent amount of memory. Server Memory \u00b6 For example, if your code loads a Machine Learning model with 1 GB in size , when you run one process with your API, it will consume at least 1 GB of RAM. And if you start 4 processes (4 workers), each will consume 1 GB of RAM. So in total, your API will consume 4 GB of RAM . And if your remote server or virtual machine only has 3 GB of RAM, trying to load more than 4 GB of RAM will cause problems. \ud83d\udea8 Multiple Processes - An Example \u00b6 In this example, there's a Manager Process that starts and controls two Worker Processes . This Manager Process would probably be the one listening on the port in the IP. And it would transmit all the communication to the worker processes. Those worker processes would be the ones running your application, they would perform the main computations to receive a request and return a response , and they would load anything you put in variables in RAM. And of course, the same machine would probably have other processes running as well, apart from your application. An interesting detail is that the percentage of the CPU used by each process can vary a lot over time, but the memory (RAM) normally stays more or less stable . If you have an API that does a comparable amount of computations every time and you have a lot of clients, then the CPU utilization will probably also be stable (instead of constantly going up and down quickly). Examples of Replication Tools and Strategies \u00b6 There can be several approaches to achieve this, and I'll tell you more about specific strategies in the next chapters, for example when talking about Docker and containers. The main constraint to consider is that there has to be a single component handling the port in the public IP . And then it has to have a way to transmit the communication to the replicated processes/workers . Here are some possible combinations and strategies: Gunicorn managing Uvicorn workers Gunicorn would be the process manager listening on the IP and port , the replication would be by having multiple Uvicorn worker processes Uvicorn managing Uvicorn workers One Uvicorn process manager would listen on the IP and port , and it would start multiple Uvicorn worker processes Kubernetes and other distributed container systems Something in the Kubernetes layer would listen on the IP and port . The replication would be by having multiple containers , each with one Uvicorn process running Cloud services that handle this for your The cloud service will probably handle replication for you . It would possibly let you define a process to run , or a container image to use, in any case, it would most probably be a single Uvicorn process , and the cloud service would be in charge of replicating it. Tip Don't worry if some of these items about containers , Docker, or Kubernetes don't make a lot of sense yet. I'll tell you more about container images, Docker, Kubernetes, etc. in a future chapter: FastAPI in Containers - Docker . Previous Steps Before Starting \u00b6 There are many cases where you want to perform some steps before starting your application. For example, you might want to run database migrations . But in most cases, you will want to perform these steps only once . So, you will want to have a single process to perform those previous steps , before starting the application. And you will have to make sure that it's a single process running those previous steps even if afterwards, you start multiple processes (multiple workers) for the application itself. If those steps were run by multiple processes , they would duplicate the work by running it on parallel , and if the steps were something delicate like a database migration, they could cause conflicts with each other. Of course, there are some cases where there's no problem in running the previous steps multiple times, in that case, it's a lot easier to handle. Tip Also, have in mind that depending on your setup, in some cases you might not even need any previous steps before starting your application. In that case, you wouldn't have to worry about any of this. \ud83e\udd37 Examples of Previous Steps Strategies \u00b6 This will depend heavily on the way you deploy your system , and it would probably be connected to the way you start programs, handling restarts, etc. Here are some possible ideas: An \"Init Container\" in Kubernetes that runs before your app container A bash script that runs the previous steps and then starts your application You would still need a way to start/restart that bash script, detect errors, etc. Tip I'll give you more concrete examples for doing this with containers in a future chapter: FastAPI in Containers - Docker . Resource Utilization \u00b6 Your server(s) is (are) a resource , you can consume or utilize , with your programs, the computation time on the CPUs, and the RAM memory available. How much of the system resources do you want to be consuming/utilizing? It might be easy to think \"not much\", but in reality, you will probably want to consume as much as possible without crashing . If you are paying for 3 servers but you are using only a little bit of their RAM and CPU, you are probably wasting money \ud83d\udcb8, and probably wasting server electric power \ud83c\udf0e, etc. In that case, it could be better to have only 2 servers and use a higher percentage of their resources (CPU, memory, disk, network bandwidth, etc). On the other hand, if you have 2 servers and you are using 100% of their CPU and RAM , at some point one process will ask for more memory, and the server will have to use the disk as \"memory\" (which can be thousands of times slower), or even crash . Or one process might need to do some computation and would have to wait until the CPU is free again. In this case, it would be better to get one extra server and run some processes on it so that they all have enough RAM and CPU time . There's also the chance that for some reason you have a spike of usage of your API. Maybe it went viral, or maybe some other services or bots start using it. And you might want to have extra resources to be safe in those cases. You could put an arbitrary number to target, for example, something between 50% to 90% of resource utilization. The point is that those are probably the main things you will want to measure and use to tweak your deployments. You can use simple tools like htop to see the CPU and RAM used in your server or the amount used by each process. Or you can use more complex monitoring tools, which may be distributed across servers, etc. Recap \u00b6 You have been reading here some of the main concepts that you would probably need to have in mind when deciding how to deploy your application: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting Understanding these ideas and how to apply them should give you the intuition necessary to take any decisions when configuring and tweaking your deployments. \ud83e\udd13 In the next sections, I'll give you more concrete examples of possible strategies you can follow. \ud83d\ude80","title":"Deployments Concepts"},{"location":"deployment/concepts/#deployments-concepts","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . When deploying a FastAPI application, or actually, any type of web API, there are several concepts that you probably care about, and using them you can find the most appropriate way to deploy your application . Some of the important concepts are: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting We'll see how they would affect deployments . In the end, the ultimate objective is to be able to serve your API clients in a way that is secure , to avoid disruptions , and to use the compute resources (for example remote servers/virtual machines) as efficiently as possible. \ud83d\ude80 I'll tell you a bit more about these concepts here, and that would hopefully give you the intuition you would need to decide how to deploy your API in very different environments, possibly even in future ones that don't exist yet. By considering these concepts, you will be able to evaluate and design the best way to deploy your own APIs . In the next chapters, I'll give you more concrete recipes to deploy FastAPI applications. But for now, let's check these important conceptual ideas . These concepts also apply to any other type of web API. \ud83d\udca1","title":"Deployments Concepts"},{"location":"deployment/concepts/#security-https","text":"In the previous chapter about HTTPS we learned about how HTTPS provides encryption for your API. We also saw that HTTPS is normally provided by a component external to your application server, a TLS Termination Proxy . And there has to be something in charge of renewing the HTTPS certificates , it could be the same component or it could be something different.","title":"Security - HTTPS"},{"location":"deployment/concepts/#example-tools-for-https","text":"Some of the tools you could use as a TLS Termination Proxy are: Traefik Automatically handles certificates renewals \u2728 Caddy Automatically handles certificates renewals \u2728 Nginx With an external component like Certbot for certificate renewals HAProxy With an external component like Certbot for certificate renewals Kubernetes with an Ingress Controller like Nginx With an external component like cert-manager for certificate renewals Handled internally by a cloud provider as part of their services (read below \ud83d\udc47) Another option is that you could use a cloud service that does more of the work including setting up HTTPS. It could have some restrictions or charge you more, etc. But in that case, you wouldn't have to set up a TLS Termination Proxy yourself. I'll show you some concrete examples in the next chapters. Then the next concepts to consider are all about the program running your actual API (e.g. Uvicorn).","title":"Example Tools for HTTPS"},{"location":"deployment/concepts/#program-and-process","text":"We will talk a lot about the running \" process \", so it's useful to have clarity about what it means, and what's the difference with the word \" program \".","title":"Program and Process"},{"location":"deployment/concepts/#what-is-a-program","text":"The word program is commonly used to describe many things: The code that you write, the Python files . The file that can be executed by the operating system, for example: python , python.exe or uvicorn . A particular program while it is running on the operating system, using the CPU, and storing things on memory. This is also called a process .","title":"What is a Program"},{"location":"deployment/concepts/#what-is-a-process","text":"The word process is normally used in a more specific way, only referring to the thing that is running in the operating system (like in the last point above): A particular program while it is running on the operating system. This doesn't refer to the file, nor to the code, it refers specifically to the thing that is being executed and managed by the operating system. Any program, any code, can only do things when it is being executed . So, when there's a process running . The process can be terminated (or \"killed\") by you, or by the operating system. At that point, it stops running/being executed, and it can no longer do things . Each application that you have running on your computer has some process behind it, each running program, each window, etc. And there are normally many processes running at the same time while a computer is on. There can be multiple processes of the same program running at the same time. If you check out the \"task manager\" or \"system monitor\" (or similar tools) in your operating system, you will be able to see many of those processes running. And, for example, you will probably see that there are multiple processes running the same browser program (Firefox, Chrome, Edge, etc). They normally run one process per tab, plus some other extra processes. Now that we know the difference between the terms process and program , let's continue talking about deployments.","title":"What is a Process"},{"location":"deployment/concepts/#running-on-startup","text":"In most cases, when you create a web API, you want it to be always running , uninterrupted, so that your clients can always access it. This is of course, unless you have a specific reason why you want it to run only in certain situations, but most of the time you want it constantly running and available .","title":"Running on Startup"},{"location":"deployment/concepts/#in-a-remote-server","text":"When you set up a remote server (a cloud server, a virtual machine, etc.) the simplest thing you can do is to run Uvicorn (or similar) manually, the same way you do when developing locally. And it will work and will be useful during development . But if your connection to the server is lost, the running process will probably die. And if the server is restarted (for example after updates, or migrations from the cloud provider) you probably won't notice it . And because of that, you won't even know that you have to restart the process manually. So, your API will just stay dead. \ud83d\ude31","title":"In a Remote Server"},{"location":"deployment/concepts/#run-automatically-on-startup","text":"In general, you will probably want the server program (e.g. Uvicorn) to be started automatically on server startup, and without needing any human intervention , to have a process always running with your API (e.g. Uvicorn running your FastAPI app).","title":"Run Automatically on Startup"},{"location":"deployment/concepts/#separate-program","text":"To achieve this, you will normally have a separate program that would make sure your application is run on startup. And in many cases, it would also make sure other components or applications are also run, for example, a database.","title":"Separate Program"},{"location":"deployment/concepts/#example-tools-to-run-at-startup","text":"Some examples of the tools that can do this job are: Docker Kubernetes Docker Compose Docker in Swarm Mode Systemd Supervisor Handled internally by a cloud provider as part of their services Others... I'll give you more concrete examples in the next chapters.","title":"Example Tools to Run at Startup"},{"location":"deployment/concepts/#restarts","text":"Similar to making sure your application is run on startup, you probably also want to make sure it is restarted after failures.","title":"Restarts"},{"location":"deployment/concepts/#we-make-mistakes","text":"We, as humans, make mistakes , all the time. Software almost always has bugs hidden in different places. \ud83d\udc1b And we as developers keep improving the code as we find those bugs and as we implement new features (possibly adding new bugs too \ud83d\ude05).","title":"We Make Mistakes"},{"location":"deployment/concepts/#small-errors-automatically-handled","text":"When building web APIs with FastAPI, if there's an error in our code, FastAPI will normally contain it to the single request that triggered the error. \ud83d\udee1 The client will get a 500 Internal Server Error for that request, but the application will continue working for the next requests instead of just crashing completely.","title":"Small Errors Automatically Handled"},{"location":"deployment/concepts/#bigger-errors-crashes","text":"Nevertheless, there might be cases where we write some code that crashes the entire application making Uvicorn and Python crash. \ud83d\udca5 And still, you would probably not want the application to stay dead because there was an error in one place, you probably want it to continue running at least for the path operations that are not broken.","title":"Bigger Errors - Crashes"},{"location":"deployment/concepts/#restart-after-crash","text":"But in those cases with really bad errors that crash the running process , you would want an external component that is in charge of restarting the process, at least a couple of times... Tip ...Although if the whole application is just crashing immediately it probably doesn't make sense to keep restarting it forever. But in those cases, you will probably notice it during development, or at least right after deployment. So let's focus on the main cases, where it could crash entirely in some particular cases in the future , and it still makes sense to restart it. You would probably want to have the thing in charge of restarting your application as an external component , because by that point, the same application with Uvicorn and Python already crashed, so there's nothing in the same code of the same app that could do anything about it.","title":"Restart After Crash"},{"location":"deployment/concepts/#example-tools-to-restart-automatically","text":"In most cases, the same tool that is used to run the program on startup is also used to handle automatic restarts . For example, this could be handled by: Docker Kubernetes Docker Compose Docker in Swarm Mode Systemd Supervisor Handled internally by a cloud provider as part of their services Others...","title":"Example Tools to Restart Automatically"},{"location":"deployment/concepts/#replication-processes-and-memory","text":"With a FastAPI application, using a server program like Uvicorn, running it once in one process can serve multiple clients concurrently. But in many cases, you will want to run several worker processes at the same time.","title":"Replication - Processes and Memory"},{"location":"deployment/concepts/#multiple-processes-workers","text":"If you have more clients than what a single process can handle (for example if the virtual machine is not too big) and you have multiple cores in the server's CPU, then you could have multiple processes running with the same application at the same time, and distribute all the requests among them. When you run multiple processes of the same API program, they are commonly called workers .","title":"Multiple Processes - Workers"},{"location":"deployment/concepts/#worker-processes-and-ports","text":"Remember from the docs About HTTPS that only one process can be listening on one combination of port and IP address in a server? This is still true. So, to be able to have multiple processes at the same time, there has to be a single process listening on a port that then transmits the communication to each worker process in some way.","title":"Worker Processes and Ports"},{"location":"deployment/concepts/#memory-per-process","text":"Now, when the program loads things in memory, for example, a machine learning model in a variable, or the contents of a large file in a variable, all that consumes a bit of the memory (RAM) of the server. And multiple processes normally don't share any memory . This means that each running process has its own things, variables, and memory. And if you are consuming a large amount of memory in your code, each process will consume an equivalent amount of memory.","title":"Memory per Process"},{"location":"deployment/concepts/#server-memory","text":"For example, if your code loads a Machine Learning model with 1 GB in size , when you run one process with your API, it will consume at least 1 GB of RAM. And if you start 4 processes (4 workers), each will consume 1 GB of RAM. So in total, your API will consume 4 GB of RAM . And if your remote server or virtual machine only has 3 GB of RAM, trying to load more than 4 GB of RAM will cause problems. \ud83d\udea8","title":"Server Memory"},{"location":"deployment/concepts/#multiple-processes-an-example","text":"In this example, there's a Manager Process that starts and controls two Worker Processes . This Manager Process would probably be the one listening on the port in the IP. And it would transmit all the communication to the worker processes. Those worker processes would be the ones running your application, they would perform the main computations to receive a request and return a response , and they would load anything you put in variables in RAM. And of course, the same machine would probably have other processes running as well, apart from your application. An interesting detail is that the percentage of the CPU used by each process can vary a lot over time, but the memory (RAM) normally stays more or less stable . If you have an API that does a comparable amount of computations every time and you have a lot of clients, then the CPU utilization will probably also be stable (instead of constantly going up and down quickly).","title":"Multiple Processes - An Example"},{"location":"deployment/concepts/#examples-of-replication-tools-and-strategies","text":"There can be several approaches to achieve this, and I'll tell you more about specific strategies in the next chapters, for example when talking about Docker and containers. The main constraint to consider is that there has to be a single component handling the port in the public IP . And then it has to have a way to transmit the communication to the replicated processes/workers . Here are some possible combinations and strategies: Gunicorn managing Uvicorn workers Gunicorn would be the process manager listening on the IP and port , the replication would be by having multiple Uvicorn worker processes Uvicorn managing Uvicorn workers One Uvicorn process manager would listen on the IP and port , and it would start multiple Uvicorn worker processes Kubernetes and other distributed container systems Something in the Kubernetes layer would listen on the IP and port . The replication would be by having multiple containers , each with one Uvicorn process running Cloud services that handle this for your The cloud service will probably handle replication for you . It would possibly let you define a process to run , or a container image to use, in any case, it would most probably be a single Uvicorn process , and the cloud service would be in charge of replicating it. Tip Don't worry if some of these items about containers , Docker, or Kubernetes don't make a lot of sense yet. I'll tell you more about container images, Docker, Kubernetes, etc. in a future chapter: FastAPI in Containers - Docker .","title":"Examples of Replication Tools and Strategies"},{"location":"deployment/concepts/#previous-steps-before-starting","text":"There are many cases where you want to perform some steps before starting your application. For example, you might want to run database migrations . But in most cases, you will want to perform these steps only once . So, you will want to have a single process to perform those previous steps , before starting the application. And you will have to make sure that it's a single process running those previous steps even if afterwards, you start multiple processes (multiple workers) for the application itself. If those steps were run by multiple processes , they would duplicate the work by running it on parallel , and if the steps were something delicate like a database migration, they could cause conflicts with each other. Of course, there are some cases where there's no problem in running the previous steps multiple times, in that case, it's a lot easier to handle. Tip Also, have in mind that depending on your setup, in some cases you might not even need any previous steps before starting your application. In that case, you wouldn't have to worry about any of this. \ud83e\udd37","title":"Previous Steps Before Starting"},{"location":"deployment/concepts/#examples-of-previous-steps-strategies","text":"This will depend heavily on the way you deploy your system , and it would probably be connected to the way you start programs, handling restarts, etc. Here are some possible ideas: An \"Init Container\" in Kubernetes that runs before your app container A bash script that runs the previous steps and then starts your application You would still need a way to start/restart that bash script, detect errors, etc. Tip I'll give you more concrete examples for doing this with containers in a future chapter: FastAPI in Containers - Docker .","title":"Examples of Previous Steps Strategies"},{"location":"deployment/concepts/#resource-utilization","text":"Your server(s) is (are) a resource , you can consume or utilize , with your programs, the computation time on the CPUs, and the RAM memory available. How much of the system resources do you want to be consuming/utilizing? It might be easy to think \"not much\", but in reality, you will probably want to consume as much as possible without crashing . If you are paying for 3 servers but you are using only a little bit of their RAM and CPU, you are probably wasting money \ud83d\udcb8, and probably wasting server electric power \ud83c\udf0e, etc. In that case, it could be better to have only 2 servers and use a higher percentage of their resources (CPU, memory, disk, network bandwidth, etc). On the other hand, if you have 2 servers and you are using 100% of their CPU and RAM , at some point one process will ask for more memory, and the server will have to use the disk as \"memory\" (which can be thousands of times slower), or even crash . Or one process might need to do some computation and would have to wait until the CPU is free again. In this case, it would be better to get one extra server and run some processes on it so that they all have enough RAM and CPU time . There's also the chance that for some reason you have a spike of usage of your API. Maybe it went viral, or maybe some other services or bots start using it. And you might want to have extra resources to be safe in those cases. You could put an arbitrary number to target, for example, something between 50% to 90% of resource utilization. The point is that those are probably the main things you will want to measure and use to tweak your deployments. You can use simple tools like htop to see the CPU and RAM used in your server or the amount used by each process. Or you can use more complex monitoring tools, which may be distributed across servers, etc.","title":"Resource Utilization"},{"location":"deployment/concepts/#recap","text":"You have been reading here some of the main concepts that you would probably need to have in mind when deciding how to deploy your application: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting Understanding these ideas and how to apply them should give you the intuition necessary to take any decisions when configuring and tweaking your deployments. \ud83e\udd13 In the next sections, I'll give you more concrete examples of possible strategies you can follow. \ud83d\ude80","title":"Recap"},{"location":"deployment/deta/","text":"Deploy FastAPI on Deta \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In this section you will learn how to easily deploy a FastAPI application on Deta using the free plan. \ud83c\udf81 It will take you about 10 minutes . Info Deta is a FastAPI sponsor. \ud83c\udf89 A basic FastAPI app \u00b6 Create a directory for your app, for example, ./fastapideta/ and enter into it. FastAPI code \u00b6 Create a main.py file with: from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int ): return { \"item_id\" : item_id } Requirements \u00b6 Now, in the same directory create a file requirements.txt with: fastapi Tip You don't need to install Uvicorn to deploy on Deta, although you would probably want to install it locally to test your app. Directory structure \u00b6 You will now have one directory ./fastapideta/ with two files: . \u2514\u2500\u2500 main.py \u2514\u2500\u2500 requirements.txt Create a free Deta account \u00b6 Now create a free account on Deta , you just need an email and password. You don't even need a credit card. Install the CLI \u00b6 Once you have your account, install the Deta CLI : Linux, macOS Windows PowerShell $ curl -fsSL https://get.deta.dev/cli.sh | sh $ iwr https://get.deta.dev/cli.ps1 -useb | iex After installing it, open a new terminal so that the installed CLI is detected. In a new terminal, confirm that it was correctly installed with: $ deta --help Deta command line interface for managing deta micros. Complete documentation available at https://docs.deta.sh Usage: deta [flags] deta [command] Available Commands: auth Change auth settings for a deta micro ... Tip If you have problems installing the CLI, check the official Deta docs . Login with the CLI \u00b6 Now login to Deta from the CLI with: $ deta login Please, log in from the web page. Waiting.. Logged in successfully. This will open a web browser and authenticate automatically. Deploy with Deta \u00b6 Next, deploy your application with the Deta CLI: $ deta new Successfully created a new micro // Notice the \"endpoint\" \ud83d\udd0d { \"name\": \"fastapideta\", \"runtime\": \"python3.7\", \"endpoint\": \"https://qltnci.deta.dev\", \"visor\": \"enabled\", \"http_auth\": \"enabled\" } Adding dependencies... ---> 100% Successfully installed fastapi-0.61.1 pydantic-1.7.2 starlette-0.13.6 You will see a JSON message similar to: { \"name\" : \"fastapideta\" , \"runtime\" : \"python3.7\" , \"endpoint\" : \"https://qltnci.deta.dev\" , \"visor\" : \"enabled\" , \"http_auth\" : \"enabled\" } Tip Your deployment will have a different \"endpoint\" URL. Check it \u00b6 Now open your browser in your endpoint URL. In the example above it was https://qltnci.deta.dev , but yours will be different. You will see the JSON response from your FastAPI app: { \"Hello\" : \"World\" } And now go to the /docs for your API, in the example above it would be https://qltnci.deta.dev/docs . It will show your docs like: Enable public access \u00b6 By default, Deta will handle authentication using cookies for your account. But once you are ready, you can make it public with: $ deta auth disable Successfully disabled http auth Now you can share that URL with anyone and they will be able to access your API. \ud83d\ude80 HTTPS \u00b6 Congrats! You deployed your FastAPI app to Deta! \ud83c\udf89 \ud83c\udf70 Also, notice that Deta correctly handles HTTPS for you, so you don't have to take care of that and can be sure that your clients will have a secure encrypted connection. \u2705 \ud83d\udd12 Check the Visor \u00b6 From your docs UI (they will be in a URL like https://qltnci.deta.dev/docs ) send a request to your path operation /items/{item_id} . For example with ID 5 . Now go to https://web.deta.sh . You will see there's a section to the left called \"Micros\" with each of your apps. You will see a tab with \"Details\", and also a tab \"Visor\", go to the tab \"Visor\". In there you can inspect the recent requests sent to your app. You can also edit them and re-play them. Learn more \u00b6 At some point, you will probably want to store some data for your app in a way that persists through time. For that you can use Deta Base , it also has a generous free tier . You can also read more in the Deta Docs . Deployment Concepts \u00b6 Coming back to the concepts we discussed in Deployments Concepts , here's how each of them would be handled with Deta: HTTPS : Handled by Deta, they will give you a subdomain and handle HTTPS automatically. Running on startup : Handled by Deta, as part of their service. Restarts : Handled by Deta, as part of their service. Replication : Handled by Deta, as part of their service. Memory : Limit predefined by Deta, you could contact them to increase it. Previous steps before starting : Not directly supported, you could make it work with their Cron system or additional scripts. Note Deta is designed to make it easy (and free) to deploy simple applications quickly. It can simplify several use cases, but at the same time, it doesn't support others, like using external databases (apart from Deta's own NoSQL database system), custom virtual machines, etc. You can read more details in the Deta docs to see if it's the right choice for you.","title":"Deploy FastAPI on Deta"},{"location":"deployment/deta/#deploy-fastapi-on-deta","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . In this section you will learn how to easily deploy a FastAPI application on Deta using the free plan. \ud83c\udf81 It will take you about 10 minutes . Info Deta is a FastAPI sponsor. \ud83c\udf89","title":"Deploy FastAPI on Deta"},{"location":"deployment/deta/#a-basic-fastapi-app","text":"Create a directory for your app, for example, ./fastapideta/ and enter into it.","title":"A basic FastAPI app"},{"location":"deployment/deta/#fastapi-code","text":"Create a main.py file with: from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int ): return { \"item_id\" : item_id }","title":"FastAPI code"},{"location":"deployment/deta/#requirements","text":"Now, in the same directory create a file requirements.txt with: fastapi Tip You don't need to install Uvicorn to deploy on Deta, although you would probably want to install it locally to test your app.","title":"Requirements"},{"location":"deployment/deta/#directory-structure","text":"You will now have one directory ./fastapideta/ with two files: . \u2514\u2500\u2500 main.py \u2514\u2500\u2500 requirements.txt","title":"Directory structure"},{"location":"deployment/deta/#create-a-free-deta-account","text":"Now create a free account on Deta , you just need an email and password. You don't even need a credit card.","title":"Create a free Deta account"},{"location":"deployment/deta/#install-the-cli","text":"Once you have your account, install the Deta CLI : Linux, macOS Windows PowerShell $ curl -fsSL https://get.deta.dev/cli.sh | sh $ iwr https://get.deta.dev/cli.ps1 -useb | iex After installing it, open a new terminal so that the installed CLI is detected. In a new terminal, confirm that it was correctly installed with: $ deta --help Deta command line interface for managing deta micros. Complete documentation available at https://docs.deta.sh Usage: deta [flags] deta [command] Available Commands: auth Change auth settings for a deta micro ... Tip If you have problems installing the CLI, check the official Deta docs .","title":"Install the CLI"},{"location":"deployment/deta/#login-with-the-cli","text":"Now login to Deta from the CLI with: $ deta login Please, log in from the web page. Waiting.. Logged in successfully. This will open a web browser and authenticate automatically.","title":"Login with the CLI"},{"location":"deployment/deta/#deploy-with-deta","text":"Next, deploy your application with the Deta CLI: $ deta new Successfully created a new micro // Notice the \"endpoint\" \ud83d\udd0d { \"name\": \"fastapideta\", \"runtime\": \"python3.7\", \"endpoint\": \"https://qltnci.deta.dev\", \"visor\": \"enabled\", \"http_auth\": \"enabled\" } Adding dependencies... ---> 100% Successfully installed fastapi-0.61.1 pydantic-1.7.2 starlette-0.13.6 You will see a JSON message similar to: { \"name\" : \"fastapideta\" , \"runtime\" : \"python3.7\" , \"endpoint\" : \"https://qltnci.deta.dev\" , \"visor\" : \"enabled\" , \"http_auth\" : \"enabled\" } Tip Your deployment will have a different \"endpoint\" URL.","title":"Deploy with Deta"},{"location":"deployment/deta/#check-it","text":"Now open your browser in your endpoint URL. In the example above it was https://qltnci.deta.dev , but yours will be different. You will see the JSON response from your FastAPI app: { \"Hello\" : \"World\" } And now go to the /docs for your API, in the example above it would be https://qltnci.deta.dev/docs . It will show your docs like:","title":"Check it"},{"location":"deployment/deta/#enable-public-access","text":"By default, Deta will handle authentication using cookies for your account. But once you are ready, you can make it public with: $ deta auth disable Successfully disabled http auth Now you can share that URL with anyone and they will be able to access your API. \ud83d\ude80","title":"Enable public access"},{"location":"deployment/deta/#https","text":"Congrats! You deployed your FastAPI app to Deta! \ud83c\udf89 \ud83c\udf70 Also, notice that Deta correctly handles HTTPS for you, so you don't have to take care of that and can be sure that your clients will have a secure encrypted connection. \u2705 \ud83d\udd12","title":"HTTPS"},{"location":"deployment/deta/#check-the-visor","text":"From your docs UI (they will be in a URL like https://qltnci.deta.dev/docs ) send a request to your path operation /items/{item_id} . For example with ID 5 . Now go to https://web.deta.sh . You will see there's a section to the left called \"Micros\" with each of your apps. You will see a tab with \"Details\", and also a tab \"Visor\", go to the tab \"Visor\". In there you can inspect the recent requests sent to your app. You can also edit them and re-play them.","title":"Check the Visor"},{"location":"deployment/deta/#learn-more","text":"At some point, you will probably want to store some data for your app in a way that persists through time. For that you can use Deta Base , it also has a generous free tier . You can also read more in the Deta Docs .","title":"Learn more"},{"location":"deployment/deta/#deployment-concepts","text":"Coming back to the concepts we discussed in Deployments Concepts , here's how each of them would be handled with Deta: HTTPS : Handled by Deta, they will give you a subdomain and handle HTTPS automatically. Running on startup : Handled by Deta, as part of their service. Restarts : Handled by Deta, as part of their service. Replication : Handled by Deta, as part of their service. Memory : Limit predefined by Deta, you could contact them to increase it. Previous steps before starting : Not directly supported, you could make it work with their Cron system or additional scripts. Note Deta is designed to make it easy (and free) to deploy simple applications quickly. It can simplify several use cases, but at the same time, it doesn't support others, like using external databases (apart from Deta's own NoSQL database system), custom virtual machines, etc. You can read more details in the Deta docs to see if it's the right choice for you.","title":"Deployment Concepts"},{"location":"deployment/docker/","text":"FastAPI in Containers - Docker \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . When deploying FastAPI applications a common approach is to build a Linux container image . It's normally done using Docker . You can then deploy that container image in one of a few possible ways. Using Linux containers has several advantages including security , replicability , simplicity , and others. Tip In a hurry and already know this stuff? Jump to the Dockerfile below \ud83d\udc47 . Dockerfile Preview \ud83d\udc40 FROM python:3.9 WORKDIR /code COPY ./requirements.txt /code/requirements.txt RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt COPY ./app /code/app CMD [ \"uvicorn\" , \"app.main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] # If running behind a proxy like Nginx or Traefik add --proxy-headers # CMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\", \"--proxy-headers\"] What is a Container \u00b6 Containers (mainly Linux containers) are a very lightweight way to package applications including all their dependencies and necessary files while keeping them isolated from other containers (other applications or components) in the same system. Linux containers run using the same Linux kernel of the host (machine, virtual machine, cloud server, etc). This just means that they are very lightweight (compared to full virtual machines emulating an entire operating system). This way, containers consume little resources , an amount comparable to running the processes directly (a virtual machine would consume much more). Containers also have their own isolated running processes (commonly just one process), file system, and network, simplifying deployment, security, development, etc. What is a Container Image \u00b6 A container is run from a container image . A container image is a static version of all the files, environment variables, and the default command/program that should be present in a container. Static here means that the container image is not running, it's not being executed, it's only the packaged files and metadata. In contrast to a \" container image \" that is the stored static contents, a \" container \" normally refers to the running instance, the thing that is being executed . When the container is started and running (started from a container image ) it could create or change files, environment variables, etc. Those changes will exist only in that container, but would not persist in the underlying container image (would not be saved to disk). A container image is comparable to the program file and contents, e.g. python and some file main.py . And the container itself (in contrast to the container image ) is the actual running instance of the image, comparable to a process . In fact, a container is running only when it has a process running (and normally it's only a single process). The container stops when there's no process running in it. Container Images \u00b6 Docker has been one of the main tools to create and manage container images and containers . And there's a public Docker Hub with pre-made official container images for many tools, environments, databases, and applications. For example, there's an official Python Image . And there are many other images for different things like databases, for example for: PostgreSQL MySQL MongoDB Redis , etc. By using a pre-made container image it's very easy to combine and use different tools. For example, to try out a new database. In most cases, you can use the official images , and just configure them with environment variables. That way, in many cases you can learn about containers and Docker and re-use that knowledge with many different tools and components. So, you would run multiple containers with different things, like a database, a Python application, a web server with a React frontend application, and connect them together via their internal network. All the container management systems (like Docker or Kubernetes) have these networking features integrated into them. Containers and Processes \u00b6 A container image normally includes in its metadata the default program or command that should be run when the container is started and the parameters to be passed to that program. Very similar to what would be if it was in the command line. When a container is started, it will run that command/program (although you can override it and make it run a different command/program). A container is running as long as the main process (command or program) is running. A container normally has a single process , but it's also possible to start subprocesses from the main process, and that way you will have multiple processes in the same container. But it's not possible to have a running container without at least one running process . If the main process stops, the container stops. Build a Docker Image for FastAPI \u00b6 Okay, let's build something now! \ud83d\ude80 I'll show you how to build a Docker image for FastAPI from scratch , based on the official Python image. This is what you would want to do in most cases , for example: Using Kubernetes or similar tools When running on a Raspberry Pi Using a cloud service that would run a container image for you, etc. Package Requirements \u00b6 You would normally have the package requirements for your application in some file. It would depend mainly on the tool you use to install those requirements. The most common way to do it is to have a file requirements.txt with the package names and their versions, one per line. You would of course use the same ideas you read in About FastAPI versions to set the ranges of versions. For example, your requirements.txt could look like: fastapi>=0.68.0,<0.69.0 pydantic>=1.8.0,<2.0.0 uvicorn>=0.15.0,<0.16.0 And you would normally install those package dependencies with pip , for example: $ pip install -r requirements.txt ---> 100% Successfully installed fastapi pydantic uvicorn Info There are other formats and tools to define and install package dependencies. I'll show you an example using Poetry later in a section below. \ud83d\udc47 Create the FastAPI Code \u00b6 Create an app directory and enter it. Create an empty file __init__.py . Create a main.py file with: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q } Dockerfile \u00b6 Now in the same project directory create a file Dockerfile with: # (1) FROM python:3.9 # (2) WORKDIR /code # (3) COPY ./requirements.txt /code/requirements.txt # (4) RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt # (5) COPY ./app /code/app # (6) CMD [ \"uvicorn\" , \"app.main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] Start from the official Python base image. Set the current working directory to /code . This is where we'll put the requirements.txt file and the app directory. Copy the file with the requirements to the /code directory. Copy only the file with the requirements first, not the rest of the code. As this file doesn't change often , Docker will detect it and use the cache for this step, enabling the cache for the next step too. Install the package dependencies in the requirements file. The --no-cache-dir option tells pip to not save the downloaded packages locally, as that is only if pip was going to be run again to install the same packages, but that's not the case when working with containers. Note The --no-cache-dir is only related to pip , it has nothing to do with Docker or containers. The --upgrade option tells pip to upgrade the packages if they are already installed. Because the previous step copying the file could be detected by the Docker cache , this step will also use the Docker cache when available. Using the cache in this step will save you a lot of time when building the image again and again during development, instead of downloading and installing all the dependencies every time . Copy the ./app directory inside the /code directory. As this has all the code which is what changes most frequently the Docker cache won't be used for this or any following steps easily. So, it's important to put this near the end of the Dockerfile , to optimize the container image build times. Set the command to run the uvicorn server. CMD takes a list of strings, each of these strings is what you would type in the command line separated by spaces. This command will be run from the current working directory , the same /code directory you set above with WORKDIR /code . Because the program will be started at /code and inside of it is the directory ./app with your code, Uvicorn will be able to see and import app from app.main . Tip Review what each line does by clicking each number bubble in the code. \ud83d\udc46 You should now have a directory structure like: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 requirements.txt Behind a TLS Termination Proxy \u00b6 If you are running your container behind a TLS Termination Proxy (load balancer) like Nginx or Traefik, add the option --proxy-headers , this will tell Uvicorn to trust the headers sent by that proxy telling it that the application is running behind HTTPS, etc. CMD [ \"uvicorn\" , \"app.main:app\" , \"--proxy-headers\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] Docker Cache \u00b6 There's an important trick in this Dockerfile , we first copy the file with the dependencies alone , not the rest of the code. Let me tell you why is that. COPY ./requirements.txt /code/requirements.txt Docker and other tools build these container images incrementally , adding one layer on top of the other , starting from the top of the Dockerfile and adding any files created by each of the instructions of the Dockerfile . Docker and similar tools also use an internal cache when building the image, if a file hasn't changed since the last time building the container image, then it will re-use the same layer created the last time, instead of copying the file again and creating a new layer from scratch. Just avoiding the copy of files doesn't necessarily improve things too much, but because it used the cache for that step, it can use the cache for the next step . For example, it could use the cache for the instruction that installs dependencies with: RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt The file with the package requirements won't change frequently . So, by copying only that file, Docker will be able to use the cache for that step. And then, Docker will be able to use the cache for the next step that downloads and install those dependencies. And here's where we save a lot of time . \u2728 ...and avoid boredom waiting. \ud83d\ude2a\ud83d\ude06 Downloading and installing the package dependencies could take minutes , but using the cache would take seconds at most. And as you would be building the container image again and again during development to check that your code changes are working, there's a lot of accumulated time this would save. Then, near the end of the Dockerfile , we copy all the code. As this is what changes most frequently , we put it near the end, because almost always, anything after this step will not be able to use the cache. COPY ./app /code/app Build the Docker Image \u00b6 Now that all the files are in place, let's build the container image. Go to the project directory (in where your Dockerfile is, containing your app directory). Build your FastAPI image: $ docker build -t myimage . ---> 100% Tip Notice the . at the end, it's equivalent to ./ , it tells Docker the directory to use to build the container image. In this case, it's the same current directory ( . ). Start the Docker Container \u00b6 Run a container based on your image: $ docker run -d --name mycontainer -p 80 :80 myimage Check it \u00b6 You should be able to check it in your Docker container's URL, for example: http://192.168.99.100/items/5?q=somequery or http://127.0.0.1/items/5?q=somequery (or equivalent, using your Docker host). You will see something like: { \"item_id\" : 5 , \"q\" : \"somequery\" } Interactive API docs \u00b6 Now you can go to http://192.168.99.100/docs or http://127.0.0.1/docs (or equivalent, using your Docker host). You will see the automatic interactive API documentation (provided by Swagger UI ): Alternative API docs \u00b6 And you can also go to http://192.168.99.100/redoc or http://127.0.0.1/redoc (or equivalent, using your Docker host). You will see the alternative automatic documentation (provided by ReDoc ): Build a Docker Image with a Single-File FastAPI \u00b6 If your FastAPI is a single file, for example, main.py without an ./app directory, your file structure could look like this: . \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 main.py \u2514\u2500\u2500 requirements.txt Then you would just have to change the corresponding paths to copy the file inside the Dockerfile : FROM python:3.9 WORKDIR /code COPY ./requirements.txt /code/requirements.txt RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt # (1) COPY ./main.py /code/ # (2) CMD [ \"uvicorn\" , \"main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] Copy the main.py file to the /code directory directly (without any ./app directory). Run Uvicorn and tell it to import the app object from main (instead of importing from app.main ). Then adjust the Uvicorn command to use the new module main instead of app.main to import the FastAPI object app . Deployment Concepts \u00b6 Let's talk again about some of the same Deployment Concepts in terms of containers. Containers are mainly a tool to simplify the process of building and deploying an application, but they don't enforce a particular approach to handle these deployment concepts , and there are several possible strategies. The good news is that with each different strategy there's a way to cover all of the deployment concepts. \ud83c\udf89 Let's review these deployment concepts in terms of containers: HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting HTTPS \u00b6 If we focus just on the container image for a FastAPI application (and later the running container ), HTTPS normally would be handled externally by another tool. It could be another container, for example with Traefik , handling HTTPS and automatic acquisition of certificates . Tip Traefik has integrations with Docker, Kubernetes, and others, so it's very easy to set up and configure HTTPS for your containers with it. Alternatively, HTTPS could be handled by a cloud provider as one of their services (while still running the application in a container). Running on Startup and Restarts \u00b6 There is normally another tool in charge of starting and running your container. It could be Docker directly, Docker Compose , Kubernetes , a cloud service , etc. In most (or all) cases, there's a simple option to enable running the container on startup and enabling restarts on failures. For example, in Docker, it's the command line option --restart . Without using containers, making applications run on startup and with restarts can be cumbersome and difficult. But when working with containers in most cases that functionality is included by default. \u2728 Replication - Number of Processes \u00b6 If you have a cluster of machines with Kubernetes , Docker Swarm Mode, Nomad, or another similar complex system to manage distributed containers on multiple machines, then you will probably want to handle replication at the cluster level instead of using a process manager (like Gunicorn with workers) in each container. One of those distributed container management systems like Kubernetes normally has some integrated way of handling replication of containers while still supporting load balancing for the incoming requests. All at the cluster level . In those cases, you would probably want to build a Docker image from scratch as explained above , installing your dependencies, and running a single Uvicorn process instead of running something like Gunicorn with Uvicorn workers. Load Balancer \u00b6 When using containers, you would normally have some component listening on the main port . It could possibly be another container that is also a TLS Termination Proxy to handle HTTPS or some similar tool. As this component would take the load of requests and distribute that among the workers in a (hopefully) balanced way, it is also commonly called a Load Balancer . Tip The same TLS Termination Proxy component used for HTTPS would probably also be a Load Balancer . And when working with containers, the same system you use to start and manage them would already have internal tools to transmit the network communication (e.g. HTTP requests) from that load balancer (that could also be a TLS Termination Proxy ) to the container(s) with your app. One Load Balancer - Multiple Worker Containers \u00b6 When working with Kubernetes or similar distributed container management systems, using their internal networking mechanisms would allow the single load balancer that is listening on the main port to transmit communication (requests) to possibly multiple containers running your app. Each of these containers running your app would normally have just one process (e.g. a Uvicorn process running your FastAPI application). They would all be identical containers , running the same thing, but each with its own process, memory, etc. That way you would take advantage of parallelization in different cores of the CPU, or even in different machines . And the distributed container system with the load balancer would distribute the requests to each one of the containers with your app in turns . So, each request could be handled by one of the multiple replicated containers running your app. And normally this load balancer would be able to handle requests that go to other apps in your cluster (e.g. to a different domain, or under a different URL path prefix), and would transmit that communication to the right containers for that other application running in your cluster. One Process per Container \u00b6 In this type of scenario, you probably would want to have a single (Uvicorn) process per container , as you would already be handling replication at the cluster level. So, in this case, you would not want to have a process manager like Gunicorn with Uvicorn workers, or Uvicorn using its own Uvicorn workers. You would want to have just a single Uvicorn process per container (but probably multiple containers). Having another process manager inside the container (as would be with Gunicorn or Uvicorn managing Uvicorn workers) would only add unnecessary complexity that you are most probably already taking care of with your cluster system. Containers with Multiple Processes and Special Cases \u00b6 Of course, there are special cases where you could want to have a container with a Gunicorn process manager starting several Uvicorn worker processes inside. In those cases, you can use the official Docker image that includes Gunicorn as a process manager running multiple Uvicorn worker processes , and some default settings to adjust the number of workers based on the current CPU cores automatically. I'll tell you more about it below in Official Docker Image with Gunicorn - Uvicorn . Here are some examples of when that could make sense: A Simple App \u00b6 You could want a process manager in the container if your application is simple enough that you don't need (at least not yet) to fine-tune the number of processes too much, and you can just use an automated default (with the official Docker image), and you are running it on a single server , not a cluster. Docker Compose \u00b6 You could be deploying to a single server (not a cluster) with Docker Compose , so you wouldn't have an easy way to manage replication of containers (with Docker Compose) while preserving the shared network and load balancing . Then you could want to have a single container with a process manager starting several worker processes inside. Prometheus and Other Reasons \u00b6 You could also have other reasons that would make it easier to have a single container with multiple processes instead of having multiple containers with a single process in each of them. For example (depending on your setup) you could have some tool like a Prometheus exporter in the same container that should have access to each of the requests that come. In this case, if you had multiple containers , by default, when Prometheus came to read the metrics , it would get the ones for a single container each time (for the container that handled that particular request), instead of getting the accumulated metrics for all the replicated containers. Then, in that case, it could be simpler to have one container with multiple processes , and a local tool (e.g. a Prometheus exporter) on the same container collecting Prometheus metrics for all the internal processes and exposing those metrics on that single container. The main point is, none of these are rules written in stone that you have to blindly follow. You can use these ideas to evaluate your own use case and decide what is the best approach for your system, checking out how to manage the concepts of: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting Memory \u00b6 If you run a single process per container you will have a more or less well-defined, stable, and limited amount of memory consumed by each of those containers (more than one if they are replicated). And then you can set those same memory limits and requirements in your configurations for your container management system (for example in Kubernetes ). That way it will be able to replicate the containers in the available machines taking into account the amount of memory needed by them, and the amount available in the machines in the cluster. If your application is simple , this will probably not be a problem , and you might not need to specify hard memory limits. But if you are using a lot of memory (for example with machine learning models), you should check how much memory you are consuming and adjust the number of containers that runs in each machine (and maybe add more machines to your cluster). If you run multiple processes per container (for example with the official Docker image) you will have to make sure that the number of processes started doesn't consume more memory than what is available. Previous Steps Before Starting and Containers \u00b6 If you are using containers (e.g. Docker, Kubernetes), then there are two main approaches you can use. Multiple Containers \u00b6 If you have multiple containers , probably each one running a single process (for example, in a Kubernetes cluster), then you would probably want to have a separate container doing the work of the previous steps in a single container, running a single process, before running the replicated worker containers. Info If you are using Kubernetes, this would probably be an Init Container . If in your use case there's no problem in running those previous steps multiple times in parallel (for example if you are not running database migrations, but just checking if the database is ready yet), then you could also just put them in each container right before starting the main process. Single Container \u00b6 If you have a simple setup, with a single container that then starts multiple worker processes (or also just one process), then you could run those previous steps in the same container, right before starting the process with the app. The official Docker image supports this internally. Official Docker Image with Gunicorn - Uvicorn \u00b6 There is an official Docker image that includes Gunicorn running with Uvicorn workers, as detailed in a previous chapter: Server Workers - Gunicorn with Uvicorn . This image would be useful mainly in the situations described above in: Containers with Multiple Processes and Special Cases . tiangolo/uvicorn-gunicorn-fastapi . Warning There's a high chance that you don't need this base image or any other similar one, and would be better off by building the image from scratch as described above in: Build a Docker Image for FastAPI . This image has an auto-tuning mechanism included to set the number of worker processes based on the CPU cores available. It has sensible defaults , but you can still change and update all the configurations with environment variables or configuration files. It also supports running previous steps before starting with a script. Tip To see all the configurations and options, go to the Docker image page: tiangolo/uvicorn-gunicorn-fastapi . Number of Processes on the Official Docker Image \u00b6 The number of processes on this image is computed automatically from the CPU cores available. This means that it will try to squeeze as much performance from the CPU as possible. You can also adjust it with the configurations using environment variables , etc. But it also means that as the number of processes depends on the CPU the container is running, the amount of memory consumed will also depend on that. So, if your application consumes a lot of memory (for example with machine learning models), and your server has a lot of CPU cores but little memory , then your container could end up trying to use more memory than what is available, and degrading performance a lot (or even crashing). \ud83d\udea8 Create a Dockerfile \u00b6 Here's how you would create a Dockerfile based on this image: FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9 COPY ./requirements.txt /app/requirements.txt RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt COPY ./app /app Bigger Applications \u00b6 If you followed the section about creating Bigger Applications with Multiple Files , your Dockerfile might instead look like: FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9 COPY ./requirements.txt /app/requirements.txt RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt COPY ./app /app/app When to Use \u00b6 You should probably not use this official base image (or any other similar one) if you are using Kubernetes (or others) and you are already setting replication at the cluster level, with multiple containers . In those cases, you are better off building an image from scratch as described above: Build a Docker Image for FastAPI . This image would be useful mainly in the special cases described above in Containers with Multiple Processes and Special Cases . For example, if your application is simple enough that setting a default number of processes based on the CPU works well, you don't want to bother with manually configuring the replication at the cluster level, and you are not running more than one container with your app. Or if you are deploying with Docker Compose , running on a single server, etc. Deploy the Container Image \u00b6 After having a Container (Docker) Image there are several ways to deploy it. For example: With Docker Compose in a single server With a Kubernetes cluster With a Docker Swarm Mode cluster With another tool like Nomad With a cloud service that takes your container image and deploys it Docker Image with Poetry \u00b6 If you use Poetry to manage your project's dependencies, you could use Docker multi-stage building: # (1) FROM python:3.9 as requirements-stage # (2) WORKDIR /tmp # (3) RUN pip install poetry # (4) COPY ./pyproject.toml ./poetry.lock* /tmp/ # (5) RUN poetry export -f requirements.txt --output requirements.txt --without-hashes # (6) FROM python:3.9 # (7) WORKDIR /code # (8) COPY --from = requirements-stage /tmp/requirements.txt /code/requirements.txt # (9) RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt # (10) COPY ./app /code/app # (11) CMD [ \"uvicorn\" , \"app.main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] This is the first stage, it is named requirements-stage . Set /tmp as the current working directory. Here's where we will generate the file requirements.txt Install Poetry in this Docker stage. Copy the pyproject.toml and poetry.lock files to the /tmp directory. Because it uses ./poetry.lock* (ending with a * ), it won't crash if that file is not available yet. Generate the requirements.txt file. This is the final stage, anything here will be preserved in the final container image. Set the current working directory to /code . Copy the requirements.txt file to the /code directory. This file only lives in the previous Docker stage, that's why we use --from-requirements-stage to copy it. Install the package dependencies in the generated requirements.txt file. Copy the app directory to the /code directory. Run the uvicorn command, telling it to use the app object imported from app.main . Tip Click the bubble numbers to see what each line does. A Docker stage is a part of a Dockerfile that works as a temporary container image that is only used to generate some files to be used later. The first stage will only be used to install Poetry and to generate the requirements.txt with your project dependencies from Poetry's pyproject.toml file. This requirements.txt file will be used with pip later in the next stage . In the final container image only the final stage is preserved. The previous stage(s) will be discarded. When using Poetry, it would make sense to use Docker multi-stage builds because you don't really need to have Poetry and its dependencies installed in the final container image, you only need to have the generated requirements.txt file to install your project dependencies. Then in the next (and final) stage you would build the image more or less in the same way as described before. Behind a TLS Termination Proxy - Poetry \u00b6 Again, if you are running your container behind a TLS Termination Proxy (load balancer) like Nginx or Traefik, add the option --proxy-headers to the command: CMD [ \"uvicorn\" , \"app.main:app\" , \"--proxy-headers\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] Recap \u00b6 Using container systems (e.g. with Docker and Kubernetes ) it becomes fairly straightforward to handle all the deployment concepts : HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting In most cases, you probably won't want to use any base image, and instead build a container image from scratch one based on the official Python Docker image. Taking care of the order of instructions in the Dockerfile and the Docker cache you can minimize build times , to maximize your productivity (and avoid boredom). \ud83d\ude0e In certain special cases, you might want to use the official Docker image for FastAPI. \ud83e\udd13","title":"FastAPI in Containers - Docker"},{"location":"deployment/docker/#fastapi-in-containers-docker","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . When deploying FastAPI applications a common approach is to build a Linux container image . It's normally done using Docker . You can then deploy that container image in one of a few possible ways. Using Linux containers has several advantages including security , replicability , simplicity , and others. Tip In a hurry and already know this stuff? Jump to the Dockerfile below \ud83d\udc47 . Dockerfile Preview \ud83d\udc40 FROM python:3.9 WORKDIR /code COPY ./requirements.txt /code/requirements.txt RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt COPY ./app /code/app CMD [ \"uvicorn\" , \"app.main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] # If running behind a proxy like Nginx or Traefik add --proxy-headers # CMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\", \"--proxy-headers\"]","title":"FastAPI in Containers - Docker"},{"location":"deployment/docker/#what-is-a-container","text":"Containers (mainly Linux containers) are a very lightweight way to package applications including all their dependencies and necessary files while keeping them isolated from other containers (other applications or components) in the same system. Linux containers run using the same Linux kernel of the host (machine, virtual machine, cloud server, etc). This just means that they are very lightweight (compared to full virtual machines emulating an entire operating system). This way, containers consume little resources , an amount comparable to running the processes directly (a virtual machine would consume much more). Containers also have their own isolated running processes (commonly just one process), file system, and network, simplifying deployment, security, development, etc.","title":"What is a Container"},{"location":"deployment/docker/#what-is-a-container-image","text":"A container is run from a container image . A container image is a static version of all the files, environment variables, and the default command/program that should be present in a container. Static here means that the container image is not running, it's not being executed, it's only the packaged files and metadata. In contrast to a \" container image \" that is the stored static contents, a \" container \" normally refers to the running instance, the thing that is being executed . When the container is started and running (started from a container image ) it could create or change files, environment variables, etc. Those changes will exist only in that container, but would not persist in the underlying container image (would not be saved to disk). A container image is comparable to the program file and contents, e.g. python and some file main.py . And the container itself (in contrast to the container image ) is the actual running instance of the image, comparable to a process . In fact, a container is running only when it has a process running (and normally it's only a single process). The container stops when there's no process running in it.","title":"What is a Container Image"},{"location":"deployment/docker/#container-images","text":"Docker has been one of the main tools to create and manage container images and containers . And there's a public Docker Hub with pre-made official container images for many tools, environments, databases, and applications. For example, there's an official Python Image . And there are many other images for different things like databases, for example for: PostgreSQL MySQL MongoDB Redis , etc. By using a pre-made container image it's very easy to combine and use different tools. For example, to try out a new database. In most cases, you can use the official images , and just configure them with environment variables. That way, in many cases you can learn about containers and Docker and re-use that knowledge with many different tools and components. So, you would run multiple containers with different things, like a database, a Python application, a web server with a React frontend application, and connect them together via their internal network. All the container management systems (like Docker or Kubernetes) have these networking features integrated into them.","title":"Container Images"},{"location":"deployment/docker/#containers-and-processes","text":"A container image normally includes in its metadata the default program or command that should be run when the container is started and the parameters to be passed to that program. Very similar to what would be if it was in the command line. When a container is started, it will run that command/program (although you can override it and make it run a different command/program). A container is running as long as the main process (command or program) is running. A container normally has a single process , but it's also possible to start subprocesses from the main process, and that way you will have multiple processes in the same container. But it's not possible to have a running container without at least one running process . If the main process stops, the container stops.","title":"Containers and Processes"},{"location":"deployment/docker/#build-a-docker-image-for-fastapi","text":"Okay, let's build something now! \ud83d\ude80 I'll show you how to build a Docker image for FastAPI from scratch , based on the official Python image. This is what you would want to do in most cases , for example: Using Kubernetes or similar tools When running on a Raspberry Pi Using a cloud service that would run a container image for you, etc.","title":"Build a Docker Image for FastAPI"},{"location":"deployment/docker/#package-requirements","text":"You would normally have the package requirements for your application in some file. It would depend mainly on the tool you use to install those requirements. The most common way to do it is to have a file requirements.txt with the package names and their versions, one per line. You would of course use the same ideas you read in About FastAPI versions to set the ranges of versions. For example, your requirements.txt could look like: fastapi>=0.68.0,<0.69.0 pydantic>=1.8.0,<2.0.0 uvicorn>=0.15.0,<0.16.0 And you would normally install those package dependencies with pip , for example: $ pip install -r requirements.txt ---> 100% Successfully installed fastapi pydantic uvicorn Info There are other formats and tools to define and install package dependencies. I'll show you an example using Poetry later in a section below. \ud83d\udc47","title":"Package Requirements"},{"location":"deployment/docker/#create-the-fastapi-code","text":"Create an app directory and enter it. Create an empty file __init__.py . Create a main.py file with: from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Union [ str , None ] = None ): return { \"item_id\" : item_id , \"q\" : q }","title":"Create the FastAPI Code"},{"location":"deployment/docker/#dockerfile","text":"Now in the same project directory create a file Dockerfile with: # (1) FROM python:3.9 # (2) WORKDIR /code # (3) COPY ./requirements.txt /code/requirements.txt # (4) RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt # (5) COPY ./app /code/app # (6) CMD [ \"uvicorn\" , \"app.main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] Start from the official Python base image. Set the current working directory to /code . This is where we'll put the requirements.txt file and the app directory. Copy the file with the requirements to the /code directory. Copy only the file with the requirements first, not the rest of the code. As this file doesn't change often , Docker will detect it and use the cache for this step, enabling the cache for the next step too. Install the package dependencies in the requirements file. The --no-cache-dir option tells pip to not save the downloaded packages locally, as that is only if pip was going to be run again to install the same packages, but that's not the case when working with containers. Note The --no-cache-dir is only related to pip , it has nothing to do with Docker or containers. The --upgrade option tells pip to upgrade the packages if they are already installed. Because the previous step copying the file could be detected by the Docker cache , this step will also use the Docker cache when available. Using the cache in this step will save you a lot of time when building the image again and again during development, instead of downloading and installing all the dependencies every time . Copy the ./app directory inside the /code directory. As this has all the code which is what changes most frequently the Docker cache won't be used for this or any following steps easily. So, it's important to put this near the end of the Dockerfile , to optimize the container image build times. Set the command to run the uvicorn server. CMD takes a list of strings, each of these strings is what you would type in the command line separated by spaces. This command will be run from the current working directory , the same /code directory you set above with WORKDIR /code . Because the program will be started at /code and inside of it is the directory ./app with your code, Uvicorn will be able to see and import app from app.main . Tip Review what each line does by clicking each number bubble in the code. \ud83d\udc46 You should now have a directory structure like: . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 Dockerfile \u2514\u2500\u2500 requirements.txt","title":"Dockerfile"},{"location":"deployment/docker/#behind-a-tls-termination-proxy","text":"If you are running your container behind a TLS Termination Proxy (load balancer) like Nginx or Traefik, add the option --proxy-headers , this will tell Uvicorn to trust the headers sent by that proxy telling it that the application is running behind HTTPS, etc. CMD [ \"uvicorn\" , \"app.main:app\" , \"--proxy-headers\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ]","title":"Behind a TLS Termination Proxy"},{"location":"deployment/docker/#docker-cache","text":"There's an important trick in this Dockerfile , we first copy the file with the dependencies alone , not the rest of the code. Let me tell you why is that. COPY ./requirements.txt /code/requirements.txt Docker and other tools build these container images incrementally , adding one layer on top of the other , starting from the top of the Dockerfile and adding any files created by each of the instructions of the Dockerfile . Docker and similar tools also use an internal cache when building the image, if a file hasn't changed since the last time building the container image, then it will re-use the same layer created the last time, instead of copying the file again and creating a new layer from scratch. Just avoiding the copy of files doesn't necessarily improve things too much, but because it used the cache for that step, it can use the cache for the next step . For example, it could use the cache for the instruction that installs dependencies with: RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt The file with the package requirements won't change frequently . So, by copying only that file, Docker will be able to use the cache for that step. And then, Docker will be able to use the cache for the next step that downloads and install those dependencies. And here's where we save a lot of time . \u2728 ...and avoid boredom waiting. \ud83d\ude2a\ud83d\ude06 Downloading and installing the package dependencies could take minutes , but using the cache would take seconds at most. And as you would be building the container image again and again during development to check that your code changes are working, there's a lot of accumulated time this would save. Then, near the end of the Dockerfile , we copy all the code. As this is what changes most frequently , we put it near the end, because almost always, anything after this step will not be able to use the cache. COPY ./app /code/app","title":"Docker Cache"},{"location":"deployment/docker/#build-the-docker-image","text":"Now that all the files are in place, let's build the container image. Go to the project directory (in where your Dockerfile is, containing your app directory). Build your FastAPI image: $ docker build -t myimage . ---> 100% Tip Notice the . at the end, it's equivalent to ./ , it tells Docker the directory to use to build the container image. In this case, it's the same current directory ( . ).","title":"Build the Docker Image"},{"location":"deployment/docker/#start-the-docker-container","text":"Run a container based on your image: $ docker run -d --name mycontainer -p 80 :80 myimage","title":"Start the Docker Container"},{"location":"deployment/docker/#check-it","text":"You should be able to check it in your Docker container's URL, for example: http://192.168.99.100/items/5?q=somequery or http://127.0.0.1/items/5?q=somequery (or equivalent, using your Docker host). You will see something like: { \"item_id\" : 5 , \"q\" : \"somequery\" }","title":"Check it"},{"location":"deployment/docker/#interactive-api-docs","text":"Now you can go to http://192.168.99.100/docs or http://127.0.0.1/docs (or equivalent, using your Docker host). You will see the automatic interactive API documentation (provided by Swagger UI ):","title":"Interactive API docs"},{"location":"deployment/docker/#alternative-api-docs","text":"And you can also go to http://192.168.99.100/redoc or http://127.0.0.1/redoc (or equivalent, using your Docker host). You will see the alternative automatic documentation (provided by ReDoc ):","title":"Alternative API docs"},{"location":"deployment/docker/#build-a-docker-image-with-a-single-file-fastapi","text":"If your FastAPI is a single file, for example, main.py without an ./app directory, your file structure could look like this: . \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 main.py \u2514\u2500\u2500 requirements.txt Then you would just have to change the corresponding paths to copy the file inside the Dockerfile : FROM python:3.9 WORKDIR /code COPY ./requirements.txt /code/requirements.txt RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt # (1) COPY ./main.py /code/ # (2) CMD [ \"uvicorn\" , \"main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] Copy the main.py file to the /code directory directly (without any ./app directory). Run Uvicorn and tell it to import the app object from main (instead of importing from app.main ). Then adjust the Uvicorn command to use the new module main instead of app.main to import the FastAPI object app .","title":"Build a Docker Image with a Single-File FastAPI"},{"location":"deployment/docker/#deployment-concepts","text":"Let's talk again about some of the same Deployment Concepts in terms of containers. Containers are mainly a tool to simplify the process of building and deploying an application, but they don't enforce a particular approach to handle these deployment concepts , and there are several possible strategies. The good news is that with each different strategy there's a way to cover all of the deployment concepts. \ud83c\udf89 Let's review these deployment concepts in terms of containers: HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting","title":"Deployment Concepts"},{"location":"deployment/docker/#https","text":"If we focus just on the container image for a FastAPI application (and later the running container ), HTTPS normally would be handled externally by another tool. It could be another container, for example with Traefik , handling HTTPS and automatic acquisition of certificates . Tip Traefik has integrations with Docker, Kubernetes, and others, so it's very easy to set up and configure HTTPS for your containers with it. Alternatively, HTTPS could be handled by a cloud provider as one of their services (while still running the application in a container).","title":"HTTPS"},{"location":"deployment/docker/#running-on-startup-and-restarts","text":"There is normally another tool in charge of starting and running your container. It could be Docker directly, Docker Compose , Kubernetes , a cloud service , etc. In most (or all) cases, there's a simple option to enable running the container on startup and enabling restarts on failures. For example, in Docker, it's the command line option --restart . Without using containers, making applications run on startup and with restarts can be cumbersome and difficult. But when working with containers in most cases that functionality is included by default. \u2728","title":"Running on Startup and Restarts"},{"location":"deployment/docker/#replication-number-of-processes","text":"If you have a cluster of machines with Kubernetes , Docker Swarm Mode, Nomad, or another similar complex system to manage distributed containers on multiple machines, then you will probably want to handle replication at the cluster level instead of using a process manager (like Gunicorn with workers) in each container. One of those distributed container management systems like Kubernetes normally has some integrated way of handling replication of containers while still supporting load balancing for the incoming requests. All at the cluster level . In those cases, you would probably want to build a Docker image from scratch as explained above , installing your dependencies, and running a single Uvicorn process instead of running something like Gunicorn with Uvicorn workers.","title":"Replication - Number of Processes"},{"location":"deployment/docker/#load-balancer","text":"When using containers, you would normally have some component listening on the main port . It could possibly be another container that is also a TLS Termination Proxy to handle HTTPS or some similar tool. As this component would take the load of requests and distribute that among the workers in a (hopefully) balanced way, it is also commonly called a Load Balancer . Tip The same TLS Termination Proxy component used for HTTPS would probably also be a Load Balancer . And when working with containers, the same system you use to start and manage them would already have internal tools to transmit the network communication (e.g. HTTP requests) from that load balancer (that could also be a TLS Termination Proxy ) to the container(s) with your app.","title":"Load Balancer"},{"location":"deployment/docker/#one-load-balancer-multiple-worker-containers","text":"When working with Kubernetes or similar distributed container management systems, using their internal networking mechanisms would allow the single load balancer that is listening on the main port to transmit communication (requests) to possibly multiple containers running your app. Each of these containers running your app would normally have just one process (e.g. a Uvicorn process running your FastAPI application). They would all be identical containers , running the same thing, but each with its own process, memory, etc. That way you would take advantage of parallelization in different cores of the CPU, or even in different machines . And the distributed container system with the load balancer would distribute the requests to each one of the containers with your app in turns . So, each request could be handled by one of the multiple replicated containers running your app. And normally this load balancer would be able to handle requests that go to other apps in your cluster (e.g. to a different domain, or under a different URL path prefix), and would transmit that communication to the right containers for that other application running in your cluster.","title":"One Load Balancer - Multiple Worker Containers"},{"location":"deployment/docker/#one-process-per-container","text":"In this type of scenario, you probably would want to have a single (Uvicorn) process per container , as you would already be handling replication at the cluster level. So, in this case, you would not want to have a process manager like Gunicorn with Uvicorn workers, or Uvicorn using its own Uvicorn workers. You would want to have just a single Uvicorn process per container (but probably multiple containers). Having another process manager inside the container (as would be with Gunicorn or Uvicorn managing Uvicorn workers) would only add unnecessary complexity that you are most probably already taking care of with your cluster system.","title":"One Process per Container"},{"location":"deployment/docker/#containers-with-multiple-processes-and-special-cases","text":"Of course, there are special cases where you could want to have a container with a Gunicorn process manager starting several Uvicorn worker processes inside. In those cases, you can use the official Docker image that includes Gunicorn as a process manager running multiple Uvicorn worker processes , and some default settings to adjust the number of workers based on the current CPU cores automatically. I'll tell you more about it below in Official Docker Image with Gunicorn - Uvicorn . Here are some examples of when that could make sense:","title":"Containers with Multiple Processes and Special Cases"},{"location":"deployment/docker/#a-simple-app","text":"You could want a process manager in the container if your application is simple enough that you don't need (at least not yet) to fine-tune the number of processes too much, and you can just use an automated default (with the official Docker image), and you are running it on a single server , not a cluster.","title":"A Simple App"},{"location":"deployment/docker/#docker-compose","text":"You could be deploying to a single server (not a cluster) with Docker Compose , so you wouldn't have an easy way to manage replication of containers (with Docker Compose) while preserving the shared network and load balancing . Then you could want to have a single container with a process manager starting several worker processes inside.","title":"Docker Compose"},{"location":"deployment/docker/#prometheus-and-other-reasons","text":"You could also have other reasons that would make it easier to have a single container with multiple processes instead of having multiple containers with a single process in each of them. For example (depending on your setup) you could have some tool like a Prometheus exporter in the same container that should have access to each of the requests that come. In this case, if you had multiple containers , by default, when Prometheus came to read the metrics , it would get the ones for a single container each time (for the container that handled that particular request), instead of getting the accumulated metrics for all the replicated containers. Then, in that case, it could be simpler to have one container with multiple processes , and a local tool (e.g. a Prometheus exporter) on the same container collecting Prometheus metrics for all the internal processes and exposing those metrics on that single container. The main point is, none of these are rules written in stone that you have to blindly follow. You can use these ideas to evaluate your own use case and decide what is the best approach for your system, checking out how to manage the concepts of: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting","title":"Prometheus and Other Reasons"},{"location":"deployment/docker/#memory","text":"If you run a single process per container you will have a more or less well-defined, stable, and limited amount of memory consumed by each of those containers (more than one if they are replicated). And then you can set those same memory limits and requirements in your configurations for your container management system (for example in Kubernetes ). That way it will be able to replicate the containers in the available machines taking into account the amount of memory needed by them, and the amount available in the machines in the cluster. If your application is simple , this will probably not be a problem , and you might not need to specify hard memory limits. But if you are using a lot of memory (for example with machine learning models), you should check how much memory you are consuming and adjust the number of containers that runs in each machine (and maybe add more machines to your cluster). If you run multiple processes per container (for example with the official Docker image) you will have to make sure that the number of processes started doesn't consume more memory than what is available.","title":"Memory"},{"location":"deployment/docker/#previous-steps-before-starting-and-containers","text":"If you are using containers (e.g. Docker, Kubernetes), then there are two main approaches you can use.","title":"Previous Steps Before Starting and Containers"},{"location":"deployment/docker/#multiple-containers","text":"If you have multiple containers , probably each one running a single process (for example, in a Kubernetes cluster), then you would probably want to have a separate container doing the work of the previous steps in a single container, running a single process, before running the replicated worker containers. Info If you are using Kubernetes, this would probably be an Init Container . If in your use case there's no problem in running those previous steps multiple times in parallel (for example if you are not running database migrations, but just checking if the database is ready yet), then you could also just put them in each container right before starting the main process.","title":"Multiple Containers"},{"location":"deployment/docker/#single-container","text":"If you have a simple setup, with a single container that then starts multiple worker processes (or also just one process), then you could run those previous steps in the same container, right before starting the process with the app. The official Docker image supports this internally.","title":"Single Container"},{"location":"deployment/docker/#official-docker-image-with-gunicorn-uvicorn","text":"There is an official Docker image that includes Gunicorn running with Uvicorn workers, as detailed in a previous chapter: Server Workers - Gunicorn with Uvicorn . This image would be useful mainly in the situations described above in: Containers with Multiple Processes and Special Cases . tiangolo/uvicorn-gunicorn-fastapi . Warning There's a high chance that you don't need this base image or any other similar one, and would be better off by building the image from scratch as described above in: Build a Docker Image for FastAPI . This image has an auto-tuning mechanism included to set the number of worker processes based on the CPU cores available. It has sensible defaults , but you can still change and update all the configurations with environment variables or configuration files. It also supports running previous steps before starting with a script. Tip To see all the configurations and options, go to the Docker image page: tiangolo/uvicorn-gunicorn-fastapi .","title":"Official Docker Image with Gunicorn - Uvicorn"},{"location":"deployment/docker/#number-of-processes-on-the-official-docker-image","text":"The number of processes on this image is computed automatically from the CPU cores available. This means that it will try to squeeze as much performance from the CPU as possible. You can also adjust it with the configurations using environment variables , etc. But it also means that as the number of processes depends on the CPU the container is running, the amount of memory consumed will also depend on that. So, if your application consumes a lot of memory (for example with machine learning models), and your server has a lot of CPU cores but little memory , then your container could end up trying to use more memory than what is available, and degrading performance a lot (or even crashing). \ud83d\udea8","title":"Number of Processes on the Official Docker Image"},{"location":"deployment/docker/#create-a-dockerfile","text":"Here's how you would create a Dockerfile based on this image: FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9 COPY ./requirements.txt /app/requirements.txt RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt COPY ./app /app","title":"Create a Dockerfile"},{"location":"deployment/docker/#bigger-applications","text":"If you followed the section about creating Bigger Applications with Multiple Files , your Dockerfile might instead look like: FROM tiangolo/uvicorn-gunicorn-fastapi:python3.9 COPY ./requirements.txt /app/requirements.txt RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt COPY ./app /app/app","title":"Bigger Applications"},{"location":"deployment/docker/#when-to-use","text":"You should probably not use this official base image (or any other similar one) if you are using Kubernetes (or others) and you are already setting replication at the cluster level, with multiple containers . In those cases, you are better off building an image from scratch as described above: Build a Docker Image for FastAPI . This image would be useful mainly in the special cases described above in Containers with Multiple Processes and Special Cases . For example, if your application is simple enough that setting a default number of processes based on the CPU works well, you don't want to bother with manually configuring the replication at the cluster level, and you are not running more than one container with your app. Or if you are deploying with Docker Compose , running on a single server, etc.","title":"When to Use"},{"location":"deployment/docker/#deploy-the-container-image","text":"After having a Container (Docker) Image there are several ways to deploy it. For example: With Docker Compose in a single server With a Kubernetes cluster With a Docker Swarm Mode cluster With another tool like Nomad With a cloud service that takes your container image and deploys it","title":"Deploy the Container Image"},{"location":"deployment/docker/#docker-image-with-poetry","text":"If you use Poetry to manage your project's dependencies, you could use Docker multi-stage building: # (1) FROM python:3.9 as requirements-stage # (2) WORKDIR /tmp # (3) RUN pip install poetry # (4) COPY ./pyproject.toml ./poetry.lock* /tmp/ # (5) RUN poetry export -f requirements.txt --output requirements.txt --without-hashes # (6) FROM python:3.9 # (7) WORKDIR /code # (8) COPY --from = requirements-stage /tmp/requirements.txt /code/requirements.txt # (9) RUN pip install --no-cache-dir --upgrade -r /code/requirements.txt # (10) COPY ./app /code/app # (11) CMD [ \"uvicorn\" , \"app.main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] This is the first stage, it is named requirements-stage . Set /tmp as the current working directory. Here's where we will generate the file requirements.txt Install Poetry in this Docker stage. Copy the pyproject.toml and poetry.lock files to the /tmp directory. Because it uses ./poetry.lock* (ending with a * ), it won't crash if that file is not available yet. Generate the requirements.txt file. This is the final stage, anything here will be preserved in the final container image. Set the current working directory to /code . Copy the requirements.txt file to the /code directory. This file only lives in the previous Docker stage, that's why we use --from-requirements-stage to copy it. Install the package dependencies in the generated requirements.txt file. Copy the app directory to the /code directory. Run the uvicorn command, telling it to use the app object imported from app.main . Tip Click the bubble numbers to see what each line does. A Docker stage is a part of a Dockerfile that works as a temporary container image that is only used to generate some files to be used later. The first stage will only be used to install Poetry and to generate the requirements.txt with your project dependencies from Poetry's pyproject.toml file. This requirements.txt file will be used with pip later in the next stage . In the final container image only the final stage is preserved. The previous stage(s) will be discarded. When using Poetry, it would make sense to use Docker multi-stage builds because you don't really need to have Poetry and its dependencies installed in the final container image, you only need to have the generated requirements.txt file to install your project dependencies. Then in the next (and final) stage you would build the image more or less in the same way as described before.","title":"Docker Image with Poetry"},{"location":"deployment/docker/#behind-a-tls-termination-proxy-poetry","text":"Again, if you are running your container behind a TLS Termination Proxy (load balancer) like Nginx or Traefik, add the option --proxy-headers to the command: CMD [ \"uvicorn\" , \"app.main:app\" , \"--proxy-headers\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ]","title":"Behind a TLS Termination Proxy - Poetry"},{"location":"deployment/docker/#recap","text":"Using container systems (e.g. with Docker and Kubernetes ) it becomes fairly straightforward to handle all the deployment concepts : HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting In most cases, you probably won't want to use any base image, and instead build a container image from scratch one based on the official Python Docker image. Taking care of the order of instructions in the Dockerfile and the Docker cache you can minimize build times , to maximize your productivity (and avoid boredom). \ud83d\ude0e In certain special cases, you might want to use the official Docker image for FastAPI. \ud83e\udd13","title":"Recap"},{"location":"deployment/https/","text":"About HTTPS \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . It is easy to assume that HTTPS is something that is just \"enabled\" or not. But it is way more complex than that. Tip If you are in a hurry or don't care, continue with the next sections for step by step instructions to set everything up with different techniques. To learn the basics of HTTPS , from a consumer perspective, check https://howhttps.works/ . Now, from a developer's perspective , here are several things to have in mind while thinking about HTTPS: For HTTPS, the server needs to have \"certificates\" generated by a third party . Those certificates are actually acquired from the third party, not \"generated\". Certificates have a lifetime . They expire . And then they need to be renewed , acquired again from the third party. The encryption of the connection happens at the TCP level . That's one layer below HTTP . So, the certificate and encryption handling is done before HTTP . TCP doesn't know about \"domains\" . Only about IP addresses. The information about the specific domain requested goes in the HTTP data . The HTTPS certificates \"certify\" a certain domain , but the protocol and encryption happen at the TCP level, before knowing which domain is being dealt with. By default , that would mean that you can only have one HTTPS certificate per IP address . No matter how big your server is or how small each application you have on it might be. There is a solution to this, however. There's an extension to the TLS protocol (the one handling the encryption at the TCP level, before HTTP) called SNI . This SNI extension allows one single server (with a single IP address ) to have several HTTPS certificates and serve multiple HTTPS domains/applications . For this to work, a single component (program) running on the server, listening on the public IP address , must have all the HTTPS certificates in the server. After obtaining a secure connection, the communication protocol is still HTTP . The contents are encrypted , even though they are being sent with the HTTP protocol . It is a common practice to have one program/HTTP server running on the server (the machine, host, etc.) and managing all the HTTPS parts : receiving the encrypted HTTPS requests , sending the decrypted HTTP requests to the actual HTTP application running in the same server (the FastAPI application, in this case), take the HTTP response from the application, encrypt it using the appropriate HTTPS certificate and sending it back to the client using HTTPS . This server is often called a TLS Termination Proxy . Some of the options you could use as a TLS Termination Proxy are: Traefik (that can also handle certificate renewals) Caddy (that can also handle certificate renewals) Nginx HAProxy Let's Encrypt \u00b6 Before Let's Encrypt, these HTTPS certificates were sold by trusted third parties. The process to acquire one of these certificates used to be cumbersome, require quite some paperwork and the certificates were quite expensive. But then Let's Encrypt was created. It is a project from the Linux Foundation. It provides HTTPS certificates for free , in an automated way. These certificates use all the standard cryptographic security, and are short-lived (about 3 months), so the security is actually better because of their reduced lifespan. The domains are securely verified and the certificates are generated automatically. This also allows automating the renewal of these certificates. The idea is to automate the acquisition and renewal of these certificates so that you can have secure HTTPS, for free, forever . HTTPS for Developers \u00b6 Here's an example of how an HTTPS API could look like, step by step, paying attention mainly to the ideas important for developers. Domain Name \u00b6 It would probably all start by you acquiring some domain name . Then, you would configure it in a DNS server (possibly your same cloud provider). You would probably get a cloud server (a virtual machine) or something similar, and it would have a fixed public IP address . In the DNS server(s) you would configure a record (an \" A record \") to point your domain to the public IP address of your server . You would probably do this just once, the first time, when setting everything up. Tip This Domain Name part is way before HTTPS, but as everything depends on the domain and the IP address, it's worth mentioning it here. DNS \u00b6 Now let's focus on all the actual HTTPS parts. First, the browser would check with the DNS servers what is the IP for the domain , in this case, someapp.example.com . The DNS servers would tell the browser to use some specific IP address . That would be the public IP address used by your server, that you configured in the DNS servers. TLS Handshake Start \u00b6 The browser would then communicate with that IP address on port 443 (the HTTPS port). The first part of the communication is just to establish the connection between the client and the server and to decide the cryptographic keys they will use, etc. This interaction between the client and the server to establish the TLS connection is called the TLS handshake . TLS with SNI Extension \u00b6 Only one process in the server can be listening on a specific port in a specific IP address . There could be other processes listening on other ports in the same IP address, but only one for each combination of IP address and port. TLS (HTTPS) uses the specific port 443 by default. So that's the port we would need. As only one process can be listening on this port, the process that would do it would be the TLS Termination Proxy . The TLS Termination Proxy would have access to one or more TLS certificates (HTTPS certificates). Using the SNI extension discussed above, the TLS Termination Proxy would check which of the TLS (HTTPS) certificates available it should use for this connection, using the one that matches the domain expected by the client. In this case, it would use the certificate for someapp.example.com . The client already trusts the entity that generated that TLS certificate (in this case Let's Encrypt, but we'll see about that later), so it can verify that the certificate is valid. Then, using the certificate, the client and the TLS Termination Proxy decide how to encrypt the rest of the TCP communication . This completes the TLS Handshake part. After this, the client and the server have an encrypted TCP connection , this is what TLS provides. And then they can use that connection to start the actual HTTP communication . And that's what HTTPS is, it's just plain HTTP inside a secure TLS connection instead of a pure (unencrypted) TCP connection. Tip Notice that the encryption of the communication happens at the TCP level , not at the HTTP level. HTTPS Request \u00b6 Now that the client and server (specifically the browser and the TLS Termination Proxy) have an encrypted TCP connection , they can start the HTTP communication . So, the client sends an HTTPS request . This is just an HTTP request through an encrypted TLS connection. Decrypt the Request \u00b6 The TLS Termination Proxy would use the encryption agreed to decrypt the request , and would transmit the plain (decrypted) HTTP request to the process running the application (for example a process with Uvicorn running the FastAPI application). HTTP Response \u00b6 The application would process the request and send a plain (unencrypted) HTTP response to the TLS Termination Proxy. HTTPS Response \u00b6 The TLS Termination Proxy would then encrypt the response using the cryptography agreed before (that started with the certificate for someapp.example.com ), and send it back to the browser. Next, the browser would verify that the response is valid and encrypted with the right cryptographic key, etc. It would then decrypt the response and process it. The client (browser) will know that the response comes from the correct server because it is using the cryptography they agreed using the HTTPS certificate before. Multiple Applications \u00b6 In the same server (or servers), there could be multiple applications , for example, other API programs or a database. Only one process can be handling the specific IP and port (the TLS Termination Proxy in our example) but the other applications/processes can be running on the server(s) too, as long as they don't try to use the same combination of public IP and port . That way, the TLS Termination Proxy could handle HTTPS and certificates for multiple domains , for multiple applications, and then transmit the requests to the right application in each case. Certificate Renewal \u00b6 At some point in the future, each certificate would expire (about 3 months after acquiring it). And then, there would be another program (in some cases it's another program, in some cases it could be the same TLS Termination Proxy) that would talk to Let's Encrypt, and renew the certificate(s). The TLS certificates are associated with a domain name , not with an IP address. So, to renew the certificates, the renewal program needs to prove to the authority (Let's Encrypt) that it indeed \"owns\" and controls that domain . To do that, and to accommodate different application needs, there are several ways it can do it. Some popular ways are: Modify some DNS records . For this, the renewal program needs to support the APIs of the DNS provider, so, depending on the DNS provider you are using, this might or might not be an option. Run as a server (at least during the certificate acquisition process) on the public IP address associated with the domain. As we said above, only one process can be listening on a specific IP and port. This is one of the reasons why it's very useful when the same TLS Termination Proxy also takes care of the certificate renewal process. Otherwise, you might have to stop the TLS Termination Proxy momentarily, start the renewal program to acquire the certificates, then configure them with the TLS Termination Proxy, and then restart the TLS Termination Proxy. This is not ideal, as your app(s) will not be available during the time that the TLS Termination Proxy is off. All this renewal process, while still serving the app, is one of the main reasons why you would want to have a separate system to handle HTTPS with a TLS Termination Proxy instead of just using the TLS certificates with the application server directly (e.g. Uvicorn). Recap \u00b6 Having HTTPS is very important, and quite critical in most cases. Most of the effort you as a developer have to put around HTTPS is just about understanding these concepts and how they work. But once you know the basic information of HTTPS for developers you can easily combine and configure different tools to help you manage everything in a simple way. In some of the next chapters, I'll show you several concrete examples of how to set up HTTPS for FastAPI applications. \ud83d\udd12","title":"About HTTPS"},{"location":"deployment/https/#about-https","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . It is easy to assume that HTTPS is something that is just \"enabled\" or not. But it is way more complex than that. Tip If you are in a hurry or don't care, continue with the next sections for step by step instructions to set everything up with different techniques. To learn the basics of HTTPS , from a consumer perspective, check https://howhttps.works/ . Now, from a developer's perspective , here are several things to have in mind while thinking about HTTPS: For HTTPS, the server needs to have \"certificates\" generated by a third party . Those certificates are actually acquired from the third party, not \"generated\". Certificates have a lifetime . They expire . And then they need to be renewed , acquired again from the third party. The encryption of the connection happens at the TCP level . That's one layer below HTTP . So, the certificate and encryption handling is done before HTTP . TCP doesn't know about \"domains\" . Only about IP addresses. The information about the specific domain requested goes in the HTTP data . The HTTPS certificates \"certify\" a certain domain , but the protocol and encryption happen at the TCP level, before knowing which domain is being dealt with. By default , that would mean that you can only have one HTTPS certificate per IP address . No matter how big your server is or how small each application you have on it might be. There is a solution to this, however. There's an extension to the TLS protocol (the one handling the encryption at the TCP level, before HTTP) called SNI . This SNI extension allows one single server (with a single IP address ) to have several HTTPS certificates and serve multiple HTTPS domains/applications . For this to work, a single component (program) running on the server, listening on the public IP address , must have all the HTTPS certificates in the server. After obtaining a secure connection, the communication protocol is still HTTP . The contents are encrypted , even though they are being sent with the HTTP protocol . It is a common practice to have one program/HTTP server running on the server (the machine, host, etc.) and managing all the HTTPS parts : receiving the encrypted HTTPS requests , sending the decrypted HTTP requests to the actual HTTP application running in the same server (the FastAPI application, in this case), take the HTTP response from the application, encrypt it using the appropriate HTTPS certificate and sending it back to the client using HTTPS . This server is often called a TLS Termination Proxy . Some of the options you could use as a TLS Termination Proxy are: Traefik (that can also handle certificate renewals) Caddy (that can also handle certificate renewals) Nginx HAProxy","title":"About HTTPS"},{"location":"deployment/https/#lets-encrypt","text":"Before Let's Encrypt, these HTTPS certificates were sold by trusted third parties. The process to acquire one of these certificates used to be cumbersome, require quite some paperwork and the certificates were quite expensive. But then Let's Encrypt was created. It is a project from the Linux Foundation. It provides HTTPS certificates for free , in an automated way. These certificates use all the standard cryptographic security, and are short-lived (about 3 months), so the security is actually better because of their reduced lifespan. The domains are securely verified and the certificates are generated automatically. This also allows automating the renewal of these certificates. The idea is to automate the acquisition and renewal of these certificates so that you can have secure HTTPS, for free, forever .","title":"Let's Encrypt"},{"location":"deployment/https/#https-for-developers","text":"Here's an example of how an HTTPS API could look like, step by step, paying attention mainly to the ideas important for developers.","title":"HTTPS for Developers"},{"location":"deployment/https/#domain-name","text":"It would probably all start by you acquiring some domain name . Then, you would configure it in a DNS server (possibly your same cloud provider). You would probably get a cloud server (a virtual machine) or something similar, and it would have a fixed public IP address . In the DNS server(s) you would configure a record (an \" A record \") to point your domain to the public IP address of your server . You would probably do this just once, the first time, when setting everything up. Tip This Domain Name part is way before HTTPS, but as everything depends on the domain and the IP address, it's worth mentioning it here.","title":"Domain Name"},{"location":"deployment/https/#dns","text":"Now let's focus on all the actual HTTPS parts. First, the browser would check with the DNS servers what is the IP for the domain , in this case, someapp.example.com . The DNS servers would tell the browser to use some specific IP address . That would be the public IP address used by your server, that you configured in the DNS servers.","title":"DNS"},{"location":"deployment/https/#tls-handshake-start","text":"The browser would then communicate with that IP address on port 443 (the HTTPS port). The first part of the communication is just to establish the connection between the client and the server and to decide the cryptographic keys they will use, etc. This interaction between the client and the server to establish the TLS connection is called the TLS handshake .","title":"TLS Handshake Start"},{"location":"deployment/https/#tls-with-sni-extension","text":"Only one process in the server can be listening on a specific port in a specific IP address . There could be other processes listening on other ports in the same IP address, but only one for each combination of IP address and port. TLS (HTTPS) uses the specific port 443 by default. So that's the port we would need. As only one process can be listening on this port, the process that would do it would be the TLS Termination Proxy . The TLS Termination Proxy would have access to one or more TLS certificates (HTTPS certificates). Using the SNI extension discussed above, the TLS Termination Proxy would check which of the TLS (HTTPS) certificates available it should use for this connection, using the one that matches the domain expected by the client. In this case, it would use the certificate for someapp.example.com . The client already trusts the entity that generated that TLS certificate (in this case Let's Encrypt, but we'll see about that later), so it can verify that the certificate is valid. Then, using the certificate, the client and the TLS Termination Proxy decide how to encrypt the rest of the TCP communication . This completes the TLS Handshake part. After this, the client and the server have an encrypted TCP connection , this is what TLS provides. And then they can use that connection to start the actual HTTP communication . And that's what HTTPS is, it's just plain HTTP inside a secure TLS connection instead of a pure (unencrypted) TCP connection. Tip Notice that the encryption of the communication happens at the TCP level , not at the HTTP level.","title":"TLS with SNI Extension"},{"location":"deployment/https/#https-request","text":"Now that the client and server (specifically the browser and the TLS Termination Proxy) have an encrypted TCP connection , they can start the HTTP communication . So, the client sends an HTTPS request . This is just an HTTP request through an encrypted TLS connection.","title":"HTTPS Request"},{"location":"deployment/https/#decrypt-the-request","text":"The TLS Termination Proxy would use the encryption agreed to decrypt the request , and would transmit the plain (decrypted) HTTP request to the process running the application (for example a process with Uvicorn running the FastAPI application).","title":"Decrypt the Request"},{"location":"deployment/https/#http-response","text":"The application would process the request and send a plain (unencrypted) HTTP response to the TLS Termination Proxy.","title":"HTTP Response"},{"location":"deployment/https/#https-response","text":"The TLS Termination Proxy would then encrypt the response using the cryptography agreed before (that started with the certificate for someapp.example.com ), and send it back to the browser. Next, the browser would verify that the response is valid and encrypted with the right cryptographic key, etc. It would then decrypt the response and process it. The client (browser) will know that the response comes from the correct server because it is using the cryptography they agreed using the HTTPS certificate before.","title":"HTTPS Response"},{"location":"deployment/https/#multiple-applications","text":"In the same server (or servers), there could be multiple applications , for example, other API programs or a database. Only one process can be handling the specific IP and port (the TLS Termination Proxy in our example) but the other applications/processes can be running on the server(s) too, as long as they don't try to use the same combination of public IP and port . That way, the TLS Termination Proxy could handle HTTPS and certificates for multiple domains , for multiple applications, and then transmit the requests to the right application in each case.","title":"Multiple Applications"},{"location":"deployment/https/#certificate-renewal","text":"At some point in the future, each certificate would expire (about 3 months after acquiring it). And then, there would be another program (in some cases it's another program, in some cases it could be the same TLS Termination Proxy) that would talk to Let's Encrypt, and renew the certificate(s). The TLS certificates are associated with a domain name , not with an IP address. So, to renew the certificates, the renewal program needs to prove to the authority (Let's Encrypt) that it indeed \"owns\" and controls that domain . To do that, and to accommodate different application needs, there are several ways it can do it. Some popular ways are: Modify some DNS records . For this, the renewal program needs to support the APIs of the DNS provider, so, depending on the DNS provider you are using, this might or might not be an option. Run as a server (at least during the certificate acquisition process) on the public IP address associated with the domain. As we said above, only one process can be listening on a specific IP and port. This is one of the reasons why it's very useful when the same TLS Termination Proxy also takes care of the certificate renewal process. Otherwise, you might have to stop the TLS Termination Proxy momentarily, start the renewal program to acquire the certificates, then configure them with the TLS Termination Proxy, and then restart the TLS Termination Proxy. This is not ideal, as your app(s) will not be available during the time that the TLS Termination Proxy is off. All this renewal process, while still serving the app, is one of the main reasons why you would want to have a separate system to handle HTTPS with a TLS Termination Proxy instead of just using the TLS certificates with the application server directly (e.g. Uvicorn).","title":"Certificate Renewal"},{"location":"deployment/https/#recap","text":"Having HTTPS is very important, and quite critical in most cases. Most of the effort you as a developer have to put around HTTPS is just about understanding these concepts and how they work. But once you know the basic information of HTTPS for developers you can easily combine and configure different tools to help you manage everything in a simple way. In some of the next chapters, I'll show you several concrete examples of how to set up HTTPS for FastAPI applications. \ud83d\udd12","title":"Recap"},{"location":"deployment/manually/","text":"Run a Server Manually - Uvicorn \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . The main thing you need to run a FastAPI application in a remote server machine is an ASGI server program like Uvicorn . There are 3 main alternatives: Uvicorn : a high performance ASGI server. Hypercorn : an ASGI server compatible with HTTP/2 and Trio among other features. Daphne : the ASGI server built for Django Channels. Server Machine and Server Program \u00b6 There's a small detail about names to have in mind. \ud83d\udca1 The word \" server \" is commonly used to refer to both the remote/cloud computer (the physical or virtual machine) and also the program that is running on that machine (e.g. Uvicorn). Just have that in mind when you read \"server\" in general, it could refer to one of those two things. When referring to the remote machine, it's common to call it server , but also machine , VM (virtual machine), node . Those all refer to some type of remote machine, normally running Linux, where you run programs. Install the Server Program \u00b6 You can install an ASGI compatible server with: Uvicorn Hypercorn Uvicorn , a lightning-fast ASGI server, built on uvloop and httptools. $ pip install \"uvicorn[standard]\" ---> 100% Tip By adding the standard , Uvicorn will install and use some recommended extra dependencies. That including uvloop , the high-performance drop-in replacement for asyncio , that provides the big concurrency performance boost. Hypercorn , an ASGI server also compatible with HTTP/2. $ pip install hypercorn ---> 100% ...or any other ASGI server. Run the Server Program \u00b6 You can then run your application the same way you have done in the tutorials, but without the --reload option, e.g.: Uvicorn Hypercorn $ uvicorn main:app --host 0 .0.0.0 --port 80 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit) $ hypercorn main:app --bind 0 .0.0.0:80 Running on 0.0.0.0:8080 over http (CTRL + C to quit) Warning Remember to remove the --reload option if you were using it. The --reload option consumes much more resources, is more unstable, etc. It helps a lot during development , but you shouldn't use it in production . Hypercorn with Trio \u00b6 Starlette and FastAPI are based on AnyIO , which makes them compatible with both Python's standard library asyncio and Trio . Nevertheless, Uvicorn is currently only compatible with asyncio, and it normally uses uvloop , the high-performance drop-in replacement for asyncio . But if you want to directly use Trio , then you can use Hypercorn as it supports it. \u2728 Install Hypercorn with Trio \u00b6 First you need to install Hypercorn with Trio support: $ pip install \"hypercorn[trio]\" ---> 100% Run with Trio \u00b6 Then you can pass the command line option --worker-class with the value trio : $ hypercorn main:app --worker-class trio And that will start Hypercorn with your app using Trio as the backend. Now you can use Trio internally in your app. Or even better, you can use AnyIO, to keep your code compatible with both Trio and asyncio. \ud83c\udf89 Deployment Concepts \u00b6 These examples run the server program (e.g Uvicorn), starting a single process , listening on all the IPs ( 0.0.0.0 ) on a predefined port (e.g. 80 ). This is the basic idea. But you will probably want to take care of some additional things, like: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting I'll tell you more about each of these concepts, how to think about them, and some concrete examples with strategies to handle them in the next chapters. \ud83d\ude80","title":"Run a Server Manually - Uvicorn"},{"location":"deployment/manually/#run-a-server-manually-uvicorn","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . The main thing you need to run a FastAPI application in a remote server machine is an ASGI server program like Uvicorn . There are 3 main alternatives: Uvicorn : a high performance ASGI server. Hypercorn : an ASGI server compatible with HTTP/2 and Trio among other features. Daphne : the ASGI server built for Django Channels.","title":"Run a Server Manually - Uvicorn"},{"location":"deployment/manually/#server-machine-and-server-program","text":"There's a small detail about names to have in mind. \ud83d\udca1 The word \" server \" is commonly used to refer to both the remote/cloud computer (the physical or virtual machine) and also the program that is running on that machine (e.g. Uvicorn). Just have that in mind when you read \"server\" in general, it could refer to one of those two things. When referring to the remote machine, it's common to call it server , but also machine , VM (virtual machine), node . Those all refer to some type of remote machine, normally running Linux, where you run programs.","title":"Server Machine and Server Program"},{"location":"deployment/manually/#install-the-server-program","text":"You can install an ASGI compatible server with: Uvicorn Hypercorn Uvicorn , a lightning-fast ASGI server, built on uvloop and httptools. $ pip install \"uvicorn[standard]\" ---> 100% Tip By adding the standard , Uvicorn will install and use some recommended extra dependencies. That including uvloop , the high-performance drop-in replacement for asyncio , that provides the big concurrency performance boost. Hypercorn , an ASGI server also compatible with HTTP/2. $ pip install hypercorn ---> 100% ...or any other ASGI server.","title":"Install the Server Program"},{"location":"deployment/manually/#run-the-server-program","text":"You can then run your application the same way you have done in the tutorials, but without the --reload option, e.g.: Uvicorn Hypercorn $ uvicorn main:app --host 0 .0.0.0 --port 80 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit) $ hypercorn main:app --bind 0 .0.0.0:80 Running on 0.0.0.0:8080 over http (CTRL + C to quit) Warning Remember to remove the --reload option if you were using it. The --reload option consumes much more resources, is more unstable, etc. It helps a lot during development , but you shouldn't use it in production .","title":"Run the Server Program"},{"location":"deployment/manually/#hypercorn-with-trio","text":"Starlette and FastAPI are based on AnyIO , which makes them compatible with both Python's standard library asyncio and Trio . Nevertheless, Uvicorn is currently only compatible with asyncio, and it normally uses uvloop , the high-performance drop-in replacement for asyncio . But if you want to directly use Trio , then you can use Hypercorn as it supports it. \u2728","title":"Hypercorn with Trio"},{"location":"deployment/manually/#install-hypercorn-with-trio","text":"First you need to install Hypercorn with Trio support: $ pip install \"hypercorn[trio]\" ---> 100%","title":"Install Hypercorn with Trio"},{"location":"deployment/manually/#run-with-trio","text":"Then you can pass the command line option --worker-class with the value trio : $ hypercorn main:app --worker-class trio And that will start Hypercorn with your app using Trio as the backend. Now you can use Trio internally in your app. Or even better, you can use AnyIO, to keep your code compatible with both Trio and asyncio. \ud83c\udf89","title":"Run with Trio"},{"location":"deployment/manually/#deployment-concepts","text":"These examples run the server program (e.g Uvicorn), starting a single process , listening on all the IPs ( 0.0.0.0 ) on a predefined port (e.g. 80 ). This is the basic idea. But you will probably want to take care of some additional things, like: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting I'll tell you more about each of these concepts, how to think about them, and some concrete examples with strategies to handle them in the next chapters. \ud83d\ude80","title":"Deployment Concepts"},{"location":"deployment/server-workers/","text":"Server Workers - Gunicorn with Uvicorn \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Let's check back those deployment concepts from before: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting Up to this point, with all the tutorials in the docs, you have probably been running a server program like Uvicorn, running a single process . When deploying applications you will probably want to have some replication of processes to take advantage of multiple cores and to be able to handle more requests. As you saw in the previous chapter about Deployment Concepts , there are multiple strategies you can use. Here I'll show you how to use Gunicorn with Uvicorn worker processes . Info If you are using containers, for example with Docker or Kubernetes, I'll tell you more about that in the next chapter: FastAPI in Containers - Docker . In particular, when running on Kubernetes you will probably not want to use Gunicorn and instead run a single Uvicorn process per container , but I'll tell you about it later in that chapter. Gunicorn with Uvicorn Workers \u00b6 Gunicorn is mainly an application server using the WSGI standard . That means that Gunicorn can serve applications like Flask and Django. Gunicorn by itself is not compatible with FastAPI , as FastAPI uses the newest ASGI standard . But Gunicorn supports working as a process manager and allowing users to tell it which specific worker process class to use. Then Gunicorn would start one or more worker processes using that class. And Uvicorn has a Gunicorn-compatible worker class . Using that combination, Gunicorn would act as a process manager , listening on the port and the IP . And it would transmit the communication to the worker processes running the Uvicorn class . And then the Gunicorn-compatible Uvicorn worker class would be in charge of converting the data sent by Gunicorn to the ASGI standard for FastAPI to use it. Install Gunicorn and Uvicorn \u00b6 $ pip install \"uvicorn[standard]\" gunicorn ---> 100% That will install both Uvicorn with the standard extra packages (to get high performance) and Gunicorn. Run Gunicorn with Uvicorn Workers \u00b6 Then you can run Gunicorn with: $ gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0 .0.0.0:80 [19499] [INFO] Starting gunicorn 20.1.0 [19499] [INFO] Listening at: http://0.0.0.0:80 (19499) [19499] [INFO] Using worker: uvicorn.workers.UvicornWorker [19511] [INFO] Booting worker with pid: 19511 [19513] [INFO] Booting worker with pid: 19513 [19514] [INFO] Booting worker with pid: 19514 [19515] [INFO] Booting worker with pid: 19515 [19511] [INFO] Started server process [19511] [19511] [INFO] Waiting for application startup. [19511] [INFO] Application startup complete. [19513] [INFO] Started server process [19513] [19513] [INFO] Waiting for application startup. [19513] [INFO] Application startup complete. [19514] [INFO] Started server process [19514] [19514] [INFO] Waiting for application startup. [19514] [INFO] Application startup complete. [19515] [INFO] Started server process [19515] [19515] [INFO] Waiting for application startup. [19515] [INFO] Application startup complete. Let's see what each of those options mean: main:app : This is the same syntax used by Uvicorn, main means the Python module named \" main \", so, a file main.py . And app is the name of the variable that is the FastAPI application. You can imagine that main:app is equivalent to a Python import statement like: from main import app So, the colon in main:app would be equivalent to the Python import part in from main import app . --workers : The number of worker processes to use, each will run a Uvicorn worker, in this case, 4 workers. --worker-class : The Gunicorn-compatible worker class to use in the worker processes. Here we pass the class that Gunicorn can import and use with: import uvicorn.workers.UvicornWorker --bind : This tells Gunicorn the IP and the port to listen to, using a colon ( : ) to separate the IP and the port. If you were running Uvicorn directly, instead of --bind 0.0.0.0:80 (the Gunicorn option) you would use --host 0.0.0.0 and --port 80 . In the output, you can see that it shows the PID (process ID) of each process (it's just a number). You can see that: The Gunicorn process manager starts with PID 19499 (in your case it will be a different number). Then it starts Listening at: http://0.0.0.0:80 . Then it detects that it has to use the worker class at uvicorn.workers.UvicornWorker . And then it starts 4 workers , each with its own PID: 19511 , 19513 , 19514 , and 19515 . Gunicorn would also take care of managing dead processes and restarting new ones if needed to keep the number of workers. So that helps in part with the restart concept from the list above. Nevertheless, you would probably also want to have something outside making sure to restart Gunicorn if necessary, and also to run it on startup , etc. Uvicorn with Workers \u00b6 Uvicorn also has an option to start and run several worker processes . Nevertheless, as of now, Uvicorn's capabilities for handling worker processes are more limited than Gunicorn's. So, if you want to have a process manager at this level (at the Python level), then it might be better to try with Gunicorn as the process manager. In any case, you would run it like this: $ uvicorn main:app --host 0 .0.0.0 --port 8080 --workers 4 <font color=\"#A6E22E\">INFO</font>: Uvicorn running on <b>http://0.0.0.0:8080</b> (Press CTRL+C to quit) <font color=\"#A6E22E\">INFO</font>: Started parent process [<font color=\"#A1EFE4\"><b>27365</b></font>] <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27368</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27369</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27370</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27367</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. The only new option here is --workers telling Uvicorn to start 4 worker processes. You can also see that it shows the PID of each process, 27365 for the parent process (this is the process manager ) and one for each worker process: 27368 , 27369 , 27370 , and 27367 . Deployment Concepts \u00b6 Here you saw how to use Gunicorn (or Uvicorn) managing Uvicorn worker processes to parallelize the execution of the application, take advantage of multiple cores in the CPU, and be able to serve more requests . From the list of deployment concepts from above, using workers would mainly help with the replication part, and a little bit with the restarts , but you still need to take care of the others: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting Containers and Docker \u00b6 In the next chapter about FastAPI in Containers - Docker I'll tell some strategies you could use to handle the other deployment concepts . I'll also show you the official Docker image that includes Gunicorn with Uvicorn workers and some default configurations that can be useful for simple cases. There I'll also show you how to build your own image from scratch to run a single Uvicorn process (without Gunicorn). It is a simple process and is probably what you would want to do when using a distributed container management system like Kubernetes . Recap \u00b6 You can use Gunicorn (or also Uvicorn) as a process manager with Uvicorn workers to take advantage of multi-core CPUs , to run multiple processes in parallel . You could use these tools and ideas if you are setting up your own deployment system while taking care of the other deployment concepts yourself. Check out the next chapter to learn about FastAPI with containers (e.g. Docker and Kubernetes). You will see that those tools have simple ways to solve the other deployment concepts as well. \u2728","title":"Server Workers - Gunicorn with Uvicorn"},{"location":"deployment/server-workers/#server-workers-gunicorn-with-uvicorn","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Let's check back those deployment concepts from before: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting Up to this point, with all the tutorials in the docs, you have probably been running a server program like Uvicorn, running a single process . When deploying applications you will probably want to have some replication of processes to take advantage of multiple cores and to be able to handle more requests. As you saw in the previous chapter about Deployment Concepts , there are multiple strategies you can use. Here I'll show you how to use Gunicorn with Uvicorn worker processes . Info If you are using containers, for example with Docker or Kubernetes, I'll tell you more about that in the next chapter: FastAPI in Containers - Docker . In particular, when running on Kubernetes you will probably not want to use Gunicorn and instead run a single Uvicorn process per container , but I'll tell you about it later in that chapter.","title":"Server Workers - Gunicorn with Uvicorn"},{"location":"deployment/server-workers/#gunicorn-with-uvicorn-workers","text":"Gunicorn is mainly an application server using the WSGI standard . That means that Gunicorn can serve applications like Flask and Django. Gunicorn by itself is not compatible with FastAPI , as FastAPI uses the newest ASGI standard . But Gunicorn supports working as a process manager and allowing users to tell it which specific worker process class to use. Then Gunicorn would start one or more worker processes using that class. And Uvicorn has a Gunicorn-compatible worker class . Using that combination, Gunicorn would act as a process manager , listening on the port and the IP . And it would transmit the communication to the worker processes running the Uvicorn class . And then the Gunicorn-compatible Uvicorn worker class would be in charge of converting the data sent by Gunicorn to the ASGI standard for FastAPI to use it.","title":"Gunicorn with Uvicorn Workers"},{"location":"deployment/server-workers/#install-gunicorn-and-uvicorn","text":"$ pip install \"uvicorn[standard]\" gunicorn ---> 100% That will install both Uvicorn with the standard extra packages (to get high performance) and Gunicorn.","title":"Install Gunicorn and Uvicorn"},{"location":"deployment/server-workers/#run-gunicorn-with-uvicorn-workers","text":"Then you can run Gunicorn with: $ gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0 .0.0.0:80 [19499] [INFO] Starting gunicorn 20.1.0 [19499] [INFO] Listening at: http://0.0.0.0:80 (19499) [19499] [INFO] Using worker: uvicorn.workers.UvicornWorker [19511] [INFO] Booting worker with pid: 19511 [19513] [INFO] Booting worker with pid: 19513 [19514] [INFO] Booting worker with pid: 19514 [19515] [INFO] Booting worker with pid: 19515 [19511] [INFO] Started server process [19511] [19511] [INFO] Waiting for application startup. [19511] [INFO] Application startup complete. [19513] [INFO] Started server process [19513] [19513] [INFO] Waiting for application startup. [19513] [INFO] Application startup complete. [19514] [INFO] Started server process [19514] [19514] [INFO] Waiting for application startup. [19514] [INFO] Application startup complete. [19515] [INFO] Started server process [19515] [19515] [INFO] Waiting for application startup. [19515] [INFO] Application startup complete. Let's see what each of those options mean: main:app : This is the same syntax used by Uvicorn, main means the Python module named \" main \", so, a file main.py . And app is the name of the variable that is the FastAPI application. You can imagine that main:app is equivalent to a Python import statement like: from main import app So, the colon in main:app would be equivalent to the Python import part in from main import app . --workers : The number of worker processes to use, each will run a Uvicorn worker, in this case, 4 workers. --worker-class : The Gunicorn-compatible worker class to use in the worker processes. Here we pass the class that Gunicorn can import and use with: import uvicorn.workers.UvicornWorker --bind : This tells Gunicorn the IP and the port to listen to, using a colon ( : ) to separate the IP and the port. If you were running Uvicorn directly, instead of --bind 0.0.0.0:80 (the Gunicorn option) you would use --host 0.0.0.0 and --port 80 . In the output, you can see that it shows the PID (process ID) of each process (it's just a number). You can see that: The Gunicorn process manager starts with PID 19499 (in your case it will be a different number). Then it starts Listening at: http://0.0.0.0:80 . Then it detects that it has to use the worker class at uvicorn.workers.UvicornWorker . And then it starts 4 workers , each with its own PID: 19511 , 19513 , 19514 , and 19515 . Gunicorn would also take care of managing dead processes and restarting new ones if needed to keep the number of workers. So that helps in part with the restart concept from the list above. Nevertheless, you would probably also want to have something outside making sure to restart Gunicorn if necessary, and also to run it on startup , etc.","title":"Run Gunicorn with Uvicorn Workers"},{"location":"deployment/server-workers/#uvicorn-with-workers","text":"Uvicorn also has an option to start and run several worker processes . Nevertheless, as of now, Uvicorn's capabilities for handling worker processes are more limited than Gunicorn's. So, if you want to have a process manager at this level (at the Python level), then it might be better to try with Gunicorn as the process manager. In any case, you would run it like this: $ uvicorn main:app --host 0 .0.0.0 --port 8080 --workers 4 <font color=\"#A6E22E\">INFO</font>: Uvicorn running on <b>http://0.0.0.0:8080</b> (Press CTRL+C to quit) <font color=\"#A6E22E\">INFO</font>: Started parent process [<font color=\"#A1EFE4\"><b>27365</b></font>] <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27368</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27369</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27370</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27367</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. The only new option here is --workers telling Uvicorn to start 4 worker processes. You can also see that it shows the PID of each process, 27365 for the parent process (this is the process manager ) and one for each worker process: 27368 , 27369 , 27370 , and 27367 .","title":"Uvicorn with Workers"},{"location":"deployment/server-workers/#deployment-concepts","text":"Here you saw how to use Gunicorn (or Uvicorn) managing Uvicorn worker processes to parallelize the execution of the application, take advantage of multiple cores in the CPU, and be able to serve more requests . From the list of deployment concepts from above, using workers would mainly help with the replication part, and a little bit with the restarts , but you still need to take care of the others: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting","title":"Deployment Concepts"},{"location":"deployment/server-workers/#containers-and-docker","text":"In the next chapter about FastAPI in Containers - Docker I'll tell some strategies you could use to handle the other deployment concepts . I'll also show you the official Docker image that includes Gunicorn with Uvicorn workers and some default configurations that can be useful for simple cases. There I'll also show you how to build your own image from scratch to run a single Uvicorn process (without Gunicorn). It is a simple process and is probably what you would want to do when using a distributed container management system like Kubernetes .","title":"Containers and Docker"},{"location":"deployment/server-workers/#recap","text":"You can use Gunicorn (or also Uvicorn) as a process manager with Uvicorn workers to take advantage of multi-core CPUs , to run multiple processes in parallel . You could use these tools and ideas if you are setting up your own deployment system while taking care of the other deployment concepts yourself. Check out the next chapter to learn about FastAPI with containers (e.g. Docker and Kubernetes). You will see that those tools have simple ways to solve the other deployment concepts as well. \u2728","title":"Recap"},{"location":"deployment/versions/","text":"About FastAPI versions \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI is already being used in production in many applications and systems. And the test coverage is kept at 100%. But its development is still moving quickly. New features are added frequently, bugs are fixed regularly, and the code is still continuously improving. That's why the current versions are still 0.x.x , this reflects that each version could potentially have breaking changes. This follows the Semantic Versioning conventions. You can create production applications with FastAPI right now (and you have probably been doing it for some time), you just have to make sure that you use a version that works correctly with the rest of your code. Pin your fastapi version \u00b6 The first thing you should do is to \"pin\" the version of FastAPI you are using to the specific latest version that you know works correctly for your application. For example, let's say you are using version 0.45.0 in your app. If you use a requirements.txt file you could specify the version with: fastapi==0.45.0 that would mean that you would use exactly the version 0.45.0 . Or you could also pin it with: fastapi>=0.45.0,<0.46.0 that would mean that you would use the versions 0.45.0 or above, but less than 0.46.0 , for example, a version 0.45.2 would still be accepted. If you use any other tool to manage your installations, like Poetry, Pipenv, or others, they all have a way that you can use to define specific versions for your packages. Available versions \u00b6 You can see the available versions (e.g. to check what is the current latest) in the Release Notes . About versions \u00b6 Following the Semantic Versioning conventions, any version below 1.0.0 could potentially add breaking changes. FastAPI also follows the convention that any \"PATCH\" version change is for bug fixes and non-breaking changes. Tip The \"PATCH\" is the last number, for example, in 0.2.3 , the PATCH version is 3 . So, you should be able to pin to a version like: fastapi>=0.45.0,<0.46.0 Breaking changes and new features are added in \"MINOR\" versions. Tip The \"MINOR\" is the number in the middle, for example, in 0.2.3 , the MINOR version is 2 . Upgrading the FastAPI versions \u00b6 You should add tests for your app. With FastAPI it's very easy (thanks to Starlette), check the docs: Testing After you have tests, then you can upgrade the FastAPI version to a more recent one, and make sure that all your code is working correctly by running your tests. If everything is working, or after you make the necessary changes, and all your tests are passing, then you can pin your fastapi to that new recent version. About Starlette \u00b6 You shouldn't pin the version of starlette . Different versions of FastAPI will use a specific newer version of Starlette. So, you can just let FastAPI use the correct Starlette version. About Pydantic \u00b6 Pydantic includes the tests for FastAPI with its own tests, so new versions of Pydantic (above 1.0.0 ) are always compatible with FastAPI. You can pin Pydantic to any version above 1.0.0 that works for you and below 2.0.0 . For example: pydantic>=1.2.0,<2.0.0","title":"About FastAPI versions"},{"location":"deployment/versions/#about-fastapi-versions","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI is already being used in production in many applications and systems. And the test coverage is kept at 100%. But its development is still moving quickly. New features are added frequently, bugs are fixed regularly, and the code is still continuously improving. That's why the current versions are still 0.x.x , this reflects that each version could potentially have breaking changes. This follows the Semantic Versioning conventions. You can create production applications with FastAPI right now (and you have probably been doing it for some time), you just have to make sure that you use a version that works correctly with the rest of your code.","title":"About FastAPI versions"},{"location":"deployment/versions/#pin-your-fastapi-version","text":"The first thing you should do is to \"pin\" the version of FastAPI you are using to the specific latest version that you know works correctly for your application. For example, let's say you are using version 0.45.0 in your app. If you use a requirements.txt file you could specify the version with: fastapi==0.45.0 that would mean that you would use exactly the version 0.45.0 . Or you could also pin it with: fastapi>=0.45.0,<0.46.0 that would mean that you would use the versions 0.45.0 or above, but less than 0.46.0 , for example, a version 0.45.2 would still be accepted. If you use any other tool to manage your installations, like Poetry, Pipenv, or others, they all have a way that you can use to define specific versions for your packages.","title":"Pin your fastapi version"},{"location":"deployment/versions/#available-versions","text":"You can see the available versions (e.g. to check what is the current latest) in the Release Notes .","title":"Available versions"},{"location":"deployment/versions/#about-versions","text":"Following the Semantic Versioning conventions, any version below 1.0.0 could potentially add breaking changes. FastAPI also follows the convention that any \"PATCH\" version change is for bug fixes and non-breaking changes. Tip The \"PATCH\" is the last number, for example, in 0.2.3 , the PATCH version is 3 . So, you should be able to pin to a version like: fastapi>=0.45.0,<0.46.0 Breaking changes and new features are added in \"MINOR\" versions. Tip The \"MINOR\" is the number in the middle, for example, in 0.2.3 , the MINOR version is 2 .","title":"About versions"},{"location":"deployment/versions/#upgrading-the-fastapi-versions","text":"You should add tests for your app. With FastAPI it's very easy (thanks to Starlette), check the docs: Testing After you have tests, then you can upgrade the FastAPI version to a more recent one, and make sure that all your code is working correctly by running your tests. If everything is working, or after you make the necessary changes, and all your tests are passing, then you can pin your fastapi to that new recent version.","title":"Upgrading the FastAPI versions"},{"location":"deployment/versions/#about-starlette","text":"You shouldn't pin the version of starlette . Different versions of FastAPI will use a specific newer version of Starlette. So, you can just let FastAPI use the correct Starlette version.","title":"About Starlette"},{"location":"deployment/versions/#about-pydantic","text":"Pydantic includes the tests for FastAPI with its own tests, so new versions of Pydantic (above 1.0.0 ) are always compatible with FastAPI. You can pin Pydantic to any version above 1.0.0 that works for you and below 2.0.0 . For example: pydantic>=1.2.0,<2.0.0","title":"About Pydantic"},{"location":"tutorial/","text":"\u6559\u7a0b - \u7528\u6237\u6307\u5357 - \u7b80\u4ecb \u00b6 \u672c\u6559\u7a0b\u5c06\u4e00\u6b65\u6b65\u5411\u4f60\u5c55\u793a\u5982\u4f55\u4f7f\u7528 FastAPI \u7684\u7edd\u5927\u90e8\u5206\u7279\u6027\u3002 \u5404\u4e2a\u7ae0\u8282\u7684\u5185\u5bb9\u5faa\u5e8f\u6e10\u8fdb\uff0c\u4f46\u662f\u53c8\u56f4\u7ed5\u7740\u5355\u72ec\u7684\u4e3b\u9898\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u76f4\u63a5\u8df3\u8f6c\u5230\u67d0\u4e2a\u7ae0\u8282\u4ee5\u89e3\u51b3\u4f60\u7684\u7279\u5b9a\u9700\u6c42\u3002 \u672c\u6559\u7a0b\u540c\u6837\u53ef\u4ee5\u4f5c\u4e3a\u5c06\u6765\u7684\u53c2\u8003\u624b\u518c\u3002 \u4f60\u53ef\u4ee5\u968f\u65f6\u56de\u5230\u672c\u6559\u7a0b\u5e76\u67e5\u9605\u4f60\u9700\u8981\u7684\u5185\u5bb9\u3002 \u8fd0\u884c\u4ee3\u7801 \u00b6 \u6240\u6709\u4ee3\u7801\u7247\u6bb5\u90fd\u53ef\u4ee5\u590d\u5236\u540e\u76f4\u63a5\u4f7f\u7528\uff08\u5b83\u4eec\u5b9e\u9645\u4e0a\u662f\u7ecf\u8fc7\u6d4b\u8bd5\u7684 Python \u6587\u4ef6\uff09\u3002 \u8981\u8fd0\u884c\u4efb\u4f55\u793a\u4f8b\uff0c\u8bf7\u5c06\u4ee3\u7801\u590d\u5236\u5230 main.py \u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 uvicorn \uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. \u5f3a\u70c8\u5efa\u8bae\u4f60\u5728\u672c\u5730\u7f16\u5199\u6216\u590d\u5236\u4ee3\u7801\uff0c\u5bf9\u5176\u8fdb\u884c\u7f16\u8f91\u5e76\u8fd0\u884c\u3002 \u5728\u7f16\u8f91\u5668\u4e2d\u4f7f\u7528 FastAPI \u4f1a\u771f\u6b63\u5730\u5c55\u73b0\u51fa\u5b83\u7684\u4f18\u52bf\uff1a\u53ea\u9700\u8981\u7f16\u5199\u5f88\u5c11\u7684\u4ee3\u7801\uff0c\u6240\u6709\u7684\u7c7b\u578b\u68c0\u67e5\uff0c\u4ee3\u7801\u8865\u5168\u7b49\u7b49\u3002 \u5b89\u88c5 FastAPI \u00b6 \u7b2c\u4e00\u4e2a\u6b65\u9aa4\u662f\u5b89\u88c5 FastAPI\u3002 \u4e3a\u4e86\u4f7f\u7528\u672c\u6559\u7a0b\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5b89\u88c5\u6240\u6709\u7684\u53ef\u9009\u4f9d\u8d56\u53ca\u5bf9\u5e94\u529f\u80fd\uff1a $ pip install fastapi [ all ] ---> 100% ......\u4ee5\u4e0a\u5b89\u88c5\u8fd8\u5305\u62ec\u4e86 uvicorn \uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u7528\u4f5c\u8fd0\u884c\u4ee3\u7801\u7684\u670d\u52a1\u5668\u3002 Note \u4f60\u4e5f\u53ef\u4ee5\u5206\u5f00\u6765\u5b89\u88c5\u3002 \u5047\u5982\u4f60\u60f3\u5c06\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\uff0c\u4f60\u53ef\u80fd\u8981\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a pip install fastapi \u5e76\u4e14\u5b89\u88c5 uvicorn \u6765\u4f5c\u4e3a\u670d\u52a1\u5668\uff1a pip install uvicorn[standard] \u7136\u540e\u5bf9\u4f60\u60f3\u4f7f\u7528\u7684\u6bcf\u4e2a\u53ef\u9009\u4f9d\u8d56\u9879\u4e5f\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u3002 \u8fdb\u9636\u7528\u6237\u6307\u5357 \u00b6 \u5728\u672c \u6559\u7a0b-\u7528\u6237\u6307\u5357 \u4e4b\u540e\uff0c\u4f60\u53ef\u4ee5\u9605\u8bfb \u8fdb\u9636\u7528\u6237\u6307\u5357 \u3002 \u8fdb\u9636\u7528\u6237\u6307\u5357 \u4ee5\u672c\u6559\u7a0b\u4e3a\u57fa\u7840\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u6982\u5ff5\uff0c\u5e76\u6559\u6388\u4e00\u4e9b\u989d\u5916\u7684\u7279\u6027\u3002 \u4f46\u662f\u4f60\u5e94\u8be5\u5148\u9605\u8bfb \u6559\u7a0b-\u7528\u6237\u6307\u5357 \uff08\u5373\u4f60\u73b0\u5728\u6b63\u5728\u9605\u8bfb\u7684\u5185\u5bb9\uff09\u3002 \u6559\u7a0b\u7ecf\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u4f7f\u4f60\u53ef\u4ee5\u4ec5\u901a\u8fc7 \u6559\u7a0b-\u7528\u6237\u6307\u5357 \u6765\u5f00\u53d1\u4e00\u4e2a\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u7136\u540e\u6839\u636e\u4f60\u7684\u9700\u8981\uff0c\u4f7f\u7528 \u8fdb\u9636\u7528\u6237\u6307\u5357 \u4e2d\u7684\u4e00\u4e9b\u5176\u4ed6\u6982\u5ff5\uff0c\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u6269\u5c55\u5b83\u3002","title":"\u6559\u7a0b - \u7528\u6237\u6307\u5357 - \u7b80\u4ecb"},{"location":"tutorial/#-","text":"\u672c\u6559\u7a0b\u5c06\u4e00\u6b65\u6b65\u5411\u4f60\u5c55\u793a\u5982\u4f55\u4f7f\u7528 FastAPI \u7684\u7edd\u5927\u90e8\u5206\u7279\u6027\u3002 \u5404\u4e2a\u7ae0\u8282\u7684\u5185\u5bb9\u5faa\u5e8f\u6e10\u8fdb\uff0c\u4f46\u662f\u53c8\u56f4\u7ed5\u7740\u5355\u72ec\u7684\u4e3b\u9898\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u76f4\u63a5\u8df3\u8f6c\u5230\u67d0\u4e2a\u7ae0\u8282\u4ee5\u89e3\u51b3\u4f60\u7684\u7279\u5b9a\u9700\u6c42\u3002 \u672c\u6559\u7a0b\u540c\u6837\u53ef\u4ee5\u4f5c\u4e3a\u5c06\u6765\u7684\u53c2\u8003\u624b\u518c\u3002 \u4f60\u53ef\u4ee5\u968f\u65f6\u56de\u5230\u672c\u6559\u7a0b\u5e76\u67e5\u9605\u4f60\u9700\u8981\u7684\u5185\u5bb9\u3002","title":"\u6559\u7a0b - \u7528\u6237\u6307\u5357 - \u7b80\u4ecb"},{"location":"tutorial/#_1","text":"\u6240\u6709\u4ee3\u7801\u7247\u6bb5\u90fd\u53ef\u4ee5\u590d\u5236\u540e\u76f4\u63a5\u4f7f\u7528\uff08\u5b83\u4eec\u5b9e\u9645\u4e0a\u662f\u7ecf\u8fc7\u6d4b\u8bd5\u7684 Python \u6587\u4ef6\uff09\u3002 \u8981\u8fd0\u884c\u4efb\u4f55\u793a\u4f8b\uff0c\u8bf7\u5c06\u4ee3\u7801\u590d\u5236\u5230 main.py \u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 uvicorn \uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. \u5f3a\u70c8\u5efa\u8bae\u4f60\u5728\u672c\u5730\u7f16\u5199\u6216\u590d\u5236\u4ee3\u7801\uff0c\u5bf9\u5176\u8fdb\u884c\u7f16\u8f91\u5e76\u8fd0\u884c\u3002 \u5728\u7f16\u8f91\u5668\u4e2d\u4f7f\u7528 FastAPI \u4f1a\u771f\u6b63\u5730\u5c55\u73b0\u51fa\u5b83\u7684\u4f18\u52bf\uff1a\u53ea\u9700\u8981\u7f16\u5199\u5f88\u5c11\u7684\u4ee3\u7801\uff0c\u6240\u6709\u7684\u7c7b\u578b\u68c0\u67e5\uff0c\u4ee3\u7801\u8865\u5168\u7b49\u7b49\u3002","title":"\u8fd0\u884c\u4ee3\u7801"},{"location":"tutorial/#fastapi","text":"\u7b2c\u4e00\u4e2a\u6b65\u9aa4\u662f\u5b89\u88c5 FastAPI\u3002 \u4e3a\u4e86\u4f7f\u7528\u672c\u6559\u7a0b\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5b89\u88c5\u6240\u6709\u7684\u53ef\u9009\u4f9d\u8d56\u53ca\u5bf9\u5e94\u529f\u80fd\uff1a $ pip install fastapi [ all ] ---> 100% ......\u4ee5\u4e0a\u5b89\u88c5\u8fd8\u5305\u62ec\u4e86 uvicorn \uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u7528\u4f5c\u8fd0\u884c\u4ee3\u7801\u7684\u670d\u52a1\u5668\u3002 Note \u4f60\u4e5f\u53ef\u4ee5\u5206\u5f00\u6765\u5b89\u88c5\u3002 \u5047\u5982\u4f60\u60f3\u5c06\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\uff0c\u4f60\u53ef\u80fd\u8981\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a pip install fastapi \u5e76\u4e14\u5b89\u88c5 uvicorn \u6765\u4f5c\u4e3a\u670d\u52a1\u5668\uff1a pip install uvicorn[standard] \u7136\u540e\u5bf9\u4f60\u60f3\u4f7f\u7528\u7684\u6bcf\u4e2a\u53ef\u9009\u4f9d\u8d56\u9879\u4e5f\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u3002","title":"\u5b89\u88c5 FastAPI"},{"location":"tutorial/#_2","text":"\u5728\u672c \u6559\u7a0b-\u7528\u6237\u6307\u5357 \u4e4b\u540e\uff0c\u4f60\u53ef\u4ee5\u9605\u8bfb \u8fdb\u9636\u7528\u6237\u6307\u5357 \u3002 \u8fdb\u9636\u7528\u6237\u6307\u5357 \u4ee5\u672c\u6559\u7a0b\u4e3a\u57fa\u7840\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u6982\u5ff5\uff0c\u5e76\u6559\u6388\u4e00\u4e9b\u989d\u5916\u7684\u7279\u6027\u3002 \u4f46\u662f\u4f60\u5e94\u8be5\u5148\u9605\u8bfb \u6559\u7a0b-\u7528\u6237\u6307\u5357 \uff08\u5373\u4f60\u73b0\u5728\u6b63\u5728\u9605\u8bfb\u7684\u5185\u5bb9\uff09\u3002 \u6559\u7a0b\u7ecf\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u4f7f\u4f60\u53ef\u4ee5\u4ec5\u901a\u8fc7 \u6559\u7a0b-\u7528\u6237\u6307\u5357 \u6765\u5f00\u53d1\u4e00\u4e2a\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u7136\u540e\u6839\u636e\u4f60\u7684\u9700\u8981\uff0c\u4f7f\u7528 \u8fdb\u9636\u7528\u6237\u6307\u5357 \u4e2d\u7684\u4e00\u4e9b\u5176\u4ed6\u6982\u5ff5\uff0c\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u6269\u5c55\u5b83\u3002","title":"\u8fdb\u9636\u7528\u6237\u6307\u5357"},{"location":"tutorial/background-tasks/","text":"Background Tasks \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can define background tasks to be run after returning a response. This is useful for operations that need to happen after a request, but that the client doesn't really have to be waiting for the operation to complete before receiving the response. This includes, for example: Email notifications sent after performing an action: As connecting to an email server and sending an email tends to be \"slow\" (several seconds), you can return the response right away and send the email notification in the background. Processing data: For example, let's say you receive a file that must go through a slow process, you can return a response of \"Accepted\" (HTTP 202) and process it in the background. Using BackgroundTasks \u00b6 First, import BackgroundTasks and define a parameter in your path operation function with a type declaration of BackgroundTasks : from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } FastAPI will create the object of type BackgroundTasks for you and pass it as that parameter. Create a task function \u00b6 Create a function to be run as the background task. It is just a standard function that can receive parameters. It can be an async def or normal def function, FastAPI will know how to handle it correctly. In this case, the task function will write to a file (simulating sending an email). And as the write operation doesn't use async and await , we define the function with normal def : from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } Add the background task \u00b6 Inside of your path operation function , pass your task function to the background tasks object with the method .add_task() : from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } .add_task() receives as arguments: A task function to be run in the background ( write_notification ). Any sequence of arguments that should be passed to the task function in order ( email ). Any keyword arguments that should be passed to the task function ( message=\"some notification\" ). Dependency Injection \u00b6 Using BackgroundTasks also works with the dependency injection system, you can declare a parameter of type BackgroundTasks at multiple levels: in a path operation function , in a dependency (dependable), in a sub-dependency, etc. FastAPI knows what to do in each case and how to re-use the same object, so that all the background tasks are merged together and are run in the background afterwards: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import BackgroundTasks , Depends , FastAPI app = FastAPI () def write_log ( message : str ): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( message ) def get_query ( background_tasks : BackgroundTasks , q : Union [ str , None ] = None ): if q : message = f \"found query: { q } \\n \" background_tasks . add_task ( write_log , message ) return q @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks , q : str = Depends ( get_query ) ): message = f \"message to { email } \\n \" background_tasks . add_task ( write_log , message ) return { \"message\" : \"Message sent\" } from fastapi import BackgroundTasks , Depends , FastAPI app = FastAPI () def write_log ( message : str ): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( message ) def get_query ( background_tasks : BackgroundTasks , q : str | None = None ): if q : message = f \"found query: { q } \\n \" background_tasks . add_task ( write_log , message ) return q @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks , q : str = Depends ( get_query ) ): message = f \"message to { email } \\n \" background_tasks . add_task ( write_log , message ) return { \"message\" : \"Message sent\" } In this example, the messages will be written to the log.txt file after the response is sent. If there was a query in the request, it will be written to the log in a background task. And then another background task generated at the path operation function will write a message using the email path parameter. Technical Details \u00b6 The class BackgroundTasks comes directly from starlette.background . It is imported/included directly into FastAPI so that you can import it from fastapi and avoid accidentally importing the alternative BackgroundTask (without the s at the end) from starlette.background . By only using BackgroundTasks (and not BackgroundTask ), it's then possible to use it as a path operation function parameter and have FastAPI handle the rest for you, just like when using the Request object directly. It's still possible to use BackgroundTask alone in FastAPI, but you have to create the object in your code and return a Starlette Response including it. You can see more details in Starlette's official docs for Background Tasks . Caveat \u00b6 If you need to perform heavy background computation and you don't necessarily need it to be run by the same process (for example, you don't need to share memory, variables, etc), you might benefit from using other bigger tools like Celery . They tend to require more complex configurations, a message/job queue manager, like RabbitMQ or Redis, but they allow you to run background tasks in multiple processes, and especially, in multiple servers. To see an example, check the Project Generators , they all include Celery already configured. But if you need to access variables and objects from the same FastAPI app, or you need to perform small background tasks (like sending an email notification), you can simply just use BackgroundTasks . Recap \u00b6 Import and use BackgroundTasks with parameters in path operation functions and dependencies to add background tasks.","title":"Background Tasks"},{"location":"tutorial/background-tasks/#background-tasks","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can define background tasks to be run after returning a response. This is useful for operations that need to happen after a request, but that the client doesn't really have to be waiting for the operation to complete before receiving the response. This includes, for example: Email notifications sent after performing an action: As connecting to an email server and sending an email tends to be \"slow\" (several seconds), you can return the response right away and send the email notification in the background. Processing data: For example, let's say you receive a file that must go through a slow process, you can return a response of \"Accepted\" (HTTP 202) and process it in the background.","title":"Background Tasks"},{"location":"tutorial/background-tasks/#using-backgroundtasks","text":"First, import BackgroundTasks and define a parameter in your path operation function with a type declaration of BackgroundTasks : from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } FastAPI will create the object of type BackgroundTasks for you and pass it as that parameter.","title":"Using BackgroundTasks"},{"location":"tutorial/background-tasks/#create-a-task-function","text":"Create a function to be run as the background task. It is just a standard function that can receive parameters. It can be an async def or normal def function, FastAPI will know how to handle it correctly. In this case, the task function will write to a file (simulating sending an email). And as the write operation doesn't use async and await , we define the function with normal def : from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" }","title":"Create a task function"},{"location":"tutorial/background-tasks/#add-the-background-task","text":"Inside of your path operation function , pass your task function to the background tasks object with the method .add_task() : from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } .add_task() receives as arguments: A task function to be run in the background ( write_notification ). Any sequence of arguments that should be passed to the task function in order ( email ). Any keyword arguments that should be passed to the task function ( message=\"some notification\" ).","title":"Add the background task"},{"location":"tutorial/background-tasks/#dependency-injection","text":"Using BackgroundTasks also works with the dependency injection system, you can declare a parameter of type BackgroundTasks at multiple levels: in a path operation function , in a dependency (dependable), in a sub-dependency, etc. FastAPI knows what to do in each case and how to re-use the same object, so that all the background tasks are merged together and are run in the background afterwards: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import BackgroundTasks , Depends , FastAPI app = FastAPI () def write_log ( message : str ): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( message ) def get_query ( background_tasks : BackgroundTasks , q : Union [ str , None ] = None ): if q : message = f \"found query: { q } \\n \" background_tasks . add_task ( write_log , message ) return q @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks , q : str = Depends ( get_query ) ): message = f \"message to { email } \\n \" background_tasks . add_task ( write_log , message ) return { \"message\" : \"Message sent\" } from fastapi import BackgroundTasks , Depends , FastAPI app = FastAPI () def write_log ( message : str ): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( message ) def get_query ( background_tasks : BackgroundTasks , q : str | None = None ): if q : message = f \"found query: { q } \\n \" background_tasks . add_task ( write_log , message ) return q @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks , q : str = Depends ( get_query ) ): message = f \"message to { email } \\n \" background_tasks . add_task ( write_log , message ) return { \"message\" : \"Message sent\" } In this example, the messages will be written to the log.txt file after the response is sent. If there was a query in the request, it will be written to the log in a background task. And then another background task generated at the path operation function will write a message using the email path parameter.","title":"Dependency Injection"},{"location":"tutorial/background-tasks/#technical-details","text":"The class BackgroundTasks comes directly from starlette.background . It is imported/included directly into FastAPI so that you can import it from fastapi and avoid accidentally importing the alternative BackgroundTask (without the s at the end) from starlette.background . By only using BackgroundTasks (and not BackgroundTask ), it's then possible to use it as a path operation function parameter and have FastAPI handle the rest for you, just like when using the Request object directly. It's still possible to use BackgroundTask alone in FastAPI, but you have to create the object in your code and return a Starlette Response including it. You can see more details in Starlette's official docs for Background Tasks .","title":"Technical Details"},{"location":"tutorial/background-tasks/#caveat","text":"If you need to perform heavy background computation and you don't necessarily need it to be run by the same process (for example, you don't need to share memory, variables, etc), you might benefit from using other bigger tools like Celery . They tend to require more complex configurations, a message/job queue manager, like RabbitMQ or Redis, but they allow you to run background tasks in multiple processes, and especially, in multiple servers. To see an example, check the Project Generators , they all include Celery already configured. But if you need to access variables and objects from the same FastAPI app, or you need to perform small background tasks (like sending an email notification), you can simply just use BackgroundTasks .","title":"Caveat"},{"location":"tutorial/background-tasks/#recap","text":"Import and use BackgroundTasks with parameters in path operation functions and dependencies to add background tasks.","title":"Recap"},{"location":"tutorial/bigger-applications/","text":"\u66f4\u5927\u7684\u5e94\u7528 - \u591a\u4e2a\u6587\u4ef6 \u00b6 \u5982\u679c\u4f60\u6b63\u5728\u5f00\u53d1\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6216 Web API\uff0c\u5f88\u5c11\u4f1a\u5c06\u6240\u6709\u7684\u5185\u5bb9\u90fd\u653e\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u3002 FastAPI \u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u4fbf\u7684\u5de5\u5177\uff0c\u53ef\u4ee5\u5728\u4fdd\u6301\u6240\u6709\u7075\u6d3b\u6027\u7684\u540c\u65f6\u6784\u5efa\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 Info \u5982\u679c\u4f60\u6765\u81ea Flask\uff0c\u90a3\u8fd9\u5c06\u76f8\u5f53\u4e8e Flask \u7684 Blueprints\u3002 \u4e00\u4e2a\u6587\u4ef6\u7ed3\u6784\u793a\u4f8b \u00b6 \u5047\u8bbe\u4f60\u7684\u6587\u4ef6\u7ed3\u6784\u5982\u4e0b\uff1a . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 dependencies.py \u2502 \u2514\u2500\u2500 routers \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 items.py \u2502 \u2502 \u2514\u2500\u2500 users.py \u2502 \u2514\u2500\u2500 internal \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 admin.py Tip \u4e0a\u9762\u6709\u51e0\u4e2a __init__.py \u6587\u4ef6\uff1a\u6bcf\u4e2a\u76ee\u5f55\u6216\u5b50\u76ee\u5f55\u4e2d\u90fd\u6709\u4e00\u4e2a\u3002 \u8fd9\u5c31\u662f\u80fd\u5c06\u4ee3\u7801\u4ece\u4e00\u4e2a\u6587\u4ef6\u5bfc\u5165\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u7684\u539f\u56e0\u3002 \u4f8b\u5982\uff0c\u5728 app/main.py \u4e2d\uff0c\u4f60\u53ef\u4ee5\u6709\u5982\u4e0b\u4e00\u884c\uff1a from app.routers import items app \u76ee\u5f55\u5305\u542b\u4e86\u6240\u6709\u5185\u5bb9\u3002\u5e76\u4e14\u5b83\u6709\u4e00\u4e2a\u7a7a\u6587\u4ef6 app/__init__.py \uff0c\u56e0\u6b64\u5b83\u662f\u4e00\u4e2a\u300cPython \u5305\u300d\uff08\u300cPython \u6a21\u5757\u300d\u7684\u96c6\u5408\uff09\uff1a app \u3002 \u5b83\u5305\u542b\u4e00\u4e2a app/main.py \u6587\u4ef6\u3002\u7531\u4e8e\u5b83\u4f4d\u4e8e\u4e00\u4e2a Python \u5305\uff08\u4e00\u4e2a\u5305\u542b __init__.py \u6587\u4ef6\u7684\u76ee\u5f55\uff09\u4e2d\uff0c\u56e0\u6b64\u5b83\u662f\u8be5\u5305\u7684\u4e00\u4e2a\u300c\u6a21\u5757\u300d\uff1a app.main \u3002 \u8fd8\u6709\u4e00\u4e2a app/dependencies.py \u6587\u4ef6\uff0c\u5c31\u50cf app/main.py \u4e00\u6837\uff0c\u5b83\u662f\u4e00\u4e2a\u300c\u6a21\u5757\u300d\uff1a app.dependencies \u3002 \u6709\u4e00\u4e2a\u5b50\u76ee\u5f55 app/routers/ \u5305\u542b\u53e6\u4e00\u4e2a __init__.py \u6587\u4ef6\uff0c\u56e0\u6b64\u5b83\u662f\u4e00\u4e2a\u300cPython \u5b50\u5305\u300d\uff1a app.routers \u3002 \u6587\u4ef6 app/routers/items.py \u4f4d\u4e8e app/routers/ \u5305\u4e2d\uff0c\u56e0\u6b64\u5b83\u662f\u4e00\u4e2a\u5b50\u6a21\u5757\uff1a app.routers.items \u3002 \u540c\u6837\u9002\u7528\u4e8e app/routers/users.py \uff0c\u5b83\u662f\u53e6\u4e00\u4e2a\u5b50\u6a21\u5757\uff1a app.routers.users \u3002 \u8fd8\u6709\u4e00\u4e2a\u5b50\u76ee\u5f55 app/internal/ \u5305\u542b\u53e6\u4e00\u4e2a __init__.py \u6587\u4ef6\uff0c\u56e0\u6b64\u5b83\u662f\u53c8\u4e00\u4e2a\u300cPython \u5b50\u5305\u300d\uff1a app.internal \u3002 app/internal/admin.py \u662f\u53e6\u4e00\u4e2a\u5b50\u6a21\u5757\uff1a app.internal.admin \u3002 \u5e26\u6709\u6ce8\u91ca\u7684\u540c\u4e00\u6587\u4ef6\u7ed3\u6784\uff1a . \u251c\u2500\u2500 app # \u300capp\u300d\u662f\u4e00\u4e2a Python \u5305 \u2502 \u251c\u2500\u2500 __init__.py # \u8fd9\u4e2a\u6587\u4ef6\u4f7f\u300capp\u300d\u6210\u4e3a\u4e00\u4e2a Python \u5305 \u2502 \u251c\u2500\u2500 main.py # \u300cmain\u300d\u6a21\u5757\uff0c\u4f8b\u5982 import app.main \u2502 \u251c\u2500\u2500 dependencies.py # \u300cdependencies\u300d\u6a21\u5757\uff0c\u4f8b\u5982 import app.dependencies \u2502 \u2514\u2500\u2500 routers # \u300crouters\u300d\u662f\u4e00\u4e2a\u300cPython \u5b50\u5305\u300d \u2502 \u2502 \u251c\u2500\u2500 __init__.py # \u4f7f\u300crouters\u300d\u6210\u4e3a\u4e00\u4e2a\u300cPython \u5b50\u5305\u300d \u2502 \u2502 \u251c\u2500\u2500 items.py # \u300citems\u300d\u5b50\u6a21\u5757\uff0c\u4f8b\u5982 import app.routers.items \u2502 \u2502 \u2514\u2500\u2500 users.py # \u300cusers\u300d\u5b50\u6a21\u5757\uff0c\u4f8b\u5982 import app.routers.users \u2502 \u2514\u2500\u2500 internal # \u300cinternal\u300d\u662f\u4e00\u4e2a\u300cPython \u5b50\u5305\u300d \u2502 \u251c\u2500\u2500 __init__.py # \u4f7f\u300cinternal\u300d\u6210\u4e3a\u4e00\u4e2a\u300cPython \u5b50\u5305\u300d \u2502 \u2514\u2500\u2500 admin.py # \u300cadmin\u300d\u5b50\u6a21\u5757\uff0c\u4f8b\u5982 import app.internal.admin APIRouter \u00b6 \u5047\u8bbe\u4e13\u95e8\u7528\u4e8e\u5904\u7406\u7528\u6237\u903b\u8f91\u7684\u6587\u4ef6\u662f\u4f4d\u4e8e /app/routers/users.py \u7684\u5b50\u6a21\u5757\u3002 \u4f60\u5e0c\u671b\u5c06\u4e0e\u7528\u6237\u76f8\u5173\u7684 \u8def\u5f84\u64cd\u4f5c \u4e0e\u5176\u4ed6\u4ee3\u7801\u5206\u5f00\uff0c\u4ee5\u4f7f\u5176\u4e95\u4e95\u6709\u6761\u3002 \u4f46\u5b83\u4ecd\u7136\u662f\u540c\u4e00 FastAPI \u5e94\u7528\u7a0b\u5e8f/web API \u7684\u4e00\u90e8\u5206\uff08\u5b83\u662f\u540c\u4e00\u300cPython \u5305\u300d\u7684\u4e00\u90e8\u5206\uff09\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 APIRouter \u4e3a\u8be5\u6a21\u5757\u521b\u5efa \u8def\u5f84\u64cd\u4f5c \u3002 \u5bfc\u5165 APIRouter \u00b6 \u4f60\u53ef\u4ee5\u5bfc\u5165\u5b83\u5e76\u901a\u8fc7\u4e0e FastAPI \u7c7b\u76f8\u540c\u7684\u65b9\u5f0f\u521b\u5efa\u4e00\u4e2a\u300c\u5b9e\u4f8b\u300d\uff1a from fastapi import APIRouter router = APIRouter () @router . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] @router . get ( \"/users/me\" , tags = [ \"users\" ]) async def read_user_me (): return { \"username\" : \"fakecurrentuser\" } @router . get ( \"/users/ {username} \" , tags = [ \"users\" ]) async def read_user ( username : str ): return { \"username\" : username } \u4f7f\u7528 APIRouter \u7684 \u8def\u5f84\u64cd\u4f5c \u00b6 \u7136\u540e\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u58f0\u660e \u8def\u5f84\u64cd\u4f5c \u3002 \u4f7f\u7528\u65b9\u5f0f\u4e0e FastAPI \u7c7b\u76f8\u540c\uff1a from fastapi import APIRouter router = APIRouter () @router . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] @router . get ( \"/users/me\" , tags = [ \"users\" ]) async def read_user_me (): return { \"username\" : \"fakecurrentuser\" } @router . get ( \"/users/ {username} \" , tags = [ \"users\" ]) async def read_user ( username : str ): return { \"username\" : username } \u4f60\u53ef\u4ee5\u5c06 APIRouter \u89c6\u4e3a\u4e00\u4e2a\u300c\u8ff7\u4f60 FastAPI \u300d\u7c7b\u3002 \u6240\u6709\u76f8\u540c\u7684\u9009\u9879\u90fd\u5f97\u5230\u652f\u6301\u3002 \u6240\u6709\u76f8\u540c\u7684 parameters \u3001 responses \u3001 dependencies \u3001 tags \u7b49\u7b49\u3002 Tip \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u8be5\u53d8\u91cf\u88ab\u547d\u540d\u4e3a router \uff0c\u4f46\u4f60\u53ef\u4ee5\u6839\u636e\u4f60\u7684\u60f3\u6cd5\u81ea\u7531\u547d\u540d\u3002 \u6211\u4eec\u5c06\u5728\u4e3b FastAPI \u5e94\u7528\u4e2d\u5305\u542b\u8be5 APIRouter \uff0c\u4f46\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u4f9d\u8d56\u9879\u548c\u53e6\u4e00\u4e2a APIRouter \u3002 \u4f9d\u8d56\u9879 \u00b6 \u6211\u4eec\u4e86\u89e3\u5230\u6211\u4eec\u5c06\u9700\u8981\u4e00\u4e9b\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u597d\u51e0\u4e2a\u5730\u65b9\u6240\u4f7f\u7528\u7684\u4f9d\u8d56\u9879\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u5b83\u4eec\u653e\u5728\u5b83\u4eec\u81ea\u5df1\u7684 dependencies \u6a21\u5757\uff08 app/dependencies.py \uff09\u4e2d\u3002 \u73b0\u5728\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4f9d\u8d56\u9879\u6765\u8bfb\u53d6\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 X-Token \u8bf7\u6c42\u9996\u90e8\uff1a from fastapi import Header , HTTPException async def get_token_header ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def get_query_token ( token : str ): if token != \"jessica\" : raise HTTPException ( status_code = 400 , detail = \"No Jessica token provided\" ) Tip \u6211\u4eec\u6b63\u5728\u4f7f\u7528\u865a\u6784\u7684\u8bf7\u6c42\u9996\u90e8\u6765\u7b80\u5316\u6b64\u793a\u4f8b\u3002 \u4f46\u5728\u5b9e\u9645\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u96c6\u6210\u7684 \u5b89\u5168\u6027\u5b9e\u7528\u5de5\u5177 \u4f1a\u5f97\u5230\u66f4\u597d\u7684\u6548\u679c\u3002 \u5176\u4ed6\u4f7f\u7528 APIRouter \u7684\u6a21\u5757 \u00b6 \u5047\u8bbe\u4f60\u5728\u4f4d\u4e8e app/routers/items.py \u7684\u6a21\u5757\u4e2d\u8fd8\u6709\u4e13\u95e8\u7528\u4e8e\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u4e2d\u300c\u9879\u76ee\u300d\u7684\u7aef\u70b9\u3002 \u4f60\u5177\u6709\u4ee5\u4e0b \u8def\u5f84\u64cd\u4f5c \uff1a /items/ /items/{item_id} \u8fd9\u548c app/routers/users.py \u7684\u7ed3\u6784\u5b8c\u5168\u76f8\u540c\u3002 \u4f46\u662f\u6211\u4eec\u60f3\u53d8\u5f97\u66f4\u806a\u660e\u5e76\u7b80\u5316\u4e00\u4e9b\u4ee3\u7801\u3002 \u6211\u4eec\u77e5\u9053\u6b64\u6a21\u5757\u4e2d\u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u90fd\u6709\u76f8\u540c\u7684\uff1a \u8def\u5f84 prefix \uff1a /items \u3002 tags \uff1a\uff08\u4ec5\u6709\u4e00\u4e2a items \u6807\u7b7e\uff09\u3002 \u989d\u5916\u7684 responses \u3002 dependencies \uff1a\u5b83\u4eec\u90fd\u9700\u8981\u6211\u4eec\u521b\u5efa\u7684 X-Token \u4f9d\u8d56\u9879\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u6dfb\u52a0\u5230 APIRouter \u4e2d\uff0c\u800c\u4e0d\u662f\u5c06\u5176\u6dfb\u52a0\u5230\u6bcf\u4e2a\u8def\u5f84\u64cd\u4f5c\u4e2d\u3002 from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } \u7531\u4e8e\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u7684\u8def\u5f84\u90fd\u5fc5\u987b\u4ee5 / \u5f00\u5934\uff0c\u4f8b\u5982\uff1a @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): ... ...\u524d\u7f00\u4e0d\u80fd\u4ee5 / \u4f5c\u4e3a\u7ed3\u5c3e\u3002 \u56e0\u6b64\uff0c\u672c\u4f8b\u4e2d\u7684\u524d\u7f00\u4e3a /items \u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a tags \u5217\u8868\u548c\u989d\u5916\u7684 responses \u5217\u8868\uff0c\u8fd9\u4e9b\u53c2\u6570\u5c06\u5e94\u7528\u4e8e\u6b64\u8def\u7531\u5668\u4e2d\u5305\u542b\u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u3002 \u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a dependencies \u5217\u8868\uff0c\u8fd9\u4e9b\u4f9d\u8d56\u9879\u5c06\u88ab\u6dfb\u52a0\u5230\u8def\u7531\u5668\u4e2d\u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u4e2d\uff0c\u5e76\u5c06\u9488\u5bf9\u5411\u5b83\u4eec\u53d1\u8d77\u7684\u6bcf\u4e2a\u8bf7\u6c42\u6267\u884c/\u89e3\u51b3\u3002 Tip \u8bf7\u6ce8\u610f\uff0c\u548c \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u7684\u4f9d\u8d56\u9879 \u5f88\u7c7b\u4f3c\uff0c\u6ca1\u6709\u503c\u4f1a\u88ab\u4f20\u9012\u7ed9\u4f60\u7684 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002 \u6700\u7ec8\u7ed3\u679c\u662f\u9879\u76ee\u76f8\u5173\u7684\u8def\u5f84\u73b0\u5728\u4e3a\uff1a /items/ /items/{item_id} ...\u5982\u6211\u4eec\u6240\u613f\u3002 \u5b83\u4eec\u5c06\u88ab\u6807\u8bb0\u4e3a\u4ec5\u5305\u542b\u5355\u4e2a\u5b57\u7b26\u4e32 \"items\" \u7684\u6807\u7b7e\u5217\u8868\u3002 \u8fd9\u4e9b\u300c\u6807\u7b7e\u300d\u5bf9\u4e8e\u81ea\u52a8\u5316\u4ea4\u4e92\u5f0f\u6587\u6863\u7cfb\u7edf\uff08\u4f7f\u7528 OpenAPI\uff09\u7279\u522b\u6709\u7528\u3002 \u6240\u6709\u7684\u8def\u5f84\u64cd\u4f5c\u90fd\u5c06\u5305\u542b\u9884\u5b9a\u4e49\u7684 responses \u3002 \u6240\u6709\u7684\u8fd9\u4e9b \u8def\u5f84\u64cd\u4f5c \u90fd\u5c06\u5728\u81ea\u8eab\u4e4b\u524d\u8ba1\u7b97/\u6267\u884c dependencies \u5217\u8868\u3002 \u5982\u679c\u4f60\u8fd8\u5728\u4e00\u4e2a\u5177\u4f53\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u4e86\u4f9d\u8d56\u9879\uff0c \u5b83\u4eec\u4e5f\u4f1a\u88ab\u6267\u884c \u3002 \u8def\u7531\u5668\u7684\u4f9d\u8d56\u9879\u6700\u5148\u6267\u884c\uff0c\u7136\u540e\u662f \u88c5\u9970\u5668\u4e2d\u7684 dependencies \uff0c\u518d\u7136\u540e\u662f\u666e\u901a\u7684\u53c2\u6570\u4f9d\u8d56\u9879\u3002 \u4f60\u8fd8\u53ef\u4ee5\u6dfb\u52a0 \u5177\u6709 scopes \u7684 Security \u4f9d\u8d56\u9879 \u3002 Tip \u5728 APIRouter \u4e2d\u5177\u6709 dependencies \u53ef\u4ee5\u7528\u6765\uff0c\u4f8b\u5982\uff0c\u5bf9\u4e00\u6574\u7ec4\u7684 \u8def\u5f84\u64cd\u4f5c \u8981\u6c42\u8eab\u4efd\u8ba4\u8bc1\u3002\u5373\u4f7f\u8fd9\u4e9b\u4f9d\u8d56\u9879\u5e76\u6ca1\u6709\u5206\u522b\u6dfb\u52a0\u5230\u6bcf\u4e2a\u8def\u5f84\u64cd\u4f5c\u4e2d\u3002 Check prefix \u3001 tags \u3001 responses \u4ee5\u53ca dependencies \u53c2\u6570\u53ea\u662f\uff08\u548c\u5176\u4ed6\u5f88\u591a\u60c5\u51b5\u4e00\u6837\uff09 FastAPI \u7684\u4e00\u4e2a\u7528\u4e8e\u5e2e\u52a9\u4f60\u907f\u514d\u4ee3\u7801\u91cd\u590d\u7684\u529f\u80fd\u3002 \u5bfc\u5165\u4f9d\u8d56\u9879 \u00b6 \u8fd9\u4e9b\u4ee3\u7801\u4f4d\u4e8e app.routers.items \u6a21\u5757\uff0c app/routers/items.py \u6587\u4ef6\u4e2d\u3002 \u6211\u4eec\u9700\u8981\u4ece app.dependencies \u6a21\u5757\u5373 app/dependencies.py \u6587\u4ef6\u4e2d\u83b7\u53d6\u4f9d\u8d56\u51fd\u6570\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u901a\u8fc7 .. \u5bf9\u4f9d\u8d56\u9879\u4f7f\u7528\u4e86\u76f8\u5bf9\u5bfc\u5165\uff1a from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } \u76f8\u5bf9\u5bfc\u5165\u5982\u4f55\u5de5\u4f5c \u00b6 Tip \u5982\u679c\u4f60\u5b8c\u5168\u4e86\u89e3\u5bfc\u5165\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u8bf7\u4ece\u4e0b\u9762\u7684\u4e0b\u4e00\u90e8\u5206\u7ee7\u7eed\u3002 \u4e00\u4e2a\u5355\u70b9 . \uff0c\u4f8b\u5982\uff1a from .dependencies import get_token_header \u8868\u793a\uff1a \u4ece\u8be5\u6a21\u5757\uff08 app/routers/items.py \u6587\u4ef6\uff09\u6240\u5728\u7684\u540c\u4e00\u4e2a\u5305\uff08 app/routers/ \u76ee\u5f55\uff09\u5f00\u59cb... \u627e\u5230 dependencies \u6a21\u5757\uff08\u4e00\u4e2a\u4f4d\u4e8e app/routers/dependencies.py \u7684\u865a\u6784\u6587\u4ef6\uff09... \u7136\u540e\u4ece\u4e2d\u5bfc\u5165\u51fd\u6570 get_token_header \u3002 \u4f46\u662f\u8be5\u6587\u4ef6\u5e76\u4e0d\u5b58\u5728\uff0c\u6211\u4eec\u7684\u4f9d\u8d56\u9879\u4f4d\u4e8e app/dependencies.py \u6587\u4ef6\u4e2d\u3002 \u8bf7\u8bb0\u4f4f\u6211\u4eec\u7684\u7a0b\u5e8f/\u6587\u4ef6\u7ed3\u6784\u662f\u600e\u6837\u7684\uff1a \u4e24\u4e2a\u70b9 .. \uff0c\u4f8b\u5982\uff1a from ..dependencies import get_token_header \u8868\u793a\uff1a \u4ece\u8be5\u6a21\u5757\uff08 app/routers/items.py \u6587\u4ef6\uff09\u6240\u5728\u7684\u540c\u4e00\u4e2a\u5305\uff08 app/routers/ \u76ee\u5f55\uff09\u5f00\u59cb... \u8df3\u8f6c\u5230\u5176\u7236\u5305\uff08 app/ \u76ee\u5f55\uff09... \u5728\u8be5\u7236\u5305\u4e2d\uff0c\u627e\u5230 dependencies \u6a21\u5757\uff08\u4f4d\u4e8e app/dependencies.py \u7684\u6587\u4ef6\uff09... \u7136\u540e\u4ece\u4e2d\u5bfc\u5165\u51fd\u6570 get_token_header \u3002 \u6b63\u5e38\u5de5\u4f5c\u4e86\uff01\ud83c\udf89 \u540c\u6837\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e86\u4e09\u4e2a\u70b9 ... \uff0c\u4f8b\u5982\uff1a from ...dependencies import get_token_header \u90a3\u5c06\u610f\u5473\u7740\uff1a \u4ece\u8be5\u6a21\u5757\uff08 app/routers/items.py \u6587\u4ef6\uff09\u6240\u5728\u7684\u540c\u4e00\u4e2a\u5305\uff08 app/routers/ \u76ee\u5f55\uff09\u5f00\u59cb... \u8df3\u8f6c\u5230\u5176\u7236\u5305\uff08 app/ \u76ee\u5f55\uff09... \u7136\u540e\u8df3\u8f6c\u5230\u8be5\u5305\u7684\u7236\u5305\uff08\u8be5\u7236\u5305\u5e76\u4e0d\u5b58\u5728\uff0c app \u5df2\u7ecf\u662f\u6700\u9876\u5c42\u7684\u5305 \ud83d\ude31\uff09... \u5728\u8be5\u7236\u5305\u4e2d\uff0c\u627e\u5230 dependencies \u6a21\u5757\uff08\u4f4d\u4e8e app/ \u66f4\u4e0a\u4e00\u7ea7\u76ee\u5f55\u4e2d\u7684 dependencies.py \u6587\u4ef6\uff09... \u7136\u540e\u4ece\u4e2d\u5bfc\u5165\u51fd\u6570 get_token_header \u3002 \u8fd9\u5c06\u5f15\u7528 app/ \u7684\u5f80\u4e0a\u4e00\u7ea7\uff0c\u5e26\u6709\u5176\u81ea\u5df1\u7684 __init __.py \u7b49\u6587\u4ef6\u7684\u67d0\u4e2a\u5305\u3002\u4f46\u662f\u6211\u4eec\u5e76\u6ca1\u6709\u8fd9\u4e2a\u5305\u3002\u56e0\u6b64\uff0c\u8fd9\u5c06\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u5f15\u53d1\u9519\u8bef\u3002\ud83d\udea8 \u4f46\u662f\u73b0\u5728\u4f60\u77e5\u9053\u4e86\u5b83\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u56e0\u6b64\u65e0\u8bba\u5b83\u4eec\u591a\u4e48\u590d\u6742\uff0c\u4f60\u90fd\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u76f8\u5bf9\u5bfc\u5165\u3002\ud83e\udd13 \u6dfb\u52a0\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684 tags \u3001 responses \u548c dependencies \u00b6 \u6211\u4eec\u4e0d\u6253\u7b97\u5728\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u6dfb\u52a0\u524d\u7f00 /items \u6216 tags =[\"items\"] \uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u4e86 APIRouter \u4e2d\u3002 \u4f46\u662f\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u6dfb\u52a0 \u66f4\u591a \u5c06\u4f1a\u5e94\u7528\u4e8e\u7279\u5b9a\u7684 \u8def\u5f84\u64cd\u4f5c \u7684 tags \uff0c\u4ee5\u53ca\u4e00\u4e9b\u7279\u5b9a\u4e8e\u8be5 \u8def\u5f84\u64cd\u4f5c \u7684\u989d\u5916 responses \uff1a from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } Tip \u6700\u540e\u7684\u8fd9\u4e2a\u8def\u5f84\u64cd\u4f5c\u5c06\u5305\u542b\u6807\u7b7e\u7684\u7ec4\u5408\uff1a [\"items\"\uff0c\"custom\"] \u3002 \u5e76\u4e14\u5728\u6587\u6863\u4e2d\u4e5f\u4f1a\u6709\u4e24\u4e2a\u54cd\u5e94\uff0c\u4e00\u4e2a\u7528\u4e8e 404 \uff0c\u4e00\u4e2a\u7528\u4e8e 403 \u3002 FastAPI \u4e3b\u4f53 \u00b6 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u4f4d\u4e8e app/main.py \u7684\u6a21\u5757\u3002 \u5728\u8fd9\u91cc\u4f60\u5bfc\u5165\u5e76\u4f7f\u7528 FastAPI \u7c7b\u3002 \u8fd9\u5c06\u662f\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5c06\u6240\u6709\u5185\u5bb9\u8054\u7ed3\u5728\u4e00\u8d77\u7684\u4e3b\u6587\u4ef6\u3002 \u5e76\u4e14\u7531\u4e8e\u4f60\u7684\u5927\u90e8\u5206\u903b\u8f91\u73b0\u5728\u90fd\u5b58\u5728\u4e8e\u5176\u81ea\u5df1\u7684\u7279\u5b9a\u6a21\u5757\u4e2d\uff0c\u56e0\u6b64\u4e3b\u6587\u4ef6\u7684\u5185\u5bb9\u5c06\u975e\u5e38\u7b80\u5355\u3002 \u5bfc\u5165 FastAPI \u00b6 \u4f60\u53ef\u4ee5\u50cf\u5e73\u5e38\u4e00\u6837\u5bfc\u5165\u5e76\u521b\u5efa\u4e00\u4e2a FastAPI \u7c7b\u3002 \u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u58f0\u660e \u5168\u5c40\u4f9d\u8d56\u9879 \uff0c\u5b83\u4f1a\u548c\u6bcf\u4e2a APIRouter \u7684\u4f9d\u8d56\u9879\u7ec4\u5408\u5728\u4e00\u8d77\uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u5bfc\u5165 APIRouter \u00b6 \u73b0\u5728\uff0c\u6211\u4eec\u5bfc\u5165\u5177\u6709 APIRouter \u7684\u5176\u4ed6\u5b50\u6a21\u5757\uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u7531\u4e8e\u6587\u4ef6 app/routers/users.py \u548c app/routers/items.py \u662f\u540c\u4e00 Python \u5305 app \u4e00\u4e2a\u90e8\u5206\u7684\u5b50\u6a21\u5757\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u70b9 . \u901a\u8fc7\u300c\u76f8\u5bf9\u5bfc\u5165\u300d\u6765\u5bfc\u5165\u5b83\u4eec\u3002 \u5bfc\u5165\u662f\u5982\u4f55\u5de5\u4f5c\u7684 \u00b6 \u8fd9\u6bb5\u4ee3\u7801\uff1a from .routers import items , users \u8868\u793a\uff1a \u4ece\u8be5\u6a21\u5757\uff08 app/main.py \u6587\u4ef6\uff09\u6240\u5728\u7684\u540c\u4e00\u4e2a\u5305\uff08 app/ \u76ee\u5f55\uff09\u5f00\u59cb... \u5bfb\u627e routers \u5b50\u5305\uff08\u4f4d\u4e8e app/routers/ \u7684\u76ee\u5f55\uff09... \u4ece\u8be5\u5305\u4e2d\uff0c\u5bfc\u5165\u5b50\u6a21\u5757 items (\u4f4d\u4e8e app/routers/items.py \u7684\u6587\u4ef6) \u4ee5\u53ca users (\u4f4d\u4e8e app/routers/users.py \u7684\u6587\u4ef6)... items \u6a21\u5757\u5c06\u5177\u6709\u4e00\u4e2a router \u53d8\u91cf\uff08 items.router \uff09\u3002\u8fd9\u4e0e\u6211\u4eec\u5728 app/routers/items.py \u6587\u4ef6\u4e2d\u521b\u5efa\u7684\u53d8\u91cf\u76f8\u540c\uff0c\u5b83\u662f\u4e00\u4e2a APIRouter \u5bf9\u8c61\u3002 \u7136\u540e\u6211\u4eec\u5bf9 users \u6a21\u5757\u8fdb\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u50cf\u8fd9\u6837\u5bfc\u5165\u5b83\u4eec\uff1a from app.routers import items , users Info \u7b2c\u4e00\u4e2a\u7248\u672c\u662f\u300c\u76f8\u5bf9\u5bfc\u5165\u300d\uff1a from .routers import items , users \u7b2c\u4e8c\u4e2a\u7248\u672c\u662f\u300c\u7edd\u5bf9\u5bfc\u5165\u300d\uff1a from app.routers import items , users \u8981\u4e86\u89e3\u6709\u5173 Python \u5305\u548c\u6a21\u5757\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u9605 \u5173\u4e8e Modules \u7684 Python \u5b98\u65b9\u6587\u6863 \u3002 \u907f\u514d\u540d\u79f0\u51b2\u7a81 \u00b6 \u6211\u4eec\u5c06\u76f4\u63a5\u5bfc\u5165 items \u5b50\u6a21\u5757\uff0c\u800c\u4e0d\u662f\u4ec5\u5bfc\u5165\u5176 router \u53d8\u91cf\u3002 \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u5728 users \u5b50\u6a21\u5757\u4e2d\u4e5f\u6709\u53e6\u4e00\u4e2a\u540d\u4e3a router \u7684\u53d8\u91cf\u3002 \u5982\u679c\u6211\u4eec\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u5bfc\u5165\uff0c\u4f8b\u5982\uff1a from .routers.items import router from .routers.users import router \u6765\u81ea users \u7684 router \u5c06\u8986\u76d6\u6765\u81ea items \u4e2d\u7684 router \uff0c\u6211\u4eec\u5c06\u65e0\u6cd5\u540c\u65f6\u4f7f\u7528\u5b83\u4eec\u3002 \u56e0\u6b64\uff0c\u4e3a\u4e86\u80fd\u591f\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u4f7f\u7528\u5b83\u4eec\uff0c\u6211\u4eec\u76f4\u63a5\u5bfc\u5165\u5b50\u6a21\u5757\uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u5305\u542b users \u548c items \u7684 APIRouter \u00b6 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u5305\u542b\u6765\u81ea users \u548c items \u5b50\u6a21\u5757\u7684 router \u3002 from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } Info users.router \u5305\u542b\u4e86 app/routers/users.py \u6587\u4ef6\u4e2d\u7684 APIRouter \u3002 items.router \u5305\u542b\u4e86 app/routers/items.py \u6587\u4ef6\u4e2d\u7684 APIRouter \u3002 \u4f7f\u7528 app.include_router() \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a APIRouter \u6dfb\u52a0\u5230\u4e3b FastAPI \u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 \u5b83\u5c06\u5305\u542b\u6765\u81ea\u8be5\u8def\u7531\u5668\u7684\u6240\u6709\u8def\u7531\u4f5c\u4e3a\u5176\u4e00\u90e8\u5206\u3002 \u6280\u672f\u7ec6\u8282 \u5b9e\u9645\u4e0a\uff0c\u5b83\u5c06\u5728\u5185\u90e8\u4e3a\u58f0\u660e\u5728 APIRouter \u4e2d\u7684\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u521b\u5efa\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u3002 \u6240\u4ee5\uff0c\u5728\u5e55\u540e\uff0c\u5b83\u5b9e\u9645\u4e0a\u4f1a\u50cf\u6240\u6709\u7684\u4e1c\u897f\u90fd\u662f\u540c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\u5de5\u4f5c\u3002 Check \u5305\u542b\u8def\u7531\u5668\u65f6\uff0c\u4f60\u4e0d\u5fc5\u62c5\u5fc3\u6027\u80fd\u95ee\u9898\u3002 \u8fd9\u5c06\u82b1\u8d39\u51e0\u5fae\u79d2\u65f6\u95f4\uff0c\u5e76\u4e14\u53ea\u4f1a\u5728\u542f\u52a8\u65f6\u53d1\u751f\u3002 \u56e0\u6b64\uff0c\u5b83\u4e0d\u4f1a\u5f71\u54cd\u6027\u80fd\u3002\u26a1 \u5305\u542b\u4e00\u4e2a\u6709\u81ea\u5b9a\u4e49 prefix \u3001 tags \u3001 responses \u548c dependencies \u7684 APIRouter \u00b6 \u73b0\u5728\uff0c\u5047\u8bbe\u4f60\u7684\u7ec4\u7ec7\u4e3a\u4f60\u63d0\u4f9b\u4e86 app/internal/admin.py \u6587\u4ef6\u3002 \u5b83\u5305\u542b\u4e00\u4e2a\u5e26\u6709\u4e00\u4e9b\u7531\u4f60\u7684\u7ec4\u7ec7\u5728\u591a\u4e2a\u9879\u76ee\u4e4b\u95f4\u5171\u4eab\u7684\u7ba1\u7406\u5458 \u8def\u5f84\u64cd\u4f5c \u7684 APIRouter \u3002 \u5bf9\u4e8e\u6b64\u793a\u4f8b\uff0c\u5b83\u5c06\u975e\u5e38\u7b80\u5355\u3002\u4f46\u662f\u5047\u8bbe\u7531\u4e8e\u5b83\u662f\u4e0e\u7ec4\u7ec7\u4e2d\u7684\u5176\u4ed6\u9879\u76ee\u6240\u5171\u4eab\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u65e0\u6cd5\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff0c\u4ee5\u53ca\u76f4\u63a5\u5728 APIRouter \u4e2d\u6dfb\u52a0 prefix \u3001 dependencies \u3001 tags \u7b49\uff1a from fastapi import APIRouter router = APIRouter () @router . post ( \"/\" ) async def update_admin (): return { \"message\" : \"Admin getting schwifty\" } \u4f46\u662f\u6211\u4eec\u4ecd\u7136\u5e0c\u671b\u5728\u5305\u542b APIRouter \u65f6\u8bbe\u7f6e\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 prefix \uff0c\u4ee5\u4fbf\u5176\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u4ee5 /admin \u5f00\u5934\uff0c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u672c\u9879\u76ee\u5df2\u7ecf\u6709\u7684 dependencies \u4fdd\u62a4\u5b83\uff0c\u5e76\u4e14\u6211\u4eec\u5e0c\u671b\u5b83\u5305\u542b\u81ea\u5b9a\u4e49\u7684 tags \u548c responses \u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u8fd9\u4e9b\u53c2\u6570\u4f20\u9012\u7ed9 app.include_router() \u6765\u5b8c\u6210\u6240\u6709\u7684\u58f0\u660e\uff0c\u800c\u4e0d\u5fc5\u4fee\u6539\u539f\u59cb\u7684 APIRouter \uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u8fd9\u6837\uff0c\u539f\u59cb\u7684 APIRouter \u5c06\u4fdd\u6301\u4e0d\u53d8\uff0c\u56e0\u6b64\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u4e0e\u7ec4\u7ec7\u4e2d\u7684\u5176\u4ed6\u9879\u76ee\u5171\u4eab\u76f8\u540c\u7684 app/internal/admin.py \u6587\u4ef6\u3002 \u7ed3\u679c\u662f\u5728\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6765\u81ea admin \u6a21\u5757\u7684\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u90fd\u5c06\u5177\u6709\uff1a /admin \u524d\u7f00 \u3002 admin \u6807\u7b7e\u3002 get_token_header \u4f9d\u8d56\u9879\u3002 418 \u54cd\u5e94\u3002 \ud83c\udf75 \u4f46\u8fd9\u53ea\u4f1a\u5f71\u54cd\u6211\u4eec\u5e94\u7528\u4e2d\u7684 APIRouter \uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u4f7f\u7528\u5b83\u7684\u4efb\u4f55\u5176\u4ed6\u4ee3\u7801\u3002 \u56e0\u6b64\uff0c\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5176\u4ed6\u9879\u76ee\u80fd\u591f\u4ee5\u4e0d\u540c\u7684\u8eab\u4efd\u8ba4\u8bc1\u65b9\u6cd5\u4f7f\u7528\u76f8\u540c\u7684 APIRouter \u3002 \u5305\u542b\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u00b6 \u6211\u4eec\u8fd8\u53ef\u4ee5\u76f4\u63a5\u5c06 \u8def\u5f84\u64cd\u4f5c \u6dfb\u52a0\u5230 FastAPI \u5e94\u7528\u4e2d\u3002 \u8fd9\u91cc\u6211\u4eec\u8fd9\u6837\u505a\u4e86...\u53ea\u662f\u4e3a\u4e86\u8868\u660e\u6211\u4eec\u53ef\u4ee5\u505a\u5230\ud83e\udd37\uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u5b83\u5c06\u4e0e\u901a\u8fc7 app.include_router() \u6dfb\u52a0\u7684\u6240\u6709\u5176\u4ed6 \u8def\u5f84\u64cd\u4f5c \u4e00\u8d77\u6b63\u5e38\u8fd0\u884c\u3002 \u7279\u522b\u7684\u6280\u672f\u7ec6\u8282 \u6ce8\u610f \uff1a\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6280\u672f\u6027\u7684\u7ec6\u8282\uff0c\u4f60\u4e5f\u8bb8\u53ef\u4ee5 \u76f4\u63a5\u8df3\u8fc7 \u3002 APIRouter \u6ca1\u6709\u88ab\u300c\u6302\u8f7d\u300d\uff0c\u5b83\u4eec\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4f59\u90e8\u5206\u6ca1\u6709\u9694\u79bb\u3002 \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u60f3\u8981\u5728 OpenAPI \u6a21\u5f0f\u548c\u7528\u6237\u754c\u9762\u4e2d\u5305\u542b\u5b83\u4eec\u7684 \u8def\u5f84\u64cd\u4f5c \u3002 \u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u4ec5\u4ec5\u9694\u79bb\u5b83\u4eec\u5e76\u72ec\u7acb\u4e8e\u5176\u4f59\u90e8\u5206\u6765\u300c\u6302\u8f7d\u300d\u5b83\u4eec\uff0c\u56e0\u6b64 \u8def\u5f84\u64cd\u4f5c \u662f\u88ab\u300c\u514b\u9686\u7684\u300d\uff08\u91cd\u65b0\u521b\u5efa\uff09\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5305\u542b\u3002 \u67e5\u770b\u81ea\u52a8\u5316\u7684 API \u6587\u6863 \u00b6 \u73b0\u5728\uff0c\u4f7f\u7528 app.main \u6a21\u5757\u548c app \u53d8\u91cf\u8fd0\u884c uvicorn \uff1a $ uvicorn app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u7136\u540e\u6253\u5f00\u4f4d\u4e8e http://127.0.0.1:8000/docs \u7684\u6587\u6863\u3002 \u4f60\u5c06\u770b\u5230\u4f7f\u7528\u4e86\u6b63\u786e\u8def\u5f84\uff08\u548c\u524d\u7f00\uff09\u548c\u6b63\u786e\u6807\u7b7e\u7684\u81ea\u52a8\u5316 API \u6587\u6863\uff0c\u5305\u62ec\u4e86\u6765\u81ea\u6240\u6709\u5b50\u6a21\u5757\u7684\u8def\u5f84\uff1a \u591a\u6b21\u4f7f\u7528\u4e0d\u540c\u7684 prefix \u5305\u542b\u540c\u4e00\u4e2a\u8def\u7531\u5668 \u00b6 \u4f60\u4e5f\u53ef\u4ee5\u5728 \u540c\u4e00 \u8def\u7531\u5668\u4e0a\u4f7f\u7528\u4e0d\u540c\u7684\u524d\u7f00\u6765\u591a\u6b21\u4f7f\u7528 .include_router() \u3002 \u5728\u6709\u4e9b\u573a\u666f\u8fd9\u53ef\u80fd\u6709\u7528\uff0c\u4f8b\u5982\u4ee5\u4e0d\u540c\u7684\u524d\u7f00\u516c\u5f00\u540c\u4e00\u4e2a\u7684 API\uff0c\u6bd4\u65b9\u8bf4 /api/v1 \u548c /api/latest \u3002 \u8fd9\u662f\u4e00\u4e2a\u4f60\u53ef\u80fd\u5e76\u4e0d\u771f\u6b63\u9700\u8981\u7684\u9ad8\u7ea7\u7528\u6cd5\uff0c\u4f46\u4e07\u4e00\u4f60\u6709\u9700\u8981\u4e86\u5c31\u80fd\u591f\u7528\u4e0a\u3002 \u5728\u53e6\u4e00\u4e2a APIRouter \u4e2d\u5305\u542b\u4e00\u4e2a APIRouter \u00b6 \u4e0e\u5728 FastAPI \u5e94\u7528\u7a0b\u5e8f\u4e2d\u5305\u542b APIRouter \u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a APIRouter \u4e2d\u5305\u542b APIRouter \uff0c\u901a\u8fc7\uff1a router . include_router ( other_router ) \u8bf7\u786e\u4fdd\u5728\u4f60\u5c06 router \u5305\u542b\u5230 FastAPI \u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\u8fdb\u884c\u6b64\u64cd\u4f5c\uff0c\u4ee5\u4fbf other_router \u4e2d\u7684 \u8def\u5f84\u64cd\u4f5c \u4e5f\u80fd\u88ab\u5305\u542b\u8fdb\u6765\u3002","title":"\u66f4\u5927\u7684\u5e94\u7528 - \u591a\u4e2a\u6587\u4ef6"},{"location":"tutorial/bigger-applications/#-","text":"\u5982\u679c\u4f60\u6b63\u5728\u5f00\u53d1\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6216 Web API\uff0c\u5f88\u5c11\u4f1a\u5c06\u6240\u6709\u7684\u5185\u5bb9\u90fd\u653e\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u3002 FastAPI \u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u4fbf\u7684\u5de5\u5177\uff0c\u53ef\u4ee5\u5728\u4fdd\u6301\u6240\u6709\u7075\u6d3b\u6027\u7684\u540c\u65f6\u6784\u5efa\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 Info \u5982\u679c\u4f60\u6765\u81ea Flask\uff0c\u90a3\u8fd9\u5c06\u76f8\u5f53\u4e8e Flask \u7684 Blueprints\u3002","title":"\u66f4\u5927\u7684\u5e94\u7528 - \u591a\u4e2a\u6587\u4ef6"},{"location":"tutorial/bigger-applications/#_1","text":"\u5047\u8bbe\u4f60\u7684\u6587\u4ef6\u7ed3\u6784\u5982\u4e0b\uff1a . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 dependencies.py \u2502 \u2514\u2500\u2500 routers \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 items.py \u2502 \u2502 \u2514\u2500\u2500 users.py \u2502 \u2514\u2500\u2500 internal \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 admin.py Tip \u4e0a\u9762\u6709\u51e0\u4e2a __init__.py \u6587\u4ef6\uff1a\u6bcf\u4e2a\u76ee\u5f55\u6216\u5b50\u76ee\u5f55\u4e2d\u90fd\u6709\u4e00\u4e2a\u3002 \u8fd9\u5c31\u662f\u80fd\u5c06\u4ee3\u7801\u4ece\u4e00\u4e2a\u6587\u4ef6\u5bfc\u5165\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u7684\u539f\u56e0\u3002 \u4f8b\u5982\uff0c\u5728 app/main.py \u4e2d\uff0c\u4f60\u53ef\u4ee5\u6709\u5982\u4e0b\u4e00\u884c\uff1a from app.routers import items app \u76ee\u5f55\u5305\u542b\u4e86\u6240\u6709\u5185\u5bb9\u3002\u5e76\u4e14\u5b83\u6709\u4e00\u4e2a\u7a7a\u6587\u4ef6 app/__init__.py \uff0c\u56e0\u6b64\u5b83\u662f\u4e00\u4e2a\u300cPython \u5305\u300d\uff08\u300cPython \u6a21\u5757\u300d\u7684\u96c6\u5408\uff09\uff1a app \u3002 \u5b83\u5305\u542b\u4e00\u4e2a app/main.py \u6587\u4ef6\u3002\u7531\u4e8e\u5b83\u4f4d\u4e8e\u4e00\u4e2a Python \u5305\uff08\u4e00\u4e2a\u5305\u542b __init__.py \u6587\u4ef6\u7684\u76ee\u5f55\uff09\u4e2d\uff0c\u56e0\u6b64\u5b83\u662f\u8be5\u5305\u7684\u4e00\u4e2a\u300c\u6a21\u5757\u300d\uff1a app.main \u3002 \u8fd8\u6709\u4e00\u4e2a app/dependencies.py \u6587\u4ef6\uff0c\u5c31\u50cf app/main.py \u4e00\u6837\uff0c\u5b83\u662f\u4e00\u4e2a\u300c\u6a21\u5757\u300d\uff1a app.dependencies \u3002 \u6709\u4e00\u4e2a\u5b50\u76ee\u5f55 app/routers/ \u5305\u542b\u53e6\u4e00\u4e2a __init__.py \u6587\u4ef6\uff0c\u56e0\u6b64\u5b83\u662f\u4e00\u4e2a\u300cPython \u5b50\u5305\u300d\uff1a app.routers \u3002 \u6587\u4ef6 app/routers/items.py \u4f4d\u4e8e app/routers/ \u5305\u4e2d\uff0c\u56e0\u6b64\u5b83\u662f\u4e00\u4e2a\u5b50\u6a21\u5757\uff1a app.routers.items \u3002 \u540c\u6837\u9002\u7528\u4e8e app/routers/users.py \uff0c\u5b83\u662f\u53e6\u4e00\u4e2a\u5b50\u6a21\u5757\uff1a app.routers.users \u3002 \u8fd8\u6709\u4e00\u4e2a\u5b50\u76ee\u5f55 app/internal/ \u5305\u542b\u53e6\u4e00\u4e2a __init__.py \u6587\u4ef6\uff0c\u56e0\u6b64\u5b83\u662f\u53c8\u4e00\u4e2a\u300cPython \u5b50\u5305\u300d\uff1a app.internal \u3002 app/internal/admin.py \u662f\u53e6\u4e00\u4e2a\u5b50\u6a21\u5757\uff1a app.internal.admin \u3002 \u5e26\u6709\u6ce8\u91ca\u7684\u540c\u4e00\u6587\u4ef6\u7ed3\u6784\uff1a . \u251c\u2500\u2500 app # \u300capp\u300d\u662f\u4e00\u4e2a Python \u5305 \u2502 \u251c\u2500\u2500 __init__.py # \u8fd9\u4e2a\u6587\u4ef6\u4f7f\u300capp\u300d\u6210\u4e3a\u4e00\u4e2a Python \u5305 \u2502 \u251c\u2500\u2500 main.py # \u300cmain\u300d\u6a21\u5757\uff0c\u4f8b\u5982 import app.main \u2502 \u251c\u2500\u2500 dependencies.py # \u300cdependencies\u300d\u6a21\u5757\uff0c\u4f8b\u5982 import app.dependencies \u2502 \u2514\u2500\u2500 routers # \u300crouters\u300d\u662f\u4e00\u4e2a\u300cPython \u5b50\u5305\u300d \u2502 \u2502 \u251c\u2500\u2500 __init__.py # \u4f7f\u300crouters\u300d\u6210\u4e3a\u4e00\u4e2a\u300cPython \u5b50\u5305\u300d \u2502 \u2502 \u251c\u2500\u2500 items.py # \u300citems\u300d\u5b50\u6a21\u5757\uff0c\u4f8b\u5982 import app.routers.items \u2502 \u2502 \u2514\u2500\u2500 users.py # \u300cusers\u300d\u5b50\u6a21\u5757\uff0c\u4f8b\u5982 import app.routers.users \u2502 \u2514\u2500\u2500 internal # \u300cinternal\u300d\u662f\u4e00\u4e2a\u300cPython \u5b50\u5305\u300d \u2502 \u251c\u2500\u2500 __init__.py # \u4f7f\u300cinternal\u300d\u6210\u4e3a\u4e00\u4e2a\u300cPython \u5b50\u5305\u300d \u2502 \u2514\u2500\u2500 admin.py # \u300cadmin\u300d\u5b50\u6a21\u5757\uff0c\u4f8b\u5982 import app.internal.admin","title":"\u4e00\u4e2a\u6587\u4ef6\u7ed3\u6784\u793a\u4f8b"},{"location":"tutorial/bigger-applications/#apirouter","text":"\u5047\u8bbe\u4e13\u95e8\u7528\u4e8e\u5904\u7406\u7528\u6237\u903b\u8f91\u7684\u6587\u4ef6\u662f\u4f4d\u4e8e /app/routers/users.py \u7684\u5b50\u6a21\u5757\u3002 \u4f60\u5e0c\u671b\u5c06\u4e0e\u7528\u6237\u76f8\u5173\u7684 \u8def\u5f84\u64cd\u4f5c \u4e0e\u5176\u4ed6\u4ee3\u7801\u5206\u5f00\uff0c\u4ee5\u4f7f\u5176\u4e95\u4e95\u6709\u6761\u3002 \u4f46\u5b83\u4ecd\u7136\u662f\u540c\u4e00 FastAPI \u5e94\u7528\u7a0b\u5e8f/web API \u7684\u4e00\u90e8\u5206\uff08\u5b83\u662f\u540c\u4e00\u300cPython \u5305\u300d\u7684\u4e00\u90e8\u5206\uff09\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528 APIRouter \u4e3a\u8be5\u6a21\u5757\u521b\u5efa \u8def\u5f84\u64cd\u4f5c \u3002","title":"APIRouter"},{"location":"tutorial/bigger-applications/#apirouter_1","text":"\u4f60\u53ef\u4ee5\u5bfc\u5165\u5b83\u5e76\u901a\u8fc7\u4e0e FastAPI \u7c7b\u76f8\u540c\u7684\u65b9\u5f0f\u521b\u5efa\u4e00\u4e2a\u300c\u5b9e\u4f8b\u300d\uff1a from fastapi import APIRouter router = APIRouter () @router . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] @router . get ( \"/users/me\" , tags = [ \"users\" ]) async def read_user_me (): return { \"username\" : \"fakecurrentuser\" } @router . get ( \"/users/ {username} \" , tags = [ \"users\" ]) async def read_user ( username : str ): return { \"username\" : username }","title":"\u5bfc\u5165 APIRouter"},{"location":"tutorial/bigger-applications/#apirouter_2","text":"\u7136\u540e\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u58f0\u660e \u8def\u5f84\u64cd\u4f5c \u3002 \u4f7f\u7528\u65b9\u5f0f\u4e0e FastAPI \u7c7b\u76f8\u540c\uff1a from fastapi import APIRouter router = APIRouter () @router . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] @router . get ( \"/users/me\" , tags = [ \"users\" ]) async def read_user_me (): return { \"username\" : \"fakecurrentuser\" } @router . get ( \"/users/ {username} \" , tags = [ \"users\" ]) async def read_user ( username : str ): return { \"username\" : username } \u4f60\u53ef\u4ee5\u5c06 APIRouter \u89c6\u4e3a\u4e00\u4e2a\u300c\u8ff7\u4f60 FastAPI \u300d\u7c7b\u3002 \u6240\u6709\u76f8\u540c\u7684\u9009\u9879\u90fd\u5f97\u5230\u652f\u6301\u3002 \u6240\u6709\u76f8\u540c\u7684 parameters \u3001 responses \u3001 dependencies \u3001 tags \u7b49\u7b49\u3002 Tip \u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u8be5\u53d8\u91cf\u88ab\u547d\u540d\u4e3a router \uff0c\u4f46\u4f60\u53ef\u4ee5\u6839\u636e\u4f60\u7684\u60f3\u6cd5\u81ea\u7531\u547d\u540d\u3002 \u6211\u4eec\u5c06\u5728\u4e3b FastAPI \u5e94\u7528\u4e2d\u5305\u542b\u8be5 APIRouter \uff0c\u4f46\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u4f9d\u8d56\u9879\u548c\u53e6\u4e00\u4e2a APIRouter \u3002","title":"\u4f7f\u7528 APIRouter \u7684\u8def\u5f84\u64cd\u4f5c"},{"location":"tutorial/bigger-applications/#_2","text":"\u6211\u4eec\u4e86\u89e3\u5230\u6211\u4eec\u5c06\u9700\u8981\u4e00\u4e9b\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u597d\u51e0\u4e2a\u5730\u65b9\u6240\u4f7f\u7528\u7684\u4f9d\u8d56\u9879\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u5b83\u4eec\u653e\u5728\u5b83\u4eec\u81ea\u5df1\u7684 dependencies \u6a21\u5757\uff08 app/dependencies.py \uff09\u4e2d\u3002 \u73b0\u5728\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4f9d\u8d56\u9879\u6765\u8bfb\u53d6\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 X-Token \u8bf7\u6c42\u9996\u90e8\uff1a from fastapi import Header , HTTPException async def get_token_header ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def get_query_token ( token : str ): if token != \"jessica\" : raise HTTPException ( status_code = 400 , detail = \"No Jessica token provided\" ) Tip \u6211\u4eec\u6b63\u5728\u4f7f\u7528\u865a\u6784\u7684\u8bf7\u6c42\u9996\u90e8\u6765\u7b80\u5316\u6b64\u793a\u4f8b\u3002 \u4f46\u5728\u5b9e\u9645\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u96c6\u6210\u7684 \u5b89\u5168\u6027\u5b9e\u7528\u5de5\u5177 \u4f1a\u5f97\u5230\u66f4\u597d\u7684\u6548\u679c\u3002","title":"\u4f9d\u8d56\u9879"},{"location":"tutorial/bigger-applications/#apirouter_3","text":"\u5047\u8bbe\u4f60\u5728\u4f4d\u4e8e app/routers/items.py \u7684\u6a21\u5757\u4e2d\u8fd8\u6709\u4e13\u95e8\u7528\u4e8e\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u4e2d\u300c\u9879\u76ee\u300d\u7684\u7aef\u70b9\u3002 \u4f60\u5177\u6709\u4ee5\u4e0b \u8def\u5f84\u64cd\u4f5c \uff1a /items/ /items/{item_id} \u8fd9\u548c app/routers/users.py \u7684\u7ed3\u6784\u5b8c\u5168\u76f8\u540c\u3002 \u4f46\u662f\u6211\u4eec\u60f3\u53d8\u5f97\u66f4\u806a\u660e\u5e76\u7b80\u5316\u4e00\u4e9b\u4ee3\u7801\u3002 \u6211\u4eec\u77e5\u9053\u6b64\u6a21\u5757\u4e2d\u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u90fd\u6709\u76f8\u540c\u7684\uff1a \u8def\u5f84 prefix \uff1a /items \u3002 tags \uff1a\uff08\u4ec5\u6709\u4e00\u4e2a items \u6807\u7b7e\uff09\u3002 \u989d\u5916\u7684 responses \u3002 dependencies \uff1a\u5b83\u4eec\u90fd\u9700\u8981\u6211\u4eec\u521b\u5efa\u7684 X-Token \u4f9d\u8d56\u9879\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u6dfb\u52a0\u5230 APIRouter \u4e2d\uff0c\u800c\u4e0d\u662f\u5c06\u5176\u6dfb\u52a0\u5230\u6bcf\u4e2a\u8def\u5f84\u64cd\u4f5c\u4e2d\u3002 from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } \u7531\u4e8e\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u7684\u8def\u5f84\u90fd\u5fc5\u987b\u4ee5 / \u5f00\u5934\uff0c\u4f8b\u5982\uff1a @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): ... ...\u524d\u7f00\u4e0d\u80fd\u4ee5 / \u4f5c\u4e3a\u7ed3\u5c3e\u3002 \u56e0\u6b64\uff0c\u672c\u4f8b\u4e2d\u7684\u524d\u7f00\u4e3a /items \u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a tags \u5217\u8868\u548c\u989d\u5916\u7684 responses \u5217\u8868\uff0c\u8fd9\u4e9b\u53c2\u6570\u5c06\u5e94\u7528\u4e8e\u6b64\u8def\u7531\u5668\u4e2d\u5305\u542b\u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u3002 \u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a dependencies \u5217\u8868\uff0c\u8fd9\u4e9b\u4f9d\u8d56\u9879\u5c06\u88ab\u6dfb\u52a0\u5230\u8def\u7531\u5668\u4e2d\u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u4e2d\uff0c\u5e76\u5c06\u9488\u5bf9\u5411\u5b83\u4eec\u53d1\u8d77\u7684\u6bcf\u4e2a\u8bf7\u6c42\u6267\u884c/\u89e3\u51b3\u3002 Tip \u8bf7\u6ce8\u610f\uff0c\u548c \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u7684\u4f9d\u8d56\u9879 \u5f88\u7c7b\u4f3c\uff0c\u6ca1\u6709\u503c\u4f1a\u88ab\u4f20\u9012\u7ed9\u4f60\u7684 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002 \u6700\u7ec8\u7ed3\u679c\u662f\u9879\u76ee\u76f8\u5173\u7684\u8def\u5f84\u73b0\u5728\u4e3a\uff1a /items/ /items/{item_id} ...\u5982\u6211\u4eec\u6240\u613f\u3002 \u5b83\u4eec\u5c06\u88ab\u6807\u8bb0\u4e3a\u4ec5\u5305\u542b\u5355\u4e2a\u5b57\u7b26\u4e32 \"items\" \u7684\u6807\u7b7e\u5217\u8868\u3002 \u8fd9\u4e9b\u300c\u6807\u7b7e\u300d\u5bf9\u4e8e\u81ea\u52a8\u5316\u4ea4\u4e92\u5f0f\u6587\u6863\u7cfb\u7edf\uff08\u4f7f\u7528 OpenAPI\uff09\u7279\u522b\u6709\u7528\u3002 \u6240\u6709\u7684\u8def\u5f84\u64cd\u4f5c\u90fd\u5c06\u5305\u542b\u9884\u5b9a\u4e49\u7684 responses \u3002 \u6240\u6709\u7684\u8fd9\u4e9b \u8def\u5f84\u64cd\u4f5c \u90fd\u5c06\u5728\u81ea\u8eab\u4e4b\u524d\u8ba1\u7b97/\u6267\u884c dependencies \u5217\u8868\u3002 \u5982\u679c\u4f60\u8fd8\u5728\u4e00\u4e2a\u5177\u4f53\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u4e86\u4f9d\u8d56\u9879\uff0c \u5b83\u4eec\u4e5f\u4f1a\u88ab\u6267\u884c \u3002 \u8def\u7531\u5668\u7684\u4f9d\u8d56\u9879\u6700\u5148\u6267\u884c\uff0c\u7136\u540e\u662f \u88c5\u9970\u5668\u4e2d\u7684 dependencies \uff0c\u518d\u7136\u540e\u662f\u666e\u901a\u7684\u53c2\u6570\u4f9d\u8d56\u9879\u3002 \u4f60\u8fd8\u53ef\u4ee5\u6dfb\u52a0 \u5177\u6709 scopes \u7684 Security \u4f9d\u8d56\u9879 \u3002 Tip \u5728 APIRouter \u4e2d\u5177\u6709 dependencies \u53ef\u4ee5\u7528\u6765\uff0c\u4f8b\u5982\uff0c\u5bf9\u4e00\u6574\u7ec4\u7684 \u8def\u5f84\u64cd\u4f5c \u8981\u6c42\u8eab\u4efd\u8ba4\u8bc1\u3002\u5373\u4f7f\u8fd9\u4e9b\u4f9d\u8d56\u9879\u5e76\u6ca1\u6709\u5206\u522b\u6dfb\u52a0\u5230\u6bcf\u4e2a\u8def\u5f84\u64cd\u4f5c\u4e2d\u3002 Check prefix \u3001 tags \u3001 responses \u4ee5\u53ca dependencies \u53c2\u6570\u53ea\u662f\uff08\u548c\u5176\u4ed6\u5f88\u591a\u60c5\u51b5\u4e00\u6837\uff09 FastAPI \u7684\u4e00\u4e2a\u7528\u4e8e\u5e2e\u52a9\u4f60\u907f\u514d\u4ee3\u7801\u91cd\u590d\u7684\u529f\u80fd\u3002","title":"\u5176\u4ed6\u4f7f\u7528 APIRouter \u7684\u6a21\u5757"},{"location":"tutorial/bigger-applications/#_3","text":"\u8fd9\u4e9b\u4ee3\u7801\u4f4d\u4e8e app.routers.items \u6a21\u5757\uff0c app/routers/items.py \u6587\u4ef6\u4e2d\u3002 \u6211\u4eec\u9700\u8981\u4ece app.dependencies \u6a21\u5757\u5373 app/dependencies.py \u6587\u4ef6\u4e2d\u83b7\u53d6\u4f9d\u8d56\u51fd\u6570\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u901a\u8fc7 .. \u5bf9\u4f9d\u8d56\u9879\u4f7f\u7528\u4e86\u76f8\u5bf9\u5bfc\u5165\uff1a from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" }","title":"\u5bfc\u5165\u4f9d\u8d56\u9879"},{"location":"tutorial/bigger-applications/#_4","text":"Tip \u5982\u679c\u4f60\u5b8c\u5168\u4e86\u89e3\u5bfc\u5165\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u8bf7\u4ece\u4e0b\u9762\u7684\u4e0b\u4e00\u90e8\u5206\u7ee7\u7eed\u3002 \u4e00\u4e2a\u5355\u70b9 . \uff0c\u4f8b\u5982\uff1a from .dependencies import get_token_header \u8868\u793a\uff1a \u4ece\u8be5\u6a21\u5757\uff08 app/routers/items.py \u6587\u4ef6\uff09\u6240\u5728\u7684\u540c\u4e00\u4e2a\u5305\uff08 app/routers/ \u76ee\u5f55\uff09\u5f00\u59cb... \u627e\u5230 dependencies \u6a21\u5757\uff08\u4e00\u4e2a\u4f4d\u4e8e app/routers/dependencies.py \u7684\u865a\u6784\u6587\u4ef6\uff09... \u7136\u540e\u4ece\u4e2d\u5bfc\u5165\u51fd\u6570 get_token_header \u3002 \u4f46\u662f\u8be5\u6587\u4ef6\u5e76\u4e0d\u5b58\u5728\uff0c\u6211\u4eec\u7684\u4f9d\u8d56\u9879\u4f4d\u4e8e app/dependencies.py \u6587\u4ef6\u4e2d\u3002 \u8bf7\u8bb0\u4f4f\u6211\u4eec\u7684\u7a0b\u5e8f/\u6587\u4ef6\u7ed3\u6784\u662f\u600e\u6837\u7684\uff1a \u4e24\u4e2a\u70b9 .. \uff0c\u4f8b\u5982\uff1a from ..dependencies import get_token_header \u8868\u793a\uff1a \u4ece\u8be5\u6a21\u5757\uff08 app/routers/items.py \u6587\u4ef6\uff09\u6240\u5728\u7684\u540c\u4e00\u4e2a\u5305\uff08 app/routers/ \u76ee\u5f55\uff09\u5f00\u59cb... \u8df3\u8f6c\u5230\u5176\u7236\u5305\uff08 app/ \u76ee\u5f55\uff09... \u5728\u8be5\u7236\u5305\u4e2d\uff0c\u627e\u5230 dependencies \u6a21\u5757\uff08\u4f4d\u4e8e app/dependencies.py \u7684\u6587\u4ef6\uff09... \u7136\u540e\u4ece\u4e2d\u5bfc\u5165\u51fd\u6570 get_token_header \u3002 \u6b63\u5e38\u5de5\u4f5c\u4e86\uff01\ud83c\udf89 \u540c\u6837\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e86\u4e09\u4e2a\u70b9 ... \uff0c\u4f8b\u5982\uff1a from ...dependencies import get_token_header \u90a3\u5c06\u610f\u5473\u7740\uff1a \u4ece\u8be5\u6a21\u5757\uff08 app/routers/items.py \u6587\u4ef6\uff09\u6240\u5728\u7684\u540c\u4e00\u4e2a\u5305\uff08 app/routers/ \u76ee\u5f55\uff09\u5f00\u59cb... \u8df3\u8f6c\u5230\u5176\u7236\u5305\uff08 app/ \u76ee\u5f55\uff09... \u7136\u540e\u8df3\u8f6c\u5230\u8be5\u5305\u7684\u7236\u5305\uff08\u8be5\u7236\u5305\u5e76\u4e0d\u5b58\u5728\uff0c app \u5df2\u7ecf\u662f\u6700\u9876\u5c42\u7684\u5305 \ud83d\ude31\uff09... \u5728\u8be5\u7236\u5305\u4e2d\uff0c\u627e\u5230 dependencies \u6a21\u5757\uff08\u4f4d\u4e8e app/ \u66f4\u4e0a\u4e00\u7ea7\u76ee\u5f55\u4e2d\u7684 dependencies.py \u6587\u4ef6\uff09... \u7136\u540e\u4ece\u4e2d\u5bfc\u5165\u51fd\u6570 get_token_header \u3002 \u8fd9\u5c06\u5f15\u7528 app/ \u7684\u5f80\u4e0a\u4e00\u7ea7\uff0c\u5e26\u6709\u5176\u81ea\u5df1\u7684 __init __.py \u7b49\u6587\u4ef6\u7684\u67d0\u4e2a\u5305\u3002\u4f46\u662f\u6211\u4eec\u5e76\u6ca1\u6709\u8fd9\u4e2a\u5305\u3002\u56e0\u6b64\uff0c\u8fd9\u5c06\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\u5f15\u53d1\u9519\u8bef\u3002\ud83d\udea8 \u4f46\u662f\u73b0\u5728\u4f60\u77e5\u9053\u4e86\u5b83\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u56e0\u6b64\u65e0\u8bba\u5b83\u4eec\u591a\u4e48\u590d\u6742\uff0c\u4f60\u90fd\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u76f8\u5bf9\u5bfc\u5165\u3002\ud83e\udd13","title":"\u76f8\u5bf9\u5bfc\u5165\u5982\u4f55\u5de5\u4f5c"},{"location":"tutorial/bigger-applications/#tagsresponses-dependencies","text":"\u6211\u4eec\u4e0d\u6253\u7b97\u5728\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u6dfb\u52a0\u524d\u7f00 /items \u6216 tags =[\"items\"] \uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u4e86 APIRouter \u4e2d\u3002 \u4f46\u662f\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u6dfb\u52a0 \u66f4\u591a \u5c06\u4f1a\u5e94\u7528\u4e8e\u7279\u5b9a\u7684 \u8def\u5f84\u64cd\u4f5c \u7684 tags \uff0c\u4ee5\u53ca\u4e00\u4e9b\u7279\u5b9a\u4e8e\u8be5 \u8def\u5f84\u64cd\u4f5c \u7684\u989d\u5916 responses \uff1a from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } Tip \u6700\u540e\u7684\u8fd9\u4e2a\u8def\u5f84\u64cd\u4f5c\u5c06\u5305\u542b\u6807\u7b7e\u7684\u7ec4\u5408\uff1a [\"items\"\uff0c\"custom\"] \u3002 \u5e76\u4e14\u5728\u6587\u6863\u4e2d\u4e5f\u4f1a\u6709\u4e24\u4e2a\u54cd\u5e94\uff0c\u4e00\u4e2a\u7528\u4e8e 404 \uff0c\u4e00\u4e2a\u7528\u4e8e 403 \u3002","title":"\u6dfb\u52a0\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684 tags\u3001responses \u548c dependencies"},{"location":"tutorial/bigger-applications/#fastapi","text":"\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u4f4d\u4e8e app/main.py \u7684\u6a21\u5757\u3002 \u5728\u8fd9\u91cc\u4f60\u5bfc\u5165\u5e76\u4f7f\u7528 FastAPI \u7c7b\u3002 \u8fd9\u5c06\u662f\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5c06\u6240\u6709\u5185\u5bb9\u8054\u7ed3\u5728\u4e00\u8d77\u7684\u4e3b\u6587\u4ef6\u3002 \u5e76\u4e14\u7531\u4e8e\u4f60\u7684\u5927\u90e8\u5206\u903b\u8f91\u73b0\u5728\u90fd\u5b58\u5728\u4e8e\u5176\u81ea\u5df1\u7684\u7279\u5b9a\u6a21\u5757\u4e2d\uff0c\u56e0\u6b64\u4e3b\u6587\u4ef6\u7684\u5185\u5bb9\u5c06\u975e\u5e38\u7b80\u5355\u3002","title":"FastAPI \u4e3b\u4f53"},{"location":"tutorial/bigger-applications/#fastapi_1","text":"\u4f60\u53ef\u4ee5\u50cf\u5e73\u5e38\u4e00\u6837\u5bfc\u5165\u5e76\u521b\u5efa\u4e00\u4e2a FastAPI \u7c7b\u3002 \u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u58f0\u660e \u5168\u5c40\u4f9d\u8d56\u9879 \uff0c\u5b83\u4f1a\u548c\u6bcf\u4e2a APIRouter \u7684\u4f9d\u8d56\u9879\u7ec4\u5408\u5728\u4e00\u8d77\uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" }","title":"\u5bfc\u5165 FastAPI"},{"location":"tutorial/bigger-applications/#apirouter_4","text":"\u73b0\u5728\uff0c\u6211\u4eec\u5bfc\u5165\u5177\u6709 APIRouter \u7684\u5176\u4ed6\u5b50\u6a21\u5757\uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u7531\u4e8e\u6587\u4ef6 app/routers/users.py \u548c app/routers/items.py \u662f\u540c\u4e00 Python \u5305 app \u4e00\u4e2a\u90e8\u5206\u7684\u5b50\u6a21\u5757\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u70b9 . \u901a\u8fc7\u300c\u76f8\u5bf9\u5bfc\u5165\u300d\u6765\u5bfc\u5165\u5b83\u4eec\u3002","title":"\u5bfc\u5165 APIRouter"},{"location":"tutorial/bigger-applications/#_5","text":"\u8fd9\u6bb5\u4ee3\u7801\uff1a from .routers import items , users \u8868\u793a\uff1a \u4ece\u8be5\u6a21\u5757\uff08 app/main.py \u6587\u4ef6\uff09\u6240\u5728\u7684\u540c\u4e00\u4e2a\u5305\uff08 app/ \u76ee\u5f55\uff09\u5f00\u59cb... \u5bfb\u627e routers \u5b50\u5305\uff08\u4f4d\u4e8e app/routers/ \u7684\u76ee\u5f55\uff09... \u4ece\u8be5\u5305\u4e2d\uff0c\u5bfc\u5165\u5b50\u6a21\u5757 items (\u4f4d\u4e8e app/routers/items.py \u7684\u6587\u4ef6) \u4ee5\u53ca users (\u4f4d\u4e8e app/routers/users.py \u7684\u6587\u4ef6)... items \u6a21\u5757\u5c06\u5177\u6709\u4e00\u4e2a router \u53d8\u91cf\uff08 items.router \uff09\u3002\u8fd9\u4e0e\u6211\u4eec\u5728 app/routers/items.py \u6587\u4ef6\u4e2d\u521b\u5efa\u7684\u53d8\u91cf\u76f8\u540c\uff0c\u5b83\u662f\u4e00\u4e2a APIRouter \u5bf9\u8c61\u3002 \u7136\u540e\u6211\u4eec\u5bf9 users \u6a21\u5757\u8fdb\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u50cf\u8fd9\u6837\u5bfc\u5165\u5b83\u4eec\uff1a from app.routers import items , users Info \u7b2c\u4e00\u4e2a\u7248\u672c\u662f\u300c\u76f8\u5bf9\u5bfc\u5165\u300d\uff1a from .routers import items , users \u7b2c\u4e8c\u4e2a\u7248\u672c\u662f\u300c\u7edd\u5bf9\u5bfc\u5165\u300d\uff1a from app.routers import items , users \u8981\u4e86\u89e3\u6709\u5173 Python \u5305\u548c\u6a21\u5757\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u9605 \u5173\u4e8e Modules \u7684 Python \u5b98\u65b9\u6587\u6863 \u3002","title":"\u5bfc\u5165\u662f\u5982\u4f55\u5de5\u4f5c\u7684"},{"location":"tutorial/bigger-applications/#_6","text":"\u6211\u4eec\u5c06\u76f4\u63a5\u5bfc\u5165 items \u5b50\u6a21\u5757\uff0c\u800c\u4e0d\u662f\u4ec5\u5bfc\u5165\u5176 router \u53d8\u91cf\u3002 \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u5728 users \u5b50\u6a21\u5757\u4e2d\u4e5f\u6709\u53e6\u4e00\u4e2a\u540d\u4e3a router \u7684\u53d8\u91cf\u3002 \u5982\u679c\u6211\u4eec\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u5bfc\u5165\uff0c\u4f8b\u5982\uff1a from .routers.items import router from .routers.users import router \u6765\u81ea users \u7684 router \u5c06\u8986\u76d6\u6765\u81ea items \u4e2d\u7684 router \uff0c\u6211\u4eec\u5c06\u65e0\u6cd5\u540c\u65f6\u4f7f\u7528\u5b83\u4eec\u3002 \u56e0\u6b64\uff0c\u4e3a\u4e86\u80fd\u591f\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u4f7f\u7528\u5b83\u4eec\uff0c\u6211\u4eec\u76f4\u63a5\u5bfc\u5165\u5b50\u6a21\u5757\uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" }","title":"\u907f\u514d\u540d\u79f0\u51b2\u7a81"},{"location":"tutorial/bigger-applications/#users-items-apirouter","text":"\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u5305\u542b\u6765\u81ea users \u548c items \u5b50\u6a21\u5757\u7684 router \u3002 from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } Info users.router \u5305\u542b\u4e86 app/routers/users.py \u6587\u4ef6\u4e2d\u7684 APIRouter \u3002 items.router \u5305\u542b\u4e86 app/routers/items.py \u6587\u4ef6\u4e2d\u7684 APIRouter \u3002 \u4f7f\u7528 app.include_router() \uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e2a APIRouter \u6dfb\u52a0\u5230\u4e3b FastAPI \u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 \u5b83\u5c06\u5305\u542b\u6765\u81ea\u8be5\u8def\u7531\u5668\u7684\u6240\u6709\u8def\u7531\u4f5c\u4e3a\u5176\u4e00\u90e8\u5206\u3002 \u6280\u672f\u7ec6\u8282 \u5b9e\u9645\u4e0a\uff0c\u5b83\u5c06\u5728\u5185\u90e8\u4e3a\u58f0\u660e\u5728 APIRouter \u4e2d\u7684\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u521b\u5efa\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u3002 \u6240\u4ee5\uff0c\u5728\u5e55\u540e\uff0c\u5b83\u5b9e\u9645\u4e0a\u4f1a\u50cf\u6240\u6709\u7684\u4e1c\u897f\u90fd\u662f\u540c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\u5de5\u4f5c\u3002 Check \u5305\u542b\u8def\u7531\u5668\u65f6\uff0c\u4f60\u4e0d\u5fc5\u62c5\u5fc3\u6027\u80fd\u95ee\u9898\u3002 \u8fd9\u5c06\u82b1\u8d39\u51e0\u5fae\u79d2\u65f6\u95f4\uff0c\u5e76\u4e14\u53ea\u4f1a\u5728\u542f\u52a8\u65f6\u53d1\u751f\u3002 \u56e0\u6b64\uff0c\u5b83\u4e0d\u4f1a\u5f71\u54cd\u6027\u80fd\u3002\u26a1","title":"\u5305\u542b users \u548c items \u7684 APIRouter"},{"location":"tutorial/bigger-applications/#prefixtagsresponses-dependencies-apirouter","text":"\u73b0\u5728\uff0c\u5047\u8bbe\u4f60\u7684\u7ec4\u7ec7\u4e3a\u4f60\u63d0\u4f9b\u4e86 app/internal/admin.py \u6587\u4ef6\u3002 \u5b83\u5305\u542b\u4e00\u4e2a\u5e26\u6709\u4e00\u4e9b\u7531\u4f60\u7684\u7ec4\u7ec7\u5728\u591a\u4e2a\u9879\u76ee\u4e4b\u95f4\u5171\u4eab\u7684\u7ba1\u7406\u5458 \u8def\u5f84\u64cd\u4f5c \u7684 APIRouter \u3002 \u5bf9\u4e8e\u6b64\u793a\u4f8b\uff0c\u5b83\u5c06\u975e\u5e38\u7b80\u5355\u3002\u4f46\u662f\u5047\u8bbe\u7531\u4e8e\u5b83\u662f\u4e0e\u7ec4\u7ec7\u4e2d\u7684\u5176\u4ed6\u9879\u76ee\u6240\u5171\u4eab\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u65e0\u6cd5\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\uff0c\u4ee5\u53ca\u76f4\u63a5\u5728 APIRouter \u4e2d\u6dfb\u52a0 prefix \u3001 dependencies \u3001 tags \u7b49\uff1a from fastapi import APIRouter router = APIRouter () @router . post ( \"/\" ) async def update_admin (): return { \"message\" : \"Admin getting schwifty\" } \u4f46\u662f\u6211\u4eec\u4ecd\u7136\u5e0c\u671b\u5728\u5305\u542b APIRouter \u65f6\u8bbe\u7f6e\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 prefix \uff0c\u4ee5\u4fbf\u5176\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u4ee5 /admin \u5f00\u5934\uff0c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u672c\u9879\u76ee\u5df2\u7ecf\u6709\u7684 dependencies \u4fdd\u62a4\u5b83\uff0c\u5e76\u4e14\u6211\u4eec\u5e0c\u671b\u5b83\u5305\u542b\u81ea\u5b9a\u4e49\u7684 tags \u548c responses \u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u8fd9\u4e9b\u53c2\u6570\u4f20\u9012\u7ed9 app.include_router() \u6765\u5b8c\u6210\u6240\u6709\u7684\u58f0\u660e\uff0c\u800c\u4e0d\u5fc5\u4fee\u6539\u539f\u59cb\u7684 APIRouter \uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u8fd9\u6837\uff0c\u539f\u59cb\u7684 APIRouter \u5c06\u4fdd\u6301\u4e0d\u53d8\uff0c\u56e0\u6b64\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u4e0e\u7ec4\u7ec7\u4e2d\u7684\u5176\u4ed6\u9879\u76ee\u5171\u4eab\u76f8\u540c\u7684 app/internal/admin.py \u6587\u4ef6\u3002 \u7ed3\u679c\u662f\u5728\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6765\u81ea admin \u6a21\u5757\u7684\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u90fd\u5c06\u5177\u6709\uff1a /admin \u524d\u7f00 \u3002 admin \u6807\u7b7e\u3002 get_token_header \u4f9d\u8d56\u9879\u3002 418 \u54cd\u5e94\u3002 \ud83c\udf75 \u4f46\u8fd9\u53ea\u4f1a\u5f71\u54cd\u6211\u4eec\u5e94\u7528\u4e2d\u7684 APIRouter \uff0c\u800c\u4e0d\u4f1a\u5f71\u54cd\u4f7f\u7528\u5b83\u7684\u4efb\u4f55\u5176\u4ed6\u4ee3\u7801\u3002 \u56e0\u6b64\uff0c\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5176\u4ed6\u9879\u76ee\u80fd\u591f\u4ee5\u4e0d\u540c\u7684\u8eab\u4efd\u8ba4\u8bc1\u65b9\u6cd5\u4f7f\u7528\u76f8\u540c\u7684 APIRouter \u3002","title":"\u5305\u542b\u4e00\u4e2a\u6709\u81ea\u5b9a\u4e49 prefix\u3001tags\u3001responses \u548c dependencies \u7684 APIRouter"},{"location":"tutorial/bigger-applications/#_7","text":"\u6211\u4eec\u8fd8\u53ef\u4ee5\u76f4\u63a5\u5c06 \u8def\u5f84\u64cd\u4f5c \u6dfb\u52a0\u5230 FastAPI \u5e94\u7528\u4e2d\u3002 \u8fd9\u91cc\u6211\u4eec\u8fd9\u6837\u505a\u4e86...\u53ea\u662f\u4e3a\u4e86\u8868\u660e\u6211\u4eec\u53ef\u4ee5\u505a\u5230\ud83e\udd37\uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u5b83\u5c06\u4e0e\u901a\u8fc7 app.include_router() \u6dfb\u52a0\u7684\u6240\u6709\u5176\u4ed6 \u8def\u5f84\u64cd\u4f5c \u4e00\u8d77\u6b63\u5e38\u8fd0\u884c\u3002 \u7279\u522b\u7684\u6280\u672f\u7ec6\u8282 \u6ce8\u610f \uff1a\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6280\u672f\u6027\u7684\u7ec6\u8282\uff0c\u4f60\u4e5f\u8bb8\u53ef\u4ee5 \u76f4\u63a5\u8df3\u8fc7 \u3002 APIRouter \u6ca1\u6709\u88ab\u300c\u6302\u8f7d\u300d\uff0c\u5b83\u4eec\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4f59\u90e8\u5206\u6ca1\u6709\u9694\u79bb\u3002 \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u60f3\u8981\u5728 OpenAPI \u6a21\u5f0f\u548c\u7528\u6237\u754c\u9762\u4e2d\u5305\u542b\u5b83\u4eec\u7684 \u8def\u5f84\u64cd\u4f5c \u3002 \u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u4ec5\u4ec5\u9694\u79bb\u5b83\u4eec\u5e76\u72ec\u7acb\u4e8e\u5176\u4f59\u90e8\u5206\u6765\u300c\u6302\u8f7d\u300d\u5b83\u4eec\uff0c\u56e0\u6b64 \u8def\u5f84\u64cd\u4f5c \u662f\u88ab\u300c\u514b\u9686\u7684\u300d\uff08\u91cd\u65b0\u521b\u5efa\uff09\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5305\u542b\u3002","title":"\u5305\u542b\u4e00\u4e2a\u8def\u5f84\u64cd\u4f5c"},{"location":"tutorial/bigger-applications/#api","text":"\u73b0\u5728\uff0c\u4f7f\u7528 app.main \u6a21\u5757\u548c app \u53d8\u91cf\u8fd0\u884c uvicorn \uff1a $ uvicorn app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u7136\u540e\u6253\u5f00\u4f4d\u4e8e http://127.0.0.1:8000/docs \u7684\u6587\u6863\u3002 \u4f60\u5c06\u770b\u5230\u4f7f\u7528\u4e86\u6b63\u786e\u8def\u5f84\uff08\u548c\u524d\u7f00\uff09\u548c\u6b63\u786e\u6807\u7b7e\u7684\u81ea\u52a8\u5316 API \u6587\u6863\uff0c\u5305\u62ec\u4e86\u6765\u81ea\u6240\u6709\u5b50\u6a21\u5757\u7684\u8def\u5f84\uff1a","title":"\u67e5\u770b\u81ea\u52a8\u5316\u7684 API \u6587\u6863"},{"location":"tutorial/bigger-applications/#prefix","text":"\u4f60\u4e5f\u53ef\u4ee5\u5728 \u540c\u4e00 \u8def\u7531\u5668\u4e0a\u4f7f\u7528\u4e0d\u540c\u7684\u524d\u7f00\u6765\u591a\u6b21\u4f7f\u7528 .include_router() \u3002 \u5728\u6709\u4e9b\u573a\u666f\u8fd9\u53ef\u80fd\u6709\u7528\uff0c\u4f8b\u5982\u4ee5\u4e0d\u540c\u7684\u524d\u7f00\u516c\u5f00\u540c\u4e00\u4e2a\u7684 API\uff0c\u6bd4\u65b9\u8bf4 /api/v1 \u548c /api/latest \u3002 \u8fd9\u662f\u4e00\u4e2a\u4f60\u53ef\u80fd\u5e76\u4e0d\u771f\u6b63\u9700\u8981\u7684\u9ad8\u7ea7\u7528\u6cd5\uff0c\u4f46\u4e07\u4e00\u4f60\u6709\u9700\u8981\u4e86\u5c31\u80fd\u591f\u7528\u4e0a\u3002","title":"\u591a\u6b21\u4f7f\u7528\u4e0d\u540c\u7684 prefix \u5305\u542b\u540c\u4e00\u4e2a\u8def\u7531\u5668"},{"location":"tutorial/bigger-applications/#apirouter-apirouter","text":"\u4e0e\u5728 FastAPI \u5e94\u7528\u7a0b\u5e8f\u4e2d\u5305\u542b APIRouter \u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u53e6\u4e00\u4e2a APIRouter \u4e2d\u5305\u542b APIRouter \uff0c\u901a\u8fc7\uff1a router . include_router ( other_router ) \u8bf7\u786e\u4fdd\u5728\u4f60\u5c06 router \u5305\u542b\u5230 FastAPI \u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\u8fdb\u884c\u6b64\u64cd\u4f5c\uff0c\u4ee5\u4fbf other_router \u4e2d\u7684 \u8def\u5f84\u64cd\u4f5c \u4e5f\u80fd\u88ab\u5305\u542b\u8fdb\u6765\u3002","title":"\u5728\u53e6\u4e00\u4e2a APIRouter \u4e2d\u5305\u542b\u4e00\u4e2a APIRouter"},{"location":"tutorial/body-fields/","text":"\u8bf7\u6c42\u4f53 - \u5b57\u6bb5 \u00b6 \u4e0e\u4f7f\u7528 Query \u3001 Path \u548c Body \u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u58f0\u660e\u989d\u5916\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Pydantic \u7684 Field \u5728 Pydantic \u6a21\u578b\u5185\u90e8\u58f0\u660e\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002 \u5bfc\u5165 Field \u00b6 \u9996\u5148\uff0c\u4f60\u5fc5\u987b\u5bfc\u5165\u5b83\uff1a from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results Warning \u6ce8\u610f\uff0c Field \u662f\u76f4\u63a5\u4ece pydantic \u5bfc\u5165\u7684\uff0c\u800c\u4e0d\u662f\u50cf\u5176\u4ed6\u7684\uff08 Query \uff0c Path \uff0c Body \u7b49\uff09\u90fd\u4ece fastapi \u5bfc\u5165\u3002 \u58f0\u660e\u6a21\u578b\u5c5e\u6027 \u00b6 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5bf9\u6a21\u578b\u5c5e\u6027\u4f7f\u7528 Field \uff1a from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results Field \u7684\u5de5\u4f5c\u65b9\u5f0f\u548c Query \u3001 Path \u548c Body \u76f8\u540c\uff0c\u5305\u62ec\u5b83\u4eec\u7684\u53c2\u6570\u7b49\u7b49\u4e5f\u5b8c\u5168\u76f8\u540c\u3002 \u6280\u672f\u7ec6\u8282 \u5b9e\u9645\u4e0a\uff0c Query \u3001 Path \u548c\u5176\u4ed6\u4f60\u5c06\u5728\u4e4b\u540e\u770b\u5230\u7684\u7c7b\uff0c\u521b\u5efa\u7684\u662f\u7531\u4e00\u4e2a\u5171\u540c\u7684 Params \u7c7b\u6d3e\u751f\u7684\u5b50\u7c7b\u7684\u5bf9\u8c61\uff0c\u8be5\u5171\u540c\u7c7b\u672c\u8eab\u53c8\u662f Pydantic \u7684 FieldInfo \u7c7b\u7684\u5b50\u7c7b\u3002 Pydantic \u7684 Field \u4e5f\u4f1a\u8fd4\u56de\u4e00\u4e2a FieldInfo \u7684\u5b9e\u4f8b\u3002 Body \u4e5f\u76f4\u63a5\u8fd4\u56de FieldInfo \u7684\u4e00\u4e2a\u5b50\u7c7b\u7684\u5bf9\u8c61\u3002\u8fd8\u6709\u5176\u4ed6\u4e00\u4e9b\u4f60\u4e4b\u540e\u4f1a\u770b\u5230\u7684\u7c7b\u662f Body \u7c7b\u7684\u5b50\u7c7b\u3002 \u8bf7\u8bb0\u4f4f\u5f53\u4f60\u4ece fastapi \u5bfc\u5165 Query \u3001 Path \u7b49\u5bf9\u8c61\u65f6\uff0c\u4ed6\u4eec\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570\u3002 Tip \u6ce8\u610f\u6bcf\u4e2a\u6a21\u578b\u5c5e\u6027\u5982\u4f55\u4f7f\u7528\u7c7b\u578b\u3001\u9ed8\u8ba4\u503c\u548c Field \u5728\u4ee3\u7801\u7ed3\u6784\u4e0a\u548c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u662f\u76f8\u540c\u7684\uff0c\u533a\u522b\u662f\u7528 Field \u66ff\u6362 Path \u3001 Query \u548c Body \u3002 \u6dfb\u52a0\u989d\u5916\u4fe1\u606f \u00b6 \u4f60\u53ef\u4ee5\u5728 Field \u3001 Query \u3001 Body \u4e2d\u58f0\u660e\u989d\u5916\u7684\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u5c06\u5305\u542b\u5728\u751f\u6210\u7684 JSON Schema \u4e2d\u3002 \u4f60\u5c06\u5728\u6587\u6863\u7684\u540e\u9762\u90e8\u5206\u5b66\u4e60\u58f0\u660e\u793a\u4f8b\u65f6\uff0c\u4e86\u89e3\u5230\u66f4\u591a\u6709\u5173\u6dfb\u52a0\u989d\u5916\u4fe1\u606f\u7684\u77e5\u8bc6\u3002 \u603b\u7ed3 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 Pydantic \u7684 Field \u4e3a\u6a21\u578b\u5c5e\u6027\u58f0\u660e\u989d\u5916\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002 \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u989d\u5916\u7684\u5173\u952e\u5b57\u53c2\u6570\u6765\u4f20\u9012\u989d\u5916\u7684 JSON Schema \u5143\u6570\u636e\u3002","title":"\u8bf7\u6c42\u4f53 - \u5b57\u6bb5"},{"location":"tutorial/body-fields/#-","text":"\u4e0e\u4f7f\u7528 Query \u3001 Path \u548c Body \u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u58f0\u660e\u989d\u5916\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Pydantic \u7684 Field \u5728 Pydantic \u6a21\u578b\u5185\u90e8\u58f0\u660e\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002","title":"\u8bf7\u6c42\u4f53 - \u5b57\u6bb5"},{"location":"tutorial/body-fields/#field","text":"\u9996\u5148\uff0c\u4f60\u5fc5\u987b\u5bfc\u5165\u5b83\uff1a from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results Warning \u6ce8\u610f\uff0c Field \u662f\u76f4\u63a5\u4ece pydantic \u5bfc\u5165\u7684\uff0c\u800c\u4e0d\u662f\u50cf\u5176\u4ed6\u7684\uff08 Query \uff0c Path \uff0c Body \u7b49\uff09\u90fd\u4ece fastapi \u5bfc\u5165\u3002","title":"\u5bfc\u5165 Field"},{"location":"tutorial/body-fields/#_1","text":"\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5bf9\u6a21\u578b\u5c5e\u6027\u4f7f\u7528 Field \uff1a from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results Field \u7684\u5de5\u4f5c\u65b9\u5f0f\u548c Query \u3001 Path \u548c Body \u76f8\u540c\uff0c\u5305\u62ec\u5b83\u4eec\u7684\u53c2\u6570\u7b49\u7b49\u4e5f\u5b8c\u5168\u76f8\u540c\u3002 \u6280\u672f\u7ec6\u8282 \u5b9e\u9645\u4e0a\uff0c Query \u3001 Path \u548c\u5176\u4ed6\u4f60\u5c06\u5728\u4e4b\u540e\u770b\u5230\u7684\u7c7b\uff0c\u521b\u5efa\u7684\u662f\u7531\u4e00\u4e2a\u5171\u540c\u7684 Params \u7c7b\u6d3e\u751f\u7684\u5b50\u7c7b\u7684\u5bf9\u8c61\uff0c\u8be5\u5171\u540c\u7c7b\u672c\u8eab\u53c8\u662f Pydantic \u7684 FieldInfo \u7c7b\u7684\u5b50\u7c7b\u3002 Pydantic \u7684 Field \u4e5f\u4f1a\u8fd4\u56de\u4e00\u4e2a FieldInfo \u7684\u5b9e\u4f8b\u3002 Body \u4e5f\u76f4\u63a5\u8fd4\u56de FieldInfo \u7684\u4e00\u4e2a\u5b50\u7c7b\u7684\u5bf9\u8c61\u3002\u8fd8\u6709\u5176\u4ed6\u4e00\u4e9b\u4f60\u4e4b\u540e\u4f1a\u770b\u5230\u7684\u7c7b\u662f Body \u7c7b\u7684\u5b50\u7c7b\u3002 \u8bf7\u8bb0\u4f4f\u5f53\u4f60\u4ece fastapi \u5bfc\u5165 Query \u3001 Path \u7b49\u5bf9\u8c61\u65f6\uff0c\u4ed6\u4eec\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570\u3002 Tip \u6ce8\u610f\u6bcf\u4e2a\u6a21\u578b\u5c5e\u6027\u5982\u4f55\u4f7f\u7528\u7c7b\u578b\u3001\u9ed8\u8ba4\u503c\u548c Field \u5728\u4ee3\u7801\u7ed3\u6784\u4e0a\u548c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u662f\u76f8\u540c\u7684\uff0c\u533a\u522b\u662f\u7528 Field \u66ff\u6362 Path \u3001 Query \u548c Body \u3002","title":"\u58f0\u660e\u6a21\u578b\u5c5e\u6027"},{"location":"tutorial/body-fields/#_2","text":"\u4f60\u53ef\u4ee5\u5728 Field \u3001 Query \u3001 Body \u4e2d\u58f0\u660e\u989d\u5916\u7684\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u5c06\u5305\u542b\u5728\u751f\u6210\u7684 JSON Schema \u4e2d\u3002 \u4f60\u5c06\u5728\u6587\u6863\u7684\u540e\u9762\u90e8\u5206\u5b66\u4e60\u58f0\u660e\u793a\u4f8b\u65f6\uff0c\u4e86\u89e3\u5230\u66f4\u591a\u6709\u5173\u6dfb\u52a0\u989d\u5916\u4fe1\u606f\u7684\u77e5\u8bc6\u3002","title":"\u6dfb\u52a0\u989d\u5916\u4fe1\u606f"},{"location":"tutorial/body-fields/#_3","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 Pydantic \u7684 Field \u4e3a\u6a21\u578b\u5c5e\u6027\u58f0\u660e\u989d\u5916\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002 \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u989d\u5916\u7684\u5173\u952e\u5b57\u53c2\u6570\u6765\u4f20\u9012\u989d\u5916\u7684 JSON Schema \u5143\u6570\u636e\u3002","title":"\u603b\u7ed3"},{"location":"tutorial/body-multiple-params/","text":"\u8bf7\u6c42\u4f53 - \u591a\u4e2a\u53c2\u6570 \u00b6 \u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5982\u4f55\u4f7f\u7528 Path \u548c Query \uff0c\u4e0b\u9762\u8ba9\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e0b\u8bf7\u6c42\u4f53\u58f0\u660e\u7684\u66f4\u9ad8\u7ea7\u7528\u6cd5\u3002 \u6df7\u5408\u4f7f\u7528 Path \u3001 Query \u548c\u8bf7\u6c42\u4f53\u53c2\u6570 \u00b6 \u9996\u5148\uff0c\u6beb\u65e0\u7591\u95ee\u5730\uff0c\u4f60\u53ef\u4ee5\u968f\u610f\u5730\u6df7\u5408\u4f7f\u7528 Path \u3001 Query \u548c\u8bf7\u6c42\u4f53\u53c2\u6570\u58f0\u660e\uff0c FastAPI \u4f1a\u77e5\u9053\u8be5\u5982\u4f55\u5904\u7406\u3002 \u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5c06\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a None \u6765\u5c06\u8bf7\u6c42\u4f53\u53c2\u6570\u58f0\u660e\u4e3a\u53ef\u9009\u53c2\u6570\uff1a from typing import Union from fastapi import FastAPI , Path from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 0 , le = 1000 ), q : Union [ str , None ] = None , item : Union [ Item , None ] = None , ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) if item : results . update ({ \"item\" : item }) return results Note \u8bf7\u6ce8\u610f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06\u4ece\u8bf7\u6c42\u4f53\u83b7\u53d6\u7684 item \u662f\u53ef\u9009\u7684\u3002\u56e0\u4e3a\u5b83\u7684\u9ed8\u8ba4\u503c\u4e3a None \u3002 \u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570 \u00b6 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c \u8def\u5f84\u64cd\u4f5c \u5c06\u671f\u671b\u4e00\u4e2a\u5177\u6709 Item \u7684\u5c5e\u6027\u7684 JSON \u8bf7\u6c42\u4f53\uff0c\u5c31\u50cf\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } \u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u58f0\u660e\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\uff0c\u4f8b\u5982 item \u548c user \uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user } return results \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c FastAPI \u5c06\u6ce8\u610f\u5230\u8be5\u51fd\u6570\u4e2d\u6709\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\uff08\u4e24\u4e2a Pydantic \u6a21\u578b\u53c2\u6570\uff09\u3002 \u56e0\u6b64\uff0c\u5b83\u5c06\u4f7f\u7528\u53c2\u6570\u540d\u79f0\u4f5c\u4e3a\u8bf7\u6c42\u4f53\u4e2d\u7684\u952e\uff08\u5b57\u6bb5\u540d\u79f0\uff09\uff0c\u5e76\u671f\u671b\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u5185\u5bb9\u7684\u8bf7\u6c42\u4f53\uff1a { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 }, \"user\" : { \"username\" : \"dave\" , \"full_name\" : \"Dave Grohl\" } } Note \u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f item \u7684\u58f0\u660e\u65b9\u5f0f\u4e0e\u4e4b\u524d\u76f8\u540c\uff0c\u4f46\u73b0\u5728\u5b83\u88ab\u671f\u671b\u901a\u8fc7 item \u952e\u5185\u5d4c\u5728\u8bf7\u6c42\u4f53\u4e2d\u3002 FastAPI \u5c06\u81ea\u52a8\u5bf9\u8bf7\u6c42\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u8f6c\u6362\uff0c\u56e0\u6b64 item \u53c2\u6570\u5c06\u63a5\u6536\u6307\u5b9a\u7684\u5185\u5bb9\uff0c user \u53c2\u6570\u4e5f\u662f\u5982\u6b64\u3002 \u5b83\u5c06\u6267\u884c\u5bf9\u590d\u5408\u6570\u636e\u7684\u6821\u9a8c\uff0c\u5e76\u4e14\u50cf\u73b0\u5728\u8fd9\u6837\u4e3a OpenAPI \u6a21\u5f0f\u548c\u81ea\u52a8\u5316\u6587\u6863\u5bf9\u5176\u8fdb\u884c\u8bb0\u5f55\u3002 \u8bf7\u6c42\u4f53\u4e2d\u7684\u5355\u4e00\u503c \u00b6 \u4e0e\u4f7f\u7528 Query \u548c Path \u4e3a\u67e5\u8be2\u53c2\u6570\u548c\u8def\u5f84\u53c2\u6570\u5b9a\u4e49\u989d\u5916\u6570\u636e\u7684\u65b9\u5f0f\u76f8\u540c\uff0c FastAPI \u63d0\u4f9b\u4e86\u4e00\u4e2a\u540c\u7b49\u7684 Body \u3002 \u4f8b\u5982\uff0c\u4e3a\u4e86\u6269\u5c55\u5148\u524d\u7684\u6a21\u578b\uff0c\u4f60\u53ef\u80fd\u51b3\u5b9a\u9664\u4e86 item \u548c user \u4e4b\u5916\uff0c\u8fd8\u60f3\u5728\u540c\u4e00\u8bf7\u6c42\u4f53\u4e2d\u5177\u6709\u53e6\u4e00\u4e2a\u952e importance \u3002 \u5982\u679c\u4f60\u5c31\u6309\u539f\u6837\u58f0\u660e\u5b83\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u5355\u4e00\u503c\uff0c FastAPI \u5c06\u5047\u5b9a\u5b83\u662f\u4e00\u4e2a\u67e5\u8be2\u53c2\u6570\u3002 \u4f46\u662f\u4f60\u53ef\u4ee5\u4f7f\u7528 Body \u6307\u793a FastAPI \u5c06\u5176\u4f5c\u4e3a\u8bf7\u6c42\u4f53\u7684\u53e6\u4e00\u4e2a\u952e\u8fdb\u884c\u5904\u7406\u3002 from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User , importance : int = Body ()): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } return results \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c FastAPI \u5c06\u671f\u671b\u50cf\u8fd9\u6837\u7684\u8bf7\u6c42\u4f53\uff1a { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 }, \"user\" : { \"username\" : \"dave\" , \"full_name\" : \"Dave Grohl\" }, \"importance\" : 5 } \u540c\u6837\u7684\uff0c\u5b83\u5c06\u8f6c\u6362\u6570\u636e\u7c7b\u578b\uff0c\u6821\u9a8c\uff0c\u751f\u6210\u6587\u6863\u7b49\u3002 \u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\u548c\u67e5\u8be2\u53c2\u6570 \u00b6 \u5f53\u7136\uff0c\u9664\u4e86\u8bf7\u6c42\u4f53\u53c2\u6570\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728\u4efb\u4f55\u9700\u8981\u7684\u65f6\u5019\u58f0\u660e\u989d\u5916\u7684\u67e5\u8be2\u53c2\u6570\u3002 \u7531\u4e8e\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5355\u4e00\u503c\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570\uff0c\u56e0\u6b64\u4f60\u4e0d\u5fc5\u663e\u5f0f\u5730\u6dfb\u52a0 Query \uff0c\u4f60\u53ef\u4ee5\u4ec5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a q : str = None \u6bd4\u5982\uff1a from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int , item : Item , user : User , importance : int = Body ( gt = 0 ), q : Union [ str , None ] = None ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } if q : results . update ({ \"q\" : q }) return results Info Body \u540c\u6837\u5177\u6709\u4e0e Query \u3001 Path \u4ee5\u53ca\u5176\u4ed6\u540e\u9762\u5c06\u770b\u5230\u7684\u7c7b\u5b8c\u5168\u76f8\u540c\u7684\u989d\u5916\u6821\u9a8c\u548c\u5143\u6570\u636e\u53c2\u6570\u3002 \u5d4c\u5165\u5355\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570 \u00b6 \u5047\u8bbe\u4f60\u53ea\u6709\u4e00\u4e2a\u6765\u81ea Pydantic \u6a21\u578b Item \u7684\u8bf7\u6c42\u4f53\u53c2\u6570 item \u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c FastAPI \u5c06\u76f4\u63a5\u671f\u671b\u8fd9\u6837\u7684\u8bf7\u6c42\u4f53\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u5b83\u671f\u671b\u4e00\u4e2a\u62e5\u6709 item \u952e\u5e76\u5728\u503c\u4e2d\u5305\u542b\u6a21\u578b\u5185\u5bb9\u7684 JSON\uff0c\u5c31\u50cf\u5728\u58f0\u660e\u989d\u5916\u7684\u8bf7\u6c42\u4f53\u53c2\u6570\u65f6\u6240\u505a\u7684\u90a3\u6837\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7279\u6b8a\u7684 Body \u53c2\u6570 embed \uff1a item : Item = Body ( embed = True ) \u6bd4\u5982\uff1a from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c FastAPI \u5c06\u671f\u671b\u50cf\u8fd9\u6837\u7684\u8bf7\u6c42\u4f53\uff1a { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } } \u800c\u4e0d\u662f\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } \u603b\u7ed3 \u00b6 \u4f60\u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\u5230 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\uff0c\u5373\u4f7f\u4e00\u4e2a\u8bf7\u6c42\u53ea\u80fd\u6709\u4e00\u4e2a\u8bf7\u6c42\u4f53\u3002 \u4f46\u662f FastAPI \u4f1a\u5904\u7406\u5b83\uff0c\u5728\u51fd\u6570\u4e2d\u4e3a\u4f60\u63d0\u4f9b\u6b63\u786e\u7684\u6570\u636e\uff0c\u5e76\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u6821\u9a8c\u5e76\u8bb0\u5f55\u6b63\u786e\u7684\u6a21\u5f0f\u3002 \u4f60\u8fd8\u53ef\u4ee5\u58f0\u660e\u5c06\u4f5c\u4e3a\u8bf7\u6c42\u4f53\u7684\u4e00\u90e8\u5206\u6240\u63a5\u6536\u7684\u5355\u4e00\u503c\u3002 \u4f60\u8fd8\u53ef\u4ee5\u6307\u793a FastAPI \u5728\u4ec5\u58f0\u660e\u4e86\u4e00\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u539f\u672c\u7684\u8bf7\u6c42\u4f53\u5d4c\u5165\u5230\u4e00\u4e2a\u952e\u4e2d\u3002","title":"\u8bf7\u6c42\u4f53 - \u591a\u4e2a\u53c2\u6570"},{"location":"tutorial/body-multiple-params/#-","text":"\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5982\u4f55\u4f7f\u7528 Path \u548c Query \uff0c\u4e0b\u9762\u8ba9\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e0b\u8bf7\u6c42\u4f53\u58f0\u660e\u7684\u66f4\u9ad8\u7ea7\u7528\u6cd5\u3002","title":"\u8bf7\u6c42\u4f53 - \u591a\u4e2a\u53c2\u6570"},{"location":"tutorial/body-multiple-params/#pathquery","text":"\u9996\u5148\uff0c\u6beb\u65e0\u7591\u95ee\u5730\uff0c\u4f60\u53ef\u4ee5\u968f\u610f\u5730\u6df7\u5408\u4f7f\u7528 Path \u3001 Query \u548c\u8bf7\u6c42\u4f53\u53c2\u6570\u58f0\u660e\uff0c FastAPI \u4f1a\u77e5\u9053\u8be5\u5982\u4f55\u5904\u7406\u3002 \u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5c06\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a None \u6765\u5c06\u8bf7\u6c42\u4f53\u53c2\u6570\u58f0\u660e\u4e3a\u53ef\u9009\u53c2\u6570\uff1a from typing import Union from fastapi import FastAPI , Path from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 0 , le = 1000 ), q : Union [ str , None ] = None , item : Union [ Item , None ] = None , ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) if item : results . update ({ \"item\" : item }) return results Note \u8bf7\u6ce8\u610f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06\u4ece\u8bf7\u6c42\u4f53\u83b7\u53d6\u7684 item \u662f\u53ef\u9009\u7684\u3002\u56e0\u4e3a\u5b83\u7684\u9ed8\u8ba4\u503c\u4e3a None \u3002","title":"\u6df7\u5408\u4f7f\u7528 Path\u3001Query \u548c\u8bf7\u6c42\u4f53\u53c2\u6570"},{"location":"tutorial/body-multiple-params/#_1","text":"\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c \u8def\u5f84\u64cd\u4f5c \u5c06\u671f\u671b\u4e00\u4e2a\u5177\u6709 Item \u7684\u5c5e\u6027\u7684 JSON \u8bf7\u6c42\u4f53\uff0c\u5c31\u50cf\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } \u4f46\u662f\u4f60\u4e5f\u53ef\u4ee5\u58f0\u660e\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\uff0c\u4f8b\u5982 item \u548c user \uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user } return results \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c FastAPI \u5c06\u6ce8\u610f\u5230\u8be5\u51fd\u6570\u4e2d\u6709\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\uff08\u4e24\u4e2a Pydantic \u6a21\u578b\u53c2\u6570\uff09\u3002 \u56e0\u6b64\uff0c\u5b83\u5c06\u4f7f\u7528\u53c2\u6570\u540d\u79f0\u4f5c\u4e3a\u8bf7\u6c42\u4f53\u4e2d\u7684\u952e\uff08\u5b57\u6bb5\u540d\u79f0\uff09\uff0c\u5e76\u671f\u671b\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u5185\u5bb9\u7684\u8bf7\u6c42\u4f53\uff1a { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 }, \"user\" : { \"username\" : \"dave\" , \"full_name\" : \"Dave Grohl\" } } Note \u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f item \u7684\u58f0\u660e\u65b9\u5f0f\u4e0e\u4e4b\u524d\u76f8\u540c\uff0c\u4f46\u73b0\u5728\u5b83\u88ab\u671f\u671b\u901a\u8fc7 item \u952e\u5185\u5d4c\u5728\u8bf7\u6c42\u4f53\u4e2d\u3002 FastAPI \u5c06\u81ea\u52a8\u5bf9\u8bf7\u6c42\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u8f6c\u6362\uff0c\u56e0\u6b64 item \u53c2\u6570\u5c06\u63a5\u6536\u6307\u5b9a\u7684\u5185\u5bb9\uff0c user \u53c2\u6570\u4e5f\u662f\u5982\u6b64\u3002 \u5b83\u5c06\u6267\u884c\u5bf9\u590d\u5408\u6570\u636e\u7684\u6821\u9a8c\uff0c\u5e76\u4e14\u50cf\u73b0\u5728\u8fd9\u6837\u4e3a OpenAPI \u6a21\u5f0f\u548c\u81ea\u52a8\u5316\u6587\u6863\u5bf9\u5176\u8fdb\u884c\u8bb0\u5f55\u3002","title":"\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570"},{"location":"tutorial/body-multiple-params/#_2","text":"\u4e0e\u4f7f\u7528 Query \u548c Path \u4e3a\u67e5\u8be2\u53c2\u6570\u548c\u8def\u5f84\u53c2\u6570\u5b9a\u4e49\u989d\u5916\u6570\u636e\u7684\u65b9\u5f0f\u76f8\u540c\uff0c FastAPI \u63d0\u4f9b\u4e86\u4e00\u4e2a\u540c\u7b49\u7684 Body \u3002 \u4f8b\u5982\uff0c\u4e3a\u4e86\u6269\u5c55\u5148\u524d\u7684\u6a21\u578b\uff0c\u4f60\u53ef\u80fd\u51b3\u5b9a\u9664\u4e86 item \u548c user \u4e4b\u5916\uff0c\u8fd8\u60f3\u5728\u540c\u4e00\u8bf7\u6c42\u4f53\u4e2d\u5177\u6709\u53e6\u4e00\u4e2a\u952e importance \u3002 \u5982\u679c\u4f60\u5c31\u6309\u539f\u6837\u58f0\u660e\u5b83\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u5355\u4e00\u503c\uff0c FastAPI \u5c06\u5047\u5b9a\u5b83\u662f\u4e00\u4e2a\u67e5\u8be2\u53c2\u6570\u3002 \u4f46\u662f\u4f60\u53ef\u4ee5\u4f7f\u7528 Body \u6307\u793a FastAPI \u5c06\u5176\u4f5c\u4e3a\u8bf7\u6c42\u4f53\u7684\u53e6\u4e00\u4e2a\u952e\u8fdb\u884c\u5904\u7406\u3002 from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User , importance : int = Body ()): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } return results \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c FastAPI \u5c06\u671f\u671b\u50cf\u8fd9\u6837\u7684\u8bf7\u6c42\u4f53\uff1a { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 }, \"user\" : { \"username\" : \"dave\" , \"full_name\" : \"Dave Grohl\" }, \"importance\" : 5 } \u540c\u6837\u7684\uff0c\u5b83\u5c06\u8f6c\u6362\u6570\u636e\u7c7b\u578b\uff0c\u6821\u9a8c\uff0c\u751f\u6210\u6587\u6863\u7b49\u3002","title":"\u8bf7\u6c42\u4f53\u4e2d\u7684\u5355\u4e00\u503c"},{"location":"tutorial/body-multiple-params/#_3","text":"\u5f53\u7136\uff0c\u9664\u4e86\u8bf7\u6c42\u4f53\u53c2\u6570\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728\u4efb\u4f55\u9700\u8981\u7684\u65f6\u5019\u58f0\u660e\u989d\u5916\u7684\u67e5\u8be2\u53c2\u6570\u3002 \u7531\u4e8e\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5355\u4e00\u503c\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570\uff0c\u56e0\u6b64\u4f60\u4e0d\u5fc5\u663e\u5f0f\u5730\u6dfb\u52a0 Query \uff0c\u4f60\u53ef\u4ee5\u4ec5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a q : str = None \u6bd4\u5982\uff1a from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int , item : Item , user : User , importance : int = Body ( gt = 0 ), q : Union [ str , None ] = None ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } if q : results . update ({ \"q\" : q }) return results Info Body \u540c\u6837\u5177\u6709\u4e0e Query \u3001 Path \u4ee5\u53ca\u5176\u4ed6\u540e\u9762\u5c06\u770b\u5230\u7684\u7c7b\u5b8c\u5168\u76f8\u540c\u7684\u989d\u5916\u6821\u9a8c\u548c\u5143\u6570\u636e\u53c2\u6570\u3002","title":"\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\u548c\u67e5\u8be2\u53c2\u6570"},{"location":"tutorial/body-multiple-params/#_4","text":"\u5047\u8bbe\u4f60\u53ea\u6709\u4e00\u4e2a\u6765\u81ea Pydantic \u6a21\u578b Item \u7684\u8bf7\u6c42\u4f53\u53c2\u6570 item \u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c FastAPI \u5c06\u76f4\u63a5\u671f\u671b\u8fd9\u6837\u7684\u8bf7\u6c42\u4f53\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u5e0c\u671b\u5b83\u671f\u671b\u4e00\u4e2a\u62e5\u6709 item \u952e\u5e76\u5728\u503c\u4e2d\u5305\u542b\u6a21\u578b\u5185\u5bb9\u7684 JSON\uff0c\u5c31\u50cf\u5728\u58f0\u660e\u989d\u5916\u7684\u8bf7\u6c42\u4f53\u53c2\u6570\u65f6\u6240\u505a\u7684\u90a3\u6837\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7279\u6b8a\u7684 Body \u53c2\u6570 embed \uff1a item : Item = Body ( embed = True ) \u6bd4\u5982\uff1a from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c FastAPI \u5c06\u671f\u671b\u50cf\u8fd9\u6837\u7684\u8bf7\u6c42\u4f53\uff1a { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } } \u800c\u4e0d\u662f\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 }","title":"\u5d4c\u5165\u5355\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570"},{"location":"tutorial/body-multiple-params/#_5","text":"\u4f60\u53ef\u4ee5\u6dfb\u52a0\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\u5230 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\uff0c\u5373\u4f7f\u4e00\u4e2a\u8bf7\u6c42\u53ea\u80fd\u6709\u4e00\u4e2a\u8bf7\u6c42\u4f53\u3002 \u4f46\u662f FastAPI \u4f1a\u5904\u7406\u5b83\uff0c\u5728\u51fd\u6570\u4e2d\u4e3a\u4f60\u63d0\u4f9b\u6b63\u786e\u7684\u6570\u636e\uff0c\u5e76\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u6821\u9a8c\u5e76\u8bb0\u5f55\u6b63\u786e\u7684\u6a21\u5f0f\u3002 \u4f60\u8fd8\u53ef\u4ee5\u58f0\u660e\u5c06\u4f5c\u4e3a\u8bf7\u6c42\u4f53\u7684\u4e00\u90e8\u5206\u6240\u63a5\u6536\u7684\u5355\u4e00\u503c\u3002 \u4f60\u8fd8\u53ef\u4ee5\u6307\u793a FastAPI \u5728\u4ec5\u58f0\u660e\u4e86\u4e00\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u539f\u672c\u7684\u8bf7\u6c42\u4f53\u5d4c\u5165\u5230\u4e00\u4e2a\u952e\u4e2d\u3002","title":"\u603b\u7ed3"},{"location":"tutorial/body-nested-models/","text":"\u8bf7\u6c42\u4f53 - \u5d4c\u5957\u6a21\u578b \u00b6 \u4f7f\u7528 FastAPI \uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u3001\u6821\u9a8c\u3001\u8bb0\u5f55\u6587\u6863\u5e76\u4f7f\u7528\u4efb\u610f\u6df1\u5ea6\u5d4c\u5957\u7684\u6a21\u578b\uff08\u5f52\u529f\u4e8ePydantic\uff09\u3002 List \u5b57\u6bb5 \u00b6 \u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5c5e\u6027\u5b9a\u4e49\u4e3a\u62e5\u6709\u5b50\u5143\u7d20\u7684\u7c7b\u578b\u3002\u4f8b\u5982 Python list \uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : list = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8fd9\u5c06\u4f7f tags \u6210\u4e3a\u4e00\u4e2a\u7531\u5143\u7d20\u7ec4\u6210\u7684\u5217\u8868\u3002\u4e0d\u8fc7\u5b83\u6ca1\u6709\u58f0\u660e\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u3002 \u5177\u6709\u5b50\u7c7b\u578b\u7684 List \u5b57\u6bb5 \u00b6 \u4f46\u662f Python \u6709\u4e00\u79cd\u7279\u5b9a\u7684\u65b9\u6cd5\u6765\u58f0\u660e\u5177\u6709\u5b50\u7c7b\u578b\u7684\u5217\u8868\uff1a \u4ece typing \u5bfc\u5165 List \u00b6 \u9996\u5148\uff0c\u4ece Python \u7684\u6807\u51c6\u5e93 typing \u6a21\u5757\u4e2d\u5bfc\u5165 List \uff1a from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u58f0\u660e\u5177\u6709\u5b50\u7c7b\u578b\u7684 List \u00b6 \u8981\u58f0\u660e\u5177\u6709\u5b50\u7c7b\u578b\u7684\u7c7b\u578b\uff0c\u4f8b\u5982 list \u3001 dict \u3001 tuple \uff1a \u4ece typing \u6a21\u5757\u5bfc\u5165\u5b83\u4eec \u4f7f\u7528\u65b9\u62ec\u53f7 [ \u548c ] \u5c06\u5b50\u7c7b\u578b\u4f5c\u4e3a\u300c\u7c7b\u578b\u53c2\u6570\u300d\u4f20\u5165 from typing import List my_list : List [ str ] \u8fd9\u5b8c\u5168\u662f\u7528\u4e8e\u7c7b\u578b\u58f0\u660e\u7684\u6807\u51c6 Python \u8bed\u6cd5\u3002 \u5bf9\u5177\u6709\u5b50\u7c7b\u578b\u7684\u6a21\u578b\u5c5e\u6027\u4e5f\u4f7f\u7528\u76f8\u540c\u7684\u6807\u51c6\u8bed\u6cd5\u3002 \u56e0\u6b64\uff0c\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 tags \u660e\u786e\u5730\u6307\u5b9a\u4e3a\u4e00\u4e2a\u300c\u5b57\u7b26\u4e32\u5217\u8868\u300d\uff1a from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results Set \u7c7b\u578b \u00b6 \u4f46\u662f\u968f\u540e\u6211\u4eec\u8003\u8651\u4e86\u4e00\u4e0b\uff0c\u610f\u8bc6\u5230\u6807\u7b7e\u4e0d\u5e94\u8be5\u91cd\u590d\uff0c\u5b83\u4eec\u5f88\u5927\u53ef\u80fd\u4f1a\u662f\u552f\u4e00\u7684\u5b57\u7b26\u4e32\u3002 Python \u5177\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7c7b\u578b\u6765\u4fdd\u5b58\u4e00\u7ec4\u552f\u4e00\u7684\u5143\u7d20\uff0c\u5373 set \u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5bfc\u5165 Set \u5e76\u5c06 tag \u58f0\u660e\u4e3a\u4e00\u4e2a\u7531 str \u7ec4\u6210\u7684 set \uff1a from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8fd9\u6837\uff0c\u5373\u4f7f\u4f60\u6536\u5230\u5e26\u6709\u91cd\u590d\u6570\u636e\u7684\u8bf7\u6c42\uff0c\u8fd9\u4e9b\u6570\u636e\u4e5f\u4f1a\u88ab\u8f6c\u6362\u4e3a\u4e00\u7ec4\u552f\u4e00\u9879\u3002 \u800c\u4e14\uff0c\u6bcf\u5f53\u4f60\u8f93\u51fa\u8be5\u6570\u636e\u65f6\uff0c\u5373\u4f7f\u6e90\u6570\u636e\u6709\u91cd\u590d\uff0c\u5b83\u4eec\u4e5f\u5c06\u4f5c\u4e3a\u4e00\u7ec4\u552f\u4e00\u9879\u8f93\u51fa\u3002 \u5e76\u4e14\u8fd8\u4f1a\u88ab\u76f8\u5e94\u5730\u6807\u6ce8 / \u8bb0\u5f55\u6587\u6863\u3002 \u5d4c\u5957\u6a21\u578b \u00b6 Pydantic \u6a21\u578b\u7684\u6bcf\u4e2a\u5c5e\u6027\u90fd\u5177\u6709\u7c7b\u578b\u3002 \u4f46\u662f\u8fd9\u4e2a\u7c7b\u578b\u672c\u8eab\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a Pydantic \u6a21\u578b\u3002 \u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u58f0\u660e\u62e5\u6709\u7279\u5b9a\u5c5e\u6027\u540d\u79f0\u3001\u7c7b\u578b\u548c\u6821\u9a8c\u7684\u6df1\u5ea6\u5d4c\u5957\u7684 JSON \u5bf9\u8c61\u3002 \u4e0a\u8ff0\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u4efb\u610f\u7684\u5d4c\u5957\u3002 \u5b9a\u4e49\u5b50\u6a21\u578b \u00b6 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a Image \u6a21\u578b\uff1a from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u5c06\u5b50\u6a21\u578b\u7528\u4f5c\u7c7b\u578b \u00b6 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u7528\u4f5c\u4e00\u4e2a\u5c5e\u6027\u7684\u7c7b\u578b\uff1a from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8fd9\u610f\u5473\u7740 FastAPI \u5c06\u671f\u671b\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u5185\u5bb9\u7684\u8bf7\u6c42\u4f53\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 , \"tags\" : [ \"rock\" , \"metal\" , \"bar\" ], \"image\" : { \"url\" : \"http://example.com/baz.jpg\" , \"name\" : \"The Foo live\" } } \u518d\u4e00\u6b21\uff0c\u4ec5\u4ec5\u8fdb\u884c\u8fd9\u6837\u7684\u58f0\u660e\uff0c\u4f60\u5c06\u901a\u8fc7 FastAPI \u83b7\u5f97\uff1a \u5bf9\u88ab\u5d4c\u5165\u7684\u6a21\u578b\u4e5f\u9002\u7528\u7684\u7f16\u8f91\u5668\u652f\u6301\uff08\u81ea\u52a8\u8865\u5168\u7b49\uff09 \u6570\u636e\u8f6c\u6362 \u6570\u636e\u6821\u9a8c \u81ea\u52a8\u751f\u6210\u6587\u6863 \u7279\u6b8a\u7684\u7c7b\u578b\u548c\u6821\u9a8c \u00b6 \u9664\u4e86\u666e\u901a\u7684\u5355\u4e00\u503c\u7c7b\u578b\uff08\u5982 str \u3001 int \u3001 float \u7b49\uff09\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ece str \u7ee7\u627f\u7684\u66f4\u590d\u6742\u7684\u5355\u4e00\u503c\u7c7b\u578b\u3002 \u8981\u4e86\u89e3\u6240\u6709\u7684\u53ef\u7528\u9009\u9879\uff0c\u8bf7\u67e5\u770b\u5173\u4e8e \u6765\u81ea Pydantic \u7684\u5916\u90e8\u7c7b\u578b \u7684\u6587\u6863\u3002\u4f60\u5c06\u5728\u4e0b\u4e00\u7ae0\u8282\u4e2d\u770b\u5230\u4e00\u4e9b\u793a\u4f8b\u3002 \u4f8b\u5982\uff0c\u5728 Image \u6a21\u578b\u4e2d\u6211\u4eec\u6709\u4e00\u4e2a url \u5b57\u6bb5\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u58f0\u660e\u4e3a Pydantic \u7684 HttpUrl \uff0c\u800c\u4e0d\u662f str \uff1a from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8be5\u5b57\u7b26\u4e32\u5c06\u88ab\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u7684 URL\uff0c\u5e76\u5728 JSON Schema / OpenAPI \u6587\u6863\u4e2d\u8fdb\u884c\u8bb0\u5f55\u3002 \u5e26\u6709\u4e00\u7ec4\u5b50\u6a21\u578b\u7684\u5c5e\u6027 \u00b6 \u4f60\u8fd8\u53ef\u4ee5\u5c06 Pydantic \u6a21\u578b\u7528\u4f5c list \u3001 set \u7b49\u7684\u5b50\u7c7b\u578b\uff1a from typing import List , Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () images : Union [ List [ Image ], None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8fd9\u5c06\u671f\u671b\uff08\u8f6c\u6362\uff0c\u6821\u9a8c\uff0c\u8bb0\u5f55\u6587\u6863\u7b49\uff09\u4e0b\u9762\u8fd9\u6837\u7684 JSON \u8bf7\u6c42\u4f53\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 , \"tags\" : [ \"rock\" , \"metal\" , \"bar\" ], \"images\" : [ { \"url\" : \"http://example.com/baz.jpg\" , \"name\" : \"The Foo live\" }, { \"url\" : \"http://example.com/dave.jpg\" , \"name\" : \"The Baz\" } ] } Info \u8bf7\u6ce8\u610f images \u952e\u73b0\u5728\u5177\u6709\u4e00\u7ec4 image \u5bf9\u8c61\u662f\u5982\u4f55\u53d1\u751f\u7684\u3002 \u6df1\u5ea6\u5d4c\u5957\u6a21\u578b \u00b6 \u4f60\u53ef\u4ee5\u5b9a\u4e49\u4efb\u610f\u6df1\u5ea6\u7684\u5d4c\u5957\u6a21\u578b\uff1a from typing import List , Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () images : Union [ List [ Image ], None ] = None class Offer ( BaseModel ): name : str description : Union [ str , None ] = None price : float items : List [ Item ] @app . post ( \"/offers/\" ) async def create_offer ( offer : Offer ): return offer Info \u8bf7\u6ce8\u610f Offer \u62e5\u6709\u4e00\u7ec4 Item \u800c\u53cd\u8fc7\u6765 Item \u53c8\u662f\u4e00\u4e2a\u53ef\u9009\u7684 Image \u5217\u8868\u662f\u5982\u4f55\u53d1\u751f\u7684\u3002 \u7eaf\u5217\u8868\u8bf7\u6c42\u4f53 \u00b6 \u5982\u679c\u4f60\u671f\u671b\u7684 JSON \u8bf7\u6c42\u4f53\u7684\u6700\u5916\u5c42\u662f\u4e00\u4e2a JSON array \uff08\u5373 Python list \uff09\uff0c\u5219\u53ef\u4ee5\u5728\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u7684\u53c2\u6570\u4e2d\u58f0\u660e\u6b64\u7c7b\u578b\uff0c\u5c31\u50cf\u58f0\u660e Pydantic \u6a21\u578b\u4e00\u6837\uff1a images : List [ Image ] \u4f8b\u5982\uff1a from typing import List from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str @app . post ( \"/images/multiple/\" ) async def create_multiple_images ( images : List [ Image ]): return images \u65e0\u5904\u4e0d\u5728\u7684\u7f16\u8f91\u5668\u652f\u6301 \u00b6 \u4f60\u53ef\u4ee5\u968f\u5904\u83b7\u5f97\u7f16\u8f91\u5668\u652f\u6301\u3002 \u5373\u4f7f\u662f\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff1a \u5982\u679c\u4f60\u76f4\u63a5\u4f7f\u7528 dict \u800c\u4e0d\u662f Pydantic \u6a21\u578b\uff0c\u90a3\u4f60\u5c06\u65e0\u6cd5\u83b7\u5f97\u8fd9\u79cd\u7f16\u8f91\u5668\u652f\u6301\u3002 \u4f46\u662f\u4f60\u6839\u672c\u4e0d\u5fc5\u62c5\u5fc3\u8fd9\u4e24\u8005\uff0c\u4f20\u5165\u7684\u5b57\u5178\u4f1a\u81ea\u52a8\u88ab\u8f6c\u6362\uff0c\u4f60\u7684\u8f93\u51fa\u4e5f\u4f1a\u81ea\u52a8\u88ab\u8f6c\u6362\u4e3a JSON\u3002 \u4efb\u610f dict \u6784\u6210\u7684\u8bf7\u6c42\u4f53 \u00b6 \u4f60\u4e5f\u53ef\u4ee5\u5c06\u8bf7\u6c42\u4f53\u58f0\u660e\u4e3a\u4f7f\u7528\u67d0\u7c7b\u578b\u7684\u952e\u548c\u5176\u4ed6\u7c7b\u578b\u503c\u7684 dict \u3002 \u65e0\u9700\u4e8b\u5148\u77e5\u9053\u6709\u6548\u7684\u5b57\u6bb5/\u5c5e\u6027\uff08\u5728\u4f7f\u7528 Pydantic \u6a21\u578b\u7684\u573a\u666f\uff09\u540d\u79f0\u662f\u4ec0\u4e48\u3002 \u5982\u679c\u4f60\u60f3\u63a5\u6536\u4e00\u4e9b\u5c1a\u4e14\u672a\u77e5\u7684\u952e\uff0c\u8fd9\u5c06\u5f88\u6709\u7528\u3002 \u5176\u4ed6\u6709\u7528\u7684\u573a\u666f\u662f\u5f53\u4f60\u60f3\u8981\u63a5\u6536\u5176\u4ed6\u7c7b\u578b\u7684\u952e\u65f6\uff0c\u4f8b\u5982 int \u3002 \u8fd9\u4e5f\u662f\u6211\u4eec\u5728\u63a5\u4e0b\u6765\u5c06\u770b\u5230\u7684\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u4f60\u5c06\u63a5\u53d7\u4efb\u610f\u952e\u4e3a int \u7c7b\u578b\u5e76\u4e14\u503c\u4e3a float \u7c7b\u578b\u7684 dict \uff1a from typing import Dict from fastapi import FastAPI app = FastAPI () @app . post ( \"/index-weights/\" ) async def create_index_weights ( weights : Dict [ int , float ]): return weights Tip \u8bf7\u8bb0\u4f4f JSON \u4ec5\u652f\u6301\u5c06 str \u4f5c\u4e3a\u952e\u3002 \u4f46\u662f Pydantic \u5177\u6709\u81ea\u52a8\u8f6c\u6362\u6570\u636e\u7684\u529f\u80fd\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5373\u4f7f\u4f60\u7684 API \u5ba2\u6237\u7aef\u53ea\u80fd\u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a\u952e\u53d1\u9001\uff0c\u53ea\u8981\u8fd9\u4e9b\u5b57\u7b26\u4e32\u5185\u5bb9\u4ec5\u5305\u542b\u6574\u6570\uff0cPydantic \u5c31\u4f1a\u5bf9\u5176\u8fdb\u884c\u8f6c\u6362\u5e76\u6821\u9a8c\u3002 \u7136\u540e\u4f60\u63a5\u6536\u7684\u540d\u4e3a weights \u7684 dict \u5b9e\u9645\u4e0a\u5c06\u5177\u6709 int \u7c7b\u578b\u7684\u952e\u548c float \u7c7b\u578b\u7684\u503c\u3002 \u603b\u7ed3 \u00b6 \u4f7f\u7528 FastAPI \u4f60\u53ef\u4ee5\u62e5\u6709 Pydantic \u6a21\u578b\u63d0\u4f9b\u7684\u6781\u9ad8\u7075\u6d3b\u6027\uff0c\u540c\u65f6\u4fdd\u6301\u4ee3\u7801\u7684\u7b80\u5355\u3001\u7b80\u77ed\u548c\u4f18\u96c5\u3002 \u800c\u4e14\u8fd8\u5177\u6709\u4e0b\u5217\u597d\u5904\uff1a \u7f16\u8f91\u5668\u652f\u6301\uff08\u5904\u5904\u7686\u53ef\u81ea\u52a8\u8865\u5168\uff01\uff09 \u6570\u636e\u8f6c\u6362\uff08\u4e5f\u88ab\u79f0\u4e3a\u89e3\u6790/\u5e8f\u5217\u5316\uff09 \u6570\u636e\u6821\u9a8c \u6a21\u5f0f\u6587\u6863 \u81ea\u52a8\u751f\u6210\u7684\u6587\u6863","title":"\u8bf7\u6c42\u4f53 - \u5d4c\u5957\u6a21\u578b"},{"location":"tutorial/body-nested-models/#-","text":"\u4f7f\u7528 FastAPI \uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u3001\u6821\u9a8c\u3001\u8bb0\u5f55\u6587\u6863\u5e76\u4f7f\u7528\u4efb\u610f\u6df1\u5ea6\u5d4c\u5957\u7684\u6a21\u578b\uff08\u5f52\u529f\u4e8ePydantic\uff09\u3002","title":"\u8bf7\u6c42\u4f53 - \u5d4c\u5957\u6a21\u578b"},{"location":"tutorial/body-nested-models/#list","text":"\u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5c5e\u6027\u5b9a\u4e49\u4e3a\u62e5\u6709\u5b50\u5143\u7d20\u7684\u7c7b\u578b\u3002\u4f8b\u5982 Python list \uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : list = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8fd9\u5c06\u4f7f tags \u6210\u4e3a\u4e00\u4e2a\u7531\u5143\u7d20\u7ec4\u6210\u7684\u5217\u8868\u3002\u4e0d\u8fc7\u5b83\u6ca1\u6709\u58f0\u660e\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u3002","title":"List \u5b57\u6bb5"},{"location":"tutorial/body-nested-models/#list_1","text":"\u4f46\u662f Python \u6709\u4e00\u79cd\u7279\u5b9a\u7684\u65b9\u6cd5\u6765\u58f0\u660e\u5177\u6709\u5b50\u7c7b\u578b\u7684\u5217\u8868\uff1a","title":"\u5177\u6709\u5b50\u7c7b\u578b\u7684 List \u5b57\u6bb5"},{"location":"tutorial/body-nested-models/#typing-list","text":"\u9996\u5148\uff0c\u4ece Python \u7684\u6807\u51c6\u5e93 typing \u6a21\u5757\u4e2d\u5bfc\u5165 List \uff1a from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results","title":"\u4ece typing \u5bfc\u5165 List"},{"location":"tutorial/body-nested-models/#list_2","text":"\u8981\u58f0\u660e\u5177\u6709\u5b50\u7c7b\u578b\u7684\u7c7b\u578b\uff0c\u4f8b\u5982 list \u3001 dict \u3001 tuple \uff1a \u4ece typing \u6a21\u5757\u5bfc\u5165\u5b83\u4eec \u4f7f\u7528\u65b9\u62ec\u53f7 [ \u548c ] \u5c06\u5b50\u7c7b\u578b\u4f5c\u4e3a\u300c\u7c7b\u578b\u53c2\u6570\u300d\u4f20\u5165 from typing import List my_list : List [ str ] \u8fd9\u5b8c\u5168\u662f\u7528\u4e8e\u7c7b\u578b\u58f0\u660e\u7684\u6807\u51c6 Python \u8bed\u6cd5\u3002 \u5bf9\u5177\u6709\u5b50\u7c7b\u578b\u7684\u6a21\u578b\u5c5e\u6027\u4e5f\u4f7f\u7528\u76f8\u540c\u7684\u6807\u51c6\u8bed\u6cd5\u3002 \u56e0\u6b64\uff0c\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 tags \u660e\u786e\u5730\u6307\u5b9a\u4e3a\u4e00\u4e2a\u300c\u5b57\u7b26\u4e32\u5217\u8868\u300d\uff1a from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results","title":"\u58f0\u660e\u5177\u6709\u5b50\u7c7b\u578b\u7684 List"},{"location":"tutorial/body-nested-models/#set","text":"\u4f46\u662f\u968f\u540e\u6211\u4eec\u8003\u8651\u4e86\u4e00\u4e0b\uff0c\u610f\u8bc6\u5230\u6807\u7b7e\u4e0d\u5e94\u8be5\u91cd\u590d\uff0c\u5b83\u4eec\u5f88\u5927\u53ef\u80fd\u4f1a\u662f\u552f\u4e00\u7684\u5b57\u7b26\u4e32\u3002 Python \u5177\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u6570\u636e\u7c7b\u578b\u6765\u4fdd\u5b58\u4e00\u7ec4\u552f\u4e00\u7684\u5143\u7d20\uff0c\u5373 set \u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5bfc\u5165 Set \u5e76\u5c06 tag \u58f0\u660e\u4e3a\u4e00\u4e2a\u7531 str \u7ec4\u6210\u7684 set \uff1a from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8fd9\u6837\uff0c\u5373\u4f7f\u4f60\u6536\u5230\u5e26\u6709\u91cd\u590d\u6570\u636e\u7684\u8bf7\u6c42\uff0c\u8fd9\u4e9b\u6570\u636e\u4e5f\u4f1a\u88ab\u8f6c\u6362\u4e3a\u4e00\u7ec4\u552f\u4e00\u9879\u3002 \u800c\u4e14\uff0c\u6bcf\u5f53\u4f60\u8f93\u51fa\u8be5\u6570\u636e\u65f6\uff0c\u5373\u4f7f\u6e90\u6570\u636e\u6709\u91cd\u590d\uff0c\u5b83\u4eec\u4e5f\u5c06\u4f5c\u4e3a\u4e00\u7ec4\u552f\u4e00\u9879\u8f93\u51fa\u3002 \u5e76\u4e14\u8fd8\u4f1a\u88ab\u76f8\u5e94\u5730\u6807\u6ce8 / \u8bb0\u5f55\u6587\u6863\u3002","title":"Set \u7c7b\u578b"},{"location":"tutorial/body-nested-models/#_1","text":"Pydantic \u6a21\u578b\u7684\u6bcf\u4e2a\u5c5e\u6027\u90fd\u5177\u6709\u7c7b\u578b\u3002 \u4f46\u662f\u8fd9\u4e2a\u7c7b\u578b\u672c\u8eab\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a Pydantic \u6a21\u578b\u3002 \u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u58f0\u660e\u62e5\u6709\u7279\u5b9a\u5c5e\u6027\u540d\u79f0\u3001\u7c7b\u578b\u548c\u6821\u9a8c\u7684\u6df1\u5ea6\u5d4c\u5957\u7684 JSON \u5bf9\u8c61\u3002 \u4e0a\u8ff0\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u4efb\u610f\u7684\u5d4c\u5957\u3002","title":"\u5d4c\u5957\u6a21\u578b"},{"location":"tutorial/body-nested-models/#_2","text":"\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a Image \u6a21\u578b\uff1a from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results","title":"\u5b9a\u4e49\u5b50\u6a21\u578b"},{"location":"tutorial/body-nested-models/#_3","text":"\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u7528\u4f5c\u4e00\u4e2a\u5c5e\u6027\u7684\u7c7b\u578b\uff1a from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8fd9\u610f\u5473\u7740 FastAPI \u5c06\u671f\u671b\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u5185\u5bb9\u7684\u8bf7\u6c42\u4f53\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 , \"tags\" : [ \"rock\" , \"metal\" , \"bar\" ], \"image\" : { \"url\" : \"http://example.com/baz.jpg\" , \"name\" : \"The Foo live\" } } \u518d\u4e00\u6b21\uff0c\u4ec5\u4ec5\u8fdb\u884c\u8fd9\u6837\u7684\u58f0\u660e\uff0c\u4f60\u5c06\u901a\u8fc7 FastAPI \u83b7\u5f97\uff1a \u5bf9\u88ab\u5d4c\u5165\u7684\u6a21\u578b\u4e5f\u9002\u7528\u7684\u7f16\u8f91\u5668\u652f\u6301\uff08\u81ea\u52a8\u8865\u5168\u7b49\uff09 \u6570\u636e\u8f6c\u6362 \u6570\u636e\u6821\u9a8c \u81ea\u52a8\u751f\u6210\u6587\u6863","title":"\u5c06\u5b50\u6a21\u578b\u7528\u4f5c\u7c7b\u578b"},{"location":"tutorial/body-nested-models/#_4","text":"\u9664\u4e86\u666e\u901a\u7684\u5355\u4e00\u503c\u7c7b\u578b\uff08\u5982 str \u3001 int \u3001 float \u7b49\uff09\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ece str \u7ee7\u627f\u7684\u66f4\u590d\u6742\u7684\u5355\u4e00\u503c\u7c7b\u578b\u3002 \u8981\u4e86\u89e3\u6240\u6709\u7684\u53ef\u7528\u9009\u9879\uff0c\u8bf7\u67e5\u770b\u5173\u4e8e \u6765\u81ea Pydantic \u7684\u5916\u90e8\u7c7b\u578b \u7684\u6587\u6863\u3002\u4f60\u5c06\u5728\u4e0b\u4e00\u7ae0\u8282\u4e2d\u770b\u5230\u4e00\u4e9b\u793a\u4f8b\u3002 \u4f8b\u5982\uff0c\u5728 Image \u6a21\u578b\u4e2d\u6211\u4eec\u6709\u4e00\u4e2a url \u5b57\u6bb5\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u58f0\u660e\u4e3a Pydantic \u7684 HttpUrl \uff0c\u800c\u4e0d\u662f str \uff1a from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8be5\u5b57\u7b26\u4e32\u5c06\u88ab\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u7684 URL\uff0c\u5e76\u5728 JSON Schema / OpenAPI \u6587\u6863\u4e2d\u8fdb\u884c\u8bb0\u5f55\u3002","title":"\u7279\u6b8a\u7684\u7c7b\u578b\u548c\u6821\u9a8c"},{"location":"tutorial/body-nested-models/#_5","text":"\u4f60\u8fd8\u53ef\u4ee5\u5c06 Pydantic \u6a21\u578b\u7528\u4f5c list \u3001 set \u7b49\u7684\u5b50\u7c7b\u578b\uff1a from typing import List , Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () images : Union [ List [ Image ], None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8fd9\u5c06\u671f\u671b\uff08\u8f6c\u6362\uff0c\u6821\u9a8c\uff0c\u8bb0\u5f55\u6587\u6863\u7b49\uff09\u4e0b\u9762\u8fd9\u6837\u7684 JSON \u8bf7\u6c42\u4f53\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 , \"tags\" : [ \"rock\" , \"metal\" , \"bar\" ], \"images\" : [ { \"url\" : \"http://example.com/baz.jpg\" , \"name\" : \"The Foo live\" }, { \"url\" : \"http://example.com/dave.jpg\" , \"name\" : \"The Baz\" } ] } Info \u8bf7\u6ce8\u610f images \u952e\u73b0\u5728\u5177\u6709\u4e00\u7ec4 image \u5bf9\u8c61\u662f\u5982\u4f55\u53d1\u751f\u7684\u3002","title":"\u5e26\u6709\u4e00\u7ec4\u5b50\u6a21\u578b\u7684\u5c5e\u6027"},{"location":"tutorial/body-nested-models/#_6","text":"\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4efb\u610f\u6df1\u5ea6\u7684\u5d4c\u5957\u6a21\u578b\uff1a from typing import List , Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () images : Union [ List [ Image ], None ] = None class Offer ( BaseModel ): name : str description : Union [ str , None ] = None price : float items : List [ Item ] @app . post ( \"/offers/\" ) async def create_offer ( offer : Offer ): return offer Info \u8bf7\u6ce8\u610f Offer \u62e5\u6709\u4e00\u7ec4 Item \u800c\u53cd\u8fc7\u6765 Item \u53c8\u662f\u4e00\u4e2a\u53ef\u9009\u7684 Image \u5217\u8868\u662f\u5982\u4f55\u53d1\u751f\u7684\u3002","title":"\u6df1\u5ea6\u5d4c\u5957\u6a21\u578b"},{"location":"tutorial/body-nested-models/#_7","text":"\u5982\u679c\u4f60\u671f\u671b\u7684 JSON \u8bf7\u6c42\u4f53\u7684\u6700\u5916\u5c42\u662f\u4e00\u4e2a JSON array \uff08\u5373 Python list \uff09\uff0c\u5219\u53ef\u4ee5\u5728\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u7684\u53c2\u6570\u4e2d\u58f0\u660e\u6b64\u7c7b\u578b\uff0c\u5c31\u50cf\u58f0\u660e Pydantic \u6a21\u578b\u4e00\u6837\uff1a images : List [ Image ] \u4f8b\u5982\uff1a from typing import List from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str @app . post ( \"/images/multiple/\" ) async def create_multiple_images ( images : List [ Image ]): return images","title":"\u7eaf\u5217\u8868\u8bf7\u6c42\u4f53"},{"location":"tutorial/body-nested-models/#_8","text":"\u4f60\u53ef\u4ee5\u968f\u5904\u83b7\u5f97\u7f16\u8f91\u5668\u652f\u6301\u3002 \u5373\u4f7f\u662f\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff1a \u5982\u679c\u4f60\u76f4\u63a5\u4f7f\u7528 dict \u800c\u4e0d\u662f Pydantic \u6a21\u578b\uff0c\u90a3\u4f60\u5c06\u65e0\u6cd5\u83b7\u5f97\u8fd9\u79cd\u7f16\u8f91\u5668\u652f\u6301\u3002 \u4f46\u662f\u4f60\u6839\u672c\u4e0d\u5fc5\u62c5\u5fc3\u8fd9\u4e24\u8005\uff0c\u4f20\u5165\u7684\u5b57\u5178\u4f1a\u81ea\u52a8\u88ab\u8f6c\u6362\uff0c\u4f60\u7684\u8f93\u51fa\u4e5f\u4f1a\u81ea\u52a8\u88ab\u8f6c\u6362\u4e3a JSON\u3002","title":"\u65e0\u5904\u4e0d\u5728\u7684\u7f16\u8f91\u5668\u652f\u6301"},{"location":"tutorial/body-nested-models/#dict","text":"\u4f60\u4e5f\u53ef\u4ee5\u5c06\u8bf7\u6c42\u4f53\u58f0\u660e\u4e3a\u4f7f\u7528\u67d0\u7c7b\u578b\u7684\u952e\u548c\u5176\u4ed6\u7c7b\u578b\u503c\u7684 dict \u3002 \u65e0\u9700\u4e8b\u5148\u77e5\u9053\u6709\u6548\u7684\u5b57\u6bb5/\u5c5e\u6027\uff08\u5728\u4f7f\u7528 Pydantic \u6a21\u578b\u7684\u573a\u666f\uff09\u540d\u79f0\u662f\u4ec0\u4e48\u3002 \u5982\u679c\u4f60\u60f3\u63a5\u6536\u4e00\u4e9b\u5c1a\u4e14\u672a\u77e5\u7684\u952e\uff0c\u8fd9\u5c06\u5f88\u6709\u7528\u3002 \u5176\u4ed6\u6709\u7528\u7684\u573a\u666f\u662f\u5f53\u4f60\u60f3\u8981\u63a5\u6536\u5176\u4ed6\u7c7b\u578b\u7684\u952e\u65f6\uff0c\u4f8b\u5982 int \u3002 \u8fd9\u4e5f\u662f\u6211\u4eec\u5728\u63a5\u4e0b\u6765\u5c06\u770b\u5230\u7684\u3002 \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u4f60\u5c06\u63a5\u53d7\u4efb\u610f\u952e\u4e3a int \u7c7b\u578b\u5e76\u4e14\u503c\u4e3a float \u7c7b\u578b\u7684 dict \uff1a from typing import Dict from fastapi import FastAPI app = FastAPI () @app . post ( \"/index-weights/\" ) async def create_index_weights ( weights : Dict [ int , float ]): return weights Tip \u8bf7\u8bb0\u4f4f JSON \u4ec5\u652f\u6301\u5c06 str \u4f5c\u4e3a\u952e\u3002 \u4f46\u662f Pydantic \u5177\u6709\u81ea\u52a8\u8f6c\u6362\u6570\u636e\u7684\u529f\u80fd\u3002 \u8fd9\u610f\u5473\u7740\uff0c\u5373\u4f7f\u4f60\u7684 API \u5ba2\u6237\u7aef\u53ea\u80fd\u5c06\u5b57\u7b26\u4e32\u4f5c\u4e3a\u952e\u53d1\u9001\uff0c\u53ea\u8981\u8fd9\u4e9b\u5b57\u7b26\u4e32\u5185\u5bb9\u4ec5\u5305\u542b\u6574\u6570\uff0cPydantic \u5c31\u4f1a\u5bf9\u5176\u8fdb\u884c\u8f6c\u6362\u5e76\u6821\u9a8c\u3002 \u7136\u540e\u4f60\u63a5\u6536\u7684\u540d\u4e3a weights \u7684 dict \u5b9e\u9645\u4e0a\u5c06\u5177\u6709 int \u7c7b\u578b\u7684\u952e\u548c float \u7c7b\u578b\u7684\u503c\u3002","title":"\u4efb\u610f dict \u6784\u6210\u7684\u8bf7\u6c42\u4f53"},{"location":"tutorial/body-nested-models/#_9","text":"\u4f7f\u7528 FastAPI \u4f60\u53ef\u4ee5\u62e5\u6709 Pydantic \u6a21\u578b\u63d0\u4f9b\u7684\u6781\u9ad8\u7075\u6d3b\u6027\uff0c\u540c\u65f6\u4fdd\u6301\u4ee3\u7801\u7684\u7b80\u5355\u3001\u7b80\u77ed\u548c\u4f18\u96c5\u3002 \u800c\u4e14\u8fd8\u5177\u6709\u4e0b\u5217\u597d\u5904\uff1a \u7f16\u8f91\u5668\u652f\u6301\uff08\u5904\u5904\u7686\u53ef\u81ea\u52a8\u8865\u5168\uff01\uff09 \u6570\u636e\u8f6c\u6362\uff08\u4e5f\u88ab\u79f0\u4e3a\u89e3\u6790/\u5e8f\u5217\u5316\uff09 \u6570\u636e\u6821\u9a8c \u6a21\u5f0f\u6587\u6863 \u81ea\u52a8\u751f\u6210\u7684\u6587\u6863","title":"\u603b\u7ed3"},{"location":"tutorial/body-updates/","text":"\u8bf7\u6c42\u4f53 - \u66f4\u65b0\u6570\u636e \u00b6 \u7528 PUT \u66f4\u65b0\u6570\u636e \u00b6 \u66f4\u65b0\u6570\u636e\u8bf7\u7528 HTTP PUT \u64cd\u4f5c\u3002 \u628a\u8f93\u5165\u6570\u636e\u8f6c\u6362\u4e3a\u4ee5 JSON \u683c\u5f0f\u5b58\u50a8\u7684\u6570\u636e\uff08\u6bd4\u5982\uff0c\u4f7f\u7528 NoSQL \u6570\u636e\u5e93\u65f6\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528 jsonable_encoder \u3002\u4f8b\u5982\uff0c\u628a datetime \u8f6c\u6362\u4e3a str \u3002 from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . put ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): update_item_encoded = jsonable_encoder ( item ) items [ item_id ] = update_item_encoded return update_item_encoded PUT \u7528\u4e8e\u63a5\u6536\u66ff\u6362\u73b0\u6709\u6570\u636e\u7684\u6570\u636e\u3002 \u5173\u4e8e\u66f4\u65b0\u6570\u636e\u7684\u8b66\u544a \u00b6 \u7528 PUT \u628a\u6570\u636e\u9879 bar \u66f4\u65b0\u4e3a\u4ee5\u4e0b\u5185\u5bb9\u65f6\uff1a { \"name\" : \"Barz\" , \"price\" : 3 , \"description\" : None , } \u56e0\u4e3a\u4e0a\u8ff0\u6570\u636e\u672a\u5305\u542b\u5df2\u5b58\u50a8\u7684\u5c5e\u6027 \"tax\": 20.2 \uff0c\u65b0\u7684\u8f93\u5165\u6a21\u578b\u4f1a\u628a \"tax\": 10.5 \u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u56e0\u6b64\uff0c\u672c\u6b21\u64cd\u4f5c\u628a tax \u7684\u503c\u300c\u66f4\u65b0\u300d\u4e3a 10.5 \u3002 \u7528 PATCH \u8fdb\u884c\u90e8\u5206\u66f4\u65b0 \u00b6 HTTP PATCH \u64cd\u4f5c\u7528\u4e8e\u66f4\u65b0 \u90e8\u5206 \u6570\u636e\u3002 \u5373\uff0c\u53ea\u53d1\u9001\u8981\u66f4\u65b0\u7684\u6570\u636e\uff0c\u5176\u4f59\u6570\u636e\u4fdd\u6301\u4e0d\u53d8\u3002 \u7b14\u8bb0 PATCH \u6ca1\u6709 PUT \u77e5\u540d\uff0c\u4e5f\u600e\u4e48\u4e0d\u5e38\u7528\u3002 \u5f88\u591a\u4eba\u751a\u81f3\u53ea\u7528 PUT \u5b9e\u73b0\u90e8\u5206\u66f4\u65b0\u3002 FastAPI \u5bf9\u6b64\u6ca1\u6709\u4efb\u4f55\u9650\u5236\uff0c\u53ef\u4ee5 \u968f\u610f \u4e92\u6362\u4f7f\u7528\u8fd9\u4e24\u79cd\u64cd\u4f5c\u3002 \u4f46\u672c\u6307\u5357\u4e5f\u4f1a\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u64cd\u4f5c\u5404\u81ea\u7684\u7528\u9014\u3002 \u4f7f\u7528 Pydantic \u7684 exclude_unset \u53c2\u6570 \u00b6 \u66f4\u65b0\u90e8\u5206\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u5728 Pydantic \u6a21\u578b\u7684 .dict() \u4e2d\u4f7f\u7528 exclude_unset \u53c2\u6570\u3002 \u6bd4\u5982\uff0c item.dict(exclude_unset=True) \u3002 \u8fd9\u6bb5\u4ee3\u7801\u751f\u6210\u7684 dict \u53ea\u5305\u542b\u521b\u5efa item \u6a21\u578b\u65f6\u663e\u5f0f\u8bbe\u7f6e\u7684\u6570\u636e\uff0c\u800c\u4e0d\u5305\u62ec\u9ed8\u8ba4\u503c\u3002 \u7136\u540e\u518d\u7528\u5b83\u751f\u6210\u4e00\u4e2a\u53ea\u542b\u5df2\u8bbe\u7f6e\uff08\u5728\u8bf7\u6c42\u4e2d\u6240\u53d1\u9001\uff09\u6570\u636e\uff0c\u4e14\u7701\u7565\u4e86\u9ed8\u8ba4\u503c\u7684 dict \uff1a from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item \u4f7f\u7528 Pydantic \u7684 update \u53c2\u6570 \u00b6 \u63a5\u4e0b\u6765\uff0c\u7528 .copy() \u4e3a\u5df2\u6709\u6a21\u578b\u521b\u5efa\u8c03\u7528 update \u53c2\u6570\u7684\u526f\u672c\uff0c\u8be5\u53c2\u6570\u4e3a\u5305\u542b\u66f4\u65b0\u6570\u636e\u7684 dict \u3002 \u4f8b\u5982\uff0c stored_item_model.copy(update=update_data) \uff1a from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item \u66f4\u65b0\u90e8\u5206\u6570\u636e\u5c0f\u7ed3 \u00b6 \u7b80\u800c\u8a00\u4e4b\uff0c\u66f4\u65b0\u90e8\u5206\u6570\u636e\u5e94\uff1a \u4f7f\u7528 PATCH \u800c\u4e0d\u662f PUT \uff08\u53ef\u9009\uff0c\u4e5f\u53ef\u4ee5\u7528 PUT \uff09\uff1b \u63d0\u53d6\u5b58\u50a8\u7684\u6570\u636e\uff1b \u628a\u6570\u636e\u653e\u5165 Pydantic \u6a21\u578b\uff1b \u751f\u6210\u4e0d\u542b\u8f93\u5165\u6a21\u578b\u9ed8\u8ba4\u503c\u7684 dict \uff08\u4f7f\u7528 exclude_unset \u53c2\u6570\uff09\uff1b \u53ea\u66f4\u65b0\u7528\u6237\u8bbe\u7f6e\u8fc7\u7684\u503c\uff0c\u4e0d\u7528\u6a21\u578b\u4e2d\u7684\u9ed8\u8ba4\u503c\u8986\u76d6\u5df2\u5b58\u50a8\u8fc7\u7684\u503c\u3002 \u4e3a\u5df2\u5b58\u50a8\u7684\u6a21\u578b\u521b\u5efa\u526f\u672c\uff0c\u7528\u63a5\u6536\u7684\u6570\u636e\u66f4\u65b0\u5176\u5c5e\u6027 \uff08\u4f7f\u7528 update \u53c2\u6570\uff09\u3002 \u628a\u6a21\u578b\u526f\u672c\u8f6c\u6362\u4e3a\u53ef\u5b58\u5165\u6570\u636e\u5e93\u7684\u5f62\u5f0f\uff08\u6bd4\u5982\uff0c\u4f7f\u7528 jsonable_encoder \uff09\u3002 \u8fd9\u79cd\u65b9\u5f0f\u4e0e Pydantic \u6a21\u578b\u7684 .dict() \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f46\u80fd\u786e\u4fdd\u628a\u503c\u8f6c\u6362\u4e3a\u9002\u914d JSON \u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f8b\u5982\uff0c \u628a datetime \u8f6c\u6362\u4e3a str \u3002 \u628a\u6570\u636e\u4fdd\u5b58\u81f3\u6570\u636e\u5e93\uff1b \u8fd4\u56de\u66f4\u65b0\u540e\u7684\u6a21\u578b\u3002 from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item \u63d0\u793a \u5b9e\u9645\u4e0a\uff0cHTTP PUT \u4e5f\u53ef\u4ee5\u5b8c\u6210\u76f8\u540c\u7684\u64cd\u4f5c\u3002 \u4f46\u672c\u8282\u4ee5 PATCH \u4e3a\u4f8b\u7684\u539f\u56e0\u662f\uff0c\u8be5\u64cd\u4f5c\u5c31\u662f\u4e3a\u4e86\u8fd9\u79cd\u7528\u4f8b\u521b\u5efa\u7684\u3002 \u7b14\u8bb0 \u6ce8\u610f\uff0c\u8f93\u5165\u6a21\u578b\u4ecd\u9700\u9a8c\u8bc1\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u5e0c\u671b\u63a5\u6536\u7684\u90e8\u5206\u66f4\u65b0\u6570\u636e\u53ef\u4ee5\u7701\u7565\u5176\u4ed6\u6240\u6709\u5c5e\u6027\uff0c\u5219\u8981\u628a\u6a21\u578b\u4e2d\u6240\u6709\u7684\u5c5e\u6027\u6807\u8bb0\u4e3a\u53ef\u9009\uff08\u4f7f\u7528\u9ed8\u8ba4\u503c\u6216 None \uff09\u3002 \u4e3a\u4e86\u533a\u5206\u7528\u4e8e \u66f4\u65b0 \u6240\u6709\u53ef\u9009\u503c\u7684\u6a21\u578b\u4e0e\u7528\u4e8e \u521b\u5efa \u5305\u542b\u5fc5\u9009\u503c\u7684\u6a21\u578b\uff0c\u8bf7\u53c2\u7167 \u66f4\u591a\u6a21\u578b \u4e00\u8282\u4e2d\u7684\u601d\u8def\u3002","title":"\u8bf7\u6c42\u4f53 - \u66f4\u65b0\u6570\u636e"},{"location":"tutorial/body-updates/#-","text":"","title":"\u8bf7\u6c42\u4f53 - \u66f4\u65b0\u6570\u636e"},{"location":"tutorial/body-updates/#put","text":"\u66f4\u65b0\u6570\u636e\u8bf7\u7528 HTTP PUT \u64cd\u4f5c\u3002 \u628a\u8f93\u5165\u6570\u636e\u8f6c\u6362\u4e3a\u4ee5 JSON \u683c\u5f0f\u5b58\u50a8\u7684\u6570\u636e\uff08\u6bd4\u5982\uff0c\u4f7f\u7528 NoSQL \u6570\u636e\u5e93\u65f6\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528 jsonable_encoder \u3002\u4f8b\u5982\uff0c\u628a datetime \u8f6c\u6362\u4e3a str \u3002 from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . put ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): update_item_encoded = jsonable_encoder ( item ) items [ item_id ] = update_item_encoded return update_item_encoded PUT \u7528\u4e8e\u63a5\u6536\u66ff\u6362\u73b0\u6709\u6570\u636e\u7684\u6570\u636e\u3002","title":"\u7528 PUT \u66f4\u65b0\u6570\u636e"},{"location":"tutorial/body-updates/#_1","text":"\u7528 PUT \u628a\u6570\u636e\u9879 bar \u66f4\u65b0\u4e3a\u4ee5\u4e0b\u5185\u5bb9\u65f6\uff1a { \"name\" : \"Barz\" , \"price\" : 3 , \"description\" : None , } \u56e0\u4e3a\u4e0a\u8ff0\u6570\u636e\u672a\u5305\u542b\u5df2\u5b58\u50a8\u7684\u5c5e\u6027 \"tax\": 20.2 \uff0c\u65b0\u7684\u8f93\u5165\u6a21\u578b\u4f1a\u628a \"tax\": 10.5 \u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u56e0\u6b64\uff0c\u672c\u6b21\u64cd\u4f5c\u628a tax \u7684\u503c\u300c\u66f4\u65b0\u300d\u4e3a 10.5 \u3002","title":"\u5173\u4e8e\u66f4\u65b0\u6570\u636e\u7684\u8b66\u544a"},{"location":"tutorial/body-updates/#patch","text":"HTTP PATCH \u64cd\u4f5c\u7528\u4e8e\u66f4\u65b0 \u90e8\u5206 \u6570\u636e\u3002 \u5373\uff0c\u53ea\u53d1\u9001\u8981\u66f4\u65b0\u7684\u6570\u636e\uff0c\u5176\u4f59\u6570\u636e\u4fdd\u6301\u4e0d\u53d8\u3002 \u7b14\u8bb0 PATCH \u6ca1\u6709 PUT \u77e5\u540d\uff0c\u4e5f\u600e\u4e48\u4e0d\u5e38\u7528\u3002 \u5f88\u591a\u4eba\u751a\u81f3\u53ea\u7528 PUT \u5b9e\u73b0\u90e8\u5206\u66f4\u65b0\u3002 FastAPI \u5bf9\u6b64\u6ca1\u6709\u4efb\u4f55\u9650\u5236\uff0c\u53ef\u4ee5 \u968f\u610f \u4e92\u6362\u4f7f\u7528\u8fd9\u4e24\u79cd\u64cd\u4f5c\u3002 \u4f46\u672c\u6307\u5357\u4e5f\u4f1a\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u64cd\u4f5c\u5404\u81ea\u7684\u7528\u9014\u3002","title":"\u7528 PATCH \u8fdb\u884c\u90e8\u5206\u66f4\u65b0"},{"location":"tutorial/body-updates/#pydantic-exclude_unset","text":"\u66f4\u65b0\u90e8\u5206\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u5728 Pydantic \u6a21\u578b\u7684 .dict() \u4e2d\u4f7f\u7528 exclude_unset \u53c2\u6570\u3002 \u6bd4\u5982\uff0c item.dict(exclude_unset=True) \u3002 \u8fd9\u6bb5\u4ee3\u7801\u751f\u6210\u7684 dict \u53ea\u5305\u542b\u521b\u5efa item \u6a21\u578b\u65f6\u663e\u5f0f\u8bbe\u7f6e\u7684\u6570\u636e\uff0c\u800c\u4e0d\u5305\u62ec\u9ed8\u8ba4\u503c\u3002 \u7136\u540e\u518d\u7528\u5b83\u751f\u6210\u4e00\u4e2a\u53ea\u542b\u5df2\u8bbe\u7f6e\uff08\u5728\u8bf7\u6c42\u4e2d\u6240\u53d1\u9001\uff09\u6570\u636e\uff0c\u4e14\u7701\u7565\u4e86\u9ed8\u8ba4\u503c\u7684 dict \uff1a from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item","title":"\u4f7f\u7528 Pydantic \u7684 exclude_unset \u53c2\u6570"},{"location":"tutorial/body-updates/#pydantic-update","text":"\u63a5\u4e0b\u6765\uff0c\u7528 .copy() \u4e3a\u5df2\u6709\u6a21\u578b\u521b\u5efa\u8c03\u7528 update \u53c2\u6570\u7684\u526f\u672c\uff0c\u8be5\u53c2\u6570\u4e3a\u5305\u542b\u66f4\u65b0\u6570\u636e\u7684 dict \u3002 \u4f8b\u5982\uff0c stored_item_model.copy(update=update_data) \uff1a from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item","title":"\u4f7f\u7528 Pydantic \u7684 update \u53c2\u6570"},{"location":"tutorial/body-updates/#_2","text":"\u7b80\u800c\u8a00\u4e4b\uff0c\u66f4\u65b0\u90e8\u5206\u6570\u636e\u5e94\uff1a \u4f7f\u7528 PATCH \u800c\u4e0d\u662f PUT \uff08\u53ef\u9009\uff0c\u4e5f\u53ef\u4ee5\u7528 PUT \uff09\uff1b \u63d0\u53d6\u5b58\u50a8\u7684\u6570\u636e\uff1b \u628a\u6570\u636e\u653e\u5165 Pydantic \u6a21\u578b\uff1b \u751f\u6210\u4e0d\u542b\u8f93\u5165\u6a21\u578b\u9ed8\u8ba4\u503c\u7684 dict \uff08\u4f7f\u7528 exclude_unset \u53c2\u6570\uff09\uff1b \u53ea\u66f4\u65b0\u7528\u6237\u8bbe\u7f6e\u8fc7\u7684\u503c\uff0c\u4e0d\u7528\u6a21\u578b\u4e2d\u7684\u9ed8\u8ba4\u503c\u8986\u76d6\u5df2\u5b58\u50a8\u8fc7\u7684\u503c\u3002 \u4e3a\u5df2\u5b58\u50a8\u7684\u6a21\u578b\u521b\u5efa\u526f\u672c\uff0c\u7528\u63a5\u6536\u7684\u6570\u636e\u66f4\u65b0\u5176\u5c5e\u6027 \uff08\u4f7f\u7528 update \u53c2\u6570\uff09\u3002 \u628a\u6a21\u578b\u526f\u672c\u8f6c\u6362\u4e3a\u53ef\u5b58\u5165\u6570\u636e\u5e93\u7684\u5f62\u5f0f\uff08\u6bd4\u5982\uff0c\u4f7f\u7528 jsonable_encoder \uff09\u3002 \u8fd9\u79cd\u65b9\u5f0f\u4e0e Pydantic \u6a21\u578b\u7684 .dict() \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f46\u80fd\u786e\u4fdd\u628a\u503c\u8f6c\u6362\u4e3a\u9002\u914d JSON \u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f8b\u5982\uff0c \u628a datetime \u8f6c\u6362\u4e3a str \u3002 \u628a\u6570\u636e\u4fdd\u5b58\u81f3\u6570\u636e\u5e93\uff1b \u8fd4\u56de\u66f4\u65b0\u540e\u7684\u6a21\u578b\u3002 from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item \u63d0\u793a \u5b9e\u9645\u4e0a\uff0cHTTP PUT \u4e5f\u53ef\u4ee5\u5b8c\u6210\u76f8\u540c\u7684\u64cd\u4f5c\u3002 \u4f46\u672c\u8282\u4ee5 PATCH \u4e3a\u4f8b\u7684\u539f\u56e0\u662f\uff0c\u8be5\u64cd\u4f5c\u5c31\u662f\u4e3a\u4e86\u8fd9\u79cd\u7528\u4f8b\u521b\u5efa\u7684\u3002 \u7b14\u8bb0 \u6ce8\u610f\uff0c\u8f93\u5165\u6a21\u578b\u4ecd\u9700\u9a8c\u8bc1\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u5e0c\u671b\u63a5\u6536\u7684\u90e8\u5206\u66f4\u65b0\u6570\u636e\u53ef\u4ee5\u7701\u7565\u5176\u4ed6\u6240\u6709\u5c5e\u6027\uff0c\u5219\u8981\u628a\u6a21\u578b\u4e2d\u6240\u6709\u7684\u5c5e\u6027\u6807\u8bb0\u4e3a\u53ef\u9009\uff08\u4f7f\u7528\u9ed8\u8ba4\u503c\u6216 None \uff09\u3002 \u4e3a\u4e86\u533a\u5206\u7528\u4e8e \u66f4\u65b0 \u6240\u6709\u53ef\u9009\u503c\u7684\u6a21\u578b\u4e0e\u7528\u4e8e \u521b\u5efa \u5305\u542b\u5fc5\u9009\u503c\u7684\u6a21\u578b\uff0c\u8bf7\u53c2\u7167 \u66f4\u591a\u6a21\u578b \u4e00\u8282\u4e2d\u7684\u601d\u8def\u3002","title":"\u66f4\u65b0\u90e8\u5206\u6570\u636e\u5c0f\u7ed3"},{"location":"tutorial/body/","text":"\u8bf7\u6c42\u4f53 \u00b6 \u5f53\u4f60\u9700\u8981\u5c06\u6570\u636e\u4ece\u5ba2\u6237\u7aef\uff08\u4f8b\u5982\u6d4f\u89c8\u5668\uff09\u53d1\u9001\u7ed9 API \u65f6\uff0c\u4f60\u5c06\u5176\u4f5c\u4e3a\u300c\u8bf7\u6c42\u4f53\u300d\u53d1\u9001\u3002 \u8bf7\u6c42 \u4f53\u662f\u5ba2\u6237\u7aef\u53d1\u9001\u7ed9 API \u7684\u6570\u636e\u3002 \u54cd\u5e94 \u4f53\u662f API \u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u7684\u6570\u636e\u3002 \u4f60\u7684 API \u51e0\u4e4e\u603b\u662f\u8981\u53d1\u9001 \u54cd\u5e94 \u4f53\u3002\u4f46\u662f\u5ba2\u6237\u7aef\u5e76\u4e0d\u603b\u662f\u9700\u8981\u53d1\u9001 \u8bf7\u6c42 \u4f53\u3002 \u6211\u4eec\u4f7f\u7528 Pydantic \u6a21\u578b\u6765\u58f0\u660e \u8bf7\u6c42 \u4f53\uff0c\u5e76\u80fd\u591f\u83b7\u5f97\u5b83\u4eec\u6240\u5177\u6709\u7684\u6240\u6709\u80fd\u529b\u548c\u4f18\u70b9\u3002 Info \u4f60\u4e0d\u80fd\u4f7f\u7528 GET \u64cd\u4f5c\uff08HTTP \u65b9\u6cd5\uff09\u53d1\u9001\u8bf7\u6c42\u4f53\u3002 \u8981\u53d1\u9001\u6570\u636e\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528\u4e0b\u5217\u65b9\u6cd5\u4e4b\u4e00\uff1a POST \uff08\u8f83\u5e38\u89c1\uff09\u3001 PUT \u3001 DELETE \u6216 PATCH \u3002 \u5bfc\u5165 Pydantic \u7684 BaseModel \u00b6 \u9996\u5148\uff0c\u4f60\u9700\u8981\u4ece pydantic \u4e2d\u5bfc\u5165 BaseModel \uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \u521b\u5efa\u6570\u636e\u6a21\u578b \u00b6 \u7136\u540e\uff0c\u5c06\u4f60\u7684\u6570\u636e\u6a21\u578b\u58f0\u660e\u4e3a\u7ee7\u627f\u81ea BaseModel \u7684\u7c7b\u3002 \u4f7f\u7528\u6807\u51c6\u7684 Python \u7c7b\u578b\u6765\u58f0\u660e\u6240\u6709\u5c5e\u6027\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \u548c\u58f0\u660e\u67e5\u8be2\u53c2\u6570\u65f6\u4e00\u6837\uff0c\u5f53\u4e00\u4e2a\u6a21\u578b\u5c5e\u6027\u5177\u6709\u9ed8\u8ba4\u503c\u65f6\uff0c\u5b83\u4e0d\u662f\u5fc5\u9700\u7684\u3002\u5426\u5219\u5b83\u662f\u4e00\u4e2a\u5fc5\u9700\u5c5e\u6027\u3002\u5c06\u9ed8\u8ba4\u503c\u8bbe\u4e3a None \u53ef\u4f7f\u5176\u6210\u4e3a\u53ef\u9009\u5c5e\u6027\u3002 \u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u6a21\u578b\u58f0\u660e\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684 JSON\u300c object \u300d\uff08\u6216 Python dict \uff09\uff1a { \"name\" : \"Foo\" , \"description\" : \"An optional description\" , \"price\" : 45.2 , \"tax\" : 3.5 } ...\u7531\u4e8e description \u548c tax \u662f\u53ef\u9009\u7684\uff08\u5b83\u4eec\u7684\u9ed8\u8ba4\u503c\u4e3a None \uff09\uff0c\u4e0b\u9762\u7684 JSON\u300c object \u300d\u4e5f\u5c06\u662f\u6709\u6548\u7684\uff1a { \"name\" : \"Foo\" , \"price\" : 45.2 } \u58f0\u660e\u4e3a\u53c2\u6570 \u00b6 \u4f7f\u7528\u4e0e\u58f0\u660e\u8def\u5f84\u548c\u67e5\u8be2\u53c2\u6570\u7684\u76f8\u540c\u65b9\u5f0f\u58f0\u660e\u8bf7\u6c42\u4f53\uff0c\u5373\u53ef\u5c06\u5176\u6dfb\u52a0\u5230\u300c\u8def\u5f84\u64cd\u4f5c\u300d\u4e2d\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item ...\u5e76\u4e14\u5c06\u5b83\u7684\u7c7b\u578b\u58f0\u660e\u4e3a\u4f60\u521b\u5efa\u7684 Item \u6a21\u578b\u3002 \u7ed3\u679c \u00b6 \u4ec5\u4ec5\u4f7f\u7528\u4e86 Python \u7c7b\u578b\u58f0\u660e\uff0c FastAPI \u5c06\u4f1a\uff1a \u5c06\u8bf7\u6c42\u4f53\u4f5c\u4e3a JSON \u8bfb\u53d6\u3002 \u8f6c\u6362\u4e3a\u76f8\u5e94\u7684\u7c7b\u578b\uff08\u5728\u9700\u8981\u65f6\uff09\u3002 \u6821\u9a8c\u6570\u636e\u3002 \u5982\u679c\u6570\u636e\u65e0\u6548\uff0c\u5c06\u8fd4\u56de\u4e00\u6761\u6e05\u6670\u6613\u8bfb\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u6307\u51fa\u4e0d\u6b63\u786e\u6570\u636e\u7684\u786e\u5207\u4f4d\u7f6e\u548c\u5185\u5bb9\u3002 \u5c06\u63a5\u6536\u7684\u6570\u636e\u8d4b\u503c\u5230\u53c2\u6570 item \u4e2d\u3002 \u7531\u4e8e\u4f60\u5df2\u7ecf\u5728\u51fd\u6570\u4e2d\u5c06\u5b83\u58f0\u660e\u4e3a Item \u7c7b\u578b\uff0c\u4f60\u8fd8\u5c06\u83b7\u5f97\u5bf9\u4e8e\u6240\u6709\u5c5e\u6027\u53ca\u5176\u7c7b\u578b\u7684\u4e00\u5207\u7f16\u8f91\u5668\u652f\u6301\uff08\u4ee3\u7801\u8865\u5168\u7b49\uff09\u3002 \u4e3a\u4f60\u7684\u6a21\u578b\u751f\u6210 JSON \u6a21\u5f0f \u5b9a\u4e49\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728\u5176\u4ed6\u4efb\u4f55\u5bf9\u4f60\u7684\u9879\u76ee\u6709\u610f\u4e49\u7684\u5730\u65b9\u4f7f\u7528\u5b83\u4eec\u3002 \u8fd9\u4e9b\u6a21\u5f0f\u5c06\u6210\u4e3a\u751f\u6210\u7684 OpenAPI \u6a21\u5f0f\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u88ab\u81ea\u52a8\u5316\u6587\u6863 UI \u6240\u4f7f\u7528\u3002 \u81ea\u52a8\u5316\u6587\u6863 \u00b6 \u4f60\u6240\u5b9a\u4e49\u6a21\u578b\u7684 JSON \u6a21\u5f0f\u5c06\u6210\u4e3a\u751f\u6210\u7684 OpenAPI \u6a21\u5f0f\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u5728\u4ea4\u4e92\u5f0f API \u6587\u6863\u4e2d\u5c55\u793a\uff1a \u800c\u4e14\u8fd8\u5c06\u5728\u6bcf\u4e00\u4e2a\u9700\u8981\u5b83\u4eec\u7684 \u8def\u5f84\u64cd\u4f5c \u7684 API \u6587\u6863\u4e2d\u4f7f\u7528\uff1a \u7f16\u8f91\u5668\u652f\u6301 \u00b6 \u5728\u4f60\u7684\u7f16\u8f91\u5668\u4e2d\uff0c\u4f60\u4f1a\u5728\u51fd\u6570\u5185\u90e8\u7684\u4efb\u610f\u5730\u65b9\u5f97\u5230\u7c7b\u578b\u63d0\u793a\u548c\u4ee3\u7801\u8865\u5168\uff08\u5982\u679c\u4f60\u63a5\u6536\u7684\u662f\u4e00\u4e2a dict \u800c\u4e0d\u662f Pydantic \u6a21\u578b\uff0c\u5219\u4e0d\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff09\uff1a \u4f60\u8fd8\u4f1a\u83b7\u5f97\u5bf9\u4e0d\u6b63\u786e\u7684\u7c7b\u578b\u64cd\u4f5c\u7684\u9519\u8bef\u68c0\u67e5\uff1a \u8fd9\u5e76\u975e\u5076\u7136\uff0c\u6574\u4e2a\u6846\u67b6\u90fd\u662f\u56f4\u7ed5\u8be5\u8bbe\u8ba1\u800c\u6784\u5efa\u3002 \u5e76\u4e14\u5728\u8fdb\u884c\u4efb\u4f55\u5b9e\u73b0\u4e4b\u524d\uff0c\u5df2\u7ecf\u5728\u8bbe\u8ba1\u9636\u6bb5\u7ecf\u8fc7\u4e86\u5168\u9762\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u5b83\u53ef\u4ee5\u5728\u6240\u6709\u7684\u7f16\u8f91\u5668\u4e2d\u751f\u6548\u3002 Pydantic \u672c\u8eab\u751a\u81f3\u4e5f\u8fdb\u884c\u4e86\u4e00\u4e9b\u66f4\u6539\u4ee5\u652f\u6301\u6b64\u529f\u80fd\u3002 \u4e0a\u9762\u7684\u622a\u56fe\u53d6\u81ea Visual Studio Code \u3002 \u4f46\u662f\u5728 PyCharm \u548c\u7edd\u5927\u591a\u6570\u5176\u4ed6 Python \u7f16\u8f91\u5668\u4e2d\u4f60\u4e5f\u4f1a\u83b7\u5f97\u540c\u6837\u7684\u7f16\u8f91\u5668\u652f\u6301\uff1a \u4f7f\u7528\u6a21\u578b \u00b6 \u5728\u51fd\u6570\u5185\u90e8\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u6a21\u578b\u5bf9\u8c61\u7684\u6240\u6709\u5c5e\u6027\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): item_dict = item . dict () if item . tax : price_with_tax = item . price + item . tax item_dict . update ({ \"price_with_tax\" : price_with_tax }) return item_dict \u8bf7\u6c42\u4f53 + \u8def\u5f84\u53c2\u6570 \u00b6 \u4f60\u53ef\u4ee5\u540c\u65f6\u58f0\u660e\u8def\u5f84\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\u3002 FastAPI \u5c06\u8bc6\u522b\u51fa\u4e0e\u8def\u5f84\u53c2\u6570\u5339\u914d\u7684\u51fd\u6570\u53c2\u6570\u5e94 \u4ece\u8def\u5f84\u4e2d\u83b7\u53d6 \uff0c\u800c\u58f0\u660e\u4e3a Pydantic \u6a21\u578b\u7684\u51fd\u6570\u53c2\u6570\u5e94 \u4ece\u8bf7\u6c42\u4f53\u4e2d\u83b7\u53d6 \u3002 from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item ): return { \"item_id\" : item_id , ** item . dict ()} \u8bf7\u6c42\u4f53 + \u8def\u5f84\u53c2\u6570 + \u67e5\u8be2\u53c2\u6570 \u00b6 \u4f60\u8fd8\u53ef\u4ee5\u540c\u65f6\u58f0\u660e \u8bf7\u6c42\u4f53 \u3001 \u8def\u5f84\u53c2\u6570 \u548c \u67e5\u8be2\u53c2\u6570 \u3002 FastAPI \u4f1a\u8bc6\u522b\u5b83\u4eec\u4e2d\u7684\u6bcf\u4e00\u4e2a\uff0c\u5e76\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u83b7\u53d6\u6570\u636e\u3002 from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item , q : Union [ str , None ] = None ): result = { \"item_id\" : item_id , ** item . dict ()} if q : result . update ({ \"q\" : q }) return result \u51fd\u6570\u53c2\u6570\u5c06\u4f9d\u6b21\u6309\u5982\u4e0b\u89c4\u5219\u8fdb\u884c\u8bc6\u522b\uff1a \u5982\u679c\u5728 \u8def\u5f84 \u4e2d\u4e5f\u58f0\u660e\u4e86\u8be5\u53c2\u6570\uff0c\u5b83\u5c06\u88ab\u7528\u4f5c\u8def\u5f84\u53c2\u6570\u3002 \u5982\u679c\u53c2\u6570\u5c5e\u4e8e \u5355\u4e00\u7c7b\u578b \uff08\u6bd4\u5982 int \u3001 float \u3001 str \u3001 bool \u7b49\uff09\u5b83\u5c06\u88ab\u89e3\u91ca\u4e3a \u67e5\u8be2 \u53c2\u6570\u3002 \u5982\u679c\u53c2\u6570\u7684\u7c7b\u578b\u88ab\u58f0\u660e\u4e3a\u4e00\u4e2a Pydantic \u6a21\u578b \uff0c\u5b83\u5c06\u88ab\u89e3\u91ca\u4e3a \u8bf7\u6c42\u4f53 \u3002 \u4e0d\u4f7f\u7528 Pydantic \u00b6 \u5982\u679c\u4f60\u4e0d\u60f3\u4f7f\u7528 Pydantic \u6a21\u578b\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 Body \u53c2\u6570\u3002\u8bf7\u53c2\u9605\u6587\u6863 \u8bf7\u6c42\u4f53 - \u591a\u4e2a\u53c2\u6570\uff1a\u8bf7\u6c42\u4f53\u4e2d\u7684\u5355\u4e00\u503c \u3002","title":"\u8bf7\u6c42\u4f53"},{"location":"tutorial/body/#_1","text":"\u5f53\u4f60\u9700\u8981\u5c06\u6570\u636e\u4ece\u5ba2\u6237\u7aef\uff08\u4f8b\u5982\u6d4f\u89c8\u5668\uff09\u53d1\u9001\u7ed9 API \u65f6\uff0c\u4f60\u5c06\u5176\u4f5c\u4e3a\u300c\u8bf7\u6c42\u4f53\u300d\u53d1\u9001\u3002 \u8bf7\u6c42 \u4f53\u662f\u5ba2\u6237\u7aef\u53d1\u9001\u7ed9 API \u7684\u6570\u636e\u3002 \u54cd\u5e94 \u4f53\u662f API \u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u7684\u6570\u636e\u3002 \u4f60\u7684 API \u51e0\u4e4e\u603b\u662f\u8981\u53d1\u9001 \u54cd\u5e94 \u4f53\u3002\u4f46\u662f\u5ba2\u6237\u7aef\u5e76\u4e0d\u603b\u662f\u9700\u8981\u53d1\u9001 \u8bf7\u6c42 \u4f53\u3002 \u6211\u4eec\u4f7f\u7528 Pydantic \u6a21\u578b\u6765\u58f0\u660e \u8bf7\u6c42 \u4f53\uff0c\u5e76\u80fd\u591f\u83b7\u5f97\u5b83\u4eec\u6240\u5177\u6709\u7684\u6240\u6709\u80fd\u529b\u548c\u4f18\u70b9\u3002 Info \u4f60\u4e0d\u80fd\u4f7f\u7528 GET \u64cd\u4f5c\uff08HTTP \u65b9\u6cd5\uff09\u53d1\u9001\u8bf7\u6c42\u4f53\u3002 \u8981\u53d1\u9001\u6570\u636e\uff0c\u4f60\u5fc5\u987b\u4f7f\u7528\u4e0b\u5217\u65b9\u6cd5\u4e4b\u4e00\uff1a POST \uff08\u8f83\u5e38\u89c1\uff09\u3001 PUT \u3001 DELETE \u6216 PATCH \u3002","title":"\u8bf7\u6c42\u4f53"},{"location":"tutorial/body/#pydantic-basemodel","text":"\u9996\u5148\uff0c\u4f60\u9700\u8981\u4ece pydantic \u4e2d\u5bfc\u5165 BaseModel \uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item","title":"\u5bfc\u5165 Pydantic \u7684 BaseModel"},{"location":"tutorial/body/#_2","text":"\u7136\u540e\uff0c\u5c06\u4f60\u7684\u6570\u636e\u6a21\u578b\u58f0\u660e\u4e3a\u7ee7\u627f\u81ea BaseModel \u7684\u7c7b\u3002 \u4f7f\u7528\u6807\u51c6\u7684 Python \u7c7b\u578b\u6765\u58f0\u660e\u6240\u6709\u5c5e\u6027\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \u548c\u58f0\u660e\u67e5\u8be2\u53c2\u6570\u65f6\u4e00\u6837\uff0c\u5f53\u4e00\u4e2a\u6a21\u578b\u5c5e\u6027\u5177\u6709\u9ed8\u8ba4\u503c\u65f6\uff0c\u5b83\u4e0d\u662f\u5fc5\u9700\u7684\u3002\u5426\u5219\u5b83\u662f\u4e00\u4e2a\u5fc5\u9700\u5c5e\u6027\u3002\u5c06\u9ed8\u8ba4\u503c\u8bbe\u4e3a None \u53ef\u4f7f\u5176\u6210\u4e3a\u53ef\u9009\u5c5e\u6027\u3002 \u4f8b\u5982\uff0c\u4e0a\u9762\u7684\u6a21\u578b\u58f0\u660e\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684 JSON\u300c object \u300d\uff08\u6216 Python dict \uff09\uff1a { \"name\" : \"Foo\" , \"description\" : \"An optional description\" , \"price\" : 45.2 , \"tax\" : 3.5 } ...\u7531\u4e8e description \u548c tax \u662f\u53ef\u9009\u7684\uff08\u5b83\u4eec\u7684\u9ed8\u8ba4\u503c\u4e3a None \uff09\uff0c\u4e0b\u9762\u7684 JSON\u300c object \u300d\u4e5f\u5c06\u662f\u6709\u6548\u7684\uff1a { \"name\" : \"Foo\" , \"price\" : 45.2 }","title":"\u521b\u5efa\u6570\u636e\u6a21\u578b"},{"location":"tutorial/body/#_3","text":"\u4f7f\u7528\u4e0e\u58f0\u660e\u8def\u5f84\u548c\u67e5\u8be2\u53c2\u6570\u7684\u76f8\u540c\u65b9\u5f0f\u58f0\u660e\u8bf7\u6c42\u4f53\uff0c\u5373\u53ef\u5c06\u5176\u6dfb\u52a0\u5230\u300c\u8def\u5f84\u64cd\u4f5c\u300d\u4e2d\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item ...\u5e76\u4e14\u5c06\u5b83\u7684\u7c7b\u578b\u58f0\u660e\u4e3a\u4f60\u521b\u5efa\u7684 Item \u6a21\u578b\u3002","title":"\u58f0\u660e\u4e3a\u53c2\u6570"},{"location":"tutorial/body/#_4","text":"\u4ec5\u4ec5\u4f7f\u7528\u4e86 Python \u7c7b\u578b\u58f0\u660e\uff0c FastAPI \u5c06\u4f1a\uff1a \u5c06\u8bf7\u6c42\u4f53\u4f5c\u4e3a JSON \u8bfb\u53d6\u3002 \u8f6c\u6362\u4e3a\u76f8\u5e94\u7684\u7c7b\u578b\uff08\u5728\u9700\u8981\u65f6\uff09\u3002 \u6821\u9a8c\u6570\u636e\u3002 \u5982\u679c\u6570\u636e\u65e0\u6548\uff0c\u5c06\u8fd4\u56de\u4e00\u6761\u6e05\u6670\u6613\u8bfb\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u6307\u51fa\u4e0d\u6b63\u786e\u6570\u636e\u7684\u786e\u5207\u4f4d\u7f6e\u548c\u5185\u5bb9\u3002 \u5c06\u63a5\u6536\u7684\u6570\u636e\u8d4b\u503c\u5230\u53c2\u6570 item \u4e2d\u3002 \u7531\u4e8e\u4f60\u5df2\u7ecf\u5728\u51fd\u6570\u4e2d\u5c06\u5b83\u58f0\u660e\u4e3a Item \u7c7b\u578b\uff0c\u4f60\u8fd8\u5c06\u83b7\u5f97\u5bf9\u4e8e\u6240\u6709\u5c5e\u6027\u53ca\u5176\u7c7b\u578b\u7684\u4e00\u5207\u7f16\u8f91\u5668\u652f\u6301\uff08\u4ee3\u7801\u8865\u5168\u7b49\uff09\u3002 \u4e3a\u4f60\u7684\u6a21\u578b\u751f\u6210 JSON \u6a21\u5f0f \u5b9a\u4e49\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728\u5176\u4ed6\u4efb\u4f55\u5bf9\u4f60\u7684\u9879\u76ee\u6709\u610f\u4e49\u7684\u5730\u65b9\u4f7f\u7528\u5b83\u4eec\u3002 \u8fd9\u4e9b\u6a21\u5f0f\u5c06\u6210\u4e3a\u751f\u6210\u7684 OpenAPI \u6a21\u5f0f\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u88ab\u81ea\u52a8\u5316\u6587\u6863 UI \u6240\u4f7f\u7528\u3002","title":"\u7ed3\u679c"},{"location":"tutorial/body/#_5","text":"\u4f60\u6240\u5b9a\u4e49\u6a21\u578b\u7684 JSON \u6a21\u5f0f\u5c06\u6210\u4e3a\u751f\u6210\u7684 OpenAPI \u6a21\u5f0f\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u5728\u4ea4\u4e92\u5f0f API \u6587\u6863\u4e2d\u5c55\u793a\uff1a \u800c\u4e14\u8fd8\u5c06\u5728\u6bcf\u4e00\u4e2a\u9700\u8981\u5b83\u4eec\u7684 \u8def\u5f84\u64cd\u4f5c \u7684 API \u6587\u6863\u4e2d\u4f7f\u7528\uff1a","title":"\u81ea\u52a8\u5316\u6587\u6863"},{"location":"tutorial/body/#_6","text":"\u5728\u4f60\u7684\u7f16\u8f91\u5668\u4e2d\uff0c\u4f60\u4f1a\u5728\u51fd\u6570\u5185\u90e8\u7684\u4efb\u610f\u5730\u65b9\u5f97\u5230\u7c7b\u578b\u63d0\u793a\u548c\u4ee3\u7801\u8865\u5168\uff08\u5982\u679c\u4f60\u63a5\u6536\u7684\u662f\u4e00\u4e2a dict \u800c\u4e0d\u662f Pydantic \u6a21\u578b\uff0c\u5219\u4e0d\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff09\uff1a \u4f60\u8fd8\u4f1a\u83b7\u5f97\u5bf9\u4e0d\u6b63\u786e\u7684\u7c7b\u578b\u64cd\u4f5c\u7684\u9519\u8bef\u68c0\u67e5\uff1a \u8fd9\u5e76\u975e\u5076\u7136\uff0c\u6574\u4e2a\u6846\u67b6\u90fd\u662f\u56f4\u7ed5\u8be5\u8bbe\u8ba1\u800c\u6784\u5efa\u3002 \u5e76\u4e14\u5728\u8fdb\u884c\u4efb\u4f55\u5b9e\u73b0\u4e4b\u524d\uff0c\u5df2\u7ecf\u5728\u8bbe\u8ba1\u9636\u6bb5\u7ecf\u8fc7\u4e86\u5168\u9762\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u5b83\u53ef\u4ee5\u5728\u6240\u6709\u7684\u7f16\u8f91\u5668\u4e2d\u751f\u6548\u3002 Pydantic \u672c\u8eab\u751a\u81f3\u4e5f\u8fdb\u884c\u4e86\u4e00\u4e9b\u66f4\u6539\u4ee5\u652f\u6301\u6b64\u529f\u80fd\u3002 \u4e0a\u9762\u7684\u622a\u56fe\u53d6\u81ea Visual Studio Code \u3002 \u4f46\u662f\u5728 PyCharm \u548c\u7edd\u5927\u591a\u6570\u5176\u4ed6 Python \u7f16\u8f91\u5668\u4e2d\u4f60\u4e5f\u4f1a\u83b7\u5f97\u540c\u6837\u7684\u7f16\u8f91\u5668\u652f\u6301\uff1a","title":"\u7f16\u8f91\u5668\u652f\u6301"},{"location":"tutorial/body/#_7","text":"\u5728\u51fd\u6570\u5185\u90e8\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u6a21\u578b\u5bf9\u8c61\u7684\u6240\u6709\u5c5e\u6027\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): item_dict = item . dict () if item . tax : price_with_tax = item . price + item . tax item_dict . update ({ \"price_with_tax\" : price_with_tax }) return item_dict","title":"\u4f7f\u7528\u6a21\u578b"},{"location":"tutorial/body/#_8","text":"\u4f60\u53ef\u4ee5\u540c\u65f6\u58f0\u660e\u8def\u5f84\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\u3002 FastAPI \u5c06\u8bc6\u522b\u51fa\u4e0e\u8def\u5f84\u53c2\u6570\u5339\u914d\u7684\u51fd\u6570\u53c2\u6570\u5e94 \u4ece\u8def\u5f84\u4e2d\u83b7\u53d6 \uff0c\u800c\u58f0\u660e\u4e3a Pydantic \u6a21\u578b\u7684\u51fd\u6570\u53c2\u6570\u5e94 \u4ece\u8bf7\u6c42\u4f53\u4e2d\u83b7\u53d6 \u3002 from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item ): return { \"item_id\" : item_id , ** item . dict ()}","title":"\u8bf7\u6c42\u4f53 + \u8def\u5f84\u53c2\u6570"},{"location":"tutorial/body/#_9","text":"\u4f60\u8fd8\u53ef\u4ee5\u540c\u65f6\u58f0\u660e \u8bf7\u6c42\u4f53 \u3001 \u8def\u5f84\u53c2\u6570 \u548c \u67e5\u8be2\u53c2\u6570 \u3002 FastAPI \u4f1a\u8bc6\u522b\u5b83\u4eec\u4e2d\u7684\u6bcf\u4e00\u4e2a\uff0c\u5e76\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u83b7\u53d6\u6570\u636e\u3002 from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item , q : Union [ str , None ] = None ): result = { \"item_id\" : item_id , ** item . dict ()} if q : result . update ({ \"q\" : q }) return result \u51fd\u6570\u53c2\u6570\u5c06\u4f9d\u6b21\u6309\u5982\u4e0b\u89c4\u5219\u8fdb\u884c\u8bc6\u522b\uff1a \u5982\u679c\u5728 \u8def\u5f84 \u4e2d\u4e5f\u58f0\u660e\u4e86\u8be5\u53c2\u6570\uff0c\u5b83\u5c06\u88ab\u7528\u4f5c\u8def\u5f84\u53c2\u6570\u3002 \u5982\u679c\u53c2\u6570\u5c5e\u4e8e \u5355\u4e00\u7c7b\u578b \uff08\u6bd4\u5982 int \u3001 float \u3001 str \u3001 bool \u7b49\uff09\u5b83\u5c06\u88ab\u89e3\u91ca\u4e3a \u67e5\u8be2 \u53c2\u6570\u3002 \u5982\u679c\u53c2\u6570\u7684\u7c7b\u578b\u88ab\u58f0\u660e\u4e3a\u4e00\u4e2a Pydantic \u6a21\u578b \uff0c\u5b83\u5c06\u88ab\u89e3\u91ca\u4e3a \u8bf7\u6c42\u4f53 \u3002","title":"\u8bf7\u6c42\u4f53 + \u8def\u5f84\u53c2\u6570 + \u67e5\u8be2\u53c2\u6570"},{"location":"tutorial/body/#pydantic","text":"\u5982\u679c\u4f60\u4e0d\u60f3\u4f7f\u7528 Pydantic \u6a21\u578b\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 Body \u53c2\u6570\u3002\u8bf7\u53c2\u9605\u6587\u6863 \u8bf7\u6c42\u4f53 - \u591a\u4e2a\u53c2\u6570\uff1a\u8bf7\u6c42\u4f53\u4e2d\u7684\u5355\u4e00\u503c \u3002","title":"\u4e0d\u4f7f\u7528 Pydantic"},{"location":"tutorial/cookie-params/","text":"Cookie \u53c2\u6570 \u00b6 \u4f60\u53ef\u4ee5\u50cf\u5b9a\u4e49 Query \u53c2\u6570\u548c Path \u53c2\u6570\u4e00\u6837\u6765\u5b9a\u4e49 Cookie \u53c2\u6570\u3002 \u5bfc\u5165 Cookie \u00b6 \u9996\u5148\uff0c\u5bfc\u5165 Cookie : from typing import Union from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : Union [ str , None ] = Cookie ( default = None )): return { \"ads_id\" : ads_id } \u58f0\u660e Cookie \u53c2\u6570 \u00b6 \u58f0\u660e Cookie \u53c2\u6570\u7684\u7ed3\u6784\u4e0e\u58f0\u660e Query \u53c2\u6570\u548c Path \u53c2\u6570\u65f6\u76f8\u540c\u3002 \u7b2c\u4e00\u4e2a\u503c\u662f\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u4f20\u9012\u6240\u6709\u9a8c\u8bc1\u53c2\u6570\u6216\u6ce8\u91ca\u53c2\u6570\uff0c\u6765\u6821\u9a8c\u53c2\u6570\uff1a from typing import Union from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : Union [ str , None ] = Cookie ( default = None )): return { \"ads_id\" : ads_id } \u6280\u672f\u7ec6\u8282 Cookie \u3001 Path \u3001 Query \u662f\u5144\u5f1f\u7c7b\uff0c\u5b83\u4eec\u90fd\u7ee7\u627f\u81ea\u516c\u5171\u7684 Param \u7c7b \u4f46\u8bf7\u8bb0\u4f4f\uff0c\u5f53\u4f60\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u3001 Cookie \u6216\u5176\u4ed6\u53c2\u6570\u58f0\u660e\u51fd\u6570\uff0c\u8fd9\u4e9b\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570\u3002 Info \u4f60\u9700\u8981\u4f7f\u7528 Cookie \u6765\u58f0\u660e cookie \u53c2\u6570\uff0c\u5426\u5219\u53c2\u6570\u5c06\u4f1a\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570\u3002 \u603b\u7ed3 \u00b6 \u4f7f\u7528 Cookie \u58f0\u660e cookie \u53c2\u6570\uff0c\u4f7f\u7528\u65b9\u5f0f\u4e0e Query \u548c Path \u7c7b\u4f3c\u3002","title":"Cookie \u53c2\u6570"},{"location":"tutorial/cookie-params/#cookie","text":"\u4f60\u53ef\u4ee5\u50cf\u5b9a\u4e49 Query \u53c2\u6570\u548c Path \u53c2\u6570\u4e00\u6837\u6765\u5b9a\u4e49 Cookie \u53c2\u6570\u3002","title":"Cookie \u53c2\u6570"},{"location":"tutorial/cookie-params/#cookie_1","text":"\u9996\u5148\uff0c\u5bfc\u5165 Cookie : from typing import Union from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : Union [ str , None ] = Cookie ( default = None )): return { \"ads_id\" : ads_id }","title":"\u5bfc\u5165 Cookie"},{"location":"tutorial/cookie-params/#cookie_2","text":"\u58f0\u660e Cookie \u53c2\u6570\u7684\u7ed3\u6784\u4e0e\u58f0\u660e Query \u53c2\u6570\u548c Path \u53c2\u6570\u65f6\u76f8\u540c\u3002 \u7b2c\u4e00\u4e2a\u503c\u662f\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u4f20\u9012\u6240\u6709\u9a8c\u8bc1\u53c2\u6570\u6216\u6ce8\u91ca\u53c2\u6570\uff0c\u6765\u6821\u9a8c\u53c2\u6570\uff1a from typing import Union from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : Union [ str , None ] = Cookie ( default = None )): return { \"ads_id\" : ads_id } \u6280\u672f\u7ec6\u8282 Cookie \u3001 Path \u3001 Query \u662f\u5144\u5f1f\u7c7b\uff0c\u5b83\u4eec\u90fd\u7ee7\u627f\u81ea\u516c\u5171\u7684 Param \u7c7b \u4f46\u8bf7\u8bb0\u4f4f\uff0c\u5f53\u4f60\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u3001 Cookie \u6216\u5176\u4ed6\u53c2\u6570\u58f0\u660e\u51fd\u6570\uff0c\u8fd9\u4e9b\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570\u3002 Info \u4f60\u9700\u8981\u4f7f\u7528 Cookie \u6765\u58f0\u660e cookie \u53c2\u6570\uff0c\u5426\u5219\u53c2\u6570\u5c06\u4f1a\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570\u3002","title":"\u58f0\u660e Cookie \u53c2\u6570"},{"location":"tutorial/cookie-params/#_1","text":"\u4f7f\u7528 Cookie \u58f0\u660e cookie \u53c2\u6570\uff0c\u4f7f\u7528\u65b9\u5f0f\u4e0e Query \u548c Path \u7c7b\u4f3c\u3002","title":"\u603b\u7ed3"},{"location":"tutorial/cors/","text":"CORS\uff08\u8de8\u57df\u8d44\u6e90\u5171\u4eab\uff09 \u00b6 CORS \u6216\u8005\u300c\u8de8\u57df\u8d44\u6e90\u5171\u4eab\u300d \u6307\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7684\u524d\u7aef\u62e5\u6709\u4e0e\u540e\u7aef\u901a\u4fe1\u7684 JavaScript \u4ee3\u7801\uff0c\u800c\u540e\u7aef\u5904\u4e8e\u4e0e\u524d\u7aef\u4e0d\u540c\u7684\u300c\u6e90\u300d\u7684\u60c5\u51b5\u3002 \u6e90 \u00b6 \u6e90\u662f\u534f\u8bae\uff08 http \uff0c https \uff09\u3001\u57df\uff08 myapp.com \uff0c localhost \uff0c localhost.tiangolo.com \uff09\u4ee5\u53ca\u7aef\u53e3\uff08 80 \u3001 443 \u3001 8080 \uff09\u7684\u7ec4\u5408\u3002 \u56e0\u6b64\uff0c\u8fd9\u4e9b\u90fd\u662f\u4e0d\u540c\u7684\u6e90\uff1a http://localhost https://localhost http://localhost:8080 \u5373\u4f7f\u5b83\u4eec\u90fd\u5728 localhost \u4e2d\uff0c\u4f46\u662f\u5b83\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u534f\u8bae\u6216\u8005\u7aef\u53e3\uff0c\u6240\u4ee5\u5b83\u4eec\u90fd\u662f\u4e0d\u540c\u7684\u300c\u6e90\u300d\u3002 \u6b65\u9aa4 \u00b6 \u5047\u8bbe\u4f60\u7684\u6d4f\u89c8\u5668\u4e2d\u6709\u4e00\u4e2a\u524d\u7aef\u8fd0\u884c\u5728 http://localhost:8080 \uff0c\u5e76\u4e14\u5b83\u7684 JavaScript \u6b63\u5728\u5c1d\u8bd5\u4e0e\u8fd0\u884c\u5728 http://localhost \u7684\u540e\u7aef\u901a\u4fe1\uff08\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u6307\u5b9a\u7aef\u53e3\uff0c\u6d4f\u89c8\u5668\u4f1a\u91c7\u7528\u9ed8\u8ba4\u7684\u7aef\u53e3 80 \uff09\u3002 \u7136\u540e\uff0c\u6d4f\u89c8\u5668\u4f1a\u5411\u540e\u7aef\u53d1\u9001\u4e00\u4e2a HTTP OPTIONS \u8bf7\u6c42\uff0c\u5982\u679c\u540e\u7aef\u53d1\u9001\u9002\u5f53\u7684 headers \u6765\u6388\u6743\u6765\u81ea\u8fd9\u4e2a\u4e0d\u540c\u6e90\uff08 http://localhost:8080 \uff09\u7684\u901a\u4fe1\uff0c\u6d4f\u89c8\u5668\u5c06\u5141\u8bb8\u524d\u7aef\u7684 JavaScript \u5411\u540e\u7aef\u53d1\u9001\u8bf7\u6c42\u3002 \u4e3a\u6b64\uff0c\u540e\u7aef\u5fc5\u987b\u6709\u4e00\u4e2a\u300c\u5141\u8bb8\u7684\u6e90\u300d\u5217\u8868\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u5fc5\u987b\u5305\u542b http://localhost:8080 \uff0c\u524d\u7aef\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u901a\u914d\u7b26 \u00b6 \u4e5f\u53ef\u4ee5\u4f7f\u7528 \"*\" \uff08\u4e00\u4e2a\u300c\u901a\u914d\u7b26\u300d\uff09\u58f0\u660e\u8fd9\u4e2a\u5217\u8868\uff0c\u8868\u793a\u5168\u90e8\u90fd\u662f\u5141\u8bb8\u7684\u3002 \u4f46\u8fd9\u4ec5\u5141\u8bb8\u67d0\u4e9b\u7c7b\u578b\u7684\u901a\u4fe1\uff0c\u4e0d\u5305\u62ec\u6240\u6709\u6d89\u53ca\u51ed\u636e\u7684\u5185\u5bb9\uff1a\u50cf Cookies \u4ee5\u53ca\u90a3\u4e9b\u4f7f\u7528 Bearer \u4ee4\u724c\u7684\u6388\u6743 headers \u7b49\u3002 \u56e0\u6b64\uff0c\u4e3a\u4e86\u4e00\u5207\u90fd\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u6700\u597d\u663e\u5f0f\u5730\u6307\u5b9a\u5141\u8bb8\u7684\u6e90\u3002 \u4f7f\u7528 CORSMiddleware \u00b6 \u4f60\u53ef\u4ee5\u5728 FastAPI \u5e94\u7528\u4e2d\u4f7f\u7528 CORSMiddleware \u6765\u914d\u7f6e\u5b83\u3002 \u5bfc\u5165 CORSMiddleware \u3002 \u521b\u5efa\u4e00\u4e2a\u5141\u8bb8\u7684\u6e90\u5217\u8868\uff08\u7531\u5b57\u7b26\u4e32\u7ec4\u6210\uff09\u3002 \u5c06\u5176\u4f5c\u4e3a\u300c\u4e2d\u95f4\u4ef6\u300d\u6dfb\u52a0\u5230\u4f60\u7684 FastAPI \u5e94\u7528\u4e2d\u3002 \u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a\u540e\u7aef\u662f\u5426\u5141\u8bb8\uff1a \u51ed\u8bc1\uff08\u6388\u6743 headers\uff0cCookies \u7b49\uff09\u3002 \u7279\u5b9a\u7684 HTTP \u65b9\u6cd5\uff08 POST \uff0c PUT \uff09\u6216\u8005\u4f7f\u7528\u901a\u914d\u7b26 \"*\" \u5141\u8bb8\u6240\u6709\u65b9\u6cd5\u3002 \u7279\u5b9a\u7684 HTTP headers \u6216\u8005\u4f7f\u7528\u901a\u914d\u7b26 \"*\" \u5141\u8bb8\u6240\u6709 headers\u3002 from fastapi import FastAPI from fastapi.middleware.cors import CORSMiddleware app = FastAPI () origins = [ \"http://localhost.tiangolo.com\" , \"https://localhost.tiangolo.com\" , \"http://localhost\" , \"http://localhost:8080\" , ] app . add_middleware ( CORSMiddleware , allow_origins = origins , allow_credentials = True , allow_methods = [ \"*\" ], allow_headers = [ \"*\" ], ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a CORSMiddleware \u5b9e\u73b0\u6240\u4f7f\u7528\u7684\u9ed8\u8ba4\u53c2\u6570\u8f83\u4e3a\u4fdd\u5b88\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u663e\u5f0f\u5730\u542f\u7528\u7279\u5b9a\u7684\u6e90\u3001\u65b9\u6cd5\u6216\u8005 headers\uff0c\u4ee5\u4fbf\u6d4f\u89c8\u5668\u80fd\u591f\u5728\u8de8\u57df\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002 \u652f\u6301\u4ee5\u4e0b\u53c2\u6570\uff1a allow_origins - \u4e00\u4e2a\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u7684\u6e90\u5217\u8868\u3002\u4f8b\u5982 ['https://example.org', 'https://www.example.org'] \u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u5141\u8bb8\u4efb\u4f55\u6e90\u3002 allow_origin_regex - \u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5339\u914d\u7684\u6e90\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u3002\u4f8b\u5982 'https://.*\\.example\\.org' \u3002 allow_methods - \u4e00\u4e2a\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u7684 HTTP \u65b9\u6cd5\u5217\u8868\u3002\u9ed8\u8ba4\u4e3a ['GET'] \u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u6765\u5141\u8bb8\u6240\u6709\u6807\u51c6\u65b9\u6cd5\u3002 allow_headers - \u4e00\u4e2a\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u7684 HTTP \u8bf7\u6c42\u5934\u5217\u8868\u3002\u9ed8\u8ba4\u4e3a [] \u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u5141\u8bb8\u6240\u6709\u7684\u8bf7\u6c42\u5934\u3002 Accept \u3001 Accept-Language \u3001 Content-Language \u4ee5\u53ca Content-Type \u8bf7\u6c42\u5934\u603b\u662f\u5141\u8bb8 CORS \u8bf7\u6c42\u3002 allow_credentials - \u6307\u793a\u8de8\u57df\u8bf7\u6c42\u652f\u6301 cookies\u3002\u9ed8\u8ba4\u662f False \u3002\u53e6\u5916\uff0c\u5141\u8bb8\u51ed\u8bc1\u65f6 allow_origins \u4e0d\u80fd\u8bbe\u5b9a\u4e3a ['*'] \uff0c\u5fc5\u987b\u6307\u5b9a\u6e90\u3002 expose_headers - \u6307\u793a\u53ef\u4ee5\u88ab\u6d4f\u89c8\u5668\u8bbf\u95ee\u7684\u54cd\u5e94\u5934\u3002\u9ed8\u8ba4\u4e3a [] \u3002 max_age - \u8bbe\u5b9a\u6d4f\u89c8\u5668\u7f13\u5b58 CORS \u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4\uff0c\u5355\u4f4d\u662f\u79d2\u3002\u9ed8\u8ba4\u4e3a 600 \u3002 \u4e2d\u95f4\u4ef6\u54cd\u5e94\u4e24\u79cd\u7279\u5b9a\u7c7b\u578b\u7684 HTTP \u8bf7\u6c42\u2026\u2026 CORS \u9884\u68c0\u8bf7\u6c42 \u00b6 \u8fd9\u662f\u4e9b\u5e26\u6709 Origin \u548c Access-Control-Request-Method \u8bf7\u6c42\u5934\u7684 OPTIONS \u8bf7\u6c42\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e2d\u95f4\u4ef6\u5c06\u62e6\u622a\u4f20\u5165\u7684\u8bf7\u6c42\u5e76\u8fdb\u884c\u54cd\u5e94\uff0c\u51fa\u4e8e\u63d0\u4f9b\u4fe1\u606f\u7684\u76ee\u7684\u8fd4\u56de\u4e00\u4e2a\u4f7f\u7528\u4e86\u9002\u5f53\u7684 CORS headers \u7684 200 \u6216 400 \u54cd\u5e94\u3002 \u7b80\u5355\u8bf7\u6c42 \u00b6 \u4efb\u4f55\u5e26\u6709 Origin \u8bf7\u6c42\u5934\u7684\u8bf7\u6c42\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e2d\u95f4\u4ef6\u5c06\u50cf\u5e73\u5e38\u4e00\u6837\u4f20\u9012\u8bf7\u6c42\uff0c\u4f46\u662f\u5728\u54cd\u5e94\u4e2d\u5305\u542b\u9002\u5f53\u7684 CORS headers\u3002 \u66f4\u591a\u4fe1\u606f \u00b6 \u66f4\u591a\u5173\u4e8e CORS \u7684\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b Mozilla CORS \u6587\u6863 \u3002 \u6280\u672f\u7ec6\u8282 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.middleware.cors import CORSMiddleware \u3002 \u51fa\u4e8e\u65b9\u4fbf\uff0c FastAPI \u5728 fastapi.middleware \u4e2d\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u51e0\u4e2a\u4e2d\u95f4\u4ef6\u3002\u4f46\u662f\u5927\u591a\u6570\u53ef\u7528\u7684\u4e2d\u95f4\u4ef6\u90fd\u662f\u76f4\u63a5\u6765\u81ea Starlette\u3002","title":"CORS\uff08\u8de8\u57df\u8d44\u6e90\u5171\u4eab\uff09"},{"location":"tutorial/cors/#cors","text":"CORS \u6216\u8005\u300c\u8de8\u57df\u8d44\u6e90\u5171\u4eab\u300d \u6307\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7684\u524d\u7aef\u62e5\u6709\u4e0e\u540e\u7aef\u901a\u4fe1\u7684 JavaScript \u4ee3\u7801\uff0c\u800c\u540e\u7aef\u5904\u4e8e\u4e0e\u524d\u7aef\u4e0d\u540c\u7684\u300c\u6e90\u300d\u7684\u60c5\u51b5\u3002","title":"CORS\uff08\u8de8\u57df\u8d44\u6e90\u5171\u4eab\uff09"},{"location":"tutorial/cors/#_1","text":"\u6e90\u662f\u534f\u8bae\uff08 http \uff0c https \uff09\u3001\u57df\uff08 myapp.com \uff0c localhost \uff0c localhost.tiangolo.com \uff09\u4ee5\u53ca\u7aef\u53e3\uff08 80 \u3001 443 \u3001 8080 \uff09\u7684\u7ec4\u5408\u3002 \u56e0\u6b64\uff0c\u8fd9\u4e9b\u90fd\u662f\u4e0d\u540c\u7684\u6e90\uff1a http://localhost https://localhost http://localhost:8080 \u5373\u4f7f\u5b83\u4eec\u90fd\u5728 localhost \u4e2d\uff0c\u4f46\u662f\u5b83\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u534f\u8bae\u6216\u8005\u7aef\u53e3\uff0c\u6240\u4ee5\u5b83\u4eec\u90fd\u662f\u4e0d\u540c\u7684\u300c\u6e90\u300d\u3002","title":"\u6e90"},{"location":"tutorial/cors/#_2","text":"\u5047\u8bbe\u4f60\u7684\u6d4f\u89c8\u5668\u4e2d\u6709\u4e00\u4e2a\u524d\u7aef\u8fd0\u884c\u5728 http://localhost:8080 \uff0c\u5e76\u4e14\u5b83\u7684 JavaScript \u6b63\u5728\u5c1d\u8bd5\u4e0e\u8fd0\u884c\u5728 http://localhost \u7684\u540e\u7aef\u901a\u4fe1\uff08\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u6307\u5b9a\u7aef\u53e3\uff0c\u6d4f\u89c8\u5668\u4f1a\u91c7\u7528\u9ed8\u8ba4\u7684\u7aef\u53e3 80 \uff09\u3002 \u7136\u540e\uff0c\u6d4f\u89c8\u5668\u4f1a\u5411\u540e\u7aef\u53d1\u9001\u4e00\u4e2a HTTP OPTIONS \u8bf7\u6c42\uff0c\u5982\u679c\u540e\u7aef\u53d1\u9001\u9002\u5f53\u7684 headers \u6765\u6388\u6743\u6765\u81ea\u8fd9\u4e2a\u4e0d\u540c\u6e90\uff08 http://localhost:8080 \uff09\u7684\u901a\u4fe1\uff0c\u6d4f\u89c8\u5668\u5c06\u5141\u8bb8\u524d\u7aef\u7684 JavaScript \u5411\u540e\u7aef\u53d1\u9001\u8bf7\u6c42\u3002 \u4e3a\u6b64\uff0c\u540e\u7aef\u5fc5\u987b\u6709\u4e00\u4e2a\u300c\u5141\u8bb8\u7684\u6e90\u300d\u5217\u8868\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u5fc5\u987b\u5305\u542b http://localhost:8080 \uff0c\u524d\u7aef\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002","title":"\u6b65\u9aa4"},{"location":"tutorial/cors/#_3","text":"\u4e5f\u53ef\u4ee5\u4f7f\u7528 \"*\" \uff08\u4e00\u4e2a\u300c\u901a\u914d\u7b26\u300d\uff09\u58f0\u660e\u8fd9\u4e2a\u5217\u8868\uff0c\u8868\u793a\u5168\u90e8\u90fd\u662f\u5141\u8bb8\u7684\u3002 \u4f46\u8fd9\u4ec5\u5141\u8bb8\u67d0\u4e9b\u7c7b\u578b\u7684\u901a\u4fe1\uff0c\u4e0d\u5305\u62ec\u6240\u6709\u6d89\u53ca\u51ed\u636e\u7684\u5185\u5bb9\uff1a\u50cf Cookies \u4ee5\u53ca\u90a3\u4e9b\u4f7f\u7528 Bearer \u4ee4\u724c\u7684\u6388\u6743 headers \u7b49\u3002 \u56e0\u6b64\uff0c\u4e3a\u4e86\u4e00\u5207\u90fd\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u6700\u597d\u663e\u5f0f\u5730\u6307\u5b9a\u5141\u8bb8\u7684\u6e90\u3002","title":"\u901a\u914d\u7b26"},{"location":"tutorial/cors/#corsmiddleware","text":"\u4f60\u53ef\u4ee5\u5728 FastAPI \u5e94\u7528\u4e2d\u4f7f\u7528 CORSMiddleware \u6765\u914d\u7f6e\u5b83\u3002 \u5bfc\u5165 CORSMiddleware \u3002 \u521b\u5efa\u4e00\u4e2a\u5141\u8bb8\u7684\u6e90\u5217\u8868\uff08\u7531\u5b57\u7b26\u4e32\u7ec4\u6210\uff09\u3002 \u5c06\u5176\u4f5c\u4e3a\u300c\u4e2d\u95f4\u4ef6\u300d\u6dfb\u52a0\u5230\u4f60\u7684 FastAPI \u5e94\u7528\u4e2d\u3002 \u4f60\u4e5f\u53ef\u4ee5\u6307\u5b9a\u540e\u7aef\u662f\u5426\u5141\u8bb8\uff1a \u51ed\u8bc1\uff08\u6388\u6743 headers\uff0cCookies \u7b49\uff09\u3002 \u7279\u5b9a\u7684 HTTP \u65b9\u6cd5\uff08 POST \uff0c PUT \uff09\u6216\u8005\u4f7f\u7528\u901a\u914d\u7b26 \"*\" \u5141\u8bb8\u6240\u6709\u65b9\u6cd5\u3002 \u7279\u5b9a\u7684 HTTP headers \u6216\u8005\u4f7f\u7528\u901a\u914d\u7b26 \"*\" \u5141\u8bb8\u6240\u6709 headers\u3002 from fastapi import FastAPI from fastapi.middleware.cors import CORSMiddleware app = FastAPI () origins = [ \"http://localhost.tiangolo.com\" , \"https://localhost.tiangolo.com\" , \"http://localhost\" , \"http://localhost:8080\" , ] app . add_middleware ( CORSMiddleware , allow_origins = origins , allow_credentials = True , allow_methods = [ \"*\" ], allow_headers = [ \"*\" ], ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a CORSMiddleware \u5b9e\u73b0\u6240\u4f7f\u7528\u7684\u9ed8\u8ba4\u53c2\u6570\u8f83\u4e3a\u4fdd\u5b88\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u663e\u5f0f\u5730\u542f\u7528\u7279\u5b9a\u7684\u6e90\u3001\u65b9\u6cd5\u6216\u8005 headers\uff0c\u4ee5\u4fbf\u6d4f\u89c8\u5668\u80fd\u591f\u5728\u8de8\u57df\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002 \u652f\u6301\u4ee5\u4e0b\u53c2\u6570\uff1a allow_origins - \u4e00\u4e2a\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u7684\u6e90\u5217\u8868\u3002\u4f8b\u5982 ['https://example.org', 'https://www.example.org'] \u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u5141\u8bb8\u4efb\u4f55\u6e90\u3002 allow_origin_regex - \u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5339\u914d\u7684\u6e90\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u3002\u4f8b\u5982 'https://.*\\.example\\.org' \u3002 allow_methods - \u4e00\u4e2a\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u7684 HTTP \u65b9\u6cd5\u5217\u8868\u3002\u9ed8\u8ba4\u4e3a ['GET'] \u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u6765\u5141\u8bb8\u6240\u6709\u6807\u51c6\u65b9\u6cd5\u3002 allow_headers - \u4e00\u4e2a\u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u7684 HTTP \u8bf7\u6c42\u5934\u5217\u8868\u3002\u9ed8\u8ba4\u4e3a [] \u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 ['*'] \u5141\u8bb8\u6240\u6709\u7684\u8bf7\u6c42\u5934\u3002 Accept \u3001 Accept-Language \u3001 Content-Language \u4ee5\u53ca Content-Type \u8bf7\u6c42\u5934\u603b\u662f\u5141\u8bb8 CORS \u8bf7\u6c42\u3002 allow_credentials - \u6307\u793a\u8de8\u57df\u8bf7\u6c42\u652f\u6301 cookies\u3002\u9ed8\u8ba4\u662f False \u3002\u53e6\u5916\uff0c\u5141\u8bb8\u51ed\u8bc1\u65f6 allow_origins \u4e0d\u80fd\u8bbe\u5b9a\u4e3a ['*'] \uff0c\u5fc5\u987b\u6307\u5b9a\u6e90\u3002 expose_headers - \u6307\u793a\u53ef\u4ee5\u88ab\u6d4f\u89c8\u5668\u8bbf\u95ee\u7684\u54cd\u5e94\u5934\u3002\u9ed8\u8ba4\u4e3a [] \u3002 max_age - \u8bbe\u5b9a\u6d4f\u89c8\u5668\u7f13\u5b58 CORS \u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4\uff0c\u5355\u4f4d\u662f\u79d2\u3002\u9ed8\u8ba4\u4e3a 600 \u3002 \u4e2d\u95f4\u4ef6\u54cd\u5e94\u4e24\u79cd\u7279\u5b9a\u7c7b\u578b\u7684 HTTP \u8bf7\u6c42\u2026\u2026","title":"\u4f7f\u7528 CORSMiddleware"},{"location":"tutorial/cors/#cors_1","text":"\u8fd9\u662f\u4e9b\u5e26\u6709 Origin \u548c Access-Control-Request-Method \u8bf7\u6c42\u5934\u7684 OPTIONS \u8bf7\u6c42\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e2d\u95f4\u4ef6\u5c06\u62e6\u622a\u4f20\u5165\u7684\u8bf7\u6c42\u5e76\u8fdb\u884c\u54cd\u5e94\uff0c\u51fa\u4e8e\u63d0\u4f9b\u4fe1\u606f\u7684\u76ee\u7684\u8fd4\u56de\u4e00\u4e2a\u4f7f\u7528\u4e86\u9002\u5f53\u7684 CORS headers \u7684 200 \u6216 400 \u54cd\u5e94\u3002","title":"CORS \u9884\u68c0\u8bf7\u6c42"},{"location":"tutorial/cors/#_4","text":"\u4efb\u4f55\u5e26\u6709 Origin \u8bf7\u6c42\u5934\u7684\u8bf7\u6c42\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e2d\u95f4\u4ef6\u5c06\u50cf\u5e73\u5e38\u4e00\u6837\u4f20\u9012\u8bf7\u6c42\uff0c\u4f46\u662f\u5728\u54cd\u5e94\u4e2d\u5305\u542b\u9002\u5f53\u7684 CORS headers\u3002","title":"\u7b80\u5355\u8bf7\u6c42"},{"location":"tutorial/cors/#_5","text":"\u66f4\u591a\u5173\u4e8e CORS \u7684\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b Mozilla CORS \u6587\u6863 \u3002 \u6280\u672f\u7ec6\u8282 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.middleware.cors import CORSMiddleware \u3002 \u51fa\u4e8e\u65b9\u4fbf\uff0c FastAPI \u5728 fastapi.middleware \u4e2d\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u51e0\u4e2a\u4e2d\u95f4\u4ef6\u3002\u4f46\u662f\u5927\u591a\u6570\u53ef\u7528\u7684\u4e2d\u95f4\u4ef6\u90fd\u662f\u76f4\u63a5\u6765\u81ea Starlette\u3002","title":"\u66f4\u591a\u4fe1\u606f"},{"location":"tutorial/debugging/","text":"\u8c03\u8bd5 \u00b6 \u4f60\u53ef\u4ee5\u5728\u7f16\u8f91\u5668\u4e2d\u8fde\u63a5\u8c03\u8bd5\u5668\uff0c\u4f8b\u5982\u4f7f\u7528 Visual Studio Code \u6216 PyCharm\u3002 \u8c03\u7528 uvicorn \u00b6 \u5728\u4f60\u7684 FastAPI \u5e94\u7528\u4e2d\u76f4\u63a5\u5bfc\u5165 uvicorn \u5e76\u8fd0\u884c\uff1a import uvicorn from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def root (): a = \"a\" b = \"b\" + a return { \"hello world\" : b } if __name__ == \"__main__\" : uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) \u5173\u4e8e __name__ == \"__main__\" \u00b6 __name__ == \"__main__\" \u7684\u4e3b\u8981\u76ee\u7684\u662f\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8c03\u7528\u6587\u4ef6\u65f6\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\uff1a $ python myapp.py \u800c\u5f53\u5176\u5b83\u6587\u4ef6\u5bfc\u5165\u5b83\u65f6\u5e76\u4e0d\u4f1a\u88ab\u8c03\u7528\uff0c\u50cf\u8fd9\u6837\uff1a from myapp import app \u66f4\u591a\u7ec6\u8282 \u00b6 \u5047\u8bbe\u4f60\u7684\u6587\u4ef6\u547d\u540d\u4e3a myapp.py \u3002 \u5982\u679c\u4f60\u8fd9\u6837\u8fd0\u884c\uff1a $ python myapp.py \u90a3\u4e48\u6587\u4ef6\u4e2d\u7531 Python \u81ea\u52a8\u521b\u5efa\u7684\u5185\u90e8\u53d8\u91cf __name__ \uff0c\u4f1a\u5c06\u5b57\u7b26\u4e32 \"__main__\" \u4f5c\u4e3a\u503c\u3002 \u6240\u4ee5\uff0c\u4e0b\u9762\u8fd9\u90e8\u5206\u4ee3\u7801\u624d\u4f1a\u8fd0\u884c\uff1a uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) \u5982\u679c\u4f60\u662f\u5bfc\u5165\u8fd9\u4e2a\u6a21\u5757\uff08\u6587\u4ef6\uff09\u5c31\u4e0d\u4f1a\u8fd9\u6837\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4f60\u7684\u53e6\u4e00\u4e2a\u6587\u4ef6 importer.py \u50cf\u8fd9\u6837\uff1a from myapp import app # Some more code \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c myapp.py \u5185\u90e8\u7684\u81ea\u52a8\u53d8\u91cf\u4e0d\u4f1a\u6709\u503c\u4e3a \"__main__\" \u7684\u53d8\u91cf __name__ \u3002 \u6240\u4ee5\uff0c\u4e0b\u9762\u8fd9\u4e00\u884c\u4e0d\u4f1a\u88ab\u6267\u884c\uff1a uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) Info \u66f4\u591a\u4fe1\u606f\u8bf7\u68c0\u67e5 Python \u5b98\u65b9\u6587\u6863 . \u4f7f\u7528\u4f60\u7684\u8c03\u8bd5\u5668\u8fd0\u884c\u4ee3\u7801 \u00b6 \u7531\u4e8e\u662f\u4ece\u4ee3\u7801\u76f4\u63a5\u8fd0\u884c\u7684 Uvicorn \u670d\u52a1\u5668\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u4ece\u8c03\u8bd5\u5668\u76f4\u63a5\u8c03\u7528 Python \u7a0b\u5e8f\uff08\u4f60\u7684 FastAPI \u5e94\u7528\uff09\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728 Visual Studio Code \u4e2d\uff1a \u8fdb\u5165\u5230\u300c\u8c03\u8bd5\u300d\u9762\u677f\u3002 \u300c\u6dfb\u52a0\u914d\u7f6e...\u300d\u3002 \u9009\u4e2d\u300cPython\u300d \u8fd0\u884c\u300cPython\uff1a\u5f53\u524d\u6587\u4ef6\uff08\u96c6\u6210\u7ec8\u7aef\uff09\u300d\u9009\u9879\u7684\u8c03\u8bd5\u5668\u3002 \u7136\u540e\u5b83\u4f1a\u4f7f\u7528\u4f60\u7684 FastAPI \u4ee3\u7801\u5f00\u542f\u670d\u52a1\u5668\uff0c\u505c\u5728\u65ad\u70b9\u5904\uff0c\u7b49\u7b49\u3002 \u770b\u8d77\u6765\u53ef\u80fd\u662f\u8fd9\u6837\uff1a \u5982\u679c\u4f7f\u7528 Pycharm\uff0c\u4f60\u53ef\u4ee5\uff1a \u6253\u5f00\u300c\u8fd0\u884c\u300d\u83dc\u5355\u3002 \u9009\u4e2d\u300c\u8c03\u8bd5...\u300d\u3002 \u7136\u540e\u51fa\u73b0\u4e00\u4e2a\u4e0a\u4e0b\u6587\u83dc\u5355\u3002 \u9009\u62e9\u8981\u8c03\u8bd5\u7684\u6587\u4ef6\uff08\u672c\u4f8b\u4e2d\u7684 main.py \uff09\u3002 \u7136\u540e\u5b83\u4f1a\u4f7f\u7528\u4f60\u7684 FastAPI \u4ee3\u7801\u5f00\u542f\u670d\u52a1\u5668\uff0c\u505c\u5728\u65ad\u70b9\u5904\uff0c\u7b49\u7b49\u3002 \u770b\u8d77\u6765\u53ef\u80fd\u662f\u8fd9\u6837\uff1a","title":"\u8c03\u8bd5"},{"location":"tutorial/debugging/#_1","text":"\u4f60\u53ef\u4ee5\u5728\u7f16\u8f91\u5668\u4e2d\u8fde\u63a5\u8c03\u8bd5\u5668\uff0c\u4f8b\u5982\u4f7f\u7528 Visual Studio Code \u6216 PyCharm\u3002","title":"\u8c03\u8bd5"},{"location":"tutorial/debugging/#uvicorn","text":"\u5728\u4f60\u7684 FastAPI \u5e94\u7528\u4e2d\u76f4\u63a5\u5bfc\u5165 uvicorn \u5e76\u8fd0\u884c\uff1a import uvicorn from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def root (): a = \"a\" b = \"b\" + a return { \"hello world\" : b } if __name__ == \"__main__\" : uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 )","title":"\u8c03\u7528 uvicorn"},{"location":"tutorial/debugging/#__name__-__main__","text":"__name__ == \"__main__\" \u7684\u4e3b\u8981\u76ee\u7684\u662f\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u8c03\u7528\u6587\u4ef6\u65f6\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\uff1a $ python myapp.py \u800c\u5f53\u5176\u5b83\u6587\u4ef6\u5bfc\u5165\u5b83\u65f6\u5e76\u4e0d\u4f1a\u88ab\u8c03\u7528\uff0c\u50cf\u8fd9\u6837\uff1a from myapp import app","title":"\u5173\u4e8e __name__ == \"__main__\""},{"location":"tutorial/debugging/#_2","text":"\u5047\u8bbe\u4f60\u7684\u6587\u4ef6\u547d\u540d\u4e3a myapp.py \u3002 \u5982\u679c\u4f60\u8fd9\u6837\u8fd0\u884c\uff1a $ python myapp.py \u90a3\u4e48\u6587\u4ef6\u4e2d\u7531 Python \u81ea\u52a8\u521b\u5efa\u7684\u5185\u90e8\u53d8\u91cf __name__ \uff0c\u4f1a\u5c06\u5b57\u7b26\u4e32 \"__main__\" \u4f5c\u4e3a\u503c\u3002 \u6240\u4ee5\uff0c\u4e0b\u9762\u8fd9\u90e8\u5206\u4ee3\u7801\u624d\u4f1a\u8fd0\u884c\uff1a uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) \u5982\u679c\u4f60\u662f\u5bfc\u5165\u8fd9\u4e2a\u6a21\u5757\uff08\u6587\u4ef6\uff09\u5c31\u4e0d\u4f1a\u8fd9\u6837\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4f60\u7684\u53e6\u4e00\u4e2a\u6587\u4ef6 importer.py \u50cf\u8fd9\u6837\uff1a from myapp import app # Some more code \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c myapp.py \u5185\u90e8\u7684\u81ea\u52a8\u53d8\u91cf\u4e0d\u4f1a\u6709\u503c\u4e3a \"__main__\" \u7684\u53d8\u91cf __name__ \u3002 \u6240\u4ee5\uff0c\u4e0b\u9762\u8fd9\u4e00\u884c\u4e0d\u4f1a\u88ab\u6267\u884c\uff1a uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) Info \u66f4\u591a\u4fe1\u606f\u8bf7\u68c0\u67e5 Python \u5b98\u65b9\u6587\u6863 .","title":"\u66f4\u591a\u7ec6\u8282"},{"location":"tutorial/debugging/#_3","text":"\u7531\u4e8e\u662f\u4ece\u4ee3\u7801\u76f4\u63a5\u8fd0\u884c\u7684 Uvicorn \u670d\u52a1\u5668\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u4ece\u8c03\u8bd5\u5668\u76f4\u63a5\u8c03\u7528 Python \u7a0b\u5e8f\uff08\u4f60\u7684 FastAPI \u5e94\u7528\uff09\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5728 Visual Studio Code \u4e2d\uff1a \u8fdb\u5165\u5230\u300c\u8c03\u8bd5\u300d\u9762\u677f\u3002 \u300c\u6dfb\u52a0\u914d\u7f6e...\u300d\u3002 \u9009\u4e2d\u300cPython\u300d \u8fd0\u884c\u300cPython\uff1a\u5f53\u524d\u6587\u4ef6\uff08\u96c6\u6210\u7ec8\u7aef\uff09\u300d\u9009\u9879\u7684\u8c03\u8bd5\u5668\u3002 \u7136\u540e\u5b83\u4f1a\u4f7f\u7528\u4f60\u7684 FastAPI \u4ee3\u7801\u5f00\u542f\u670d\u52a1\u5668\uff0c\u505c\u5728\u65ad\u70b9\u5904\uff0c\u7b49\u7b49\u3002 \u770b\u8d77\u6765\u53ef\u80fd\u662f\u8fd9\u6837\uff1a \u5982\u679c\u4f7f\u7528 Pycharm\uff0c\u4f60\u53ef\u4ee5\uff1a \u6253\u5f00\u300c\u8fd0\u884c\u300d\u83dc\u5355\u3002 \u9009\u4e2d\u300c\u8c03\u8bd5...\u300d\u3002 \u7136\u540e\u51fa\u73b0\u4e00\u4e2a\u4e0a\u4e0b\u6587\u83dc\u5355\u3002 \u9009\u62e9\u8981\u8c03\u8bd5\u7684\u6587\u4ef6\uff08\u672c\u4f8b\u4e2d\u7684 main.py \uff09\u3002 \u7136\u540e\u5b83\u4f1a\u4f7f\u7528\u4f60\u7684 FastAPI \u4ee3\u7801\u5f00\u542f\u670d\u52a1\u5668\uff0c\u505c\u5728\u65ad\u70b9\u5904\uff0c\u7b49\u7b49\u3002 \u770b\u8d77\u6765\u53ef\u80fd\u662f\u8fd9\u6837\uff1a","title":"\u4f7f\u7528\u4f60\u7684\u8c03\u8bd5\u5668\u8fd0\u884c\u4ee3\u7801"},{"location":"tutorial/encoder/","text":"JSON Compatible Encoder \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . There are some cases where you might need to convert a data type (like a Pydantic model) to something compatible with JSON (like a dict , list , etc). For example, if you need to store it in a database. For that, FastAPI provides a jsonable_encoder() function. Using the jsonable_encoder \u00b6 Let's imagine that you have a database fake_db that only receives JSON compatible data. For example, it doesn't receive datetime objects, as those are not compatible with JSON. So, a datetime object would have to be converted to a str containing the data in ISO format . The same way, this database wouldn't receive a Pydantic model (an object with attributes), only a dict . You can use jsonable_encoder for that. It receives an object, like a Pydantic model, and returns a JSON compatible version: Python 3.6 and above Python 3.10 and above from datetime import datetime from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel fake_db = {} class Item ( BaseModel ): title : str timestamp : datetime description : Union [ str , None ] = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) fake_db [ id ] = json_compatible_item_data from datetime import datetime from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel fake_db = {} class Item ( BaseModel ): title : str timestamp : datetime description : str | None = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) fake_db [ id ] = json_compatible_item_data In this example, it would convert the Pydantic model to a dict , and the datetime to a str . The result of calling it is something that can be encoded with the Python standard json.dumps() . It doesn't return a large str containing the data in JSON format (as a string). It returns a Python standard data structure (e.g. a dict ) with values and sub-values that are all compatible with JSON. Note jsonable_encoder is actually used by FastAPI internally to convert data. But it is useful in many other scenarios.","title":"JSON Compatible Encoder"},{"location":"tutorial/encoder/#json-compatible-encoder","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . There are some cases where you might need to convert a data type (like a Pydantic model) to something compatible with JSON (like a dict , list , etc). For example, if you need to store it in a database. For that, FastAPI provides a jsonable_encoder() function.","title":"JSON Compatible Encoder"},{"location":"tutorial/encoder/#using-the-jsonable_encoder","text":"Let's imagine that you have a database fake_db that only receives JSON compatible data. For example, it doesn't receive datetime objects, as those are not compatible with JSON. So, a datetime object would have to be converted to a str containing the data in ISO format . The same way, this database wouldn't receive a Pydantic model (an object with attributes), only a dict . You can use jsonable_encoder for that. It receives an object, like a Pydantic model, and returns a JSON compatible version: Python 3.6 and above Python 3.10 and above from datetime import datetime from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel fake_db = {} class Item ( BaseModel ): title : str timestamp : datetime description : Union [ str , None ] = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) fake_db [ id ] = json_compatible_item_data from datetime import datetime from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel fake_db = {} class Item ( BaseModel ): title : str timestamp : datetime description : str | None = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) fake_db [ id ] = json_compatible_item_data In this example, it would convert the Pydantic model to a dict , and the datetime to a str . The result of calling it is something that can be encoded with the Python standard json.dumps() . It doesn't return a large str containing the data in JSON format (as a string). It returns a Python standard data structure (e.g. a dict ) with values and sub-values that are all compatible with JSON. Note jsonable_encoder is actually used by FastAPI internally to convert data. But it is useful in many other scenarios.","title":"Using the jsonable_encoder"},{"location":"tutorial/extra-data-types/","text":"\u989d\u5916\u6570\u636e\u7c7b\u578b \u00b6 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u60a8\u4e00\u76f4\u5728\u4f7f\u7528\u5e38\u89c1\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982: int float str bool \u4f46\u662f\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u66f4\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b\u3002 \u60a8\u4ecd\u7136\u4f1a\u62e5\u6709\u73b0\u5728\u5df2\u7ecf\u770b\u5230\u7684\u76f8\u540c\u7684\u7279\u6027: \u5f88\u68d2\u7684\u7f16\u8f91\u5668\u652f\u6301\u3002 \u4f20\u5165\u8bf7\u6c42\u7684\u6570\u636e\u8f6c\u6362\u3002 \u54cd\u5e94\u6570\u636e\u8f6c\u6362\u3002 \u6570\u636e\u9a8c\u8bc1\u3002 \u81ea\u52a8\u8865\u5168\u548c\u6587\u6863\u3002 \u5176\u4ed6\u6570\u636e\u7c7b\u578b \u00b6 \u4e0b\u9762\u662f\u4e00\u4e9b\u4f60\u53ef\u4ee5\u4f7f\u7528\u7684\u5176\u4ed6\u6570\u636e\u7c7b\u578b: UUID : \u4e00\u79cd\u6807\u51c6\u7684 \"\u901a\u7528\u552f\u4e00\u6807\u8bc6\u7b26\" \uff0c\u5728\u8bb8\u591a\u6570\u636e\u5e93\u548c\u7cfb\u7edf\u4e2d\u7528\u4f5cID\u3002 \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u5c06\u4ee5 str \u8868\u793a\u3002 datetime.datetime : \u4e00\u4e2a Python datetime.datetime . \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u5c06\u8868\u793a\u4e3a ISO 8601 \u683c\u5f0f\u7684 str \uff0c\u6bd4\u5982: 2008-09-15T15:53:00+05:00 . datetime.date : Python datetime.date . \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u5c06\u8868\u793a\u4e3a ISO 8601 \u683c\u5f0f\u7684 str \uff0c\u6bd4\u5982: 2008-09-15 . datetime.time : \u4e00\u4e2a Python datetime.time . \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u5c06\u8868\u793a\u4e3a ISO 8601 \u683c\u5f0f\u7684 str \uff0c\u6bd4\u5982: 14:23:55.003 . datetime.timedelta : \u4e00\u4e2a Python datetime.timedelta . \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u5c06\u8868\u793a\u4e3a float \u4ee3\u8868\u603b\u79d2\u6570\u3002 Pydantic \u4e5f\u5141\u8bb8\u5c06\u5176\u8868\u793a\u4e3a \"ISO 8601 \u65f6\u95f4\u5dee\u5f02\u7f16\u7801\", \u67e5\u770b\u6587\u6863\u4e86\u89e3\u66f4\u591a\u4fe1\u606f \u3002 frozenset : \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\uff0c\u4f5c\u4e3a set \u5bf9\u5f85\uff1a \u5728\u8bf7\u6c42\u4e2d\uff0c\u5217\u8868\u5c06\u88ab\u8bfb\u53d6\uff0c\u6d88\u9664\u91cd\u590d\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a set \u3002 \u5728\u54cd\u5e94\u4e2d set \u5c06\u88ab\u8f6c\u6362\u4e3a list \u3002 \u4ea7\u751f\u7684\u6a21\u5f0f\u5c06\u6307\u5b9a\u90a3\u4e9b set \u7684\u503c\u662f\u552f\u4e00\u7684 (\u4f7f\u7528 JSON \u6a21\u5f0f\u7684 uniqueItems )\u3002 bytes : \u6807\u51c6\u7684 Python bytes \u3002 \u5728\u8bf7\u6c42\u548c\u76f8\u5e94\u4e2d\u88ab\u5f53\u4f5c str \u5904\u7406\u3002 \u751f\u6210\u7684\u6a21\u5f0f\u5c06\u6307\u5b9a\u8fd9\u4e2a str \u662f binary \"\u683c\u5f0f\"\u3002 Decimal : \u6807\u51c6\u7684 Python Decimal \u3002 \u5728\u8bf7\u6c42\u548c\u76f8\u5e94\u4e2d\u88ab\u5f53\u505a float \u4e00\u6837\u5904\u7406\u3002 \u60a8\u53ef\u4ee5\u5728\u8fd9\u91cc\u68c0\u67e5\u6240\u6709\u6709\u6548\u7684pydantic\u6570\u636e\u7c7b\u578b: Pydantic data types . \u4f8b\u5b50 \u00b6 \u4e0b\u9762\u662f\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u7684\u793a\u4f8b\uff0c\u5176\u4e2d\u7684\u53c2\u6570\u4f7f\u7528\u4e86\u4e0a\u9762\u7684\u4e00\u4e9b\u7c7b\u578b\u3002 from datetime import datetime , time , timedelta from typing import Union from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : Union [ datetime , None ] = Body ( default = None ), end_datetime : Union [ datetime , None ] = Body ( default = None ), repeat_at : Union [ time , None ] = Body ( default = None ), process_after : Union [ timedelta , None ] = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , } \u6ce8\u610f\uff0c\u51fd\u6570\u5185\u7684\u53c2\u6570\u6709\u539f\u751f\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\uff0c\u4f8b\u5982\uff0c\u6267\u884c\u6b63\u5e38\u7684\u65e5\u671f\u64cd\u4f5c\uff0c\u5982: from datetime import datetime , time , timedelta from typing import Union from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : Union [ datetime , None ] = Body ( default = None ), end_datetime : Union [ datetime , None ] = Body ( default = None ), repeat_at : Union [ time , None ] = Body ( default = None ), process_after : Union [ timedelta , None ] = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , }","title":"\u989d\u5916\u6570\u636e\u7c7b\u578b"},{"location":"tutorial/extra-data-types/#_1","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u60a8\u4e00\u76f4\u5728\u4f7f\u7528\u5e38\u89c1\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982: int float str bool \u4f46\u662f\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u66f4\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b\u3002 \u60a8\u4ecd\u7136\u4f1a\u62e5\u6709\u73b0\u5728\u5df2\u7ecf\u770b\u5230\u7684\u76f8\u540c\u7684\u7279\u6027: \u5f88\u68d2\u7684\u7f16\u8f91\u5668\u652f\u6301\u3002 \u4f20\u5165\u8bf7\u6c42\u7684\u6570\u636e\u8f6c\u6362\u3002 \u54cd\u5e94\u6570\u636e\u8f6c\u6362\u3002 \u6570\u636e\u9a8c\u8bc1\u3002 \u81ea\u52a8\u8865\u5168\u548c\u6587\u6863\u3002","title":"\u989d\u5916\u6570\u636e\u7c7b\u578b"},{"location":"tutorial/extra-data-types/#_2","text":"\u4e0b\u9762\u662f\u4e00\u4e9b\u4f60\u53ef\u4ee5\u4f7f\u7528\u7684\u5176\u4ed6\u6570\u636e\u7c7b\u578b: UUID : \u4e00\u79cd\u6807\u51c6\u7684 \"\u901a\u7528\u552f\u4e00\u6807\u8bc6\u7b26\" \uff0c\u5728\u8bb8\u591a\u6570\u636e\u5e93\u548c\u7cfb\u7edf\u4e2d\u7528\u4f5cID\u3002 \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u5c06\u4ee5 str \u8868\u793a\u3002 datetime.datetime : \u4e00\u4e2a Python datetime.datetime . \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u5c06\u8868\u793a\u4e3a ISO 8601 \u683c\u5f0f\u7684 str \uff0c\u6bd4\u5982: 2008-09-15T15:53:00+05:00 . datetime.date : Python datetime.date . \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u5c06\u8868\u793a\u4e3a ISO 8601 \u683c\u5f0f\u7684 str \uff0c\u6bd4\u5982: 2008-09-15 . datetime.time : \u4e00\u4e2a Python datetime.time . \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u5c06\u8868\u793a\u4e3a ISO 8601 \u683c\u5f0f\u7684 str \uff0c\u6bd4\u5982: 14:23:55.003 . datetime.timedelta : \u4e00\u4e2a Python datetime.timedelta . \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u5c06\u8868\u793a\u4e3a float \u4ee3\u8868\u603b\u79d2\u6570\u3002 Pydantic \u4e5f\u5141\u8bb8\u5c06\u5176\u8868\u793a\u4e3a \"ISO 8601 \u65f6\u95f4\u5dee\u5f02\u7f16\u7801\", \u67e5\u770b\u6587\u6863\u4e86\u89e3\u66f4\u591a\u4fe1\u606f \u3002 frozenset : \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\uff0c\u4f5c\u4e3a set \u5bf9\u5f85\uff1a \u5728\u8bf7\u6c42\u4e2d\uff0c\u5217\u8868\u5c06\u88ab\u8bfb\u53d6\uff0c\u6d88\u9664\u91cd\u590d\uff0c\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a set \u3002 \u5728\u54cd\u5e94\u4e2d set \u5c06\u88ab\u8f6c\u6362\u4e3a list \u3002 \u4ea7\u751f\u7684\u6a21\u5f0f\u5c06\u6307\u5b9a\u90a3\u4e9b set \u7684\u503c\u662f\u552f\u4e00\u7684 (\u4f7f\u7528 JSON \u6a21\u5f0f\u7684 uniqueItems )\u3002 bytes : \u6807\u51c6\u7684 Python bytes \u3002 \u5728\u8bf7\u6c42\u548c\u76f8\u5e94\u4e2d\u88ab\u5f53\u4f5c str \u5904\u7406\u3002 \u751f\u6210\u7684\u6a21\u5f0f\u5c06\u6307\u5b9a\u8fd9\u4e2a str \u662f binary \"\u683c\u5f0f\"\u3002 Decimal : \u6807\u51c6\u7684 Python Decimal \u3002 \u5728\u8bf7\u6c42\u548c\u76f8\u5e94\u4e2d\u88ab\u5f53\u505a float \u4e00\u6837\u5904\u7406\u3002 \u60a8\u53ef\u4ee5\u5728\u8fd9\u91cc\u68c0\u67e5\u6240\u6709\u6709\u6548\u7684pydantic\u6570\u636e\u7c7b\u578b: Pydantic data types .","title":"\u5176\u4ed6\u6570\u636e\u7c7b\u578b"},{"location":"tutorial/extra-data-types/#_3","text":"\u4e0b\u9762\u662f\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u7684\u793a\u4f8b\uff0c\u5176\u4e2d\u7684\u53c2\u6570\u4f7f\u7528\u4e86\u4e0a\u9762\u7684\u4e00\u4e9b\u7c7b\u578b\u3002 from datetime import datetime , time , timedelta from typing import Union from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : Union [ datetime , None ] = Body ( default = None ), end_datetime : Union [ datetime , None ] = Body ( default = None ), repeat_at : Union [ time , None ] = Body ( default = None ), process_after : Union [ timedelta , None ] = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , } \u6ce8\u610f\uff0c\u51fd\u6570\u5185\u7684\u53c2\u6570\u6709\u539f\u751f\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\uff0c\u4f8b\u5982\uff0c\u6267\u884c\u6b63\u5e38\u7684\u65e5\u671f\u64cd\u4f5c\uff0c\u5982: from datetime import datetime , time , timedelta from typing import Union from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : Union [ datetime , None ] = Body ( default = None ), end_datetime : Union [ datetime , None ] = Body ( default = None ), repeat_at : Union [ time , None ] = Body ( default = None ), process_after : Union [ timedelta , None ] = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , }","title":"\u4f8b\u5b50"},{"location":"tutorial/extra-models/","text":"\u989d\u5916\u7684\u6a21\u578b \u00b6 \u6211\u4eec\u4ece\u524d\u9762\u7684\u793a\u4f8b\u7ee7\u7eed\uff0c\u62e5\u6709\u591a\u4e2a\u76f8\u5173\u7684\u6a21\u578b\u662f\u5f88\u5e38\u89c1\u7684\u3002 \u5bf9\u7528\u6237\u6a21\u578b\u6765\u8bf4\u5c24\u5176\u5982\u6b64\uff0c\u56e0\u4e3a\uff1a \u8f93\u5165\u6a21\u578b \u9700\u8981\u62e5\u6709\u5bc6\u7801\u5c5e\u6027\u3002 \u8f93\u51fa\u6a21\u578b \u4e0d\u5e94\u8be5\u5305\u542b\u5bc6\u7801\u3002 \u6570\u636e\u5e93\u6a21\u578b \u5f88\u53ef\u80fd\u9700\u8981\u4fdd\u5b58\u5bc6\u7801\u7684\u54c8\u5e0c\u503c\u3002 Danger \u6c38\u8fdc\u4e0d\u8981\u5b58\u50a8\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\u3002\u59cb\u7ec8\u5b58\u50a8\u4e00\u4e2a\u53ef\u4ee5\u7528\u4e8e\u9a8c\u8bc1\u7684\u300c\u5b89\u5168\u54c8\u5e0c\u503c\u300d\u3002 \u5982\u679c\u4f60\u5c1a\u672a\u4e86\u89e3\u8be5\u77e5\u8bc6\uff0c\u4f60\u53ef\u4ee5\u5728 \u5b89\u5168\u7ae0\u8282 \u4e2d\u5b66\u4e60\u4f55\u4e3a\u300c\u5bc6\u7801\u54c8\u5e0c\u503c\u300d\u3002 \u591a\u4e2a\u6a21\u578b \u00b6 \u4e0b\u9762\u662f\u5e94\u8be5\u5982\u4f55\u6839\u636e\u5b83\u4eec\u7684\u5bc6\u7801\u5b57\u6bb5\u4ee5\u53ca\u4f7f\u7528\u4f4d\u7f6e\u53bb\u5b9a\u4e49\u6a21\u578b\u7684\u5927\u6982\u601d\u8def\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None class UserInDB ( BaseModel ): username : str hashed_password : str email : EmailStr full_name : Union [ str , None ] = None def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved \u5173\u4e8e **user_in.dict() \u00b6 Pydantic \u7684 .dict() \u00b6 user_in \u662f\u4e00\u4e2a UserIn \u7c7b\u7684 Pydantic \u6a21\u578b. Pydantic \u6a21\u578b\u5177\u6709 .dict\uff08\uff09 \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u62e5\u6709\u6a21\u578b\u6570\u636e\u7684 dict \u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u50cf\u4e0b\u9762\u8fd9\u6837\u521b\u5efa\u4e00\u4e2a Pydantic \u5bf9\u8c61 user_in \uff1a user_in = UserIn ( username = \"john\" , password = \"secret\" , email = \"john.doe@example.com\" ) \u7136\u540e\u6211\u4eec\u8c03\u7528\uff1a user_dict = user_in . dict () \u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u6570\u636e\u4f4d\u4e8e\u53d8\u91cf user_dict \u4e2d\u7684 dict \uff08\u5b83\u662f\u4e00\u4e2a dict \u800c\u4e0d\u662f Pydantic \u6a21\u578b\u5bf9\u8c61\uff09\u3002 \u5982\u679c\u6211\u4eec\u8c03\u7528\uff1a print ( user_dict ) \u6211\u4eec\u5c06\u83b7\u5f97\u4e00\u4e2a\u8fd9\u6837\u7684 Python dict \uff1a { 'username' : 'john' , 'password' : 'secret' , 'email' : 'john.doe@example.com' , 'full_name' : None , } \u89e3\u5305 dict \u00b6 \u5982\u679c\u6211\u4eec\u5c06 user_dict \u8fd9\u6837\u7684 dict \u4ee5 **user_dict \u5f62\u5f0f\u4f20\u9012\u7ed9\u4e00\u4e2a\u51fd\u6570\uff08\u6216\u7c7b\uff09\uff0cPython\u5c06\u5bf9\u5176\u8fdb\u884c\u300c\u89e3\u5305\u300d\u3002\u5b83\u4f1a\u5c06 user_dict \u7684\u952e\u548c\u503c\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u76f4\u63a5\u4f20\u9012\u3002 \u56e0\u6b64\uff0c\u4ece\u4e0a\u9762\u7684 user_dict \u7ee7\u7eed\uff0c\u7f16\u5199\uff1a UserInDB ( ** user_dict ) \u4f1a\u4ea7\u751f\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u7684\u7ed3\u679c\uff1a UserInDB ( username = \"john\" , password = \"secret\" , email = \"john.doe@example.com\" , full_name = None , ) \u6216\u8005\u66f4\u786e\u5207\u5730\uff0c\u76f4\u63a5\u4f7f\u7528 user_dict \u6765\u8868\u793a\u5c06\u6765\u53ef\u80fd\u5305\u542b\u7684\u4efb\u4f55\u5185\u5bb9\uff1a UserInDB ( username = user_dict [ \"username\" ], password = user_dict [ \"password\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], ) \u6765\u81ea\u4e8e\u5176\u4ed6\u6a21\u578b\u5185\u5bb9\u7684 Pydantic \u6a21\u578b \u00b6 \u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u6211\u4eec\u4ece user_in.dict\uff08\uff09 \u4e2d\u83b7\u5f97\u4e86 user_dict \uff0c\u6b64\u4ee3\u7801\uff1a user_dict = user_in . dict () UserInDB ( ** user_dict ) \u7b49\u540c\u4e8e\uff1a UserInDB ( ** user_in . dict ()) ...\u56e0\u4e3a user_in.dict() \u662f\u4e00\u4e2a dict \uff0c\u7136\u540e\u6211\u4eec\u901a\u8fc7\u4ee5 ** \u5f00\u5934\u4f20\u9012\u7ed9 UserInDB \u6765\u4f7f Python\u300c\u89e3\u5305\u300d\u5b83\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u4e00\u4e2a\u6765\u81ea\u4e8e\u5176\u4ed6 Pydantic \u6a21\u578b\u4e2d\u7684\u6570\u636e\u7684 Pydantic \u6a21\u578b\u3002 \u89e3\u5305 dict \u548c\u989d\u5916\u5173\u952e\u5b57 \u00b6 \u7136\u540e\u6dfb\u52a0\u989d\u5916\u7684\u5173\u952e\u5b57\u53c2\u6570 hashed_password=hashed_password \uff0c\u4f8b\u5982\uff1a UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) ...\u6700\u7ec8\u7684\u7ed3\u679c\u5982\u4e0b\uff1a UserInDB ( username = user_dict [ \"username\" ], password = user_dict [ \"password\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], hashed_password = hashed_password , ) Warning \u8f85\u52a9\u6027\u7684\u989d\u5916\u51fd\u6570\u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u53ef\u80fd\u7684\u6570\u636e\u6d41\uff0c\u4f46\u5b83\u4eec\u663e\u7136\u4e0d\u80fd\u63d0\u4f9b\u4efb\u4f55\u771f\u6b63\u7684\u5b89\u5168\u6027\u3002 \u51cf\u5c11\u91cd\u590d \u00b6 \u51cf\u5c11\u4ee3\u7801\u91cd\u590d\u662f FastAPI \u7684\u6838\u5fc3\u601d\u60f3\u4e4b\u4e00\u3002 \u56e0\u4e3a\u4ee3\u7801\u91cd\u590d\u4f1a\u589e\u52a0\u51fa\u73b0 bug\u3001\u5b89\u5168\u6027\u95ee\u9898\u3001\u4ee3\u7801\u5931\u6b65\u95ee\u9898\uff08\u5f53\u4f60\u5728\u4e00\u4e2a\u4f4d\u7f6e\u66f4\u65b0\u4e86\u4ee3\u7801\u4f46\u6ca1\u6709\u5728\u5176\u4ed6\u4f4d\u7f6e\u66f4\u65b0\uff09\u7b49\u7684\u53ef\u80fd\u6027\u3002 \u4e0a\u9762\u7684\u8fd9\u4e9b\u6a21\u578b\u90fd\u5171\u4eab\u4e86\u5927\u91cf\u6570\u636e\uff0c\u5e76\u62e5\u6709\u91cd\u590d\u7684\u5c5e\u6027\u540d\u79f0\u548c\u7c7b\u578b\u3002 \u6211\u4eec\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002 \u6211\u4eec\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a UserBase \u6a21\u578b\u4f5c\u4e3a\u5176\u4ed6\u6a21\u578b\u7684\u57fa\u7c7b\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u7ee7\u627f\u8be5\u6a21\u578b\u5c5e\u6027\uff08\u7c7b\u578b\u58f0\u660e\uff0c\u6821\u9a8c\u7b49\uff09\u7684\u5b50\u7c7b\u3002 \u6240\u6709\u7684\u6570\u636e\u8f6c\u6362\u3001\u6821\u9a8c\u3001\u6587\u6863\u751f\u6210\u7b49\u4ecd\u5c06\u6b63\u5e38\u8fd0\u884c\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u4ec5\u58f0\u660e\u6a21\u578b\u4e4b\u95f4\u7684\u5dee\u5f02\u90e8\u5206\uff08\u5177\u6709\u660e\u6587\u7684 password \u3001\u5177\u6709 hashed_password \u4ee5\u53ca\u4e0d\u5305\u62ec\u5bc6\u7801\uff09\u3002 from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserBase ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None class UserIn ( UserBase ): password : str class UserOut ( UserBase ): pass class UserInDB ( UserBase ): hashed_password : str def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved Union \u6216\u8005 anyOf \u00b6 \u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u54cd\u5e94\u58f0\u660e\u4e3a\u4e24\u79cd\u7c7b\u578b\u7684 Union \uff0c\u8fd9\u610f\u5473\u7740\u8be5\u54cd\u5e94\u5c06\u662f\u4e24\u79cd\u7c7b\u578b\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u3002 \u8fd9\u5c06\u5728 OpenAPI \u4e2d\u4f7f\u7528 anyOf \u8fdb\u884c\u5b9a\u4e49\u3002 \u4e3a\u6b64\uff0c\u8bf7\u4f7f\u7528\u6807\u51c6\u7684 Python \u7c7b\u578b\u63d0\u793a typing.Union \uff1a Note \u5b9a\u4e49\u4e00\u4e2a Union \u7c7b\u578b\u65f6\uff0c\u9996\u5148\u5305\u62ec\u6700\u8be6\u7ec6\u7684\u7c7b\u578b\uff0c\u7136\u540e\u662f\u4e0d\u592a\u8be6\u7ec6\u7684\u7c7b\u578b\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u66f4\u8be6\u7ec6\u7684 PlaneItem \u4f4d\u4e8e Union[PlaneItem\uff0cCarItem] \u4e2d\u7684 CarItem \u4e4b\u524d\u3002 from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class BaseItem ( BaseModel ): description : str type : str class CarItem ( BaseItem ): type = \"car\" class PlaneItem ( BaseItem ): type = \"plane\" size : int items = { \"item1\" : { \"description\" : \"All my friends drive a low rider\" , \"type\" : \"car\" }, \"item2\" : { \"description\" : \"Music is my aeroplane, it's my aeroplane\" , \"type\" : \"plane\" , \"size\" : 5 , }, } @app . get ( \"/items/ {item_id} \" , response_model = Union [ PlaneItem , CarItem ]) async def read_item ( item_id : str ): return items [ item_id ] \u6a21\u578b\u5217\u8868 \u00b6 \u4f60\u53ef\u4ee5\u7528\u540c\u6837\u7684\u65b9\u5f0f\u58f0\u660e\u7531\u5bf9\u8c61\u5217\u8868\u6784\u6210\u7684\u54cd\u5e94\u3002 \u4e3a\u6b64\uff0c\u8bf7\u4f7f\u7528\u6807\u51c6\u7684 Python typing.List \uff1a from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str items = [ { \"name\" : \"Foo\" , \"description\" : \"There comes my hero\" }, { \"name\" : \"Red\" , \"description\" : \"It's my aeroplane\" }, ] @app . get ( \"/items/\" , response_model = List [ Item ]) async def read_items (): return items \u4efb\u610f dict \u6784\u6210\u7684\u54cd\u5e94 \u00b6 \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u4efb\u610f\u7684\u666e\u901a dict \u58f0\u660e\u54cd\u5e94\uff0c\u4ec5\u58f0\u660e\u952e\u548c\u503c\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u4f7f\u7528 Pydantic \u6a21\u578b\u3002 \u5982\u679c\u4f60\u4e8b\u5148\u4e0d\u77e5\u9053\u6709\u6548\u7684\u5b57\u6bb5/\u5c5e\u6027\u540d\u79f0\uff08\u5bf9\u4e8e Pydantic \u6a21\u578b\u662f\u5fc5\u9700\u7684\uff09\uff0c\u8fd9\u5c06\u5f88\u6709\u7528\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 typing.Dict \uff1a from typing import Dict from fastapi import FastAPI app = FastAPI () @app . get ( \"/keyword-weights/\" , response_model = Dict [ str , float ]) async def read_keyword_weights (): return { \"foo\" : 2.3 , \"bar\" : 3.4 } \u603b\u7ed3 \u00b6 \u4f7f\u7528\u591a\u4e2a Pydantic \u6a21\u578b\uff0c\u5e76\u9488\u5bf9\u4e0d\u540c\u573a\u666f\u81ea\u7531\u5730\u7ee7\u627f\u3002 \u5982\u679c\u4e00\u4e2a\u5b9e\u4f53\u5fc5\u987b\u80fd\u591f\u5177\u6709\u4e0d\u540c\u7684\u300c\u72b6\u6001\u300d\uff0c\u4f60\u65e0\u9700\u4e3a\u6bcf\u4e2a\u72b6\u6001\u7684\u5b9e\u4f53\u5b9a\u4e49\u5355\u72ec\u7684\u6570\u636e\u6a21\u578b\u3002\u4ee5\u7528\u6237\u300c\u5b9e\u4f53\u300d\u4e3a\u4f8b\uff0c\u5176\u72b6\u6001\u6709\u5305\u542b password \u3001\u5305\u542b password_hash \u4ee5\u53ca\u4e0d\u542b\u5bc6\u7801\u3002","title":"\u989d\u5916\u7684\u6a21\u578b"},{"location":"tutorial/extra-models/#_1","text":"\u6211\u4eec\u4ece\u524d\u9762\u7684\u793a\u4f8b\u7ee7\u7eed\uff0c\u62e5\u6709\u591a\u4e2a\u76f8\u5173\u7684\u6a21\u578b\u662f\u5f88\u5e38\u89c1\u7684\u3002 \u5bf9\u7528\u6237\u6a21\u578b\u6765\u8bf4\u5c24\u5176\u5982\u6b64\uff0c\u56e0\u4e3a\uff1a \u8f93\u5165\u6a21\u578b \u9700\u8981\u62e5\u6709\u5bc6\u7801\u5c5e\u6027\u3002 \u8f93\u51fa\u6a21\u578b \u4e0d\u5e94\u8be5\u5305\u542b\u5bc6\u7801\u3002 \u6570\u636e\u5e93\u6a21\u578b \u5f88\u53ef\u80fd\u9700\u8981\u4fdd\u5b58\u5bc6\u7801\u7684\u54c8\u5e0c\u503c\u3002 Danger \u6c38\u8fdc\u4e0d\u8981\u5b58\u50a8\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\u3002\u59cb\u7ec8\u5b58\u50a8\u4e00\u4e2a\u53ef\u4ee5\u7528\u4e8e\u9a8c\u8bc1\u7684\u300c\u5b89\u5168\u54c8\u5e0c\u503c\u300d\u3002 \u5982\u679c\u4f60\u5c1a\u672a\u4e86\u89e3\u8be5\u77e5\u8bc6\uff0c\u4f60\u53ef\u4ee5\u5728 \u5b89\u5168\u7ae0\u8282 \u4e2d\u5b66\u4e60\u4f55\u4e3a\u300c\u5bc6\u7801\u54c8\u5e0c\u503c\u300d\u3002","title":"\u989d\u5916\u7684\u6a21\u578b"},{"location":"tutorial/extra-models/#_2","text":"\u4e0b\u9762\u662f\u5e94\u8be5\u5982\u4f55\u6839\u636e\u5b83\u4eec\u7684\u5bc6\u7801\u5b57\u6bb5\u4ee5\u53ca\u4f7f\u7528\u4f4d\u7f6e\u53bb\u5b9a\u4e49\u6a21\u578b\u7684\u5927\u6982\u601d\u8def\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None class UserInDB ( BaseModel ): username : str hashed_password : str email : EmailStr full_name : Union [ str , None ] = None def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved","title":"\u591a\u4e2a\u6a21\u578b"},{"location":"tutorial/extra-models/#user_indict","text":"","title":"\u5173\u4e8e **user_in.dict()"},{"location":"tutorial/extra-models/#pydantic-dict","text":"user_in \u662f\u4e00\u4e2a UserIn \u7c7b\u7684 Pydantic \u6a21\u578b. Pydantic \u6a21\u578b\u5177\u6709 .dict\uff08\uff09 \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u62e5\u6709\u6a21\u578b\u6570\u636e\u7684 dict \u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u50cf\u4e0b\u9762\u8fd9\u6837\u521b\u5efa\u4e00\u4e2a Pydantic \u5bf9\u8c61 user_in \uff1a user_in = UserIn ( username = \"john\" , password = \"secret\" , email = \"john.doe@example.com\" ) \u7136\u540e\u6211\u4eec\u8c03\u7528\uff1a user_dict = user_in . dict () \u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u6570\u636e\u4f4d\u4e8e\u53d8\u91cf user_dict \u4e2d\u7684 dict \uff08\u5b83\u662f\u4e00\u4e2a dict \u800c\u4e0d\u662f Pydantic \u6a21\u578b\u5bf9\u8c61\uff09\u3002 \u5982\u679c\u6211\u4eec\u8c03\u7528\uff1a print ( user_dict ) \u6211\u4eec\u5c06\u83b7\u5f97\u4e00\u4e2a\u8fd9\u6837\u7684 Python dict \uff1a { 'username' : 'john' , 'password' : 'secret' , 'email' : 'john.doe@example.com' , 'full_name' : None , }","title":"Pydantic \u7684 .dict()"},{"location":"tutorial/extra-models/#dict","text":"\u5982\u679c\u6211\u4eec\u5c06 user_dict \u8fd9\u6837\u7684 dict \u4ee5 **user_dict \u5f62\u5f0f\u4f20\u9012\u7ed9\u4e00\u4e2a\u51fd\u6570\uff08\u6216\u7c7b\uff09\uff0cPython\u5c06\u5bf9\u5176\u8fdb\u884c\u300c\u89e3\u5305\u300d\u3002\u5b83\u4f1a\u5c06 user_dict \u7684\u952e\u548c\u503c\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u76f4\u63a5\u4f20\u9012\u3002 \u56e0\u6b64\uff0c\u4ece\u4e0a\u9762\u7684 user_dict \u7ee7\u7eed\uff0c\u7f16\u5199\uff1a UserInDB ( ** user_dict ) \u4f1a\u4ea7\u751f\u7c7b\u4f3c\u4e8e\u4ee5\u4e0b\u7684\u7ed3\u679c\uff1a UserInDB ( username = \"john\" , password = \"secret\" , email = \"john.doe@example.com\" , full_name = None , ) \u6216\u8005\u66f4\u786e\u5207\u5730\uff0c\u76f4\u63a5\u4f7f\u7528 user_dict \u6765\u8868\u793a\u5c06\u6765\u53ef\u80fd\u5305\u542b\u7684\u4efb\u4f55\u5185\u5bb9\uff1a UserInDB ( username = user_dict [ \"username\" ], password = user_dict [ \"password\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], )","title":"\u89e3\u5305 dict"},{"location":"tutorial/extra-models/#pydantic","text":"\u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u6211\u4eec\u4ece user_in.dict\uff08\uff09 \u4e2d\u83b7\u5f97\u4e86 user_dict \uff0c\u6b64\u4ee3\u7801\uff1a user_dict = user_in . dict () UserInDB ( ** user_dict ) \u7b49\u540c\u4e8e\uff1a UserInDB ( ** user_in . dict ()) ...\u56e0\u4e3a user_in.dict() \u662f\u4e00\u4e2a dict \uff0c\u7136\u540e\u6211\u4eec\u901a\u8fc7\u4ee5 ** \u5f00\u5934\u4f20\u9012\u7ed9 UserInDB \u6765\u4f7f Python\u300c\u89e3\u5305\u300d\u5b83\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u4e00\u4e2a\u6765\u81ea\u4e8e\u5176\u4ed6 Pydantic \u6a21\u578b\u4e2d\u7684\u6570\u636e\u7684 Pydantic \u6a21\u578b\u3002","title":"\u6765\u81ea\u4e8e\u5176\u4ed6\u6a21\u578b\u5185\u5bb9\u7684 Pydantic \u6a21\u578b"},{"location":"tutorial/extra-models/#dict_1","text":"\u7136\u540e\u6dfb\u52a0\u989d\u5916\u7684\u5173\u952e\u5b57\u53c2\u6570 hashed_password=hashed_password \uff0c\u4f8b\u5982\uff1a UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) ...\u6700\u7ec8\u7684\u7ed3\u679c\u5982\u4e0b\uff1a UserInDB ( username = user_dict [ \"username\" ], password = user_dict [ \"password\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], hashed_password = hashed_password , ) Warning \u8f85\u52a9\u6027\u7684\u989d\u5916\u51fd\u6570\u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u53ef\u80fd\u7684\u6570\u636e\u6d41\uff0c\u4f46\u5b83\u4eec\u663e\u7136\u4e0d\u80fd\u63d0\u4f9b\u4efb\u4f55\u771f\u6b63\u7684\u5b89\u5168\u6027\u3002","title":"\u89e3\u5305 dict \u548c\u989d\u5916\u5173\u952e\u5b57"},{"location":"tutorial/extra-models/#_3","text":"\u51cf\u5c11\u4ee3\u7801\u91cd\u590d\u662f FastAPI \u7684\u6838\u5fc3\u601d\u60f3\u4e4b\u4e00\u3002 \u56e0\u4e3a\u4ee3\u7801\u91cd\u590d\u4f1a\u589e\u52a0\u51fa\u73b0 bug\u3001\u5b89\u5168\u6027\u95ee\u9898\u3001\u4ee3\u7801\u5931\u6b65\u95ee\u9898\uff08\u5f53\u4f60\u5728\u4e00\u4e2a\u4f4d\u7f6e\u66f4\u65b0\u4e86\u4ee3\u7801\u4f46\u6ca1\u6709\u5728\u5176\u4ed6\u4f4d\u7f6e\u66f4\u65b0\uff09\u7b49\u7684\u53ef\u80fd\u6027\u3002 \u4e0a\u9762\u7684\u8fd9\u4e9b\u6a21\u578b\u90fd\u5171\u4eab\u4e86\u5927\u91cf\u6570\u636e\uff0c\u5e76\u62e5\u6709\u91cd\u590d\u7684\u5c5e\u6027\u540d\u79f0\u548c\u7c7b\u578b\u3002 \u6211\u4eec\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002 \u6211\u4eec\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a UserBase \u6a21\u578b\u4f5c\u4e3a\u5176\u4ed6\u6a21\u578b\u7684\u57fa\u7c7b\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u7ee7\u627f\u8be5\u6a21\u578b\u5c5e\u6027\uff08\u7c7b\u578b\u58f0\u660e\uff0c\u6821\u9a8c\u7b49\uff09\u7684\u5b50\u7c7b\u3002 \u6240\u6709\u7684\u6570\u636e\u8f6c\u6362\u3001\u6821\u9a8c\u3001\u6587\u6863\u751f\u6210\u7b49\u4ecd\u5c06\u6b63\u5e38\u8fd0\u884c\u3002 \u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u4ec5\u58f0\u660e\u6a21\u578b\u4e4b\u95f4\u7684\u5dee\u5f02\u90e8\u5206\uff08\u5177\u6709\u660e\u6587\u7684 password \u3001\u5177\u6709 hashed_password \u4ee5\u53ca\u4e0d\u5305\u62ec\u5bc6\u7801\uff09\u3002 from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserBase ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None class UserIn ( UserBase ): password : str class UserOut ( UserBase ): pass class UserInDB ( UserBase ): hashed_password : str def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved","title":"\u51cf\u5c11\u91cd\u590d"},{"location":"tutorial/extra-models/#union-anyof","text":"\u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u54cd\u5e94\u58f0\u660e\u4e3a\u4e24\u79cd\u7c7b\u578b\u7684 Union \uff0c\u8fd9\u610f\u5473\u7740\u8be5\u54cd\u5e94\u5c06\u662f\u4e24\u79cd\u7c7b\u578b\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u3002 \u8fd9\u5c06\u5728 OpenAPI \u4e2d\u4f7f\u7528 anyOf \u8fdb\u884c\u5b9a\u4e49\u3002 \u4e3a\u6b64\uff0c\u8bf7\u4f7f\u7528\u6807\u51c6\u7684 Python \u7c7b\u578b\u63d0\u793a typing.Union \uff1a Note \u5b9a\u4e49\u4e00\u4e2a Union \u7c7b\u578b\u65f6\uff0c\u9996\u5148\u5305\u62ec\u6700\u8be6\u7ec6\u7684\u7c7b\u578b\uff0c\u7136\u540e\u662f\u4e0d\u592a\u8be6\u7ec6\u7684\u7c7b\u578b\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u66f4\u8be6\u7ec6\u7684 PlaneItem \u4f4d\u4e8e Union[PlaneItem\uff0cCarItem] \u4e2d\u7684 CarItem \u4e4b\u524d\u3002 from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class BaseItem ( BaseModel ): description : str type : str class CarItem ( BaseItem ): type = \"car\" class PlaneItem ( BaseItem ): type = \"plane\" size : int items = { \"item1\" : { \"description\" : \"All my friends drive a low rider\" , \"type\" : \"car\" }, \"item2\" : { \"description\" : \"Music is my aeroplane, it's my aeroplane\" , \"type\" : \"plane\" , \"size\" : 5 , }, } @app . get ( \"/items/ {item_id} \" , response_model = Union [ PlaneItem , CarItem ]) async def read_item ( item_id : str ): return items [ item_id ]","title":"Union \u6216\u8005 anyOf"},{"location":"tutorial/extra-models/#_4","text":"\u4f60\u53ef\u4ee5\u7528\u540c\u6837\u7684\u65b9\u5f0f\u58f0\u660e\u7531\u5bf9\u8c61\u5217\u8868\u6784\u6210\u7684\u54cd\u5e94\u3002 \u4e3a\u6b64\uff0c\u8bf7\u4f7f\u7528\u6807\u51c6\u7684 Python typing.List \uff1a from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str items = [ { \"name\" : \"Foo\" , \"description\" : \"There comes my hero\" }, { \"name\" : \"Red\" , \"description\" : \"It's my aeroplane\" }, ] @app . get ( \"/items/\" , response_model = List [ Item ]) async def read_items (): return items","title":"\u6a21\u578b\u5217\u8868"},{"location":"tutorial/extra-models/#dict_2","text":"\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u4efb\u610f\u7684\u666e\u901a dict \u58f0\u660e\u54cd\u5e94\uff0c\u4ec5\u58f0\u660e\u952e\u548c\u503c\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u4f7f\u7528 Pydantic \u6a21\u578b\u3002 \u5982\u679c\u4f60\u4e8b\u5148\u4e0d\u77e5\u9053\u6709\u6548\u7684\u5b57\u6bb5/\u5c5e\u6027\u540d\u79f0\uff08\u5bf9\u4e8e Pydantic \u6a21\u578b\u662f\u5fc5\u9700\u7684\uff09\uff0c\u8fd9\u5c06\u5f88\u6709\u7528\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 typing.Dict \uff1a from typing import Dict from fastapi import FastAPI app = FastAPI () @app . get ( \"/keyword-weights/\" , response_model = Dict [ str , float ]) async def read_keyword_weights (): return { \"foo\" : 2.3 , \"bar\" : 3.4 }","title":"\u4efb\u610f dict \u6784\u6210\u7684\u54cd\u5e94"},{"location":"tutorial/extra-models/#_5","text":"\u4f7f\u7528\u591a\u4e2a Pydantic \u6a21\u578b\uff0c\u5e76\u9488\u5bf9\u4e0d\u540c\u573a\u666f\u81ea\u7531\u5730\u7ee7\u627f\u3002 \u5982\u679c\u4e00\u4e2a\u5b9e\u4f53\u5fc5\u987b\u80fd\u591f\u5177\u6709\u4e0d\u540c\u7684\u300c\u72b6\u6001\u300d\uff0c\u4f60\u65e0\u9700\u4e3a\u6bcf\u4e2a\u72b6\u6001\u7684\u5b9e\u4f53\u5b9a\u4e49\u5355\u72ec\u7684\u6570\u636e\u6a21\u578b\u3002\u4ee5\u7528\u6237\u300c\u5b9e\u4f53\u300d\u4e3a\u4f8b\uff0c\u5176\u72b6\u6001\u6709\u5305\u542b password \u3001\u5305\u542b password_hash \u4ee5\u53ca\u4e0d\u542b\u5bc6\u7801\u3002","title":"\u603b\u7ed3"},{"location":"tutorial/first-steps/","text":"\u7b2c\u4e00\u6b65 \u00b6 \u6700\u7b80\u5355\u7684 FastAPI \u6587\u4ef6\u53ef\u80fd\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u5c06\u5176\u590d\u5236\u5230 main.py \u6587\u4ef6\u4e2d\u3002 \u8fd0\u884c\u5b9e\u65f6\u670d\u52a1\u5668\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. Note uvicorn main:app \u547d\u4ee4\u542b\u4e49\u5982\u4e0b: main \uff1a main.py \u6587\u4ef6\uff08\u4e00\u4e2a Python\u300c\u6a21\u5757\u300d\uff09\u3002 app \uff1a\u5728 main.py \u6587\u4ef6\u4e2d\u901a\u8fc7 app = FastAPI() \u521b\u5efa\u7684\u5bf9\u8c61\u3002 --reload \uff1a\u8ba9\u670d\u52a1\u5668\u5728\u66f4\u65b0\u4ee3\u7801\u540e\u91cd\u65b0\u542f\u52a8\u3002\u4ec5\u5728\u5f00\u53d1\u65f6\u4f7f\u7528\u8be5\u9009\u9879\u3002 \u5728\u8f93\u51fa\u4e2d\uff0c\u4f1a\u6709\u4e00\u884c\u4fe1\u606f\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u8be5\u884c\u663e\u793a\u4e86\u4f60\u7684\u5e94\u7528\u5728\u672c\u673a\u6240\u63d0\u4f9b\u670d\u52a1\u7684 URL \u5730\u5740\u3002 \u67e5\u770b \u00b6 \u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000 \u3002 \u4f60\u5c06\u770b\u5230\u5982\u4e0b\u7684 JSON \u54cd\u5e94\uff1a { \"message\" : \"Hello World\" } \u4ea4\u4e92\u5f0f API \u6587\u6863 \u00b6 \u8df3\u8f6c\u5230 http://127.0.0.1:8000/docs \u3002 \u4f60\u5c06\u4f1a\u770b\u5230\u81ea\u52a8\u751f\u6210\u7684\u4ea4\u4e92\u5f0f API \u6587\u6863\uff08\u7531 Swagger UI \u63d0\u4f9b\uff09\uff1a \u53ef\u9009\u7684 API \u6587\u6863 \u00b6 \u524d\u5f80 http://127.0.0.1:8000/redoc \u3002 \u4f60\u5c06\u4f1a\u770b\u5230\u53ef\u9009\u7684\u81ea\u52a8\u751f\u6210\u6587\u6863 \uff08\u7531 ReDoc \u63d0\u4f9b)\uff1a OpenAPI \u00b6 FastAPI \u4f7f\u7528\u5b9a\u4e49 API \u7684 OpenAPI \u6807\u51c6\u5c06\u4f60\u7684\u6240\u6709 API \u8f6c\u6362\u6210\u300c\u6a21\u5f0f\u300d\u3002 \u300c\u6a21\u5f0f\u300d \u00b6 \u300c\u6a21\u5f0f\u300d\u662f\u5bf9\u4e8b\u7269\u7684\u4e00\u79cd\u5b9a\u4e49\u6216\u63cf\u8ff0\u3002\u5b83\u5e76\u975e\u5177\u4f53\u7684\u5b9e\u73b0\u4ee3\u7801\uff0c\u800c\u53ea\u662f\u62bd\u8c61\u7684\u63cf\u8ff0\u3002 API\u300c\u6a21\u5f0f\u300d \u00b6 \u5728\u8fd9\u79cd\u573a\u666f\u4e0b\uff0cOpenAPI \u662f\u4e00\u79cd\u89c4\u5b9a\u5982\u4f55\u5b9a\u4e49 API \u6a21\u5f0f\u7684\u89c4\u8303\u3002 \u5b9a\u4e49\u7684 OpenAPI \u6a21\u5f0f\u5c06\u5305\u62ec\u4f60\u7684 API \u8def\u5f84\uff0c\u4ee5\u53ca\u5b83\u4eec\u53ef\u80fd\u4f7f\u7528\u7684\u53c2\u6570\u7b49\u7b49\u3002 \u6570\u636e\u300c\u6a21\u5f0f\u300d \u00b6 \u300c\u6a21\u5f0f\u300d\u8fd9\u4e2a\u672f\u8bed\u4e5f\u53ef\u80fd\u6307\u7684\u662f\u67d0\u4e9b\u6570\u636e\u6bd4\u5982 JSON \u7684\u7ed3\u6784\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u53ef\u4ee5\u8868\u793a JSON \u7684\u5c5e\u6027\u53ca\u5176\u5177\u6709\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7b49\u7b49\u3002 OpenAPI \u548c JSON Schema \u00b6 OpenAPI \u4e3a\u4f60\u7684 API \u5b9a\u4e49 API \u6a21\u5f0f\u3002\u8be5\u6a21\u5f0f\u4e2d\u5305\u542b\u4e86\u4f60\u7684 API \u53d1\u9001\u548c\u63a5\u6536\u7684\u6570\u636e\u7684\u5b9a\u4e49\uff08\u6216\u79f0\u4e3a\u300c\u6a21\u5f0f\u300d\uff09\uff0c\u8fd9\u4e9b\u5b9a\u4e49\u901a\u8fc7 JSON \u6570\u636e\u6a21\u5f0f\u6807\u51c6 JSON Schema \u6240\u751f\u6210\u3002 \u67e5\u770b openapi.json \u00b6 \u5982\u679c\u4f60\u5bf9\u539f\u59cb\u7684 OpenAPI \u6a21\u5f0f\u957f\u4ec0\u4e48\u6837\u5b50\u611f\u5230\u597d\u5947\uff0c\u5176\u5b9e\u5b83\u53ea\u662f\u4e00\u4e2a\u81ea\u52a8\u751f\u6210\u7684\u5305\u542b\u4e86\u6240\u6709 API \u63cf\u8ff0\u7684 JSON\u3002 \u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\uff1a http://127.0.0.1:8000/openapi.json \u770b\u5230\u5b83\u3002 \u5b83\u5c06\u663e\u793a\u4ee5\u5982\u4e0b\u5185\u5bb9\u5f00\u5934\u7684 JSON\uff1a { \"openapi\" : \"3.0.2\" , \"info\" : { \"title\" : \"FastAPI\" , \"version\" : \"0.1.0\" }, \"paths\" : { \"/items/\" : { \"get\" : { \"responses\" : { \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { ... OpenAPI \u7684\u7528\u9014 \u00b6 \u9a71\u52a8 FastAPI \u5185\u7f6e\u7684 2 \u4e2a\u4ea4\u4e92\u5f0f\u6587\u6863\u7cfb\u7edf\u7684\u6b63\u662f OpenAPI \u6a21\u5f0f\u3002 \u5e76\u4e14\u8fd8\u6709\u6570\u5341\u79cd\u66ff\u4ee3\u65b9\u6848\uff0c\u5b83\u4eec\u5168\u90e8\u90fd\u57fa\u4e8e OpenAPI\u3002\u4f60\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u8fd9\u4e9b\u66ff\u4ee3\u65b9\u6848\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u6dfb\u52a0\u5230\u4f7f\u7528 FastAPI \u6784\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5b83\u81ea\u52a8\u751f\u6210\u4e0e\u4f60\u7684 API \u8fdb\u884c\u901a\u4fe1\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u3002\u4f8b\u5982 web \u524d\u7aef\uff0c\u79fb\u52a8\u7aef\u6216\u7269\u8054\u7f51\u5d4c\u5165\u7a0b\u5e8f\u3002 \u5206\u6b65\u6982\u62ec \u00b6 \u6b65\u9aa4 1\uff1a\u5bfc\u5165 FastAPI \u00b6 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } FastAPI \u662f\u4e00\u4e2a\u4e3a\u4f60\u7684 API \u63d0\u4f9b\u4e86\u6240\u6709\u529f\u80fd\u7684 Python \u7c7b\u3002 \u6280\u672f\u7ec6\u8282 FastAPI \u662f\u76f4\u63a5\u4ece Starlette \u7ee7\u627f\u7684\u7c7b\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7 FastAPI \u4f7f\u7528\u6240\u6709\u7684 Starlette \u7684\u529f\u80fd\u3002 \u6b65\u9aa4 2\uff1a\u521b\u5efa\u4e00\u4e2a FastAPI \u300c\u5b9e\u4f8b\u300d \u00b6 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u8fd9\u91cc\u7684\u53d8\u91cf app \u4f1a\u662f FastAPI \u7c7b\u7684\u4e00\u4e2a\u300c\u5b9e\u4f8b\u300d\u3002 \u8fd9\u4e2a\u5b9e\u4f8b\u5c06\u662f\u521b\u5efa\u4f60\u6240\u6709 API \u7684\u4e3b\u8981\u4ea4\u4e92\u5bf9\u8c61\u3002 \u8fd9\u4e2a app \u540c\u6837\u5728\u5982\u4e0b\u547d\u4ee4\u4e2d\u88ab uvicorn \u6240\u5f15\u7528\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u5982\u679c\u4f60\u50cf\u4e0b\u9762\u8fd9\u6837\u521b\u5efa\u5e94\u7528\uff1a from fastapi import FastAPI my_awesome_api = FastAPI () @my_awesome_api . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u5c06\u4ee3\u7801\u653e\u5165 main.py \u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u8fd0\u884c uvicorn \uff1a $ uvicorn main:my_awesome_api --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u6b65\u9aa4 3\uff1a\u521b\u5efa\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u00b6 \u8def\u5f84 \u00b6 \u8fd9\u91cc\u7684\u300c\u8def\u5f84\u300d\u6307\u7684\u662f URL \u4e2d\u4ece\u7b2c\u4e00\u4e2a / \u8d77\u7684\u540e\u534a\u90e8\u5206\u3002 \u6240\u4ee5\uff0c\u5728\u4e00\u4e2a\u8fd9\u6837\u7684 URL \u4e2d\uff1a https://example.com/items/foo ...\u8def\u5f84\u4f1a\u662f\uff1a /items/foo Info \u300c\u8def\u5f84\u300d\u4e5f\u901a\u5e38\u88ab\u79f0\u4e3a\u300c\u7aef\u70b9\u300d\u6216\u300c\u8def\u7531\u300d\u3002 \u5f00\u53d1 API \u65f6\uff0c\u300c\u8def\u5f84\u300d\u662f\u7528\u6765\u5206\u79bb\u300c\u5173\u6ce8\u70b9\u300d\u548c\u300c\u8d44\u6e90\u300d\u7684\u4e3b\u8981\u624b\u6bb5\u3002 \u64cd\u4f5c \u00b6 \u8fd9\u91cc\u7684\u300c\u64cd\u4f5c\u300d\u6307\u7684\u662f\u4e00\u79cd HTTP\u300c\u65b9\u6cd5\u300d\u3002 \u4e0b\u5217\u4e4b\u4e00\uff1a POST GET PUT DELETE ...\u4ee5\u53ca\u66f4\u5c11\u89c1\u7684\u51e0\u79cd\uff1a OPTIONS HEAD PATCH TRACE \u5728 HTTP \u534f\u8bae\u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0a\u7684\u5176\u4e2d\u4e00\u79cd\uff08\u6216\u591a\u79cd\uff09\u300c\u65b9\u6cd5\u300d\u4e0e\u6bcf\u4e2a\u8def\u5f84\u8fdb\u884c\u901a\u4fe1\u3002 \u5728\u5f00\u53d1 API \u65f6\uff0c\u4f60\u901a\u5e38\u4f7f\u7528\u7279\u5b9a\u7684 HTTP \u65b9\u6cd5\u53bb\u6267\u884c\u7279\u5b9a\u7684\u884c\u4e3a\u3002 \u901a\u5e38\u4f7f\u7528\uff1a POST \uff1a\u521b\u5efa\u6570\u636e\u3002 GET \uff1a\u8bfb\u53d6\u6570\u636e\u3002 PUT \uff1a\u66f4\u65b0\u6570\u636e\u3002 DELETE \uff1a\u5220\u9664\u6570\u636e\u3002 \u56e0\u6b64\uff0c\u5728 OpenAPI \u4e2d\uff0c\u6bcf\u4e00\u4e2a HTTP \u65b9\u6cd5\u90fd\u88ab\u79f0\u4e3a\u300c\u64cd\u4f5c\u300d\u3002 \u6211\u4eec\u4e5f\u6253\u7b97\u79f0\u547c\u5b83\u4eec\u4e3a\u300c\u64cd\u4f5c\u300d\u3002 \u5b9a\u4e49\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u00b6 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } @app.get(\"/\") \u544a\u8bc9 FastAPI \u5728\u5b83\u4e0b\u65b9\u7684\u51fd\u6570\u8d1f\u8d23\u5904\u7406\u5982\u4e0b\u8bbf\u95ee\u8bf7\u6c42\uff1a \u8bf7\u6c42\u8def\u5f84\u4e3a / \u4f7f\u7528 get \u64cd\u4f5c @decorator Info @something \u8bed\u6cd5\u5728 Python \u4e2d\u88ab\u79f0\u4e3a\u300c\u88c5\u9970\u5668\u300d\u3002 \u50cf\u4e00\u9876\u6f02\u4eae\u7684\u88c5\u9970\u5e3d\u4e00\u6837\uff0c\u5c06\u5b83\u653e\u5728\u4e00\u4e2a\u51fd\u6570\u7684\u4e0a\u65b9\uff08\u6211\u731c\u6d4b\u8fd9\u4e2a\u672f\u8bed\u7684\u547d\u540d\u5c31\u662f\u8fd9\u4e48\u6765\u7684\uff09\u3002 \u88c5\u9970\u5668\u63a5\u6536\u4f4d\u4e8e\u5176\u4e0b\u65b9\u7684\u51fd\u6570\u5e76\u4e14\u7528\u5b83\u5b8c\u6210\u4e00\u4e9b\u5de5\u4f5c\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u4e2a\u88c5\u9970\u5668\u544a\u8bc9 FastAPI \u4f4d\u4e8e\u5176\u4e0b\u65b9\u7684\u51fd\u6570\u5bf9\u5e94\u7740 \u8def\u5f84 / \u52a0\u4e0a get \u64cd\u4f5c \u3002 \u5b83\u662f\u4e00\u4e2a\u300c \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u300d\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7684\u64cd\u4f5c\uff1a @app.post() @app.put() @app.delete() \u4ee5\u53ca\u66f4\u5c11\u89c1\u7684\uff1a @app.options() @app.head() @app.patch() @app.trace() Tip \u60a8\u53ef\u4ee5\u968f\u610f\u4f7f\u7528\u4efb\u4f55\u4e00\u4e2a\u64cd\u4f5c\uff08HTTP\u65b9\u6cd5\uff09\u3002 FastAPI \u6ca1\u6709\u5f3a\u5236\u8981\u6c42\u64cd\u4f5c\u6709\u4efb\u4f55\u7279\u5b9a\u7684\u542b\u4e49\u3002 \u6b64\u5904\u63d0\u4f9b\u7684\u4fe1\u606f\u4ec5\u4f5c\u4e3a\u6307\u5bfc\uff0c\u800c\u4e0d\u662f\u8981\u6c42\u3002 \u6bd4\u5982\uff0c\u5f53\u4f7f\u7528 GraphQL \u65f6\u901a\u5e38\u4f60\u6240\u6709\u7684\u52a8\u4f5c\u90fd\u901a\u8fc7 post \u4e00\u79cd\u65b9\u6cd5\u6267\u884c\u3002 \u6b65\u9aa4 4\uff1a\u5b9a\u4e49 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u00b6 \u8fd9\u662f\u6211\u4eec\u7684\u300c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u300d\uff1a \u8def\u5f84 \uff1a\u662f / \u3002 \u64cd\u4f5c \uff1a\u662f get \u3002 \u51fd\u6570 \uff1a\u662f\u4f4d\u4e8e\u300c\u88c5\u9970\u5668\u300d\u4e0b\u65b9\u7684\u51fd\u6570\uff08\u4f4d\u4e8e @app.get(\"/\") \u4e0b\u65b9\uff09\u3002 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u8fd9\u662f\u4e00\u4e2a Python \u51fd\u6570\u3002 \u6bcf\u5f53 FastAPI \u63a5\u6536\u4e00\u4e2a\u4f7f\u7528 GET \u65b9\u6cd5\u8bbf\u95ee URL\u300c / \u300d\u7684\u8bf7\u6c42\u65f6\u8fd9\u4e2a\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b83\u662f\u4e00\u4e2a async \u51fd\u6570\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5c06\u5176\u5b9a\u4e49\u4e3a\u5e38\u89c4\u51fd\u6570\u800c\u4e0d\u4f7f\u7528 async def : from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } Note \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u4e24\u8005\u7684\u533a\u522b\uff0c\u8bf7\u67e5\u9605 Async: \"In a hurry?\" \u3002 \u6b65\u9aa4 5\uff1a\u8fd4\u56de\u5185\u5bb9 \u00b6 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u4f60\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a dict \u3001 list \uff0c\u50cf str \u3001 int \u4e00\u6837\u7684\u5355\u4e2a\u503c\uff0c\u7b49\u7b49\u3002 \u4f60\u8fd8\u53ef\u4ee5\u8fd4\u56de Pydantic \u6a21\u578b\uff08\u7a0d\u540e\u4f60\u5c06\u4e86\u89e3\u66f4\u591a\uff09\u3002 \u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u5c06\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a JSON \u7684\u5bf9\u8c61\u548c\u6a21\u578b\uff08\u5305\u62ec ORM \u5bf9\u8c61\u7b49\uff09\u3002\u5c1d\u8bd5\u4e0b\u4f7f\u7528\u4f60\u6700\u559c\u6b22\u7684\u4e00\u79cd\uff0c\u5b83\u5f88\u6709\u53ef\u80fd\u5df2\u7ecf\u88ab\u652f\u6301\u3002 \u603b\u7ed3 \u00b6 \u5bfc\u5165 FastAPI \u3002 \u521b\u5efa\u4e00\u4e2a app \u5b9e\u4f8b\u3002 \u7f16\u5199\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \uff08\u5982 @app.get(\"/\") \uff09\u3002 \u7f16\u5199\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff08\u5982\u4e0a\u9762\u7684 def root(): ... \uff09\u3002 \u8fd0\u884c\u5f00\u53d1\u670d\u52a1\u5668\uff08\u5982 uvicorn main:app --reload \uff09\u3002","title":"\u7b2c\u4e00\u6b65"},{"location":"tutorial/first-steps/#_1","text":"\u6700\u7b80\u5355\u7684 FastAPI \u6587\u4ef6\u53ef\u80fd\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u5c06\u5176\u590d\u5236\u5230 main.py \u6587\u4ef6\u4e2d\u3002 \u8fd0\u884c\u5b9e\u65f6\u670d\u52a1\u5668\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. Note uvicorn main:app \u547d\u4ee4\u542b\u4e49\u5982\u4e0b: main \uff1a main.py \u6587\u4ef6\uff08\u4e00\u4e2a Python\u300c\u6a21\u5757\u300d\uff09\u3002 app \uff1a\u5728 main.py \u6587\u4ef6\u4e2d\u901a\u8fc7 app = FastAPI() \u521b\u5efa\u7684\u5bf9\u8c61\u3002 --reload \uff1a\u8ba9\u670d\u52a1\u5668\u5728\u66f4\u65b0\u4ee3\u7801\u540e\u91cd\u65b0\u542f\u52a8\u3002\u4ec5\u5728\u5f00\u53d1\u65f6\u4f7f\u7528\u8be5\u9009\u9879\u3002 \u5728\u8f93\u51fa\u4e2d\uff0c\u4f1a\u6709\u4e00\u884c\u4fe1\u606f\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u8be5\u884c\u663e\u793a\u4e86\u4f60\u7684\u5e94\u7528\u5728\u672c\u673a\u6240\u63d0\u4f9b\u670d\u52a1\u7684 URL \u5730\u5740\u3002","title":"\u7b2c\u4e00\u6b65"},{"location":"tutorial/first-steps/#_2","text":"\u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000 \u3002 \u4f60\u5c06\u770b\u5230\u5982\u4e0b\u7684 JSON \u54cd\u5e94\uff1a { \"message\" : \"Hello World\" }","title":"\u67e5\u770b"},{"location":"tutorial/first-steps/#api","text":"\u8df3\u8f6c\u5230 http://127.0.0.1:8000/docs \u3002 \u4f60\u5c06\u4f1a\u770b\u5230\u81ea\u52a8\u751f\u6210\u7684\u4ea4\u4e92\u5f0f API \u6587\u6863\uff08\u7531 Swagger UI \u63d0\u4f9b\uff09\uff1a","title":"\u4ea4\u4e92\u5f0f API \u6587\u6863"},{"location":"tutorial/first-steps/#api_1","text":"\u524d\u5f80 http://127.0.0.1:8000/redoc \u3002 \u4f60\u5c06\u4f1a\u770b\u5230\u53ef\u9009\u7684\u81ea\u52a8\u751f\u6210\u6587\u6863 \uff08\u7531 ReDoc \u63d0\u4f9b)\uff1a","title":"\u53ef\u9009\u7684 API \u6587\u6863"},{"location":"tutorial/first-steps/#openapi","text":"FastAPI \u4f7f\u7528\u5b9a\u4e49 API \u7684 OpenAPI \u6807\u51c6\u5c06\u4f60\u7684\u6240\u6709 API \u8f6c\u6362\u6210\u300c\u6a21\u5f0f\u300d\u3002","title":"OpenAPI"},{"location":"tutorial/first-steps/#_3","text":"\u300c\u6a21\u5f0f\u300d\u662f\u5bf9\u4e8b\u7269\u7684\u4e00\u79cd\u5b9a\u4e49\u6216\u63cf\u8ff0\u3002\u5b83\u5e76\u975e\u5177\u4f53\u7684\u5b9e\u73b0\u4ee3\u7801\uff0c\u800c\u53ea\u662f\u62bd\u8c61\u7684\u63cf\u8ff0\u3002","title":"\u300c\u6a21\u5f0f\u300d"},{"location":"tutorial/first-steps/#api_2","text":"\u5728\u8fd9\u79cd\u573a\u666f\u4e0b\uff0cOpenAPI \u662f\u4e00\u79cd\u89c4\u5b9a\u5982\u4f55\u5b9a\u4e49 API \u6a21\u5f0f\u7684\u89c4\u8303\u3002 \u5b9a\u4e49\u7684 OpenAPI \u6a21\u5f0f\u5c06\u5305\u62ec\u4f60\u7684 API \u8def\u5f84\uff0c\u4ee5\u53ca\u5b83\u4eec\u53ef\u80fd\u4f7f\u7528\u7684\u53c2\u6570\u7b49\u7b49\u3002","title":"API\u300c\u6a21\u5f0f\u300d"},{"location":"tutorial/first-steps/#_4","text":"\u300c\u6a21\u5f0f\u300d\u8fd9\u4e2a\u672f\u8bed\u4e5f\u53ef\u80fd\u6307\u7684\u662f\u67d0\u4e9b\u6570\u636e\u6bd4\u5982 JSON \u7684\u7ed3\u6784\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u53ef\u4ee5\u8868\u793a JSON \u7684\u5c5e\u6027\u53ca\u5176\u5177\u6709\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7b49\u7b49\u3002","title":"\u6570\u636e\u300c\u6a21\u5f0f\u300d"},{"location":"tutorial/first-steps/#openapi-json-schema","text":"OpenAPI \u4e3a\u4f60\u7684 API \u5b9a\u4e49 API \u6a21\u5f0f\u3002\u8be5\u6a21\u5f0f\u4e2d\u5305\u542b\u4e86\u4f60\u7684 API \u53d1\u9001\u548c\u63a5\u6536\u7684\u6570\u636e\u7684\u5b9a\u4e49\uff08\u6216\u79f0\u4e3a\u300c\u6a21\u5f0f\u300d\uff09\uff0c\u8fd9\u4e9b\u5b9a\u4e49\u901a\u8fc7 JSON \u6570\u636e\u6a21\u5f0f\u6807\u51c6 JSON Schema \u6240\u751f\u6210\u3002","title":"OpenAPI \u548c JSON Schema"},{"location":"tutorial/first-steps/#openapijson","text":"\u5982\u679c\u4f60\u5bf9\u539f\u59cb\u7684 OpenAPI \u6a21\u5f0f\u957f\u4ec0\u4e48\u6837\u5b50\u611f\u5230\u597d\u5947\uff0c\u5176\u5b9e\u5b83\u53ea\u662f\u4e00\u4e2a\u81ea\u52a8\u751f\u6210\u7684\u5305\u542b\u4e86\u6240\u6709 API \u63cf\u8ff0\u7684 JSON\u3002 \u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\uff1a http://127.0.0.1:8000/openapi.json \u770b\u5230\u5b83\u3002 \u5b83\u5c06\u663e\u793a\u4ee5\u5982\u4e0b\u5185\u5bb9\u5f00\u5934\u7684 JSON\uff1a { \"openapi\" : \"3.0.2\" , \"info\" : { \"title\" : \"FastAPI\" , \"version\" : \"0.1.0\" }, \"paths\" : { \"/items/\" : { \"get\" : { \"responses\" : { \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { ...","title":"\u67e5\u770b openapi.json"},{"location":"tutorial/first-steps/#openapi_1","text":"\u9a71\u52a8 FastAPI \u5185\u7f6e\u7684 2 \u4e2a\u4ea4\u4e92\u5f0f\u6587\u6863\u7cfb\u7edf\u7684\u6b63\u662f OpenAPI \u6a21\u5f0f\u3002 \u5e76\u4e14\u8fd8\u6709\u6570\u5341\u79cd\u66ff\u4ee3\u65b9\u6848\uff0c\u5b83\u4eec\u5168\u90e8\u90fd\u57fa\u4e8e OpenAPI\u3002\u4f60\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u8fd9\u4e9b\u66ff\u4ee3\u65b9\u6848\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u6dfb\u52a0\u5230\u4f7f\u7528 FastAPI \u6784\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5b83\u81ea\u52a8\u751f\u6210\u4e0e\u4f60\u7684 API \u8fdb\u884c\u901a\u4fe1\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u3002\u4f8b\u5982 web \u524d\u7aef\uff0c\u79fb\u52a8\u7aef\u6216\u7269\u8054\u7f51\u5d4c\u5165\u7a0b\u5e8f\u3002","title":"OpenAPI \u7684\u7528\u9014"},{"location":"tutorial/first-steps/#_5","text":"","title":"\u5206\u6b65\u6982\u62ec"},{"location":"tutorial/first-steps/#1-fastapi","text":"from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } FastAPI \u662f\u4e00\u4e2a\u4e3a\u4f60\u7684 API \u63d0\u4f9b\u4e86\u6240\u6709\u529f\u80fd\u7684 Python \u7c7b\u3002 \u6280\u672f\u7ec6\u8282 FastAPI \u662f\u76f4\u63a5\u4ece Starlette \u7ee7\u627f\u7684\u7c7b\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7 FastAPI \u4f7f\u7528\u6240\u6709\u7684 Starlette \u7684\u529f\u80fd\u3002","title":"\u6b65\u9aa4 1\uff1a\u5bfc\u5165 FastAPI"},{"location":"tutorial/first-steps/#2-fastapi","text":"from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u8fd9\u91cc\u7684\u53d8\u91cf app \u4f1a\u662f FastAPI \u7c7b\u7684\u4e00\u4e2a\u300c\u5b9e\u4f8b\u300d\u3002 \u8fd9\u4e2a\u5b9e\u4f8b\u5c06\u662f\u521b\u5efa\u4f60\u6240\u6709 API \u7684\u4e3b\u8981\u4ea4\u4e92\u5bf9\u8c61\u3002 \u8fd9\u4e2a app \u540c\u6837\u5728\u5982\u4e0b\u547d\u4ee4\u4e2d\u88ab uvicorn \u6240\u5f15\u7528\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u5982\u679c\u4f60\u50cf\u4e0b\u9762\u8fd9\u6837\u521b\u5efa\u5e94\u7528\uff1a from fastapi import FastAPI my_awesome_api = FastAPI () @my_awesome_api . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u5c06\u4ee3\u7801\u653e\u5165 main.py \u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u8fd0\u884c uvicorn \uff1a $ uvicorn main:my_awesome_api --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"\u6b65\u9aa4 2\uff1a\u521b\u5efa\u4e00\u4e2a FastAPI\u300c\u5b9e\u4f8b\u300d"},{"location":"tutorial/first-steps/#3","text":"","title":"\u6b65\u9aa4 3\uff1a\u521b\u5efa\u4e00\u4e2a\u8def\u5f84\u64cd\u4f5c"},{"location":"tutorial/first-steps/#_6","text":"\u8fd9\u91cc\u7684\u300c\u8def\u5f84\u300d\u6307\u7684\u662f URL \u4e2d\u4ece\u7b2c\u4e00\u4e2a / \u8d77\u7684\u540e\u534a\u90e8\u5206\u3002 \u6240\u4ee5\uff0c\u5728\u4e00\u4e2a\u8fd9\u6837\u7684 URL \u4e2d\uff1a https://example.com/items/foo ...\u8def\u5f84\u4f1a\u662f\uff1a /items/foo Info \u300c\u8def\u5f84\u300d\u4e5f\u901a\u5e38\u88ab\u79f0\u4e3a\u300c\u7aef\u70b9\u300d\u6216\u300c\u8def\u7531\u300d\u3002 \u5f00\u53d1 API \u65f6\uff0c\u300c\u8def\u5f84\u300d\u662f\u7528\u6765\u5206\u79bb\u300c\u5173\u6ce8\u70b9\u300d\u548c\u300c\u8d44\u6e90\u300d\u7684\u4e3b\u8981\u624b\u6bb5\u3002","title":"\u8def\u5f84"},{"location":"tutorial/first-steps/#_7","text":"\u8fd9\u91cc\u7684\u300c\u64cd\u4f5c\u300d\u6307\u7684\u662f\u4e00\u79cd HTTP\u300c\u65b9\u6cd5\u300d\u3002 \u4e0b\u5217\u4e4b\u4e00\uff1a POST GET PUT DELETE ...\u4ee5\u53ca\u66f4\u5c11\u89c1\u7684\u51e0\u79cd\uff1a OPTIONS HEAD PATCH TRACE \u5728 HTTP \u534f\u8bae\u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0a\u7684\u5176\u4e2d\u4e00\u79cd\uff08\u6216\u591a\u79cd\uff09\u300c\u65b9\u6cd5\u300d\u4e0e\u6bcf\u4e2a\u8def\u5f84\u8fdb\u884c\u901a\u4fe1\u3002 \u5728\u5f00\u53d1 API \u65f6\uff0c\u4f60\u901a\u5e38\u4f7f\u7528\u7279\u5b9a\u7684 HTTP \u65b9\u6cd5\u53bb\u6267\u884c\u7279\u5b9a\u7684\u884c\u4e3a\u3002 \u901a\u5e38\u4f7f\u7528\uff1a POST \uff1a\u521b\u5efa\u6570\u636e\u3002 GET \uff1a\u8bfb\u53d6\u6570\u636e\u3002 PUT \uff1a\u66f4\u65b0\u6570\u636e\u3002 DELETE \uff1a\u5220\u9664\u6570\u636e\u3002 \u56e0\u6b64\uff0c\u5728 OpenAPI \u4e2d\uff0c\u6bcf\u4e00\u4e2a HTTP \u65b9\u6cd5\u90fd\u88ab\u79f0\u4e3a\u300c\u64cd\u4f5c\u300d\u3002 \u6211\u4eec\u4e5f\u6253\u7b97\u79f0\u547c\u5b83\u4eec\u4e3a\u300c\u64cd\u4f5c\u300d\u3002","title":"\u64cd\u4f5c"},{"location":"tutorial/first-steps/#_8","text":"from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } @app.get(\"/\") \u544a\u8bc9 FastAPI \u5728\u5b83\u4e0b\u65b9\u7684\u51fd\u6570\u8d1f\u8d23\u5904\u7406\u5982\u4e0b\u8bbf\u95ee\u8bf7\u6c42\uff1a \u8bf7\u6c42\u8def\u5f84\u4e3a / \u4f7f\u7528 get \u64cd\u4f5c @decorator Info @something \u8bed\u6cd5\u5728 Python \u4e2d\u88ab\u79f0\u4e3a\u300c\u88c5\u9970\u5668\u300d\u3002 \u50cf\u4e00\u9876\u6f02\u4eae\u7684\u88c5\u9970\u5e3d\u4e00\u6837\uff0c\u5c06\u5b83\u653e\u5728\u4e00\u4e2a\u51fd\u6570\u7684\u4e0a\u65b9\uff08\u6211\u731c\u6d4b\u8fd9\u4e2a\u672f\u8bed\u7684\u547d\u540d\u5c31\u662f\u8fd9\u4e48\u6765\u7684\uff09\u3002 \u88c5\u9970\u5668\u63a5\u6536\u4f4d\u4e8e\u5176\u4e0b\u65b9\u7684\u51fd\u6570\u5e76\u4e14\u7528\u5b83\u5b8c\u6210\u4e00\u4e9b\u5de5\u4f5c\u3002 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u4e2a\u88c5\u9970\u5668\u544a\u8bc9 FastAPI \u4f4d\u4e8e\u5176\u4e0b\u65b9\u7684\u51fd\u6570\u5bf9\u5e94\u7740 \u8def\u5f84 / \u52a0\u4e0a get \u64cd\u4f5c \u3002 \u5b83\u662f\u4e00\u4e2a\u300c \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u300d\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7684\u64cd\u4f5c\uff1a @app.post() @app.put() @app.delete() \u4ee5\u53ca\u66f4\u5c11\u89c1\u7684\uff1a @app.options() @app.head() @app.patch() @app.trace() Tip \u60a8\u53ef\u4ee5\u968f\u610f\u4f7f\u7528\u4efb\u4f55\u4e00\u4e2a\u64cd\u4f5c\uff08HTTP\u65b9\u6cd5\uff09\u3002 FastAPI \u6ca1\u6709\u5f3a\u5236\u8981\u6c42\u64cd\u4f5c\u6709\u4efb\u4f55\u7279\u5b9a\u7684\u542b\u4e49\u3002 \u6b64\u5904\u63d0\u4f9b\u7684\u4fe1\u606f\u4ec5\u4f5c\u4e3a\u6307\u5bfc\uff0c\u800c\u4e0d\u662f\u8981\u6c42\u3002 \u6bd4\u5982\uff0c\u5f53\u4f7f\u7528 GraphQL \u65f6\u901a\u5e38\u4f60\u6240\u6709\u7684\u52a8\u4f5c\u90fd\u901a\u8fc7 post \u4e00\u79cd\u65b9\u6cd5\u6267\u884c\u3002","title":"\u5b9a\u4e49\u4e00\u4e2a\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668"},{"location":"tutorial/first-steps/#4","text":"\u8fd9\u662f\u6211\u4eec\u7684\u300c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u300d\uff1a \u8def\u5f84 \uff1a\u662f / \u3002 \u64cd\u4f5c \uff1a\u662f get \u3002 \u51fd\u6570 \uff1a\u662f\u4f4d\u4e8e\u300c\u88c5\u9970\u5668\u300d\u4e0b\u65b9\u7684\u51fd\u6570\uff08\u4f4d\u4e8e @app.get(\"/\") \u4e0b\u65b9\uff09\u3002 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u8fd9\u662f\u4e00\u4e2a Python \u51fd\u6570\u3002 \u6bcf\u5f53 FastAPI \u63a5\u6536\u4e00\u4e2a\u4f7f\u7528 GET \u65b9\u6cd5\u8bbf\u95ee URL\u300c / \u300d\u7684\u8bf7\u6c42\u65f6\u8fd9\u4e2a\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b83\u662f\u4e00\u4e2a async \u51fd\u6570\u3002 \u4f60\u4e5f\u53ef\u4ee5\u5c06\u5176\u5b9a\u4e49\u4e3a\u5e38\u89c4\u51fd\u6570\u800c\u4e0d\u4f7f\u7528 async def : from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } Note \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u4e24\u8005\u7684\u533a\u522b\uff0c\u8bf7\u67e5\u9605 Async: \"In a hurry?\" \u3002","title":"\u6b65\u9aa4 4\uff1a\u5b9a\u4e49\u8def\u5f84\u64cd\u4f5c\u51fd\u6570"},{"location":"tutorial/first-steps/#5","text":"from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u4f60\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a dict \u3001 list \uff0c\u50cf str \u3001 int \u4e00\u6837\u7684\u5355\u4e2a\u503c\uff0c\u7b49\u7b49\u3002 \u4f60\u8fd8\u53ef\u4ee5\u8fd4\u56de Pydantic \u6a21\u578b\uff08\u7a0d\u540e\u4f60\u5c06\u4e86\u89e3\u66f4\u591a\uff09\u3002 \u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u5c06\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a JSON \u7684\u5bf9\u8c61\u548c\u6a21\u578b\uff08\u5305\u62ec ORM \u5bf9\u8c61\u7b49\uff09\u3002\u5c1d\u8bd5\u4e0b\u4f7f\u7528\u4f60\u6700\u559c\u6b22\u7684\u4e00\u79cd\uff0c\u5b83\u5f88\u6709\u53ef\u80fd\u5df2\u7ecf\u88ab\u652f\u6301\u3002","title":"\u6b65\u9aa4 5\uff1a\u8fd4\u56de\u5185\u5bb9"},{"location":"tutorial/first-steps/#_9","text":"\u5bfc\u5165 FastAPI \u3002 \u521b\u5efa\u4e00\u4e2a app \u5b9e\u4f8b\u3002 \u7f16\u5199\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \uff08\u5982 @app.get(\"/\") \uff09\u3002 \u7f16\u5199\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff08\u5982\u4e0a\u9762\u7684 def root(): ... \uff09\u3002 \u8fd0\u884c\u5f00\u53d1\u670d\u52a1\u5668\uff08\u5982 uvicorn main:app --reload \uff09\u3002","title":"\u603b\u7ed3"},{"location":"tutorial/handling-errors/","text":"\u5904\u7406\u9519\u8bef \u00b6 \u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u9519\u8bef\u63d0\u793a\u3002 \u8fd9\u91cc\u6240\u8c13\u7684\u5ba2\u6237\u7aef\u5305\u62ec\u524d\u7aef\u6d4f\u89c8\u5668\u3001\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u3001\u7269\u8054\u7f51\u8bbe\u5907\u7b49\u3002 \u9700\u8981\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u9519\u8bef\u63d0\u793a\u7684\u573a\u666f\u4e3b\u8981\u5982\u4e0b\uff1a \u5ba2\u6237\u7aef\u6ca1\u6709\u6267\u884c\u64cd\u4f5c\u7684\u6743\u9650 \u5ba2\u6237\u7aef\u6ca1\u6709\u8bbf\u95ee\u8d44\u6e90\u7684\u6743\u9650 \u5ba2\u6237\u7aef\u8981\u8bbf\u95ee\u7684\u9879\u76ee\u4e0d\u5b58\u5728 \u7b49\u7b49 ... \u9047\u5230\u8fd9\u4e9b\u60c5\u51b5\u65f6\uff0c\u901a\u5e38\u8981\u8fd4\u56de 4XX \uff08400 \u81f3 499\uff09 HTTP \u72b6\u6001\u7801 \u3002 4XX \u72b6\u6001\u7801\u4e0e\u8868\u793a\u8bf7\u6c42\u6210\u529f\u7684 2XX \uff08200 \u81f3 299\uff09 HTTP \u72b6\u6001\u7801\u7c7b\u4f3c\u3002 \u53ea\u4e0d\u8fc7\uff0c 4XX \u72b6\u6001\u7801\u8868\u793a\u5ba2\u6237\u7aef\u53d1\u751f\u7684\u9519\u8bef\u3002 \u5927\u5bb6\u90fd\u77e5\u9053 \u300c404 Not Found\u300d \u9519\u8bef\uff0c\u8fd8\u6709\u8c03\u4f83\u8fd9\u4e2a\u9519\u8bef\u7684\u7b11\u8bdd\u5427\uff1f \u4f7f\u7528 HTTPException \u00b6 \u5411\u5ba2\u6237\u7aef\u8fd4\u56de HTTP \u9519\u8bef\u54cd\u5e94\uff0c\u53ef\u4ee5\u4f7f\u7528 HTTPException \u3002 \u5bfc\u5165 HTTPException \u00b6 from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"item\" : items [ item_id ]} \u89e6\u53d1 HTTPException \u00b6 HTTPException \u662f\u989d\u5916\u5305\u542b\u4e86\u548c API \u6709\u5173\u6570\u636e\u7684\u5e38\u89c4 Python \u5f02\u5e38\u3002 \u56e0\u4e3a\u662f Python \u5f02\u5e38\uff0c\u6240\u4ee5\u4e0d\u80fd return \uff0c\u53ea\u80fd raise \u3002 \u5982\u5728\u8c03\u7528 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u91cc\u7684\u5de5\u5177\u51fd\u6570\u65f6\uff0c\u89e6\u53d1\u4e86 HTTPException \uff0cFastAPI \u5c31\u4e0d\u518d\u7ee7\u7eed\u6267\u884c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u7684\u540e\u7eed\u4ee3\u7801\uff0c\u800c\u662f\u7acb\u5373\u7ec8\u6b62\u8bf7\u6c42\uff0c\u5e76\u628a HTTPException \u7684 HTTP \u9519\u8bef\u53d1\u9001\u81f3\u5ba2\u6237\u7aef\u3002 \u5728\u4ecb\u7ecd\u4f9d\u8d56\u9879\u4e0e\u5b89\u5168\u7684\u7ae0\u8282\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u7528 raise \u5f02\u5e38\u4ee3\u66ff return \u503c\u7684\u4f18\u52bf\u3002 \u672c\u4f8b\u4e2d\uff0c\u5ba2\u6237\u7aef\u7528 ID \u8bf7\u6c42\u7684 item \u4e0d\u5b58\u5728\u65f6\uff0c\u89e6\u53d1\u72b6\u6001\u7801\u4e3a 404 \u7684\u5f02\u5e38\uff1a from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"item\" : items [ item_id ]} \u54cd\u5e94\u7ed3\u679c \u00b6 \u8bf7\u6c42\u4e3a http://example.com/items/foo \uff08 item_id \u4e3a \u300cfoo\u300d \uff09\u65f6\uff0c\u5ba2\u6237\u7aef\u4f1a\u63a5\u6536\u5230 HTTP \u72b6\u6001\u7801 - 200 \u53ca\u5982\u4e0b JSON \u54cd\u5e94\u7ed3\u679c\uff1a { \"item\" : \"The Foo Wrestlers\" } \u4f46\u5982\u679c\u5ba2\u6237\u7aef\u8bf7\u6c42 http://example.com/items/bar \uff08 item_id \u300cbar\u300d \u4e0d\u5b58\u5728\u65f6\uff09\uff0c\u5219\u4f1a\u63a5\u6536\u5230 HTTP \u72b6\u6001\u7801 - 404\uff08\u300c\u672a\u627e\u5230\u300d\u9519\u8bef\uff09\u53ca\u5982\u4e0b JSON \u54cd\u5e94\u7ed3\u679c\uff1a { \"detail\" : \"Item not found\" } \u63d0\u793a \u89e6\u53d1 HTTPException \u65f6\uff0c\u53ef\u4ee5\u7528\u53c2\u6570 detail \u4f20\u9012\u4efb\u4f55\u80fd\u8f6c\u6362\u4e3a JSON \u7684\u503c\uff0c\u4e0d\u4ec5\u9650\u4e8e str \u3002 \u8fd8\u652f\u6301\u4f20\u9012 dict \u3001 list \u7b49\u6570\u636e\u7ed3\u6784\u3002 FastAPI \u80fd\u81ea\u52a8\u5904\u7406\u8fd9\u4e9b\u6570\u636e\uff0c\u5e76\u5c06\u4e4b\u8f6c\u6362\u4e3a JSON\u3002 \u6dfb\u52a0\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934 \u00b6 \u6709\u4e9b\u573a\u666f\u4e0b\u8981\u4e3a HTTP \u9519\u8bef\u6dfb\u52a0\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\u3002\u4f8b\u5982\uff0c\u51fa\u4e8e\u67d0\u4e9b\u65b9\u9762\u7684\u5b89\u5168\u9700\u8981\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\u53ef\u80fd\u4e0d\u4f1a\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u76f4\u63a5\u4f7f\u7528\u54cd\u5e94\u5934\u3002 \u4f46\u5bf9\u4e8e\u67d0\u4e9b\u9ad8\u7ea7\u5e94\u7528\u573a\u666f\uff0c\u8fd8\u662f\u9700\u8981\u6dfb\u52a0\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\uff1a from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items-header/ {item_id} \" ) async def read_item_header ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" , headers = { \"X-Error\" : \"There goes my error\" }, ) return { \"item\" : items [ item_id ]} \u5b89\u88c5\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u5668 \u00b6 \u6dfb\u52a0\u81ea\u5b9a\u4e49\u5904\u7406\u5668\uff0c\u8981\u4f7f\u7528 Starlette \u7684\u5f02\u5e38\u5de5\u5177 \u3002 \u5047\u8bbe\u8981\u89e6\u53d1\u7684\u81ea\u5b9a\u4e49\u5f02\u5e38\u53eb\u4f5c UnicornException \u3002 \u4e14\u9700\u8981 FastAPI \u5b9e\u73b0\u5168\u5c40\u5904\u7406\u8be5\u5f02\u5e38\u3002 \u6b64\u65f6\uff0c\u53ef\u4ee5\u7528 @app.exception_handler() \u6dfb\u52a0\u81ea\u5b9a\u4e49\u5f02\u5e38\u63a7\u5236\u5668\uff1a from fastapi import FastAPI , Request from fastapi.responses import JSONResponse class UnicornException ( Exception ): def __init__ ( self , name : str ): self . name = name app = FastAPI () @app . exception_handler ( UnicornException ) async def unicorn_exception_handler ( request : Request , exc : UnicornException ): return JSONResponse ( status_code = 418 , content = { \"message\" : f \"Oops! { exc . name } did something. There goes a rainbow...\" }, ) @app . get ( \"/unicorns/ {name} \" ) async def read_unicorn ( name : str ): if name == \"yolo\" : raise UnicornException ( name = name ) return { \"unicorn_name\" : name } \u8bf7\u6c42 /unicorns/yolo \u65f6\uff0c\u8def\u5f84\u64cd\u4f5c\u4f1a\u89e6\u53d1 UnicornException \u3002 \u4f46\u8be5\u5f02\u5e38\u5c06\u4f1a\u88ab unicorn_exception_handler \u5904\u7406\u3002 \u63a5\u6536\u5230\u7684\u9519\u8bef\u4fe1\u606f\u6e05\u6670\u660e\u4e86\uff0cHTTP \u72b6\u6001\u7801\u4e3a 418 \uff0cJSON \u5185\u5bb9\u5982\u4e0b\uff1a { \"message\" : \"Oops! yolo did something. There goes a rainbow...\" } \u6280\u672f\u7ec6\u8282 from starlette.requests import Request \u548c from starlette.responses import JSONResponse \u4e5f\u53ef\u4ee5\u7528\u4e8e\u5bfc\u5165 Request \u548c JSONResponse \u3002 FastAPI \u63d0\u4f9b\u4e86\u4e0e starlette.responses \u76f8\u540c\u7684 fastapi.responses \u4f5c\u4e3a\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5927\u90e8\u5206\u54cd\u5e94\u64cd\u4f5c\u90fd\u53ef\u4ee5\u76f4\u63a5\u4ece Starlette \u5bfc\u5165\u3002\u540c\u7406\uff0c Request \u4e5f\u662f\u5982\u6b64\u3002 \u8986\u76d6\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668 \u00b6 FastAPI \u81ea\u5e26\u4e86\u4e00\u4e9b\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002 \u89e6\u53d1 HTTPException \u6216\u8bf7\u6c42\u65e0\u6548\u6570\u636e\u65f6\uff0c\u8fd9\u4e9b\u5904\u7406\u5668\u8fd4\u56de\u9ed8\u8ba4\u7684 JSON \u54cd\u5e94\u7ed3\u679c\u3002 \u4e0d\u8fc7\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u81ea\u5b9a\u4e49\u5904\u7406\u5668\u8986\u76d6\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002 \u8986\u76d6\u8bf7\u6c42\u9a8c\u8bc1\u5f02\u5e38 \u00b6 \u8bf7\u6c42\u4e2d\u5305\u542b\u65e0\u6548\u6570\u636e\u65f6\uff0c FastAPI \u5185\u90e8\u4f1a\u89e6\u53d1 RequestValidationError \u3002 \u8be5\u5f02\u5e38\u4e5f\u5185\u7f6e\u4e86\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002 \u8986\u76d6\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u65f6\u9700\u8981\u5bfc\u5165 RequestValidationError \uff0c\u5e76\u7528 @app.excption_handler(RequestValidationError) \u88c5\u9970\u5f02\u5e38\u5904\u7406\u5668\u3002 \u8fd9\u6837\uff0c\u5f02\u5e38\u5904\u7406\u5668\u5c31\u53ef\u4ee5\u63a5\u6536 Request \u4e0e\u5f02\u5e38\u3002 from fastapi import FastAPI , HTTPException from fastapi.exceptions import RequestValidationError from fastapi.responses import PlainTextResponse from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def http_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc . detail ), status_code = exc . status_code ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc ), status_code = 400 ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \u8bbf\u95ee /items/foo \uff0c\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u5185\u5bb9\u66ff\u6362\u4e86\u9ed8\u8ba4 JSON \u9519\u8bef\u4fe1\u606f\uff1a { \"detail\" : [ { \"loc\" : [ \"path\" , \"item_id\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] } \u4ee5\u4e0b\u662f\u6587\u672c\u683c\u5f0f\u7684\u9519\u8bef\u4fe1\u606f\uff1a 1 validation error path -> item_id value is not a valid integer (type=type_error.integer) RequestValidationError vs ValidationError \u00b6 \u8b66\u544a \u5982\u679c\u60a8\u89c9\u5f97\u73b0\u5728\u8fd8\u7528\u4e0d\u5230\u4ee5\u4e0b\u6280\u672f\u7ec6\u8282\uff0c\u53ef\u4ee5\u5148\u8df3\u8fc7\u4e0b\u9762\u7684\u5185\u5bb9\u3002 RequestValidationError \u662f Pydantic \u7684 ValidationError \u7684\u5b50\u7c7b\u3002 FastAPI \u8c03\u7528\u7684\u5c31\u662f RequestValidationError \u7c7b\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u5728 response_model \u4e2d\u4f7f\u7528 Pydantic \u6a21\u578b\uff0c\u4e14\u6570\u636e\u6709\u9519\u8bef\u65f6\uff0c\u5728\u65e5\u5fd7\u4e2d\u5c31\u4f1a\u770b\u5230\u8fd9\u4e2a\u9519\u8bef\u3002 \u4f46\u5ba2\u6237\u7aef\u6216\u7528\u6237\u770b\u4e0d\u5230\u8fd9\u4e2a\u9519\u8bef\u3002\u53cd\u4e4b\uff0c\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u7684\u662f HTTP \u72b6\u6001\u7801\u4e3a 500 \u7684\u300c\u5185\u90e8\u670d\u52a1\u5668\u9519\u8bef\u300d\u3002 \u8fd9\u662f\u56e0\u4e3a\u5728 \u54cd\u5e94 \u6216\u4ee3\u7801\uff08\u4e0d\u662f\u5728\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u91cc\uff09\u4e2d\u51fa\u73b0\u7684 Pydantic ValidationError \u662f\u4ee3\u7801\u7684 bug\u3002 \u4fee\u590d\u9519\u8bef\u65f6\uff0c\u5ba2\u6237\u7aef\u6216\u7528\u6237\u4e0d\u80fd\u8bbf\u95ee\u9519\u8bef\u7684\u5185\u90e8\u4fe1\u606f\uff0c\u5426\u5219\u4f1a\u9020\u6210\u5b89\u5168\u9690\u60a3\u3002 \u8986\u76d6 HTTPException \u9519\u8bef\u5904\u7406\u5668 \u00b6 \u540c\u7406\uff0c\u4e5f\u53ef\u4ee5\u8986\u76d6 HTTPException \u5904\u7406\u5668\u3002 \u4f8b\u5982\uff0c\u53ea\u4e3a\u9519\u8bef\u8fd4\u56de\u7eaf\u6587\u672c\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u8fd4\u56de JSON \u683c\u5f0f\u7684\u5185\u5bb9\uff1a from fastapi import FastAPI , HTTPException from fastapi.exceptions import RequestValidationError from fastapi.responses import PlainTextResponse from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def http_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc . detail ), status_code = exc . status_code ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc ), status_code = 400 ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \u6280\u672f\u7ec6\u8282 \u8fd8\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import PlainTextResponse \u3002 FastAPI \u63d0\u4f9b\u4e86\u4e0e starlette.responses \u76f8\u540c\u7684 fastapi.responses \u4f5c\u4e3a\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5927\u90e8\u5206\u54cd\u5e94\u90fd\u53ef\u4ee5\u76f4\u63a5\u4ece Starlette \u5bfc\u5165\u3002 \u4f7f\u7528 RequestValidationError \u7684\u8bf7\u6c42\u4f53 \u00b6 RequestValidationError \u5305\u542b\u5176\u63a5\u6536\u5230\u7684\u65e0\u6548\u6570\u636e\u8bf7\u6c42\u7684 body \u3002 \u5f00\u53d1\u65f6\uff0c\u53ef\u4ee5\u7528\u8fd9\u4e2a\u8bf7\u6c42\u4f53\u751f\u6210\u65e5\u5fd7\u3001\u8c03\u8bd5\u9519\u8bef\uff0c\u5e76\u8fd4\u56de\u7ed9\u7528\u6237\u3002 from fastapi import FastAPI , Request , status from fastapi.encoders import jsonable_encoder from fastapi.exceptions import RequestValidationError from fastapi.responses import JSONResponse from pydantic import BaseModel app = FastAPI () @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request : Request , exc : RequestValidationError ): return JSONResponse ( status_code = status . HTTP_422_UNPROCESSABLE_ENTITY , content = jsonable_encoder ({ \"detail\" : exc . errors (), \"body\" : exc . body }), ) class Item ( BaseModel ): title : str size : int @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \u73b0\u5728\u8bd5\u7740\u53d1\u9001\u4e00\u4e2a\u65e0\u6548\u7684 item \uff0c\u4f8b\u5982\uff1a { \"title\" : \"towel\" , \"size\" : \"XL\" } \u6536\u5230\u7684\u54cd\u5e94\u5305\u542b body \u4fe1\u606f\uff0c\u5e76\u8bf4\u660e\u6570\u636e\u662f\u65e0\u6548\u7684\uff1a { \"detail\" : [ { \"loc\" : [ \"body\" , \"size\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ], \"body\" : { \"title\" : \"towel\" , \"size\" : \"XL\" } } FastAPI HTTPException vs Starlette HTTPException \u00b6 FastAPI \u4e5f\u63d0\u4f9b\u4e86\u81ea\u6709\u7684 HTTPException \u3002 FastAPI \u7684 HTTPException \u7ee7\u627f\u81ea Starlette \u7684 HTTPException \u9519\u8bef\u7c7b\u3002 \u5b83\u4eec\u4e4b\u95f4\u7684\u552f\u4e00\u533a\u522b\u662f\uff0c FastAPI \u7684 HTTPException \u53ef\u4ee5\u5728\u54cd\u5e94\u4e2d\u6dfb\u52a0\u54cd\u5e94\u5934\u3002 OAuth 2.0 \u7b49\u5b89\u5168\u5de5\u5177\u9700\u8981\u5728\u5185\u90e8\u8c03\u7528\u8fd9\u4e9b\u54cd\u5e94\u5934\u3002 \u56e0\u6b64\u4f60\u53ef\u4ee5\u7ee7\u7eed\u50cf\u5e73\u5e38\u4e00\u6837\u5728\u4ee3\u7801\u4e2d\u89e6\u53d1 FastAPI \u7684 HTTPException \u3002 \u4f46\u6ce8\u518c\u5f02\u5e38\u5904\u7406\u5668\u65f6\uff0c\u5e94\u8be5\u6ce8\u518c\u5230\u6765\u81ea Starlette \u7684 HTTPException \u3002 \u8fd9\u6837\u505a\u662f\u4e3a\u4e86\uff0c\u5f53 Starlette \u7684\u5185\u90e8\u4ee3\u7801\u3001\u6269\u5c55\u6216\u63d2\u4ef6\u89e6\u53d1 Starlette HTTPException \u65f6\uff0c\u5904\u7406\u7a0b\u5e8f\u80fd\u591f\u6355\u83b7\u3001\u5e76\u5904\u7406\u6b64\u5f02\u5e38\u3002 \u6ce8\u610f\uff0c\u672c\u4f8b\u4ee3\u7801\u4e2d\u540c\u65f6\u4f7f\u7528\u4e86\u8fd9\u4e24\u4e2a HTTPException \uff0c\u6b64\u65f6\uff0c\u8981\u628a Starlette \u7684 HTTPException \u547d\u540d\u4e3a StarletteHTTPException \uff1a from starlette.exceptions import HTTPException as StarletteHTTPException \u590d\u7528 FastAPI \u5f02\u5e38\u5904\u7406\u5668 \u00b6 FastAPI \u652f\u6301\u5148\u5bf9\u5f02\u5e38\u8fdb\u884c\u67d0\u4e9b\u5904\u7406\uff0c\u7136\u540e\u518d\u4f7f\u7528 FastAPI \u4e2d\u5904\u7406\u8be5\u5f02\u5e38\u7684\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002 \u4ece fastapi.exception_handlers \u4e2d\u5bfc\u5165\u8981\u590d\u7528\u7684\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\uff1a from fastapi import FastAPI , HTTPException from fastapi.exception_handlers import ( http_exception_handler , request_validation_exception_handler , ) from fastapi.exceptions import RequestValidationError from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def custom_http_exception_handler ( request , exc ): print ( f \"OMG! An HTTP error!: { repr ( exc ) } \" ) return await http_exception_handler ( request , exc ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): print ( f \"OMG! The client sent invalid data!: { exc } \" ) return await request_validation_exception_handler ( request , exc ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \u867d\u7136\uff0c\u672c\u4f8b\u53ea\u662f\u8f93\u51fa\u4e86\u5938\u5927\u5176\u8bcd\u7684\u9519\u8bef\u4fe1\u606f\u3002 \u4f46\u4e5f\u8db3\u4ee5\u8bf4\u660e\uff0c\u53ef\u4ee5\u5728\u5904\u7406\u5f02\u5e38\u4e4b\u540e\u518d\u590d\u7528\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\u5668\u3002","title":"\u5904\u7406\u9519\u8bef"},{"location":"tutorial/handling-errors/#_1","text":"\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u9519\u8bef\u63d0\u793a\u3002 \u8fd9\u91cc\u6240\u8c13\u7684\u5ba2\u6237\u7aef\u5305\u62ec\u524d\u7aef\u6d4f\u89c8\u5668\u3001\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u3001\u7269\u8054\u7f51\u8bbe\u5907\u7b49\u3002 \u9700\u8981\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u9519\u8bef\u63d0\u793a\u7684\u573a\u666f\u4e3b\u8981\u5982\u4e0b\uff1a \u5ba2\u6237\u7aef\u6ca1\u6709\u6267\u884c\u64cd\u4f5c\u7684\u6743\u9650 \u5ba2\u6237\u7aef\u6ca1\u6709\u8bbf\u95ee\u8d44\u6e90\u7684\u6743\u9650 \u5ba2\u6237\u7aef\u8981\u8bbf\u95ee\u7684\u9879\u76ee\u4e0d\u5b58\u5728 \u7b49\u7b49 ... \u9047\u5230\u8fd9\u4e9b\u60c5\u51b5\u65f6\uff0c\u901a\u5e38\u8981\u8fd4\u56de 4XX \uff08400 \u81f3 499\uff09 HTTP \u72b6\u6001\u7801 \u3002 4XX \u72b6\u6001\u7801\u4e0e\u8868\u793a\u8bf7\u6c42\u6210\u529f\u7684 2XX \uff08200 \u81f3 299\uff09 HTTP \u72b6\u6001\u7801\u7c7b\u4f3c\u3002 \u53ea\u4e0d\u8fc7\uff0c 4XX \u72b6\u6001\u7801\u8868\u793a\u5ba2\u6237\u7aef\u53d1\u751f\u7684\u9519\u8bef\u3002 \u5927\u5bb6\u90fd\u77e5\u9053 \u300c404 Not Found\u300d \u9519\u8bef\uff0c\u8fd8\u6709\u8c03\u4f83\u8fd9\u4e2a\u9519\u8bef\u7684\u7b11\u8bdd\u5427\uff1f","title":"\u5904\u7406\u9519\u8bef"},{"location":"tutorial/handling-errors/#httpexception","text":"\u5411\u5ba2\u6237\u7aef\u8fd4\u56de HTTP \u9519\u8bef\u54cd\u5e94\uff0c\u53ef\u4ee5\u4f7f\u7528 HTTPException \u3002","title":"\u4f7f\u7528 HTTPException"},{"location":"tutorial/handling-errors/#httpexception_1","text":"from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"item\" : items [ item_id ]}","title":"\u5bfc\u5165 HTTPException"},{"location":"tutorial/handling-errors/#httpexception_2","text":"HTTPException \u662f\u989d\u5916\u5305\u542b\u4e86\u548c API \u6709\u5173\u6570\u636e\u7684\u5e38\u89c4 Python \u5f02\u5e38\u3002 \u56e0\u4e3a\u662f Python \u5f02\u5e38\uff0c\u6240\u4ee5\u4e0d\u80fd return \uff0c\u53ea\u80fd raise \u3002 \u5982\u5728\u8c03\u7528 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u91cc\u7684\u5de5\u5177\u51fd\u6570\u65f6\uff0c\u89e6\u53d1\u4e86 HTTPException \uff0cFastAPI \u5c31\u4e0d\u518d\u7ee7\u7eed\u6267\u884c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u7684\u540e\u7eed\u4ee3\u7801\uff0c\u800c\u662f\u7acb\u5373\u7ec8\u6b62\u8bf7\u6c42\uff0c\u5e76\u628a HTTPException \u7684 HTTP \u9519\u8bef\u53d1\u9001\u81f3\u5ba2\u6237\u7aef\u3002 \u5728\u4ecb\u7ecd\u4f9d\u8d56\u9879\u4e0e\u5b89\u5168\u7684\u7ae0\u8282\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u7528 raise \u5f02\u5e38\u4ee3\u66ff return \u503c\u7684\u4f18\u52bf\u3002 \u672c\u4f8b\u4e2d\uff0c\u5ba2\u6237\u7aef\u7528 ID \u8bf7\u6c42\u7684 item \u4e0d\u5b58\u5728\u65f6\uff0c\u89e6\u53d1\u72b6\u6001\u7801\u4e3a 404 \u7684\u5f02\u5e38\uff1a from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"item\" : items [ item_id ]}","title":"\u89e6\u53d1 HTTPException"},{"location":"tutorial/handling-errors/#_2","text":"\u8bf7\u6c42\u4e3a http://example.com/items/foo \uff08 item_id \u4e3a \u300cfoo\u300d \uff09\u65f6\uff0c\u5ba2\u6237\u7aef\u4f1a\u63a5\u6536\u5230 HTTP \u72b6\u6001\u7801 - 200 \u53ca\u5982\u4e0b JSON \u54cd\u5e94\u7ed3\u679c\uff1a { \"item\" : \"The Foo Wrestlers\" } \u4f46\u5982\u679c\u5ba2\u6237\u7aef\u8bf7\u6c42 http://example.com/items/bar \uff08 item_id \u300cbar\u300d \u4e0d\u5b58\u5728\u65f6\uff09\uff0c\u5219\u4f1a\u63a5\u6536\u5230 HTTP \u72b6\u6001\u7801 - 404\uff08\u300c\u672a\u627e\u5230\u300d\u9519\u8bef\uff09\u53ca\u5982\u4e0b JSON \u54cd\u5e94\u7ed3\u679c\uff1a { \"detail\" : \"Item not found\" } \u63d0\u793a \u89e6\u53d1 HTTPException \u65f6\uff0c\u53ef\u4ee5\u7528\u53c2\u6570 detail \u4f20\u9012\u4efb\u4f55\u80fd\u8f6c\u6362\u4e3a JSON \u7684\u503c\uff0c\u4e0d\u4ec5\u9650\u4e8e str \u3002 \u8fd8\u652f\u6301\u4f20\u9012 dict \u3001 list \u7b49\u6570\u636e\u7ed3\u6784\u3002 FastAPI \u80fd\u81ea\u52a8\u5904\u7406\u8fd9\u4e9b\u6570\u636e\uff0c\u5e76\u5c06\u4e4b\u8f6c\u6362\u4e3a JSON\u3002","title":"\u54cd\u5e94\u7ed3\u679c"},{"location":"tutorial/handling-errors/#_3","text":"\u6709\u4e9b\u573a\u666f\u4e0b\u8981\u4e3a HTTP \u9519\u8bef\u6dfb\u52a0\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\u3002\u4f8b\u5982\uff0c\u51fa\u4e8e\u67d0\u4e9b\u65b9\u9762\u7684\u5b89\u5168\u9700\u8981\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\u53ef\u80fd\u4e0d\u4f1a\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u76f4\u63a5\u4f7f\u7528\u54cd\u5e94\u5934\u3002 \u4f46\u5bf9\u4e8e\u67d0\u4e9b\u9ad8\u7ea7\u5e94\u7528\u573a\u666f\uff0c\u8fd8\u662f\u9700\u8981\u6dfb\u52a0\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\uff1a from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items-header/ {item_id} \" ) async def read_item_header ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" , headers = { \"X-Error\" : \"There goes my error\" }, ) return { \"item\" : items [ item_id ]}","title":"\u6dfb\u52a0\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934"},{"location":"tutorial/handling-errors/#_4","text":"\u6dfb\u52a0\u81ea\u5b9a\u4e49\u5904\u7406\u5668\uff0c\u8981\u4f7f\u7528 Starlette \u7684\u5f02\u5e38\u5de5\u5177 \u3002 \u5047\u8bbe\u8981\u89e6\u53d1\u7684\u81ea\u5b9a\u4e49\u5f02\u5e38\u53eb\u4f5c UnicornException \u3002 \u4e14\u9700\u8981 FastAPI \u5b9e\u73b0\u5168\u5c40\u5904\u7406\u8be5\u5f02\u5e38\u3002 \u6b64\u65f6\uff0c\u53ef\u4ee5\u7528 @app.exception_handler() \u6dfb\u52a0\u81ea\u5b9a\u4e49\u5f02\u5e38\u63a7\u5236\u5668\uff1a from fastapi import FastAPI , Request from fastapi.responses import JSONResponse class UnicornException ( Exception ): def __init__ ( self , name : str ): self . name = name app = FastAPI () @app . exception_handler ( UnicornException ) async def unicorn_exception_handler ( request : Request , exc : UnicornException ): return JSONResponse ( status_code = 418 , content = { \"message\" : f \"Oops! { exc . name } did something. There goes a rainbow...\" }, ) @app . get ( \"/unicorns/ {name} \" ) async def read_unicorn ( name : str ): if name == \"yolo\" : raise UnicornException ( name = name ) return { \"unicorn_name\" : name } \u8bf7\u6c42 /unicorns/yolo \u65f6\uff0c\u8def\u5f84\u64cd\u4f5c\u4f1a\u89e6\u53d1 UnicornException \u3002 \u4f46\u8be5\u5f02\u5e38\u5c06\u4f1a\u88ab unicorn_exception_handler \u5904\u7406\u3002 \u63a5\u6536\u5230\u7684\u9519\u8bef\u4fe1\u606f\u6e05\u6670\u660e\u4e86\uff0cHTTP \u72b6\u6001\u7801\u4e3a 418 \uff0cJSON \u5185\u5bb9\u5982\u4e0b\uff1a { \"message\" : \"Oops! yolo did something. There goes a rainbow...\" } \u6280\u672f\u7ec6\u8282 from starlette.requests import Request \u548c from starlette.responses import JSONResponse \u4e5f\u53ef\u4ee5\u7528\u4e8e\u5bfc\u5165 Request \u548c JSONResponse \u3002 FastAPI \u63d0\u4f9b\u4e86\u4e0e starlette.responses \u76f8\u540c\u7684 fastapi.responses \u4f5c\u4e3a\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5927\u90e8\u5206\u54cd\u5e94\u64cd\u4f5c\u90fd\u53ef\u4ee5\u76f4\u63a5\u4ece Starlette \u5bfc\u5165\u3002\u540c\u7406\uff0c Request \u4e5f\u662f\u5982\u6b64\u3002","title":"\u5b89\u88c5\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u5668"},{"location":"tutorial/handling-errors/#_5","text":"FastAPI \u81ea\u5e26\u4e86\u4e00\u4e9b\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002 \u89e6\u53d1 HTTPException \u6216\u8bf7\u6c42\u65e0\u6548\u6570\u636e\u65f6\uff0c\u8fd9\u4e9b\u5904\u7406\u5668\u8fd4\u56de\u9ed8\u8ba4\u7684 JSON \u54cd\u5e94\u7ed3\u679c\u3002 \u4e0d\u8fc7\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u81ea\u5b9a\u4e49\u5904\u7406\u5668\u8986\u76d6\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002","title":"\u8986\u76d6\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668"},{"location":"tutorial/handling-errors/#_6","text":"\u8bf7\u6c42\u4e2d\u5305\u542b\u65e0\u6548\u6570\u636e\u65f6\uff0c FastAPI \u5185\u90e8\u4f1a\u89e6\u53d1 RequestValidationError \u3002 \u8be5\u5f02\u5e38\u4e5f\u5185\u7f6e\u4e86\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002 \u8986\u76d6\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u65f6\u9700\u8981\u5bfc\u5165 RequestValidationError \uff0c\u5e76\u7528 @app.excption_handler(RequestValidationError) \u88c5\u9970\u5f02\u5e38\u5904\u7406\u5668\u3002 \u8fd9\u6837\uff0c\u5f02\u5e38\u5904\u7406\u5668\u5c31\u53ef\u4ee5\u63a5\u6536 Request \u4e0e\u5f02\u5e38\u3002 from fastapi import FastAPI , HTTPException from fastapi.exceptions import RequestValidationError from fastapi.responses import PlainTextResponse from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def http_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc . detail ), status_code = exc . status_code ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc ), status_code = 400 ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \u8bbf\u95ee /items/foo \uff0c\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u5185\u5bb9\u66ff\u6362\u4e86\u9ed8\u8ba4 JSON \u9519\u8bef\u4fe1\u606f\uff1a { \"detail\" : [ { \"loc\" : [ \"path\" , \"item_id\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] } \u4ee5\u4e0b\u662f\u6587\u672c\u683c\u5f0f\u7684\u9519\u8bef\u4fe1\u606f\uff1a 1 validation error path -> item_id value is not a valid integer (type=type_error.integer)","title":"\u8986\u76d6\u8bf7\u6c42\u9a8c\u8bc1\u5f02\u5e38"},{"location":"tutorial/handling-errors/#requestvalidationerror-vs-validationerror","text":"\u8b66\u544a \u5982\u679c\u60a8\u89c9\u5f97\u73b0\u5728\u8fd8\u7528\u4e0d\u5230\u4ee5\u4e0b\u6280\u672f\u7ec6\u8282\uff0c\u53ef\u4ee5\u5148\u8df3\u8fc7\u4e0b\u9762\u7684\u5185\u5bb9\u3002 RequestValidationError \u662f Pydantic \u7684 ValidationError \u7684\u5b50\u7c7b\u3002 FastAPI \u8c03\u7528\u7684\u5c31\u662f RequestValidationError \u7c7b\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u5728 response_model \u4e2d\u4f7f\u7528 Pydantic \u6a21\u578b\uff0c\u4e14\u6570\u636e\u6709\u9519\u8bef\u65f6\uff0c\u5728\u65e5\u5fd7\u4e2d\u5c31\u4f1a\u770b\u5230\u8fd9\u4e2a\u9519\u8bef\u3002 \u4f46\u5ba2\u6237\u7aef\u6216\u7528\u6237\u770b\u4e0d\u5230\u8fd9\u4e2a\u9519\u8bef\u3002\u53cd\u4e4b\uff0c\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u7684\u662f HTTP \u72b6\u6001\u7801\u4e3a 500 \u7684\u300c\u5185\u90e8\u670d\u52a1\u5668\u9519\u8bef\u300d\u3002 \u8fd9\u662f\u56e0\u4e3a\u5728 \u54cd\u5e94 \u6216\u4ee3\u7801\uff08\u4e0d\u662f\u5728\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u91cc\uff09\u4e2d\u51fa\u73b0\u7684 Pydantic ValidationError \u662f\u4ee3\u7801\u7684 bug\u3002 \u4fee\u590d\u9519\u8bef\u65f6\uff0c\u5ba2\u6237\u7aef\u6216\u7528\u6237\u4e0d\u80fd\u8bbf\u95ee\u9519\u8bef\u7684\u5185\u90e8\u4fe1\u606f\uff0c\u5426\u5219\u4f1a\u9020\u6210\u5b89\u5168\u9690\u60a3\u3002","title":"RequestValidationError vs ValidationError"},{"location":"tutorial/handling-errors/#httpexception_3","text":"\u540c\u7406\uff0c\u4e5f\u53ef\u4ee5\u8986\u76d6 HTTPException \u5904\u7406\u5668\u3002 \u4f8b\u5982\uff0c\u53ea\u4e3a\u9519\u8bef\u8fd4\u56de\u7eaf\u6587\u672c\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u8fd4\u56de JSON \u683c\u5f0f\u7684\u5185\u5bb9\uff1a from fastapi import FastAPI , HTTPException from fastapi.exceptions import RequestValidationError from fastapi.responses import PlainTextResponse from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def http_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc . detail ), status_code = exc . status_code ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc ), status_code = 400 ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \u6280\u672f\u7ec6\u8282 \u8fd8\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import PlainTextResponse \u3002 FastAPI \u63d0\u4f9b\u4e86\u4e0e starlette.responses \u76f8\u540c\u7684 fastapi.responses \u4f5c\u4e3a\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5927\u90e8\u5206\u54cd\u5e94\u90fd\u53ef\u4ee5\u76f4\u63a5\u4ece Starlette \u5bfc\u5165\u3002","title":"\u8986\u76d6 HTTPException \u9519\u8bef\u5904\u7406\u5668"},{"location":"tutorial/handling-errors/#requestvalidationerror","text":"RequestValidationError \u5305\u542b\u5176\u63a5\u6536\u5230\u7684\u65e0\u6548\u6570\u636e\u8bf7\u6c42\u7684 body \u3002 \u5f00\u53d1\u65f6\uff0c\u53ef\u4ee5\u7528\u8fd9\u4e2a\u8bf7\u6c42\u4f53\u751f\u6210\u65e5\u5fd7\u3001\u8c03\u8bd5\u9519\u8bef\uff0c\u5e76\u8fd4\u56de\u7ed9\u7528\u6237\u3002 from fastapi import FastAPI , Request , status from fastapi.encoders import jsonable_encoder from fastapi.exceptions import RequestValidationError from fastapi.responses import JSONResponse from pydantic import BaseModel app = FastAPI () @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request : Request , exc : RequestValidationError ): return JSONResponse ( status_code = status . HTTP_422_UNPROCESSABLE_ENTITY , content = jsonable_encoder ({ \"detail\" : exc . errors (), \"body\" : exc . body }), ) class Item ( BaseModel ): title : str size : int @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \u73b0\u5728\u8bd5\u7740\u53d1\u9001\u4e00\u4e2a\u65e0\u6548\u7684 item \uff0c\u4f8b\u5982\uff1a { \"title\" : \"towel\" , \"size\" : \"XL\" } \u6536\u5230\u7684\u54cd\u5e94\u5305\u542b body \u4fe1\u606f\uff0c\u5e76\u8bf4\u660e\u6570\u636e\u662f\u65e0\u6548\u7684\uff1a { \"detail\" : [ { \"loc\" : [ \"body\" , \"size\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ], \"body\" : { \"title\" : \"towel\" , \"size\" : \"XL\" } }","title":"\u4f7f\u7528 RequestValidationError \u7684\u8bf7\u6c42\u4f53"},{"location":"tutorial/handling-errors/#fastapi-httpexception-vs-starlette-httpexception","text":"FastAPI \u4e5f\u63d0\u4f9b\u4e86\u81ea\u6709\u7684 HTTPException \u3002 FastAPI \u7684 HTTPException \u7ee7\u627f\u81ea Starlette \u7684 HTTPException \u9519\u8bef\u7c7b\u3002 \u5b83\u4eec\u4e4b\u95f4\u7684\u552f\u4e00\u533a\u522b\u662f\uff0c FastAPI \u7684 HTTPException \u53ef\u4ee5\u5728\u54cd\u5e94\u4e2d\u6dfb\u52a0\u54cd\u5e94\u5934\u3002 OAuth 2.0 \u7b49\u5b89\u5168\u5de5\u5177\u9700\u8981\u5728\u5185\u90e8\u8c03\u7528\u8fd9\u4e9b\u54cd\u5e94\u5934\u3002 \u56e0\u6b64\u4f60\u53ef\u4ee5\u7ee7\u7eed\u50cf\u5e73\u5e38\u4e00\u6837\u5728\u4ee3\u7801\u4e2d\u89e6\u53d1 FastAPI \u7684 HTTPException \u3002 \u4f46\u6ce8\u518c\u5f02\u5e38\u5904\u7406\u5668\u65f6\uff0c\u5e94\u8be5\u6ce8\u518c\u5230\u6765\u81ea Starlette \u7684 HTTPException \u3002 \u8fd9\u6837\u505a\u662f\u4e3a\u4e86\uff0c\u5f53 Starlette \u7684\u5185\u90e8\u4ee3\u7801\u3001\u6269\u5c55\u6216\u63d2\u4ef6\u89e6\u53d1 Starlette HTTPException \u65f6\uff0c\u5904\u7406\u7a0b\u5e8f\u80fd\u591f\u6355\u83b7\u3001\u5e76\u5904\u7406\u6b64\u5f02\u5e38\u3002 \u6ce8\u610f\uff0c\u672c\u4f8b\u4ee3\u7801\u4e2d\u540c\u65f6\u4f7f\u7528\u4e86\u8fd9\u4e24\u4e2a HTTPException \uff0c\u6b64\u65f6\uff0c\u8981\u628a Starlette \u7684 HTTPException \u547d\u540d\u4e3a StarletteHTTPException \uff1a from starlette.exceptions import HTTPException as StarletteHTTPException","title":"FastAPI HTTPException vs Starlette HTTPException"},{"location":"tutorial/handling-errors/#fastapi","text":"FastAPI \u652f\u6301\u5148\u5bf9\u5f02\u5e38\u8fdb\u884c\u67d0\u4e9b\u5904\u7406\uff0c\u7136\u540e\u518d\u4f7f\u7528 FastAPI \u4e2d\u5904\u7406\u8be5\u5f02\u5e38\u7684\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002 \u4ece fastapi.exception_handlers \u4e2d\u5bfc\u5165\u8981\u590d\u7528\u7684\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\uff1a from fastapi import FastAPI , HTTPException from fastapi.exception_handlers import ( http_exception_handler , request_validation_exception_handler , ) from fastapi.exceptions import RequestValidationError from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def custom_http_exception_handler ( request , exc ): print ( f \"OMG! An HTTP error!: { repr ( exc ) } \" ) return await http_exception_handler ( request , exc ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): print ( f \"OMG! The client sent invalid data!: { exc } \" ) return await request_validation_exception_handler ( request , exc ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \u867d\u7136\uff0c\u672c\u4f8b\u53ea\u662f\u8f93\u51fa\u4e86\u5938\u5927\u5176\u8bcd\u7684\u9519\u8bef\u4fe1\u606f\u3002 \u4f46\u4e5f\u8db3\u4ee5\u8bf4\u660e\uff0c\u53ef\u4ee5\u5728\u5904\u7406\u5f02\u5e38\u4e4b\u540e\u518d\u590d\u7528\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\u5668\u3002","title":"\u590d\u7528 FastAPI \u5f02\u5e38\u5904\u7406\u5668"},{"location":"tutorial/header-params/","text":"Header \u53c2\u6570 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\u5b9a\u4e49 Query , Path \u548c Cookie \u53c2\u6570\u4e00\u6837\u7684\u65b9\u6cd5\u5b9a\u4e49 Header \u53c2\u6570\u3002 \u5bfc\u5165 Header \u00b6 \u9996\u5148\u5bfc\u5165 Header : from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : Union [ str , None ] = Header ( default = None )): return { \"User-Agent\" : user_agent } \u58f0\u660e Header \u53c2\u6570 \u00b6 \u7136\u540e\u4f7f\u7528\u548c Path , Query and Cookie \u4e00\u6837\u7684\u7ed3\u6784\u5b9a\u4e49 header \u53c2\u6570 \u7b2c\u4e00\u4e2a\u503c\u662f\u9ed8\u8ba4\u503c\uff0c\u4f60\u53ef\u4ee5\u4f20\u9012\u6240\u6709\u7684\u989d\u5916\u9a8c\u8bc1\u6216\u6ce8\u91ca\u53c2\u6570\uff1a from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : Union [ str , None ] = Header ( default = None )): return { \"User-Agent\" : user_agent } \u6280\u672f\u7ec6\u8282 Header \u662f Path , Query \u548c Cookie \u7684\u5144\u5f1f\u7c7b\u578b\u3002\u5b83\u4e5f\u7ee7\u627f\u81ea\u901a\u7528\u7684 Param \u7c7b. \u4f46\u662f\u8bf7\u8bb0\u5f97\uff0c\u5f53\u4f60\u4ece fastapi \u5bfc\u5165 Query , Path , Header , \u6216\u5176\u4ed6\u65f6\uff0c\u5b9e\u9645\u4e0a\u5bfc\u5165\u7684\u662f\u8fd4\u56de\u7279\u5b9a\u7c7b\u578b\u7684\u51fd\u6570\u3002 Info \u4e3a\u4e86\u58f0\u660eheaders\uff0c \u4f60\u9700\u8981\u4f7f\u7528 Header , \u56e0\u4e3a\u5426\u5219\u53c2\u6570\u5c06\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570\u3002 \u81ea\u52a8\u8f6c\u6362 \u00b6 Header \u5728 Path , Query \u548c Cookie \u63d0\u4f9b\u7684\u529f\u80fd\u4e4b\u4e0a\u6709\u4e00\u70b9\u989d\u5916\u7684\u529f\u80fd\u3002 \u5927\u591a\u6570\u6807\u51c6\u7684headers\u7528 \"\u8fde\u5b57\u7b26\" \u5206\u9694\uff0c\u4e5f\u79f0\u4e3a \"\u51cf\u53f7\" ( - )\u3002 \u4f46\u662f\u50cf user-agent \u8fd9\u6837\u7684\u53d8\u91cf\u5728Python\u4e2d\u662f\u65e0\u6548\u7684\u3002 \u56e0\u6b64, \u9ed8\u8ba4\u60c5\u51b5\u4e0b, Header \u5c06\u628a\u53c2\u6570\u540d\u79f0\u7684\u5b57\u7b26\u4ece\u4e0b\u5212\u7ebf ( _ ) \u8f6c\u6362\u4e3a\u8fde\u5b57\u7b26 ( - ) \u6765\u63d0\u53d6\u5e76\u8bb0\u5f55 headers. \u540c\u65f6\uff0cHTTP headers \u662f\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u7684\uff0c\u56e0\u6b64\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6Python\u6837\u5f0f(\u4e5f\u79f0\u4e3a \"snake_case\")\u58f0\u660e\u5b83\u4eec\u3002 \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u50cf\u901a\u5e38\u5728Python\u4ee3\u7801\u4e2d\u90a3\u6837\u4f7f\u7528 user_agent \uff0c\u800c\u4e0d\u9700\u8981\u5c06\u9996\u5b57\u6bcd\u5927\u5199\u4e3a User_Agent \u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\u3002 \u5982\u679c\u51fa\u4e8e\u67d0\u4e9b\u539f\u56e0\uff0c\u4f60\u9700\u8981\u7981\u7528\u4e0b\u5212\u7ebf\u5230\u8fde\u5b57\u7b26\u7684\u81ea\u52a8\u8f6c\u6362\uff0c\u8bbe\u7f6e Header \u7684\u53c2\u6570 convert_underscores \u4e3a False : from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( strange_header : Union [ str , None ] = Header ( default = None , convert_underscores = False ) ): return { \"strange_header\" : strange_header } Warning \u5728\u8bbe\u7f6e convert_underscores \u4e3a False \u4e4b\u524d\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u4e00\u4e9bHTTP\u4ee3\u7406\u548c\u670d\u52a1\u5668\u4e0d\u5141\u8bb8\u4f7f\u7528\u5e26\u6709\u4e0b\u5212\u7ebf\u7684headers\u3002 \u91cd\u590d\u7684 headers \u00b6 \u6709\u53ef\u80fd\u6536\u5230\u91cd\u590d\u7684headers\u3002\u8fd9\u610f\u5473\u7740\uff0c\u76f8\u540c\u7684header\u5177\u6709\u591a\u4e2a\u503c\u3002 \u60a8\u53ef\u4ee5\u5728\u7c7b\u578b\u58f0\u660e\u4e2d\u4f7f\u7528\u4e00\u4e2alist\u6765\u5b9a\u4e49\u8fd9\u4e9b\u60c5\u51b5\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2aPython list \u7684\u5f62\u5f0f\u83b7\u5f97\u91cd\u590dheader\u7684\u6240\u6709\u503c\u3002 \u6bd4\u5982, \u4e3a\u4e86\u58f0\u660e\u4e00\u4e2a X-Token header \u53ef\u4ee5\u51fa\u73b0\u591a\u6b21\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a from typing import List , Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( x_token : Union [ List [ str ], None ] = Header ( default = None )): return { \"X-Token values\" : x_token } \u5982\u679c\u4f60\u4e0e \u8def\u5f84\u64cd\u4f5c \u901a\u4fe1\u65f6\u53d1\u9001\u4e24\u4e2aHTTP headers\uff0c\u5c31\u50cf\uff1a X-Token: foo X-Token: bar \u54cd\u5e94\u4f1a\u662f: { \"X-Token values\" : [ \"bar\" , \"foo\" ] } \u56de\u987e \u00b6 \u4f7f\u7528 Header \u6765\u58f0\u660e header , \u4f7f\u7528\u548c Query , Path \u4e0e Cookie \u76f8\u540c\u7684\u6a21\u5f0f\u3002 \u4e0d\u7528\u62c5\u5fc3\u53d8\u91cf\u4e2d\u7684\u4e0b\u5212\u7ebf\uff0c FastAPI \u4f1a\u8d1f\u8d23\u8f6c\u6362\u5b83\u4eec\u3002","title":"Header \u53c2\u6570"},{"location":"tutorial/header-params/#header","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b9a\u4e49 Query , Path \u548c Cookie \u53c2\u6570\u4e00\u6837\u7684\u65b9\u6cd5\u5b9a\u4e49 Header \u53c2\u6570\u3002","title":"Header \u53c2\u6570"},{"location":"tutorial/header-params/#header_1","text":"\u9996\u5148\u5bfc\u5165 Header : from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : Union [ str , None ] = Header ( default = None )): return { \"User-Agent\" : user_agent }","title":"\u5bfc\u5165 Header"},{"location":"tutorial/header-params/#header_2","text":"\u7136\u540e\u4f7f\u7528\u548c Path , Query and Cookie \u4e00\u6837\u7684\u7ed3\u6784\u5b9a\u4e49 header \u53c2\u6570 \u7b2c\u4e00\u4e2a\u503c\u662f\u9ed8\u8ba4\u503c\uff0c\u4f60\u53ef\u4ee5\u4f20\u9012\u6240\u6709\u7684\u989d\u5916\u9a8c\u8bc1\u6216\u6ce8\u91ca\u53c2\u6570\uff1a from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : Union [ str , None ] = Header ( default = None )): return { \"User-Agent\" : user_agent } \u6280\u672f\u7ec6\u8282 Header \u662f Path , Query \u548c Cookie \u7684\u5144\u5f1f\u7c7b\u578b\u3002\u5b83\u4e5f\u7ee7\u627f\u81ea\u901a\u7528\u7684 Param \u7c7b. \u4f46\u662f\u8bf7\u8bb0\u5f97\uff0c\u5f53\u4f60\u4ece fastapi \u5bfc\u5165 Query , Path , Header , \u6216\u5176\u4ed6\u65f6\uff0c\u5b9e\u9645\u4e0a\u5bfc\u5165\u7684\u662f\u8fd4\u56de\u7279\u5b9a\u7c7b\u578b\u7684\u51fd\u6570\u3002 Info \u4e3a\u4e86\u58f0\u660eheaders\uff0c \u4f60\u9700\u8981\u4f7f\u7528 Header , \u56e0\u4e3a\u5426\u5219\u53c2\u6570\u5c06\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570\u3002","title":"\u58f0\u660e Header \u53c2\u6570"},{"location":"tutorial/header-params/#_1","text":"Header \u5728 Path , Query \u548c Cookie \u63d0\u4f9b\u7684\u529f\u80fd\u4e4b\u4e0a\u6709\u4e00\u70b9\u989d\u5916\u7684\u529f\u80fd\u3002 \u5927\u591a\u6570\u6807\u51c6\u7684headers\u7528 \"\u8fde\u5b57\u7b26\" \u5206\u9694\uff0c\u4e5f\u79f0\u4e3a \"\u51cf\u53f7\" ( - )\u3002 \u4f46\u662f\u50cf user-agent \u8fd9\u6837\u7684\u53d8\u91cf\u5728Python\u4e2d\u662f\u65e0\u6548\u7684\u3002 \u56e0\u6b64, \u9ed8\u8ba4\u60c5\u51b5\u4e0b, Header \u5c06\u628a\u53c2\u6570\u540d\u79f0\u7684\u5b57\u7b26\u4ece\u4e0b\u5212\u7ebf ( _ ) \u8f6c\u6362\u4e3a\u8fde\u5b57\u7b26 ( - ) \u6765\u63d0\u53d6\u5e76\u8bb0\u5f55 headers. \u540c\u65f6\uff0cHTTP headers \u662f\u5927\u5c0f\u5199\u4e0d\u654f\u611f\u7684\uff0c\u56e0\u6b64\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6Python\u6837\u5f0f(\u4e5f\u79f0\u4e3a \"snake_case\")\u58f0\u660e\u5b83\u4eec\u3002 \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u50cf\u901a\u5e38\u5728Python\u4ee3\u7801\u4e2d\u90a3\u6837\u4f7f\u7528 user_agent \uff0c\u800c\u4e0d\u9700\u8981\u5c06\u9996\u5b57\u6bcd\u5927\u5199\u4e3a User_Agent \u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\u3002 \u5982\u679c\u51fa\u4e8e\u67d0\u4e9b\u539f\u56e0\uff0c\u4f60\u9700\u8981\u7981\u7528\u4e0b\u5212\u7ebf\u5230\u8fde\u5b57\u7b26\u7684\u81ea\u52a8\u8f6c\u6362\uff0c\u8bbe\u7f6e Header \u7684\u53c2\u6570 convert_underscores \u4e3a False : from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( strange_header : Union [ str , None ] = Header ( default = None , convert_underscores = False ) ): return { \"strange_header\" : strange_header } Warning \u5728\u8bbe\u7f6e convert_underscores \u4e3a False \u4e4b\u524d\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u4e00\u4e9bHTTP\u4ee3\u7406\u548c\u670d\u52a1\u5668\u4e0d\u5141\u8bb8\u4f7f\u7528\u5e26\u6709\u4e0b\u5212\u7ebf\u7684headers\u3002","title":"\u81ea\u52a8\u8f6c\u6362"},{"location":"tutorial/header-params/#headers","text":"\u6709\u53ef\u80fd\u6536\u5230\u91cd\u590d\u7684headers\u3002\u8fd9\u610f\u5473\u7740\uff0c\u76f8\u540c\u7684header\u5177\u6709\u591a\u4e2a\u503c\u3002 \u60a8\u53ef\u4ee5\u5728\u7c7b\u578b\u58f0\u660e\u4e2d\u4f7f\u7528\u4e00\u4e2alist\u6765\u5b9a\u4e49\u8fd9\u4e9b\u60c5\u51b5\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2aPython list \u7684\u5f62\u5f0f\u83b7\u5f97\u91cd\u590dheader\u7684\u6240\u6709\u503c\u3002 \u6bd4\u5982, \u4e3a\u4e86\u58f0\u660e\u4e00\u4e2a X-Token header \u53ef\u4ee5\u51fa\u73b0\u591a\u6b21\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a from typing import List , Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( x_token : Union [ List [ str ], None ] = Header ( default = None )): return { \"X-Token values\" : x_token } \u5982\u679c\u4f60\u4e0e \u8def\u5f84\u64cd\u4f5c \u901a\u4fe1\u65f6\u53d1\u9001\u4e24\u4e2aHTTP headers\uff0c\u5c31\u50cf\uff1a X-Token: foo X-Token: bar \u54cd\u5e94\u4f1a\u662f: { \"X-Token values\" : [ \"bar\" , \"foo\" ] }","title":"\u91cd\u590d\u7684 headers"},{"location":"tutorial/header-params/#_2","text":"\u4f7f\u7528 Header \u6765\u58f0\u660e header , \u4f7f\u7528\u548c Query , Path \u4e0e Cookie \u76f8\u540c\u7684\u6a21\u5f0f\u3002 \u4e0d\u7528\u62c5\u5fc3\u53d8\u91cf\u4e2d\u7684\u4e0b\u5212\u7ebf\uff0c FastAPI \u4f1a\u8d1f\u8d23\u8f6c\u6362\u5b83\u4eec\u3002","title":"\u56de\u987e"},{"location":"tutorial/metadata/","text":"\u5143\u6570\u636e\u548c\u6587\u6863 URL \u00b6 \u4f60\u53ef\u4ee5\u5728 FastAPI \u5e94\u7528\u4e2d\u81ea\u5b9a\u4e49\u51e0\u4e2a\u5143\u6570\u636e\u914d\u7f6e\u3002 \u6807\u9898\u3001\u63cf\u8ff0\u548c\u7248\u672c \u00b6 \u4f60\u53ef\u4ee5\u8bbe\u5b9a\uff1a Title \uff1a\u5728 OpenAPI \u548c\u81ea\u52a8 API \u6587\u6863\u7528\u6237\u754c\u9762\u4e2d\u4f5c\u4e3a API \u7684\u6807\u9898/\u540d\u79f0\u4f7f\u7528\u3002 Description \uff1a\u5728 OpenAPI \u548c\u81ea\u52a8 API \u6587\u6863\u7528\u6237\u754c\u9762\u4e2d\u7528\u4f5c API \u7684\u63cf\u8ff0\u3002 Version \uff1aAPI \u7248\u672c\uff0c\u4f8b\u5982 v2 \u6216\u8005 2.5.0 \u3002 \u5982\u679c\u4f60\u4e4b\u524d\u7684\u5e94\u7528\u7a0b\u5e8f\u7248\u672c\u4e5f\u4f7f\u7528 OpenAPI \u4f1a\u5f88\u6709\u7528\u3002 \u4f7f\u7528 title \u3001 description \u548c version \u6765\u8bbe\u7f6e\u5b83\u4eec\uff1a from fastapi import FastAPI description = \"\"\" ChimichangApp API helps you do awesome stuff. \ud83d\ude80 ## Items You can **read items**. ## Users You will be able to: * **Create users** (_not implemented_). * **Read users** (_not implemented_). \"\"\" app = FastAPI ( title = \"ChimichangApp\" , description = description , version = \"0.0.1\" , terms_of_service = \"http://example.com/terms/\" , contact = { \"name\" : \"Deadpoolio the Amazing\" , \"url\" : \"http://x-force.example.com/contact/\" , \"email\" : \"dp@x-force.example.com\" , }, license_info = { \"name\" : \"Apache 2.0\" , \"url\" : \"https://www.apache.org/licenses/LICENSE-2.0.html\" , }, ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Katana\" }] \u901a\u8fc7\u8fd9\u6837\u8bbe\u7f6e\uff0c\u81ea\u52a8 API \u6587\u6863\u770b\u8d77\u6765\u4f1a\u50cf\uff1a \u6807\u7b7e\u5143\u6570\u636e \u00b6 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 openapi_tags \uff0c\u4e3a\u7528\u4e8e\u5206\u7ec4\u8def\u5f84\u64cd\u4f5c\u7684\u4e0d\u540c\u6807\u7b7e\u6dfb\u52a0\u989d\u5916\u7684\u5143\u6570\u636e\u3002 \u5b83\u63a5\u53d7\u4e00\u4e2a\u5217\u8868\uff0c\u8fd9\u4e2a\u5217\u8868\u5305\u542b\u6bcf\u4e2a\u6807\u7b7e\u5bf9\u5e94\u7684\u4e00\u4e2a\u5b57\u5178\u3002 \u6bcf\u4e2a\u5b57\u5178\u53ef\u4ee5\u5305\u542b\uff1a name \uff08 \u5fc5\u8981 \uff09\uff1a\u4e00\u4e2a str \uff0c\u5b83\u4e0e \u8def\u5f84\u64cd\u4f5c \u548c APIRouter \u4e2d\u4f7f\u7528\u7684 tags \u53c2\u6570\u6709\u76f8\u540c\u7684\u6807\u7b7e\u540d\u3002 description \uff1a\u4e00\u4e2a\u7528\u4e8e\u7b80\u77ed\u63cf\u8ff0\u6807\u7b7e\u7684 str \u3002\u5b83\u652f\u6301 Markdown \u5e76\u4e14\u4f1a\u5728\u6587\u6863\u7528\u6237\u754c\u9762\u4e2d\u663e\u793a\u3002 externalDocs \uff1a\u4e00\u4e2a\u63cf\u8ff0\u5916\u90e8\u6587\u6863\u7684 dict \uff1a description \uff1a\u7528\u4e8e\u7b80\u77ed\u63cf\u8ff0\u5916\u90e8\u6587\u6863\u7684 str \u3002 url \uff08 \u5fc5\u8981 \uff09\uff1a\u5916\u90e8\u6587\u6863\u7684 URL str \u3002 \u521b\u5efa\u6807\u7b7e\u5143\u6570\u636e \u00b6 \u8ba9\u6211\u4eec\u5728\u5e26\u6709\u6807\u7b7e\u7684\u793a\u4f8b\u4e2d\u4e3a users \u548c items \u8bd5\u4e00\u4e0b\u3002 \u521b\u5efa\u6807\u7b7e\u5143\u6570\u636e\u5e76\u628a\u5b83\u4f20\u9012\u7ed9 openapi_tags \u53c2\u6570\uff1a from fastapi import FastAPI tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] \u6ce8\u610f\u4f60\u53ef\u4ee5\u5728\u63cf\u8ff0\u5185\u4f7f\u7528 Markdown\uff0c\u4f8b\u5982\u300clogin\u300d\u4f1a\u663e\u793a\u4e3a\u7c97\u4f53\uff08 login \uff09\u4ee5\u53ca\u300cfancy\u300d\u4f1a\u663e\u793a\u4e3a\u659c\u4f53\uff08 fancy \uff09\u3002 \u63d0\u793a \u4e0d\u5fc5\u4e3a\u4f60\u4f7f\u7528\u7684\u6240\u6709\u6807\u7b7e\u90fd\u6dfb\u52a0\u5143\u6570\u636e\u3002 \u4f7f\u7528\u4f60\u7684\u6807\u7b7e \u00b6 \u5c06 tags \u53c2\u6570\u548c \u8def\u5f84\u64cd\u4f5c \uff08\u4ee5\u53ca APIRouter \uff09\u4e00\u8d77\u4f7f\u7528\uff0c\u5c06\u5176\u5206\u914d\u7ed9\u4e0d\u540c\u7684\u6807\u7b7e\uff1a from fastapi import FastAPI tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] \u4fe1\u606f \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u6807\u7b7e\u7684\u4fe1\u606f \u8def\u5f84\u64cd\u4f5c\u914d\u7f6e \u3002 \u67e5\u770b\u6587\u6863 \u00b6 \u5982\u679c\u4f60\u73b0\u5728\u67e5\u770b\u6587\u6863\uff0c\u5b83\u4eec\u4f1a\u663e\u793a\u6240\u6709\u9644\u52a0\u7684\u5143\u6570\u636e\uff1a \u6807\u7b7e\u987a\u5e8f \u00b6 \u6bcf\u4e2a\u6807\u7b7e\u5143\u6570\u636e\u5b57\u5178\u7684\u987a\u5e8f\u4e5f\u5b9a\u4e49\u4e86\u5728\u6587\u6863\u7528\u6237\u754c\u9762\u663e\u793a\u7684\u987a\u5e8f\u3002 \u4f8b\u5982\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u5373\u4f7f users \u6392\u5728 items \u4e4b\u540e\uff0c\u5b83\u4e5f\u4f1a\u663e\u793a\u5728\u524d\u9762\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u5b83\u7684\u5143\u6570\u636e\u6dfb\u52a0\u4e3a\u5217\u8868\u5185\u7684\u7b2c\u4e00\u4e2a\u5b57\u5178\u3002 OpenAPI URL \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cOpenAPI \u6a21\u5f0f\u670d\u52a1\u4e8e /openapi.json \u3002 \u4f46\u662f\u4f60\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570 openapi_url \u5bf9\u5176\u8fdb\u884c\u914d\u7f6e\u3002 \u4f8b\u5982\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3a\u670d\u52a1\u4e8e /api/v1/openapi.json \uff1a from fastapi import FastAPI app = FastAPI ( openapi_url = \"/api/v1/openapi.json\" ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] \u5982\u679c\u4f60\u60f3\u5b8c\u5168\u7981\u7528 OpenAPI \u6a21\u5f0f\uff0c\u53ef\u4ee5\u5c06\u5176\u8bbe\u7f6e\u4e3a openapi_url=None \uff0c\u8fd9\u6837\u4e5f\u4f1a\u7981\u7528\u4f7f\u7528\u5b83\u7684\u6587\u6863\u7528\u6237\u754c\u9762\u3002 \u6587\u6863 URLs \u00b6 \u4f60\u53ef\u4ee5\u914d\u7f6e\u4e24\u4e2a\u6587\u6863\u7528\u6237\u754c\u9762\uff0c\u5305\u62ec\uff1a Swagger UI \uff1a\u670d\u52a1\u4e8e /docs \u3002 \u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 docs_url \u8bbe\u7f6e\u5b83\u7684 URL\u3002 \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e docs_url=None \u7981\u7528\u5b83\u3002 ReDoc\uff1a\u670d\u52a1\u4e8e /redoc \u3002 \u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 redoc_url \u8bbe\u7f6e\u5b83\u7684 URL\u3002 \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e redoc_url=None \u7981\u7528\u5b83\u3002 \u4f8b\u5982\uff0c\u8bbe\u7f6e Swagger UI \u670d\u52a1\u4e8e /documentation \u5e76\u7981\u7528 ReDoc\uff1a from fastapi import FastAPI app = FastAPI ( docs_url = \"/documentation\" , redoc_url = None ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }]","title":"\u5143\u6570\u636e\u548c\u6587\u6863 URL"},{"location":"tutorial/metadata/#url","text":"\u4f60\u53ef\u4ee5\u5728 FastAPI \u5e94\u7528\u4e2d\u81ea\u5b9a\u4e49\u51e0\u4e2a\u5143\u6570\u636e\u914d\u7f6e\u3002","title":"\u5143\u6570\u636e\u548c\u6587\u6863 URL"},{"location":"tutorial/metadata/#_1","text":"\u4f60\u53ef\u4ee5\u8bbe\u5b9a\uff1a Title \uff1a\u5728 OpenAPI \u548c\u81ea\u52a8 API \u6587\u6863\u7528\u6237\u754c\u9762\u4e2d\u4f5c\u4e3a API \u7684\u6807\u9898/\u540d\u79f0\u4f7f\u7528\u3002 Description \uff1a\u5728 OpenAPI \u548c\u81ea\u52a8 API \u6587\u6863\u7528\u6237\u754c\u9762\u4e2d\u7528\u4f5c API \u7684\u63cf\u8ff0\u3002 Version \uff1aAPI \u7248\u672c\uff0c\u4f8b\u5982 v2 \u6216\u8005 2.5.0 \u3002 \u5982\u679c\u4f60\u4e4b\u524d\u7684\u5e94\u7528\u7a0b\u5e8f\u7248\u672c\u4e5f\u4f7f\u7528 OpenAPI \u4f1a\u5f88\u6709\u7528\u3002 \u4f7f\u7528 title \u3001 description \u548c version \u6765\u8bbe\u7f6e\u5b83\u4eec\uff1a from fastapi import FastAPI description = \"\"\" ChimichangApp API helps you do awesome stuff. \ud83d\ude80 ## Items You can **read items**. ## Users You will be able to: * **Create users** (_not implemented_). * **Read users** (_not implemented_). \"\"\" app = FastAPI ( title = \"ChimichangApp\" , description = description , version = \"0.0.1\" , terms_of_service = \"http://example.com/terms/\" , contact = { \"name\" : \"Deadpoolio the Amazing\" , \"url\" : \"http://x-force.example.com/contact/\" , \"email\" : \"dp@x-force.example.com\" , }, license_info = { \"name\" : \"Apache 2.0\" , \"url\" : \"https://www.apache.org/licenses/LICENSE-2.0.html\" , }, ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Katana\" }] \u901a\u8fc7\u8fd9\u6837\u8bbe\u7f6e\uff0c\u81ea\u52a8 API \u6587\u6863\u770b\u8d77\u6765\u4f1a\u50cf\uff1a","title":"\u6807\u9898\u3001\u63cf\u8ff0\u548c\u7248\u672c"},{"location":"tutorial/metadata/#_2","text":"\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 openapi_tags \uff0c\u4e3a\u7528\u4e8e\u5206\u7ec4\u8def\u5f84\u64cd\u4f5c\u7684\u4e0d\u540c\u6807\u7b7e\u6dfb\u52a0\u989d\u5916\u7684\u5143\u6570\u636e\u3002 \u5b83\u63a5\u53d7\u4e00\u4e2a\u5217\u8868\uff0c\u8fd9\u4e2a\u5217\u8868\u5305\u542b\u6bcf\u4e2a\u6807\u7b7e\u5bf9\u5e94\u7684\u4e00\u4e2a\u5b57\u5178\u3002 \u6bcf\u4e2a\u5b57\u5178\u53ef\u4ee5\u5305\u542b\uff1a name \uff08 \u5fc5\u8981 \uff09\uff1a\u4e00\u4e2a str \uff0c\u5b83\u4e0e \u8def\u5f84\u64cd\u4f5c \u548c APIRouter \u4e2d\u4f7f\u7528\u7684 tags \u53c2\u6570\u6709\u76f8\u540c\u7684\u6807\u7b7e\u540d\u3002 description \uff1a\u4e00\u4e2a\u7528\u4e8e\u7b80\u77ed\u63cf\u8ff0\u6807\u7b7e\u7684 str \u3002\u5b83\u652f\u6301 Markdown \u5e76\u4e14\u4f1a\u5728\u6587\u6863\u7528\u6237\u754c\u9762\u4e2d\u663e\u793a\u3002 externalDocs \uff1a\u4e00\u4e2a\u63cf\u8ff0\u5916\u90e8\u6587\u6863\u7684 dict \uff1a description \uff1a\u7528\u4e8e\u7b80\u77ed\u63cf\u8ff0\u5916\u90e8\u6587\u6863\u7684 str \u3002 url \uff08 \u5fc5\u8981 \uff09\uff1a\u5916\u90e8\u6587\u6863\u7684 URL str \u3002","title":"\u6807\u7b7e\u5143\u6570\u636e"},{"location":"tutorial/metadata/#_3","text":"\u8ba9\u6211\u4eec\u5728\u5e26\u6709\u6807\u7b7e\u7684\u793a\u4f8b\u4e2d\u4e3a users \u548c items \u8bd5\u4e00\u4e0b\u3002 \u521b\u5efa\u6807\u7b7e\u5143\u6570\u636e\u5e76\u628a\u5b83\u4f20\u9012\u7ed9 openapi_tags \u53c2\u6570\uff1a from fastapi import FastAPI tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] \u6ce8\u610f\u4f60\u53ef\u4ee5\u5728\u63cf\u8ff0\u5185\u4f7f\u7528 Markdown\uff0c\u4f8b\u5982\u300clogin\u300d\u4f1a\u663e\u793a\u4e3a\u7c97\u4f53\uff08 login \uff09\u4ee5\u53ca\u300cfancy\u300d\u4f1a\u663e\u793a\u4e3a\u659c\u4f53\uff08 fancy \uff09\u3002 \u63d0\u793a \u4e0d\u5fc5\u4e3a\u4f60\u4f7f\u7528\u7684\u6240\u6709\u6807\u7b7e\u90fd\u6dfb\u52a0\u5143\u6570\u636e\u3002","title":"\u521b\u5efa\u6807\u7b7e\u5143\u6570\u636e"},{"location":"tutorial/metadata/#_4","text":"\u5c06 tags \u53c2\u6570\u548c \u8def\u5f84\u64cd\u4f5c \uff08\u4ee5\u53ca APIRouter \uff09\u4e00\u8d77\u4f7f\u7528\uff0c\u5c06\u5176\u5206\u914d\u7ed9\u4e0d\u540c\u7684\u6807\u7b7e\uff1a from fastapi import FastAPI tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] \u4fe1\u606f \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u6807\u7b7e\u7684\u4fe1\u606f \u8def\u5f84\u64cd\u4f5c\u914d\u7f6e \u3002","title":"\u4f7f\u7528\u4f60\u7684\u6807\u7b7e"},{"location":"tutorial/metadata/#_5","text":"\u5982\u679c\u4f60\u73b0\u5728\u67e5\u770b\u6587\u6863\uff0c\u5b83\u4eec\u4f1a\u663e\u793a\u6240\u6709\u9644\u52a0\u7684\u5143\u6570\u636e\uff1a","title":"\u67e5\u770b\u6587\u6863"},{"location":"tutorial/metadata/#_6","text":"\u6bcf\u4e2a\u6807\u7b7e\u5143\u6570\u636e\u5b57\u5178\u7684\u987a\u5e8f\u4e5f\u5b9a\u4e49\u4e86\u5728\u6587\u6863\u7528\u6237\u754c\u9762\u663e\u793a\u7684\u987a\u5e8f\u3002 \u4f8b\u5982\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u5373\u4f7f users \u6392\u5728 items \u4e4b\u540e\uff0c\u5b83\u4e5f\u4f1a\u663e\u793a\u5728\u524d\u9762\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u5b83\u7684\u5143\u6570\u636e\u6dfb\u52a0\u4e3a\u5217\u8868\u5185\u7684\u7b2c\u4e00\u4e2a\u5b57\u5178\u3002","title":"\u6807\u7b7e\u987a\u5e8f"},{"location":"tutorial/metadata/#openapi-url","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cOpenAPI \u6a21\u5f0f\u670d\u52a1\u4e8e /openapi.json \u3002 \u4f46\u662f\u4f60\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570 openapi_url \u5bf9\u5176\u8fdb\u884c\u914d\u7f6e\u3002 \u4f8b\u5982\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3a\u670d\u52a1\u4e8e /api/v1/openapi.json \uff1a from fastapi import FastAPI app = FastAPI ( openapi_url = \"/api/v1/openapi.json\" ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] \u5982\u679c\u4f60\u60f3\u5b8c\u5168\u7981\u7528 OpenAPI \u6a21\u5f0f\uff0c\u53ef\u4ee5\u5c06\u5176\u8bbe\u7f6e\u4e3a openapi_url=None \uff0c\u8fd9\u6837\u4e5f\u4f1a\u7981\u7528\u4f7f\u7528\u5b83\u7684\u6587\u6863\u7528\u6237\u754c\u9762\u3002","title":"OpenAPI URL"},{"location":"tutorial/metadata/#urls","text":"\u4f60\u53ef\u4ee5\u914d\u7f6e\u4e24\u4e2a\u6587\u6863\u7528\u6237\u754c\u9762\uff0c\u5305\u62ec\uff1a Swagger UI \uff1a\u670d\u52a1\u4e8e /docs \u3002 \u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 docs_url \u8bbe\u7f6e\u5b83\u7684 URL\u3002 \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e docs_url=None \u7981\u7528\u5b83\u3002 ReDoc\uff1a\u670d\u52a1\u4e8e /redoc \u3002 \u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 redoc_url \u8bbe\u7f6e\u5b83\u7684 URL\u3002 \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e redoc_url=None \u7981\u7528\u5b83\u3002 \u4f8b\u5982\uff0c\u8bbe\u7f6e Swagger UI \u670d\u52a1\u4e8e /documentation \u5e76\u7981\u7528 ReDoc\uff1a from fastapi import FastAPI app = FastAPI ( docs_url = \"/documentation\" , redoc_url = None ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }]","title":"\u6587\u6863 URLs"},{"location":"tutorial/middleware/","text":"\u4e2d\u95f4\u4ef6 \u00b6 \u4f60\u53ef\u4ee5\u5411 FastAPI \u5e94\u7528\u6dfb\u52a0\u4e2d\u95f4\u4ef6. \"\u4e2d\u95f4\u4ef6\"\u662f\u4e00\u4e2a\u51fd\u6570,\u5b83\u5728\u6bcf\u4e2a \u8bf7\u6c42 \u88ab\u7279\u5b9a\u7684 \u8def\u5f84\u64cd\u4f5c \u5904\u7406\u4e4b\u524d,\u4ee5\u53ca\u5728\u6bcf\u4e2a \u54cd\u5e94 \u8fd4\u56de\u4e4b\u524d\u5de5\u4f5c. \u5b83\u63a5\u6536\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u6bcf\u4e00\u4e2a \u8bf7\u6c42 . \u7136\u540e\u5b83\u53ef\u4ee5\u5bf9\u8fd9\u4e2a \u8bf7\u6c42 \u505a\u4e00\u4e9b\u4e8b\u60c5\u6216\u8005\u6267\u884c\u4efb\u4f55\u9700\u8981\u7684\u4ee3\u7801. \u7136\u540e\u5b83\u5c06 \u8bf7\u6c42 \u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u90e8\u5206 (\u901a\u8fc7\u67d0\u79cd \u8def\u5f84\u64cd\u4f5c ). \u7136\u540e\u5b83\u83b7\u53d6\u5e94\u7528\u7a0b\u5e8f\u751f\u4ea7\u7684 \u54cd\u5e94 (\u901a\u8fc7\u67d0\u79cd \u8def\u5f84\u64cd\u4f5c ). \u5b83\u53ef\u4ee5\u5bf9\u8be5 \u54cd\u5e94 \u505a\u4e9b\u4ec0\u4e48\u6216\u8005\u6267\u884c\u4efb\u4f55\u9700\u8981\u7684\u4ee3\u7801. \u7136\u540e\u5b83\u8fd4\u56de\u8fd9\u4e2a \u54cd\u5e94 . \u6280\u672f\u7ec6\u8282 \u5982\u679c\u4f60\u4f7f\u7528\u4e86 yield \u5173\u952e\u5b57\u4f9d\u8d56, \u4f9d\u8d56\u4e2d\u7684\u9000\u51fa\u4ee3\u7801\u5c06\u5728\u6267\u884c\u4e2d\u95f4\u4ef6 \u540e \u6267\u884c. \u5982\u679c\u6709\u4efb\u4f55\u540e\u53f0\u4efb\u52a1(\u7a0d\u540e\u8bb0\u5f55), \u5b83\u4eec\u5c06\u5728\u6267\u884c\u4e2d\u95f4\u4ef6 \u540e \u8fd0\u884c. \u521b\u5efa\u4e2d\u95f4\u4ef6 \u00b6 \u8981\u521b\u5efa\u4e2d\u95f4\u4ef6\u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u9876\u90e8\u4f7f\u7528\u88c5\u9970\u5668 @app.middleware(\"http\") . \u4e2d\u95f4\u4ef6\u53c2\u6570\u63a5\u6536\u5982\u4e0b\u53c2\u6570: request . \u4e00\u4e2a\u51fd\u6570 call_next \u5b83\u5c06\u63a5\u6536 request \u4f5c\u4e3a\u53c2\u6570. \u8fd9\u4e2a\u51fd\u6570\u5c06 request \u4f20\u9012\u7ed9\u76f8\u5e94\u7684 \u8def\u5f84\u64cd\u4f5c . \u7136\u540e\u5b83\u5c06\u8fd4\u56de\u7531\u76f8\u5e94\u7684 \u8def\u5f84\u64cd\u4f5c \u751f\u6210\u7684 response . \u7136\u540e\u4f60\u53ef\u4ee5\u5728\u8fd4\u56de response \u524d\u8fdb\u4e00\u6b65\u4fee\u6539\u5b83. import time from fastapi import FastAPI , Request app = FastAPI () @app . middleware ( \"http\" ) async def add_process_time_header ( request : Request , call_next ): start_time = time . time () response = await call_next ( request ) process_time = time . time () - start_time response . headers [ \"X-Process-Time\" ] = str ( process_time ) return response Tip \u8bf7\u8bb0\u4f4f\u53ef\u4ee5 \u7528'X-' \u524d\u7f00 \u6dfb\u52a0\u4e13\u6709\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934. \u4f46\u662f\u5982\u679c\u4f60\u60f3\u8ba9\u6d4f\u89c8\u5668\u4e2d\u7684\u5ba2\u6237\u7aef\u770b\u5230\u4f60\u7684\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934, \u4f60\u9700\u8981\u628a\u5b83\u4eec\u52a0\u5230 CORS \u914d\u7f6e ( CORS (Cross-Origin Resource Sharing) ) \u7684 expose_headers \u53c2\u6570\u4e2d,\u5728 Starlette's CORS docs \u6587\u6863\u4e2d. \u6280\u672f\u7ec6\u8282 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.requests import Request . FastAPI \u4e3a\u4e86\u5f00\u53d1\u8005\u65b9\u4fbf\u63d0\u4f9b\u4e86\u8be5\u5bf9\u8c61. \u4f46\u5176\u5b9e\u5b83\u76f4\u63a5\u6765\u81ea\u4e8e Starlette. \u5728 response \u7684\u524d\u548c\u540e \u00b6 \u5728\u4efb\u4f55 \u8def\u5f84\u64cd\u4f5c \u6536\u5230 request \u524d,\u53ef\u4ee5\u6dfb\u52a0\u8981\u548c\u8bf7\u6c42\u4e00\u8d77\u8fd0\u884c\u7684\u4ee3\u7801. \u4e5f\u53ef\u4ee5\u5728 \u54cd\u5e94 \u751f\u6210\u4f46\u662f\u8fd4\u56de\u4e4b\u524d\u6dfb\u52a0\u4ee3\u7801. \u4f8b\u5982\u4f60\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934 X-Process-Time \u5305\u542b\u4ee5\u79d2\u4e3a\u5355\u4f4d\u7684\u63a5\u6536\u8bf7\u6c42\u548c\u751f\u6210\u54cd\u5e94\u7684\u65f6\u95f4: import time from fastapi import FastAPI , Request app = FastAPI () @app . middleware ( \"http\" ) async def add_process_time_header ( request : Request , call_next ): start_time = time . time () response = await call_next ( request ) process_time = time . time () - start_time response . headers [ \"X-Process-Time\" ] = str ( process_time ) return response \u5176\u4ed6\u4e2d\u95f4\u4ef6 \u00b6 \u4f60\u53ef\u4ee5\u7a0d\u540e\u5728 Advanced User Guide: Advanced Middleware \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u4e2d\u95f4\u4ef6\u7684\u6559\u7a0b. \u4f60\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u5b66\u4e60\u5982\u4f55\u4f7f\u7528\u4e2d\u95f4\u4ef6\u5904\u7406 CORS .","title":"\u4e2d\u95f4\u4ef6"},{"location":"tutorial/middleware/#_1","text":"\u4f60\u53ef\u4ee5\u5411 FastAPI \u5e94\u7528\u6dfb\u52a0\u4e2d\u95f4\u4ef6. \"\u4e2d\u95f4\u4ef6\"\u662f\u4e00\u4e2a\u51fd\u6570,\u5b83\u5728\u6bcf\u4e2a \u8bf7\u6c42 \u88ab\u7279\u5b9a\u7684 \u8def\u5f84\u64cd\u4f5c \u5904\u7406\u4e4b\u524d,\u4ee5\u53ca\u5728\u6bcf\u4e2a \u54cd\u5e94 \u8fd4\u56de\u4e4b\u524d\u5de5\u4f5c. \u5b83\u63a5\u6536\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u6bcf\u4e00\u4e2a \u8bf7\u6c42 . \u7136\u540e\u5b83\u53ef\u4ee5\u5bf9\u8fd9\u4e2a \u8bf7\u6c42 \u505a\u4e00\u4e9b\u4e8b\u60c5\u6216\u8005\u6267\u884c\u4efb\u4f55\u9700\u8981\u7684\u4ee3\u7801. \u7136\u540e\u5b83\u5c06 \u8bf7\u6c42 \u4f20\u9012\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u90e8\u5206 (\u901a\u8fc7\u67d0\u79cd \u8def\u5f84\u64cd\u4f5c ). \u7136\u540e\u5b83\u83b7\u53d6\u5e94\u7528\u7a0b\u5e8f\u751f\u4ea7\u7684 \u54cd\u5e94 (\u901a\u8fc7\u67d0\u79cd \u8def\u5f84\u64cd\u4f5c ). \u5b83\u53ef\u4ee5\u5bf9\u8be5 \u54cd\u5e94 \u505a\u4e9b\u4ec0\u4e48\u6216\u8005\u6267\u884c\u4efb\u4f55\u9700\u8981\u7684\u4ee3\u7801. \u7136\u540e\u5b83\u8fd4\u56de\u8fd9\u4e2a \u54cd\u5e94 . \u6280\u672f\u7ec6\u8282 \u5982\u679c\u4f60\u4f7f\u7528\u4e86 yield \u5173\u952e\u5b57\u4f9d\u8d56, \u4f9d\u8d56\u4e2d\u7684\u9000\u51fa\u4ee3\u7801\u5c06\u5728\u6267\u884c\u4e2d\u95f4\u4ef6 \u540e \u6267\u884c. \u5982\u679c\u6709\u4efb\u4f55\u540e\u53f0\u4efb\u52a1(\u7a0d\u540e\u8bb0\u5f55), \u5b83\u4eec\u5c06\u5728\u6267\u884c\u4e2d\u95f4\u4ef6 \u540e \u8fd0\u884c.","title":"\u4e2d\u95f4\u4ef6"},{"location":"tutorial/middleware/#_2","text":"\u8981\u521b\u5efa\u4e2d\u95f4\u4ef6\u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u9876\u90e8\u4f7f\u7528\u88c5\u9970\u5668 @app.middleware(\"http\") . \u4e2d\u95f4\u4ef6\u53c2\u6570\u63a5\u6536\u5982\u4e0b\u53c2\u6570: request . \u4e00\u4e2a\u51fd\u6570 call_next \u5b83\u5c06\u63a5\u6536 request \u4f5c\u4e3a\u53c2\u6570. \u8fd9\u4e2a\u51fd\u6570\u5c06 request \u4f20\u9012\u7ed9\u76f8\u5e94\u7684 \u8def\u5f84\u64cd\u4f5c . \u7136\u540e\u5b83\u5c06\u8fd4\u56de\u7531\u76f8\u5e94\u7684 \u8def\u5f84\u64cd\u4f5c \u751f\u6210\u7684 response . \u7136\u540e\u4f60\u53ef\u4ee5\u5728\u8fd4\u56de response \u524d\u8fdb\u4e00\u6b65\u4fee\u6539\u5b83. import time from fastapi import FastAPI , Request app = FastAPI () @app . middleware ( \"http\" ) async def add_process_time_header ( request : Request , call_next ): start_time = time . time () response = await call_next ( request ) process_time = time . time () - start_time response . headers [ \"X-Process-Time\" ] = str ( process_time ) return response Tip \u8bf7\u8bb0\u4f4f\u53ef\u4ee5 \u7528'X-' \u524d\u7f00 \u6dfb\u52a0\u4e13\u6709\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934. \u4f46\u662f\u5982\u679c\u4f60\u60f3\u8ba9\u6d4f\u89c8\u5668\u4e2d\u7684\u5ba2\u6237\u7aef\u770b\u5230\u4f60\u7684\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934, \u4f60\u9700\u8981\u628a\u5b83\u4eec\u52a0\u5230 CORS \u914d\u7f6e ( CORS (Cross-Origin Resource Sharing) ) \u7684 expose_headers \u53c2\u6570\u4e2d,\u5728 Starlette's CORS docs \u6587\u6863\u4e2d. \u6280\u672f\u7ec6\u8282 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.requests import Request . FastAPI \u4e3a\u4e86\u5f00\u53d1\u8005\u65b9\u4fbf\u63d0\u4f9b\u4e86\u8be5\u5bf9\u8c61. \u4f46\u5176\u5b9e\u5b83\u76f4\u63a5\u6765\u81ea\u4e8e Starlette.","title":"\u521b\u5efa\u4e2d\u95f4\u4ef6"},{"location":"tutorial/middleware/#response","text":"\u5728\u4efb\u4f55 \u8def\u5f84\u64cd\u4f5c \u6536\u5230 request \u524d,\u53ef\u4ee5\u6dfb\u52a0\u8981\u548c\u8bf7\u6c42\u4e00\u8d77\u8fd0\u884c\u7684\u4ee3\u7801. \u4e5f\u53ef\u4ee5\u5728 \u54cd\u5e94 \u751f\u6210\u4f46\u662f\u8fd4\u56de\u4e4b\u524d\u6dfb\u52a0\u4ee3\u7801. \u4f8b\u5982\u4f60\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934 X-Process-Time \u5305\u542b\u4ee5\u79d2\u4e3a\u5355\u4f4d\u7684\u63a5\u6536\u8bf7\u6c42\u548c\u751f\u6210\u54cd\u5e94\u7684\u65f6\u95f4: import time from fastapi import FastAPI , Request app = FastAPI () @app . middleware ( \"http\" ) async def add_process_time_header ( request : Request , call_next ): start_time = time . time () response = await call_next ( request ) process_time = time . time () - start_time response . headers [ \"X-Process-Time\" ] = str ( process_time ) return response","title":"\u5728 response \u7684\u524d\u548c\u540e"},{"location":"tutorial/middleware/#_3","text":"\u4f60\u53ef\u4ee5\u7a0d\u540e\u5728 Advanced User Guide: Advanced Middleware \u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u4e2d\u95f4\u4ef6\u7684\u6559\u7a0b. \u4f60\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u5b66\u4e60\u5982\u4f55\u4f7f\u7528\u4e2d\u95f4\u4ef6\u5904\u7406 CORS .","title":"\u5176\u4ed6\u4e2d\u95f4\u4ef6"},{"location":"tutorial/path-operation-configuration/","text":"\u8def\u5f84\u64cd\u4f5c\u914d\u7f6e \u00b6 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u652f\u6301\u591a\u79cd\u914d\u7f6e\u53c2\u6570\u3002 \u8b66\u544a \u6ce8\u610f\uff1a\u4ee5\u4e0b\u53c2\u6570\u5e94\u76f4\u63a5\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \uff0c\u4e0d\u80fd\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002 status_code \u72b6\u6001\u7801 \u00b6 status_code \u7528\u4e8e\u5b9a\u4e49 \u8def\u5f84\u64cd\u4f5c \u54cd\u5e94\u4e2d\u7684 HTTP \u72b6\u6001\u7801\u3002 \u53ef\u4ee5\u76f4\u63a5\u4f20\u9012 int \u4ee3\u7801\uff0c \u6bd4\u5982 404 \u3002 \u5982\u679c\u8bb0\u4e0d\u4f4f\u6570\u5b57\u7801\u7684\u6db5\u4e49\uff0c\u4e5f\u53ef\u4ee5\u7528 status \u7684\u5feb\u6377\u5e38\u91cf\uff1a from typing import Set , Union from fastapi import FastAPI , status from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , status_code = status . HTTP_201_CREATED ) async def create_item ( item : Item ): return item \u72b6\u6001\u7801\u5728\u54cd\u5e94\u4e2d\u4f7f\u7528\uff0c\u5e76\u4f1a\u88ab\u6dfb\u52a0\u5230 OpenAPI \u6982\u56fe\u3002 \u6280\u672f\u7ec6\u8282 \u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette import status \u5bfc\u5165\u72b6\u6001\u7801\u3002 FastAPI \u7684 fastapi.status \u548c starlette.status \u4e00\u6837\uff0c\u53ea\u662f\u5feb\u6377\u65b9\u5f0f\u3002\u5b9e\u9645\u4e0a\uff0c fastapi.status \u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 tags \u53c2\u6570 \u00b6 tags \u53c2\u6570\u7684\u503c\u662f\u7531 str \u7ec4\u6210\u7684 list \uff08\u4e00\u822c\u53ea\u6709\u4e00\u4e2a str \uff09\uff0c tags \u7528\u4e8e\u4e3a \u8def\u5f84\u64cd\u4f5c \u6dfb\u52a0\u6807\u7b7e\uff1a from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , tags = [ \"items\" ]) async def create_item ( item : Item ): return item @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] OpenAPI \u6982\u56fe\u4f1a\u81ea\u52a8\u6dfb\u52a0\u6807\u7b7e\uff0c\u4f9b API \u6587\u6863\u63a5\u53e3\u4f7f\u7528\uff1a summary \u548c description \u53c2\u6570 \u00b6 \u8def\u5f84\u88c5\u9970\u5668\u8fd8\u652f\u6301 summary \u548c description \u8fd9\u4e24\u4e2a\u53c2\u6570\uff1a from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , description = \"Create an item with all the information, name, description, price, tax and a set of unique tags\" , ) async def create_item ( item : Item ): return item \u6587\u6863\u5b57\u7b26\u4e32\uff08 docstring \uff09 \u00b6 \u63cf\u8ff0\u5185\u5bb9\u6bd4\u8f83\u957f\u4e14\u5360\u7528\u591a\u884c\u65f6\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u7684 docstring \u4e2d\u58f0\u660e \u8def\u5f84\u64cd\u4f5c \u7684\u63cf\u8ff0\uff0c FastAPI \u652f\u6301\u4ece\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u63cf\u8ff0\u5185\u5bb9\u3002 \u6587\u6863\u5b57\u7b26\u4e32\u652f\u6301 Markdown \uff0c\u80fd\u6b63\u786e\u89e3\u6790\u548c\u663e\u793a Markdown \u7684\u5185\u5bb9\uff0c\u4f46\u8981\u6ce8\u610f\u6587\u6863\u5b57\u7b26\u4e32\u7684\u7f29\u8fdb\u3002 from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item \u4e0b\u56fe\u4e3a Markdown \u6587\u672c\u5728 API \u6587\u6863\u4e2d\u7684\u663e\u793a\u6548\u679c\uff1a \u54cd\u5e94\u63cf\u8ff0 \u00b6 response_description \u53c2\u6570\u7528\u4e8e\u5b9a\u4e49\u54cd\u5e94\u7684\u63cf\u8ff0\u8bf4\u660e\uff1a from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , response_description = \"The created item\" , ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item \u8bf4\u660e \u6ce8\u610f\uff0c response_description \u53ea\u7528\u4e8e\u63cf\u8ff0\u54cd\u5e94\uff0c description \u4e00\u822c\u5219\u7528\u4e8e\u63cf\u8ff0 \u8def\u5f84\u64cd\u4f5c \u3002 \u68c0\u67e5 OpenAPI \u89c4\u5b9a\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u90fd\u8981\u6709\u54cd\u5e94\u63cf\u8ff0\u3002 \u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u54cd\u5e94\u63cf\u8ff0\uff0c FastAPI \u5219\u81ea\u52a8\u751f\u6210\u5185\u5bb9\u4e3a \"Successful response\" \u7684\u54cd\u5e94\u63cf\u8ff0\u3002 \u5f03\u7528 \u8def\u5f84\u64cd\u4f5c \u00b6 deprecated \u53c2\u6570\u53ef\u4ee5\u628a \u8def\u5f84\u64cd\u4f5c \u6807\u8bb0\u4e3a \u5f03\u7528 \uff0c\u65e0\u9700\u76f4\u63a5\u5220\u9664\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] @app . get ( \"/elements/\" , tags = [ \"items\" ], deprecated = True ) async def read_elements (): return [{ \"item_id\" : \"Foo\" }] API \u6587\u6863\u4f1a\u628a\u8be5\u8def\u5f84\u64cd\u4f5c\u6807\u8bb0\u4e3a\u5f03\u7528\uff1a \u4e0b\u56fe\u663e\u793a\u4e86\u6b63\u5e38 \u8def\u5f84\u64cd\u4f5c \u4e0e\u5f03\u7528 \u8def\u5f84\u64cd\u4f5c \u7684\u533a\u522b\uff1a \u5c0f\u7ed3 \u00b6 \u901a\u8fc7\u4f20\u9012\u53c2\u6570\u7ed9 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \uff0c\u5373\u53ef\u8f7b\u677e\u5730\u914d\u7f6e \u8def\u5f84\u64cd\u4f5c \u3001\u6dfb\u52a0\u5143\u6570\u636e\u3002","title":"\u8def\u5f84\u64cd\u4f5c\u914d\u7f6e"},{"location":"tutorial/path-operation-configuration/#_1","text":"\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u652f\u6301\u591a\u79cd\u914d\u7f6e\u53c2\u6570\u3002 \u8b66\u544a \u6ce8\u610f\uff1a\u4ee5\u4e0b\u53c2\u6570\u5e94\u76f4\u63a5\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \uff0c\u4e0d\u80fd\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002","title":"\u8def\u5f84\u64cd\u4f5c\u914d\u7f6e"},{"location":"tutorial/path-operation-configuration/#status_code","text":"status_code \u7528\u4e8e\u5b9a\u4e49 \u8def\u5f84\u64cd\u4f5c \u54cd\u5e94\u4e2d\u7684 HTTP \u72b6\u6001\u7801\u3002 \u53ef\u4ee5\u76f4\u63a5\u4f20\u9012 int \u4ee3\u7801\uff0c \u6bd4\u5982 404 \u3002 \u5982\u679c\u8bb0\u4e0d\u4f4f\u6570\u5b57\u7801\u7684\u6db5\u4e49\uff0c\u4e5f\u53ef\u4ee5\u7528 status \u7684\u5feb\u6377\u5e38\u91cf\uff1a from typing import Set , Union from fastapi import FastAPI , status from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , status_code = status . HTTP_201_CREATED ) async def create_item ( item : Item ): return item \u72b6\u6001\u7801\u5728\u54cd\u5e94\u4e2d\u4f7f\u7528\uff0c\u5e76\u4f1a\u88ab\u6dfb\u52a0\u5230 OpenAPI \u6982\u56fe\u3002 \u6280\u672f\u7ec6\u8282 \u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette import status \u5bfc\u5165\u72b6\u6001\u7801\u3002 FastAPI \u7684 fastapi.status \u548c starlette.status \u4e00\u6837\uff0c\u53ea\u662f\u5feb\u6377\u65b9\u5f0f\u3002\u5b9e\u9645\u4e0a\uff0c fastapi.status \u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002","title":"status_code \u72b6\u6001\u7801"},{"location":"tutorial/path-operation-configuration/#tags","text":"tags \u53c2\u6570\u7684\u503c\u662f\u7531 str \u7ec4\u6210\u7684 list \uff08\u4e00\u822c\u53ea\u6709\u4e00\u4e2a str \uff09\uff0c tags \u7528\u4e8e\u4e3a \u8def\u5f84\u64cd\u4f5c \u6dfb\u52a0\u6807\u7b7e\uff1a from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , tags = [ \"items\" ]) async def create_item ( item : Item ): return item @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] OpenAPI \u6982\u56fe\u4f1a\u81ea\u52a8\u6dfb\u52a0\u6807\u7b7e\uff0c\u4f9b API \u6587\u6863\u63a5\u53e3\u4f7f\u7528\uff1a","title":"tags \u53c2\u6570"},{"location":"tutorial/path-operation-configuration/#summary-description","text":"\u8def\u5f84\u88c5\u9970\u5668\u8fd8\u652f\u6301 summary \u548c description \u8fd9\u4e24\u4e2a\u53c2\u6570\uff1a from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , description = \"Create an item with all the information, name, description, price, tax and a set of unique tags\" , ) async def create_item ( item : Item ): return item","title":"summary \u548c description \u53c2\u6570"},{"location":"tutorial/path-operation-configuration/#docstring","text":"\u63cf\u8ff0\u5185\u5bb9\u6bd4\u8f83\u957f\u4e14\u5360\u7528\u591a\u884c\u65f6\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u7684 docstring \u4e2d\u58f0\u660e \u8def\u5f84\u64cd\u4f5c \u7684\u63cf\u8ff0\uff0c FastAPI \u652f\u6301\u4ece\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u63cf\u8ff0\u5185\u5bb9\u3002 \u6587\u6863\u5b57\u7b26\u4e32\u652f\u6301 Markdown \uff0c\u80fd\u6b63\u786e\u89e3\u6790\u548c\u663e\u793a Markdown \u7684\u5185\u5bb9\uff0c\u4f46\u8981\u6ce8\u610f\u6587\u6863\u5b57\u7b26\u4e32\u7684\u7f29\u8fdb\u3002 from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item \u4e0b\u56fe\u4e3a Markdown \u6587\u672c\u5728 API \u6587\u6863\u4e2d\u7684\u663e\u793a\u6548\u679c\uff1a","title":"\u6587\u6863\u5b57\u7b26\u4e32\uff08docstring\uff09"},{"location":"tutorial/path-operation-configuration/#_2","text":"response_description \u53c2\u6570\u7528\u4e8e\u5b9a\u4e49\u54cd\u5e94\u7684\u63cf\u8ff0\u8bf4\u660e\uff1a from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , response_description = \"The created item\" , ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item \u8bf4\u660e \u6ce8\u610f\uff0c response_description \u53ea\u7528\u4e8e\u63cf\u8ff0\u54cd\u5e94\uff0c description \u4e00\u822c\u5219\u7528\u4e8e\u63cf\u8ff0 \u8def\u5f84\u64cd\u4f5c \u3002 \u68c0\u67e5 OpenAPI \u89c4\u5b9a\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u90fd\u8981\u6709\u54cd\u5e94\u63cf\u8ff0\u3002 \u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u54cd\u5e94\u63cf\u8ff0\uff0c FastAPI \u5219\u81ea\u52a8\u751f\u6210\u5185\u5bb9\u4e3a \"Successful response\" \u7684\u54cd\u5e94\u63cf\u8ff0\u3002","title":"\u54cd\u5e94\u63cf\u8ff0"},{"location":"tutorial/path-operation-configuration/#_3","text":"deprecated \u53c2\u6570\u53ef\u4ee5\u628a \u8def\u5f84\u64cd\u4f5c \u6807\u8bb0\u4e3a \u5f03\u7528 \uff0c\u65e0\u9700\u76f4\u63a5\u5220\u9664\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] @app . get ( \"/elements/\" , tags = [ \"items\" ], deprecated = True ) async def read_elements (): return [{ \"item_id\" : \"Foo\" }] API \u6587\u6863\u4f1a\u628a\u8be5\u8def\u5f84\u64cd\u4f5c\u6807\u8bb0\u4e3a\u5f03\u7528\uff1a \u4e0b\u56fe\u663e\u793a\u4e86\u6b63\u5e38 \u8def\u5f84\u64cd\u4f5c \u4e0e\u5f03\u7528 \u8def\u5f84\u64cd\u4f5c \u7684\u533a\u522b\uff1a","title":"\u5f03\u7528\u8def\u5f84\u64cd\u4f5c"},{"location":"tutorial/path-operation-configuration/#_4","text":"\u901a\u8fc7\u4f20\u9012\u53c2\u6570\u7ed9 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \uff0c\u5373\u53ef\u8f7b\u677e\u5730\u914d\u7f6e \u8def\u5f84\u64cd\u4f5c \u3001\u6dfb\u52a0\u5143\u6570\u636e\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/path-params-numeric-validations/","text":"\u8def\u5f84\u53c2\u6570\u548c\u6570\u503c\u6821\u9a8c \u00b6 \u4e0e\u4f7f\u7528 Query \u4e3a\u67e5\u8be2\u53c2\u6570\u58f0\u660e\u66f4\u591a\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 Path \u4e3a\u8def\u5f84\u53c2\u6570\u58f0\u660e\u76f8\u540c\u7c7b\u578b\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002 \u5bfc\u5165 Path \u00b6 \u9996\u5148\uff0c\u4ece fastapi \u5bfc\u5165 Path \uff1a from typing import Union from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \u58f0\u660e\u5143\u6570\u636e \u00b6 \u4f60\u53ef\u4ee5\u58f0\u660e\u4e0e Query \u76f8\u540c\u7684\u6240\u6709\u53c2\u6570\u3002 \u4f8b\u5982\uff0c\u8981\u58f0\u660e\u8def\u5f84\u53c2\u6570 item_id \u7684 title \u5143\u6570\u636e\u503c\uff0c\u4f60\u53ef\u4ee5\u8f93\u5165\uff1a from typing import Union from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results Note \u8def\u5f84\u53c2\u6570\u603b\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u5b83\u5fc5\u987b\u662f\u8def\u5f84\u7684\u4e00\u90e8\u5206\u3002 \u6240\u4ee5\uff0c\u4f60\u5e94\u8be5\u5728\u58f0\u660e\u65f6\u4f7f\u7528 ... \u5c06\u5176\u6807\u8bb0\u4e3a\u5fc5\u9700\u53c2\u6570\u3002 \u7136\u800c\uff0c\u5373\u4f7f\u4f60\u4f7f\u7528 None \u58f0\u660e\u8def\u5f84\u53c2\u6570\u6216\u8bbe\u7f6e\u4e00\u4e2a\u5176\u4ed6\u9ed8\u8ba4\u503c\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u5b83\u4f9d\u7136\u4f1a\u662f\u5fc5\u9700\u53c2\u6570\u3002 \u6309\u9700\u5bf9\u53c2\u6570\u6392\u5e8f \u00b6 \u5047\u8bbe\u4f60\u60f3\u8981\u58f0\u660e\u4e00\u4e2a\u5fc5\u9700\u7684 str \u7c7b\u578b\u67e5\u8be2\u53c2\u6570 q \u3002 \u800c\u4e14\u4f60\u4e0d\u9700\u8981\u4e3a\u8be5\u53c2\u6570\u58f0\u660e\u4efb\u4f55\u5176\u4ed6\u5185\u5bb9\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u4f60\u5e76\u4e0d\u9700\u8981\u4f7f\u7528 Query \u3002 \u4f46\u662f\u4f60\u4ecd\u7136\u9700\u8981\u4f7f\u7528 Path \u6765\u58f0\u660e\u8def\u5f84\u53c2\u6570 item_id \u3002 \u5982\u679c\u4f60\u5c06\u5e26\u6709\u300c\u9ed8\u8ba4\u503c\u300d\u7684\u53c2\u6570\u653e\u5728\u6ca1\u6709\u300c\u9ed8\u8ba4\u503c\u300d\u7684\u53c2\u6570\u4e4b\u524d\uff0cPython \u5c06\u4f1a\u62a5\u9519\u3002 \u4f46\u662f\u4f60\u53ef\u4ee5\u5bf9\u5176\u91cd\u65b0\u6392\u5e8f\uff0c\u5e76\u5c06\u4e0d\u5e26\u9ed8\u8ba4\u503c\u7684\u503c\uff08\u67e5\u8be2\u53c2\u6570 q \uff09\u653e\u5230\u6700\u524d\u9762\u3002 \u5bf9 FastAPI \u6765\u8bf4\u8fd9\u65e0\u5173\u7d27\u8981\u3002\u5b83\u5c06\u901a\u8fc7\u53c2\u6570\u7684\u540d\u79f0\u3001\u7c7b\u578b\u548c\u9ed8\u8ba4\u503c\u58f0\u660e\uff08 Query \u3001 Path \u7b49\uff09\u6765\u68c0\u6d4b\u53c2\u6570\uff0c\u800c\u4e0d\u5728\u4e4e\u53c2\u6570\u7684\u987a\u5e8f\u3002 \u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u5c06\u51fd\u6570\u58f0\u660e\u4e3a\uff1a from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( q : str , item_id : int = Path ( title = \"The ID of the item to get\" )): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \u6309\u9700\u5bf9\u53c2\u6570\u6392\u5e8f\u7684\u6280\u5de7 \u00b6 \u5982\u679c\u4f60\u60f3\u4e0d\u4f7f\u7528 Query \u58f0\u660e\u6ca1\u6709\u9ed8\u8ba4\u503c\u7684\u67e5\u8be2\u53c2\u6570 q \uff0c\u540c\u65f6\u4f7f\u7528 Path \u58f0\u660e\u8def\u5f84\u53c2\u6570 item_id \uff0c\u5e76\u4f7f\u5b83\u4eec\u7684\u987a\u5e8f\u4e0e\u4e0a\u9762\u4e0d\u540c\uff0cPython \u5bf9\u6b64\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u8bed\u6cd5\u3002 \u4f20\u9012 * \u4f5c\u4e3a\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 Python \u4e0d\u4f1a\u5bf9\u8be5 * \u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u4f46\u662f\u5b83\u5c06\u77e5\u9053\u4e4b\u540e\u7684\u6240\u6709\u53c2\u6570\u90fd\u5e94\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\uff08\u952e\u503c\u5bf9\uff09\uff0c\u4e5f\u88ab\u79f0\u4e3a kwargs \uff0c\u6765\u8c03\u7528\u3002\u5373\u4f7f\u5b83\u4eec\u6ca1\u6709\u9ed8\u8ba4\u503c\u3002 from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" ), q : str ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \u6570\u503c\u6821\u9a8c\uff1a\u5927\u4e8e\u7b49\u4e8e \u00b6 \u4f7f\u7528 Query \u548c Path \uff08\u4ee5\u53ca\u4f60\u5c06\u5728\u540e\u9762\u770b\u5230\u7684\u5176\u4ed6\u7c7b\uff09\u53ef\u4ee5\u58f0\u660e\u5b57\u7b26\u4e32\u7ea6\u675f\uff0c\u4f46\u4e5f\u53ef\u4ee5\u58f0\u660e\u6570\u503c\u7ea6\u675f\u3002 \u50cf\u4e0b\u9762\u8fd9\u6837\uff0c\u6dfb\u52a0 ge=1 \u540e\uff0c item_id \u5c06\u5fc5\u987b\u662f\u4e00\u4e2a\u5927\u4e8e\uff08 g reater than\uff09\u6216\u7b49\u4e8e\uff08 e qual\uff09 1 \u7684\u6574\u6570\u3002 from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 1 ), q : str ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \u6570\u503c\u6821\u9a8c\uff1a\u5927\u4e8e\u548c\u5c0f\u4e8e\u7b49\u4e8e \u00b6 \u540c\u6837\u7684\u89c4\u5219\u9002\u7528\u4e8e\uff1a gt \uff1a\u5927\u4e8e\uff08 g reater t han\uff09 le \uff1a\u5c0f\u4e8e\u7b49\u4e8e\uff08 l ess than or e qual\uff09 from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , gt = 0 , le = 1000 ), q : str , ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \u6570\u503c\u6821\u9a8c\uff1a\u6d6e\u70b9\u6570\u3001\u5927\u4e8e\u548c\u5c0f\u4e8e \u00b6 \u6570\u503c\u6821\u9a8c\u540c\u6837\u9002\u7528\u4e8e float \u503c\u3002 \u80fd\u591f\u58f0\u660e gt \u800c\u4e0d\u4ec5\u4ec5\u662f ge \u5728\u8fd9\u4e2a\u524d\u63d0\u4e0b\u53d8\u5f97\u91cd\u8981\u8d77\u6765\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u8981\u6c42\u4e00\u4e2a\u503c\u5fc5\u987b\u5927\u4e8e 0 \uff0c\u5373\u4f7f\u5b83\u5c0f\u4e8e 1 \u3002 \u56e0\u6b64\uff0c 0.5 \u5c06\u662f\u6709\u6548\u503c\u3002\u4f46\u662f 0.0 \u6216 0 \u4e0d\u662f\u3002 \u5bf9\u4e8e lt \u4e5f\u662f\u4e00\u6837\u7684\u3002 from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 0 , le = 1000 ), q : str , size : float = Query ( gt = 0 , lt = 10.5 ) ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \u603b\u7ed3 \u00b6 \u4f60\u80fd\u591f\u4ee5\u4e0e \u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c \u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528 Query \u3001 Path \uff08\u4ee5\u53ca\u5176\u4ed6\u4f60\u8fd8\u6ca1\u89c1\u8fc7\u7684\u7c7b\uff09\u58f0\u660e\u5143\u6570\u636e\u548c\u5b57\u7b26\u4e32\u6821\u9a8c\u3002 \u800c\u4e14\u4f60\u8fd8\u53ef\u4ee5\u58f0\u660e\u6570\u503c\u6821\u9a8c\uff1a gt \uff1a\u5927\u4e8e\uff08 g reater t han\uff09 ge \uff1a\u5927\u4e8e\u7b49\u4e8e\uff08 g reater than or e qual\uff09 lt \uff1a\u5c0f\u4e8e\uff08 l ess t han\uff09 le \uff1a\u5c0f\u4e8e\u7b49\u4e8e\uff08 l ess than or e qual\uff09 Info Query \u3001 Path \u4ee5\u53ca\u4f60\u540e\u9762\u4f1a\u770b\u5230\u7684\u5176\u4ed6\u7c7b\u7ee7\u627f\u81ea\u4e00\u4e2a\u5171\u540c\u7684 Param \u7c7b\uff08\u4e0d\u9700\u8981\u76f4\u63a5\u4f7f\u7528\u5b83\uff09\u3002 \u800c\u4e14\u5b83\u4eec\u90fd\u5171\u4eab\u76f8\u540c\u7684\u6240\u6709\u4f60\u5df2\u770b\u5230\u5e76\u7528\u4e8e\u6dfb\u52a0\u989d\u5916\u6821\u9a8c\u548c\u5143\u6570\u636e\u7684\u53c2\u6570\u3002 \u6280\u672f\u7ec6\u8282 \u5f53\u4f60\u4ece fastapi \u5bfc\u5165 Query \u3001 Path \u548c\u5176\u4ed6\u540c\u7c7b\u5bf9\u8c61\u65f6\uff0c\u5b83\u4eec\u5b9e\u9645\u4e0a\u662f\u51fd\u6570\u3002 \u5f53\u88ab\u8c03\u7528\u65f6\uff0c\u5b83\u4eec\u8fd4\u56de\u540c\u540d\u7c7b\u7684\u5b9e\u4f8b\u3002 \u5982\u6b64\uff0c\u4f60\u5bfc\u5165 Query \u8fd9\u4e2a\u51fd\u6570\u3002\u5f53\u4f60\u8c03\u7528\u5b83\u65f6\uff0c\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a\u540c\u6837\u547d\u540d\u4e3a Query \u7684\u7c7b\u7684\u5b9e\u4f8b\u3002 \u56e0\u4e3a\u4f7f\u7528\u4e86\u8fd9\u4e9b\u51fd\u6570\uff08\u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\u7c7b\uff09\uff0c\u6240\u4ee5\u4f60\u7684\u7f16\u8f91\u5668\u4e0d\u4f1a\u6807\u8bb0\u6709\u5173\u5176\u7c7b\u578b\u7684\u9519\u8bef\u3002 \u8fd9\u6837\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4\u7684\u7f16\u8f91\u5668\u548c\u7f16\u7801\u5de5\u5177\uff0c\u800c\u4e0d\u5fc5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u914d\u7f6e\u6765\u5ffd\u7565\u8fd9\u4e9b\u9519\u8bef\u3002","title":"\u8def\u5f84\u53c2\u6570\u548c\u6570\u503c\u6821\u9a8c"},{"location":"tutorial/path-params-numeric-validations/#_1","text":"\u4e0e\u4f7f\u7528 Query \u4e3a\u67e5\u8be2\u53c2\u6570\u58f0\u660e\u66f4\u591a\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 Path \u4e3a\u8def\u5f84\u53c2\u6570\u58f0\u660e\u76f8\u540c\u7c7b\u578b\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002","title":"\u8def\u5f84\u53c2\u6570\u548c\u6570\u503c\u6821\u9a8c"},{"location":"tutorial/path-params-numeric-validations/#path","text":"\u9996\u5148\uff0c\u4ece fastapi \u5bfc\u5165 Path \uff1a from typing import Union from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\u5bfc\u5165 Path"},{"location":"tutorial/path-params-numeric-validations/#_2","text":"\u4f60\u53ef\u4ee5\u58f0\u660e\u4e0e Query \u76f8\u540c\u7684\u6240\u6709\u53c2\u6570\u3002 \u4f8b\u5982\uff0c\u8981\u58f0\u660e\u8def\u5f84\u53c2\u6570 item_id \u7684 title \u5143\u6570\u636e\u503c\uff0c\u4f60\u53ef\u4ee5\u8f93\u5165\uff1a from typing import Union from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results Note \u8def\u5f84\u53c2\u6570\u603b\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u5b83\u5fc5\u987b\u662f\u8def\u5f84\u7684\u4e00\u90e8\u5206\u3002 \u6240\u4ee5\uff0c\u4f60\u5e94\u8be5\u5728\u58f0\u660e\u65f6\u4f7f\u7528 ... \u5c06\u5176\u6807\u8bb0\u4e3a\u5fc5\u9700\u53c2\u6570\u3002 \u7136\u800c\uff0c\u5373\u4f7f\u4f60\u4f7f\u7528 None \u58f0\u660e\u8def\u5f84\u53c2\u6570\u6216\u8bbe\u7f6e\u4e00\u4e2a\u5176\u4ed6\u9ed8\u8ba4\u503c\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u5b83\u4f9d\u7136\u4f1a\u662f\u5fc5\u9700\u53c2\u6570\u3002","title":"\u58f0\u660e\u5143\u6570\u636e"},{"location":"tutorial/path-params-numeric-validations/#_3","text":"\u5047\u8bbe\u4f60\u60f3\u8981\u58f0\u660e\u4e00\u4e2a\u5fc5\u9700\u7684 str \u7c7b\u578b\u67e5\u8be2\u53c2\u6570 q \u3002 \u800c\u4e14\u4f60\u4e0d\u9700\u8981\u4e3a\u8be5\u53c2\u6570\u58f0\u660e\u4efb\u4f55\u5176\u4ed6\u5185\u5bb9\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u4f60\u5e76\u4e0d\u9700\u8981\u4f7f\u7528 Query \u3002 \u4f46\u662f\u4f60\u4ecd\u7136\u9700\u8981\u4f7f\u7528 Path \u6765\u58f0\u660e\u8def\u5f84\u53c2\u6570 item_id \u3002 \u5982\u679c\u4f60\u5c06\u5e26\u6709\u300c\u9ed8\u8ba4\u503c\u300d\u7684\u53c2\u6570\u653e\u5728\u6ca1\u6709\u300c\u9ed8\u8ba4\u503c\u300d\u7684\u53c2\u6570\u4e4b\u524d\uff0cPython \u5c06\u4f1a\u62a5\u9519\u3002 \u4f46\u662f\u4f60\u53ef\u4ee5\u5bf9\u5176\u91cd\u65b0\u6392\u5e8f\uff0c\u5e76\u5c06\u4e0d\u5e26\u9ed8\u8ba4\u503c\u7684\u503c\uff08\u67e5\u8be2\u53c2\u6570 q \uff09\u653e\u5230\u6700\u524d\u9762\u3002 \u5bf9 FastAPI \u6765\u8bf4\u8fd9\u65e0\u5173\u7d27\u8981\u3002\u5b83\u5c06\u901a\u8fc7\u53c2\u6570\u7684\u540d\u79f0\u3001\u7c7b\u578b\u548c\u9ed8\u8ba4\u503c\u58f0\u660e\uff08 Query \u3001 Path \u7b49\uff09\u6765\u68c0\u6d4b\u53c2\u6570\uff0c\u800c\u4e0d\u5728\u4e4e\u53c2\u6570\u7684\u987a\u5e8f\u3002 \u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u5c06\u51fd\u6570\u58f0\u660e\u4e3a\uff1a from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( q : str , item_id : int = Path ( title = \"The ID of the item to get\" )): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\u6309\u9700\u5bf9\u53c2\u6570\u6392\u5e8f"},{"location":"tutorial/path-params-numeric-validations/#_4","text":"\u5982\u679c\u4f60\u60f3\u4e0d\u4f7f\u7528 Query \u58f0\u660e\u6ca1\u6709\u9ed8\u8ba4\u503c\u7684\u67e5\u8be2\u53c2\u6570 q \uff0c\u540c\u65f6\u4f7f\u7528 Path \u58f0\u660e\u8def\u5f84\u53c2\u6570 item_id \uff0c\u5e76\u4f7f\u5b83\u4eec\u7684\u987a\u5e8f\u4e0e\u4e0a\u9762\u4e0d\u540c\uff0cPython \u5bf9\u6b64\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u8bed\u6cd5\u3002 \u4f20\u9012 * \u4f5c\u4e3a\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 Python \u4e0d\u4f1a\u5bf9\u8be5 * \u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u4f46\u662f\u5b83\u5c06\u77e5\u9053\u4e4b\u540e\u7684\u6240\u6709\u53c2\u6570\u90fd\u5e94\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\uff08\u952e\u503c\u5bf9\uff09\uff0c\u4e5f\u88ab\u79f0\u4e3a kwargs \uff0c\u6765\u8c03\u7528\u3002\u5373\u4f7f\u5b83\u4eec\u6ca1\u6709\u9ed8\u8ba4\u503c\u3002 from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" ), q : str ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\u6309\u9700\u5bf9\u53c2\u6570\u6392\u5e8f\u7684\u6280\u5de7"},{"location":"tutorial/path-params-numeric-validations/#_5","text":"\u4f7f\u7528 Query \u548c Path \uff08\u4ee5\u53ca\u4f60\u5c06\u5728\u540e\u9762\u770b\u5230\u7684\u5176\u4ed6\u7c7b\uff09\u53ef\u4ee5\u58f0\u660e\u5b57\u7b26\u4e32\u7ea6\u675f\uff0c\u4f46\u4e5f\u53ef\u4ee5\u58f0\u660e\u6570\u503c\u7ea6\u675f\u3002 \u50cf\u4e0b\u9762\u8fd9\u6837\uff0c\u6dfb\u52a0 ge=1 \u540e\uff0c item_id \u5c06\u5fc5\u987b\u662f\u4e00\u4e2a\u5927\u4e8e\uff08 g reater than\uff09\u6216\u7b49\u4e8e\uff08 e qual\uff09 1 \u7684\u6574\u6570\u3002 from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 1 ), q : str ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\u6570\u503c\u6821\u9a8c\uff1a\u5927\u4e8e\u7b49\u4e8e"},{"location":"tutorial/path-params-numeric-validations/#_6","text":"\u540c\u6837\u7684\u89c4\u5219\u9002\u7528\u4e8e\uff1a gt \uff1a\u5927\u4e8e\uff08 g reater t han\uff09 le \uff1a\u5c0f\u4e8e\u7b49\u4e8e\uff08 l ess than or e qual\uff09 from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , gt = 0 , le = 1000 ), q : str , ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\u6570\u503c\u6821\u9a8c\uff1a\u5927\u4e8e\u548c\u5c0f\u4e8e\u7b49\u4e8e"},{"location":"tutorial/path-params-numeric-validations/#_7","text":"\u6570\u503c\u6821\u9a8c\u540c\u6837\u9002\u7528\u4e8e float \u503c\u3002 \u80fd\u591f\u58f0\u660e gt \u800c\u4e0d\u4ec5\u4ec5\u662f ge \u5728\u8fd9\u4e2a\u524d\u63d0\u4e0b\u53d8\u5f97\u91cd\u8981\u8d77\u6765\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u8981\u6c42\u4e00\u4e2a\u503c\u5fc5\u987b\u5927\u4e8e 0 \uff0c\u5373\u4f7f\u5b83\u5c0f\u4e8e 1 \u3002 \u56e0\u6b64\uff0c 0.5 \u5c06\u662f\u6709\u6548\u503c\u3002\u4f46\u662f 0.0 \u6216 0 \u4e0d\u662f\u3002 \u5bf9\u4e8e lt \u4e5f\u662f\u4e00\u6837\u7684\u3002 from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 0 , le = 1000 ), q : str , size : float = Query ( gt = 0 , lt = 10.5 ) ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\u6570\u503c\u6821\u9a8c\uff1a\u6d6e\u70b9\u6570\u3001\u5927\u4e8e\u548c\u5c0f\u4e8e"},{"location":"tutorial/path-params-numeric-validations/#_8","text":"\u4f60\u80fd\u591f\u4ee5\u4e0e \u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c \u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528 Query \u3001 Path \uff08\u4ee5\u53ca\u5176\u4ed6\u4f60\u8fd8\u6ca1\u89c1\u8fc7\u7684\u7c7b\uff09\u58f0\u660e\u5143\u6570\u636e\u548c\u5b57\u7b26\u4e32\u6821\u9a8c\u3002 \u800c\u4e14\u4f60\u8fd8\u53ef\u4ee5\u58f0\u660e\u6570\u503c\u6821\u9a8c\uff1a gt \uff1a\u5927\u4e8e\uff08 g reater t han\uff09 ge \uff1a\u5927\u4e8e\u7b49\u4e8e\uff08 g reater than or e qual\uff09 lt \uff1a\u5c0f\u4e8e\uff08 l ess t han\uff09 le \uff1a\u5c0f\u4e8e\u7b49\u4e8e\uff08 l ess than or e qual\uff09 Info Query \u3001 Path \u4ee5\u53ca\u4f60\u540e\u9762\u4f1a\u770b\u5230\u7684\u5176\u4ed6\u7c7b\u7ee7\u627f\u81ea\u4e00\u4e2a\u5171\u540c\u7684 Param \u7c7b\uff08\u4e0d\u9700\u8981\u76f4\u63a5\u4f7f\u7528\u5b83\uff09\u3002 \u800c\u4e14\u5b83\u4eec\u90fd\u5171\u4eab\u76f8\u540c\u7684\u6240\u6709\u4f60\u5df2\u770b\u5230\u5e76\u7528\u4e8e\u6dfb\u52a0\u989d\u5916\u6821\u9a8c\u548c\u5143\u6570\u636e\u7684\u53c2\u6570\u3002 \u6280\u672f\u7ec6\u8282 \u5f53\u4f60\u4ece fastapi \u5bfc\u5165 Query \u3001 Path \u548c\u5176\u4ed6\u540c\u7c7b\u5bf9\u8c61\u65f6\uff0c\u5b83\u4eec\u5b9e\u9645\u4e0a\u662f\u51fd\u6570\u3002 \u5f53\u88ab\u8c03\u7528\u65f6\uff0c\u5b83\u4eec\u8fd4\u56de\u540c\u540d\u7c7b\u7684\u5b9e\u4f8b\u3002 \u5982\u6b64\uff0c\u4f60\u5bfc\u5165 Query \u8fd9\u4e2a\u51fd\u6570\u3002\u5f53\u4f60\u8c03\u7528\u5b83\u65f6\uff0c\u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a\u540c\u6837\u547d\u540d\u4e3a Query \u7684\u7c7b\u7684\u5b9e\u4f8b\u3002 \u56e0\u4e3a\u4f7f\u7528\u4e86\u8fd9\u4e9b\u51fd\u6570\uff08\u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\u7c7b\uff09\uff0c\u6240\u4ee5\u4f60\u7684\u7f16\u8f91\u5668\u4e0d\u4f1a\u6807\u8bb0\u6709\u5173\u5176\u7c7b\u578b\u7684\u9519\u8bef\u3002 \u8fd9\u6837\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5e38\u89c4\u7684\u7f16\u8f91\u5668\u548c\u7f16\u7801\u5de5\u5177\uff0c\u800c\u4e0d\u5fc5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u914d\u7f6e\u6765\u5ffd\u7565\u8fd9\u4e9b\u9519\u8bef\u3002","title":"\u603b\u7ed3"},{"location":"tutorial/path-params/","text":"\u8def\u5f84\u53c2\u6570 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0e Python \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f8\u540c\u7684\u8bed\u6cd5\u6765\u58f0\u660e\u8def\u5f84\"\u53c2\u6570\"\u6216\"\u53d8\u91cf\"\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id ): return { \"item_id\" : item_id } \u8def\u5f84\u53c2\u6570 item_id \u7684\u503c\u5c06\u4f5c\u4e3a\u53c2\u6570 item_id \u4f20\u9012\u7ed9\u4f60\u7684\u51fd\u6570\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u4f60\u8fd0\u884c\u793a\u4f8b\u5e76\u8bbf\u95ee http://127.0.0.1:8000/items/foo \uff0c\u5c06\u4f1a\u770b\u5230\u5982\u4e0b\u54cd\u5e94\uff1a { \"item_id\" : \"foo\" } \u6709\u7c7b\u578b\u7684\u8def\u5f84\u53c2\u6570 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684 Python \u7c7b\u578b\u6807\u6ce8\u4e3a\u51fd\u6570\u4e2d\u7684\u8def\u5f84\u53c2\u6570\u58f0\u660e\u7c7b\u578b\u3002 from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): return { \"item_id\" : item_id } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c item_id \u88ab\u58f0\u660e\u4e3a int \u7c7b\u578b\u3002 Check \u8fd9\u5c06\u4e3a\u4f60\u7684\u51fd\u6570\u63d0\u4f9b\u7f16\u8f91\u5668\u652f\u6301\uff0c\u5305\u62ec\u9519\u8bef\u68c0\u67e5\u3001\u4ee3\u7801\u8865\u5168\u7b49\u7b49\u3002 \u6570\u636e \u8f6c\u6362 \u00b6 \u5982\u679c\u4f60\u8fd0\u884c\u793a\u4f8b\u5e76\u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000/items/3 \uff0c\u5c06\u5f97\u5230\u5982\u4e0b\u54cd\u5e94\uff1a { \"item_id\" : 3 } Check \u6ce8\u610f\u51fd\u6570\u63a5\u6536\uff08\u5e76\u8fd4\u56de\uff09\u7684\u503c\u4e3a 3\uff0c\u662f\u4e00\u4e2a Python int \u503c\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u4e32 \"3\" \u3002 \u6240\u4ee5\uff0c FastAPI \u901a\u8fc7\u4e0a\u9762\u7684\u7c7b\u578b\u58f0\u660e\u63d0\u4f9b\u4e86\u5bf9\u8bf7\u6c42\u7684\u81ea\u52a8 \"\u89e3\u6790\" \u3002 \u6570\u636e\u6821\u9a8c \u00b6 \u4f46\u5982\u679c\u4f60\u901a\u8fc7\u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000/items/foo \uff0c\u4f60\u4f1a\u770b\u5230\u4e00\u4e2a\u6e05\u6670\u53ef\u8bfb\u7684 HTTP \u9519\u8bef\uff1a { \"detail\" : [ { \"loc\" : [ \"path\" , \"item_id\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] } \u56e0\u4e3a\u8def\u5f84\u53c2\u6570 item_id \u4f20\u5165\u7684\u503c\u4e3a \"foo\" \uff0c\u5b83\u4e0d\u662f\u4e00\u4e2a int \u3002 \u5982\u679c\u4f60\u63d0\u4f9b\u7684\u662f float \u800c\u975e\u6574\u6570\u4e5f\u4f1a\u51fa\u73b0\u540c\u6837\u7684\u9519\u8bef\uff0c\u6bd4\u5982\uff1a http://127.0.0.1:8000/items/4.2 Check \u6240\u4ee5\uff0c\u901a\u8fc7\u540c\u6837\u7684 Python \u7c7b\u578b\u58f0\u660e\uff0c FastAPI \u63d0\u4f9b\u4e86\u6570\u636e\u6821\u9a8c\u529f\u80fd\u3002 \u6ce8\u610f\u4e0a\u9762\u7684\u9519\u8bef\u540c\u6837\u6e05\u695a\u5730\u6307\u51fa\u4e86\u6821\u9a8c\u672a\u901a\u8fc7\u7684\u5177\u4f53\u539f\u56e0\u3002 \u5728\u5f00\u53d1\u548c\u8c03\u8bd5\u4e0e\u4f60\u7684 API \u8fdb\u884c\u4ea4\u4e92\u7684\u4ee3\u7801\u65f6\uff0c\u8fd9\u975e\u5e38\u6709\u7528\u3002 \u6587\u6863 \u00b6 \u5f53\u4f60\u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000/docs \uff0c\u4f60\u5c06\u770b\u5230\u81ea\u52a8\u751f\u6210\u7684\u4ea4\u4e92\u5f0f API \u6587\u6863\uff1a Check \u518d\u4e00\u6b21\uff0c\u8fd8\u662f\u901a\u8fc7\u76f8\u540c\u7684 Python \u7c7b\u578b\u58f0\u660e\uff0c FastAPI \u4e3a\u4f60\u63d0\u4f9b\u4e86\u81ea\u52a8\u751f\u6210\u7684\u4ea4\u4e92\u5f0f\u6587\u6863\uff08\u96c6\u6210 Swagger UI\uff09\u3002 \u6ce8\u610f\u8fd9\u91cc\u7684\u8def\u5f84\u53c2\u6570\u88ab\u58f0\u660e\u4e3a\u4e00\u4e2a\u6574\u6570\u3002 \u57fa\u4e8e\u6807\u51c6\u7684\u597d\u5904\uff1a\u53ef\u9009\u6587\u6863 \u00b6 \u7531\u4e8e\u751f\u6210\u7684 API \u6a21\u5f0f\u6765\u81ea\u4e8e OpenAPI \u6807\u51c6\uff0c\u6240\u4ee5\u6709\u5f88\u591a\u5de5\u5177\u4e0e\u5176\u517c\u5bb9\u3002 \u6b63\u56e0\u5982\u6b64\uff0c FastAPI \u5185\u7f6e\u4e86\u4e00\u4e2a\u53ef\u9009\u7684 API \u6587\u6863\uff08\u4f7f\u7528 Redoc\uff09\uff1a \u540c\u6837\u7684\uff0c\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u517c\u5bb9\u7684\u5de5\u5177\uff0c\u5305\u62ec\u9002\u7528\u4e8e\u591a\u79cd\u8bed\u8a00\u7684\u4ee3\u7801\u751f\u6210\u5de5\u5177\u3002 Pydantic \u00b6 \u6240\u6709\u7684\u6570\u636e\u6821\u9a8c\u90fd\u7531 Pydantic \u5728\u5e55\u540e\u5b8c\u6210\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u4ece\u5b83\u6240\u6709\u7684\u4f18\u70b9\u4e2d\u53d7\u76ca\u3002\u5e76\u4e14\u4f60\u77e5\u9053\u5b83\u5728\u8fd9\u65b9\u9762\u975e\u5e38\u80dc\u4efb\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u540c\u6837\u7684\u7c7b\u578b\u58f0\u660e\u6765\u58f0\u660e str \u3001 float \u3001 bool \u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u7684\u590d\u5408\u6570\u636e\u7c7b\u578b\u3002 \u672c\u6559\u7a0b\u7684\u4e0b\u4e00\u7ae0\u8282\u5c06\u63a2\u8ba8\u5176\u4e2d\u7684\u4e00\u4e9b\u5185\u5bb9\u3002 \u987a\u5e8f\u5f88\u91cd\u8981 \u00b6 \u5728\u521b\u5efa \u8def\u5f84\u64cd\u4f5c \u65f6\uff0c\u4f60\u4f1a\u53d1\u73b0\u6709\u4e9b\u60c5\u51b5\u4e0b\u8def\u5f84\u662f\u56fa\u5b9a\u7684\u3002 \u6bd4\u5982 /users/me \uff0c\u6211\u4eec\u5047\u8bbe\u5b83\u7528\u6765\u83b7\u53d6\u5173\u4e8e\u5f53\u524d\u7528\u6237\u7684\u6570\u636e. \u7136\u540e\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u8def\u5f84 /users/{user_id} \u6765\u901a\u8fc7\u7528\u6237 ID \u83b7\u53d6\u5173\u4e8e\u7279\u5b9a\u7528\u6237\u7684\u6570\u636e\u3002 \u7531\u4e8e \u8def\u5f84\u64cd\u4f5c \u662f\u6309\u987a\u5e8f\u4f9d\u6b21\u8fd0\u884c\u7684\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u8def\u5f84 /users/me \u58f0\u660e\u5728\u8def\u5f84 /users/{user_id} \u4e4b\u524d\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/me\" ) async def read_user_me (): return { \"user_id\" : \"the current user\" } @app . get ( \"/users/ {user_id} \" ) async def read_user ( user_id : str ): return { \"user_id\" : user_id } \u5426\u5219\uff0c /users/{user_id} \u7684\u8def\u5f84\u8fd8\u5c06\u4e0e /users/me \u76f8\u5339\u914d\uff0c\"\u8ba4\u4e3a\"\u81ea\u5df1\u6b63\u5728\u63a5\u6536\u4e00\u4e2a\u503c\u4e3a \"me\" \u7684 user_id \u53c2\u6570\u3002 \u9884\u8bbe\u503c \u00b6 \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u63a5\u6536\u8def\u5f84\u53c2\u6570\u7684\u8def\u5f84\u64cd\u4f5c\uff0c\u4f46\u4f60\u5e0c\u671b\u9884\u5148\u8bbe\u5b9a\u53ef\u80fd\u7684\u6709\u6548\u53c2\u6570\u503c\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684 Python Enum \u7c7b\u578b\u3002 \u521b\u5efa\u4e00\u4e2a Enum \u7c7b \u00b6 \u5bfc\u5165 Enum \u5e76\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u81ea str \u548c Enum \u7684\u5b50\u7c7b\u3002 \u901a\u8fc7\u4ece str \u7ee7\u627f\uff0cAPI \u6587\u6863\u5c06\u80fd\u591f\u77e5\u9053\u8fd9\u4e9b\u503c\u5fc5\u987b\u4e3a string \u7c7b\u578b\u5e76\u4e14\u80fd\u591f\u6b63\u786e\u5730\u5c55\u793a\u51fa\u6765\u3002 \u7136\u540e\u521b\u5efa\u5177\u6709\u56fa\u5b9a\u503c\u7684\u7c7b\u5c5e\u6027\uff0c\u8fd9\u4e9b\u56fa\u5b9a\u503c\u5c06\u662f\u53ef\u7528\u7684\u6709\u6548\u503c\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } Info \u679a\u4e3e\uff08\u6216 enums\uff09 \u4ece 3.4 \u7248\u672c\u8d77\u5728 Python \u4e2d\u53ef\u7528\u3002 Tip \u5982\u679c\u4f60\u60f3\u77e5\u9053\uff0c\"AlexNet\"\u3001\"ResNet\" \u548c \"LeNet\" \u53ea\u662f\u673a\u5668\u5b66\u4e60\u4e2d\u7684 \u6a21\u578b \u540d\u79f0\u3002 \u58f0\u660e \u8def\u5f84\u53c2\u6570 \u00b6 \u7136\u540e\u4f7f\u7528\u4f60\u5b9a\u4e49\u7684\u679a\u4e3e\u7c7b\uff08 ModelName \uff09\u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u7c7b\u578b\u6807\u6ce8\u7684 \u8def\u5f84\u53c2\u6570 \uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \u67e5\u770b\u6587\u6863 \u00b6 \u56e0\u4e3a\u5df2\u7ecf\u6307\u5b9a\u4e86 \u8def\u5f84\u53c2\u6570 \u7684\u53ef\u7528\u503c\uff0c\u6240\u4ee5\u4ea4\u4e92\u5f0f\u6587\u6863\u53ef\u4ee5\u6070\u5f53\u5730\u5c55\u793a\u5b83\u4eec\uff1a \u4f7f\u7528 Python \u679a\u4e3e\u7c7b\u578b \u00b6 \u8def\u5f84\u53c2\u6570 \u7684\u503c\u5c06\u662f\u4e00\u4e2a \u679a\u4e3e\u6210\u5458 \u3002 \u6bd4\u8f83 \u679a\u4e3e\u6210\u5458 \u00b6 \u4f60\u53ef\u4ee5\u5c06\u5b83\u4e0e\u4f60\u521b\u5efa\u7684\u679a\u4e3e\u7c7b ModelName \u4e2d\u7684 \u679a\u4e3e\u6210\u5458 \u8fdb\u884c\u6bd4\u8f83\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \u83b7\u53d6 \u679a\u4e3e\u503c \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528 model_name.value \u6216\u901a\u5e38\u6765\u8bf4 your_enum_member.value \u6765\u83b7\u53d6\u5b9e\u9645\u7684\u503c\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4e3a str \uff09\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } Tip \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7 ModelName.lenet.value \u6765\u83b7\u53d6\u503c \"lenet\" \u3002 \u8fd4\u56de \u679a\u4e3e\u6210\u5458 \u00b6 \u4f60\u53ef\u4ee5\u4ece \u8def\u5f84\u64cd\u4f5c \u4e2d\u8fd4\u56de \u679a\u4e3e\u6210\u5458 \uff0c\u5373\u4f7f\u5d4c\u5957\u5728 JSON \u7ed3\u6784\u4e2d\uff08\u4f8b\u5982\u4e00\u4e2a dict \u4e2d\uff09\u3002 \u5728\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u4e4b\u524d\uff0c\u5b83\u4eec\u5c06\u88ab\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u503c\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \u5305\u542b\u8def\u5f84\u7684\u8def\u5f84\u53c2\u6570 \u00b6 \u5047\u8bbe\u4f60\u6709\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \uff0c\u5b83\u7684\u8def\u5f84\u4e3a /files/{file_path} \u3002 \u4f46\u662f\u4f60\u9700\u8981 file_path \u81ea\u8eab\u4e5f\u5305\u542b \u8def\u5f84 \uff0c\u6bd4\u5982 home/johndoe/myfile.txt \u3002 \u56e0\u6b64\uff0c\u8be5\u6587\u4ef6\u7684URL\u5c06\u7c7b\u4f3c\u4e8e\u8fd9\u6837\uff1a /files/home/johndoe/myfile.txt \u3002 OpenAPI \u652f\u6301 \u00b6 OpenAPI \u4e0d\u652f\u6301\u4efb\u4f55\u65b9\u5f0f\u53bb\u58f0\u660e \u8def\u5f84\u53c2\u6570 \u4ee5\u5728\u5176\u5185\u90e8\u5305\u542b \u8def\u5f84 \uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u96be\u4ee5\u6d4b\u8bd5\u548c\u5b9a\u4e49\u7684\u60c5\u51b5\u51fa\u73b0\u3002 \u4e0d\u8fc7\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7 Starlette \u7684\u4e00\u4e2a\u5185\u90e8\u5de5\u5177\u5728 FastAPI \u4e2d\u5b9e\u73b0\u5b83\u3002 \u800c\u4e14\u6587\u6863\u4f9d\u65e7\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u662f\u4e0d\u4f1a\u6dfb\u52a0\u4efb\u4f55\u8be5\u53c2\u6570\u5e94\u5305\u542b\u8def\u5f84\u7684\u8bf4\u660e\u3002 \u8def\u5f84\u8f6c\u6362\u5668 \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\u76f4\u63a5\u6765\u81ea Starlette \u7684\u9009\u9879\u6765\u58f0\u660e\u4e00\u4e2a\u5305\u542b \u8def\u5f84 \u7684 \u8def\u5f84\u53c2\u6570 \uff1a /files/{file_path:path} \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53c2\u6570\u7684\u540d\u79f0\u4e3a file_path \uff0c\u7ed3\u5c3e\u90e8\u5206\u7684 :path \u8bf4\u660e\u8be5\u53c2\u6570\u5e94\u5339\u914d\u4efb\u610f\u7684 \u8def\u5f84 \u3002 \u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\u5b83\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/files/{file_path:path}\" ) async def read_file ( file_path : str ): return { \"file_path\" : file_path } Tip \u4f60\u53ef\u80fd\u4f1a\u9700\u8981\u53c2\u6570\u5305\u542b /home/johndoe/myfile.txt \uff0c\u4ee5\u659c\u6760\uff08 / \uff09\u5f00\u5934\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cURL \u5c06\u4f1a\u662f /files//home/johndoe/myfile.txt \uff0c\u5728 files \u548c home \u4e4b\u95f4\u6709\u4e00\u4e2a\u53cc\u659c\u6760\uff08 // \uff09\u3002 \u603b\u7ed3 \u00b6 \u4f7f\u7528 FastAPI \uff0c\u901a\u8fc7\u7b80\u77ed\u3001\u76f4\u89c2\u548c\u6807\u51c6\u7684 Python \u7c7b\u578b\u58f0\u660e\uff0c\u4f60\u5c06\u83b7\u5f97\uff1a \u7f16\u8f91\u5668\u652f\u6301\uff1a\u9519\u8bef\u68c0\u67e5\uff0c\u4ee3\u7801\u8865\u5168\u7b49 \u6570\u636e \" \u89e3\u6790 \" \u6570\u636e\u6821\u9a8c API \u6807\u6ce8\u548c\u81ea\u52a8\u751f\u6210\u7684\u6587\u6863 \u800c\u4e14\u4f60\u53ea\u9700\u8981\u58f0\u660e\u4e00\u6b21\u5373\u53ef\u3002 \u8fd9\u53ef\u80fd\u662f FastAPI \u4e0e\u5176\u4ed6\u6846\u67b6\u76f8\u6bd4\u4e3b\u8981\u7684\u660e\u663e\u4f18\u52bf\uff08\u9664\u4e86\u539f\u59cb\u6027\u80fd\u4ee5\u5916\uff09\u3002","title":"\u8def\u5f84\u53c2\u6570"},{"location":"tutorial/path-params/#_1","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0e Python \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f8\u540c\u7684\u8bed\u6cd5\u6765\u58f0\u660e\u8def\u5f84\"\u53c2\u6570\"\u6216\"\u53d8\u91cf\"\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id ): return { \"item_id\" : item_id } \u8def\u5f84\u53c2\u6570 item_id \u7684\u503c\u5c06\u4f5c\u4e3a\u53c2\u6570 item_id \u4f20\u9012\u7ed9\u4f60\u7684\u51fd\u6570\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u4f60\u8fd0\u884c\u793a\u4f8b\u5e76\u8bbf\u95ee http://127.0.0.1:8000/items/foo \uff0c\u5c06\u4f1a\u770b\u5230\u5982\u4e0b\u54cd\u5e94\uff1a { \"item_id\" : \"foo\" }","title":"\u8def\u5f84\u53c2\u6570"},{"location":"tutorial/path-params/#_2","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684 Python \u7c7b\u578b\u6807\u6ce8\u4e3a\u51fd\u6570\u4e2d\u7684\u8def\u5f84\u53c2\u6570\u58f0\u660e\u7c7b\u578b\u3002 from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): return { \"item_id\" : item_id } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c item_id \u88ab\u58f0\u660e\u4e3a int \u7c7b\u578b\u3002 Check \u8fd9\u5c06\u4e3a\u4f60\u7684\u51fd\u6570\u63d0\u4f9b\u7f16\u8f91\u5668\u652f\u6301\uff0c\u5305\u62ec\u9519\u8bef\u68c0\u67e5\u3001\u4ee3\u7801\u8865\u5168\u7b49\u7b49\u3002","title":"\u6709\u7c7b\u578b\u7684\u8def\u5f84\u53c2\u6570"},{"location":"tutorial/path-params/#_3","text":"\u5982\u679c\u4f60\u8fd0\u884c\u793a\u4f8b\u5e76\u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000/items/3 \uff0c\u5c06\u5f97\u5230\u5982\u4e0b\u54cd\u5e94\uff1a { \"item_id\" : 3 } Check \u6ce8\u610f\u51fd\u6570\u63a5\u6536\uff08\u5e76\u8fd4\u56de\uff09\u7684\u503c\u4e3a 3\uff0c\u662f\u4e00\u4e2a Python int \u503c\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u4e32 \"3\" \u3002 \u6240\u4ee5\uff0c FastAPI \u901a\u8fc7\u4e0a\u9762\u7684\u7c7b\u578b\u58f0\u660e\u63d0\u4f9b\u4e86\u5bf9\u8bf7\u6c42\u7684\u81ea\u52a8 \"\u89e3\u6790\" \u3002","title":"\u6570\u636e\u8f6c\u6362"},{"location":"tutorial/path-params/#_4","text":"\u4f46\u5982\u679c\u4f60\u901a\u8fc7\u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000/items/foo \uff0c\u4f60\u4f1a\u770b\u5230\u4e00\u4e2a\u6e05\u6670\u53ef\u8bfb\u7684 HTTP \u9519\u8bef\uff1a { \"detail\" : [ { \"loc\" : [ \"path\" , \"item_id\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] } \u56e0\u4e3a\u8def\u5f84\u53c2\u6570 item_id \u4f20\u5165\u7684\u503c\u4e3a \"foo\" \uff0c\u5b83\u4e0d\u662f\u4e00\u4e2a int \u3002 \u5982\u679c\u4f60\u63d0\u4f9b\u7684\u662f float \u800c\u975e\u6574\u6570\u4e5f\u4f1a\u51fa\u73b0\u540c\u6837\u7684\u9519\u8bef\uff0c\u6bd4\u5982\uff1a http://127.0.0.1:8000/items/4.2 Check \u6240\u4ee5\uff0c\u901a\u8fc7\u540c\u6837\u7684 Python \u7c7b\u578b\u58f0\u660e\uff0c FastAPI \u63d0\u4f9b\u4e86\u6570\u636e\u6821\u9a8c\u529f\u80fd\u3002 \u6ce8\u610f\u4e0a\u9762\u7684\u9519\u8bef\u540c\u6837\u6e05\u695a\u5730\u6307\u51fa\u4e86\u6821\u9a8c\u672a\u901a\u8fc7\u7684\u5177\u4f53\u539f\u56e0\u3002 \u5728\u5f00\u53d1\u548c\u8c03\u8bd5\u4e0e\u4f60\u7684 API \u8fdb\u884c\u4ea4\u4e92\u7684\u4ee3\u7801\u65f6\uff0c\u8fd9\u975e\u5e38\u6709\u7528\u3002","title":"\u6570\u636e\u6821\u9a8c"},{"location":"tutorial/path-params/#_5","text":"\u5f53\u4f60\u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000/docs \uff0c\u4f60\u5c06\u770b\u5230\u81ea\u52a8\u751f\u6210\u7684\u4ea4\u4e92\u5f0f API \u6587\u6863\uff1a Check \u518d\u4e00\u6b21\uff0c\u8fd8\u662f\u901a\u8fc7\u76f8\u540c\u7684 Python \u7c7b\u578b\u58f0\u660e\uff0c FastAPI \u4e3a\u4f60\u63d0\u4f9b\u4e86\u81ea\u52a8\u751f\u6210\u7684\u4ea4\u4e92\u5f0f\u6587\u6863\uff08\u96c6\u6210 Swagger UI\uff09\u3002 \u6ce8\u610f\u8fd9\u91cc\u7684\u8def\u5f84\u53c2\u6570\u88ab\u58f0\u660e\u4e3a\u4e00\u4e2a\u6574\u6570\u3002","title":"\u6587\u6863"},{"location":"tutorial/path-params/#_6","text":"\u7531\u4e8e\u751f\u6210\u7684 API \u6a21\u5f0f\u6765\u81ea\u4e8e OpenAPI \u6807\u51c6\uff0c\u6240\u4ee5\u6709\u5f88\u591a\u5de5\u5177\u4e0e\u5176\u517c\u5bb9\u3002 \u6b63\u56e0\u5982\u6b64\uff0c FastAPI \u5185\u7f6e\u4e86\u4e00\u4e2a\u53ef\u9009\u7684 API \u6587\u6863\uff08\u4f7f\u7528 Redoc\uff09\uff1a \u540c\u6837\u7684\uff0c\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u517c\u5bb9\u7684\u5de5\u5177\uff0c\u5305\u62ec\u9002\u7528\u4e8e\u591a\u79cd\u8bed\u8a00\u7684\u4ee3\u7801\u751f\u6210\u5de5\u5177\u3002","title":"\u57fa\u4e8e\u6807\u51c6\u7684\u597d\u5904\uff1a\u53ef\u9009\u6587\u6863"},{"location":"tutorial/path-params/#pydantic","text":"\u6240\u6709\u7684\u6570\u636e\u6821\u9a8c\u90fd\u7531 Pydantic \u5728\u5e55\u540e\u5b8c\u6210\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u4ece\u5b83\u6240\u6709\u7684\u4f18\u70b9\u4e2d\u53d7\u76ca\u3002\u5e76\u4e14\u4f60\u77e5\u9053\u5b83\u5728\u8fd9\u65b9\u9762\u975e\u5e38\u80dc\u4efb\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u540c\u6837\u7684\u7c7b\u578b\u58f0\u660e\u6765\u58f0\u660e str \u3001 float \u3001 bool \u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u7684\u590d\u5408\u6570\u636e\u7c7b\u578b\u3002 \u672c\u6559\u7a0b\u7684\u4e0b\u4e00\u7ae0\u8282\u5c06\u63a2\u8ba8\u5176\u4e2d\u7684\u4e00\u4e9b\u5185\u5bb9\u3002","title":"Pydantic"},{"location":"tutorial/path-params/#_7","text":"\u5728\u521b\u5efa \u8def\u5f84\u64cd\u4f5c \u65f6\uff0c\u4f60\u4f1a\u53d1\u73b0\u6709\u4e9b\u60c5\u51b5\u4e0b\u8def\u5f84\u662f\u56fa\u5b9a\u7684\u3002 \u6bd4\u5982 /users/me \uff0c\u6211\u4eec\u5047\u8bbe\u5b83\u7528\u6765\u83b7\u53d6\u5173\u4e8e\u5f53\u524d\u7528\u6237\u7684\u6570\u636e. \u7136\u540e\uff0c\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\u8def\u5f84 /users/{user_id} \u6765\u901a\u8fc7\u7528\u6237 ID \u83b7\u53d6\u5173\u4e8e\u7279\u5b9a\u7528\u6237\u7684\u6570\u636e\u3002 \u7531\u4e8e \u8def\u5f84\u64cd\u4f5c \u662f\u6309\u987a\u5e8f\u4f9d\u6b21\u8fd0\u884c\u7684\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u8def\u5f84 /users/me \u58f0\u660e\u5728\u8def\u5f84 /users/{user_id} \u4e4b\u524d\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/me\" ) async def read_user_me (): return { \"user_id\" : \"the current user\" } @app . get ( \"/users/ {user_id} \" ) async def read_user ( user_id : str ): return { \"user_id\" : user_id } \u5426\u5219\uff0c /users/{user_id} \u7684\u8def\u5f84\u8fd8\u5c06\u4e0e /users/me \u76f8\u5339\u914d\uff0c\"\u8ba4\u4e3a\"\u81ea\u5df1\u6b63\u5728\u63a5\u6536\u4e00\u4e2a\u503c\u4e3a \"me\" \u7684 user_id \u53c2\u6570\u3002","title":"\u987a\u5e8f\u5f88\u91cd\u8981"},{"location":"tutorial/path-params/#_8","text":"\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u63a5\u6536\u8def\u5f84\u53c2\u6570\u7684\u8def\u5f84\u64cd\u4f5c\uff0c\u4f46\u4f60\u5e0c\u671b\u9884\u5148\u8bbe\u5b9a\u53ef\u80fd\u7684\u6709\u6548\u53c2\u6570\u503c\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684 Python Enum \u7c7b\u578b\u3002","title":"\u9884\u8bbe\u503c"},{"location":"tutorial/path-params/#enum","text":"\u5bfc\u5165 Enum \u5e76\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u81ea str \u548c Enum \u7684\u5b50\u7c7b\u3002 \u901a\u8fc7\u4ece str \u7ee7\u627f\uff0cAPI \u6587\u6863\u5c06\u80fd\u591f\u77e5\u9053\u8fd9\u4e9b\u503c\u5fc5\u987b\u4e3a string \u7c7b\u578b\u5e76\u4e14\u80fd\u591f\u6b63\u786e\u5730\u5c55\u793a\u51fa\u6765\u3002 \u7136\u540e\u521b\u5efa\u5177\u6709\u56fa\u5b9a\u503c\u7684\u7c7b\u5c5e\u6027\uff0c\u8fd9\u4e9b\u56fa\u5b9a\u503c\u5c06\u662f\u53ef\u7528\u7684\u6709\u6548\u503c\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } Info \u679a\u4e3e\uff08\u6216 enums\uff09 \u4ece 3.4 \u7248\u672c\u8d77\u5728 Python \u4e2d\u53ef\u7528\u3002 Tip \u5982\u679c\u4f60\u60f3\u77e5\u9053\uff0c\"AlexNet\"\u3001\"ResNet\" \u548c \"LeNet\" \u53ea\u662f\u673a\u5668\u5b66\u4e60\u4e2d\u7684 \u6a21\u578b \u540d\u79f0\u3002","title":"\u521b\u5efa\u4e00\u4e2a Enum \u7c7b"},{"location":"tutorial/path-params/#_9","text":"\u7136\u540e\u4f7f\u7528\u4f60\u5b9a\u4e49\u7684\u679a\u4e3e\u7c7b\uff08 ModelName \uff09\u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u7c7b\u578b\u6807\u6ce8\u7684 \u8def\u5f84\u53c2\u6570 \uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" }","title":"\u58f0\u660e\u8def\u5f84\u53c2\u6570"},{"location":"tutorial/path-params/#_10","text":"\u56e0\u4e3a\u5df2\u7ecf\u6307\u5b9a\u4e86 \u8def\u5f84\u53c2\u6570 \u7684\u53ef\u7528\u503c\uff0c\u6240\u4ee5\u4ea4\u4e92\u5f0f\u6587\u6863\u53ef\u4ee5\u6070\u5f53\u5730\u5c55\u793a\u5b83\u4eec\uff1a","title":"\u67e5\u770b\u6587\u6863"},{"location":"tutorial/path-params/#python","text":"\u8def\u5f84\u53c2\u6570 \u7684\u503c\u5c06\u662f\u4e00\u4e2a \u679a\u4e3e\u6210\u5458 \u3002","title":"\u4f7f\u7528 Python \u679a\u4e3e\u7c7b\u578b"},{"location":"tutorial/path-params/#_11","text":"\u4f60\u53ef\u4ee5\u5c06\u5b83\u4e0e\u4f60\u521b\u5efa\u7684\u679a\u4e3e\u7c7b ModelName \u4e2d\u7684 \u679a\u4e3e\u6210\u5458 \u8fdb\u884c\u6bd4\u8f83\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" }","title":"\u6bd4\u8f83\u679a\u4e3e\u6210\u5458"},{"location":"tutorial/path-params/#_12","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528 model_name.value \u6216\u901a\u5e38\u6765\u8bf4 your_enum_member.value \u6765\u83b7\u53d6\u5b9e\u9645\u7684\u503c\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4e3a str \uff09\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } Tip \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7 ModelName.lenet.value \u6765\u83b7\u53d6\u503c \"lenet\" \u3002","title":"\u83b7\u53d6\u679a\u4e3e\u503c"},{"location":"tutorial/path-params/#_13","text":"\u4f60\u53ef\u4ee5\u4ece \u8def\u5f84\u64cd\u4f5c \u4e2d\u8fd4\u56de \u679a\u4e3e\u6210\u5458 \uff0c\u5373\u4f7f\u5d4c\u5957\u5728 JSON \u7ed3\u6784\u4e2d\uff08\u4f8b\u5982\u4e00\u4e2a dict \u4e2d\uff09\u3002 \u5728\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u4e4b\u524d\uff0c\u5b83\u4eec\u5c06\u88ab\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u503c\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name == ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" }","title":"\u8fd4\u56de\u679a\u4e3e\u6210\u5458"},{"location":"tutorial/path-params/#_14","text":"\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \uff0c\u5b83\u7684\u8def\u5f84\u4e3a /files/{file_path} \u3002 \u4f46\u662f\u4f60\u9700\u8981 file_path \u81ea\u8eab\u4e5f\u5305\u542b \u8def\u5f84 \uff0c\u6bd4\u5982 home/johndoe/myfile.txt \u3002 \u56e0\u6b64\uff0c\u8be5\u6587\u4ef6\u7684URL\u5c06\u7c7b\u4f3c\u4e8e\u8fd9\u6837\uff1a /files/home/johndoe/myfile.txt \u3002","title":"\u5305\u542b\u8def\u5f84\u7684\u8def\u5f84\u53c2\u6570"},{"location":"tutorial/path-params/#openapi","text":"OpenAPI \u4e0d\u652f\u6301\u4efb\u4f55\u65b9\u5f0f\u53bb\u58f0\u660e \u8def\u5f84\u53c2\u6570 \u4ee5\u5728\u5176\u5185\u90e8\u5305\u542b \u8def\u5f84 \uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u96be\u4ee5\u6d4b\u8bd5\u548c\u5b9a\u4e49\u7684\u60c5\u51b5\u51fa\u73b0\u3002 \u4e0d\u8fc7\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7 Starlette \u7684\u4e00\u4e2a\u5185\u90e8\u5de5\u5177\u5728 FastAPI \u4e2d\u5b9e\u73b0\u5b83\u3002 \u800c\u4e14\u6587\u6863\u4f9d\u65e7\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u662f\u4e0d\u4f1a\u6dfb\u52a0\u4efb\u4f55\u8be5\u53c2\u6570\u5e94\u5305\u542b\u8def\u5f84\u7684\u8bf4\u660e\u3002","title":"OpenAPI \u652f\u6301"},{"location":"tutorial/path-params/#_15","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u76f4\u63a5\u6765\u81ea Starlette \u7684\u9009\u9879\u6765\u58f0\u660e\u4e00\u4e2a\u5305\u542b \u8def\u5f84 \u7684 \u8def\u5f84\u53c2\u6570 \uff1a /files/{file_path:path} \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53c2\u6570\u7684\u540d\u79f0\u4e3a file_path \uff0c\u7ed3\u5c3e\u90e8\u5206\u7684 :path \u8bf4\u660e\u8be5\u53c2\u6570\u5e94\u5339\u914d\u4efb\u610f\u7684 \u8def\u5f84 \u3002 \u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\u5b83\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/files/{file_path:path}\" ) async def read_file ( file_path : str ): return { \"file_path\" : file_path } Tip \u4f60\u53ef\u80fd\u4f1a\u9700\u8981\u53c2\u6570\u5305\u542b /home/johndoe/myfile.txt \uff0c\u4ee5\u659c\u6760\uff08 / \uff09\u5f00\u5934\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cURL \u5c06\u4f1a\u662f /files//home/johndoe/myfile.txt \uff0c\u5728 files \u548c home \u4e4b\u95f4\u6709\u4e00\u4e2a\u53cc\u659c\u6760\uff08 // \uff09\u3002","title":"\u8def\u5f84\u8f6c\u6362\u5668"},{"location":"tutorial/path-params/#_16","text":"\u4f7f\u7528 FastAPI \uff0c\u901a\u8fc7\u7b80\u77ed\u3001\u76f4\u89c2\u548c\u6807\u51c6\u7684 Python \u7c7b\u578b\u58f0\u660e\uff0c\u4f60\u5c06\u83b7\u5f97\uff1a \u7f16\u8f91\u5668\u652f\u6301\uff1a\u9519\u8bef\u68c0\u67e5\uff0c\u4ee3\u7801\u8865\u5168\u7b49 \u6570\u636e \" \u89e3\u6790 \" \u6570\u636e\u6821\u9a8c API \u6807\u6ce8\u548c\u81ea\u52a8\u751f\u6210\u7684\u6587\u6863 \u800c\u4e14\u4f60\u53ea\u9700\u8981\u58f0\u660e\u4e00\u6b21\u5373\u53ef\u3002 \u8fd9\u53ef\u80fd\u662f FastAPI \u4e0e\u5176\u4ed6\u6846\u67b6\u76f8\u6bd4\u4e3b\u8981\u7684\u660e\u663e\u4f18\u52bf\uff08\u9664\u4e86\u539f\u59cb\u6027\u80fd\u4ee5\u5916\uff09\u3002","title":"\u603b\u7ed3"},{"location":"tutorial/query-params-str-validations/","text":"\u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c \u00b6 FastAPI \u5141\u8bb8\u4f60\u4e3a\u53c2\u6570\u58f0\u660e\u989d\u5916\u7684\u4fe1\u606f\u548c\u6821\u9a8c\u3002 \u8ba9\u6211\u4eec\u4ee5\u4e0b\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\u4e3a\u4f8b\uff1a from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = None ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u67e5\u8be2\u53c2\u6570 q \u7684\u7c7b\u578b\u4e3a str \uff0c\u9ed8\u8ba4\u503c\u4e3a None \uff0c\u56e0\u6b64\u5b83\u662f\u53ef\u9009\u7684\u3002 \u989d\u5916\u7684\u6821\u9a8c \u00b6 \u6211\u4eec\u6253\u7b97\u6dfb\u52a0\u7ea6\u675f\u6761\u4ef6\uff1a\u5373\u4f7f q \u662f\u53ef\u9009\u7684\uff0c\u4f46\u53ea\u8981\u63d0\u4f9b\u4e86\u8be5\u53c2\u6570\uff0c\u5219\u8be5\u53c2\u6570\u503c \u4e0d\u80fd\u8d85\u8fc750\u4e2a\u5b57\u7b26\u7684\u957f\u5ea6 \u3002 \u5bfc\u5165 Query \u00b6 \u4e3a\u6b64\uff0c\u9996\u5148\u4ece fastapi \u5bfc\u5165 Query \uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u4f7f\u7528 Query \u4f5c\u4e3a\u9ed8\u8ba4\u503c \u00b6 \u73b0\u5728\uff0c\u5c06 Query \u7528\u4f5c\u67e5\u8be2\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\uff0c\u5e76\u5c06\u5b83\u7684 max_length \u53c2\u6570\u8bbe\u7f6e\u4e3a 50\uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u7531\u4e8e\u6211\u4eec\u5fc5\u987b\u7528 Query(default=None) \u66ff\u6362\u9ed8\u8ba4\u503c None \uff0c Query \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u540c\u6837\u4e5f\u662f\u7528\u4e8e\u5b9a\u4e49\u9ed8\u8ba4\u503c\u3002 \u6240\u4ee5\uff1a q : Union [ str , None ] = Query ( default = None ) ...\u4f7f\u5f97\u53c2\u6570\u53ef\u9009\uff0c\u7b49\u540c\u4e8e\uff1a q : str = None \u4f46\u662f Query \u663e\u5f0f\u5730\u5c06\u5176\u58f0\u660e\u4e3a\u67e5\u8be2\u53c2\u6570\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u66f4\u591a\u7684\u53c2\u6570\u4f20\u9012\u7ed9 Query \u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u9002\u7528\u4e8e\u5b57\u7b26\u4e32\u7684 max_length \u53c2\u6570\uff1a q : Union [ str , None ] = Query ( default = None , max_length = 50 ) \u5c06\u4f1a\u6821\u9a8c\u6570\u636e\uff0c\u5728\u6570\u636e\u65e0\u6548\u65f6\u5c55\u793a\u6e05\u6670\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u5e76\u5728 OpenAPI \u6a21\u5f0f\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u8bb0\u5f55\u8be5\u53c2\u200b\u200b\u6570\u3002 \u6dfb\u52a0\u66f4\u591a\u6821\u9a8c \u00b6 \u4f60\u8fd8\u53ef\u4ee5\u6dfb\u52a0 min_length \u53c2\u6570\uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , min_length = 3 , max_length = 50 ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u6dfb\u52a0\u6b63\u5219\u8868\u8fbe\u5f0f \u00b6 \u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u53c2\u6570\u503c\u5fc5\u987b\u5339\u914d\u7684 \u6b63\u5219\u8868\u8fbe\u5f0f \uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u8fd9\u4e2a\u6307\u5b9a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u901a\u8fc7\u4ee5\u4e0b\u89c4\u5219\u68c0\u67e5\u63a5\u6536\u5230\u7684\u53c2\u6570\u503c\uff1a ^ \uff1a\u4ee5\u8be5\u7b26\u53f7\u4e4b\u540e\u7684\u5b57\u7b26\u5f00\u5934\uff0c\u7b26\u53f7\u4e4b\u524d\u6ca1\u6709\u5b57\u7b26\u3002 fixedquery : \u503c\u7cbe\u786e\u5730\u7b49\u4e8e fixedquery \u3002 $ : \u5230\u6b64\u7ed3\u675f\uff0c\u5728 fixedquery \u4e4b\u540e\u6ca1\u6709\u66f4\u591a\u5b57\u7b26\u3002 \u5982\u679c\u4f60\u5bf9\u6240\u6709\u7684\u8fd9\u4e9b \u300c\u6b63\u5219\u8868\u8fbe\u5f0f\u300d \u6982\u5ff5\u611f\u5230\u8ff7\u832b\uff0c\u8bf7\u4e0d\u8981\u62c5\u5fc3\u3002\u5bf9\u4e8e\u8bb8\u591a\u4eba\u6765\u8bf4\u8fd9\u90fd\u662f\u4e00\u4e2a\u56f0\u96be\u7684\u4e3b\u9898\u3002\u4f60\u4ecd\u7136\u53ef\u4ee5\u5728\u65e0\u9700\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u60c5\u51b5\u4e0b\u505a\u5f88\u591a\u4e8b\u60c5\u3002 \u4f46\u662f\uff0c\u4e00\u65e6\u4f60\u9700\u8981\u7528\u5230\u5e76\u53bb\u5b66\u4e60\u5b83\u4eec\u65f6\uff0c\u8bf7\u4e86\u89e3\u4f60\u5df2\u7ecf\u53ef\u4ee5\u5728 FastAPI \u4e2d\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\u3002 \u9ed8\u8ba4\u503c \u00b6 \u4f60\u53ef\u4ee5\u5411 Query \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165 None \u7528\u4f5c\u67e5\u8be2\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\uff0c\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u4f60\u4e5f\u53ef\u4ee5\u4f20\u9012\u5176\u4ed6\u9ed8\u8ba4\u503c\u3002 \u5047\u8bbe\u4f60\u60f3\u8981\u58f0\u660e\u67e5\u8be2\u53c2\u6570 q \uff0c\u4f7f\u5176 min_length \u4e3a 3 \uff0c\u5e76\u4e14\u9ed8\u8ba4\u503c\u4e3a fixedquery \uff1a from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( default = \"fixedquery\" , min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results Note \u5177\u6709\u9ed8\u8ba4\u503c\u8fd8\u4f1a\u4f7f\u8be5\u53c2\u6570\u6210\u4e3a\u53ef\u9009\u53c2\u6570\u3002 \u58f0\u660e\u4e3a\u5fc5\u9700\u53c2\u6570 \u00b6 \u5f53\u6211\u4eec\u4e0d\u9700\u8981\u58f0\u660e\u989d\u5916\u7684\u6821\u9a8c\u6216\u5143\u6570\u636e\u65f6\uff0c\u53ea\u9700\u4e0d\u58f0\u660e\u9ed8\u8ba4\u503c\u5c31\u53ef\u4ee5\u4f7f q \u53c2\u6570\u6210\u4e3a\u5fc5\u9700\u53c2\u6570\uff0c\u4f8b\u5982\uff1a q : str \u4ee3\u66ff\uff1a q : str = None \u4f46\u662f\u73b0\u5728\u6211\u4eec\u6b63\u5728\u7528 Query \u58f0\u660e\u5b83\uff0c\u4f8b\u5982\uff1a q : Union [ str , None ] = Query ( default = None , min_length = 3 ) \u56e0\u6b64\uff0c\u5f53\u4f60\u5728\u4f7f\u7528 Query \u4e14\u9700\u8981\u58f0\u660e\u4e00\u4e2a\u503c\u662f\u5fc5\u9700\u7684\u65f6\uff0c\u53ef\u4ee5\u5c06 ... \u7528\u4f5c\u7b2c\u4e00\u4e2a\u53c2\u6570\u503c\uff1a from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results Info \u5982\u679c\u4f60\u4e4b\u524d\u6ca1\u89c1\u8fc7 ... \u8fd9\u79cd\u7528\u6cd5\uff1a\u5b83\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5355\u72ec\u503c\uff0c\u5b83\u662f Python \u7684\u4e00\u90e8\u5206\u5e76\u4e14\u88ab\u79f0\u4e3a\u300c\u7701\u7565\u53f7\u300d \u3002 \u8fd9\u5c06\u4f7f FastAPI \u77e5\u9053\u6b64\u67e5\u8be2\u53c2\u6570\u662f\u5fc5\u9700\u7684\u3002 \u67e5\u8be2\u53c2\u6570\u5217\u8868 / \u591a\u4e2a\u503c \u00b6 \u5f53\u4f60\u4f7f\u7528 Query \u663e\u5f0f\u5730\u5b9a\u4e49\u67e5\u8be2\u53c2\u6570\u65f6\uff0c\u4f60\u8fd8\u53ef\u4ee5\u58f0\u660e\u5b83\u53bb\u63a5\u6536\u4e00\u7ec4\u503c\uff0c\u6216\u6362\u53e5\u8bdd\u6765\u8bf4\uff0c\u63a5\u6536\u591a\u4e2a\u503c\u3002 \u4f8b\u5982\uff0c\u8981\u58f0\u660e\u4e00\u4e2a\u53ef\u5728 URL \u4e2d\u51fa\u73b0\u591a\u6b21\u7684\u67e5\u8be2\u53c2\u6570 q \uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a from typing import List , Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ List [ str ], None ] = Query ( default = None )): query_items = { \"q\" : q } return query_items \u7136\u540e\uff0c\u8f93\u5165\u5982\u4e0b\u7f51\u5740\uff1a http://localhost:8000/items/?q=foo&q=bar \u4f60\u4f1a\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684 \u51fd\u6570\u53c2\u6570 q \u4e2d\u4ee5\u4e00\u4e2a Python list \u7684\u5f62\u5f0f\u63a5\u6536\u5230 \u67e5\u8be2\u53c2\u6570 q \u7684\u591a\u4e2a\u503c\uff08 foo \u548c bar \uff09\u3002 \u56e0\u6b64\uff0c\u8be5 URL \u7684\u54cd\u5e94\u5c06\u4f1a\u662f\uff1a { \"q\" : [ \"foo\" , \"bar\" ] } Tip \u8981\u58f0\u660e\u7c7b\u578b\u4e3a list \u7684\u67e5\u8be2\u53c2\u6570\uff0c\u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u4f60\u9700\u8981\u663e\u5f0f\u5730\u4f7f\u7528 Query \uff0c\u5426\u5219\u8be5\u53c2\u6570\u5c06\u88ab\u89e3\u91ca\u4e3a\u8bf7\u6c42\u4f53\u3002 \u4ea4\u4e92\u5f0f API \u6587\u6863\u5c06\u4f1a\u76f8\u5e94\u5730\u8fdb\u884c\u66f4\u65b0\uff0c\u4ee5\u5141\u8bb8\u4f7f\u7528\u591a\u4e2a\u503c\uff1a \u5177\u6709\u9ed8\u8ba4\u503c\u7684\u67e5\u8be2\u53c2\u6570\u5217\u8868 / \u591a\u4e2a\u503c \u00b6 \u4f60\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5728\u6ca1\u6709\u4efb\u4f55\u7ed9\u5b9a\u503c\u65f6\u7684\u9ed8\u8ba4 list \u503c\uff1a from typing import List from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : List [ str ] = Query ( default = [ \"foo\" , \"bar\" ])): query_items = { \"q\" : q } return query_items \u5982\u679c\u4f60\u8bbf\u95ee\uff1a http://localhost:8000/items/ q \u7684\u9ed8\u8ba4\u503c\u5c06\u4e3a\uff1a [\"foo\", \"bar\"] \uff0c\u4f60\u7684\u54cd\u5e94\u4f1a\u662f\uff1a { \"q\" : [ \"foo\" , \"bar\" ] } \u4f7f\u7528 list \u00b6 \u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 list \u4ee3\u66ff List [str] \uff1a from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : list = Query ( default = [])): query_items = { \"q\" : q } return query_items Note \u8bf7\u8bb0\u4f4f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b FastAPI \u5c06\u4e0d\u4f1a\u68c0\u67e5\u5217\u8868\u7684\u5185\u5bb9\u3002 \u4f8b\u5982\uff0c List[int] \u5c06\u68c0\u67e5\uff08\u5e76\u8bb0\u5f55\u5230\u6587\u6863\uff09\u5217\u8868\u7684\u5185\u5bb9\u5fc5\u987b\u662f\u6574\u6570\u3002\u4f46\u662f\u5355\u72ec\u7684 list \u4e0d\u4f1a\u3002 \u58f0\u660e\u66f4\u591a\u5143\u6570\u636e \u00b6 \u4f60\u53ef\u4ee5\u6dfb\u52a0\u66f4\u591a\u6709\u5173\u8be5\u53c2\u6570\u7684\u4fe1\u606f\u3002 \u8fd9\u4e9b\u4fe1\u606f\u5c06\u5305\u542b\u5728\u751f\u6210\u7684 OpenAPI \u6a21\u5f0f\u4e2d\uff0c\u5e76\u7531\u6587\u6863\u7528\u6237\u754c\u9762\u548c\u5916\u90e8\u5de5\u5177\u6240\u4f7f\u7528\u3002 Note \u8bf7\u8bb0\u4f4f\uff0c\u4e0d\u540c\u7684\u5de5\u5177\u5bf9 OpenAPI \u7684\u652f\u6301\u7a0b\u5ea6\u53ef\u80fd\u4e0d\u540c\u3002 \u5176\u4e2d\u4e00\u4e9b\u53ef\u80fd\u4e0d\u4f1a\u5c55\u793a\u6240\u6709\u5df2\u58f0\u660e\u7684\u989d\u5916\u4fe1\u606f\uff0c\u5c3d\u7ba1\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u7f3a\u5c11\u7684\u8fd9\u90e8\u5206\u529f\u80fd\u5df2\u7ecf\u8ba1\u5212\u8fdb\u884c\u5f00\u53d1\u3002 \u4f60\u53ef\u4ee5\u6dfb\u52a0 title \uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , title = \"Query string\" , min_length = 3 ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u4ee5\u53ca description \uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u522b\u540d\u53c2\u6570 \u00b6 \u5047\u8bbe\u4f60\u60f3\u8981\u67e5\u8be2\u53c2\u6570\u4e3a item-query \u3002 \u50cf\u4e0b\u9762\u8fd9\u6837\uff1a http://127.0.0.1:8000/items/?item-query=foobaritems \u4f46\u662f item-query \u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684 Python \u53d8\u91cf\u540d\u79f0\u3002 \u6700\u63a5\u8fd1\u7684\u6709\u6548\u540d\u79f0\u662f item_query \u3002 \u4f46\u662f\u4f60\u4ecd\u7136\u8981\u6c42\u5b83\u5728 URL \u4e2d\u5fc5\u987b\u662f item-query ... \u8fd9\u65f6\u4f60\u53ef\u4ee5\u7528 alias \u53c2\u6570\u58f0\u660e\u4e00\u4e2a\u522b\u540d\uff0c\u8be5\u522b\u540d\u5c06\u7528\u4e8e\u5728 URL \u4e2d\u67e5\u627e\u67e5\u8be2\u53c2\u6570\u503c\uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u5f03\u7528\u53c2\u6570 \u00b6 \u73b0\u5728\u5047\u8bbe\u4f60\u4e0d\u518d\u559c\u6b22\u6b64\u53c2\u6570\u3002 \u4f60\u4e0d\u5f97\u4e0d\u5c06\u5176\u4fdd\u7559\u4e00\u6bb5\u65f6\u95f4\uff0c\u56e0\u4e3a\u6709\u4e9b\u5ba2\u6237\u7aef\u6b63\u5728\u4f7f\u7528\u5b83\uff0c\u4f46\u4f60\u5e0c\u671b\u6587\u6863\u6e05\u695a\u5730\u5c06\u5176\u5c55\u793a\u4e3a \u5df2\u5f03\u7528 \u3002 \u90a3\u4e48\u5c06\u53c2\u6570 deprecated=True \u4f20\u5165 Query \uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" , deprecated = True , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u6587\u6863\u5c06\u4f1a\u50cf\u4e0b\u9762\u8fd9\u6837\u5c55\u793a\u5b83\uff1a \u603b\u7ed3 \u00b6 \u4f60\u53ef\u4ee5\u4e3a\u67e5\u8be2\u53c2\u6570\u58f0\u660e\u989d\u5916\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002 \u901a\u7528\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\uff1a alias title description deprecated \u7279\u5b9a\u4e8e\u5b57\u7b26\u4e32\u7684\u6821\u9a8c\uff1a min_length max_length regex \u5728\u8fd9\u4e9b\u793a\u4f8b\u4e2d\uff0c\u4f60\u4e86\u89e3\u4e86\u5982\u4f55\u58f0\u660e\u5bf9 str \u503c\u7684\u6821\u9a8c\u3002 \u8bf7\u53c2\u9605\u4e0b\u4e00\u7ae0\u8282\uff0c\u4ee5\u4e86\u89e3\u5982\u4f55\u58f0\u660e\u5bf9\u5176\u4ed6\u7c7b\u578b\u4f8b\u5982\u6570\u503c\u7684\u6821\u9a8c\u3002","title":"\u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c"},{"location":"tutorial/query-params-str-validations/#_1","text":"FastAPI \u5141\u8bb8\u4f60\u4e3a\u53c2\u6570\u58f0\u660e\u989d\u5916\u7684\u4fe1\u606f\u548c\u6821\u9a8c\u3002 \u8ba9\u6211\u4eec\u4ee5\u4e0b\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\u4e3a\u4f8b\uff1a from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = None ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u67e5\u8be2\u53c2\u6570 q \u7684\u7c7b\u578b\u4e3a str \uff0c\u9ed8\u8ba4\u503c\u4e3a None \uff0c\u56e0\u6b64\u5b83\u662f\u53ef\u9009\u7684\u3002","title":"\u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c"},{"location":"tutorial/query-params-str-validations/#_2","text":"\u6211\u4eec\u6253\u7b97\u6dfb\u52a0\u7ea6\u675f\u6761\u4ef6\uff1a\u5373\u4f7f q \u662f\u53ef\u9009\u7684\uff0c\u4f46\u53ea\u8981\u63d0\u4f9b\u4e86\u8be5\u53c2\u6570\uff0c\u5219\u8be5\u53c2\u6570\u503c \u4e0d\u80fd\u8d85\u8fc750\u4e2a\u5b57\u7b26\u7684\u957f\u5ea6 \u3002","title":"\u989d\u5916\u7684\u6821\u9a8c"},{"location":"tutorial/query-params-str-validations/#query","text":"\u4e3a\u6b64\uff0c\u9996\u5148\u4ece fastapi \u5bfc\u5165 Query \uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results","title":"\u5bfc\u5165 Query"},{"location":"tutorial/query-params-str-validations/#query_1","text":"\u73b0\u5728\uff0c\u5c06 Query \u7528\u4f5c\u67e5\u8be2\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\uff0c\u5e76\u5c06\u5b83\u7684 max_length \u53c2\u6570\u8bbe\u7f6e\u4e3a 50\uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u7531\u4e8e\u6211\u4eec\u5fc5\u987b\u7528 Query(default=None) \u66ff\u6362\u9ed8\u8ba4\u503c None \uff0c Query \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u540c\u6837\u4e5f\u662f\u7528\u4e8e\u5b9a\u4e49\u9ed8\u8ba4\u503c\u3002 \u6240\u4ee5\uff1a q : Union [ str , None ] = Query ( default = None ) ...\u4f7f\u5f97\u53c2\u6570\u53ef\u9009\uff0c\u7b49\u540c\u4e8e\uff1a q : str = None \u4f46\u662f Query \u663e\u5f0f\u5730\u5c06\u5176\u58f0\u660e\u4e3a\u67e5\u8be2\u53c2\u6570\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u66f4\u591a\u7684\u53c2\u6570\u4f20\u9012\u7ed9 Query \u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u9002\u7528\u4e8e\u5b57\u7b26\u4e32\u7684 max_length \u53c2\u6570\uff1a q : Union [ str , None ] = Query ( default = None , max_length = 50 ) \u5c06\u4f1a\u6821\u9a8c\u6570\u636e\uff0c\u5728\u6570\u636e\u65e0\u6548\u65f6\u5c55\u793a\u6e05\u6670\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u5e76\u5728 OpenAPI \u6a21\u5f0f\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u8bb0\u5f55\u8be5\u53c2\u200b\u200b\u6570\u3002","title":"\u4f7f\u7528 Query \u4f5c\u4e3a\u9ed8\u8ba4\u503c"},{"location":"tutorial/query-params-str-validations/#_3","text":"\u4f60\u8fd8\u53ef\u4ee5\u6dfb\u52a0 min_length \u53c2\u6570\uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , min_length = 3 , max_length = 50 ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results","title":"\u6dfb\u52a0\u66f4\u591a\u6821\u9a8c"},{"location":"tutorial/query-params-str-validations/#_4","text":"\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u53c2\u6570\u503c\u5fc5\u987b\u5339\u914d\u7684 \u6b63\u5219\u8868\u8fbe\u5f0f \uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u8fd9\u4e2a\u6307\u5b9a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u901a\u8fc7\u4ee5\u4e0b\u89c4\u5219\u68c0\u67e5\u63a5\u6536\u5230\u7684\u53c2\u6570\u503c\uff1a ^ \uff1a\u4ee5\u8be5\u7b26\u53f7\u4e4b\u540e\u7684\u5b57\u7b26\u5f00\u5934\uff0c\u7b26\u53f7\u4e4b\u524d\u6ca1\u6709\u5b57\u7b26\u3002 fixedquery : \u503c\u7cbe\u786e\u5730\u7b49\u4e8e fixedquery \u3002 $ : \u5230\u6b64\u7ed3\u675f\uff0c\u5728 fixedquery \u4e4b\u540e\u6ca1\u6709\u66f4\u591a\u5b57\u7b26\u3002 \u5982\u679c\u4f60\u5bf9\u6240\u6709\u7684\u8fd9\u4e9b \u300c\u6b63\u5219\u8868\u8fbe\u5f0f\u300d \u6982\u5ff5\u611f\u5230\u8ff7\u832b\uff0c\u8bf7\u4e0d\u8981\u62c5\u5fc3\u3002\u5bf9\u4e8e\u8bb8\u591a\u4eba\u6765\u8bf4\u8fd9\u90fd\u662f\u4e00\u4e2a\u56f0\u96be\u7684\u4e3b\u9898\u3002\u4f60\u4ecd\u7136\u53ef\u4ee5\u5728\u65e0\u9700\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u60c5\u51b5\u4e0b\u505a\u5f88\u591a\u4e8b\u60c5\u3002 \u4f46\u662f\uff0c\u4e00\u65e6\u4f60\u9700\u8981\u7528\u5230\u5e76\u53bb\u5b66\u4e60\u5b83\u4eec\u65f6\uff0c\u8bf7\u4e86\u89e3\u4f60\u5df2\u7ecf\u53ef\u4ee5\u5728 FastAPI \u4e2d\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\u3002","title":"\u6dfb\u52a0\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"tutorial/query-params-str-validations/#_5","text":"\u4f60\u53ef\u4ee5\u5411 Query \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u5165 None \u7528\u4f5c\u67e5\u8be2\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\uff0c\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u4f60\u4e5f\u53ef\u4ee5\u4f20\u9012\u5176\u4ed6\u9ed8\u8ba4\u503c\u3002 \u5047\u8bbe\u4f60\u60f3\u8981\u58f0\u660e\u67e5\u8be2\u53c2\u6570 q \uff0c\u4f7f\u5176 min_length \u4e3a 3 \uff0c\u5e76\u4e14\u9ed8\u8ba4\u503c\u4e3a fixedquery \uff1a from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( default = \"fixedquery\" , min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results Note \u5177\u6709\u9ed8\u8ba4\u503c\u8fd8\u4f1a\u4f7f\u8be5\u53c2\u6570\u6210\u4e3a\u53ef\u9009\u53c2\u6570\u3002","title":"\u9ed8\u8ba4\u503c"},{"location":"tutorial/query-params-str-validations/#_6","text":"\u5f53\u6211\u4eec\u4e0d\u9700\u8981\u58f0\u660e\u989d\u5916\u7684\u6821\u9a8c\u6216\u5143\u6570\u636e\u65f6\uff0c\u53ea\u9700\u4e0d\u58f0\u660e\u9ed8\u8ba4\u503c\u5c31\u53ef\u4ee5\u4f7f q \u53c2\u6570\u6210\u4e3a\u5fc5\u9700\u53c2\u6570\uff0c\u4f8b\u5982\uff1a q : str \u4ee3\u66ff\uff1a q : str = None \u4f46\u662f\u73b0\u5728\u6211\u4eec\u6b63\u5728\u7528 Query \u58f0\u660e\u5b83\uff0c\u4f8b\u5982\uff1a q : Union [ str , None ] = Query ( default = None , min_length = 3 ) \u56e0\u6b64\uff0c\u5f53\u4f60\u5728\u4f7f\u7528 Query \u4e14\u9700\u8981\u58f0\u660e\u4e00\u4e2a\u503c\u662f\u5fc5\u9700\u7684\u65f6\uff0c\u53ef\u4ee5\u5c06 ... \u7528\u4f5c\u7b2c\u4e00\u4e2a\u53c2\u6570\u503c\uff1a from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results Info \u5982\u679c\u4f60\u4e4b\u524d\u6ca1\u89c1\u8fc7 ... \u8fd9\u79cd\u7528\u6cd5\uff1a\u5b83\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5355\u72ec\u503c\uff0c\u5b83\u662f Python \u7684\u4e00\u90e8\u5206\u5e76\u4e14\u88ab\u79f0\u4e3a\u300c\u7701\u7565\u53f7\u300d \u3002 \u8fd9\u5c06\u4f7f FastAPI \u77e5\u9053\u6b64\u67e5\u8be2\u53c2\u6570\u662f\u5fc5\u9700\u7684\u3002","title":"\u58f0\u660e\u4e3a\u5fc5\u9700\u53c2\u6570"},{"location":"tutorial/query-params-str-validations/#_7","text":"\u5f53\u4f60\u4f7f\u7528 Query \u663e\u5f0f\u5730\u5b9a\u4e49\u67e5\u8be2\u53c2\u6570\u65f6\uff0c\u4f60\u8fd8\u53ef\u4ee5\u58f0\u660e\u5b83\u53bb\u63a5\u6536\u4e00\u7ec4\u503c\uff0c\u6216\u6362\u53e5\u8bdd\u6765\u8bf4\uff0c\u63a5\u6536\u591a\u4e2a\u503c\u3002 \u4f8b\u5982\uff0c\u8981\u58f0\u660e\u4e00\u4e2a\u53ef\u5728 URL \u4e2d\u51fa\u73b0\u591a\u6b21\u7684\u67e5\u8be2\u53c2\u6570 q \uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a from typing import List , Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ List [ str ], None ] = Query ( default = None )): query_items = { \"q\" : q } return query_items \u7136\u540e\uff0c\u8f93\u5165\u5982\u4e0b\u7f51\u5740\uff1a http://localhost:8000/items/?q=foo&q=bar \u4f60\u4f1a\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684 \u51fd\u6570\u53c2\u6570 q \u4e2d\u4ee5\u4e00\u4e2a Python list \u7684\u5f62\u5f0f\u63a5\u6536\u5230 \u67e5\u8be2\u53c2\u6570 q \u7684\u591a\u4e2a\u503c\uff08 foo \u548c bar \uff09\u3002 \u56e0\u6b64\uff0c\u8be5 URL \u7684\u54cd\u5e94\u5c06\u4f1a\u662f\uff1a { \"q\" : [ \"foo\" , \"bar\" ] } Tip \u8981\u58f0\u660e\u7c7b\u578b\u4e3a list \u7684\u67e5\u8be2\u53c2\u6570\uff0c\u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u4f60\u9700\u8981\u663e\u5f0f\u5730\u4f7f\u7528 Query \uff0c\u5426\u5219\u8be5\u53c2\u6570\u5c06\u88ab\u89e3\u91ca\u4e3a\u8bf7\u6c42\u4f53\u3002 \u4ea4\u4e92\u5f0f API \u6587\u6863\u5c06\u4f1a\u76f8\u5e94\u5730\u8fdb\u884c\u66f4\u65b0\uff0c\u4ee5\u5141\u8bb8\u4f7f\u7528\u591a\u4e2a\u503c\uff1a","title":"\u67e5\u8be2\u53c2\u6570\u5217\u8868 / \u591a\u4e2a\u503c"},{"location":"tutorial/query-params-str-validations/#_8","text":"\u4f60\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5728\u6ca1\u6709\u4efb\u4f55\u7ed9\u5b9a\u503c\u65f6\u7684\u9ed8\u8ba4 list \u503c\uff1a from typing import List from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : List [ str ] = Query ( default = [ \"foo\" , \"bar\" ])): query_items = { \"q\" : q } return query_items \u5982\u679c\u4f60\u8bbf\u95ee\uff1a http://localhost:8000/items/ q \u7684\u9ed8\u8ba4\u503c\u5c06\u4e3a\uff1a [\"foo\", \"bar\"] \uff0c\u4f60\u7684\u54cd\u5e94\u4f1a\u662f\uff1a { \"q\" : [ \"foo\" , \"bar\" ] }","title":"\u5177\u6709\u9ed8\u8ba4\u503c\u7684\u67e5\u8be2\u53c2\u6570\u5217\u8868 / \u591a\u4e2a\u503c"},{"location":"tutorial/query-params-str-validations/#list","text":"\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 list \u4ee3\u66ff List [str] \uff1a from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : list = Query ( default = [])): query_items = { \"q\" : q } return query_items Note \u8bf7\u8bb0\u4f4f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b FastAPI \u5c06\u4e0d\u4f1a\u68c0\u67e5\u5217\u8868\u7684\u5185\u5bb9\u3002 \u4f8b\u5982\uff0c List[int] \u5c06\u68c0\u67e5\uff08\u5e76\u8bb0\u5f55\u5230\u6587\u6863\uff09\u5217\u8868\u7684\u5185\u5bb9\u5fc5\u987b\u662f\u6574\u6570\u3002\u4f46\u662f\u5355\u72ec\u7684 list \u4e0d\u4f1a\u3002","title":"\u4f7f\u7528 list"},{"location":"tutorial/query-params-str-validations/#_9","text":"\u4f60\u53ef\u4ee5\u6dfb\u52a0\u66f4\u591a\u6709\u5173\u8be5\u53c2\u6570\u7684\u4fe1\u606f\u3002 \u8fd9\u4e9b\u4fe1\u606f\u5c06\u5305\u542b\u5728\u751f\u6210\u7684 OpenAPI \u6a21\u5f0f\u4e2d\uff0c\u5e76\u7531\u6587\u6863\u7528\u6237\u754c\u9762\u548c\u5916\u90e8\u5de5\u5177\u6240\u4f7f\u7528\u3002 Note \u8bf7\u8bb0\u4f4f\uff0c\u4e0d\u540c\u7684\u5de5\u5177\u5bf9 OpenAPI \u7684\u652f\u6301\u7a0b\u5ea6\u53ef\u80fd\u4e0d\u540c\u3002 \u5176\u4e2d\u4e00\u4e9b\u53ef\u80fd\u4e0d\u4f1a\u5c55\u793a\u6240\u6709\u5df2\u58f0\u660e\u7684\u989d\u5916\u4fe1\u606f\uff0c\u5c3d\u7ba1\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u7f3a\u5c11\u7684\u8fd9\u90e8\u5206\u529f\u80fd\u5df2\u7ecf\u8ba1\u5212\u8fdb\u884c\u5f00\u53d1\u3002 \u4f60\u53ef\u4ee5\u6dfb\u52a0 title \uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , title = \"Query string\" , min_length = 3 ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u4ee5\u53ca description \uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results","title":"\u58f0\u660e\u66f4\u591a\u5143\u6570\u636e"},{"location":"tutorial/query-params-str-validations/#_10","text":"\u5047\u8bbe\u4f60\u60f3\u8981\u67e5\u8be2\u53c2\u6570\u4e3a item-query \u3002 \u50cf\u4e0b\u9762\u8fd9\u6837\uff1a http://127.0.0.1:8000/items/?item-query=foobaritems \u4f46\u662f item-query \u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684 Python \u53d8\u91cf\u540d\u79f0\u3002 \u6700\u63a5\u8fd1\u7684\u6709\u6548\u540d\u79f0\u662f item_query \u3002 \u4f46\u662f\u4f60\u4ecd\u7136\u8981\u6c42\u5b83\u5728 URL \u4e2d\u5fc5\u987b\u662f item-query ... \u8fd9\u65f6\u4f60\u53ef\u4ee5\u7528 alias \u53c2\u6570\u58f0\u660e\u4e00\u4e2a\u522b\u540d\uff0c\u8be5\u522b\u540d\u5c06\u7528\u4e8e\u5728 URL \u4e2d\u67e5\u627e\u67e5\u8be2\u53c2\u6570\u503c\uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results","title":"\u522b\u540d\u53c2\u6570"},{"location":"tutorial/query-params-str-validations/#_11","text":"\u73b0\u5728\u5047\u8bbe\u4f60\u4e0d\u518d\u559c\u6b22\u6b64\u53c2\u6570\u3002 \u4f60\u4e0d\u5f97\u4e0d\u5c06\u5176\u4fdd\u7559\u4e00\u6bb5\u65f6\u95f4\uff0c\u56e0\u4e3a\u6709\u4e9b\u5ba2\u6237\u7aef\u6b63\u5728\u4f7f\u7528\u5b83\uff0c\u4f46\u4f60\u5e0c\u671b\u6587\u6863\u6e05\u695a\u5730\u5c06\u5176\u5c55\u793a\u4e3a \u5df2\u5f03\u7528 \u3002 \u90a3\u4e48\u5c06\u53c2\u6570 deprecated=True \u4f20\u5165 Query \uff1a from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" , deprecated = True , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u6587\u6863\u5c06\u4f1a\u50cf\u4e0b\u9762\u8fd9\u6837\u5c55\u793a\u5b83\uff1a","title":"\u5f03\u7528\u53c2\u6570"},{"location":"tutorial/query-params-str-validations/#_12","text":"\u4f60\u53ef\u4ee5\u4e3a\u67e5\u8be2\u53c2\u6570\u58f0\u660e\u989d\u5916\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002 \u901a\u7528\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\uff1a alias title description deprecated \u7279\u5b9a\u4e8e\u5b57\u7b26\u4e32\u7684\u6821\u9a8c\uff1a min_length max_length regex \u5728\u8fd9\u4e9b\u793a\u4f8b\u4e2d\uff0c\u4f60\u4e86\u89e3\u4e86\u5982\u4f55\u58f0\u660e\u5bf9 str \u503c\u7684\u6821\u9a8c\u3002 \u8bf7\u53c2\u9605\u4e0b\u4e00\u7ae0\u8282\uff0c\u4ee5\u4e86\u89e3\u5982\u4f55\u58f0\u660e\u5bf9\u5176\u4ed6\u7c7b\u578b\u4f8b\u5982\u6570\u503c\u7684\u6821\u9a8c\u3002","title":"\u603b\u7ed3"},{"location":"tutorial/query-params/","text":"\u67e5\u8be2\u53c2\u6570 \u00b6 \u58f0\u660e\u4e0d\u5c5e\u4e8e\u8def\u5f84\u53c2\u6570\u7684\u5176\u4ed6\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u5b83\u4eec\u5c06\u88ab\u81ea\u52a8\u89e3\u91ca\u4e3a\"\u67e5\u8be2\u5b57\u7b26\u4e32\"\u53c2\u6570 from fastapi import FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] @app . get ( \"/items/\" ) async def read_item ( skip : int = 0 , limit : int = 10 ): return fake_items_db [ skip : skip + limit ] \u67e5\u8be2\u5b57\u7b26\u4e32\u662f\u952e\u503c\u5bf9\u7684\u96c6\u5408\uff0c\u8fd9\u4e9b\u952e\u503c\u5bf9\u4f4d\u4e8e URL \u7684 \uff1f \u4e4b\u540e\uff0c\u5e76\u4ee5 & \u7b26\u53f7\u5206\u9694\u3002 \u4f8b\u5982\uff0c\u5728\u4ee5\u4e0b url \u4e2d\uff1a http://127.0.0.1:8000/items/?skip=0&limit=10 ...\u67e5\u8be2\u53c2\u6570\u4e3a\uff1a skip \uff1a\u5bf9\u5e94\u7684\u503c\u4e3a 0 limit \uff1a\u5bf9\u5e94\u7684\u503c\u4e3a 10 \u7531\u4e8e\u5b83\u4eec\u662f URL \u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5b83\u4eec\u7684\"\u539f\u59cb\u503c\"\u662f\u5b57\u7b26\u4e32\u3002 \u4f46\u662f\uff0c\u5f53\u4f60\u4e3a\u5b83\u4eec\u58f0\u660e\u4e86 Python \u7c7b\u578b\uff08\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\u4e3a int \uff09\u65f6\uff0c\u5b83\u4eec\u5c06\u8f6c\u6362\u4e3a\u8be5\u7c7b\u578b\u5e76\u9488\u5bf9\u8be5\u7c7b\u578b\u8fdb\u884c\u6821\u9a8c\u3002 \u5e94\u7528\u4e8e\u8def\u5f84\u53c2\u6570\u7684\u6240\u6709\u76f8\u540c\u8fc7\u7a0b\u4e5f\u9002\u7528\u4e8e\u67e5\u8be2\u53c2\u6570\uff1a \uff08\u5f88\u660e\u663e\u7684\uff09\u7f16\u8f91\u5668\u652f\u6301 \u6570\u636e \"\u89e3\u6790\" \u6570\u636e\u6821\u9a8c \u81ea\u52a8\u751f\u6210\u6587\u6863 \u9ed8\u8ba4\u503c \u00b6 \u7531\u4e8e\u67e5\u8be2\u53c2\u6570\u4e0d\u662f\u8def\u5f84\u7684\u56fa\u5b9a\u90e8\u5206\uff0c\u56e0\u6b64\u5b83\u4eec\u53ef\u4ee5\u662f\u53ef\u9009\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u6709\u9ed8\u8ba4\u503c\u3002 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5b83\u4eec\u5177\u6709 skip=0 \u548c limit=10 \u7684\u9ed8\u8ba4\u503c\u3002 \u56e0\u6b64\uff0c\u8bbf\u95ee URL\uff1a http://127.0.0.1:8000/items/ \u5c06\u4e0e\u8bbf\u95ee\u4ee5\u4e0b\u5730\u5740\u76f8\u540c\uff1a http://127.0.0.1:8000/items/?skip=0&limit=10 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u8bbf\u95ee\u7684\u662f\uff1a http://127.0.0.1:8000/items/?skip=20 \u51fd\u6570\u4e2d\u7684\u53c2\u6570\u503c\u5c06\u4f1a\u662f\uff1a skip=20 \uff1a\u5728 URL \u4e2d\u8bbe\u5b9a\u7684\u503c limit=10 \uff1a\u4f7f\u7528\u9ed8\u8ba4\u503c \u53ef\u9009\u53c2\u6570 \u00b6 \u901a\u8fc7\u540c\u6837\u7684\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b83\u4eec\u7684\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a None \u6765\u58f0\u660e\u53ef\u9009\u67e5\u8be2\u53c2\u6570\uff1a from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : Union [ str , None ] = None ): if q : return { \"item_id\" : item_id , \"q\" : q } return { \"item_id\" : item_id } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u51fd\u6570\u53c2\u6570 q \u5c06\u662f\u53ef\u9009\u7684\uff0c\u5e76\u4e14\u9ed8\u8ba4\u503c\u4e3a None \u3002 Check \u8fd8\u8981\u6ce8\u610f\u7684\u662f\uff0c FastAPI \u8db3\u591f\u806a\u660e\uff0c\u80fd\u591f\u5206\u8fa8\u51fa\u53c2\u6570 item_id \u662f\u8def\u5f84\u53c2\u6570\u800c q \u4e0d\u662f\uff0c\u56e0\u6b64 q \u662f\u4e00\u4e2a\u67e5\u8be2\u53c2\u6570\u3002 \u67e5\u8be2\u53c2\u6570\u7c7b\u578b\u8f6c\u6362 \u00b6 \u4f60\u8fd8\u53ef\u4ee5\u58f0\u660e bool \u7c7b\u578b\uff0c\u5b83\u4eec\u5c06\u88ab\u81ea\u52a8\u8f6c\u6362\uff1a from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : Union [ str , None ] = None , short : bool = False ): item = { \"item_id\" : item_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u4f60\u8bbf\u95ee\uff1a http://127.0.0.1:8000/items/foo?short=1 \u6216 http://127.0.0.1:8000/items/foo?short=True \u6216 http://127.0.0.1:8000/items/foo?short=true \u6216 http://127.0.0.1:8000/items/foo?short=on \u6216 http://127.0.0.1:8000/items/foo?short=yes \u6216\u4efb\u4f55\u5176\u4ed6\u7684\u53d8\u4f53\u5f62\u5f0f\uff08\u5927\u5199\uff0c\u9996\u5b57\u6bcd\u5927\u5199\u7b49\u7b49\uff09\uff0c\u4f60\u7684\u51fd\u6570\u63a5\u6536\u7684 short \u53c2\u6570\u90fd\u4f1a\u662f\u5e03\u5c14\u503c True \u3002\u5bf9\u4e8e\u503c\u4e3a False \u7684\u60c5\u51b5\u4e5f\u662f\u4e00\u6837\u7684\u3002 \u591a\u4e2a\u8def\u5f84\u548c\u67e5\u8be2\u53c2\u6570 \u00b6 \u4f60\u53ef\u4ee5\u540c\u65f6\u58f0\u660e\u591a\u4e2a\u8def\u5f84\u53c2\u6570\u548c\u67e5\u8be2\u53c2\u6570\uff0c FastAPI \u80fd\u591f\u8bc6\u522b\u5b83\u4eec\u3002 \u800c\u4e14\u4f60\u4e0d\u9700\u8981\u4ee5\u4efb\u4f55\u7279\u5b9a\u7684\u987a\u5e8f\u6765\u58f0\u660e\u3002 \u5b83\u4eec\u5c06\u901a\u8fc7\u540d\u79f0\u88ab\u68c0\u6d4b\u5230\uff1a from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/ {user_id} /items/ {item_id} \" ) async def read_user_item ( user_id : int , item_id : str , q : Union [ str , None ] = None , short : bool = False ): item = { \"item_id\" : item_id , \"owner_id\" : user_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item \u5fc5\u9700\u67e5\u8be2\u53c2\u6570 \u00b6 \u5f53\u4f60\u4e3a\u975e\u8def\u5f84\u53c2\u6570\u58f0\u660e\u4e86\u9ed8\u8ba4\u503c\u65f6\uff08\u76ee\u524d\u800c\u8a00\uff0c\u6211\u4eec\u6240\u77e5\u9053\u7684\u4ec5\u6709\u67e5\u8be2\u53c2\u6570\uff09\uff0c\u5219\u8be5\u53c2\u6570\u4e0d\u662f\u5fc5\u9700\u7684\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u6dfb\u52a0\u4e00\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u800c\u53ea\u662f\u60f3\u4f7f\u8be5\u53c2\u6570\u6210\u4e3a\u53ef\u9009\u7684\uff0c\u5219\u5c06\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a None \u3002 \u4f46\u5f53\u4f60\u60f3\u8ba9\u4e00\u4e2a\u67e5\u8be2\u53c2\u6570\u6210\u4e3a\u5fc5\u9700\u7684\uff0c\u4e0d\u58f0\u660e\u4efb\u4f55\u9ed8\u8ba4\u503c\u5c31\u53ef\u4ee5\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_user_item ( item_id : str , needy : str ): item = { \"item_id\" : item_id , \"needy\" : needy } return item \u8fd9\u91cc\u7684\u67e5\u8be2\u53c2\u6570 needy \u662f\u7c7b\u578b\u4e3a str \u7684\u5fc5\u9700\u67e5\u8be2\u53c2\u6570\u3002 \u5982\u679c\u4f60\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u4e00\u4e2a\u50cf\u4e0b\u9762\u7684 URL\uff1a http://127.0.0.1:8000/items/foo-item ...\u56e0\u4e3a\u6ca1\u6709\u6dfb\u52a0\u5fc5\u9700\u7684\u53c2\u6570 needy \uff0c\u4f60\u5c06\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u9519\u8bef\uff1a { \"detail\" : [ { \"loc\" : [ \"query\" , \"needy\" ], \"msg\" : \"field required\" , \"type\" : \"value_error.missing\" } ] } \u7531\u4e8e needy \u662f\u5fc5\u9700\u53c2\u6570\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u5728 URL \u4e2d\u8bbe\u7f6e\u5b83\u7684\u503c\uff1a http://127.0.0.1:8000/items/foo-item?needy=sooooneedy ...\u8fd9\u6837\u5c31\u6b63\u5e38\u4e86\uff1a { \"item_id\" : \"foo-item\" , \"needy\" : \"sooooneedy\" } \u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e9b\u53c2\u6570\u4e3a\u5fc5\u9700\u7684\uff0c\u4e00\u4e9b\u5177\u6709\u9ed8\u8ba4\u503c\uff0c\u800c\u67d0\u4e9b\u5219\u5b8c\u5168\u662f\u53ef\u9009\u7684\uff1a from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_user_item ( item_id : str , needy : str , skip : int = 0 , limit : Union [ int , None ] = None ): item = { \"item_id\" : item_id , \"needy\" : needy , \"skip\" : skip , \"limit\" : limit } return item \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u67093\u4e2a\u67e5\u8be2\u53c2\u6570\uff1a needy \uff0c\u4e00\u4e2a\u5fc5\u9700\u7684 str \u7c7b\u578b\u53c2\u6570\u3002 skip \uff0c\u4e00\u4e2a\u9ed8\u8ba4\u503c\u4e3a 0 \u7684 int \u7c7b\u578b\u53c2\u6570\u3002 limit \uff0c\u4e00\u4e2a\u53ef\u9009\u7684 int \u7c7b\u578b\u53c2\u6570\u3002 Tip \u4f60\u8fd8\u53ef\u4ee5\u50cf\u5728 \u8def\u5f84\u53c2\u6570 \u4e2d\u90a3\u6837\u4f7f\u7528 Enum \u3002","title":"\u67e5\u8be2\u53c2\u6570"},{"location":"tutorial/query-params/#_1","text":"\u58f0\u660e\u4e0d\u5c5e\u4e8e\u8def\u5f84\u53c2\u6570\u7684\u5176\u4ed6\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u5b83\u4eec\u5c06\u88ab\u81ea\u52a8\u89e3\u91ca\u4e3a\"\u67e5\u8be2\u5b57\u7b26\u4e32\"\u53c2\u6570 from fastapi import FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] @app . get ( \"/items/\" ) async def read_item ( skip : int = 0 , limit : int = 10 ): return fake_items_db [ skip : skip + limit ] \u67e5\u8be2\u5b57\u7b26\u4e32\u662f\u952e\u503c\u5bf9\u7684\u96c6\u5408\uff0c\u8fd9\u4e9b\u952e\u503c\u5bf9\u4f4d\u4e8e URL \u7684 \uff1f \u4e4b\u540e\uff0c\u5e76\u4ee5 & \u7b26\u53f7\u5206\u9694\u3002 \u4f8b\u5982\uff0c\u5728\u4ee5\u4e0b url \u4e2d\uff1a http://127.0.0.1:8000/items/?skip=0&limit=10 ...\u67e5\u8be2\u53c2\u6570\u4e3a\uff1a skip \uff1a\u5bf9\u5e94\u7684\u503c\u4e3a 0 limit \uff1a\u5bf9\u5e94\u7684\u503c\u4e3a 10 \u7531\u4e8e\u5b83\u4eec\u662f URL \u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5b83\u4eec\u7684\"\u539f\u59cb\u503c\"\u662f\u5b57\u7b26\u4e32\u3002 \u4f46\u662f\uff0c\u5f53\u4f60\u4e3a\u5b83\u4eec\u58f0\u660e\u4e86 Python \u7c7b\u578b\uff08\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\u4e3a int \uff09\u65f6\uff0c\u5b83\u4eec\u5c06\u8f6c\u6362\u4e3a\u8be5\u7c7b\u578b\u5e76\u9488\u5bf9\u8be5\u7c7b\u578b\u8fdb\u884c\u6821\u9a8c\u3002 \u5e94\u7528\u4e8e\u8def\u5f84\u53c2\u6570\u7684\u6240\u6709\u76f8\u540c\u8fc7\u7a0b\u4e5f\u9002\u7528\u4e8e\u67e5\u8be2\u53c2\u6570\uff1a \uff08\u5f88\u660e\u663e\u7684\uff09\u7f16\u8f91\u5668\u652f\u6301 \u6570\u636e \"\u89e3\u6790\" \u6570\u636e\u6821\u9a8c \u81ea\u52a8\u751f\u6210\u6587\u6863","title":"\u67e5\u8be2\u53c2\u6570"},{"location":"tutorial/query-params/#_2","text":"\u7531\u4e8e\u67e5\u8be2\u53c2\u6570\u4e0d\u662f\u8def\u5f84\u7684\u56fa\u5b9a\u90e8\u5206\uff0c\u56e0\u6b64\u5b83\u4eec\u53ef\u4ee5\u662f\u53ef\u9009\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u6709\u9ed8\u8ba4\u503c\u3002 \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5b83\u4eec\u5177\u6709 skip=0 \u548c limit=10 \u7684\u9ed8\u8ba4\u503c\u3002 \u56e0\u6b64\uff0c\u8bbf\u95ee URL\uff1a http://127.0.0.1:8000/items/ \u5c06\u4e0e\u8bbf\u95ee\u4ee5\u4e0b\u5730\u5740\u76f8\u540c\uff1a http://127.0.0.1:8000/items/?skip=0&limit=10 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u8bbf\u95ee\u7684\u662f\uff1a http://127.0.0.1:8000/items/?skip=20 \u51fd\u6570\u4e2d\u7684\u53c2\u6570\u503c\u5c06\u4f1a\u662f\uff1a skip=20 \uff1a\u5728 URL \u4e2d\u8bbe\u5b9a\u7684\u503c limit=10 \uff1a\u4f7f\u7528\u9ed8\u8ba4\u503c","title":"\u9ed8\u8ba4\u503c"},{"location":"tutorial/query-params/#_3","text":"\u901a\u8fc7\u540c\u6837\u7684\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b83\u4eec\u7684\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a None \u6765\u58f0\u660e\u53ef\u9009\u67e5\u8be2\u53c2\u6570\uff1a from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : Union [ str , None ] = None ): if q : return { \"item_id\" : item_id , \"q\" : q } return { \"item_id\" : item_id } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u51fd\u6570\u53c2\u6570 q \u5c06\u662f\u53ef\u9009\u7684\uff0c\u5e76\u4e14\u9ed8\u8ba4\u503c\u4e3a None \u3002 Check \u8fd8\u8981\u6ce8\u610f\u7684\u662f\uff0c FastAPI \u8db3\u591f\u806a\u660e\uff0c\u80fd\u591f\u5206\u8fa8\u51fa\u53c2\u6570 item_id \u662f\u8def\u5f84\u53c2\u6570\u800c q \u4e0d\u662f\uff0c\u56e0\u6b64 q \u662f\u4e00\u4e2a\u67e5\u8be2\u53c2\u6570\u3002","title":"\u53ef\u9009\u53c2\u6570"},{"location":"tutorial/query-params/#_4","text":"\u4f60\u8fd8\u53ef\u4ee5\u58f0\u660e bool \u7c7b\u578b\uff0c\u5b83\u4eec\u5c06\u88ab\u81ea\u52a8\u8f6c\u6362\uff1a from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : Union [ str , None ] = None , short : bool = False ): item = { \"item_id\" : item_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u4f60\u8bbf\u95ee\uff1a http://127.0.0.1:8000/items/foo?short=1 \u6216 http://127.0.0.1:8000/items/foo?short=True \u6216 http://127.0.0.1:8000/items/foo?short=true \u6216 http://127.0.0.1:8000/items/foo?short=on \u6216 http://127.0.0.1:8000/items/foo?short=yes \u6216\u4efb\u4f55\u5176\u4ed6\u7684\u53d8\u4f53\u5f62\u5f0f\uff08\u5927\u5199\uff0c\u9996\u5b57\u6bcd\u5927\u5199\u7b49\u7b49\uff09\uff0c\u4f60\u7684\u51fd\u6570\u63a5\u6536\u7684 short \u53c2\u6570\u90fd\u4f1a\u662f\u5e03\u5c14\u503c True \u3002\u5bf9\u4e8e\u503c\u4e3a False \u7684\u60c5\u51b5\u4e5f\u662f\u4e00\u6837\u7684\u3002","title":"\u67e5\u8be2\u53c2\u6570\u7c7b\u578b\u8f6c\u6362"},{"location":"tutorial/query-params/#_5","text":"\u4f60\u53ef\u4ee5\u540c\u65f6\u58f0\u660e\u591a\u4e2a\u8def\u5f84\u53c2\u6570\u548c\u67e5\u8be2\u53c2\u6570\uff0c FastAPI \u80fd\u591f\u8bc6\u522b\u5b83\u4eec\u3002 \u800c\u4e14\u4f60\u4e0d\u9700\u8981\u4ee5\u4efb\u4f55\u7279\u5b9a\u7684\u987a\u5e8f\u6765\u58f0\u660e\u3002 \u5b83\u4eec\u5c06\u901a\u8fc7\u540d\u79f0\u88ab\u68c0\u6d4b\u5230\uff1a from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/ {user_id} /items/ {item_id} \" ) async def read_user_item ( user_id : int , item_id : str , q : Union [ str , None ] = None , short : bool = False ): item = { \"item_id\" : item_id , \"owner_id\" : user_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item","title":"\u591a\u4e2a\u8def\u5f84\u548c\u67e5\u8be2\u53c2\u6570"},{"location":"tutorial/query-params/#_6","text":"\u5f53\u4f60\u4e3a\u975e\u8def\u5f84\u53c2\u6570\u58f0\u660e\u4e86\u9ed8\u8ba4\u503c\u65f6\uff08\u76ee\u524d\u800c\u8a00\uff0c\u6211\u4eec\u6240\u77e5\u9053\u7684\u4ec5\u6709\u67e5\u8be2\u53c2\u6570\uff09\uff0c\u5219\u8be5\u53c2\u6570\u4e0d\u662f\u5fc5\u9700\u7684\u3002 \u5982\u679c\u4f60\u4e0d\u60f3\u6dfb\u52a0\u4e00\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u800c\u53ea\u662f\u60f3\u4f7f\u8be5\u53c2\u6570\u6210\u4e3a\u53ef\u9009\u7684\uff0c\u5219\u5c06\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a None \u3002 \u4f46\u5f53\u4f60\u60f3\u8ba9\u4e00\u4e2a\u67e5\u8be2\u53c2\u6570\u6210\u4e3a\u5fc5\u9700\u7684\uff0c\u4e0d\u58f0\u660e\u4efb\u4f55\u9ed8\u8ba4\u503c\u5c31\u53ef\u4ee5\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_user_item ( item_id : str , needy : str ): item = { \"item_id\" : item_id , \"needy\" : needy } return item \u8fd9\u91cc\u7684\u67e5\u8be2\u53c2\u6570 needy \u662f\u7c7b\u578b\u4e3a str \u7684\u5fc5\u9700\u67e5\u8be2\u53c2\u6570\u3002 \u5982\u679c\u4f60\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u4e00\u4e2a\u50cf\u4e0b\u9762\u7684 URL\uff1a http://127.0.0.1:8000/items/foo-item ...\u56e0\u4e3a\u6ca1\u6709\u6dfb\u52a0\u5fc5\u9700\u7684\u53c2\u6570 needy \uff0c\u4f60\u5c06\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u9519\u8bef\uff1a { \"detail\" : [ { \"loc\" : [ \"query\" , \"needy\" ], \"msg\" : \"field required\" , \"type\" : \"value_error.missing\" } ] } \u7531\u4e8e needy \u662f\u5fc5\u9700\u53c2\u6570\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u5728 URL \u4e2d\u8bbe\u7f6e\u5b83\u7684\u503c\uff1a http://127.0.0.1:8000/items/foo-item?needy=sooooneedy ...\u8fd9\u6837\u5c31\u6b63\u5e38\u4e86\uff1a { \"item_id\" : \"foo-item\" , \"needy\" : \"sooooneedy\" } \u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e9b\u53c2\u6570\u4e3a\u5fc5\u9700\u7684\uff0c\u4e00\u4e9b\u5177\u6709\u9ed8\u8ba4\u503c\uff0c\u800c\u67d0\u4e9b\u5219\u5b8c\u5168\u662f\u53ef\u9009\u7684\uff1a from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_user_item ( item_id : str , needy : str , skip : int = 0 , limit : Union [ int , None ] = None ): item = { \"item_id\" : item_id , \"needy\" : needy , \"skip\" : skip , \"limit\" : limit } return item \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u67093\u4e2a\u67e5\u8be2\u53c2\u6570\uff1a needy \uff0c\u4e00\u4e2a\u5fc5\u9700\u7684 str \u7c7b\u578b\u53c2\u6570\u3002 skip \uff0c\u4e00\u4e2a\u9ed8\u8ba4\u503c\u4e3a 0 \u7684 int \u7c7b\u578b\u53c2\u6570\u3002 limit \uff0c\u4e00\u4e2a\u53ef\u9009\u7684 int \u7c7b\u578b\u53c2\u6570\u3002 Tip \u4f60\u8fd8\u53ef\u4ee5\u50cf\u5728 \u8def\u5f84\u53c2\u6570 \u4e2d\u90a3\u6837\u4f7f\u7528 Enum \u3002","title":"\u5fc5\u9700\u67e5\u8be2\u53c2\u6570"},{"location":"tutorial/request-files/","text":"\u8bf7\u6c42\u6587\u4ef6 \u00b6 File \u7528\u4e8e\u5b9a\u4e49\u5ba2\u6237\u7aef\u7684\u4e0a\u4f20\u6587\u4ef6\u3002 \u8bf4\u660e \u56e0\u4e3a\u4e0a\u4f20\u6587\u4ef6\u4ee5\u300c\u8868\u5355\u6570\u636e\u300d\u5f62\u5f0f\u53d1\u9001\u3002 \u6240\u4ee5\u63a5\u6536\u4e0a\u4f20\u6587\u4ef6\uff0c\u8981\u9884\u5148\u5b89\u88c5 python-multipart \u3002 \u4f8b\u5982\uff1a pip install python-multipart \u3002 \u5bfc\u5165 File \u00b6 \u4ece fastapi \u5bfc\u5165 File \u548c UploadFile \uff1a from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } \u5b9a\u4e49 File \u53c2\u6570 \u00b6 \u521b\u5efa\u6587\u4ef6\uff08 File \uff09\u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Body \u548c Form \u4e00\u6837\uff1a from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } \u8bf4\u660e File \u662f\u76f4\u63a5\u7ee7\u627f\u81ea Form \u7684\u7c7b\u3002 \u6ce8\u610f\uff0c\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u3001 File \u7b49\u9879\uff0c\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u5b9a\u7c7b\u7684\u51fd\u6570\u3002 \u63d0\u793a \u58f0\u660e\u6587\u4ef6\u4f53\u5fc5\u987b\u4f7f\u7528 File \uff0c\u5426\u5219\uff0cFastAPI \u4f1a\u628a\u8be5\u53c2\u6570\u5f53\u4f5c\u67e5\u8be2\u53c2\u6570\u6216\u8bf7\u6c42\u4f53\uff08JSON\uff09\u53c2\u6570\u3002 \u6587\u4ef6\u4f5c\u4e3a\u300c\u8868\u5355\u6570\u636e\u300d\u4e0a\u4f20\u3002 \u5982\u679c\u628a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\u4e3a bytes \uff0c FastAPI \u5c06\u4ee5 bytes \u5f62\u5f0f\u8bfb\u53d6\u548c\u63a5\u6536\u6587\u4ef6\u5185\u5bb9\u3002 \u8fd9\u79cd\u65b9\u5f0f\u628a\u6587\u4ef6\u7684\u6240\u6709\u5185\u5bb9\u90fd\u5b58\u50a8\u5728\u5185\u5b58\u91cc\uff0c\u9002\u7528\u4e8e\u5c0f\u578b\u6587\u4ef6\u3002 \u4e0d\u8fc7\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c UploadFile \u66f4\u597d\u7528\u3002 \u542b UploadFile \u7684 File \u53c2\u6570 \u00b6 \u5b9a\u4e49 File \u53c2\u6570\u65f6\u4f7f\u7528 UploadFile \uff1a from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } UploadFile \u4e0e bytes \u76f8\u6bd4\u6709\u66f4\u591a\u4f18\u52bf\uff1a \u4f7f\u7528 spooled \u6587\u4ef6\uff1a \u5b58\u50a8\u5728\u5185\u5b58\u7684\u6587\u4ef6\u8d85\u51fa\u6700\u5927\u4e0a\u9650\u65f6\uff0cFastAPI \u4f1a\u628a\u6587\u4ef6\u5b58\u5165\u78c1\u76d8\uff1b \u8fd9\u79cd\u65b9\u5f0f\u66f4\u9002\u4e8e\u5904\u7406\u56fe\u50cf\u3001\u89c6\u9891\u3001\u4e8c\u8fdb\u5236\u6587\u4ef6\u7b49\u5927\u578b\u6587\u4ef6\uff0c\u597d\u5904\u662f\u4e0d\u4f1a\u5360\u7528\u6240\u6709\u5185\u5b58\uff1b \u53ef\u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u5143\u6570\u636e\uff1b \u81ea\u5e26 file-like async \u63a5\u53e3\uff1b \u66b4\u9732\u7684 Python SpooledTemporaryFile \u5bf9\u8c61\uff0c\u53ef\u76f4\u63a5\u4f20\u9012\u7ed9\u5176\u4ed6\u9884\u671f\u300cfile-like\u300d\u5bf9\u8c61\u7684\u5e93\u3002 UploadFile \u00b6 UploadFile \u7684\u5c5e\u6027\u5982\u4e0b\uff1a filename \uff1a\u4e0a\u4f20\u6587\u4ef6\u540d\u5b57\u7b26\u4e32\uff08 str \uff09\uff0c\u4f8b\u5982\uff0c myimage.jpg \uff1b content_type \uff1a\u5185\u5bb9\u7c7b\u578b\uff08MIME \u7c7b\u578b / \u5a92\u4f53\u7c7b\u578b\uff09\u5b57\u7b26\u4e32\uff08 str \uff09\uff0c\u4f8b\u5982\uff0c image/jpeg \uff1b file \uff1a SpooledTemporaryFile \uff08 file-like \u5bf9\u8c61\uff09\u3002\u5176\u5b9e\u5c31\u662f Python\u6587\u4ef6\uff0c\u53ef\u76f4\u63a5\u4f20\u9012\u7ed9\u5176\u4ed6\u9884\u671f file-like \u5bf9\u8c61\u7684\u51fd\u6570\u6216\u652f\u6301\u5e93\u3002 UploadFile \u652f\u6301\u4ee5\u4e0b async \u65b9\u6cd5\uff0c\uff08\u4f7f\u7528\u5185\u90e8 SpooledTemporaryFile \uff09\u53ef\u8c03\u7528\u76f8\u5e94\u7684\u6587\u4ef6\u65b9\u6cd5\u3002 write(data) \uff1a\u628a data \uff08 str \u6216 bytes \uff09\u5199\u5165\u6587\u4ef6\uff1b read(size) \uff1a\u6309\u6307\u5b9a\u6570\u91cf\u7684\u5b57\u8282\u6216\u5b57\u7b26\uff08 size ( int )\uff09\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\uff1b seek(offset) \uff1a\u79fb\u52a8\u81f3\u6587\u4ef6 offset \uff08 int \uff09\u5b57\u8282\u5904\u7684\u4f4d\u7f6e\uff1b \u4f8b\u5982\uff0c await myfile.seek(0) \u79fb\u52a8\u5230\u6587\u4ef6\u5f00\u5934\uff1b \u6267\u884c await myfile.read() \u540e\uff0c\u9700\u518d\u6b21\u8bfb\u53d6\u5df2\u8bfb\u53d6\u5185\u5bb9\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7279\u522b\u597d\u7528\uff1b close() \uff1a\u5173\u95ed\u6587\u4ef6\u3002 \u56e0\u4e3a\u4e0a\u8ff0\u65b9\u6cd5\u90fd\u662f async \u65b9\u6cd5\uff0c\u8981\u642d\u914d\u300cawait\u300d\u4f7f\u7528\u3002 \u4f8b\u5982\uff0c\u5728 async \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u5185\uff0c\u8981\u7528\u4ee5\u4e0b\u65b9\u5f0f\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\uff1a contents = await myfile . read () \u5728\u666e\u901a def \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u5185\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee UploadFile.file \uff0c\u4f8b\u5982\uff1a contents = myfile . file . read () async \u6280\u672f\u7ec6\u8282 \u4f7f\u7528 async \u65b9\u6cd5\u65f6\uff0c FastAPI \u5728\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\u6587\u4ef6\u65b9\u6cd5\uff0c\u5e76 awiat \u64cd\u4f5c\u5b8c\u6210\u3002 Starlette \u6280\u672f\u7ec6\u8282 FastAPI \u7684 UploadFile \u76f4\u63a5\u7ee7\u627f\u81ea Starlette \u7684 UploadFile \uff0c\u4f46\u6dfb\u52a0\u4e86\u4e00\u4e9b\u5fc5\u8981\u529f\u80fd\uff0c\u4f7f\u4e4b\u4e0e Pydantic \u53ca FastAPI \u7684\u5176\u5b83\u90e8\u4ef6\u517c\u5bb9\u3002 \u4ec0\u4e48\u662f \u300c\u8868\u5355\u6570\u636e\u300d \u00b6 \u4e0e JSON \u4e0d\u540c\uff0cHTML \u8868\u5355\uff08 <form></form> \uff09\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u901a\u5e38\u4f7f\u7528\u300c\u7279\u6b8a\u300d\u7684\u7f16\u7801\u3002 FastAPI \u8981\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u8bfb\u53d6 JSON\u3002 \u6280\u672f\u7ec6\u8282 \u4e0d\u5305\u542b\u6587\u4ef6\u65f6\uff0c\u8868\u5355\u6570\u636e\u4e00\u822c\u7528 application/x-www-form-urlencoded \u300c\u5a92\u4f53\u7c7b\u578b\u300d\u7f16\u7801\u3002 \u4f46\u8868\u5355\u5305\u542b\u6587\u4ef6\u65f6\uff0c\u7f16\u7801\u4e3a multipart/form-data \u3002\u4f7f\u7528\u4e86 File \uff0c FastAPI \u5c31\u77e5\u9053\u8981\u4ece\u8bf7\u6c42\u4f53\u7684\u6b63\u786e\u4f4d\u7f6e\u83b7\u53d6\u6587\u4ef6\u3002 \u7f16\u7801\u548c\u8868\u5355\u5b57\u6bb5\u8be6\u89c1 MDN Web \u6587\u6863\u7684 POST \u5c0f\u8282\u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a File \u548c Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u8981\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u662f multipart/form-data \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f FastAPI \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002 \u591a\u6587\u4ef6\u4e0a\u4f20 \u00b6 FastAPI \u652f\u6301\u540c\u65f6\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002 \u53ef\u7528\u540c\u4e00\u4e2a\u300c\u8868\u5355\u5b57\u6bb5\u300d\u53d1\u9001\u542b\u591a\u4e2a\u6587\u4ef6\u7684\u300c\u8868\u5355\u6570\u636e\u300d\u3002 \u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u65f6\uff0c\u8981\u58f0\u660e\u542b bytes \u6216 UploadFile \u7684\u5217\u8868\uff08 List \uff09\uff1a from typing import List from fastapi import FastAPI , File , UploadFile from fastapi.responses import HTMLResponse app = FastAPI () @app . post ( \"/files/\" ) async def create_files ( files : List [ bytes ] = File ()): return { \"file_sizes\" : [ len ( file ) for file in files ]} @app . post ( \"/uploadfiles/\" ) async def create_upload_files ( files : List [ UploadFile ]): return { \"filenames\" : [ file . filename for file in files ]} @app . get ( \"/\" ) async def main (): content = \"\"\" <body> <form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> <form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> </body> \"\"\" return HTMLResponse ( content = content ) \u63a5\u6536\u7684\u4e5f\u662f\u542b bytes \u6216 UploadFile \u7684\u5217\u8868\uff08 list \uff09\u3002 \u7b14\u8bb0 \u6ce8\u610f\uff0c\u622a\u81f3 2019 \u5e74 4 \u6708 14 \u65e5\uff0cSwagger UI \u4e0d\u652f\u6301\u5728\u540c\u4e00\u4e2a\u8868\u5355\u5b57\u6bb5\u4e2d\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002\u8be6\u89c1 #4276 \u548c #3641 . \u4e0d\u8fc7\uff0c FastAPI \u5df2\u901a\u8fc7 OpenAPI \u6807\u51c6\u4e0e\u4e4b\u517c\u5bb9\u3002 \u56e0\u6b64\uff0c\u53ea\u8981 Swagger UI \u6216\u4efb\u4f55\u5176\u4ed6\u652f\u6301 OpenAPI \u7684\u5de5\u5177\u652f\u6301\u591a\u6587\u4ef6\u4e0a\u4f20\uff0c\u90fd\u5c06\u4e0e FastAPI \u517c\u5bb9\u3002 \u6280\u672f\u7ec6\u8282 \u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import HTMLResponse \u3002 fastapi.responses \u5176\u5b9e\u4e0e starlette.responses \u76f8\u540c\uff0c\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u8c03\u7528\u3002\u5b9e\u9645\u4e0a\uff0c\u5927\u591a\u6570 FastAPI \u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u4ece Starlette \u8c03\u7528\u3002 \u5c0f\u7ed3 \u00b6 \u672c\u8282\u4ecb\u7ecd\u4e86\u5982\u4f55\u7528 File \u628a\u4e0a\u4f20\u6587\u4ef6\u58f0\u660e\u4e3a\uff08\u8868\u5355\u6570\u636e\u7684\uff09\u8f93\u5165\u53c2\u6570\u3002","title":"\u8bf7\u6c42\u6587\u4ef6"},{"location":"tutorial/request-files/#_1","text":"File \u7528\u4e8e\u5b9a\u4e49\u5ba2\u6237\u7aef\u7684\u4e0a\u4f20\u6587\u4ef6\u3002 \u8bf4\u660e \u56e0\u4e3a\u4e0a\u4f20\u6587\u4ef6\u4ee5\u300c\u8868\u5355\u6570\u636e\u300d\u5f62\u5f0f\u53d1\u9001\u3002 \u6240\u4ee5\u63a5\u6536\u4e0a\u4f20\u6587\u4ef6\uff0c\u8981\u9884\u5148\u5b89\u88c5 python-multipart \u3002 \u4f8b\u5982\uff1a pip install python-multipart \u3002","title":"\u8bf7\u6c42\u6587\u4ef6"},{"location":"tutorial/request-files/#file","text":"\u4ece fastapi \u5bfc\u5165 File \u548c UploadFile \uff1a from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename }","title":"\u5bfc\u5165 File"},{"location":"tutorial/request-files/#file_1","text":"\u521b\u5efa\u6587\u4ef6\uff08 File \uff09\u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Body \u548c Form \u4e00\u6837\uff1a from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } \u8bf4\u660e File \u662f\u76f4\u63a5\u7ee7\u627f\u81ea Form \u7684\u7c7b\u3002 \u6ce8\u610f\uff0c\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u3001 File \u7b49\u9879\uff0c\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u5b9a\u7c7b\u7684\u51fd\u6570\u3002 \u63d0\u793a \u58f0\u660e\u6587\u4ef6\u4f53\u5fc5\u987b\u4f7f\u7528 File \uff0c\u5426\u5219\uff0cFastAPI \u4f1a\u628a\u8be5\u53c2\u6570\u5f53\u4f5c\u67e5\u8be2\u53c2\u6570\u6216\u8bf7\u6c42\u4f53\uff08JSON\uff09\u53c2\u6570\u3002 \u6587\u4ef6\u4f5c\u4e3a\u300c\u8868\u5355\u6570\u636e\u300d\u4e0a\u4f20\u3002 \u5982\u679c\u628a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\u4e3a bytes \uff0c FastAPI \u5c06\u4ee5 bytes \u5f62\u5f0f\u8bfb\u53d6\u548c\u63a5\u6536\u6587\u4ef6\u5185\u5bb9\u3002 \u8fd9\u79cd\u65b9\u5f0f\u628a\u6587\u4ef6\u7684\u6240\u6709\u5185\u5bb9\u90fd\u5b58\u50a8\u5728\u5185\u5b58\u91cc\uff0c\u9002\u7528\u4e8e\u5c0f\u578b\u6587\u4ef6\u3002 \u4e0d\u8fc7\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c UploadFile \u66f4\u597d\u7528\u3002","title":"\u5b9a\u4e49 File \u53c2\u6570"},{"location":"tutorial/request-files/#uploadfile-file","text":"\u5b9a\u4e49 File \u53c2\u6570\u65f6\u4f7f\u7528 UploadFile \uff1a from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } UploadFile \u4e0e bytes \u76f8\u6bd4\u6709\u66f4\u591a\u4f18\u52bf\uff1a \u4f7f\u7528 spooled \u6587\u4ef6\uff1a \u5b58\u50a8\u5728\u5185\u5b58\u7684\u6587\u4ef6\u8d85\u51fa\u6700\u5927\u4e0a\u9650\u65f6\uff0cFastAPI \u4f1a\u628a\u6587\u4ef6\u5b58\u5165\u78c1\u76d8\uff1b \u8fd9\u79cd\u65b9\u5f0f\u66f4\u9002\u4e8e\u5904\u7406\u56fe\u50cf\u3001\u89c6\u9891\u3001\u4e8c\u8fdb\u5236\u6587\u4ef6\u7b49\u5927\u578b\u6587\u4ef6\uff0c\u597d\u5904\u662f\u4e0d\u4f1a\u5360\u7528\u6240\u6709\u5185\u5b58\uff1b \u53ef\u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u5143\u6570\u636e\uff1b \u81ea\u5e26 file-like async \u63a5\u53e3\uff1b \u66b4\u9732\u7684 Python SpooledTemporaryFile \u5bf9\u8c61\uff0c\u53ef\u76f4\u63a5\u4f20\u9012\u7ed9\u5176\u4ed6\u9884\u671f\u300cfile-like\u300d\u5bf9\u8c61\u7684\u5e93\u3002","title":"\u542b UploadFile \u7684 File \u53c2\u6570"},{"location":"tutorial/request-files/#uploadfile","text":"UploadFile \u7684\u5c5e\u6027\u5982\u4e0b\uff1a filename \uff1a\u4e0a\u4f20\u6587\u4ef6\u540d\u5b57\u7b26\u4e32\uff08 str \uff09\uff0c\u4f8b\u5982\uff0c myimage.jpg \uff1b content_type \uff1a\u5185\u5bb9\u7c7b\u578b\uff08MIME \u7c7b\u578b / \u5a92\u4f53\u7c7b\u578b\uff09\u5b57\u7b26\u4e32\uff08 str \uff09\uff0c\u4f8b\u5982\uff0c image/jpeg \uff1b file \uff1a SpooledTemporaryFile \uff08 file-like \u5bf9\u8c61\uff09\u3002\u5176\u5b9e\u5c31\u662f Python\u6587\u4ef6\uff0c\u53ef\u76f4\u63a5\u4f20\u9012\u7ed9\u5176\u4ed6\u9884\u671f file-like \u5bf9\u8c61\u7684\u51fd\u6570\u6216\u652f\u6301\u5e93\u3002 UploadFile \u652f\u6301\u4ee5\u4e0b async \u65b9\u6cd5\uff0c\uff08\u4f7f\u7528\u5185\u90e8 SpooledTemporaryFile \uff09\u53ef\u8c03\u7528\u76f8\u5e94\u7684\u6587\u4ef6\u65b9\u6cd5\u3002 write(data) \uff1a\u628a data \uff08 str \u6216 bytes \uff09\u5199\u5165\u6587\u4ef6\uff1b read(size) \uff1a\u6309\u6307\u5b9a\u6570\u91cf\u7684\u5b57\u8282\u6216\u5b57\u7b26\uff08 size ( int )\uff09\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\uff1b seek(offset) \uff1a\u79fb\u52a8\u81f3\u6587\u4ef6 offset \uff08 int \uff09\u5b57\u8282\u5904\u7684\u4f4d\u7f6e\uff1b \u4f8b\u5982\uff0c await myfile.seek(0) \u79fb\u52a8\u5230\u6587\u4ef6\u5f00\u5934\uff1b \u6267\u884c await myfile.read() \u540e\uff0c\u9700\u518d\u6b21\u8bfb\u53d6\u5df2\u8bfb\u53d6\u5185\u5bb9\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7279\u522b\u597d\u7528\uff1b close() \uff1a\u5173\u95ed\u6587\u4ef6\u3002 \u56e0\u4e3a\u4e0a\u8ff0\u65b9\u6cd5\u90fd\u662f async \u65b9\u6cd5\uff0c\u8981\u642d\u914d\u300cawait\u300d\u4f7f\u7528\u3002 \u4f8b\u5982\uff0c\u5728 async \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u5185\uff0c\u8981\u7528\u4ee5\u4e0b\u65b9\u5f0f\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\uff1a contents = await myfile . read () \u5728\u666e\u901a def \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u5185\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee UploadFile.file \uff0c\u4f8b\u5982\uff1a contents = myfile . file . read () async \u6280\u672f\u7ec6\u8282 \u4f7f\u7528 async \u65b9\u6cd5\u65f6\uff0c FastAPI \u5728\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\u6587\u4ef6\u65b9\u6cd5\uff0c\u5e76 awiat \u64cd\u4f5c\u5b8c\u6210\u3002 Starlette \u6280\u672f\u7ec6\u8282 FastAPI \u7684 UploadFile \u76f4\u63a5\u7ee7\u627f\u81ea Starlette \u7684 UploadFile \uff0c\u4f46\u6dfb\u52a0\u4e86\u4e00\u4e9b\u5fc5\u8981\u529f\u80fd\uff0c\u4f7f\u4e4b\u4e0e Pydantic \u53ca FastAPI \u7684\u5176\u5b83\u90e8\u4ef6\u517c\u5bb9\u3002","title":"UploadFile"},{"location":"tutorial/request-files/#_2","text":"\u4e0e JSON \u4e0d\u540c\uff0cHTML \u8868\u5355\uff08 <form></form> \uff09\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u901a\u5e38\u4f7f\u7528\u300c\u7279\u6b8a\u300d\u7684\u7f16\u7801\u3002 FastAPI \u8981\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u8bfb\u53d6 JSON\u3002 \u6280\u672f\u7ec6\u8282 \u4e0d\u5305\u542b\u6587\u4ef6\u65f6\uff0c\u8868\u5355\u6570\u636e\u4e00\u822c\u7528 application/x-www-form-urlencoded \u300c\u5a92\u4f53\u7c7b\u578b\u300d\u7f16\u7801\u3002 \u4f46\u8868\u5355\u5305\u542b\u6587\u4ef6\u65f6\uff0c\u7f16\u7801\u4e3a multipart/form-data \u3002\u4f7f\u7528\u4e86 File \uff0c FastAPI \u5c31\u77e5\u9053\u8981\u4ece\u8bf7\u6c42\u4f53\u7684\u6b63\u786e\u4f4d\u7f6e\u83b7\u53d6\u6587\u4ef6\u3002 \u7f16\u7801\u548c\u8868\u5355\u5b57\u6bb5\u8be6\u89c1 MDN Web \u6587\u6863\u7684 POST \u5c0f\u8282\u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a File \u548c Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u8981\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u662f multipart/form-data \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f FastAPI \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002","title":"\u4ec0\u4e48\u662f \u300c\u8868\u5355\u6570\u636e\u300d"},{"location":"tutorial/request-files/#_3","text":"FastAPI \u652f\u6301\u540c\u65f6\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002 \u53ef\u7528\u540c\u4e00\u4e2a\u300c\u8868\u5355\u5b57\u6bb5\u300d\u53d1\u9001\u542b\u591a\u4e2a\u6587\u4ef6\u7684\u300c\u8868\u5355\u6570\u636e\u300d\u3002 \u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u65f6\uff0c\u8981\u58f0\u660e\u542b bytes \u6216 UploadFile \u7684\u5217\u8868\uff08 List \uff09\uff1a from typing import List from fastapi import FastAPI , File , UploadFile from fastapi.responses import HTMLResponse app = FastAPI () @app . post ( \"/files/\" ) async def create_files ( files : List [ bytes ] = File ()): return { \"file_sizes\" : [ len ( file ) for file in files ]} @app . post ( \"/uploadfiles/\" ) async def create_upload_files ( files : List [ UploadFile ]): return { \"filenames\" : [ file . filename for file in files ]} @app . get ( \"/\" ) async def main (): content = \"\"\" <body> <form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> <form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> </body> \"\"\" return HTMLResponse ( content = content ) \u63a5\u6536\u7684\u4e5f\u662f\u542b bytes \u6216 UploadFile \u7684\u5217\u8868\uff08 list \uff09\u3002 \u7b14\u8bb0 \u6ce8\u610f\uff0c\u622a\u81f3 2019 \u5e74 4 \u6708 14 \u65e5\uff0cSwagger UI \u4e0d\u652f\u6301\u5728\u540c\u4e00\u4e2a\u8868\u5355\u5b57\u6bb5\u4e2d\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002\u8be6\u89c1 #4276 \u548c #3641 . \u4e0d\u8fc7\uff0c FastAPI \u5df2\u901a\u8fc7 OpenAPI \u6807\u51c6\u4e0e\u4e4b\u517c\u5bb9\u3002 \u56e0\u6b64\uff0c\u53ea\u8981 Swagger UI \u6216\u4efb\u4f55\u5176\u4ed6\u652f\u6301 OpenAPI \u7684\u5de5\u5177\u652f\u6301\u591a\u6587\u4ef6\u4e0a\u4f20\uff0c\u90fd\u5c06\u4e0e FastAPI \u517c\u5bb9\u3002 \u6280\u672f\u7ec6\u8282 \u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import HTMLResponse \u3002 fastapi.responses \u5176\u5b9e\u4e0e starlette.responses \u76f8\u540c\uff0c\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u8c03\u7528\u3002\u5b9e\u9645\u4e0a\uff0c\u5927\u591a\u6570 FastAPI \u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u4ece Starlette \u8c03\u7528\u3002","title":"\u591a\u6587\u4ef6\u4e0a\u4f20"},{"location":"tutorial/request-files/#_4","text":"\u672c\u8282\u4ecb\u7ecd\u4e86\u5982\u4f55\u7528 File \u628a\u4e0a\u4f20\u6587\u4ef6\u58f0\u660e\u4e3a\uff08\u8868\u5355\u6570\u636e\u7684\uff09\u8f93\u5165\u53c2\u6570\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/request-forms-and-files/","text":"\u8bf7\u6c42\u8868\u5355\u4e0e\u6587\u4ef6 \u00b6 FastAPI \u652f\u6301\u540c\u65f6\u4f7f\u7528 File \u548c Form \u5b9a\u4e49\u6587\u4ef6\u548c\u8868\u5355\u5b57\u6bb5\u3002 \u8bf4\u660e \u63a5\u6536\u4e0a\u4f20\u6587\u4ef6\u6216\u8868\u5355\u6570\u636e\uff0c\u8981\u9884\u5148\u5b89\u88c5 python-multipart \u3002 \u4f8b\u5982\uff0c pip install python-multipart \u3002 \u5bfc\u5165 File \u4e0e Form \u00b6 from fastapi import FastAPI , File , Form , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File (), fileb : UploadFile = File (), token : str = Form () ): return { \"file_size\" : len ( file ), \"token\" : token , \"fileb_content_type\" : fileb . content_type , } \u5b9a\u4e49 File \u4e0e Form \u53c2\u6570 \u00b6 \u521b\u5efa\u6587\u4ef6\u548c\u8868\u5355\u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Body \u548c Query \u4e00\u6837\uff1a from fastapi import FastAPI , File , Form , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File (), fileb : UploadFile = File (), token : str = Form () ): return { \"file_size\" : len ( file ), \"token\" : token , \"fileb_content_type\" : fileb . content_type , } \u6587\u4ef6\u548c\u8868\u5355\u5b57\u6bb5\u4f5c\u4e3a\u8868\u5355\u6570\u636e\u4e0a\u4f20\u4e0e\u63a5\u6536\u3002 \u58f0\u660e\u6587\u4ef6\u53ef\u4ee5\u4f7f\u7528 bytes \u6216 UploadFile \u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a File \u4e0e Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u8981\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u4e3a multipart/form-data \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f FastAPI \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002 \u5c0f\u7ed3 \u00b6 \u5728\u540c\u4e00\u4e2a\u8bf7\u6c42\u4e2d\u63a5\u6536\u6570\u636e\u548c\u6587\u4ef6\u65f6\uff0c\u5e94\u540c\u65f6\u4f7f\u7528 File \u548c Form \u3002","title":"\u8bf7\u6c42\u8868\u5355\u4e0e\u6587\u4ef6"},{"location":"tutorial/request-forms-and-files/#_1","text":"FastAPI \u652f\u6301\u540c\u65f6\u4f7f\u7528 File \u548c Form \u5b9a\u4e49\u6587\u4ef6\u548c\u8868\u5355\u5b57\u6bb5\u3002 \u8bf4\u660e \u63a5\u6536\u4e0a\u4f20\u6587\u4ef6\u6216\u8868\u5355\u6570\u636e\uff0c\u8981\u9884\u5148\u5b89\u88c5 python-multipart \u3002 \u4f8b\u5982\uff0c pip install python-multipart \u3002","title":"\u8bf7\u6c42\u8868\u5355\u4e0e\u6587\u4ef6"},{"location":"tutorial/request-forms-and-files/#file-form","text":"from fastapi import FastAPI , File , Form , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File (), fileb : UploadFile = File (), token : str = Form () ): return { \"file_size\" : len ( file ), \"token\" : token , \"fileb_content_type\" : fileb . content_type , }","title":"\u5bfc\u5165 File \u4e0e Form"},{"location":"tutorial/request-forms-and-files/#file-form_1","text":"\u521b\u5efa\u6587\u4ef6\u548c\u8868\u5355\u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Body \u548c Query \u4e00\u6837\uff1a from fastapi import FastAPI , File , Form , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File (), fileb : UploadFile = File (), token : str = Form () ): return { \"file_size\" : len ( file ), \"token\" : token , \"fileb_content_type\" : fileb . content_type , } \u6587\u4ef6\u548c\u8868\u5355\u5b57\u6bb5\u4f5c\u4e3a\u8868\u5355\u6570\u636e\u4e0a\u4f20\u4e0e\u63a5\u6536\u3002 \u58f0\u660e\u6587\u4ef6\u53ef\u4ee5\u4f7f\u7528 bytes \u6216 UploadFile \u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a File \u4e0e Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u8981\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u4e3a multipart/form-data \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f FastAPI \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002","title":"\u5b9a\u4e49 File \u4e0e Form \u53c2\u6570"},{"location":"tutorial/request-forms-and-files/#_2","text":"\u5728\u540c\u4e00\u4e2a\u8bf7\u6c42\u4e2d\u63a5\u6536\u6570\u636e\u548c\u6587\u4ef6\u65f6\uff0c\u5e94\u540c\u65f6\u4f7f\u7528 File \u548c Form \u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/request-forms/","text":"\u8868\u5355\u6570\u636e \u00b6 \u63a5\u6536\u7684\u4e0d\u662f JSON\uff0c\u800c\u662f\u8868\u5355\u5b57\u6bb5\u65f6\uff0c\u8981\u4f7f\u7528 Form \u3002 \u8bf4\u660e \u8981\u4f7f\u7528\u8868\u5355\uff0c\u9700\u9884\u5148\u5b89\u88c5 python-multipart \u3002 \u4f8b\u5982\uff0c pip install python-multipart \u3002 \u5bfc\u5165 Form \u00b6 \u4ece fastapi \u5bfc\u5165 Form \uff1a from fastapi import FastAPI , Form app = FastAPI () @app . post ( \"/login/\" ) async def login ( username : str = Form (), password : str = Form ()): return { \"username\" : username } \u5b9a\u4e49 Form \u53c2\u6570 \u00b6 \u521b\u5efa\u8868\u5355\uff08 Form \uff09\u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Body \u548c Query \u4e00\u6837\uff1a from fastapi import FastAPI , Form app = FastAPI () @app . post ( \"/login/\" ) async def login ( username : str = Form (), password : str = Form ()): return { \"username\" : username } \u4f8b\u5982\uff0cOAuth2 \u89c4\u8303\u7684 \"\u5bc6\u7801\u6d41\" \u6a21\u5f0f\u89c4\u5b9a\u8981\u901a\u8fc7\u8868\u5355\u5b57\u6bb5\u53d1\u9001 username \u548c password \u3002 \u8be5\u89c4\u8303 \u8981\u6c42\u5b57\u6bb5\u5fc5\u987b\u547d\u540d\u4e3a username \u548c password \uff0c\u5e76\u901a\u8fc7\u8868\u5355\u5b57\u6bb5\u53d1\u9001\uff0c\u4e0d\u80fd\u7528 JSON\u3002 \u4f7f\u7528 Form \u53ef\u4ee5\u58f0\u660e\u4e0e Body \uff08\u53ca Query \u3001 Path \u3001 Cookie \uff09\u76f8\u540c\u7684\u5143\u6570\u636e\u548c\u9a8c\u8bc1\u3002 \u8bf4\u660e Form \u662f\u76f4\u63a5\u7ee7\u627f\u81ea Body \u7684\u7c7b\u3002 \u63d0\u793a \u58f0\u660e\u8868\u5355\u4f53\u8981\u663e\u5f0f\u4f7f\u7528 Form \uff0c\u5426\u5219\uff0cFastAPI \u4f1a\u628a\u8be5\u53c2\u6570\u5f53\u4f5c\u67e5\u8be2\u53c2\u6570\u6216\u8bf7\u6c42\u4f53\uff08JSON\uff09\u53c2\u6570\u3002 \u5173\u4e8e \"\u8868\u5355\u5b57\u6bb5\" \u00b6 \u4e0e JSON \u4e0d\u540c\uff0cHTML \u8868\u5355\uff08 <form></form> \uff09\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u901a\u5e38\u4f7f\u7528\u300c\u7279\u6b8a\u300d\u7684\u7f16\u7801\u3002 FastAPI \u8981\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u8bfb\u53d6 JSON\u3002 \u6280\u672f\u7ec6\u8282 \u8868\u5355\u6570\u636e\u7684\u300c\u5a92\u4f53\u7c7b\u578b\u300d\u7f16\u7801\u4e00\u822c\u4e3a application/x-www-form-urlencoded \u3002 \u4f46\u5305\u542b\u6587\u4ef6\u7684\u8868\u5355\u7f16\u7801\u4e3a multipart/form-data \u3002\u6587\u4ef6\u5904\u7406\u8be6\u89c1\u4e0b\u8282\u3002 \u7f16\u7801\u548c\u8868\u5355\u5b57\u6bb5\u8be6\u89c1 MDN Web \u6587\u6863\u7684 POST \u5c0f\u8282\u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u8981\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u662f application/x-www-form-urlencoded \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f FastAPI \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002 \u5c0f\u7ed3 \u00b6 \u672c\u8282\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 Form \u58f0\u660e\u8868\u5355\u6570\u636e\u8f93\u5165\u53c2\u6570\u3002","title":"\u8868\u5355\u6570\u636e"},{"location":"tutorial/request-forms/#_1","text":"\u63a5\u6536\u7684\u4e0d\u662f JSON\uff0c\u800c\u662f\u8868\u5355\u5b57\u6bb5\u65f6\uff0c\u8981\u4f7f\u7528 Form \u3002 \u8bf4\u660e \u8981\u4f7f\u7528\u8868\u5355\uff0c\u9700\u9884\u5148\u5b89\u88c5 python-multipart \u3002 \u4f8b\u5982\uff0c pip install python-multipart \u3002","title":"\u8868\u5355\u6570\u636e"},{"location":"tutorial/request-forms/#form","text":"\u4ece fastapi \u5bfc\u5165 Form \uff1a from fastapi import FastAPI , Form app = FastAPI () @app . post ( \"/login/\" ) async def login ( username : str = Form (), password : str = Form ()): return { \"username\" : username }","title":"\u5bfc\u5165 Form"},{"location":"tutorial/request-forms/#form_1","text":"\u521b\u5efa\u8868\u5355\uff08 Form \uff09\u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Body \u548c Query \u4e00\u6837\uff1a from fastapi import FastAPI , Form app = FastAPI () @app . post ( \"/login/\" ) async def login ( username : str = Form (), password : str = Form ()): return { \"username\" : username } \u4f8b\u5982\uff0cOAuth2 \u89c4\u8303\u7684 \"\u5bc6\u7801\u6d41\" \u6a21\u5f0f\u89c4\u5b9a\u8981\u901a\u8fc7\u8868\u5355\u5b57\u6bb5\u53d1\u9001 username \u548c password \u3002 \u8be5\u89c4\u8303 \u8981\u6c42\u5b57\u6bb5\u5fc5\u987b\u547d\u540d\u4e3a username \u548c password \uff0c\u5e76\u901a\u8fc7\u8868\u5355\u5b57\u6bb5\u53d1\u9001\uff0c\u4e0d\u80fd\u7528 JSON\u3002 \u4f7f\u7528 Form \u53ef\u4ee5\u58f0\u660e\u4e0e Body \uff08\u53ca Query \u3001 Path \u3001 Cookie \uff09\u76f8\u540c\u7684\u5143\u6570\u636e\u548c\u9a8c\u8bc1\u3002 \u8bf4\u660e Form \u662f\u76f4\u63a5\u7ee7\u627f\u81ea Body \u7684\u7c7b\u3002 \u63d0\u793a \u58f0\u660e\u8868\u5355\u4f53\u8981\u663e\u5f0f\u4f7f\u7528 Form \uff0c\u5426\u5219\uff0cFastAPI \u4f1a\u628a\u8be5\u53c2\u6570\u5f53\u4f5c\u67e5\u8be2\u53c2\u6570\u6216\u8bf7\u6c42\u4f53\uff08JSON\uff09\u53c2\u6570\u3002","title":"\u5b9a\u4e49 Form \u53c2\u6570"},{"location":"tutorial/request-forms/#_2","text":"\u4e0e JSON \u4e0d\u540c\uff0cHTML \u8868\u5355\uff08 <form></form> \uff09\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u901a\u5e38\u4f7f\u7528\u300c\u7279\u6b8a\u300d\u7684\u7f16\u7801\u3002 FastAPI \u8981\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u8bfb\u53d6 JSON\u3002 \u6280\u672f\u7ec6\u8282 \u8868\u5355\u6570\u636e\u7684\u300c\u5a92\u4f53\u7c7b\u578b\u300d\u7f16\u7801\u4e00\u822c\u4e3a application/x-www-form-urlencoded \u3002 \u4f46\u5305\u542b\u6587\u4ef6\u7684\u8868\u5355\u7f16\u7801\u4e3a multipart/form-data \u3002\u6587\u4ef6\u5904\u7406\u8be6\u89c1\u4e0b\u8282\u3002 \u7f16\u7801\u548c\u8868\u5355\u5b57\u6bb5\u8be6\u89c1 MDN Web \u6587\u6863\u7684 POST \u5c0f\u8282\u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u8981\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u662f application/x-www-form-urlencoded \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f FastAPI \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002","title":"\u5173\u4e8e \"\u8868\u5355\u5b57\u6bb5\""},{"location":"tutorial/request-forms/#_3","text":"\u672c\u8282\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 Form \u58f0\u660e\u8868\u5355\u6570\u636e\u8f93\u5165\u53c2\u6570\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/response-model/","text":"\u54cd\u5e94\u6a21\u578b \u00b6 \u4f60\u53ef\u4ee5\u5728\u4efb\u610f\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528 response_model \u53c2\u6570\u6765\u58f0\u660e\u7528\u4e8e\u54cd\u5e94\u7684\u6a21\u578b\uff1a @app.get() @app.post() @app.put() @app.delete() \u7b49\u7b49\u3002 from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item ): return item Note \u6ce8\u610f\uff0c response_model \u662f\u300c\u88c5\u9970\u5668\u300d\u65b9\u6cd5\uff08 get \uff0c post \u7b49\uff09\u7684\u4e00\u4e2a\u53c2\u6570\u3002\u4e0d\u50cf\u4e4b\u524d\u7684\u6240\u6709\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\uff0c\u5b83\u4e0d\u5c5e\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002 \u5b83\u63a5\u6536\u7684\u7c7b\u578b\u4e0e\u4f60\u5c06\u4e3a Pydantic \u6a21\u578b\u5c5e\u6027\u6240\u58f0\u660e\u7684\u7c7b\u578b\u76f8\u540c\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u662f\u4e00\u4e2a Pydantic \u6a21\u578b\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u7531 Pydantic \u6a21\u578b\u7ec4\u6210\u7684 list \uff0c\u4f8b\u5982 List[Item] \u3002 FastAPI \u5c06\u4f7f\u7528\u6b64 response_model \u6765\uff1a \u5c06\u8f93\u51fa\u6570\u636e\u8f6c\u6362\u4e3a\u5176\u58f0\u660e\u7684\u7c7b\u578b\u3002 \u6821\u9a8c\u6570\u636e\u3002 \u5728 OpenAPI \u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4e3a\u54cd\u5e94\u6dfb\u52a0\u4e00\u4e2a JSON Schema\u3002 \u5e76\u5728\u81ea\u52a8\u751f\u6210\u6587\u6863\u7cfb\u7edf\u4e2d\u4f7f\u7528\u3002 \u4f46\u6700\u91cd\u8981\u7684\u662f\uff1a \u4f1a\u5c06\u8f93\u51fa\u6570\u636e\u9650\u5236\u5728\u8be5\u6a21\u578b\u5b9a\u4e49\u5185\u3002\u4e0b\u9762\u6211\u4eec\u4f1a\u770b\u5230\u8fd9\u4e00\u70b9\u6709\u591a\u91cd\u8981\u3002 \u6280\u672f\u7ec6\u8282 \u54cd\u5e94\u6a21\u578b\u5728\u53c2\u6570\u4e2d\u88ab\u58f0\u660e\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u6ce8\u89e3\uff0c\u8fd9\u662f\u56e0\u4e3a\u8def\u5f84\u51fd\u6570\u53ef\u80fd\u4e0d\u4f1a\u771f\u6b63\u8fd4\u56de\u8be5\u54cd\u5e94\u6a21\u578b\uff0c\u800c\u662f\u8fd4\u56de\u4e00\u4e2a dict \u3001\u6570\u636e\u5e93\u5bf9\u8c61\u6216\u5176\u4ed6\u6a21\u578b\uff0c\u7136\u540e\u518d\u4f7f\u7528 response_model \u6765\u6267\u884c\u5b57\u6bb5\u7ea6\u675f\u548c\u5e8f\u5217\u5316\u3002 \u8fd4\u56de\u4e0e\u8f93\u5165\u76f8\u540c\u7684\u6570\u636e \u00b6 \u73b0\u5728\u6211\u4eec\u58f0\u660e\u4e00\u4e2a UserIn \u6a21\u578b\uff0c\u5b83\u5c06\u5305\u542b\u4e00\u4e2a\u660e\u6587\u5bc6\u7801\u5c5e\u6027\u3002 from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user \u6211\u4eec\u6b63\u5728\u4f7f\u7528\u6b64\u6a21\u578b\u58f0\u660e\u8f93\u5165\u6570\u636e\uff0c\u5e76\u4f7f\u7528\u540c\u4e00\u6a21\u578b\u58f0\u660e\u8f93\u51fa\u6570\u636e\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user \u73b0\u5728\uff0c\u6bcf\u5f53\u6d4f\u89c8\u5668\u4f7f\u7528\u4e00\u4e2a\u5bc6\u7801\u521b\u5efa\u7528\u6237\u65f6\uff0cAPI \u90fd\u4f1a\u5728\u54cd\u5e94\u4e2d\u8fd4\u56de\u76f8\u540c\u7684\u5bc6\u7801\u3002 \u5728\u8fd9\u4e2a\u6848\u4f8b\u4e2d\uff0c\u8fd9\u53ef\u80fd\u4e0d\u7b97\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u7528\u6237\u81ea\u5df1\u6b63\u5728\u53d1\u9001\u5bc6\u7801\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5728\u5176\u4ed6\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u578b\uff0c\u5219\u53ef\u80fd\u4f1a\u5c06\u7528\u6237\u7684\u5bc6\u7801\u53d1\u9001\u7ed9\u6bcf\u4e2a\u5ba2\u6237\u7aef\u3002 Danger \u6c38\u8fdc\u4e0d\u8981\u5b58\u50a8\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\uff0c\u4e5f\u4e0d\u8981\u5728\u54cd\u5e94\u4e2d\u53d1\u9001\u5bc6\u7801\u3002 \u6dfb\u52a0\u8f93\u51fa\u6a21\u578b \u00b6 \u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6709\u660e\u6587\u5bc6\u7801\u7684\u8f93\u5165\u6a21\u578b\u548c\u4e00\u4e2a\u6ca1\u6709\u660e\u6587\u5bc6\u7801\u7684\u8f93\u51fa\u6a21\u578b\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user \u8fd9\u6837\uff0c\u5373\u4fbf\u6211\u4eec\u7684 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u5c06\u4f1a\u8fd4\u56de\u5305\u542b\u5bc6\u7801\u7684\u76f8\u540c\u8f93\u5165\u7528\u6237\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user ...\u6211\u4eec\u5df2\u7ecf\u5c06 response_model \u58f0\u660e\u4e3a\u4e86\u4e0d\u5305\u542b\u5bc6\u7801\u7684 UserOut \u6a21\u578b\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user \u56e0\u6b64\uff0c FastAPI \u5c06\u4f1a\u8d1f\u8d23\u8fc7\u6ee4\u6389\u672a\u5728\u8f93\u51fa\u6a21\u578b\u4e2d\u58f0\u660e\u7684\u6240\u6709\u6570\u636e\uff08\u4f7f\u7528 Pydantic\uff09\u3002 \u5728\u6587\u6863\u4e2d\u67e5\u770b \u00b6 \u5f53\u4f60\u67e5\u770b\u81ea\u52a8\u5316\u6587\u6863\u65f6\uff0c\u4f60\u53ef\u4ee5\u68c0\u67e5\u8f93\u5165\u6a21\u578b\u548c\u8f93\u51fa\u6a21\u578b\u662f\u5426\u90fd\u5177\u6709\u81ea\u5df1\u7684 JSON Schema\uff1a \u5e76\u4e14\u4e24\u79cd\u6a21\u578b\u90fd\u5c06\u5728\u4ea4\u4e92\u5f0f API \u6587\u6863\u4e2d\u4f7f\u7528\uff1a \u54cd\u5e94\u6a21\u578b\u7f16\u7801\u53c2\u6570 \u00b6 \u4f60\u7684\u54cd\u5e94\u6a21\u578b\u53ef\u4ee5\u5177\u6709\u9ed8\u8ba4\u503c\uff0c\u4f8b\u5982\uff1a from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] description: Union[str, None] = None \u5177\u6709\u9ed8\u8ba4\u503c None \u3002 tax: float = 10.5 \u5177\u6709\u9ed8\u8ba4\u503c 10.5 . tags: List[str] = [] \u5177\u6709\u4e00\u4e2a\u7a7a\u5217\u8868\u4f5c\u4e3a\u9ed8\u8ba4\u503c\uff1a [] . \u4f46\u5982\u679c\u5b83\u4eec\u5e76\u6ca1\u6709\u5b58\u50a8\u5b9e\u9645\u7684\u503c\uff0c\u4f60\u53ef\u80fd\u60f3\u4ece\u7ed3\u679c\u4e2d\u5ffd\u7565\u5b83\u4eec\u7684\u9ed8\u8ba4\u503c\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5f53\u4f60\u5728 NoSQL \u6570\u636e\u5e93\u4e2d\u4fdd\u5b58\u4e86\u5177\u6709\u8bb8\u591a\u53ef\u9009\u5c5e\u6027\u7684\u6a21\u578b\uff0c\u4f46\u4f60\u53c8\u4e0d\u60f3\u53d1\u9001\u5145\u6ee1\u9ed8\u8ba4\u503c\u7684\u5f88\u957f\u7684 JSON \u54cd\u5e94\u3002 \u4f7f\u7528 response_model_exclude_unset \u53c2\u6570 \u00b6 \u4f60\u53ef\u4ee5\u8bbe\u7f6e \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684 response_model_exclude_unset=True \u53c2\u6570\uff1a from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] \u7136\u540e\u54cd\u5e94\u4e2d\u5c06\u4e0d\u4f1a\u5305\u542b\u90a3\u4e9b\u9ed8\u8ba4\u503c\uff0c\u800c\u662f\u4ec5\u6709\u5b9e\u9645\u8bbe\u7f6e\u7684\u503c\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4f60\u5411 \u8def\u5f84\u64cd\u4f5c \u53d1\u9001 ID \u4e3a foo \u7684\u5546\u54c1\u7684\u8bf7\u6c42\uff0c\u5219\u54cd\u5e94\uff08\u4e0d\u5305\u62ec\u9ed8\u8ba4\u503c\uff09\u5c06\u4e3a\uff1a { \"name\" : \"Foo\" , \"price\" : 50.2 } Info FastAPI \u901a\u8fc7 Pydantic \u6a21\u578b\u7684 .dict() \u914d\u5408 \u8be5\u65b9\u6cd5\u7684 exclude_unset \u53c2\u6570 \u6765\u5b9e\u73b0\u6b64\u529f\u80fd\u3002 Info \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\uff1a response_model_exclude_defaults=True response_model_exclude_none=True \u53c2\u8003 Pydantic \u6587\u6863 \u4e2d\u5bf9 exclude_defaults \u548c exclude_none \u7684\u63cf\u8ff0\u3002 \u9ed8\u8ba4\u503c\u5b57\u6bb5\u6709\u5b9e\u9645\u503c\u7684\u6570\u636e \u00b6 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u7684\u6570\u636e\u5728\u5177\u6709\u9ed8\u8ba4\u503c\u7684\u6a21\u578b\u5b57\u6bb5\u4e2d\u6709\u5b9e\u9645\u7684\u503c\uff0c\u4f8b\u5982 ID \u4e3a bar \u7684\u9879\uff1a { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 } \u8fd9\u4e9b\u503c\u5c06\u5305\u542b\u5728\u54cd\u5e94\u4e2d\u3002 \u5177\u6709\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u503c\u7684\u6570\u636e \u00b6 \u5982\u679c\u6570\u636e\u5177\u6709\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u7684\u503c\uff0c\u4f8b\u5982 ID \u4e3a baz \u7684\u9879\uff1a { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : [] } \u5373\u4f7f description \u3001 tax \u548c tags \u5177\u6709\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u7684\u503c\uff0cFastAPI \u8db3\u591f\u806a\u660e (\u5b9e\u9645\u4e0a\u662f Pydantic \u8db3\u591f\u806a\u660e) \u53bb\u8ba4\u8bc6\u5230\u8fd9\u4e00\u70b9\uff0c\u5b83\u4eec\u7684\u503c\u88ab\u663e\u5f0f\u5730\u6240\u8bbe\u5b9a\uff08\u800c\u4e0d\u662f\u53d6\u81ea\u9ed8\u8ba4\u503c\uff09\u3002 \u56e0\u6b64\uff0c\u5b83\u4eec\u5c06\u5305\u542b\u5728 JSON \u54cd\u5e94\u4e2d\u3002 Tip \u8bf7\u6ce8\u610f\u9ed8\u8ba4\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u503c\uff0c\u800c\u4e0d\u4ec5\u662f None \u3002 \u5b83\u4eec\u53ef\u4ee5\u662f\u4e00\u4e2a\u5217\u8868\uff08 [] \uff09\uff0c\u4e00\u4e2a\u503c\u4e3a 10.5 \u7684 float \uff0c\u7b49\u7b49\u3002 response_model_include \u548c response_model_exclude \u00b6 \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684 response_model_include \u548c response_model_exclude \u53c2\u6570\u3002 \u5b83\u4eec\u63a5\u6536\u4e00\u4e2a\u7531\u5c5e\u6027\u540d\u79f0 str \u7ec4\u6210\u7684 set \u6765\u5305\u542b\uff08\u5ffd\u7565\u5176\u4ed6\u7684\uff09\u6216\u8005\u6392\u9664\uff08\u5305\u542b\u5176\u4ed6\u7684\uff09\u8fd9\u4e9b\u5c5e\u6027\u3002 \u5982\u679c\u4f60\u53ea\u6709\u4e00\u4e2a Pydantic \u6a21\u578b\uff0c\u5e76\u4e14\u60f3\u8981\u4ece\u8f93\u51fa\u4e2d\u79fb\u9664\u4e00\u4e9b\u6570\u636e\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u5feb\u6377\u65b9\u6cd5\u3002 Tip \u4f46\u662f\u4f9d\u7136\u5efa\u8bae\u4f60\u4f7f\u7528\u4e0a\u9762\u63d0\u5230\u7684\u4e3b\u610f\uff0c\u4f7f\u7528\u591a\u4e2a\u7c7b\u800c\u4e0d\u662f\u8fd9\u4e9b\u53c2\u6570\u3002 \u8fd9\u662f\u56e0\u4e3a\u5373\u4f7f\u4f7f\u7528 response_model_include \u6216 response_model_exclude \u6765\u7701\u7565\u67d0\u4e9b\u5c5e\u6027\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f\u7684 OpenAPI \u5b9a\u4e49\uff08\u548c\u6587\u6863\uff09\u4e2d\u751f\u6210\u7684 JSON Schema \u4ecd\u5c06\u662f\u5b8c\u6574\u7684\u6a21\u578b\u3002 \u8fd9\u4e5f\u9002\u7528\u4e8e\u4f5c\u7528\u7c7b\u4f3c\u7684 response_model_by_alias \u3002 from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = { \"name\" , \"description\" }, ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = { \"tax\" }) async def read_item_public_data ( item_id : str ): return items [ item_id ] Tip {\"name\", \"description\"} \u8bed\u6cd5\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u8fd9\u4e24\u4e2a\u503c\u7684 set \u3002 \u7b49\u540c\u4e8e set([\"name\", \"description\"]) \u3002 \u4f7f\u7528 list \u800c\u4e0d\u662f set \u00b6 \u5982\u679c\u4f60\u5fd8\u8bb0\u4f7f\u7528 set \u800c\u662f\u4f7f\u7528 list \u6216 tuple \uff0cFastAPI \u4ecd\u4f1a\u5c06\u5176\u8f6c\u6362\u4e3a set \u5e76\u4e14\u6b63\u5e38\u5de5\u4f5c\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = [ \"name\" , \"description\" ], ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = [ \"tax\" ]) async def read_item_public_data ( item_id : str ): return items [ item_id ] \u603b\u7ed3 \u00b6 \u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684 response_model \u53c2\u6570\u6765\u5b9a\u4e49\u54cd\u5e94\u6a21\u578b\uff0c\u7279\u522b\u662f\u786e\u4fdd\u79c1\u6709\u6570\u636e\u88ab\u8fc7\u6ee4\u6389\u3002 \u4f7f\u7528 response_model_exclude_unset \u6765\u4ec5\u8fd4\u56de\u663e\u5f0f\u8bbe\u5b9a\u7684\u503c\u3002","title":"\u54cd\u5e94\u6a21\u578b"},{"location":"tutorial/response-model/#_1","text":"\u4f60\u53ef\u4ee5\u5728\u4efb\u610f\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528 response_model \u53c2\u6570\u6765\u58f0\u660e\u7528\u4e8e\u54cd\u5e94\u7684\u6a21\u578b\uff1a @app.get() @app.post() @app.put() @app.delete() \u7b49\u7b49\u3002 from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item ): return item Note \u6ce8\u610f\uff0c response_model \u662f\u300c\u88c5\u9970\u5668\u300d\u65b9\u6cd5\uff08 get \uff0c post \u7b49\uff09\u7684\u4e00\u4e2a\u53c2\u6570\u3002\u4e0d\u50cf\u4e4b\u524d\u7684\u6240\u6709\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\uff0c\u5b83\u4e0d\u5c5e\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002 \u5b83\u63a5\u6536\u7684\u7c7b\u578b\u4e0e\u4f60\u5c06\u4e3a Pydantic \u6a21\u578b\u5c5e\u6027\u6240\u58f0\u660e\u7684\u7c7b\u578b\u76f8\u540c\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u662f\u4e00\u4e2a Pydantic \u6a21\u578b\uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u7531 Pydantic \u6a21\u578b\u7ec4\u6210\u7684 list \uff0c\u4f8b\u5982 List[Item] \u3002 FastAPI \u5c06\u4f7f\u7528\u6b64 response_model \u6765\uff1a \u5c06\u8f93\u51fa\u6570\u636e\u8f6c\u6362\u4e3a\u5176\u58f0\u660e\u7684\u7c7b\u578b\u3002 \u6821\u9a8c\u6570\u636e\u3002 \u5728 OpenAPI \u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4e3a\u54cd\u5e94\u6dfb\u52a0\u4e00\u4e2a JSON Schema\u3002 \u5e76\u5728\u81ea\u52a8\u751f\u6210\u6587\u6863\u7cfb\u7edf\u4e2d\u4f7f\u7528\u3002 \u4f46\u6700\u91cd\u8981\u7684\u662f\uff1a \u4f1a\u5c06\u8f93\u51fa\u6570\u636e\u9650\u5236\u5728\u8be5\u6a21\u578b\u5b9a\u4e49\u5185\u3002\u4e0b\u9762\u6211\u4eec\u4f1a\u770b\u5230\u8fd9\u4e00\u70b9\u6709\u591a\u91cd\u8981\u3002 \u6280\u672f\u7ec6\u8282 \u54cd\u5e94\u6a21\u578b\u5728\u53c2\u6570\u4e2d\u88ab\u58f0\u660e\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u6ce8\u89e3\uff0c\u8fd9\u662f\u56e0\u4e3a\u8def\u5f84\u51fd\u6570\u53ef\u80fd\u4e0d\u4f1a\u771f\u6b63\u8fd4\u56de\u8be5\u54cd\u5e94\u6a21\u578b\uff0c\u800c\u662f\u8fd4\u56de\u4e00\u4e2a dict \u3001\u6570\u636e\u5e93\u5bf9\u8c61\u6216\u5176\u4ed6\u6a21\u578b\uff0c\u7136\u540e\u518d\u4f7f\u7528 response_model \u6765\u6267\u884c\u5b57\u6bb5\u7ea6\u675f\u548c\u5e8f\u5217\u5316\u3002","title":"\u54cd\u5e94\u6a21\u578b"},{"location":"tutorial/response-model/#_2","text":"\u73b0\u5728\u6211\u4eec\u58f0\u660e\u4e00\u4e2a UserIn \u6a21\u578b\uff0c\u5b83\u5c06\u5305\u542b\u4e00\u4e2a\u660e\u6587\u5bc6\u7801\u5c5e\u6027\u3002 from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user \u6211\u4eec\u6b63\u5728\u4f7f\u7528\u6b64\u6a21\u578b\u58f0\u660e\u8f93\u5165\u6570\u636e\uff0c\u5e76\u4f7f\u7528\u540c\u4e00\u6a21\u578b\u58f0\u660e\u8f93\u51fa\u6570\u636e\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user \u73b0\u5728\uff0c\u6bcf\u5f53\u6d4f\u89c8\u5668\u4f7f\u7528\u4e00\u4e2a\u5bc6\u7801\u521b\u5efa\u7528\u6237\u65f6\uff0cAPI \u90fd\u4f1a\u5728\u54cd\u5e94\u4e2d\u8fd4\u56de\u76f8\u540c\u7684\u5bc6\u7801\u3002 \u5728\u8fd9\u4e2a\u6848\u4f8b\u4e2d\uff0c\u8fd9\u53ef\u80fd\u4e0d\u7b97\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u7528\u6237\u81ea\u5df1\u6b63\u5728\u53d1\u9001\u5bc6\u7801\u3002 \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5728\u5176\u4ed6\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u578b\uff0c\u5219\u53ef\u80fd\u4f1a\u5c06\u7528\u6237\u7684\u5bc6\u7801\u53d1\u9001\u7ed9\u6bcf\u4e2a\u5ba2\u6237\u7aef\u3002 Danger \u6c38\u8fdc\u4e0d\u8981\u5b58\u50a8\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\uff0c\u4e5f\u4e0d\u8981\u5728\u54cd\u5e94\u4e2d\u53d1\u9001\u5bc6\u7801\u3002","title":"\u8fd4\u56de\u4e0e\u8f93\u5165\u76f8\u540c\u7684\u6570\u636e"},{"location":"tutorial/response-model/#_3","text":"\u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6709\u660e\u6587\u5bc6\u7801\u7684\u8f93\u5165\u6a21\u578b\u548c\u4e00\u4e2a\u6ca1\u6709\u660e\u6587\u5bc6\u7801\u7684\u8f93\u51fa\u6a21\u578b\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user \u8fd9\u6837\uff0c\u5373\u4fbf\u6211\u4eec\u7684 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u5c06\u4f1a\u8fd4\u56de\u5305\u542b\u5bc6\u7801\u7684\u76f8\u540c\u8f93\u5165\u7528\u6237\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user ...\u6211\u4eec\u5df2\u7ecf\u5c06 response_model \u58f0\u660e\u4e3a\u4e86\u4e0d\u5305\u542b\u5bc6\u7801\u7684 UserOut \u6a21\u578b\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user \u56e0\u6b64\uff0c FastAPI \u5c06\u4f1a\u8d1f\u8d23\u8fc7\u6ee4\u6389\u672a\u5728\u8f93\u51fa\u6a21\u578b\u4e2d\u58f0\u660e\u7684\u6240\u6709\u6570\u636e\uff08\u4f7f\u7528 Pydantic\uff09\u3002","title":"\u6dfb\u52a0\u8f93\u51fa\u6a21\u578b"},{"location":"tutorial/response-model/#_4","text":"\u5f53\u4f60\u67e5\u770b\u81ea\u52a8\u5316\u6587\u6863\u65f6\uff0c\u4f60\u53ef\u4ee5\u68c0\u67e5\u8f93\u5165\u6a21\u578b\u548c\u8f93\u51fa\u6a21\u578b\u662f\u5426\u90fd\u5177\u6709\u81ea\u5df1\u7684 JSON Schema\uff1a \u5e76\u4e14\u4e24\u79cd\u6a21\u578b\u90fd\u5c06\u5728\u4ea4\u4e92\u5f0f API \u6587\u6863\u4e2d\u4f7f\u7528\uff1a","title":"\u5728\u6587\u6863\u4e2d\u67e5\u770b"},{"location":"tutorial/response-model/#_5","text":"\u4f60\u7684\u54cd\u5e94\u6a21\u578b\u53ef\u4ee5\u5177\u6709\u9ed8\u8ba4\u503c\uff0c\u4f8b\u5982\uff1a from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] description: Union[str, None] = None \u5177\u6709\u9ed8\u8ba4\u503c None \u3002 tax: float = 10.5 \u5177\u6709\u9ed8\u8ba4\u503c 10.5 . tags: List[str] = [] \u5177\u6709\u4e00\u4e2a\u7a7a\u5217\u8868\u4f5c\u4e3a\u9ed8\u8ba4\u503c\uff1a [] . \u4f46\u5982\u679c\u5b83\u4eec\u5e76\u6ca1\u6709\u5b58\u50a8\u5b9e\u9645\u7684\u503c\uff0c\u4f60\u53ef\u80fd\u60f3\u4ece\u7ed3\u679c\u4e2d\u5ffd\u7565\u5b83\u4eec\u7684\u9ed8\u8ba4\u503c\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5f53\u4f60\u5728 NoSQL \u6570\u636e\u5e93\u4e2d\u4fdd\u5b58\u4e86\u5177\u6709\u8bb8\u591a\u53ef\u9009\u5c5e\u6027\u7684\u6a21\u578b\uff0c\u4f46\u4f60\u53c8\u4e0d\u60f3\u53d1\u9001\u5145\u6ee1\u9ed8\u8ba4\u503c\u7684\u5f88\u957f\u7684 JSON \u54cd\u5e94\u3002","title":"\u54cd\u5e94\u6a21\u578b\u7f16\u7801\u53c2\u6570"},{"location":"tutorial/response-model/#response_model_exclude_unset","text":"\u4f60\u53ef\u4ee5\u8bbe\u7f6e \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684 response_model_exclude_unset=True \u53c2\u6570\uff1a from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] \u7136\u540e\u54cd\u5e94\u4e2d\u5c06\u4e0d\u4f1a\u5305\u542b\u90a3\u4e9b\u9ed8\u8ba4\u503c\uff0c\u800c\u662f\u4ec5\u6709\u5b9e\u9645\u8bbe\u7f6e\u7684\u503c\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4f60\u5411 \u8def\u5f84\u64cd\u4f5c \u53d1\u9001 ID \u4e3a foo \u7684\u5546\u54c1\u7684\u8bf7\u6c42\uff0c\u5219\u54cd\u5e94\uff08\u4e0d\u5305\u62ec\u9ed8\u8ba4\u503c\uff09\u5c06\u4e3a\uff1a { \"name\" : \"Foo\" , \"price\" : 50.2 } Info FastAPI \u901a\u8fc7 Pydantic \u6a21\u578b\u7684 .dict() \u914d\u5408 \u8be5\u65b9\u6cd5\u7684 exclude_unset \u53c2\u6570 \u6765\u5b9e\u73b0\u6b64\u529f\u80fd\u3002 Info \u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528\uff1a response_model_exclude_defaults=True response_model_exclude_none=True \u53c2\u8003 Pydantic \u6587\u6863 \u4e2d\u5bf9 exclude_defaults \u548c exclude_none \u7684\u63cf\u8ff0\u3002","title":"\u4f7f\u7528 response_model_exclude_unset \u53c2\u6570"},{"location":"tutorial/response-model/#_6","text":"\u4f46\u662f\uff0c\u5982\u679c\u4f60\u7684\u6570\u636e\u5728\u5177\u6709\u9ed8\u8ba4\u503c\u7684\u6a21\u578b\u5b57\u6bb5\u4e2d\u6709\u5b9e\u9645\u7684\u503c\uff0c\u4f8b\u5982 ID \u4e3a bar \u7684\u9879\uff1a { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 } \u8fd9\u4e9b\u503c\u5c06\u5305\u542b\u5728\u54cd\u5e94\u4e2d\u3002","title":"\u9ed8\u8ba4\u503c\u5b57\u6bb5\u6709\u5b9e\u9645\u503c\u7684\u6570\u636e"},{"location":"tutorial/response-model/#_7","text":"\u5982\u679c\u6570\u636e\u5177\u6709\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u7684\u503c\uff0c\u4f8b\u5982 ID \u4e3a baz \u7684\u9879\uff1a { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : [] } \u5373\u4f7f description \u3001 tax \u548c tags \u5177\u6709\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u7684\u503c\uff0cFastAPI \u8db3\u591f\u806a\u660e (\u5b9e\u9645\u4e0a\u662f Pydantic \u8db3\u591f\u806a\u660e) \u53bb\u8ba4\u8bc6\u5230\u8fd9\u4e00\u70b9\uff0c\u5b83\u4eec\u7684\u503c\u88ab\u663e\u5f0f\u5730\u6240\u8bbe\u5b9a\uff08\u800c\u4e0d\u662f\u53d6\u81ea\u9ed8\u8ba4\u503c\uff09\u3002 \u56e0\u6b64\uff0c\u5b83\u4eec\u5c06\u5305\u542b\u5728 JSON \u54cd\u5e94\u4e2d\u3002 Tip \u8bf7\u6ce8\u610f\u9ed8\u8ba4\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u503c\uff0c\u800c\u4e0d\u4ec5\u662f None \u3002 \u5b83\u4eec\u53ef\u4ee5\u662f\u4e00\u4e2a\u5217\u8868\uff08 [] \uff09\uff0c\u4e00\u4e2a\u503c\u4e3a 10.5 \u7684 float \uff0c\u7b49\u7b49\u3002","title":"\u5177\u6709\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u503c\u7684\u6570\u636e"},{"location":"tutorial/response-model/#response_model_include-response_model_exclude","text":"\u4f60\u8fd8\u53ef\u4ee5\u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684 response_model_include \u548c response_model_exclude \u53c2\u6570\u3002 \u5b83\u4eec\u63a5\u6536\u4e00\u4e2a\u7531\u5c5e\u6027\u540d\u79f0 str \u7ec4\u6210\u7684 set \u6765\u5305\u542b\uff08\u5ffd\u7565\u5176\u4ed6\u7684\uff09\u6216\u8005\u6392\u9664\uff08\u5305\u542b\u5176\u4ed6\u7684\uff09\u8fd9\u4e9b\u5c5e\u6027\u3002 \u5982\u679c\u4f60\u53ea\u6709\u4e00\u4e2a Pydantic \u6a21\u578b\uff0c\u5e76\u4e14\u60f3\u8981\u4ece\u8f93\u51fa\u4e2d\u79fb\u9664\u4e00\u4e9b\u6570\u636e\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u5feb\u6377\u65b9\u6cd5\u3002 Tip \u4f46\u662f\u4f9d\u7136\u5efa\u8bae\u4f60\u4f7f\u7528\u4e0a\u9762\u63d0\u5230\u7684\u4e3b\u610f\uff0c\u4f7f\u7528\u591a\u4e2a\u7c7b\u800c\u4e0d\u662f\u8fd9\u4e9b\u53c2\u6570\u3002 \u8fd9\u662f\u56e0\u4e3a\u5373\u4f7f\u4f7f\u7528 response_model_include \u6216 response_model_exclude \u6765\u7701\u7565\u67d0\u4e9b\u5c5e\u6027\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f\u7684 OpenAPI \u5b9a\u4e49\uff08\u548c\u6587\u6863\uff09\u4e2d\u751f\u6210\u7684 JSON Schema \u4ecd\u5c06\u662f\u5b8c\u6574\u7684\u6a21\u578b\u3002 \u8fd9\u4e5f\u9002\u7528\u4e8e\u4f5c\u7528\u7c7b\u4f3c\u7684 response_model_by_alias \u3002 from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = { \"name\" , \"description\" }, ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = { \"tax\" }) async def read_item_public_data ( item_id : str ): return items [ item_id ] Tip {\"name\", \"description\"} \u8bed\u6cd5\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u8fd9\u4e24\u4e2a\u503c\u7684 set \u3002 \u7b49\u540c\u4e8e set([\"name\", \"description\"]) \u3002","title":"response_model_include \u548c response_model_exclude"},{"location":"tutorial/response-model/#list-set","text":"\u5982\u679c\u4f60\u5fd8\u8bb0\u4f7f\u7528 set \u800c\u662f\u4f7f\u7528 list \u6216 tuple \uff0cFastAPI \u4ecd\u4f1a\u5c06\u5176\u8f6c\u6362\u4e3a set \u5e76\u4e14\u6b63\u5e38\u5de5\u4f5c\uff1a from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = [ \"name\" , \"description\" ], ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = [ \"tax\" ]) async def read_item_public_data ( item_id : str ): return items [ item_id ]","title":"\u4f7f\u7528 list \u800c\u4e0d\u662f set"},{"location":"tutorial/response-model/#_8","text":"\u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684 response_model \u53c2\u6570\u6765\u5b9a\u4e49\u54cd\u5e94\u6a21\u578b\uff0c\u7279\u522b\u662f\u786e\u4fdd\u79c1\u6709\u6570\u636e\u88ab\u8fc7\u6ee4\u6389\u3002 \u4f7f\u7528 response_model_exclude_unset \u6765\u4ec5\u8fd4\u56de\u663e\u5f0f\u8bbe\u5b9a\u7684\u503c\u3002","title":"\u603b\u7ed3"},{"location":"tutorial/response-status-code/","text":"\u54cd\u5e94\u72b6\u6001\u7801 \u00b6 \u4e0e\u6307\u5b9a\u54cd\u5e94\u6a21\u578b\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u4ee5\u4e0b\u4efb\u610f\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528 status_code \u53c2\u6570\u6765\u58f0\u660e\u7528\u4e8e\u54cd\u5e94\u7684 HTTP \u72b6\u6001\u7801\uff1a @app.get() @app.post() @app.put() @app.delete() \u7b49\u7b49\u3002 from fastapi import FastAPI app = FastAPI () @app . post ( \"/items/\" , status_code = 201 ) async def create_item ( name : str ): return { \"name\" : name } Note \u6ce8\u610f\uff0c status_code \u662f\u300c\u88c5\u9970\u5668\u300d\u65b9\u6cd5\uff08 get \uff0c post \u7b49\uff09\u7684\u4e00\u4e2a\u53c2\u6570\u3002\u4e0d\u50cf\u4e4b\u524d\u7684\u6240\u6709\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\uff0c\u5b83\u4e0d\u5c5e\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002 status_code \u53c2\u6570\u63a5\u6536\u4e00\u4e2a\u8868\u793a HTTP \u72b6\u6001\u7801\u7684\u6570\u5b57\u3002 Info status_code \u4e5f\u80fd\u591f\u63a5\u6536\u4e00\u4e2a IntEnum \u7c7b\u578b\uff0c\u6bd4\u5982 Python \u7684 http.HTTPStatus \u3002 \u5b83\u5c06\u4f1a\uff1a \u5728\u54cd\u5e94\u4e2d\u8fd4\u56de\u8be5\u72b6\u6001\u7801\u3002 \u5728 OpenAPI \u6a21\u5f0f\u4e2d\uff08\u4ee5\u53ca\u5728\u7528\u6237\u754c\u9762\u4e2d\uff09\u5c06\u5176\u8bb0\u5f55\u4e3a\uff1a Note \u4e00\u4e9b\u54cd\u5e94\u72b6\u6001\u7801\uff08\u8bf7\u53c2\u9605\u4e0b\u4e00\u90e8\u5206\uff09\u8868\u793a\u54cd\u5e94\u6ca1\u6709\u54cd\u5e94\u4f53\u3002 FastAPI \u77e5\u9053\u8fd9\u4e00\u70b9\uff0c\u5e76\u5c06\u751f\u6210\u8868\u660e\u6ca1\u6709\u54cd\u5e94\u4f53\u7684 OpenAPI \u6587\u6863\u3002 \u5173\u4e8e HTTP \u72b6\u6001\u7801 \u00b6 Note \u5982\u679c\u4f60\u5df2\u7ecf\u4e86\u89e3\u4ec0\u4e48\u662f HTTP \u72b6\u6001\u7801\uff0c\u8bf7\u8df3\u5230\u4e0b\u4e00\u90e8\u5206\u3002 \u5728 HTTP \u534f\u8bae\u4e2d\uff0c\u4f60\u5c06\u53d1\u9001 3 \u4f4d\u6570\u7684\u6570\u5b57\u72b6\u6001\u7801\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e00\u90e8\u5206\u3002 \u8fd9\u4e9b\u72b6\u6001\u7801\u6709\u4e00\u4e2a\u8bc6\u522b\u5b83\u4eec\u7684\u5173\u8054\u540d\u79f0\uff0c\u4f46\u662f\u91cd\u8981\u7684\u8fd8\u662f\u6570\u5b57\u3002 \u7b80\u800c\u8a00\u4e4b\uff1a 100 \u53ca\u4ee5\u4e0a\u72b6\u6001\u7801\u7528\u4e8e\u300c\u6d88\u606f\u300d\u54cd\u5e94\u3002\u4f60\u5f88\u5c11\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\u3002\u5177\u6709\u8fd9\u4e9b\u72b6\u6001\u4ee3\u7801\u7684\u54cd\u5e94\u4e0d\u80fd\u5e26\u6709\u54cd\u5e94\u4f53\u3002 200 \u53ca\u4ee5\u4e0a\u72b6\u6001\u7801\u7528\u4e8e\u300c\u6210\u529f\u300d\u54cd\u5e94\u3002\u8fd9\u4e9b\u662f\u4f60\u6700\u5e38\u4f7f\u7528\u7684\u3002 200 \u662f\u9ed8\u8ba4\u72b6\u6001\u4ee3\u7801\uff0c\u5b83\u8868\u793a\u4e00\u5207\u300c\u6b63\u5e38\u300d\u3002 \u53e6\u4e00\u4e2a\u4f8b\u5b50\u4f1a\u662f 201 \uff0c\u300c\u5df2\u521b\u5efa\u300d\u3002\u5b83\u901a\u5e38\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e86\u4e00\u6761\u65b0\u8bb0\u5f55\u540e\u4f7f\u7528\u3002 \u4e00\u4e2a\u7279\u6b8a\u7684\u4f8b\u5b50\u662f 204 \uff0c\u300c\u65e0\u5185\u5bb9\u300d\u3002\u6b64\u54cd\u5e94\u5728\u6ca1\u6709\u5185\u5bb9\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u65f6\u4f7f\u7528\uff0c\u56e0\u6b64\u8be5\u54cd\u5e94\u4e0d\u80fd\u5305\u542b\u54cd\u5e94\u4f53\u3002 300 \u53ca\u4ee5\u4e0a\u72b6\u6001\u7801\u7528\u4e8e\u300c\u91cd\u5b9a\u5411\u300d\u3002\u5177\u6709\u8fd9\u4e9b\u72b6\u6001\u7801\u7684\u54cd\u5e94\u53ef\u80fd\u6709\u6216\u8005\u53ef\u80fd\u6ca1\u6709\u54cd\u5e94\u4f53\uff0c\u4f46 304 \u300c\u672a\u4fee\u6539\u300d\u662f\u4e2a\u4f8b\u5916\uff0c\u8be5\u54cd\u5e94\u4e0d\u5f97\u542b\u6709\u54cd\u5e94\u4f53\u3002 400 \u53ca\u4ee5\u4e0a\u72b6\u6001\u7801\u7528\u4e8e\u300c\u5ba2\u6237\u7aef\u9519\u8bef\u300d\u54cd\u5e94\u3002\u8fd9\u4e9b\u53ef\u80fd\u662f\u4f60\u7b2c\u4e8c\u5e38\u4f7f\u7528\u7684\u7c7b\u578b\u3002 \u4e00\u4e2a\u4f8b\u5b50\u662f 404 \uff0c\u7528\u4e8e\u300c\u672a\u627e\u5230\u300d\u54cd\u5e94\u3002 \u5bf9\u4e8e\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u4e00\u822c\u9519\u8bef\uff0c\u4f60\u53ef\u4ee5\u53ea\u4f7f\u7528 400 \u3002 500 \u53ca\u4ee5\u4e0a\u72b6\u6001\u7801\u7528\u4e8e\u670d\u52a1\u5668\u7aef\u9519\u8bef\u3002\u4f60\u51e0\u4e4e\u6c38\u8fdc\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\u3002\u5f53\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u6216\u670d\u52a1\u5668\u4e2d\u7684\u67d0\u4e9b\u90e8\u5206\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u5b83\u5c06\u81ea\u52a8\u8fd4\u56de\u8fd9\u4e9b\u72b6\u6001\u4ee3\u7801\u4e4b\u4e00\u3002 Tip \u8981\u4e86\u89e3\u6709\u5173\u6bcf\u4e2a\u72b6\u6001\u4ee3\u7801\u4ee5\u53ca\u9002\u7528\u573a\u666f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b MDN \u5173\u4e8e HTTP \u72b6\u6001\u7801\u7684\u6587\u6863 \u3002 \u8bb0\u4f4f\u540d\u79f0\u7684\u6377\u5f84 \u00b6 \u8ba9\u6211\u4eec\u518d\u6b21\u770b\u770b\u4e4b\u524d\u7684\u4f8b\u5b50\uff1a from fastapi import FastAPI app = FastAPI () @app . post ( \"/items/\" , status_code = 201 ) async def create_item ( name : str ): return { \"name\" : name } 201 \u662f\u8868\u793a\u300c\u5df2\u521b\u5efa\u300d\u7684\u72b6\u6001\u7801\u3002 \u4f46\u662f\u4f60\u4e0d\u5fc5\u53bb\u8bb0\u4f4f\u6bcf\u4e2a\u4ee3\u7801\u7684\u542b\u4e49\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u6765\u81ea fastapi.status \u7684\u4fbf\u6377\u53d8\u91cf\u3002 from fastapi import FastAPI , status app = FastAPI () @app . post ( \"/items/\" , status_code = status . HTTP_201_CREATED ) async def create_item ( name : str ): return { \"name\" : name } \u5b83\u4eec\u53ea\u662f\u4e00\u79cd\u4fbf\u6377\u65b9\u5f0f\uff0c\u5b83\u4eec\u5177\u6709\u540c\u6837\u7684\u6570\u5b57\u4ee3\u7801\uff0c\u4f46\u662f\u8fd9\u6837\u4f7f\u7528\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528\u7f16\u8f91\u5668\u7684\u81ea\u52a8\u8865\u5168\u529f\u80fd\u6765\u67e5\u627e\u5b83\u4eec\uff1a \u6280\u672f\u7ec6\u8282 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette import status \u3002 \u4e3a\u4e86\u7ed9\u4f60\uff08\u5373\u5f00\u53d1\u8005\uff09\u63d0\u4f9b\u65b9\u4fbf\uff0c FastAPI \u63d0\u4f9b\u4e86\u4e0e starlette.status \u5b8c\u5168\u76f8\u540c\u7684 fastapi.status \u3002\u4f46\u5b83\u76f4\u63a5\u6765\u81ea\u4e8e Starlette\u3002 \u66f4\u6539\u9ed8\u8ba4\u72b6\u6001\u7801 \u00b6 \u7a0d\u540e\uff0c\u5728 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u4e2d\u4f60\u5c06\u4e86\u89e3\u5982\u4f55\u8fd4\u56de\u4e0e\u5728\u6b64\u58f0\u660e\u7684\u9ed8\u8ba4\u72b6\u6001\u7801\u4e0d\u540c\u7684\u72b6\u6001\u7801\u3002","title":"\u54cd\u5e94\u72b6\u6001\u7801"},{"location":"tutorial/response-status-code/#_1","text":"\u4e0e\u6307\u5b9a\u54cd\u5e94\u6a21\u578b\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u4ee5\u4e0b\u4efb\u610f\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528 status_code \u53c2\u6570\u6765\u58f0\u660e\u7528\u4e8e\u54cd\u5e94\u7684 HTTP \u72b6\u6001\u7801\uff1a @app.get() @app.post() @app.put() @app.delete() \u7b49\u7b49\u3002 from fastapi import FastAPI app = FastAPI () @app . post ( \"/items/\" , status_code = 201 ) async def create_item ( name : str ): return { \"name\" : name } Note \u6ce8\u610f\uff0c status_code \u662f\u300c\u88c5\u9970\u5668\u300d\u65b9\u6cd5\uff08 get \uff0c post \u7b49\uff09\u7684\u4e00\u4e2a\u53c2\u6570\u3002\u4e0d\u50cf\u4e4b\u524d\u7684\u6240\u6709\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\uff0c\u5b83\u4e0d\u5c5e\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002 status_code \u53c2\u6570\u63a5\u6536\u4e00\u4e2a\u8868\u793a HTTP \u72b6\u6001\u7801\u7684\u6570\u5b57\u3002 Info status_code \u4e5f\u80fd\u591f\u63a5\u6536\u4e00\u4e2a IntEnum \u7c7b\u578b\uff0c\u6bd4\u5982 Python \u7684 http.HTTPStatus \u3002 \u5b83\u5c06\u4f1a\uff1a \u5728\u54cd\u5e94\u4e2d\u8fd4\u56de\u8be5\u72b6\u6001\u7801\u3002 \u5728 OpenAPI \u6a21\u5f0f\u4e2d\uff08\u4ee5\u53ca\u5728\u7528\u6237\u754c\u9762\u4e2d\uff09\u5c06\u5176\u8bb0\u5f55\u4e3a\uff1a Note \u4e00\u4e9b\u54cd\u5e94\u72b6\u6001\u7801\uff08\u8bf7\u53c2\u9605\u4e0b\u4e00\u90e8\u5206\uff09\u8868\u793a\u54cd\u5e94\u6ca1\u6709\u54cd\u5e94\u4f53\u3002 FastAPI \u77e5\u9053\u8fd9\u4e00\u70b9\uff0c\u5e76\u5c06\u751f\u6210\u8868\u660e\u6ca1\u6709\u54cd\u5e94\u4f53\u7684 OpenAPI \u6587\u6863\u3002","title":"\u54cd\u5e94\u72b6\u6001\u7801"},{"location":"tutorial/response-status-code/#http","text":"Note \u5982\u679c\u4f60\u5df2\u7ecf\u4e86\u89e3\u4ec0\u4e48\u662f HTTP \u72b6\u6001\u7801\uff0c\u8bf7\u8df3\u5230\u4e0b\u4e00\u90e8\u5206\u3002 \u5728 HTTP \u534f\u8bae\u4e2d\uff0c\u4f60\u5c06\u53d1\u9001 3 \u4f4d\u6570\u7684\u6570\u5b57\u72b6\u6001\u7801\u4f5c\u4e3a\u54cd\u5e94\u7684\u4e00\u90e8\u5206\u3002 \u8fd9\u4e9b\u72b6\u6001\u7801\u6709\u4e00\u4e2a\u8bc6\u522b\u5b83\u4eec\u7684\u5173\u8054\u540d\u79f0\uff0c\u4f46\u662f\u91cd\u8981\u7684\u8fd8\u662f\u6570\u5b57\u3002 \u7b80\u800c\u8a00\u4e4b\uff1a 100 \u53ca\u4ee5\u4e0a\u72b6\u6001\u7801\u7528\u4e8e\u300c\u6d88\u606f\u300d\u54cd\u5e94\u3002\u4f60\u5f88\u5c11\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\u3002\u5177\u6709\u8fd9\u4e9b\u72b6\u6001\u4ee3\u7801\u7684\u54cd\u5e94\u4e0d\u80fd\u5e26\u6709\u54cd\u5e94\u4f53\u3002 200 \u53ca\u4ee5\u4e0a\u72b6\u6001\u7801\u7528\u4e8e\u300c\u6210\u529f\u300d\u54cd\u5e94\u3002\u8fd9\u4e9b\u662f\u4f60\u6700\u5e38\u4f7f\u7528\u7684\u3002 200 \u662f\u9ed8\u8ba4\u72b6\u6001\u4ee3\u7801\uff0c\u5b83\u8868\u793a\u4e00\u5207\u300c\u6b63\u5e38\u300d\u3002 \u53e6\u4e00\u4e2a\u4f8b\u5b50\u4f1a\u662f 201 \uff0c\u300c\u5df2\u521b\u5efa\u300d\u3002\u5b83\u901a\u5e38\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e86\u4e00\u6761\u65b0\u8bb0\u5f55\u540e\u4f7f\u7528\u3002 \u4e00\u4e2a\u7279\u6b8a\u7684\u4f8b\u5b50\u662f 204 \uff0c\u300c\u65e0\u5185\u5bb9\u300d\u3002\u6b64\u54cd\u5e94\u5728\u6ca1\u6709\u5185\u5bb9\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u65f6\u4f7f\u7528\uff0c\u56e0\u6b64\u8be5\u54cd\u5e94\u4e0d\u80fd\u5305\u542b\u54cd\u5e94\u4f53\u3002 300 \u53ca\u4ee5\u4e0a\u72b6\u6001\u7801\u7528\u4e8e\u300c\u91cd\u5b9a\u5411\u300d\u3002\u5177\u6709\u8fd9\u4e9b\u72b6\u6001\u7801\u7684\u54cd\u5e94\u53ef\u80fd\u6709\u6216\u8005\u53ef\u80fd\u6ca1\u6709\u54cd\u5e94\u4f53\uff0c\u4f46 304 \u300c\u672a\u4fee\u6539\u300d\u662f\u4e2a\u4f8b\u5916\uff0c\u8be5\u54cd\u5e94\u4e0d\u5f97\u542b\u6709\u54cd\u5e94\u4f53\u3002 400 \u53ca\u4ee5\u4e0a\u72b6\u6001\u7801\u7528\u4e8e\u300c\u5ba2\u6237\u7aef\u9519\u8bef\u300d\u54cd\u5e94\u3002\u8fd9\u4e9b\u53ef\u80fd\u662f\u4f60\u7b2c\u4e8c\u5e38\u4f7f\u7528\u7684\u7c7b\u578b\u3002 \u4e00\u4e2a\u4f8b\u5b50\u662f 404 \uff0c\u7528\u4e8e\u300c\u672a\u627e\u5230\u300d\u54cd\u5e94\u3002 \u5bf9\u4e8e\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u4e00\u822c\u9519\u8bef\uff0c\u4f60\u53ef\u4ee5\u53ea\u4f7f\u7528 400 \u3002 500 \u53ca\u4ee5\u4e0a\u72b6\u6001\u7801\u7528\u4e8e\u670d\u52a1\u5668\u7aef\u9519\u8bef\u3002\u4f60\u51e0\u4e4e\u6c38\u8fdc\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\u3002\u5f53\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u6216\u670d\u52a1\u5668\u4e2d\u7684\u67d0\u4e9b\u90e8\u5206\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u5b83\u5c06\u81ea\u52a8\u8fd4\u56de\u8fd9\u4e9b\u72b6\u6001\u4ee3\u7801\u4e4b\u4e00\u3002 Tip \u8981\u4e86\u89e3\u6709\u5173\u6bcf\u4e2a\u72b6\u6001\u4ee3\u7801\u4ee5\u53ca\u9002\u7528\u573a\u666f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u67e5\u770b MDN \u5173\u4e8e HTTP \u72b6\u6001\u7801\u7684\u6587\u6863 \u3002","title":"\u5173\u4e8e HTTP \u72b6\u6001\u7801"},{"location":"tutorial/response-status-code/#_2","text":"\u8ba9\u6211\u4eec\u518d\u6b21\u770b\u770b\u4e4b\u524d\u7684\u4f8b\u5b50\uff1a from fastapi import FastAPI app = FastAPI () @app . post ( \"/items/\" , status_code = 201 ) async def create_item ( name : str ): return { \"name\" : name } 201 \u662f\u8868\u793a\u300c\u5df2\u521b\u5efa\u300d\u7684\u72b6\u6001\u7801\u3002 \u4f46\u662f\u4f60\u4e0d\u5fc5\u53bb\u8bb0\u4f4f\u6bcf\u4e2a\u4ee3\u7801\u7684\u542b\u4e49\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u6765\u81ea fastapi.status \u7684\u4fbf\u6377\u53d8\u91cf\u3002 from fastapi import FastAPI , status app = FastAPI () @app . post ( \"/items/\" , status_code = status . HTTP_201_CREATED ) async def create_item ( name : str ): return { \"name\" : name } \u5b83\u4eec\u53ea\u662f\u4e00\u79cd\u4fbf\u6377\u65b9\u5f0f\uff0c\u5b83\u4eec\u5177\u6709\u540c\u6837\u7684\u6570\u5b57\u4ee3\u7801\uff0c\u4f46\u662f\u8fd9\u6837\u4f7f\u7528\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528\u7f16\u8f91\u5668\u7684\u81ea\u52a8\u8865\u5168\u529f\u80fd\u6765\u67e5\u627e\u5b83\u4eec\uff1a \u6280\u672f\u7ec6\u8282 \u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette import status \u3002 \u4e3a\u4e86\u7ed9\u4f60\uff08\u5373\u5f00\u53d1\u8005\uff09\u63d0\u4f9b\u65b9\u4fbf\uff0c FastAPI \u63d0\u4f9b\u4e86\u4e0e starlette.status \u5b8c\u5168\u76f8\u540c\u7684 fastapi.status \u3002\u4f46\u5b83\u76f4\u63a5\u6765\u81ea\u4e8e Starlette\u3002","title":"\u8bb0\u4f4f\u540d\u79f0\u7684\u6377\u5f84"},{"location":"tutorial/response-status-code/#_3","text":"\u7a0d\u540e\uff0c\u5728 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u4e2d\u4f60\u5c06\u4e86\u89e3\u5982\u4f55\u8fd4\u56de\u4e0e\u5728\u6b64\u58f0\u660e\u7684\u9ed8\u8ba4\u72b6\u6001\u7801\u4e0d\u540c\u7684\u72b6\u6001\u7801\u3002","title":"\u66f4\u6539\u9ed8\u8ba4\u72b6\u6001\u7801"},{"location":"tutorial/schema-extra-example/","text":"\u6a21\u5f0f\u7684\u989d\u5916\u4fe1\u606f - \u4f8b\u5b50 \u00b6 \u60a8\u53ef\u4ee5\u5728JSON\u6a21\u5f0f\u4e2d\u5b9a\u4e49\u989d\u5916\u7684\u4fe1\u606f\u3002 \u4e00\u4e2a\u5e38\u89c1\u7684\u7528\u4f8b\u662f\u6dfb\u52a0\u4e00\u4e2a\u5c06\u5728\u6587\u6863\u4e2d\u663e\u793a\u7684 example \u3002 \u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u58f0\u660e\u989d\u5916\u7684 JSON \u6a21\u5f0f\u4fe1\u606f\u3002 Pydantic schema_extra \u00b6 \u60a8\u53ef\u4ee5\u4f7f\u7528 Config \u548c schema_extra \u4e3aPydantic\u6a21\u578b\u58f0\u660e\u4e00\u4e2a\u793a\u4f8b\uff0c\u5982 Pydantic \u6587\u6863\uff1a\u5b9a\u5236 Schema \u4e2d\u6240\u8ff0: from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class Config : schema_extra = { \"example\" : { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , } } @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8fd9\u4e9b\u989d\u5916\u7684\u4fe1\u606f\u5c06\u6309\u539f\u6837\u6dfb\u52a0\u5230\u8f93\u51fa\u7684JSON\u6a21\u5f0f\u4e2d\u3002 Field \u7684\u9644\u52a0\u53c2\u6570 \u00b6 \u5728 Field , Path , Query , Body \u548c\u5176\u4ed6\u4f60\u4e4b\u540e\u5c06\u4f1a\u770b\u5230\u7684\u5de5\u5382\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u4e3aJSON \u6a21\u5f0f\u58f0\u660e\u989d\u5916\u4fe1\u606f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7ed9\u5de5\u5382\u51fd\u6570\u4f20\u9012\u5176\u4ed6\u7684\u4efb\u610f\u53c2\u6570\u6765\u7ed9JSON \u6a21\u5f0f\u58f0\u660e\u989d\u5916\u4fe1\u606f\uff0c\u6bd4\u5982\u589e\u52a0 example : from typing import Union from fastapi import FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str = Field ( example = \"Foo\" ) description : Union [ str , None ] = Field ( default = None , example = \"A very nice Item\" ) price : float = Field ( example = 35.4 ) tax : Union [ float , None ] = Field ( default = None , example = 3.2 ) @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results Warning \u8bf7\u8bb0\u4f4f\uff0c\u4f20\u9012\u7684\u90a3\u4e9b\u989d\u5916\u53c2\u6570\u4e0d\u4f1a\u6dfb\u52a0\u4efb\u4f55\u9a8c\u8bc1\uff0c\u53ea\u4f1a\u6dfb\u52a0\u6ce8\u91ca\uff0c\u7528\u4e8e\u6587\u6863\u7684\u76ee\u7684\u3002 Body \u989d\u5916\u53c2\u6570 \u00b6 \u4f60\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u989d\u5916\u4fe1\u606f\u7ed9 Field \u540c\u6837\u7684\u65b9\u5f0f\u64cd\u4f5c Path , Query , Body \u7b49\u3002 \u6bd4\u5982\uff0c\u4f60\u53ef\u4ee5\u5c06\u8bf7\u6c42\u4f53\u7684\u4e00\u4e2a example \u4f20\u9012\u7ed9 Body : from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( example = { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , }, ), ): results = { \"item_id\" : item_id , \"item\" : item } return results \u6587\u6863 UI \u4e2d\u7684\u4f8b\u5b50 \u00b6 \u4f7f\u7528\u4e0a\u9762\u7684\u4efb\u4f55\u65b9\u6cd5\uff0c\u5b83\u5728 /docs \u4e2d\u770b\u8d77\u6765\u90fd\u662f\u8fd9\u6837\u7684: \u6280\u672f\u7ec6\u8282 \u00b6 \u5173\u4e8e example \u548c examples ... JSON Schema\u5728\u6700\u65b0\u7684\u4e00\u4e2a\u7248\u672c\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b57\u6bb5 examples \uff0c\u4f46\u662f OpenAPI \u57fa\u4e8e\u4e4b\u524d\u7684\u4e00\u4e2a\u65e7\u7248JSON Schema\uff0c\u5e76\u6ca1\u6709 examples . \u6240\u4ee5 OpenAPI\u4e3a\u4e86\u76f8\u4f3c\u7684\u76ee\u7684\u5b9a\u4e49\u4e86\u81ea\u5df1\u7684 example (\u4f7f\u7528 example , \u800c\u4e0d\u662f examples ), \u8fd9\u4e5f\u662f\u6587\u6863 UI \u6240\u4f7f\u7528\u7684 (\u4f7f\u7528 Swagger UI). \u6240\u4ee5\uff0c\u867d\u7136 example \u4e0d\u662fJSON Schema\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u5b83\u662fOpenAPI\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u5c06\u88ab\u6587\u6863UI\u4f7f\u7528\u3002 \u5176\u4ed6\u4fe1\u606f \u00b6 \u540c\u6837\u7684\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u6dfb\u52a0\u4f60\u81ea\u5df1\u7684\u989d\u5916\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5c06\u88ab\u6dfb\u52a0\u5230\u6bcf\u4e2a\u6a21\u578b\u7684JSON\u6a21\u5f0f\u4e2d\uff0c\u4f8b\u5982\u5b9a\u5236\u524d\u7aef\u7528\u6237\u754c\u9762\uff0c\u7b49\u7b49\u3002","title":"\u6a21\u5f0f\u7684\u989d\u5916\u4fe1\u606f - \u4f8b\u5b50"},{"location":"tutorial/schema-extra-example/#-","text":"\u60a8\u53ef\u4ee5\u5728JSON\u6a21\u5f0f\u4e2d\u5b9a\u4e49\u989d\u5916\u7684\u4fe1\u606f\u3002 \u4e00\u4e2a\u5e38\u89c1\u7684\u7528\u4f8b\u662f\u6dfb\u52a0\u4e00\u4e2a\u5c06\u5728\u6587\u6863\u4e2d\u663e\u793a\u7684 example \u3002 \u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u58f0\u660e\u989d\u5916\u7684 JSON \u6a21\u5f0f\u4fe1\u606f\u3002","title":"\u6a21\u5f0f\u7684\u989d\u5916\u4fe1\u606f - \u4f8b\u5b50"},{"location":"tutorial/schema-extra-example/#pydantic-schema_extra","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528 Config \u548c schema_extra \u4e3aPydantic\u6a21\u578b\u58f0\u660e\u4e00\u4e2a\u793a\u4f8b\uff0c\u5982 Pydantic \u6587\u6863\uff1a\u5b9a\u5236 Schema \u4e2d\u6240\u8ff0: from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class Config : schema_extra = { \"example\" : { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , } } @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8fd9\u4e9b\u989d\u5916\u7684\u4fe1\u606f\u5c06\u6309\u539f\u6837\u6dfb\u52a0\u5230\u8f93\u51fa\u7684JSON\u6a21\u5f0f\u4e2d\u3002","title":"Pydantic schema_extra"},{"location":"tutorial/schema-extra-example/#field","text":"\u5728 Field , Path , Query , Body \u548c\u5176\u4ed6\u4f60\u4e4b\u540e\u5c06\u4f1a\u770b\u5230\u7684\u5de5\u5382\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u4e3aJSON \u6a21\u5f0f\u58f0\u660e\u989d\u5916\u4fe1\u606f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u7ed9\u5de5\u5382\u51fd\u6570\u4f20\u9012\u5176\u4ed6\u7684\u4efb\u610f\u53c2\u6570\u6765\u7ed9JSON \u6a21\u5f0f\u58f0\u660e\u989d\u5916\u4fe1\u606f\uff0c\u6bd4\u5982\u589e\u52a0 example : from typing import Union from fastapi import FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str = Field ( example = \"Foo\" ) description : Union [ str , None ] = Field ( default = None , example = \"A very nice Item\" ) price : float = Field ( example = 35.4 ) tax : Union [ float , None ] = Field ( default = None , example = 3.2 ) @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results Warning \u8bf7\u8bb0\u4f4f\uff0c\u4f20\u9012\u7684\u90a3\u4e9b\u989d\u5916\u53c2\u6570\u4e0d\u4f1a\u6dfb\u52a0\u4efb\u4f55\u9a8c\u8bc1\uff0c\u53ea\u4f1a\u6dfb\u52a0\u6ce8\u91ca\uff0c\u7528\u4e8e\u6587\u6863\u7684\u76ee\u7684\u3002","title":"Field \u7684\u9644\u52a0\u53c2\u6570"},{"location":"tutorial/schema-extra-example/#body","text":"\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u989d\u5916\u4fe1\u606f\u7ed9 Field \u540c\u6837\u7684\u65b9\u5f0f\u64cd\u4f5c Path , Query , Body \u7b49\u3002 \u6bd4\u5982\uff0c\u4f60\u53ef\u4ee5\u5c06\u8bf7\u6c42\u4f53\u7684\u4e00\u4e2a example \u4f20\u9012\u7ed9 Body : from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( example = { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , }, ), ): results = { \"item_id\" : item_id , \"item\" : item } return results","title":"Body \u989d\u5916\u53c2\u6570"},{"location":"tutorial/schema-extra-example/#ui","text":"\u4f7f\u7528\u4e0a\u9762\u7684\u4efb\u4f55\u65b9\u6cd5\uff0c\u5b83\u5728 /docs \u4e2d\u770b\u8d77\u6765\u90fd\u662f\u8fd9\u6837\u7684:","title":"\u6587\u6863 UI \u4e2d\u7684\u4f8b\u5b50"},{"location":"tutorial/schema-extra-example/#_1","text":"\u5173\u4e8e example \u548c examples ... JSON Schema\u5728\u6700\u65b0\u7684\u4e00\u4e2a\u7248\u672c\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b57\u6bb5 examples \uff0c\u4f46\u662f OpenAPI \u57fa\u4e8e\u4e4b\u524d\u7684\u4e00\u4e2a\u65e7\u7248JSON Schema\uff0c\u5e76\u6ca1\u6709 examples . \u6240\u4ee5 OpenAPI\u4e3a\u4e86\u76f8\u4f3c\u7684\u76ee\u7684\u5b9a\u4e49\u4e86\u81ea\u5df1\u7684 example (\u4f7f\u7528 example , \u800c\u4e0d\u662f examples ), \u8fd9\u4e5f\u662f\u6587\u6863 UI \u6240\u4f7f\u7528\u7684 (\u4f7f\u7528 Swagger UI). \u6240\u4ee5\uff0c\u867d\u7136 example \u4e0d\u662fJSON Schema\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u5b83\u662fOpenAPI\u7684\u4e00\u90e8\u5206\uff0c\u8fd9\u5c06\u88ab\u6587\u6863UI\u4f7f\u7528\u3002","title":"\u6280\u672f\u7ec6\u8282"},{"location":"tutorial/schema-extra-example/#_2","text":"\u540c\u6837\u7684\u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u6dfb\u52a0\u4f60\u81ea\u5df1\u7684\u989d\u5916\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5c06\u88ab\u6dfb\u52a0\u5230\u6bcf\u4e2a\u6a21\u578b\u7684JSON\u6a21\u5f0f\u4e2d\uff0c\u4f8b\u5982\u5b9a\u5236\u524d\u7aef\u7528\u6237\u754c\u9762\uff0c\u7b49\u7b49\u3002","title":"\u5176\u4ed6\u4fe1\u606f"},{"location":"tutorial/sql-databases/","text":"SQL (Relational) Databases \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI doesn't require you to use a SQL (relational) database. But you can use any relational database that you want. Here we'll see an example using SQLAlchemy . You can easily adapt it to any database supported by SQLAlchemy, like: PostgreSQL MySQL SQLite Oracle Microsoft SQL Server, etc. In this example, we'll use SQLite , because it uses a single file and Python has integrated support. So, you can copy this example and run it as is. Later, for your production application, you might want to use a database server like PostgreSQL . Tip There is an official project generator with FastAPI and PostgreSQL , all based on Docker , including a frontend and more tools: https://github.com/tiangolo/full-stack-fastapi-postgresql Note Notice that most of the code is the standard SQLAlchemy code you would use with any framework. The FastAPI specific code is as small as always. ORMs \u00b6 FastAPI works with any database and any style of library to talk to the database. A common pattern is to use an \"ORM\": an \"object-relational mapping\" library. An ORM has tools to convert (\" map \") between objects in code and database tables (\" relations \"). With an ORM, you normally create a class that represents a table in a SQL database, each attribute of the class represents a column, with a name and a type. For example a class Pet could represent a SQL table pets . And each instance object of that class represents a row in the database. For example an object orion_cat (an instance of Pet ) could have an attribute orion_cat.type , for the column type . And the value of that attribute could be, e.g. \"cat\" . These ORMs also have tools to make the connections or relations between tables or entities. This way, you could also have an attribute orion_cat.owner and the owner would contain the data for this pet's owner, taken from the table owners . So, orion_cat.owner.name could be the name (from the name column in the owners table) of this pet's owner. It could have a value like \"Arquilian\" . And the ORM will do all the work to get the information from the corresponding table owners when you try to access it from your pet object. Common ORMs are for example: Django-ORM (part of the Django framework), SQLAlchemy ORM (part of SQLAlchemy, independent of framework) and Peewee (independent of framework), among others. Here we will see how to work with SQLAlchemy ORM . In a similar way you could use any other ORM. Tip There's an equivalent article using Peewee here in the docs. File structure \u00b6 For these examples, let's say you have a directory named my_super_project that contains a sub-directory called sql_app with a structure like this: . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 models.py \u2514\u2500\u2500 schemas.py The file __init__.py is just an empty file, but it tells Python that sql_app with all its modules (Python files) is a package. Now let's see what each file/module does. Create the SQLAlchemy parts \u00b6 Let's refer to the file sql_app/database.py . Import the SQLAlchemy parts \u00b6 from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () Create a database URL for SQLAlchemy \u00b6 from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () In this example, we are \"connecting\" to a SQLite database (opening a file with the SQLite database). The file will be located at the same directory in the file sql_app.db . That's why the last part is ./sql_app.db . If you were using a PostgreSQL database instead, you would just have to uncomment the line: SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" ...and adapt it with your database data and credentials (equivalently for MySQL, MariaDB or any other). Tip This is the main line that you would have to modify if you wanted to use a different database. Create the SQLAlchemy engine \u00b6 The first step is to create a SQLAlchemy \"engine\". We will later use this engine in other places. from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () Note \u00b6 The argument: connect_args = { \"check_same_thread\" : False } ...is needed only for SQLite . It's not needed for other databases. Technical Details By default SQLite will only allow one thread to communicate with it, assuming that each thread would handle an independent request. This is to prevent accidentally sharing the same connection for different things (for different requests). But in FastAPI, using normal functions ( def ) more than one thread could interact with the database for the same request, so we need to make SQLite know that it should allow that with connect_args={\"check_same_thread\": False} . Also, we will make sure each request gets its own database connection session in a dependency, so there's no need for that default mechanism. Create a SessionLocal class \u00b6 Each instance of the SessionLocal class will be a database session. The class itself is not a database session yet. But once we create an instance of the SessionLocal class, this instance will be the actual database session. We name it SessionLocal to distinguish it from the Session we are importing from SQLAlchemy. We will use Session (the one imported from SQLAlchemy) later. To create the SessionLocal class, use the function sessionmaker : from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () Create a Base class \u00b6 Now we will use the function declarative_base() that returns a class. Later we will inherit from this class to create each of the database models or classes (the ORM models): from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () Create the database models \u00b6 Let's now see the file sql_app/models.py . Create SQLAlchemy models from the Base class \u00b6 We will use this Base class we created before to create the SQLAlchemy models. Tip SQLAlchemy uses the term \" model \" to refer to these classes and instances that interact with the database. But Pydantic also uses the term \" model \" to refer to something different, the data validation, conversion, and documentation classes and instances. Import Base from database (the file database.py from above). Create classes that inherit from it. These classes are the SQLAlchemy models. from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) The __tablename__ attribute tells SQLAlchemy the name of the table to use in the database for each of these models. Create model attributes/columns \u00b6 Now create all the model (class) attributes. Each of these attributes represents a column in its corresponding database table. We use Column from SQLAlchemy as the default value. And we pass a SQLAlchemy class \"type\", as Integer , String , and Boolean , that defines the type in the database, as an argument. from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) Create the relationships \u00b6 Now create the relationships. For this, we use relationship provided by SQLAlchemy ORM. This will become, more or less, a \"magic\" attribute that will contain the values from other tables related to this one. from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) When accessing the attribute items in a User , as in my_user.items , it will have a list of Item SQLAlchemy models (from the items table) that have a foreign key pointing to this record in the users table. When you access my_user.items , SQLAlchemy will actually go and fetch the items from the database in the items table and populate them here. And when accessing the attribute owner in an Item , it will contain a User SQLAlchemy model from the users table. It will use the owner_id attribute/column with its foreign key to know which record to get from the users table. Create the Pydantic models \u00b6 Now let's check the file sql_app/schemas.py . Tip To avoid confusion between the SQLAlchemy models and the Pydantic models , we will have the file models.py with the SQLAlchemy models, and the file schemas.py with the Pydantic models. These Pydantic models define more or less a \"schema\" (a valid data shape). So this will help us avoiding confusion while using both. Create initial Pydantic models / schemas \u00b6 Create an ItemBase and UserBase Pydantic models (or let's say \"schemas\") to have common attributes while creating or reading data. And create an ItemCreate and UserCreate that inherit from them (so they will have the same attributes), plus any additional data (attributes) needed for creation. So, the user will also have a password when creating it. But for security, the password won't be in other Pydantic models , for example, it won't be sent from the API when reading a user. Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True SQLAlchemy style and Pydantic style \u00b6 Notice that SQLAlchemy models define attributes using = , and pass the type as a parameter to Column , like in: name = Column ( String ) while Pydantic models declare the types using : , the new type annotation syntax/type hints: name : str Have it in mind, so you don't get confused when using = and : with them. Create Pydantic models / schemas for reading / returning \u00b6 Now create Pydantic models (schemas) that will be used when reading data, when returning it from the API. For example, before creating an item, we don't know what will be the ID assigned to it, but when reading it (when returning it from the API) we will already know its ID. The same way, when reading a user, we can now declare that items will contain the items that belong to this user. Not only the IDs of those items, but all the data that we defined in the Pydantic model for reading items: Item . Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True Tip Notice that the User , the Pydantic model that will be used when reading a user (returning it from the API) doesn't include the password . Use Pydantic's orm_mode \u00b6 Now, in the Pydantic models for reading, Item and User , add an internal Config class. This Config class is used to provide configurations to Pydantic. In the Config class, set the attribute orm_mode = True . Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True Tip Notice it's assigning a value with = , like: orm_mode = True It doesn't use : as for the type declarations before. This is setting a config value, not declaring a type. Pydantic's orm_mode will tell the Pydantic model to read the data even if it is not a dict , but an ORM model (or any other arbitrary object with attributes). This way, instead of only trying to get the id value from a dict , as in: id = data [ \"id\" ] it will also try to get it from an attribute, as in: id = data . id And with this, the Pydantic model is compatible with ORMs, and you can just declare it in the response_model argument in your path operations . You will be able to return a database model and it will read the data from it. Technical Details about ORM mode \u00b6 SQLAlchemy and many others are by default \"lazy loading\". That means, for example, that they don't fetch the data for relationships from the database unless you try to access the attribute that would contain that data. For example, accessing the attribute items : current_user . items would make SQLAlchemy go to the items table and get the items for this user, but not before. Without orm_mode , if you returned a SQLAlchemy model from your path operation , it wouldn't include the relationship data. Even if you declared those relationships in your Pydantic models. But with ORM mode, as Pydantic itself will try to access the data it needs from attributes (instead of assuming a dict ), you can declare the specific data you want to return and it will be able to go and get it, even from ORMs. CRUD utils \u00b6 Now let's see the file sql_app/crud.py . In this file we will have reusable functions to interact with the data in the database. CRUD comes from: C reate, R ead, U pdate, and D elete. ...although in this example we are only creating and reading. Read data \u00b6 Import Session from sqlalchemy.orm , this will allow you to declare the type of the db parameters and have better type checks and completion in your functions. Import models (the SQLAlchemy models) and schemas (the Pydantic models / schemas). Create utility functions to: Read a single user by ID and by email. Read multiple users. Read multiple items. from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item Tip By creating functions that are only dedicated to interacting with the database (get a user or an item) independent of your path operation function , you can more easily reuse them in multiple parts and also add unit tests for them. Create data \u00b6 Now create utility functions to create data. The steps are: Create a SQLAlchemy model instance with your data. add that instance object to your database session. commit the changes to the database (so that they are saved). refresh your instance (so that it contains any new data from the database, like the generated ID). from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item Tip The SQLAlchemy model for User contains a hashed_password that should contain a secure hashed version of the password. But as what the API client provides is the original password, you need to extract it and generate the hashed password in your application. And then pass the hashed_password argument with the value to save. Warning This example is not secure, the password is not hashed. In a real life application you would need to hash the password and never save them in plaintext. For more details, go back to the Security section in the tutorial. Here we are focusing only on the tools and mechanics of databases. Tip Instead of passing each of the keyword arguments to Item and reading each one of them from the Pydantic model , we are generating a dict with the Pydantic model 's data with: item.dict() and then we are passing the dict 's key-value pairs as the keyword arguments to the SQLAlchemy Item , with: Item(**item.dict()) And then we pass the extra keyword argument owner_id that is not provided by the Pydantic model , with: Item(**item.dict(), owner_id=user_id) Main FastAPI app \u00b6 And now in the file sql_app/main.py let's integrate and use all the other parts we created before. Create the database tables \u00b6 In a very simplistic way create the database tables: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items Alembic Note \u00b6 Normally you would probably initialize your database (create tables, etc) with Alembic . And you would also use Alembic for \"migrations\" (that's its main job). A \"migration\" is the set of steps needed whenever you change the structure of your SQLAlchemy models, add a new attribute, etc. to replicate those changes in the database, add a new column, a new table, etc. You can find an example of Alembic in a FastAPI project in the templates from Project Generation - Template . Specifically in the alembic directory in the source code . Create a dependency \u00b6 Now use the SessionLocal class we created in the sql_app/database.py file to create a dependency. We need to have an independent database session/connection ( SessionLocal ) per request, use the same session through all the request and then close it after the request is finished. And then a new session will be created for the next request. For that, we will create a new dependency with yield , as explained before in the section about Dependencies with yield . Our dependency will create a new SQLAlchemy SessionLocal that will be used in a single request, and then close it once the request is finished. Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items Info We put the creation of the SessionLocal() and handling of the requests in a try block. And then we close it in the finally block. This way we make sure the database session is always closed after the request. Even if there was an exception while processing the request. But you can't raise another exception from the exit code (after yield ). See more in Dependencies with yield and HTTPException And then, when using the dependency in a path operation function , we declare it with the type Session we imported directly from SQLAlchemy. This will then give us better editor support inside the path operation function , because the editor will know that the db parameter is of type Session : Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items Technical Details The parameter db is actually of type SessionLocal , but this class (created with sessionmaker() ) is a \"proxy\" of a SQLAlchemy Session , so, the editor doesn't really know what methods are provided. But by declaring the type as Session , the editor now can know the available methods ( .add() , .query() , .commit() , etc) and can provide better support (like completion). The type declaration doesn't affect the actual object. Create your FastAPI path operations \u00b6 Now, finally, here's the standard FastAPI path operations code. Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items We are creating the database session before each request in the dependency with yield , and then closing it afterwards. And then we can create the required dependency in the path operation function , to get that session directly. With that, we can just call crud.get_user directly from inside of the path operation function and use that session. Tip Notice that the values you return are SQLAlchemy models, or lists of SQLAlchemy models. But as all the path operations have a response_model with Pydantic models / schemas using orm_mode , the data declared in your Pydantic models will be extracted from them and returned to the client, with all the normal filtering and validation. Tip Also notice that there are response_models that have standard Python types like List[schemas.Item] . But as the content/parameter of that List is a Pydantic model with orm_mode , the data will be retrieved and returned to the client as normally, without problems. About def vs async def \u00b6 Here we are using SQLAlchemy code inside of the path operation function and in the dependency, and, in turn, it will go and communicate with an external database. That could potentially require some \"waiting\". But as SQLAlchemy doesn't have compatibility for using await directly, as would be with something like: user = await db . query ( User ) . first () ...and instead we are using: user = db . query ( User ) . first () Then we should declare the path operation functions and the dependency without async def , just with a normal def , as: @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) ... Info If you need to connect to your relational database asynchronously, see Async SQL (Relational) Databases . Very Technical Details If you are curious and have a deep technical knowledge, you can check the very technical details of how this async def vs def is handled in the Async docs. Migrations \u00b6 Because we are using SQLAlchemy directly and we don't require any kind of plug-in for it to work with FastAPI , we could integrate database migrations with Alembic directly. And as the code related to SQLAlchemy and the SQLAlchemy models lives in separate independent files, you would even be able to perform the migrations with Alembic without having to install FastAPI, Pydantic, or anything else. The same way, you would be able to use the same SQLAlchemy models and utilities in other parts of your code that are not related to FastAPI . For example, in a background task worker with Celery , RQ , or ARQ . Review all the files \u00b6 Remember you should have a directory named my_super_project that contains a sub-directory called sql_app . sql_app should have the following files: sql_app/__init__.py : is an empty file. sql_app/database.py : from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () sql_app/models.py : from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) sql_app/schemas.py : Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True sql_app/crud.py : from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item sql_app/main.py : Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items Check it \u00b6 You can copy this code and use it as is. Info In fact, the code shown here is part of the tests. As most of the code in these docs. Then you can run it with Uvicorn: $ uvicorn sql_app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) And then, you can open your browser at http://127.0.0.1:8000/docs . And you will be able to interact with your FastAPI application, reading data from a real database: Interact with the database directly \u00b6 If you want to explore the SQLite database (file) directly, independently of FastAPI, to debug its contents, add tables, columns, records, modify data, etc. you can use DB Browser for SQLite . It will look like this: You can also use an online SQLite browser like SQLite Viewer or ExtendsClass . Alternative DB session with middleware \u00b6 If you can't use dependencies with yield -- for example, if you are not using Python 3.7 and can't install the \"backports\" mentioned above for Python 3.6 -- you can set up the session in a \"middleware\" in a similar way. A \"middleware\" is basically a function that is always executed for each request, with some code executed before, and some code executed after the endpoint function. Create a middleware \u00b6 The middleware we'll add (just a function) will create a new SQLAlchemy SessionLocal for each request, add it to the request and then close it once the request is finished. Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException , Request , Response from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () @app . middleware ( \"http\" ) async def db_session_middleware ( request : Request , call_next ): response = Response ( \"Internal server error\" , status_code = 500 ) try : request . state . db = SessionLocal () response = await call_next ( request ) finally : request . state . db . close () return response # Dependency def get_db ( request : Request ): return request . state . db @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException , Request , Response from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () @app . middleware ( \"http\" ) async def db_session_middleware ( request : Request , call_next ): response = Response ( \"Internal server error\" , status_code = 500 ) try : request . state . db = SessionLocal () response = await call_next ( request ) finally : request . state . db . close () return response # Dependency def get_db ( request : Request ): return request . state . db @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items Info We put the creation of the SessionLocal() and handling of the requests in a try block. And then we close it in the finally block. This way we make sure the database session is always closed after the request. Even if there was an exception while processing the request. About request.state \u00b6 request.state is a property of each Request object. It is there to store arbitrary objects attached to the request itself, like the database session in this case. You can read more about it in Starlette's docs about Request state . For us in this case, it helps us ensure a single database session is used through all the request, and then closed afterwards (in the middleware). Dependencies with yield or middleware \u00b6 Adding a middleware here is similar to what a dependency with yield does, with some differences: It requires more code and is a bit more complex. The middleware has to be an async function. If there is code in it that has to \"wait\" for the network, it could \"block\" your application there and degrade performance a bit. Although it's probably not very problematic here with the way SQLAlchemy works. But if you added more code to the middleware that had a lot of I/O waiting, it could then be problematic. A middleware is run for every request. So, a connection will be created for every request. Even when the path operation that handles that request didn't need the DB. Tip It's probably better to use dependencies with yield when they are enough for the use case. Info Dependencies with yield were added recently to FastAPI . A previous version of this tutorial only had the examples with a middleware and there are probably several applications using the middleware for database session management.","title":"SQL (Relational) Databases"},{"location":"tutorial/sql-databases/#sql-relational-databases","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI doesn't require you to use a SQL (relational) database. But you can use any relational database that you want. Here we'll see an example using SQLAlchemy . You can easily adapt it to any database supported by SQLAlchemy, like: PostgreSQL MySQL SQLite Oracle Microsoft SQL Server, etc. In this example, we'll use SQLite , because it uses a single file and Python has integrated support. So, you can copy this example and run it as is. Later, for your production application, you might want to use a database server like PostgreSQL . Tip There is an official project generator with FastAPI and PostgreSQL , all based on Docker , including a frontend and more tools: https://github.com/tiangolo/full-stack-fastapi-postgresql Note Notice that most of the code is the standard SQLAlchemy code you would use with any framework. The FastAPI specific code is as small as always.","title":"SQL (Relational) Databases"},{"location":"tutorial/sql-databases/#orms","text":"FastAPI works with any database and any style of library to talk to the database. A common pattern is to use an \"ORM\": an \"object-relational mapping\" library. An ORM has tools to convert (\" map \") between objects in code and database tables (\" relations \"). With an ORM, you normally create a class that represents a table in a SQL database, each attribute of the class represents a column, with a name and a type. For example a class Pet could represent a SQL table pets . And each instance object of that class represents a row in the database. For example an object orion_cat (an instance of Pet ) could have an attribute orion_cat.type , for the column type . And the value of that attribute could be, e.g. \"cat\" . These ORMs also have tools to make the connections or relations between tables or entities. This way, you could also have an attribute orion_cat.owner and the owner would contain the data for this pet's owner, taken from the table owners . So, orion_cat.owner.name could be the name (from the name column in the owners table) of this pet's owner. It could have a value like \"Arquilian\" . And the ORM will do all the work to get the information from the corresponding table owners when you try to access it from your pet object. Common ORMs are for example: Django-ORM (part of the Django framework), SQLAlchemy ORM (part of SQLAlchemy, independent of framework) and Peewee (independent of framework), among others. Here we will see how to work with SQLAlchemy ORM . In a similar way you could use any other ORM. Tip There's an equivalent article using Peewee here in the docs.","title":"ORMs"},{"location":"tutorial/sql-databases/#file-structure","text":"For these examples, let's say you have a directory named my_super_project that contains a sub-directory called sql_app with a structure like this: . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 models.py \u2514\u2500\u2500 schemas.py The file __init__.py is just an empty file, but it tells Python that sql_app with all its modules (Python files) is a package. Now let's see what each file/module does.","title":"File structure"},{"location":"tutorial/sql-databases/#create-the-sqlalchemy-parts","text":"Let's refer to the file sql_app/database.py .","title":"Create the SQLAlchemy parts"},{"location":"tutorial/sql-databases/#import-the-sqlalchemy-parts","text":"from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base ()","title":"Import the SQLAlchemy parts"},{"location":"tutorial/sql-databases/#create-a-database-url-for-sqlalchemy","text":"from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () In this example, we are \"connecting\" to a SQLite database (opening a file with the SQLite database). The file will be located at the same directory in the file sql_app.db . That's why the last part is ./sql_app.db . If you were using a PostgreSQL database instead, you would just have to uncomment the line: SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" ...and adapt it with your database data and credentials (equivalently for MySQL, MariaDB or any other). Tip This is the main line that you would have to modify if you wanted to use a different database.","title":"Create a database URL for SQLAlchemy"},{"location":"tutorial/sql-databases/#create-the-sqlalchemy-engine","text":"The first step is to create a SQLAlchemy \"engine\". We will later use this engine in other places. from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base ()","title":"Create the SQLAlchemy engine"},{"location":"tutorial/sql-databases/#note","text":"The argument: connect_args = { \"check_same_thread\" : False } ...is needed only for SQLite . It's not needed for other databases. Technical Details By default SQLite will only allow one thread to communicate with it, assuming that each thread would handle an independent request. This is to prevent accidentally sharing the same connection for different things (for different requests). But in FastAPI, using normal functions ( def ) more than one thread could interact with the database for the same request, so we need to make SQLite know that it should allow that with connect_args={\"check_same_thread\": False} . Also, we will make sure each request gets its own database connection session in a dependency, so there's no need for that default mechanism.","title":"Note"},{"location":"tutorial/sql-databases/#create-a-sessionlocal-class","text":"Each instance of the SessionLocal class will be a database session. The class itself is not a database session yet. But once we create an instance of the SessionLocal class, this instance will be the actual database session. We name it SessionLocal to distinguish it from the Session we are importing from SQLAlchemy. We will use Session (the one imported from SQLAlchemy) later. To create the SessionLocal class, use the function sessionmaker : from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base ()","title":"Create a SessionLocal class"},{"location":"tutorial/sql-databases/#create-a-base-class","text":"Now we will use the function declarative_base() that returns a class. Later we will inherit from this class to create each of the database models or classes (the ORM models): from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base ()","title":"Create a Base class"},{"location":"tutorial/sql-databases/#create-the-database-models","text":"Let's now see the file sql_app/models.py .","title":"Create the database models"},{"location":"tutorial/sql-databases/#create-sqlalchemy-models-from-the-base-class","text":"We will use this Base class we created before to create the SQLAlchemy models. Tip SQLAlchemy uses the term \" model \" to refer to these classes and instances that interact with the database. But Pydantic also uses the term \" model \" to refer to something different, the data validation, conversion, and documentation classes and instances. Import Base from database (the file database.py from above). Create classes that inherit from it. These classes are the SQLAlchemy models. from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) The __tablename__ attribute tells SQLAlchemy the name of the table to use in the database for each of these models.","title":"Create SQLAlchemy models from the Base class"},{"location":"tutorial/sql-databases/#create-model-attributescolumns","text":"Now create all the model (class) attributes. Each of these attributes represents a column in its corresponding database table. We use Column from SQLAlchemy as the default value. And we pass a SQLAlchemy class \"type\", as Integer , String , and Boolean , that defines the type in the database, as an argument. from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" )","title":"Create model attributes/columns"},{"location":"tutorial/sql-databases/#create-the-relationships","text":"Now create the relationships. For this, we use relationship provided by SQLAlchemy ORM. This will become, more or less, a \"magic\" attribute that will contain the values from other tables related to this one. from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) When accessing the attribute items in a User , as in my_user.items , it will have a list of Item SQLAlchemy models (from the items table) that have a foreign key pointing to this record in the users table. When you access my_user.items , SQLAlchemy will actually go and fetch the items from the database in the items table and populate them here. And when accessing the attribute owner in an Item , it will contain a User SQLAlchemy model from the users table. It will use the owner_id attribute/column with its foreign key to know which record to get from the users table.","title":"Create the relationships"},{"location":"tutorial/sql-databases/#create-the-pydantic-models","text":"Now let's check the file sql_app/schemas.py . Tip To avoid confusion between the SQLAlchemy models and the Pydantic models , we will have the file models.py with the SQLAlchemy models, and the file schemas.py with the Pydantic models. These Pydantic models define more or less a \"schema\" (a valid data shape). So this will help us avoiding confusion while using both.","title":"Create the Pydantic models"},{"location":"tutorial/sql-databases/#create-initial-pydantic-models-schemas","text":"Create an ItemBase and UserBase Pydantic models (or let's say \"schemas\") to have common attributes while creating or reading data. And create an ItemCreate and UserCreate that inherit from them (so they will have the same attributes), plus any additional data (attributes) needed for creation. So, the user will also have a password when creating it. But for security, the password won't be in other Pydantic models , for example, it won't be sent from the API when reading a user. Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True","title":"Create initial Pydantic models / schemas"},{"location":"tutorial/sql-databases/#sqlalchemy-style-and-pydantic-style","text":"Notice that SQLAlchemy models define attributes using = , and pass the type as a parameter to Column , like in: name = Column ( String ) while Pydantic models declare the types using : , the new type annotation syntax/type hints: name : str Have it in mind, so you don't get confused when using = and : with them.","title":"SQLAlchemy style and Pydantic style"},{"location":"tutorial/sql-databases/#create-pydantic-models-schemas-for-reading-returning","text":"Now create Pydantic models (schemas) that will be used when reading data, when returning it from the API. For example, before creating an item, we don't know what will be the ID assigned to it, but when reading it (when returning it from the API) we will already know its ID. The same way, when reading a user, we can now declare that items will contain the items that belong to this user. Not only the IDs of those items, but all the data that we defined in the Pydantic model for reading items: Item . Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True Tip Notice that the User , the Pydantic model that will be used when reading a user (returning it from the API) doesn't include the password .","title":"Create Pydantic models / schemas for reading / returning"},{"location":"tutorial/sql-databases/#use-pydantics-orm_mode","text":"Now, in the Pydantic models for reading, Item and User , add an internal Config class. This Config class is used to provide configurations to Pydantic. In the Config class, set the attribute orm_mode = True . Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True Tip Notice it's assigning a value with = , like: orm_mode = True It doesn't use : as for the type declarations before. This is setting a config value, not declaring a type. Pydantic's orm_mode will tell the Pydantic model to read the data even if it is not a dict , but an ORM model (or any other arbitrary object with attributes). This way, instead of only trying to get the id value from a dict , as in: id = data [ \"id\" ] it will also try to get it from an attribute, as in: id = data . id And with this, the Pydantic model is compatible with ORMs, and you can just declare it in the response_model argument in your path operations . You will be able to return a database model and it will read the data from it.","title":"Use Pydantic's orm_mode"},{"location":"tutorial/sql-databases/#technical-details-about-orm-mode","text":"SQLAlchemy and many others are by default \"lazy loading\". That means, for example, that they don't fetch the data for relationships from the database unless you try to access the attribute that would contain that data. For example, accessing the attribute items : current_user . items would make SQLAlchemy go to the items table and get the items for this user, but not before. Without orm_mode , if you returned a SQLAlchemy model from your path operation , it wouldn't include the relationship data. Even if you declared those relationships in your Pydantic models. But with ORM mode, as Pydantic itself will try to access the data it needs from attributes (instead of assuming a dict ), you can declare the specific data you want to return and it will be able to go and get it, even from ORMs.","title":"Technical Details about ORM mode"},{"location":"tutorial/sql-databases/#crud-utils","text":"Now let's see the file sql_app/crud.py . In this file we will have reusable functions to interact with the data in the database. CRUD comes from: C reate, R ead, U pdate, and D elete. ...although in this example we are only creating and reading.","title":"CRUD utils"},{"location":"tutorial/sql-databases/#read-data","text":"Import Session from sqlalchemy.orm , this will allow you to declare the type of the db parameters and have better type checks and completion in your functions. Import models (the SQLAlchemy models) and schemas (the Pydantic models / schemas). Create utility functions to: Read a single user by ID and by email. Read multiple users. Read multiple items. from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item Tip By creating functions that are only dedicated to interacting with the database (get a user or an item) independent of your path operation function , you can more easily reuse them in multiple parts and also add unit tests for them.","title":"Read data"},{"location":"tutorial/sql-databases/#create-data","text":"Now create utility functions to create data. The steps are: Create a SQLAlchemy model instance with your data. add that instance object to your database session. commit the changes to the database (so that they are saved). refresh your instance (so that it contains any new data from the database, like the generated ID). from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item Tip The SQLAlchemy model for User contains a hashed_password that should contain a secure hashed version of the password. But as what the API client provides is the original password, you need to extract it and generate the hashed password in your application. And then pass the hashed_password argument with the value to save. Warning This example is not secure, the password is not hashed. In a real life application you would need to hash the password and never save them in plaintext. For more details, go back to the Security section in the tutorial. Here we are focusing only on the tools and mechanics of databases. Tip Instead of passing each of the keyword arguments to Item and reading each one of them from the Pydantic model , we are generating a dict with the Pydantic model 's data with: item.dict() and then we are passing the dict 's key-value pairs as the keyword arguments to the SQLAlchemy Item , with: Item(**item.dict()) And then we pass the extra keyword argument owner_id that is not provided by the Pydantic model , with: Item(**item.dict(), owner_id=user_id)","title":"Create data"},{"location":"tutorial/sql-databases/#main-fastapi-app","text":"And now in the file sql_app/main.py let's integrate and use all the other parts we created before.","title":"Main FastAPI app"},{"location":"tutorial/sql-databases/#create-the-database-tables","text":"In a very simplistic way create the database tables: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items","title":"Create the database tables"},{"location":"tutorial/sql-databases/#alembic-note","text":"Normally you would probably initialize your database (create tables, etc) with Alembic . And you would also use Alembic for \"migrations\" (that's its main job). A \"migration\" is the set of steps needed whenever you change the structure of your SQLAlchemy models, add a new attribute, etc. to replicate those changes in the database, add a new column, a new table, etc. You can find an example of Alembic in a FastAPI project in the templates from Project Generation - Template . Specifically in the alembic directory in the source code .","title":"Alembic Note"},{"location":"tutorial/sql-databases/#create-a-dependency","text":"Now use the SessionLocal class we created in the sql_app/database.py file to create a dependency. We need to have an independent database session/connection ( SessionLocal ) per request, use the same session through all the request and then close it after the request is finished. And then a new session will be created for the next request. For that, we will create a new dependency with yield , as explained before in the section about Dependencies with yield . Our dependency will create a new SQLAlchemy SessionLocal that will be used in a single request, and then close it once the request is finished. Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items Info We put the creation of the SessionLocal() and handling of the requests in a try block. And then we close it in the finally block. This way we make sure the database session is always closed after the request. Even if there was an exception while processing the request. But you can't raise another exception from the exit code (after yield ). See more in Dependencies with yield and HTTPException And then, when using the dependency in a path operation function , we declare it with the type Session we imported directly from SQLAlchemy. This will then give us better editor support inside the path operation function , because the editor will know that the db parameter is of type Session : Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items Technical Details The parameter db is actually of type SessionLocal , but this class (created with sessionmaker() ) is a \"proxy\" of a SQLAlchemy Session , so, the editor doesn't really know what methods are provided. But by declaring the type as Session , the editor now can know the available methods ( .add() , .query() , .commit() , etc) and can provide better support (like completion). The type declaration doesn't affect the actual object.","title":"Create a dependency"},{"location":"tutorial/sql-databases/#create-your-fastapi-path-operations","text":"Now, finally, here's the standard FastAPI path operations code. Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items We are creating the database session before each request in the dependency with yield , and then closing it afterwards. And then we can create the required dependency in the path operation function , to get that session directly. With that, we can just call crud.get_user directly from inside of the path operation function and use that session. Tip Notice that the values you return are SQLAlchemy models, or lists of SQLAlchemy models. But as all the path operations have a response_model with Pydantic models / schemas using orm_mode , the data declared in your Pydantic models will be extracted from them and returned to the client, with all the normal filtering and validation. Tip Also notice that there are response_models that have standard Python types like List[schemas.Item] . But as the content/parameter of that List is a Pydantic model with orm_mode , the data will be retrieved and returned to the client as normally, without problems.","title":"Create your FastAPI path operations"},{"location":"tutorial/sql-databases/#about-def-vs-async-def","text":"Here we are using SQLAlchemy code inside of the path operation function and in the dependency, and, in turn, it will go and communicate with an external database. That could potentially require some \"waiting\". But as SQLAlchemy doesn't have compatibility for using await directly, as would be with something like: user = await db . query ( User ) . first () ...and instead we are using: user = db . query ( User ) . first () Then we should declare the path operation functions and the dependency without async def , just with a normal def , as: @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) ... Info If you need to connect to your relational database asynchronously, see Async SQL (Relational) Databases . Very Technical Details If you are curious and have a deep technical knowledge, you can check the very technical details of how this async def vs def is handled in the Async docs.","title":"About def vs async def"},{"location":"tutorial/sql-databases/#migrations","text":"Because we are using SQLAlchemy directly and we don't require any kind of plug-in for it to work with FastAPI , we could integrate database migrations with Alembic directly. And as the code related to SQLAlchemy and the SQLAlchemy models lives in separate independent files, you would even be able to perform the migrations with Alembic without having to install FastAPI, Pydantic, or anything else. The same way, you would be able to use the same SQLAlchemy models and utilities in other parts of your code that are not related to FastAPI . For example, in a background task worker with Celery , RQ , or ARQ .","title":"Migrations"},{"location":"tutorial/sql-databases/#review-all-the-files","text":"Remember you should have a directory named my_super_project that contains a sub-directory called sql_app . sql_app should have the following files: sql_app/__init__.py : is an empty file. sql_app/database.py : from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () sql_app/models.py : from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) sql_app/schemas.py : Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True sql_app/crud.py : from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item sql_app/main.py : Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items","title":"Review all the files"},{"location":"tutorial/sql-databases/#check-it","text":"You can copy this code and use it as is. Info In fact, the code shown here is part of the tests. As most of the code in these docs. Then you can run it with Uvicorn: $ uvicorn sql_app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) And then, you can open your browser at http://127.0.0.1:8000/docs . And you will be able to interact with your FastAPI application, reading data from a real database:","title":"Check it"},{"location":"tutorial/sql-databases/#interact-with-the-database-directly","text":"If you want to explore the SQLite database (file) directly, independently of FastAPI, to debug its contents, add tables, columns, records, modify data, etc. you can use DB Browser for SQLite . It will look like this: You can also use an online SQLite browser like SQLite Viewer or ExtendsClass .","title":"Interact with the database directly"},{"location":"tutorial/sql-databases/#alternative-db-session-with-middleware","text":"If you can't use dependencies with yield -- for example, if you are not using Python 3.7 and can't install the \"backports\" mentioned above for Python 3.6 -- you can set up the session in a \"middleware\" in a similar way. A \"middleware\" is basically a function that is always executed for each request, with some code executed before, and some code executed after the endpoint function.","title":"Alternative DB session with middleware"},{"location":"tutorial/sql-databases/#create-a-middleware","text":"The middleware we'll add (just a function) will create a new SQLAlchemy SessionLocal for each request, add it to the request and then close it once the request is finished. Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException , Request , Response from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () @app . middleware ( \"http\" ) async def db_session_middleware ( request : Request , call_next ): response = Response ( \"Internal server error\" , status_code = 500 ) try : request . state . db = SessionLocal () response = await call_next ( request ) finally : request . state . db . close () return response # Dependency def get_db ( request : Request ): return request . state . db @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException , Request , Response from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () @app . middleware ( \"http\" ) async def db_session_middleware ( request : Request , call_next ): response = Response ( \"Internal server error\" , status_code = 500 ) try : request . state . db = SessionLocal () response = await call_next ( request ) finally : request . state . db . close () return response # Dependency def get_db ( request : Request ): return request . state . db @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items Info We put the creation of the SessionLocal() and handling of the requests in a try block. And then we close it in the finally block. This way we make sure the database session is always closed after the request. Even if there was an exception while processing the request.","title":"Create a middleware"},{"location":"tutorial/sql-databases/#about-requeststate","text":"request.state is a property of each Request object. It is there to store arbitrary objects attached to the request itself, like the database session in this case. You can read more about it in Starlette's docs about Request state . For us in this case, it helps us ensure a single database session is used through all the request, and then closed afterwards (in the middleware).","title":"About request.state"},{"location":"tutorial/sql-databases/#dependencies-with-yield-or-middleware","text":"Adding a middleware here is similar to what a dependency with yield does, with some differences: It requires more code and is a bit more complex. The middleware has to be an async function. If there is code in it that has to \"wait\" for the network, it could \"block\" your application there and degrade performance a bit. Although it's probably not very problematic here with the way SQLAlchemy works. But if you added more code to the middleware that had a lot of I/O waiting, it could then be problematic. A middleware is run for every request. So, a connection will be created for every request. Even when the path operation that handles that request didn't need the DB. Tip It's probably better to use dependencies with yield when they are enough for the use case. Info Dependencies with yield were added recently to FastAPI . A previous version of this tutorial only had the examples with a middleware and there are probably several applications using the middleware for database session management.","title":"Dependencies with yield or middleware"},{"location":"tutorial/static-files/","text":"Static Files \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can serve static files automatically from a directory using StaticFiles . Use StaticFiles \u00b6 Import StaticFiles . \"Mount\" a StaticFiles() instance in a specific path. from fastapi import FastAPI from fastapi.staticfiles import StaticFiles app = FastAPI () app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) Technical Details You could also use from starlette.staticfiles import StaticFiles . FastAPI provides the same starlette.staticfiles as fastapi.staticfiles just as a convenience for you, the developer. But it actually comes directly from Starlette. What is \"Mounting\" \u00b6 \"Mounting\" means adding a complete \"independent\" application in a specific path, that then takes care of handling all the sub-paths. This is different from using an APIRouter as a mounted application is completely independent. The OpenAPI and docs from your main application won't include anything from the mounted application, etc. You can read more about this in the Advanced User Guide . Details \u00b6 The first \"/static\" refers to the sub-path this \"sub-application\" will be \"mounted\" on. So, any path that starts with \"/static\" will be handled by it. The directory=\"static\" refers to the name of the directory that contains your static files. The name=\"static\" gives it a name that can be used internally by FastAPI . All these parameters can be different than \" static \", adjust them with the needs and specific details of your own application. More info \u00b6 For more details and options check Starlette's docs about Static Files .","title":"Static Files"},{"location":"tutorial/static-files/#static-files","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . You can serve static files automatically from a directory using StaticFiles .","title":"Static Files"},{"location":"tutorial/static-files/#use-staticfiles","text":"Import StaticFiles . \"Mount\" a StaticFiles() instance in a specific path. from fastapi import FastAPI from fastapi.staticfiles import StaticFiles app = FastAPI () app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) Technical Details You could also use from starlette.staticfiles import StaticFiles . FastAPI provides the same starlette.staticfiles as fastapi.staticfiles just as a convenience for you, the developer. But it actually comes directly from Starlette.","title":"Use StaticFiles"},{"location":"tutorial/static-files/#what-is-mounting","text":"\"Mounting\" means adding a complete \"independent\" application in a specific path, that then takes care of handling all the sub-paths. This is different from using an APIRouter as a mounted application is completely independent. The OpenAPI and docs from your main application won't include anything from the mounted application, etc. You can read more about this in the Advanced User Guide .","title":"What is \"Mounting\""},{"location":"tutorial/static-files/#details","text":"The first \"/static\" refers to the sub-path this \"sub-application\" will be \"mounted\" on. So, any path that starts with \"/static\" will be handled by it. The directory=\"static\" refers to the name of the directory that contains your static files. The name=\"static\" gives it a name that can be used internally by FastAPI . All these parameters can be different than \" static \", adjust them with the needs and specific details of your own application.","title":"Details"},{"location":"tutorial/static-files/#more-info","text":"For more details and options check Starlette's docs about Static Files .","title":"More info"},{"location":"tutorial/testing/","text":"Testing \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Thanks to Starlette , testing FastAPI applications is easy and enjoyable. It is based on Requests , so it's very familiar and intuitive. With it, you can use pytest directly with FastAPI . Using TestClient \u00b6 Import TestClient . Create a TestClient by passing your FastAPI application to it. Create functions with a name that starts with test_ (this is standard pytest conventions). Use the TestClient object the same way as you do with requests . Write simple assert statements with the standard Python expressions that you need to check (again, standard pytest ). from fastapi import FastAPI from fastapi.testclient import TestClient app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } client = TestClient ( app ) def test_read_main (): response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } Tip Notice that the testing functions are normal def , not async def . And the calls to the client are also normal calls, not using await . This allows you to use pytest directly without complications. Technical Details You could also use from starlette.testclient import TestClient . FastAPI provides the same starlette.testclient as fastapi.testclient just as a convenience for you, the developer. But it comes directly from Starlette. Tip If you want to call async functions in your tests apart from sending requests to your FastAPI application (e.g. asynchronous database functions), have a look at the Async Tests in the advanced tutorial. Separating tests \u00b6 In a real application, you probably would have your tests in a different file. And your FastAPI application might also be composed of several files/modules, etc. FastAPI app file \u00b6 Let's say you have a file main.py with your FastAPI app: from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } Testing file \u00b6 Then you could have a file test_main.py with your tests, and import your app from the main module ( main.py ): from fastapi.testclient import TestClient from .main import app client = TestClient ( app ) def test_read_main (): response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } Testing: extended example \u00b6 Now let's extend this example and add more details to see how to test different parts. Extended FastAPI app file \u00b6 Let's say that now the file main.py with your FastAPI app has some other path operations . It has a GET operation that could return an error. It has a POST operation that could return several errors. Both path operations require an X-Token header. Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Header , HTTPException from pydantic import BaseModel fake_secret_token = \"coneofsilence\" fake_db = { \"foo\" : { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" }, \"bar\" : { \"id\" : \"bar\" , \"title\" : \"Bar\" , \"description\" : \"The bartenders\" }, } app = FastAPI () class Item ( BaseModel ): id : str title : str description : Union [ str , None ] = None @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_main ( item_id : str , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item_id not in fake_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return fake_db [ item_id ] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item . id in fake_db : raise HTTPException ( status_code = 400 , detail = \"Item already exists\" ) fake_db [ item . id ] = item return item from fastapi import FastAPI , Header , HTTPException from pydantic import BaseModel fake_secret_token = \"coneofsilence\" fake_db = { \"foo\" : { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" }, \"bar\" : { \"id\" : \"bar\" , \"title\" : \"Bar\" , \"description\" : \"The bartenders\" }, } app = FastAPI () class Item ( BaseModel ): id : str title : str description : str | None = None @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_main ( item_id : str , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item_id not in fake_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return fake_db [ item_id ] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item . id in fake_db : raise HTTPException ( status_code = 400 , detail = \"Item already exists\" ) fake_db [ item . id ] = item return item Extended testing file \u00b6 You could then update test_main.py with the extended tests: from fastapi.testclient import TestClient from .main import app client = TestClient ( app ) def test_read_item (): response = client . get ( \"/items/foo\" , headers = { \"X-Token\" : \"coneofsilence\" }) assert response . status_code == 200 assert response . json () == { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" , } def test_read_item_bad_token (): response = client . get ( \"/items/foo\" , headers = { \"X-Token\" : \"hailhydra\" }) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Invalid X-Token header\" } def test_read_inexistent_item (): response = client . get ( \"/items/baz\" , headers = { \"X-Token\" : \"coneofsilence\" }) assert response . status_code == 404 assert response . json () == { \"detail\" : \"Item not found\" } def test_create_item (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"coneofsilence\" }, json = { \"id\" : \"foobar\" , \"title\" : \"Foo Bar\" , \"description\" : \"The Foo Barters\" }, ) assert response . status_code == 200 assert response . json () == { \"id\" : \"foobar\" , \"title\" : \"Foo Bar\" , \"description\" : \"The Foo Barters\" , } def test_create_item_bad_token (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"hailhydra\" }, json = { \"id\" : \"bazz\" , \"title\" : \"Bazz\" , \"description\" : \"Drop the bazz\" }, ) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Invalid X-Token header\" } def test_create_existing_item (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"coneofsilence\" }, json = { \"id\" : \"foo\" , \"title\" : \"The Foo ID Stealers\" , \"description\" : \"There goes my stealer\" , }, ) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Item already exists\" } Whenever you need the client to pass information in the request and you don't know how to, you can search (Google) how to do it in requests . Then you just do the same in your tests. E.g.: To pass a path or query parameter, add it to the URL itself. To pass a JSON body, pass a Python object (e.g. a dict ) to the parameter json . If you need to send Form Data instead of JSON, use the data parameter instead. To pass headers , use a dict in the headers parameter. For cookies , a dict in the cookies parameter. For more information about how to pass data to the backend (using requests or the TestClient ) check the Requests documentation . Info Note that the TestClient receives data that can be converted to JSON, not Pydantic models. If you have a Pydantic model in your test and you want to send its data to the application during testing, you can use the jsonable_encoder described in JSON Compatible Encoder . Run it \u00b6 After that, you just need to install pytest : $ pip install pytest ---> 100% It will detect the files and tests automatically, execute them, and report the results back to you. Run the tests with: $ pytest ================ test session starts ================ platform linux -- Python 3.6.9, pytest-5.3.5, py-1.8.1, pluggy-0.13.1 rootdir: /home/user/code/superawesome-cli/app plugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1 collected 6 items ---> 100% test_main.py <span style=\"color: green; white-space: pre;\">...... [100%]</span> <span style=\"color: green;\">================= 1 passed in 0.03s =================</span>","title":"Testing"},{"location":"tutorial/testing/#testing","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Thanks to Starlette , testing FastAPI applications is easy and enjoyable. It is based on Requests , so it's very familiar and intuitive. With it, you can use pytest directly with FastAPI .","title":"Testing"},{"location":"tutorial/testing/#using-testclient","text":"Import TestClient . Create a TestClient by passing your FastAPI application to it. Create functions with a name that starts with test_ (this is standard pytest conventions). Use the TestClient object the same way as you do with requests . Write simple assert statements with the standard Python expressions that you need to check (again, standard pytest ). from fastapi import FastAPI from fastapi.testclient import TestClient app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } client = TestClient ( app ) def test_read_main (): response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } Tip Notice that the testing functions are normal def , not async def . And the calls to the client are also normal calls, not using await . This allows you to use pytest directly without complications. Technical Details You could also use from starlette.testclient import TestClient . FastAPI provides the same starlette.testclient as fastapi.testclient just as a convenience for you, the developer. But it comes directly from Starlette. Tip If you want to call async functions in your tests apart from sending requests to your FastAPI application (e.g. asynchronous database functions), have a look at the Async Tests in the advanced tutorial.","title":"Using TestClient"},{"location":"tutorial/testing/#separating-tests","text":"In a real application, you probably would have your tests in a different file. And your FastAPI application might also be composed of several files/modules, etc.","title":"Separating tests"},{"location":"tutorial/testing/#fastapi-app-file","text":"Let's say you have a file main.py with your FastAPI app: from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" }","title":"FastAPI app file"},{"location":"tutorial/testing/#testing-file","text":"Then you could have a file test_main.py with your tests, and import your app from the main module ( main.py ): from fastapi.testclient import TestClient from .main import app client = TestClient ( app ) def test_read_main (): response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" }","title":"Testing file"},{"location":"tutorial/testing/#testing-extended-example","text":"Now let's extend this example and add more details to see how to test different parts.","title":"Testing: extended example"},{"location":"tutorial/testing/#extended-fastapi-app-file","text":"Let's say that now the file main.py with your FastAPI app has some other path operations . It has a GET operation that could return an error. It has a POST operation that could return several errors. Both path operations require an X-Token header. Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Header , HTTPException from pydantic import BaseModel fake_secret_token = \"coneofsilence\" fake_db = { \"foo\" : { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" }, \"bar\" : { \"id\" : \"bar\" , \"title\" : \"Bar\" , \"description\" : \"The bartenders\" }, } app = FastAPI () class Item ( BaseModel ): id : str title : str description : Union [ str , None ] = None @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_main ( item_id : str , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item_id not in fake_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return fake_db [ item_id ] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item . id in fake_db : raise HTTPException ( status_code = 400 , detail = \"Item already exists\" ) fake_db [ item . id ] = item return item from fastapi import FastAPI , Header , HTTPException from pydantic import BaseModel fake_secret_token = \"coneofsilence\" fake_db = { \"foo\" : { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" }, \"bar\" : { \"id\" : \"bar\" , \"title\" : \"Bar\" , \"description\" : \"The bartenders\" }, } app = FastAPI () class Item ( BaseModel ): id : str title : str description : str | None = None @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_main ( item_id : str , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item_id not in fake_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return fake_db [ item_id ] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item . id in fake_db : raise HTTPException ( status_code = 400 , detail = \"Item already exists\" ) fake_db [ item . id ] = item return item","title":"Extended FastAPI app file"},{"location":"tutorial/testing/#extended-testing-file","text":"You could then update test_main.py with the extended tests: from fastapi.testclient import TestClient from .main import app client = TestClient ( app ) def test_read_item (): response = client . get ( \"/items/foo\" , headers = { \"X-Token\" : \"coneofsilence\" }) assert response . status_code == 200 assert response . json () == { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" , } def test_read_item_bad_token (): response = client . get ( \"/items/foo\" , headers = { \"X-Token\" : \"hailhydra\" }) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Invalid X-Token header\" } def test_read_inexistent_item (): response = client . get ( \"/items/baz\" , headers = { \"X-Token\" : \"coneofsilence\" }) assert response . status_code == 404 assert response . json () == { \"detail\" : \"Item not found\" } def test_create_item (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"coneofsilence\" }, json = { \"id\" : \"foobar\" , \"title\" : \"Foo Bar\" , \"description\" : \"The Foo Barters\" }, ) assert response . status_code == 200 assert response . json () == { \"id\" : \"foobar\" , \"title\" : \"Foo Bar\" , \"description\" : \"The Foo Barters\" , } def test_create_item_bad_token (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"hailhydra\" }, json = { \"id\" : \"bazz\" , \"title\" : \"Bazz\" , \"description\" : \"Drop the bazz\" }, ) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Invalid X-Token header\" } def test_create_existing_item (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"coneofsilence\" }, json = { \"id\" : \"foo\" , \"title\" : \"The Foo ID Stealers\" , \"description\" : \"There goes my stealer\" , }, ) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Item already exists\" } Whenever you need the client to pass information in the request and you don't know how to, you can search (Google) how to do it in requests . Then you just do the same in your tests. E.g.: To pass a path or query parameter, add it to the URL itself. To pass a JSON body, pass a Python object (e.g. a dict ) to the parameter json . If you need to send Form Data instead of JSON, use the data parameter instead. To pass headers , use a dict in the headers parameter. For cookies , a dict in the cookies parameter. For more information about how to pass data to the backend (using requests or the TestClient ) check the Requests documentation . Info Note that the TestClient receives data that can be converted to JSON, not Pydantic models. If you have a Pydantic model in your test and you want to send its data to the application during testing, you can use the jsonable_encoder described in JSON Compatible Encoder .","title":"Extended testing file"},{"location":"tutorial/testing/#run-it","text":"After that, you just need to install pytest : $ pip install pytest ---> 100% It will detect the files and tests automatically, execute them, and report the results back to you. Run the tests with: $ pytest ================ test session starts ================ platform linux -- Python 3.6.9, pytest-5.3.5, py-1.8.1, pluggy-0.13.1 rootdir: /home/user/code/superawesome-cli/app plugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1 collected 6 items ---> 100% test_main.py <span style=\"color: green; white-space: pre;\">...... [100%]</span> <span style=\"color: green;\">================= 1 passed in 0.03s =================</span>","title":"Run it"},{"location":"tutorial/dependencies/","text":"\u4f9d\u8d56\u9879 - \u7b2c\u4e00\u6b65 \u00b6 FastAPI \u63d0\u4f9b\u4e86\u7b80\u5355\u6613\u7528\uff0c\u4f46\u529f\u80fd\u5f3a\u5927\u7684 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u3002 \u8fd9\u4e2a\u4f9d\u8d56\u7cfb\u7edf\u8bbe\u8ba1\u7684\u7b80\u5355\u6613\u7528\uff0c\u53ef\u4ee5\u8ba9\u5f00\u53d1\u4eba\u5458\u8f7b\u677e\u5730\u628a\u7ec4\u4ef6\u96c6\u6210\u81f3 FastAPI \u3002 \u4ec0\u4e48\u662f\u300c\u4f9d\u8d56\u6ce8\u5165\u300d \u00b6 \u7f16\u7a0b\u4e2d\u7684 \u300c\u4f9d\u8d56\u6ce8\u5165\u300d \u662f\u58f0\u660e\u4ee3\u7801\uff08\u672c\u6587\u4e2d\u4e3a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff09\u8fd0\u884c\u6240\u9700\u7684\uff0c\u6216\u8981\u4f7f\u7528\u7684\u300c\u4f9d\u8d56\u300d\u7684\u4e00\u79cd\u65b9\u5f0f\u3002 \u7136\u540e\uff0c\u7531\u7cfb\u7edf\uff08\u672c\u6587\u4e2d\u4e3a FastAPI \uff09\u8d1f\u8d23\u6267\u884c\u4efb\u610f\u9700\u8981\u7684\u903b\u8f91\uff0c\u4e3a\u4ee3\u7801\u63d0\u4f9b\u8fd9\u4e9b\u4f9d\u8d56\uff08\u300c\u6ce8\u5165\u300d\u4f9d\u8d56\u9879\uff09\u3002 \u4f9d\u8d56\u6ce8\u5165\u5e38\u7528\u4e8e\u4ee5\u4e0b\u573a\u666f\uff1a \u5171\u4eab\u4e1a\u52a1\u903b\u8f91\uff08\u590d\u7528\u76f8\u540c\u7684\u4ee3\u7801\u903b\u8f91\uff09 \u5171\u4eab\u6570\u636e\u5e93\u8fde\u63a5 \u5b9e\u73b0\u5b89\u5168\u3001\u9a8c\u8bc1\u3001\u89d2\u8272\u6743\u9650 \u7b49\u2026\u2026 \u4e0a\u8ff0\u573a\u666f\u5747\u53ef\u4ee5\u4f7f\u7528 \u4f9d\u8d56\u6ce8\u5165 \uff0c\u5c06\u4ee3\u7801\u91cd\u590d\u6700\u5c0f\u5316\u3002 \u7b2c\u4e00\u6b65 \u00b6 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b66\u4e60\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5c3d\u7ba1\u5b83\u8fc7\u4e8e\u7b80\u5355\uff0c\u4e0d\u662f\u5f88\u5b9e\u7528\u3002 \u4f46\u901a\u8fc7\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u60a8\u53ef\u4ee5\u521d\u6b65\u4e86\u89e3\u300c\u4f9d\u8d56\u6ce8\u5165\u300d\u7684\u5de5\u4f5c\u673a\u5236\u3002 \u521b\u5efa\u4f9d\u8d56\u9879 \u00b6 \u9996\u5148\uff0c\u8981\u5173\u6ce8\u7684\u662f\u4f9d\u8d56\u9879\u3002 \u4f9d\u8d56\u9879\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4e14\u53ef\u4ee5\u4f7f\u7528\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u76f8\u540c\u7684\u53c2\u6570\uff1a from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons \u5927\u529f\u544a\u6210\u3002 \u53ea\u7528\u4e86 2 \u884c \u4ee3\u7801\u3002 \u4f9d\u8d56\u9879\u51fd\u6570\u7684\u5f62\u5f0f\u548c\u7ed3\u6784\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e00\u6837\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u628a\u4f9d\u8d56\u9879\u5f53\u4f5c\u6ca1\u6709\u300c\u88c5\u9970\u5668\u300d\uff08\u5373\uff0c\u6ca1\u6709 @app.get(\"/some-path\") \uff09\u7684\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u3002 \u4f9d\u8d56\u9879\u53ef\u4ee5\u8fd4\u56de\u5404\u79cd\u5185\u5bb9\u3002 \u672c\u4f8b\u4e2d\u7684\u4f9d\u8d56\u9879\u9884\u671f\u63a5\u6536\u5982\u4e0b\u53c2\u6570\uff1a \u7c7b\u578b\u4e3a str \u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 q \u7c7b\u578b\u4e3a int \u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 skip \uff0c\u9ed8\u8ba4\u503c\u662f 0 \u7c7b\u578b\u4e3a int \u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 limit \uff0c\u9ed8\u8ba4\u503c\u662f 100 \u7136\u540e\uff0c\u4f9d\u8d56\u9879\u51fd\u6570\u8fd4\u56de\u5305\u542b\u8fd9\u4e9b\u503c\u7684 dict \u3002 \u5bfc\u5165 Depends \u00b6 from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons \u58f0\u660e\u4f9d\u8d56\u9879 \u00b6 \u4e0e\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u53c2\u6570\u4e2d\u4f7f\u7528 Body \u3001 Query \u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u58f0\u660e\u4f9d\u8d56\u9879\u9700\u8981\u4f7f\u7528 Depends \u548c\u4e00\u4e2a\u65b0\u7684\u53c2\u6570\uff1a from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons \u867d\u7136\uff0c\u5728\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u7684\u53c2\u6570\u4e2d\u4f7f\u7528 Depends \u7684\u65b9\u5f0f\u4e0e Body \u3001 Query \u76f8\u540c\uff0c\u4f46 Depends \u7684\u5de5\u4f5c\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\u3002 \u8fd9\u91cc\u53ea\u80fd\u4f20\u7ed9 Depends \u4e00\u4e2a\u53c2\u6570\u3002 \u4e14\u8be5\u53c2\u6570\u5fc5\u987b\u662f\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u6bd4\u5982\u51fd\u6570\u3002 \u8be5\u51fd\u6570\u63a5\u6536\u7684\u53c2\u6570\u548c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u4e00\u6837\u3002 \u63d0\u793a \u4e0b\u4e00\u7ae0\u4ecb\u7ecd\uff0c\u9664\u4e86\u51fd\u6570\u8fd8\u6709\u54ea\u4e9b\u300c\u5bf9\u8c61\u300d\u53ef\u4ee5\u7528\u4f5c\u4f9d\u8d56\u9879\u3002 \u63a5\u6536\u5230\u65b0\u7684\u8bf7\u6c42\u65f6\uff0c FastAPI \u6267\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a \u7528\u6b63\u786e\u7684\u53c2\u6570\u8c03\u7528\u4f9d\u8d56\u9879\u51fd\u6570\uff08\u300c\u53ef\u4f9d\u8d56\u9879\u300d\uff09 \u83b7\u53d6\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c \u628a\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u8d4b\u503c\u7ed9 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570 graph TB common_parameters([\"common_parameters\"]) read_items[\"/items/\"] read_users[\"/users/\"] common_parameters --> read_items common_parameters --> read_users \u8fd9\u6837\uff0c\u53ea\u7f16\u5199\u4e00\u6b21\u4ee3\u7801\uff0c FastAPI \u5c31\u53ef\u4ee5\u4e3a\u591a\u4e2a \u8def\u5f84\u64cd\u4f5c \u5171\u4eab\u8fd9\u6bb5\u4ee3\u7801 \u3002 \u68c0\u67e5 \u6ce8\u610f\uff0c\u65e0\u9700\u521b\u5efa\u4e13\u95e8\u7684\u7c7b\uff0c\u5e76\u5c06\u4e4b\u4f20\u9012\u7ed9 FastAPI \u4ee5\u8fdb\u884c\u300c\u6ce8\u518c\u300d\u6216\u6267\u884c\u7c7b\u4f3c\u7684\u64cd\u4f5c\u3002 \u53ea\u8981\u628a\u5b83\u4f20\u9012\u7ed9 Depends \uff0c FastAPI \u5c31\u77e5\u9053\u8be5\u5982\u4f55\u6267\u884c\u540e\u7eed\u64cd\u4f5c\u3002 \u8981\u4e0d\u8981\u4f7f\u7528 async \uff1f \u00b6 FastAPI \u8c03\u7528\u4f9d\u8d56\u9879\u7684\u65b9\u5f0f\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e00\u6837\uff0c\u56e0\u6b64\uff0c\u5b9a\u4e49\u4f9d\u8d56\u9879\u51fd\u6570\uff0c\u4e5f\u8981\u5e94\u7528\u4e0e\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u76f8\u540c\u7684\u89c4\u5219\u3002 \u5373\uff0c\u65e2\u53ef\u4ee5\u4f7f\u7528\u5f02\u6b65\u7684 async def \uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u7684 def \u5b9a\u4e49\u4f9d\u8d56\u9879\u3002 \u5728\u666e\u901a\u7684 def \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\uff0c\u53ef\u4ee5\u58f0\u660e\u5f02\u6b65\u7684 async def \u4f9d\u8d56\u9879\uff1b\u4e5f\u53ef\u4ee5\u5728\u5f02\u6b65\u7684 async def \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u58f0\u660e\u666e\u901a\u7684 def \u4f9d\u8d56\u9879\u3002 \u4e0a\u8ff0\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u662f\u53ef\u884c\u7684\uff0c FastAPI \u77e5\u9053\u8be5\u600e\u4e48\u5904\u7406\u3002 \u7b14\u8bb0 \u5982\u91cc\u4e0d\u4e86\u89e3\u5f02\u6b65\uff0c\u8bf7\u53c2\u9605 \u5f02\u6b65\uff1a \u201c\u7740\u6025\u4e86\uff1f\u201d \u4e00\u7ae0\u4e2d async \u548c await \u7684\u5185\u5bb9\u3002 \u4e0e OpenAPI \u96c6\u6210 \u00b6 \u4f9d\u8d56\u9879\u53ca\u5b50\u4f9d\u8d56\u9879\u7684\u6240\u6709\u8bf7\u6c42\u58f0\u660e\u3001\u9a8c\u8bc1\u548c\u9700\u6c42\u90fd\u53ef\u4ee5\u96c6\u6210\u81f3\u540c\u4e00\u4e2a OpenAPI \u6982\u56fe\u3002 \u6240\u4ee5\uff0c\u4ea4\u4e92\u6587\u6863\u91cc\u4e5f\u4f1a\u663e\u793a\u4f9d\u8d56\u9879\u7684\u6240\u6709\u4fe1\u606f\uff1a \u7b80\u5355\u7528\u6cd5 \u00b6 \u89c2\u5bdf\u4e00\u4e0b\u5c31\u4f1a\u53d1\u73b0\uff0c\u53ea\u8981 \u8def\u5f84 \u548c \u64cd\u4f5c \u5339\u914d\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u58f0\u660e\u7684\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u3002\u7136\u540e\uff0c FastAPI \u4f1a\u7528\u6b63\u786e\u7684\u53c2\u6570\u8c03\u7528\u51fd\u6570\uff0c\u5e76\u63d0\u53d6\u8bf7\u6c42\u4e2d\u7684\u6570\u636e\u3002 \u5b9e\u9645\u4e0a\uff0c\u6240\u6709\uff08\u6216\u5927\u591a\u6570\uff09\u7f51\u7edc\u6846\u67b6\u7684\u5de5\u4f5c\u65b9\u5f0f\u90fd\u662f\u8fd9\u6837\u7684\u3002 \u5f00\u53d1\u4eba\u5458\u6c38\u8fdc\u90fd\u4e0d\u9700\u8981\u76f4\u63a5\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u662f\u7531\u6846\u67b6\uff08\u5728\u6b64\u4e3a FastAPI \uff09\u8c03\u7528\u7684\u3002 \u901a\u8fc7\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\uff0c\u53ea\u8981\u544a\u8bc9 FastAPI \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u8fd8\u8981\u300c\u4f9d\u8d56\u300d\u5176\u4ed6\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e4b\u524d\u6267\u884c\u7684\u5185\u5bb9\uff0c FastAPI \u5c31\u4f1a\u6267\u884c\u51fd\u6570\u4ee3\u7801\uff0c\u5e76\u300c\u6ce8\u5165\u300d\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u3002 \u5176\u4ed6\u4e0e\u300c\u4f9d\u8d56\u6ce8\u5165\u300d\u6982\u5ff5\u76f8\u540c\u7684\u672f\u8bed\u4e3a\uff1a \u8d44\u6e90\uff08Resource\uff09 \u63d0\u4f9b\u65b9\uff08Provider\uff09 \u670d\u52a1\uff08Service\uff09 \u53ef\u6ce8\u5165\uff08Injectable\uff09 \u7ec4\u4ef6\uff08Component\uff09 FastAPI \u63d2\u4ef6 \u00b6 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u652f\u6301\u6784\u5efa\u96c6\u6210\u548c\u300c\u63d2\u4ef6\u300d\u3002\u4f46\u5b9e\u9645\u4e0a\uff0cFastAPI \u6839\u672c \u4e0d\u9700\u8981\u521b\u5efa\u300c\u63d2\u4ef6\u300d \uff0c\u56e0\u4e3a\u4f7f\u7528\u4f9d\u8d56\u9879\u53ef\u4ee5\u58f0\u660e\u4e0d\u9650\u6570\u91cf\u7684\u3001\u53ef\u7528\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u96c6\u6210\u4e0e\u4ea4\u4e92\u3002 \u521b\u5efa\u4f9d\u8d56\u9879\u975e\u5e38\u7b80\u5355\u3001\u76f4\u89c2\uff0c\u5e76\u4e14\u8fd8\u652f\u6301\u5bfc\u5165 Python \u5305\u3002\u6beb\u4e0d\u5938\u5f20\u5730\u8bf4\uff0c\u53ea\u8981\u51e0\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u628a\u9700\u8981\u7684 Python \u5305\u4e0e API \u51fd\u6570\u96c6\u6210\u5728\u4e00\u8d77\u3002 \u4e0b\u4e00\u7ae0\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u5728\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3001NoSQL \u6570\u636e\u5e93\u3001\u5b89\u5168\u7b49\u65b9\u9762\u4f7f\u7528\u4f9d\u8d56\u9879\u7684\u4f8b\u5b50\u3002 FastAPI \u517c\u5bb9\u6027 \u00b6 \u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u5982\u6b64\u7b80\u6d01\u7684\u7279\u6027\uff0c\u8ba9 FastAPI \u53ef\u4ee5\u4e0e\u4e0b\u5217\u7cfb\u7edf\u517c\u5bb9\uff1a \u5173\u7cfb\u578b\u6570\u636e\u5e93 NoSQL \u6570\u636e\u5e93 \u5916\u90e8\u652f\u6301\u5e93 \u5916\u90e8 API \u8ba4\u8bc1\u548c\u9274\u6743\u7cfb\u7edf API \u4f7f\u7528\u76d1\u63a7\u7cfb\u7edf \u54cd\u5e94\u6570\u636e\u6ce8\u5165\u7cfb\u7edf \u7b49\u7b49\u2026\u2026 \u7b80\u5355\u800c\u5f3a\u5927 \u00b6 \u867d\u7136\uff0c \u5c42\u7ea7\u5f0f\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf \u7684\u5b9a\u4e49\u4e0e\u4f7f\u7528\u5341\u5206\u7b80\u5355\uff0c\u4f46\u5b83\u5374\u975e\u5e38\u5f3a\u5927\u3002 \u6bd4\u5982\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4f9d\u8d56\u5176\u4ed6\u4f9d\u8d56\u9879\u7684\u4f9d\u8d56\u9879\u3002 \u6700\u540e\uff0c\u4f9d\u8d56\u9879\u5c42\u7ea7\u6811\u6784\u5efa\u540e\uff0c \u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf \u4f1a\u5904\u7406\u6240\u6709\u4f9d\u8d56\u9879\u53ca\u5176\u5b50\u4f9d\u8d56\u9879\uff0c\u5e76\u4e3a\u6bcf\u4e00\u6b65\u64cd\u4f5c\u63d0\u4f9b\uff08\u6ce8\u5165\uff09\u7ed3\u679c\u3002 \u6bd4\u5982\uff0c\u4e0b\u9762\u6709 4 \u4e2a API \u8def\u5f84\u64cd\u4f5c\uff08 \u7aef\u70b9 \uff09\uff1a /items/public/ /items/private/ /users/{user_id}/activate /items/pro/ \u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4f7f\u7528\u4f9d\u8d56\u9879\u53ca\u5176\u5b50\u4f9d\u8d56\u9879\u4e3a\u8fd9\u4e9b\u8def\u5f84\u64cd\u4f5c\u6dfb\u52a0\u4e0d\u540c\u7684\u6743\u9650\uff1a graph TB current_user([\"current_user\"]) active_user([\"active_user\"]) admin_user([\"admin_user\"]) paying_user([\"paying_user\"]) public[\"/items/public/\"] private[\"/items/private/\"] activate_user[\"/users/{user_id}/activate\"] pro_items[\"/items/pro/\"] current_user --> active_user active_user --> admin_user active_user --> paying_user current_user --> public active_user --> private admin_user --> activate_user paying_user --> pro_items \u4e0e OpenAPI \u96c6\u6210 \u00b6 \u5728\u58f0\u660e\u9700\u6c42\u65f6\uff0c\u6240\u6709\u8fd9\u4e9b\u4f9d\u8d56\u9879\u8fd8\u4f1a\u628a\u53c2\u6570\u3001\u9a8c\u8bc1\u7b49\u529f\u80fd\u6dfb\u52a0\u81f3\u8def\u5f84\u64cd\u4f5c\u3002 FastAPI \u8d1f\u8d23\u628a\u4e0a\u8ff0\u5185\u5bb9\u5168\u90e8\u6dfb\u52a0\u5230 OpenAPI \u6982\u56fe\uff0c\u5e76\u663e\u793a\u5728\u4ea4\u4e92\u6587\u6863\u4e2d\u3002","title":"\u4f9d\u8d56\u9879 - \u7b2c\u4e00\u6b65"},{"location":"tutorial/dependencies/#-","text":"FastAPI \u63d0\u4f9b\u4e86\u7b80\u5355\u6613\u7528\uff0c\u4f46\u529f\u80fd\u5f3a\u5927\u7684 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u3002 \u8fd9\u4e2a\u4f9d\u8d56\u7cfb\u7edf\u8bbe\u8ba1\u7684\u7b80\u5355\u6613\u7528\uff0c\u53ef\u4ee5\u8ba9\u5f00\u53d1\u4eba\u5458\u8f7b\u677e\u5730\u628a\u7ec4\u4ef6\u96c6\u6210\u81f3 FastAPI \u3002","title":"\u4f9d\u8d56\u9879 - \u7b2c\u4e00\u6b65"},{"location":"tutorial/dependencies/#_1","text":"\u7f16\u7a0b\u4e2d\u7684 \u300c\u4f9d\u8d56\u6ce8\u5165\u300d \u662f\u58f0\u660e\u4ee3\u7801\uff08\u672c\u6587\u4e2d\u4e3a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff09\u8fd0\u884c\u6240\u9700\u7684\uff0c\u6216\u8981\u4f7f\u7528\u7684\u300c\u4f9d\u8d56\u300d\u7684\u4e00\u79cd\u65b9\u5f0f\u3002 \u7136\u540e\uff0c\u7531\u7cfb\u7edf\uff08\u672c\u6587\u4e2d\u4e3a FastAPI \uff09\u8d1f\u8d23\u6267\u884c\u4efb\u610f\u9700\u8981\u7684\u903b\u8f91\uff0c\u4e3a\u4ee3\u7801\u63d0\u4f9b\u8fd9\u4e9b\u4f9d\u8d56\uff08\u300c\u6ce8\u5165\u300d\u4f9d\u8d56\u9879\uff09\u3002 \u4f9d\u8d56\u6ce8\u5165\u5e38\u7528\u4e8e\u4ee5\u4e0b\u573a\u666f\uff1a \u5171\u4eab\u4e1a\u52a1\u903b\u8f91\uff08\u590d\u7528\u76f8\u540c\u7684\u4ee3\u7801\u903b\u8f91\uff09 \u5171\u4eab\u6570\u636e\u5e93\u8fde\u63a5 \u5b9e\u73b0\u5b89\u5168\u3001\u9a8c\u8bc1\u3001\u89d2\u8272\u6743\u9650 \u7b49\u2026\u2026 \u4e0a\u8ff0\u573a\u666f\u5747\u53ef\u4ee5\u4f7f\u7528 \u4f9d\u8d56\u6ce8\u5165 \uff0c\u5c06\u4ee3\u7801\u91cd\u590d\u6700\u5c0f\u5316\u3002","title":"\u4ec0\u4e48\u662f\u300c\u4f9d\u8d56\u6ce8\u5165\u300d"},{"location":"tutorial/dependencies/#_2","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b66\u4e60\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5c3d\u7ba1\u5b83\u8fc7\u4e8e\u7b80\u5355\uff0c\u4e0d\u662f\u5f88\u5b9e\u7528\u3002 \u4f46\u901a\u8fc7\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u60a8\u53ef\u4ee5\u521d\u6b65\u4e86\u89e3\u300c\u4f9d\u8d56\u6ce8\u5165\u300d\u7684\u5de5\u4f5c\u673a\u5236\u3002","title":"\u7b2c\u4e00\u6b65"},{"location":"tutorial/dependencies/#_3","text":"\u9996\u5148\uff0c\u8981\u5173\u6ce8\u7684\u662f\u4f9d\u8d56\u9879\u3002 \u4f9d\u8d56\u9879\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4e14\u53ef\u4ee5\u4f7f\u7528\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u76f8\u540c\u7684\u53c2\u6570\uff1a from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons \u5927\u529f\u544a\u6210\u3002 \u53ea\u7528\u4e86 2 \u884c \u4ee3\u7801\u3002 \u4f9d\u8d56\u9879\u51fd\u6570\u7684\u5f62\u5f0f\u548c\u7ed3\u6784\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e00\u6837\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u628a\u4f9d\u8d56\u9879\u5f53\u4f5c\u6ca1\u6709\u300c\u88c5\u9970\u5668\u300d\uff08\u5373\uff0c\u6ca1\u6709 @app.get(\"/some-path\") \uff09\u7684\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u3002 \u4f9d\u8d56\u9879\u53ef\u4ee5\u8fd4\u56de\u5404\u79cd\u5185\u5bb9\u3002 \u672c\u4f8b\u4e2d\u7684\u4f9d\u8d56\u9879\u9884\u671f\u63a5\u6536\u5982\u4e0b\u53c2\u6570\uff1a \u7c7b\u578b\u4e3a str \u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 q \u7c7b\u578b\u4e3a int \u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 skip \uff0c\u9ed8\u8ba4\u503c\u662f 0 \u7c7b\u578b\u4e3a int \u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 limit \uff0c\u9ed8\u8ba4\u503c\u662f 100 \u7136\u540e\uff0c\u4f9d\u8d56\u9879\u51fd\u6570\u8fd4\u56de\u5305\u542b\u8fd9\u4e9b\u503c\u7684 dict \u3002","title":"\u521b\u5efa\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/#depends","text":"from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons","title":"\u5bfc\u5165 Depends"},{"location":"tutorial/dependencies/#_4","text":"\u4e0e\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u53c2\u6570\u4e2d\u4f7f\u7528 Body \u3001 Query \u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u58f0\u660e\u4f9d\u8d56\u9879\u9700\u8981\u4f7f\u7528 Depends \u548c\u4e00\u4e2a\u65b0\u7684\u53c2\u6570\uff1a from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons \u867d\u7136\uff0c\u5728\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u7684\u53c2\u6570\u4e2d\u4f7f\u7528 Depends \u7684\u65b9\u5f0f\u4e0e Body \u3001 Query \u76f8\u540c\uff0c\u4f46 Depends \u7684\u5de5\u4f5c\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\u3002 \u8fd9\u91cc\u53ea\u80fd\u4f20\u7ed9 Depends \u4e00\u4e2a\u53c2\u6570\u3002 \u4e14\u8be5\u53c2\u6570\u5fc5\u987b\u662f\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u6bd4\u5982\u51fd\u6570\u3002 \u8be5\u51fd\u6570\u63a5\u6536\u7684\u53c2\u6570\u548c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u4e00\u6837\u3002 \u63d0\u793a \u4e0b\u4e00\u7ae0\u4ecb\u7ecd\uff0c\u9664\u4e86\u51fd\u6570\u8fd8\u6709\u54ea\u4e9b\u300c\u5bf9\u8c61\u300d\u53ef\u4ee5\u7528\u4f5c\u4f9d\u8d56\u9879\u3002 \u63a5\u6536\u5230\u65b0\u7684\u8bf7\u6c42\u65f6\uff0c FastAPI \u6267\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a \u7528\u6b63\u786e\u7684\u53c2\u6570\u8c03\u7528\u4f9d\u8d56\u9879\u51fd\u6570\uff08\u300c\u53ef\u4f9d\u8d56\u9879\u300d\uff09 \u83b7\u53d6\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c \u628a\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u8d4b\u503c\u7ed9 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570 graph TB common_parameters([\"common_parameters\"]) read_items[\"/items/\"] read_users[\"/users/\"] common_parameters --> read_items common_parameters --> read_users \u8fd9\u6837\uff0c\u53ea\u7f16\u5199\u4e00\u6b21\u4ee3\u7801\uff0c FastAPI \u5c31\u53ef\u4ee5\u4e3a\u591a\u4e2a \u8def\u5f84\u64cd\u4f5c \u5171\u4eab\u8fd9\u6bb5\u4ee3\u7801 \u3002 \u68c0\u67e5 \u6ce8\u610f\uff0c\u65e0\u9700\u521b\u5efa\u4e13\u95e8\u7684\u7c7b\uff0c\u5e76\u5c06\u4e4b\u4f20\u9012\u7ed9 FastAPI \u4ee5\u8fdb\u884c\u300c\u6ce8\u518c\u300d\u6216\u6267\u884c\u7c7b\u4f3c\u7684\u64cd\u4f5c\u3002 \u53ea\u8981\u628a\u5b83\u4f20\u9012\u7ed9 Depends \uff0c FastAPI \u5c31\u77e5\u9053\u8be5\u5982\u4f55\u6267\u884c\u540e\u7eed\u64cd\u4f5c\u3002","title":"\u58f0\u660e\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/#async","text":"FastAPI \u8c03\u7528\u4f9d\u8d56\u9879\u7684\u65b9\u5f0f\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e00\u6837\uff0c\u56e0\u6b64\uff0c\u5b9a\u4e49\u4f9d\u8d56\u9879\u51fd\u6570\uff0c\u4e5f\u8981\u5e94\u7528\u4e0e\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u76f8\u540c\u7684\u89c4\u5219\u3002 \u5373\uff0c\u65e2\u53ef\u4ee5\u4f7f\u7528\u5f02\u6b65\u7684 async def \uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u7684 def \u5b9a\u4e49\u4f9d\u8d56\u9879\u3002 \u5728\u666e\u901a\u7684 def \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\uff0c\u53ef\u4ee5\u58f0\u660e\u5f02\u6b65\u7684 async def \u4f9d\u8d56\u9879\uff1b\u4e5f\u53ef\u4ee5\u5728\u5f02\u6b65\u7684 async def \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u58f0\u660e\u666e\u901a\u7684 def \u4f9d\u8d56\u9879\u3002 \u4e0a\u8ff0\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u662f\u53ef\u884c\u7684\uff0c FastAPI \u77e5\u9053\u8be5\u600e\u4e48\u5904\u7406\u3002 \u7b14\u8bb0 \u5982\u91cc\u4e0d\u4e86\u89e3\u5f02\u6b65\uff0c\u8bf7\u53c2\u9605 \u5f02\u6b65\uff1a \u201c\u7740\u6025\u4e86\uff1f\u201d \u4e00\u7ae0\u4e2d async \u548c await \u7684\u5185\u5bb9\u3002","title":"\u8981\u4e0d\u8981\u4f7f\u7528 async\uff1f"},{"location":"tutorial/dependencies/#openapi","text":"\u4f9d\u8d56\u9879\u53ca\u5b50\u4f9d\u8d56\u9879\u7684\u6240\u6709\u8bf7\u6c42\u58f0\u660e\u3001\u9a8c\u8bc1\u548c\u9700\u6c42\u90fd\u53ef\u4ee5\u96c6\u6210\u81f3\u540c\u4e00\u4e2a OpenAPI \u6982\u56fe\u3002 \u6240\u4ee5\uff0c\u4ea4\u4e92\u6587\u6863\u91cc\u4e5f\u4f1a\u663e\u793a\u4f9d\u8d56\u9879\u7684\u6240\u6709\u4fe1\u606f\uff1a","title":"\u4e0e OpenAPI \u96c6\u6210"},{"location":"tutorial/dependencies/#_5","text":"\u89c2\u5bdf\u4e00\u4e0b\u5c31\u4f1a\u53d1\u73b0\uff0c\u53ea\u8981 \u8def\u5f84 \u548c \u64cd\u4f5c \u5339\u914d\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u58f0\u660e\u7684\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u3002\u7136\u540e\uff0c FastAPI \u4f1a\u7528\u6b63\u786e\u7684\u53c2\u6570\u8c03\u7528\u51fd\u6570\uff0c\u5e76\u63d0\u53d6\u8bf7\u6c42\u4e2d\u7684\u6570\u636e\u3002 \u5b9e\u9645\u4e0a\uff0c\u6240\u6709\uff08\u6216\u5927\u591a\u6570\uff09\u7f51\u7edc\u6846\u67b6\u7684\u5de5\u4f5c\u65b9\u5f0f\u90fd\u662f\u8fd9\u6837\u7684\u3002 \u5f00\u53d1\u4eba\u5458\u6c38\u8fdc\u90fd\u4e0d\u9700\u8981\u76f4\u63a5\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u662f\u7531\u6846\u67b6\uff08\u5728\u6b64\u4e3a FastAPI \uff09\u8c03\u7528\u7684\u3002 \u901a\u8fc7\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\uff0c\u53ea\u8981\u544a\u8bc9 FastAPI \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u8fd8\u8981\u300c\u4f9d\u8d56\u300d\u5176\u4ed6\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e4b\u524d\u6267\u884c\u7684\u5185\u5bb9\uff0c FastAPI \u5c31\u4f1a\u6267\u884c\u51fd\u6570\u4ee3\u7801\uff0c\u5e76\u300c\u6ce8\u5165\u300d\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u3002 \u5176\u4ed6\u4e0e\u300c\u4f9d\u8d56\u6ce8\u5165\u300d\u6982\u5ff5\u76f8\u540c\u7684\u672f\u8bed\u4e3a\uff1a \u8d44\u6e90\uff08Resource\uff09 \u63d0\u4f9b\u65b9\uff08Provider\uff09 \u670d\u52a1\uff08Service\uff09 \u53ef\u6ce8\u5165\uff08Injectable\uff09 \u7ec4\u4ef6\uff08Component\uff09","title":"\u7b80\u5355\u7528\u6cd5"},{"location":"tutorial/dependencies/#fastapi","text":"\u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u652f\u6301\u6784\u5efa\u96c6\u6210\u548c\u300c\u63d2\u4ef6\u300d\u3002\u4f46\u5b9e\u9645\u4e0a\uff0cFastAPI \u6839\u672c \u4e0d\u9700\u8981\u521b\u5efa\u300c\u63d2\u4ef6\u300d \uff0c\u56e0\u4e3a\u4f7f\u7528\u4f9d\u8d56\u9879\u53ef\u4ee5\u58f0\u660e\u4e0d\u9650\u6570\u91cf\u7684\u3001\u53ef\u7528\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u96c6\u6210\u4e0e\u4ea4\u4e92\u3002 \u521b\u5efa\u4f9d\u8d56\u9879\u975e\u5e38\u7b80\u5355\u3001\u76f4\u89c2\uff0c\u5e76\u4e14\u8fd8\u652f\u6301\u5bfc\u5165 Python \u5305\u3002\u6beb\u4e0d\u5938\u5f20\u5730\u8bf4\uff0c\u53ea\u8981\u51e0\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u628a\u9700\u8981\u7684 Python \u5305\u4e0e API \u51fd\u6570\u96c6\u6210\u5728\u4e00\u8d77\u3002 \u4e0b\u4e00\u7ae0\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u5728\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3001NoSQL \u6570\u636e\u5e93\u3001\u5b89\u5168\u7b49\u65b9\u9762\u4f7f\u7528\u4f9d\u8d56\u9879\u7684\u4f8b\u5b50\u3002","title":"FastAPI \u63d2\u4ef6"},{"location":"tutorial/dependencies/#fastapi_1","text":"\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u5982\u6b64\u7b80\u6d01\u7684\u7279\u6027\uff0c\u8ba9 FastAPI \u53ef\u4ee5\u4e0e\u4e0b\u5217\u7cfb\u7edf\u517c\u5bb9\uff1a \u5173\u7cfb\u578b\u6570\u636e\u5e93 NoSQL \u6570\u636e\u5e93 \u5916\u90e8\u652f\u6301\u5e93 \u5916\u90e8 API \u8ba4\u8bc1\u548c\u9274\u6743\u7cfb\u7edf API \u4f7f\u7528\u76d1\u63a7\u7cfb\u7edf \u54cd\u5e94\u6570\u636e\u6ce8\u5165\u7cfb\u7edf \u7b49\u7b49\u2026\u2026","title":"FastAPI \u517c\u5bb9\u6027"},{"location":"tutorial/dependencies/#_6","text":"\u867d\u7136\uff0c \u5c42\u7ea7\u5f0f\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf \u7684\u5b9a\u4e49\u4e0e\u4f7f\u7528\u5341\u5206\u7b80\u5355\uff0c\u4f46\u5b83\u5374\u975e\u5e38\u5f3a\u5927\u3002 \u6bd4\u5982\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4f9d\u8d56\u5176\u4ed6\u4f9d\u8d56\u9879\u7684\u4f9d\u8d56\u9879\u3002 \u6700\u540e\uff0c\u4f9d\u8d56\u9879\u5c42\u7ea7\u6811\u6784\u5efa\u540e\uff0c \u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf \u4f1a\u5904\u7406\u6240\u6709\u4f9d\u8d56\u9879\u53ca\u5176\u5b50\u4f9d\u8d56\u9879\uff0c\u5e76\u4e3a\u6bcf\u4e00\u6b65\u64cd\u4f5c\u63d0\u4f9b\uff08\u6ce8\u5165\uff09\u7ed3\u679c\u3002 \u6bd4\u5982\uff0c\u4e0b\u9762\u6709 4 \u4e2a API \u8def\u5f84\u64cd\u4f5c\uff08 \u7aef\u70b9 \uff09\uff1a /items/public/ /items/private/ /users/{user_id}/activate /items/pro/ \u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4f7f\u7528\u4f9d\u8d56\u9879\u53ca\u5176\u5b50\u4f9d\u8d56\u9879\u4e3a\u8fd9\u4e9b\u8def\u5f84\u64cd\u4f5c\u6dfb\u52a0\u4e0d\u540c\u7684\u6743\u9650\uff1a graph TB current_user([\"current_user\"]) active_user([\"active_user\"]) admin_user([\"admin_user\"]) paying_user([\"paying_user\"]) public[\"/items/public/\"] private[\"/items/private/\"] activate_user[\"/users/{user_id}/activate\"] pro_items[\"/items/pro/\"] current_user --> active_user active_user --> admin_user active_user --> paying_user current_user --> public active_user --> private admin_user --> activate_user paying_user --> pro_items","title":"\u7b80\u5355\u800c\u5f3a\u5927"},{"location":"tutorial/dependencies/#openapi_1","text":"\u5728\u58f0\u660e\u9700\u6c42\u65f6\uff0c\u6240\u6709\u8fd9\u4e9b\u4f9d\u8d56\u9879\u8fd8\u4f1a\u628a\u53c2\u6570\u3001\u9a8c\u8bc1\u7b49\u529f\u80fd\u6dfb\u52a0\u81f3\u8def\u5f84\u64cd\u4f5c\u3002 FastAPI \u8d1f\u8d23\u628a\u4e0a\u8ff0\u5185\u5bb9\u5168\u90e8\u6dfb\u52a0\u5230 OpenAPI \u6982\u56fe\uff0c\u5e76\u663e\u793a\u5728\u4ea4\u4e92\u6587\u6863\u4e2d\u3002","title":"\u4e0e OpenAPI \u96c6\u6210"},{"location":"tutorial/dependencies/classes-as-dependencies/","text":"Classes as Dependencies \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Before diving deeper into the Dependency Injection system, let's upgrade the previous example. A dict from the previous example \u00b6 In the previous example, we were returning a dict from our dependency (\"dependable\"): Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons But then we get a dict in the parameter commons of the path operation function . And we know that editors can't provide a lot of support (like completion) for dict s, because they can't know their keys and value types. We can do better... What makes a dependency \u00b6 Up to now you have seen dependencies declared as functions. But that's not the only way to declare dependencies (although it would probably be the more common). The key factor is that a dependency should be a \"callable\". A \" callable \" in Python is anything that Python can \"call\" like a function. So, if you have an object something (that might not be a function) and you can \"call\" it (execute it) like: something () or something ( some_argument , some_keyword_argument = \"foo\" ) then it is a \"callable\". Classes as dependencies \u00b6 You might notice that to create an instance of a Python class, you use that same syntax. For example: class Cat : def __init__ ( self , name : str ): self . name = name fluffy = Cat ( name = \"Mr Fluffy\" ) In this case, fluffy is an instance of the class Cat . And to create fluffy , you are \"calling\" Cat . So, a Python class is also a callable . Then, in FastAPI , you could use a Python class as a dependency. What FastAPI actually checks is that it is a \"callable\" (function, class or anything else) and the parameters defined. If you pass a \"callable\" as a dependency in FastAPI , it will analyze the parameters for that \"callable\", and process them in the same way as the parameters for a path operation function . Including sub-dependencies. That also applies to callables with no parameters at all. The same as it would be for path operation functions with no parameters. Then, we can change the dependency \"dependable\" common_parameters from above to the class CommonQueryParams : Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response Pay attention to the __init__ method used to create the instance of the class: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response ...it has the same parameters as our previous common_parameters : Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons Those parameters are what FastAPI will use to \"solve\" the dependency. In both cases, it will have: An optional q query parameter that is a str . A skip query parameter that is an int , with a default of 0 . A limit query parameter that is an int , with a default of 100 . In both cases the data will be converted, validated, documented on the OpenAPI schema, etc. Use it \u00b6 Now you can declare your dependency using this class. Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response FastAPI calls the CommonQueryParams class. This creates an \"instance\" of that class and the instance will be passed as the parameter commons to your function. Type annotation vs Depends \u00b6 Notice how we write CommonQueryParams twice in the above code: commons : CommonQueryParams = Depends ( CommonQueryParams ) The last CommonQueryParams , in: ... = Depends ( CommonQueryParams ) ...is what FastAPI will actually use to know what is the dependency. From it is that FastAPI will extract the declared parameters and that is what FastAPI will actually call. In this case, the first CommonQueryParams , in: commons : CommonQueryParams ... ...doesn't have any special meaning for FastAPI . FastAPI won't use it for data conversion, validation, etc. (as it is using the = Depends(CommonQueryParams) for that). You could actually write just: commons = Depends ( CommonQueryParams ) ..as in: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response But declaring the type is encouraged as that way your editor will know what will be passed as the parameter commons , and then it can help you with code completion, type checks, etc: Shortcut \u00b6 But you see that we are having some code repetition here, writing CommonQueryParams twice: commons : CommonQueryParams = Depends ( CommonQueryParams ) FastAPI provides a shortcut for these cases, in where the dependency is specifically a class that FastAPI will \"call\" to create an instance of the class itself. For those specific cases, you can do the following: Instead of writing: commons : CommonQueryParams = Depends ( CommonQueryParams ) ...you write: commons : CommonQueryParams = Depends () You declare the dependency as the type of the parameter, and you use Depends() as its \"default\" value (that after the = ) for that function's parameter, without any parameter in Depends() , instead of having to write the full class again inside of Depends(CommonQueryParams) . The same example would then look like: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ()): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ()): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response ...and FastAPI will know what to do. Tip If that seems more confusing than helpful, disregard it, you don't need it. It is just a shortcut. Because FastAPI cares about helping you minimize code repetition.","title":"Classes as Dependencies"},{"location":"tutorial/dependencies/classes-as-dependencies/#classes-as-dependencies","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Before diving deeper into the Dependency Injection system, let's upgrade the previous example.","title":"Classes as Dependencies"},{"location":"tutorial/dependencies/classes-as-dependencies/#a-dict-from-the-previous-example","text":"In the previous example, we were returning a dict from our dependency (\"dependable\"): Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons But then we get a dict in the parameter commons of the path operation function . And we know that editors can't provide a lot of support (like completion) for dict s, because they can't know their keys and value types. We can do better...","title":"A dict from the previous example"},{"location":"tutorial/dependencies/classes-as-dependencies/#what-makes-a-dependency","text":"Up to now you have seen dependencies declared as functions. But that's not the only way to declare dependencies (although it would probably be the more common). The key factor is that a dependency should be a \"callable\". A \" callable \" in Python is anything that Python can \"call\" like a function. So, if you have an object something (that might not be a function) and you can \"call\" it (execute it) like: something () or something ( some_argument , some_keyword_argument = \"foo\" ) then it is a \"callable\".","title":"What makes a dependency"},{"location":"tutorial/dependencies/classes-as-dependencies/#classes-as-dependencies_1","text":"You might notice that to create an instance of a Python class, you use that same syntax. For example: class Cat : def __init__ ( self , name : str ): self . name = name fluffy = Cat ( name = \"Mr Fluffy\" ) In this case, fluffy is an instance of the class Cat . And to create fluffy , you are \"calling\" Cat . So, a Python class is also a callable . Then, in FastAPI , you could use a Python class as a dependency. What FastAPI actually checks is that it is a \"callable\" (function, class or anything else) and the parameters defined. If you pass a \"callable\" as a dependency in FastAPI , it will analyze the parameters for that \"callable\", and process them in the same way as the parameters for a path operation function . Including sub-dependencies. That also applies to callables with no parameters at all. The same as it would be for path operation functions with no parameters. Then, we can change the dependency \"dependable\" common_parameters from above to the class CommonQueryParams : Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response Pay attention to the __init__ method used to create the instance of the class: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response ...it has the same parameters as our previous common_parameters : Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons Those parameters are what FastAPI will use to \"solve\" the dependency. In both cases, it will have: An optional q query parameter that is a str . A skip query parameter that is an int , with a default of 0 . A limit query parameter that is an int , with a default of 100 . In both cases the data will be converted, validated, documented on the OpenAPI schema, etc.","title":"Classes as dependencies"},{"location":"tutorial/dependencies/classes-as-dependencies/#use-it","text":"Now you can declare your dependency using this class. Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response FastAPI calls the CommonQueryParams class. This creates an \"instance\" of that class and the instance will be passed as the parameter commons to your function.","title":"Use it"},{"location":"tutorial/dependencies/classes-as-dependencies/#type-annotation-vs-depends","text":"Notice how we write CommonQueryParams twice in the above code: commons : CommonQueryParams = Depends ( CommonQueryParams ) The last CommonQueryParams , in: ... = Depends ( CommonQueryParams ) ...is what FastAPI will actually use to know what is the dependency. From it is that FastAPI will extract the declared parameters and that is what FastAPI will actually call. In this case, the first CommonQueryParams , in: commons : CommonQueryParams ... ...doesn't have any special meaning for FastAPI . FastAPI won't use it for data conversion, validation, etc. (as it is using the = Depends(CommonQueryParams) for that). You could actually write just: commons = Depends ( CommonQueryParams ) ..as in: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response But declaring the type is encouraged as that way your editor will know what will be passed as the parameter commons , and then it can help you with code completion, type checks, etc:","title":"Type annotation vs Depends"},{"location":"tutorial/dependencies/classes-as-dependencies/#shortcut","text":"But you see that we are having some code repetition here, writing CommonQueryParams twice: commons : CommonQueryParams = Depends ( CommonQueryParams ) FastAPI provides a shortcut for these cases, in where the dependency is specifically a class that FastAPI will \"call\" to create an instance of the class itself. For those specific cases, you can do the following: Instead of writing: commons : CommonQueryParams = Depends ( CommonQueryParams ) ...you write: commons : CommonQueryParams = Depends () You declare the dependency as the type of the parameter, and you use Depends() as its \"default\" value (that after the = ) for that function's parameter, without any parameter in Depends() , instead of having to write the full class again inside of Depends(CommonQueryParams) . The same example would then look like: Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ()): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ()): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response ...and FastAPI will know what to do. Tip If that seems more confusing than helpful, disregard it, you don't need it. It is just a shortcut. Because FastAPI cares about helping you minimize code repetition.","title":"Shortcut"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/","text":"\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4f9d\u8d56\u9879 \u00b6 \u6709\u65f6\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u4f7f\u7528\u4f9d\u8d56\u9879\u7684\u8fd4\u56de\u503c\u3002 \u6216\u8005\u8bf4\uff0c\u6709\u4e9b\u4f9d\u8d56\u9879\u4e0d\u8fd4\u56de\u503c\u3002 \u4f46\u4ecd\u8981\u6267\u884c\u6216\u89e3\u6790\u8be5\u4f9d\u8d56\u9879\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u4e0d\u5fc5\u5728\u58f0\u660e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u65f6\u4f7f\u7528 Depends \uff0c\u800c\u662f\u53ef\u4ee5\u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u7531 dependencies \u7ec4\u6210\u7684 list \u3002 \u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u6dfb\u52a0 dependencies \u53c2\u6570 \u00b6 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u652f\u6301\u53ef\u9009\u53c2\u6570 ~ dependencies \u3002 \u8be5\u53c2\u6570\u7684\u503c\u662f\u7531 Depends() \u7ec4\u6210\u7684 list \uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4f9d\u8d56\u9879\uff08\u4ee5\u4e0b\u7b80\u79f0\u4e3a \u201c\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u201d \uff09\u7684\u6267\u884c\u6216\u89e3\u6790\u65b9\u5f0f\u548c\u666e\u901a\u4f9d\u8d56\u9879\u4e00\u6837\uff0c\u4f46\u5c31\u7b97\u8fd9\u4e9b\u4f9d\u8d56\u9879\u4f1a\u8fd4\u56de\u503c\uff0c\u5b83\u4eec\u7684\u503c\u4e5f\u4e0d\u4f1a\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002 \u63d0\u793a \u6709\u4e9b\u7f16\u8f91\u5668\u4f1a\u68c0\u67e5\u4ee3\u7801\u4e2d\u6ca1\u4f7f\u7528\u8fc7\u7684\u51fd\u6570\u53c2\u6570\uff0c\u5e76\u663e\u793a\u9519\u8bef\u63d0\u793a\u3002 \u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u4f7f\u7528 dependencies \u53c2\u6570\uff0c\u53ef\u4ee5\u786e\u4fdd\u5728\u6267\u884c\u4f9d\u8d56\u9879\u7684\u540c\u65f6\uff0c\u907f\u514d\u7f16\u8f91\u5668\u663e\u793a\u9519\u8bef\u63d0\u793a\u3002 \u4f7f\u7528\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u8fd8\u53ef\u4ee5\u907f\u514d\u5f00\u53d1\u65b0\u4eba\u8bef\u4f1a\u4ee3\u7801\u4e2d\u5305\u542b\u65e0\u7528\u7684\u672a\u4f7f\u7528\u53c2\u6570\u3002 \u8bf4\u660e \u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528\u7684\u662f\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934 X-Key \u548c X-Token \u3002 \u4f46\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u5c24\u5176\u662f\u5728\u5b9e\u73b0\u5b89\u5168\u63aa\u65bd\u65f6\uff0c\u6700\u597d\u4f7f\u7528 FastAPI \u5185\u7f6e\u7684 \u5b89\u5168\u5de5\u5177 \uff08\u8be6\u89c1\u4e0b\u4e00\u7ae0\uff09\u3002 \u4f9d\u8d56\u9879\u9519\u8bef\u548c\u8fd4\u56de\u503c \u00b6 \u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u4e5f\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u7684\u4f9d\u8d56\u9879 \u51fd\u6570 \u3002 \u4f9d\u8d56\u9879\u7684\u9700\u6c42\u9879 \u00b6 \u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u53ef\u4ee5\u58f0\u660e\u8bf7\u6c42\u7684\u9700\u6c42\u9879\uff08\u6bd4\u5982\u54cd\u5e94\u5934\uff09\u6216\u5176\u4ed6\u5b50\u4f9d\u8d56\u9879\uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] \u89e6\u53d1\u5f02\u5e38 \u00b6 \u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u4e0e\u6b63\u5e38\u7684\u4f9d\u8d56\u9879\u4e00\u6837\uff0c\u53ef\u4ee5 raise \u5f02\u5e38\uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] \u8fd4\u56de\u503c \u00b6 \u65e0\u8bba\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u662f\u5426\u8fd4\u56de\u503c\uff0c\u8def\u5f84\u64cd\u4f5c\u90fd\u4e0d\u4f1a\u4f7f\u7528\u8fd9\u4e9b\u503c\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u590d\u7528\u5728\u5176\u4ed6\u4f4d\u7f6e\u4f7f\u7528\u8fc7\u7684\u3001\uff08\u80fd\u8fd4\u56de\u503c\u7684\uff09\u666e\u901a\u4f9d\u8d56\u9879\uff0c\u5373\u4f7f\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e2a\u503c\uff0c\u4e5f\u4f1a\u6267\u884c\u8be5\u4f9d\u8d56\u9879\uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] \u4e3a\u4e00\u7ec4\u8def\u5f84\u64cd\u4f5c\u5b9a\u4e49\u4f9d\u8d56\u9879 \u00b6 \u7a0d\u540e\uff0c \u5927\u578b\u5e94\u7528 - \u591a\u6587\u4ef6 \u4e00\u7ae0\u4e2d\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u591a\u4e2a\u6587\u4ef6\u521b\u5efa\u5927\u578b\u5e94\u7528\u7a0b\u5e8f\uff0c\u5728\u8fd9\u4e00\u7ae0\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3\u5230\u5982\u4f55\u4e3a\u4e00\u7ec4 \u8def\u5f84\u64cd\u4f5c \u58f0\u660e\u5355\u4e2a dependencies \u53c2\u6570\u3002 \u5168\u5c40\u4f9d\u8d56\u9879 \u00b6 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u5982\u4f55\u4e3a FastAPI \u5e94\u7528\u7a0b\u5e8f\u6dfb\u52a0\u5168\u5c40\u4f9d\u8d56\u9879\uff0c\u521b\u5efa\u5e94\u7528\u4e8e\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u7684\u4f9d\u8d56\u9879\u3002","title":"\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_1","text":"\u6709\u65f6\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u4f7f\u7528\u4f9d\u8d56\u9879\u7684\u8fd4\u56de\u503c\u3002 \u6216\u8005\u8bf4\uff0c\u6709\u4e9b\u4f9d\u8d56\u9879\u4e0d\u8fd4\u56de\u503c\u3002 \u4f46\u4ecd\u8981\u6267\u884c\u6216\u89e3\u6790\u8be5\u4f9d\u8d56\u9879\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u4e0d\u5fc5\u5728\u58f0\u660e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u65f6\u4f7f\u7528 Depends \uff0c\u800c\u662f\u53ef\u4ee5\u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u7531 dependencies \u7ec4\u6210\u7684 list \u3002","title":"\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependencies","text":"\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u652f\u6301\u53ef\u9009\u53c2\u6570 ~ dependencies \u3002 \u8be5\u53c2\u6570\u7684\u503c\u662f\u7531 Depends() \u7ec4\u6210\u7684 list \uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4f9d\u8d56\u9879\uff08\u4ee5\u4e0b\u7b80\u79f0\u4e3a \u201c\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u201d \uff09\u7684\u6267\u884c\u6216\u89e3\u6790\u65b9\u5f0f\u548c\u666e\u901a\u4f9d\u8d56\u9879\u4e00\u6837\uff0c\u4f46\u5c31\u7b97\u8fd9\u4e9b\u4f9d\u8d56\u9879\u4f1a\u8fd4\u56de\u503c\uff0c\u5b83\u4eec\u7684\u503c\u4e5f\u4e0d\u4f1a\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002 \u63d0\u793a \u6709\u4e9b\u7f16\u8f91\u5668\u4f1a\u68c0\u67e5\u4ee3\u7801\u4e2d\u6ca1\u4f7f\u7528\u8fc7\u7684\u51fd\u6570\u53c2\u6570\uff0c\u5e76\u663e\u793a\u9519\u8bef\u63d0\u793a\u3002 \u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u4f7f\u7528 dependencies \u53c2\u6570\uff0c\u53ef\u4ee5\u786e\u4fdd\u5728\u6267\u884c\u4f9d\u8d56\u9879\u7684\u540c\u65f6\uff0c\u907f\u514d\u7f16\u8f91\u5668\u663e\u793a\u9519\u8bef\u63d0\u793a\u3002 \u4f7f\u7528\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u8fd8\u53ef\u4ee5\u907f\u514d\u5f00\u53d1\u65b0\u4eba\u8bef\u4f1a\u4ee3\u7801\u4e2d\u5305\u542b\u65e0\u7528\u7684\u672a\u4f7f\u7528\u53c2\u6570\u3002 \u8bf4\u660e \u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528\u7684\u662f\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934 X-Key \u548c X-Token \u3002 \u4f46\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u5c24\u5176\u662f\u5728\u5b9e\u73b0\u5b89\u5168\u63aa\u65bd\u65f6\uff0c\u6700\u597d\u4f7f\u7528 FastAPI \u5185\u7f6e\u7684 \u5b89\u5168\u5de5\u5177 \uff08\u8be6\u89c1\u4e0b\u4e00\u7ae0\uff09\u3002","title":"\u5728\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4e2d\u6dfb\u52a0 dependencies \u53c2\u6570"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_2","text":"\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u4e5f\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u7684\u4f9d\u8d56\u9879 \u51fd\u6570 \u3002","title":"\u4f9d\u8d56\u9879\u9519\u8bef\u548c\u8fd4\u56de\u503c"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_3","text":"\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u53ef\u4ee5\u58f0\u660e\u8bf7\u6c42\u7684\u9700\u6c42\u9879\uff08\u6bd4\u5982\u54cd\u5e94\u5934\uff09\u6216\u5176\u4ed6\u5b50\u4f9d\u8d56\u9879\uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }]","title":"\u4f9d\u8d56\u9879\u7684\u9700\u6c42\u9879"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_4","text":"\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u4e0e\u6b63\u5e38\u7684\u4f9d\u8d56\u9879\u4e00\u6837\uff0c\u53ef\u4ee5 raise \u5f02\u5e38\uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }]","title":"\u89e6\u53d1\u5f02\u5e38"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_5","text":"\u65e0\u8bba\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u662f\u5426\u8fd4\u56de\u503c\uff0c\u8def\u5f84\u64cd\u4f5c\u90fd\u4e0d\u4f1a\u4f7f\u7528\u8fd9\u4e9b\u503c\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u590d\u7528\u5728\u5176\u4ed6\u4f4d\u7f6e\u4f7f\u7528\u8fc7\u7684\u3001\uff08\u80fd\u8fd4\u56de\u503c\u7684\uff09\u666e\u901a\u4f9d\u8d56\u9879\uff0c\u5373\u4f7f\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e2a\u503c\uff0c\u4e5f\u4f1a\u6267\u884c\u8be5\u4f9d\u8d56\u9879\uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }]","title":"\u8fd4\u56de\u503c"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_6","text":"\u7a0d\u540e\uff0c \u5927\u578b\u5e94\u7528 - \u591a\u6587\u4ef6 \u4e00\u7ae0\u4e2d\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u591a\u4e2a\u6587\u4ef6\u521b\u5efa\u5927\u578b\u5e94\u7528\u7a0b\u5e8f\uff0c\u5728\u8fd9\u4e00\u7ae0\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3\u5230\u5982\u4f55\u4e3a\u4e00\u7ec4 \u8def\u5f84\u64cd\u4f5c \u58f0\u660e\u5355\u4e2a dependencies \u53c2\u6570\u3002","title":"\u4e3a\u4e00\u7ec4\u8def\u5f84\u64cd\u4f5c\u5b9a\u4e49\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_7","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u5982\u4f55\u4e3a FastAPI \u5e94\u7528\u7a0b\u5e8f\u6dfb\u52a0\u5168\u5c40\u4f9d\u8d56\u9879\uff0c\u521b\u5efa\u5e94\u7528\u4e8e\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u7684\u4f9d\u8d56\u9879\u3002","title":"\u5168\u5c40\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/dependencies-with-yield/","text":"Dependencies with yield \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI supports dependencies that do some extra steps after finishing . To do this, use yield instead of return , and write the extra steps after. Tip Make sure to use yield one single time. Technical Details Any function that is valid to use with: @contextlib.contextmanager or @contextlib.asynccontextmanager would be valid to use as a FastAPI dependency. In fact, FastAPI uses those two decorators internally. A database dependency with yield \u00b6 For example, you could use this to create a database session and close it after finishing. Only the code prior to and including the yield statement is executed before sending a response: async def get_db (): db = DBSession () try : yield db finally : db . close () The yielded value is what is injected into path operations and other dependencies: async def get_db (): db = DBSession () try : yield db finally : db . close () The code following the yield statement is executed after the response has been delivered: async def get_db (): db = DBSession () try : yield db finally : db . close () Tip You can use async or normal functions. FastAPI will do the right thing with each, the same as with normal dependencies. A dependency with yield and try \u00b6 If you use a try block in a dependency with yield , you'll receive any exception that was thrown when using the dependency. For example, if some code at some point in the middle, in another dependency or in a path operation , made a database transaction \"rollback\" or create any other error, you will receive the exception in your dependency. So, you can look for that specific exception inside the dependency with except SomeException . In the same way, you can use finally to make sure the exit steps are executed, no matter if there was an exception or not. async def get_db (): db = DBSession () try : yield db finally : db . close () Sub-dependencies with yield \u00b6 You can have sub-dependencies and \"trees\" of sub-dependencies of any size and shape, and any or all of them can use yield . FastAPI will make sure that the \"exit code\" in each dependency with yield is run in the correct order. For example, dependency_c can have a dependency on dependency_b , and dependency_b on dependency_a : from fastapi import Depends async def dependency_a (): dep_a = generate_dep_a () try : yield dep_a finally : dep_a . close () async def dependency_b ( dep_a = Depends ( dependency_a )): dep_b = generate_dep_b () try : yield dep_b finally : dep_b . close ( dep_a ) async def dependency_c ( dep_b = Depends ( dependency_b )): dep_c = generate_dep_c () try : yield dep_c finally : dep_c . close ( dep_b ) And all of them can use yield . In this case dependency_c , to execute its exit code, needs the value from dependency_b (here named dep_b ) to still be available. And, in turn, dependency_b needs the value from dependency_a (here named dep_a ) to be available for its exit code. from fastapi import Depends async def dependency_a (): dep_a = generate_dep_a () try : yield dep_a finally : dep_a . close () async def dependency_b ( dep_a = Depends ( dependency_a )): dep_b = generate_dep_b () try : yield dep_b finally : dep_b . close ( dep_a ) async def dependency_c ( dep_b = Depends ( dependency_b )): dep_c = generate_dep_c () try : yield dep_c finally : dep_c . close ( dep_b ) The same way, you could have dependencies with yield and return mixed. And you could have a single dependency that requires several other dependencies with yield , etc. You can have any combinations of dependencies that you want. FastAPI will make sure everything is run in the correct order. Technical Details This works thanks to Python's Context Managers . FastAPI uses them internally to achieve this. Dependencies with yield and HTTPException \u00b6 You saw that you can use dependencies with yield and have try blocks that catch exceptions. It might be tempting to raise an HTTPException or similar in the exit code, after the yield . But it won't work . The exit code in dependencies with yield is executed after the response is sent, so Exception Handlers will have already run. There's nothing catching exceptions thrown by your dependencies in the exit code (after the yield ). So, if you raise an HTTPException after the yield , the default (or any custom) exception handler that catches HTTPException s and returns an HTTP 400 response won't be there to catch that exception anymore. This is what allows anything set in the dependency (e.g. a DB session) to, for example, be used by background tasks. Background tasks are run after the response has been sent. So there's no way to raise an HTTPException because there's not even a way to change the response that is already sent . But if a background task creates a DB error, at least you can rollback or cleanly close the session in the dependency with yield , and maybe log the error or report it to a remote tracking system. If you have some code that you know could raise an exception, do the most normal/\"Pythonic\" thing and add a try block in that section of the code. If you have custom exceptions that you would like to handle before returning the response and possibly modifying the response, maybe even raising an HTTPException , create a Custom Exception Handler . Tip You can still raise exceptions including HTTPException before the yield . But not after. The sequence of execution is more or less like this diagram. Time flows from top to bottom. And each column is one of the parts interacting or executing code. sequenceDiagram participant client as Client participant handler as Exception handler participant dep as Dep with yield participant operation as Path Operation participant tasks as Background tasks Note over client,tasks: Can raise exception for dependency, handled after response is sent Note over client,operation: Can raise HTTPException and can change the response client ->> dep: Start request Note over dep: Run code up to yield opt raise dep -->> handler: Raise HTTPException handler -->> client: HTTP error response dep -->> dep: Raise other exception end dep ->> operation: Run dependency, e.g. DB session opt raise operation -->> dep: Raise HTTPException dep -->> handler: Auto forward exception handler -->> client: HTTP error response operation -->> dep: Raise other exception dep -->> handler: Auto forward exception end operation ->> client: Return response to client Note over client,operation: Response is already sent, can't change it anymore opt Tasks operation -->> tasks: Send background tasks end opt Raise other exception tasks -->> dep: Raise other exception end Note over dep: After yield opt Handle other exception dep -->> dep: Handle exception, can't change response. E.g. close DB session. end Info Only one response will be sent to the client. It might be one of the error responses or it will be the response from the path operation . After one of those responses is sent, no other response can be sent. Tip This diagram shows HTTPException , but you could also raise any other exception for which you create a Custom Exception Handler . If you raise any exception, it will be passed to the dependencies with yield, including HTTPException , and then again to the exception handlers. If there's no exception handler for that exception, it will then be handled by the default internal ServerErrorMiddleware , returning a 500 HTTP status code, to let the client know that there was an error in the server. Context Managers \u00b6 What are \"Context Managers\" \u00b6 \"Context Managers\" are any of those Python objects that you can use in a with statement. For example, you can use with to read a file : with open ( \"./somefile.txt\" ) as f : contents = f . read () print ( contents ) Underneath, the open(\"./somefile.txt\") creates an object that is a called a \"Context Manager\". When the with block finishes, it makes sure to close the file, even if there were exceptions. When you create a dependency with yield , FastAPI will internally convert it to a context manager, and combine it with some other related tools. Using context managers in dependencies with yield \u00b6 Warning This is, more or less, an \"advanced\" idea. If you are just starting with FastAPI you might want to skip it for now. In Python, you can create Context Managers by creating a class with two methods: __enter__() and __exit__() . You can also use them inside of FastAPI dependencies with yield by using with or async with statements inside of the dependency function: class MySuperContextManager : def __init__ ( self ): self . db = DBSession () def __enter__ ( self ): return self . db def __exit__ ( self , exc_type , exc_value , traceback ): self . db . close () async def get_db (): with MySuperContextManager () as db : yield db Tip Another way to create a context manager is with: @contextlib.contextmanager or @contextlib.asynccontextmanager using them to decorate a function with a single yield . That's what FastAPI uses internally for dependencies with yield . But you don't have to use the decorators for FastAPI dependencies (and you shouldn't). FastAPI will do it for you internally.","title":"Dependencies with yield"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . FastAPI supports dependencies that do some extra steps after finishing . To do this, use yield instead of return , and write the extra steps after. Tip Make sure to use yield one single time. Technical Details Any function that is valid to use with: @contextlib.contextmanager or @contextlib.asynccontextmanager would be valid to use as a FastAPI dependency. In fact, FastAPI uses those two decorators internally.","title":"Dependencies with yield"},{"location":"tutorial/dependencies/dependencies-with-yield/#a-database-dependency-with-yield","text":"For example, you could use this to create a database session and close it after finishing. Only the code prior to and including the yield statement is executed before sending a response: async def get_db (): db = DBSession () try : yield db finally : db . close () The yielded value is what is injected into path operations and other dependencies: async def get_db (): db = DBSession () try : yield db finally : db . close () The code following the yield statement is executed after the response has been delivered: async def get_db (): db = DBSession () try : yield db finally : db . close () Tip You can use async or normal functions. FastAPI will do the right thing with each, the same as with normal dependencies.","title":"A database dependency with yield"},{"location":"tutorial/dependencies/dependencies-with-yield/#a-dependency-with-yield-and-try","text":"If you use a try block in a dependency with yield , you'll receive any exception that was thrown when using the dependency. For example, if some code at some point in the middle, in another dependency or in a path operation , made a database transaction \"rollback\" or create any other error, you will receive the exception in your dependency. So, you can look for that specific exception inside the dependency with except SomeException . In the same way, you can use finally to make sure the exit steps are executed, no matter if there was an exception or not. async def get_db (): db = DBSession () try : yield db finally : db . close ()","title":"A dependency with yield and try"},{"location":"tutorial/dependencies/dependencies-with-yield/#sub-dependencies-with-yield","text":"You can have sub-dependencies and \"trees\" of sub-dependencies of any size and shape, and any or all of them can use yield . FastAPI will make sure that the \"exit code\" in each dependency with yield is run in the correct order. For example, dependency_c can have a dependency on dependency_b , and dependency_b on dependency_a : from fastapi import Depends async def dependency_a (): dep_a = generate_dep_a () try : yield dep_a finally : dep_a . close () async def dependency_b ( dep_a = Depends ( dependency_a )): dep_b = generate_dep_b () try : yield dep_b finally : dep_b . close ( dep_a ) async def dependency_c ( dep_b = Depends ( dependency_b )): dep_c = generate_dep_c () try : yield dep_c finally : dep_c . close ( dep_b ) And all of them can use yield . In this case dependency_c , to execute its exit code, needs the value from dependency_b (here named dep_b ) to still be available. And, in turn, dependency_b needs the value from dependency_a (here named dep_a ) to be available for its exit code. from fastapi import Depends async def dependency_a (): dep_a = generate_dep_a () try : yield dep_a finally : dep_a . close () async def dependency_b ( dep_a = Depends ( dependency_a )): dep_b = generate_dep_b () try : yield dep_b finally : dep_b . close ( dep_a ) async def dependency_c ( dep_b = Depends ( dependency_b )): dep_c = generate_dep_c () try : yield dep_c finally : dep_c . close ( dep_b ) The same way, you could have dependencies with yield and return mixed. And you could have a single dependency that requires several other dependencies with yield , etc. You can have any combinations of dependencies that you want. FastAPI will make sure everything is run in the correct order. Technical Details This works thanks to Python's Context Managers . FastAPI uses them internally to achieve this.","title":"Sub-dependencies with yield"},{"location":"tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield-and-httpexception","text":"You saw that you can use dependencies with yield and have try blocks that catch exceptions. It might be tempting to raise an HTTPException or similar in the exit code, after the yield . But it won't work . The exit code in dependencies with yield is executed after the response is sent, so Exception Handlers will have already run. There's nothing catching exceptions thrown by your dependencies in the exit code (after the yield ). So, if you raise an HTTPException after the yield , the default (or any custom) exception handler that catches HTTPException s and returns an HTTP 400 response won't be there to catch that exception anymore. This is what allows anything set in the dependency (e.g. a DB session) to, for example, be used by background tasks. Background tasks are run after the response has been sent. So there's no way to raise an HTTPException because there's not even a way to change the response that is already sent . But if a background task creates a DB error, at least you can rollback or cleanly close the session in the dependency with yield , and maybe log the error or report it to a remote tracking system. If you have some code that you know could raise an exception, do the most normal/\"Pythonic\" thing and add a try block in that section of the code. If you have custom exceptions that you would like to handle before returning the response and possibly modifying the response, maybe even raising an HTTPException , create a Custom Exception Handler . Tip You can still raise exceptions including HTTPException before the yield . But not after. The sequence of execution is more or less like this diagram. Time flows from top to bottom. And each column is one of the parts interacting or executing code. sequenceDiagram participant client as Client participant handler as Exception handler participant dep as Dep with yield participant operation as Path Operation participant tasks as Background tasks Note over client,tasks: Can raise exception for dependency, handled after response is sent Note over client,operation: Can raise HTTPException and can change the response client ->> dep: Start request Note over dep: Run code up to yield opt raise dep -->> handler: Raise HTTPException handler -->> client: HTTP error response dep -->> dep: Raise other exception end dep ->> operation: Run dependency, e.g. DB session opt raise operation -->> dep: Raise HTTPException dep -->> handler: Auto forward exception handler -->> client: HTTP error response operation -->> dep: Raise other exception dep -->> handler: Auto forward exception end operation ->> client: Return response to client Note over client,operation: Response is already sent, can't change it anymore opt Tasks operation -->> tasks: Send background tasks end opt Raise other exception tasks -->> dep: Raise other exception end Note over dep: After yield opt Handle other exception dep -->> dep: Handle exception, can't change response. E.g. close DB session. end Info Only one response will be sent to the client. It might be one of the error responses or it will be the response from the path operation . After one of those responses is sent, no other response can be sent. Tip This diagram shows HTTPException , but you could also raise any other exception for which you create a Custom Exception Handler . If you raise any exception, it will be passed to the dependencies with yield, including HTTPException , and then again to the exception handlers. If there's no exception handler for that exception, it will then be handled by the default internal ServerErrorMiddleware , returning a 500 HTTP status code, to let the client know that there was an error in the server.","title":"Dependencies with yield and HTTPException"},{"location":"tutorial/dependencies/dependencies-with-yield/#context-managers","text":"","title":"Context Managers"},{"location":"tutorial/dependencies/dependencies-with-yield/#what-are-context-managers","text":"\"Context Managers\" are any of those Python objects that you can use in a with statement. For example, you can use with to read a file : with open ( \"./somefile.txt\" ) as f : contents = f . read () print ( contents ) Underneath, the open(\"./somefile.txt\") creates an object that is a called a \"Context Manager\". When the with block finishes, it makes sure to close the file, even if there were exceptions. When you create a dependency with yield , FastAPI will internally convert it to a context manager, and combine it with some other related tools.","title":"What are \"Context Managers\""},{"location":"tutorial/dependencies/dependencies-with-yield/#using-context-managers-in-dependencies-with-yield","text":"Warning This is, more or less, an \"advanced\" idea. If you are just starting with FastAPI you might want to skip it for now. In Python, you can create Context Managers by creating a class with two methods: __enter__() and __exit__() . You can also use them inside of FastAPI dependencies with yield by using with or async with statements inside of the dependency function: class MySuperContextManager : def __init__ ( self ): self . db = DBSession () def __enter__ ( self ): return self . db def __exit__ ( self , exc_type , exc_value , traceback ): self . db . close () async def get_db (): with MySuperContextManager () as db : yield db Tip Another way to create a context manager is with: @contextlib.contextmanager or @contextlib.asynccontextmanager using them to decorate a function with a single yield . That's what FastAPI uses internally for dependencies with yield . But you don't have to use the decorators for FastAPI dependencies (and you shouldn't). FastAPI will do it for you internally.","title":"Using context managers in dependencies with yield"},{"location":"tutorial/dependencies/global-dependencies/","text":"\u5168\u5c40\u4f9d\u8d56\u9879 \u00b6 \u6709\u65f6\uff0c\u6211\u4eec\u8981\u4e3a\u6574\u4e2a\u5e94\u7528\u6dfb\u52a0\u4f9d\u8d56\u9879\u3002 \u901a\u8fc7\u4e0e\u5b9a\u4e49 \u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879 \u7c7b\u4f3c\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u628a\u4f9d\u8d56\u9879\u6dfb\u52a0\u81f3\u6574\u4e2a FastAPI \u5e94\u7528\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u53ef\u4ee5\u4e3a\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u5e94\u7528\u8be5\u4f9d\u8d56\u9879\uff1a from fastapi import Depends , FastAPI , Header , HTTPException async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key app = FastAPI ( dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) @app . get ( \"/items/\" ) async def read_items (): return [{ \"item\" : \"Portal Gun\" }, { \"item\" : \"Plumbus\" }] @app . get ( \"/users/\" ) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] \u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879 \u4e00\u7ae0\u7684\u601d\u8def\u5747\u9002\u7528\u4e8e\u5168\u5c40\u4f9d\u8d56\u9879\uff0c \u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e9b\u4f9d\u8d56\u9879\u53ef\u4ee5\u7528\u4e8e\u5e94\u7528\u4e2d\u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u3002 \u4e3a\u4e00\u7ec4\u8def\u5f84\u64cd\u4f5c\u5b9a\u4e49\u4f9d\u8d56\u9879 \u00b6 \u7a0d\u540e\uff0c \u5927\u578b\u5e94\u7528 - \u591a\u6587\u4ef6 \u4e00\u7ae0\u4e2d\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u591a\u4e2a\u6587\u4ef6\u521b\u5efa\u5927\u578b\u5e94\u7528\u7a0b\u5e8f\uff0c\u5728\u8fd9\u4e00\u7ae0\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3\u5230\u5982\u4f55\u4e3a\u4e00\u7ec4 \u8def\u5f84\u64cd\u4f5c \u58f0\u660e\u5355\u4e2a dependencies \u53c2\u6570\u3002","title":"\u5168\u5c40\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/global-dependencies/#_1","text":"\u6709\u65f6\uff0c\u6211\u4eec\u8981\u4e3a\u6574\u4e2a\u5e94\u7528\u6dfb\u52a0\u4f9d\u8d56\u9879\u3002 \u901a\u8fc7\u4e0e\u5b9a\u4e49 \u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879 \u7c7b\u4f3c\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u628a\u4f9d\u8d56\u9879\u6dfb\u52a0\u81f3\u6574\u4e2a FastAPI \u5e94\u7528\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u53ef\u4ee5\u4e3a\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u5e94\u7528\u8be5\u4f9d\u8d56\u9879\uff1a from fastapi import Depends , FastAPI , Header , HTTPException async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key app = FastAPI ( dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) @app . get ( \"/items/\" ) async def read_items (): return [{ \"item\" : \"Portal Gun\" }, { \"item\" : \"Plumbus\" }] @app . get ( \"/users/\" ) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] \u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879 \u4e00\u7ae0\u7684\u601d\u8def\u5747\u9002\u7528\u4e8e\u5168\u5c40\u4f9d\u8d56\u9879\uff0c \u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e9b\u4f9d\u8d56\u9879\u53ef\u4ee5\u7528\u4e8e\u5e94\u7528\u4e2d\u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u3002","title":"\u5168\u5c40\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/global-dependencies/#_2","text":"\u7a0d\u540e\uff0c \u5927\u578b\u5e94\u7528 - \u591a\u6587\u4ef6 \u4e00\u7ae0\u4e2d\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u591a\u4e2a\u6587\u4ef6\u521b\u5efa\u5927\u578b\u5e94\u7528\u7a0b\u5e8f\uff0c\u5728\u8fd9\u4e00\u7ae0\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3\u5230\u5982\u4f55\u4e3a\u4e00\u7ec4 \u8def\u5f84\u64cd\u4f5c \u58f0\u660e\u5355\u4e2a dependencies \u53c2\u6570\u3002","title":"\u4e3a\u4e00\u7ec4\u8def\u5f84\u64cd\u4f5c\u5b9a\u4e49\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/sub-dependencies/","text":"\u5b50\u4f9d\u8d56\u9879 \u00b6 FastAPI \u652f\u6301\u521b\u5efa\u542b \u5b50\u4f9d\u8d56\u9879 \u7684\u4f9d\u8d56\u9879\u3002 \u5e76\u4e14\uff0c\u53ef\u4ee5\u6309\u9700\u58f0\u660e\u4efb\u610f \u6df1\u5ea6 \u7684\u5b50\u4f9d\u8d56\u9879\u5d4c\u5957\u5c42\u7ea7\u3002 FastAPI \u8d1f\u8d23\u5904\u7406\u89e3\u6790\u4e0d\u540c\u6df1\u5ea6\u7684\u5b50\u4f9d\u8d56\u9879\u3002 \u7b2c\u4e00\u5c42\u4f9d\u8d56\u9879 \u00b6 \u4e0b\u5217\u4ee3\u7801\u521b\u5efa\u4e86\u7b2c\u4e00\u5c42\u4f9d\u8d56\u9879\uff1a from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } \u8fd9\u6bb5\u4ee3\u7801\u58f0\u660e\u4e86\u7c7b\u578b\u4e3a str \u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 q \uff0c\u7136\u540e\u8fd4\u56de\u8fd9\u4e2a\u67e5\u8be2\u53c2\u6570\u3002 \u8fd9\u4e2a\u51fd\u6570\u5f88\u7b80\u5355\uff08\u4e0d\u8fc7\u4e5f\u6ca1\u4ec0\u4e48\u7528\uff09\uff0c\u4f46\u5374\u6709\u52a9\u4e8e\u8ba9\u6211\u4eec\u4e13\u6ce8\u4e8e\u4e86\u89e3\u5b50\u4f9d\u8d56\u9879\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002 \u7b2c\u4e8c\u5c42\u4f9d\u8d56\u9879 \u00b6 \u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u53e6\u4e00\u4e2a\u4f9d\u8d56\u9879\u51fd\u6570\uff0c\u5e76\u540c\u65f6\u7528\u8be5\u4f9d\u8d56\u9879\u81ea\u8eab\u518d\u58f0\u660e\u4e00\u4e2a\u4f9d\u8d56\u9879\uff08\u6240\u4ee5\u8fd9\u4e5f\u662f\u4e00\u4e2a\u300c\u4f9d\u8d56\u9879\u300d\uff09\uff1a from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } \u8fd9\u91cc\u91cd\u70b9\u8bf4\u660e\u4e00\u4e0b\u58f0\u660e\u7684\u53c2\u6570\uff1a \u5c3d\u7ba1\u8be5\u51fd\u6570\u81ea\u8eab\u662f\u4f9d\u8d56\u9879\uff0c\u4f46\u8fd8\u58f0\u660e\u4e86\u53e6\u4e00\u4e2a\u4f9d\u8d56\u9879\uff08\u5b83\u300c\u4f9d\u8d56\u300d\u4e8e\u5176\u4ed6\u5bf9\u8c61\uff09 \u8be5\u51fd\u6570\u4f9d\u8d56 query_extractor , \u5e76\u628a query_extractor \u7684\u8fd4\u56de\u503c\u8d4b\u7ed9\u53c2\u6570 q \u540c\u65f6\uff0c\u8be5\u51fd\u6570\u8fd8\u58f0\u660e\u4e86\u7c7b\u578b\u662f str \u7684\u53ef\u9009 cookie\uff08 last_query \uff09 \u7528\u6237\u672a\u63d0\u4f9b\u67e5\u8be2\u53c2\u6570 q \u65f6\uff0c\u5219\u4f7f\u7528\u4e0a\u6b21\u4f7f\u7528\u540e\u4fdd\u5b58\u5728 cookie \u4e2d\u7684\u67e5\u8be2 \u4f7f\u7528\u4f9d\u8d56\u9879 \u00b6 \u63a5\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4f9d\u8d56\u9879\uff1a from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } \u4fe1\u606f \u6ce8\u610f\uff0c\u8fd9\u91cc\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u53ea\u58f0\u660e\u4e86\u4e00\u4e2a\u4f9d\u8d56\u9879\uff0c\u5373 query_or_cookie_extractor \u3002 \u4f46 FastAPI \u5fc5\u987b\u5148\u5904\u7406 query_extractor \uff0c\u4ee5\u4fbf\u5728\u8c03\u7528 query_or_cookie_extractor \u65f6\u4f7f\u7528 query_extractor \u8fd4\u56de\u7684\u7ed3\u679c\u3002 graph TB query_extractor([\"query_extractor\"]) query_or_cookie_extractor([\"query_or_cookie_extractor\"]) read_query[\"/items/\"] query_extractor --> query_or_cookie_extractor --> read_query \u591a\u6b21\u4f7f\u7528\u540c\u4e00\u4e2a\u4f9d\u8d56\u9879 \u00b6 \u5982\u679c\u5728\u540c\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u591a\u6b21\u58f0\u660e\u4e86\u540c\u4e00\u4e2a\u4f9d\u8d56\u9879\uff0c\u4f8b\u5982\uff0c\u591a\u4e2a\u4f9d\u8d56\u9879\u5171\u7528\u4e00\u4e2a\u5b50\u4f9d\u8d56\u9879\uff0c FastAPI \u5728\u5904\u7406\u540c\u4e00\u8bf7\u6c42\u65f6\uff0c\u53ea\u8c03\u7528\u4e00\u6b21\u8be5\u5b50\u4f9d\u8d56\u9879\u3002 FastAPI \u4e0d\u4f1a\u4e3a\u540c\u4e00\u4e2a\u8bf7\u6c42\u591a\u6b21\u8c03\u7528\u540c\u4e00\u4e2a\u4f9d\u8d56\u9879\uff0c\u800c\u662f\u628a\u4f9d\u8d56\u9879\u7684\u8fd4\u56de\u503c\u8fdb\u884c \u300c\u7f13\u5b58\u300d \uff0c\u5e76\u628a\u5b83\u4f20\u9012\u7ed9\u540c\u4e00\u8bf7\u6c42\u4e2d\u6240\u6709\u9700\u8981\u4f7f\u7528\u8be5\u8fd4\u56de\u503c\u7684\u300c\u4f9d\u8d56\u9879\u300d\u3002 \u5728\u9ad8\u7ea7\u4f7f\u7528\u573a\u666f\u4e2d\uff0c\u5982\u679c\u4e0d\u60f3\u4f7f\u7528\u300c\u7f13\u5b58\u300d\u503c\uff0c\u800c\u662f\u4e3a\u9700\u8981\u5728\u540c\u4e00\u8bf7\u6c42\u7684\u6bcf\u4e00\u6b65\u64cd\u4f5c\uff08\u591a\u6b21\uff09\u4e2d\u90fd\u5b9e\u9645\u8c03\u7528\u4f9d\u8d56\u9879\uff0c\u53ef\u4ee5\u628a Depends \u7684\u53c2\u6570 use_cache \u7684\u503c\u8bbe\u7f6e\u4e3a False : async def needy_dependency ( fresh_value : str = Depends ( get_value , use_cache = False )): return { \"fresh_value\" : fresh_value } \u5c0f\u7ed3 \u00b6 \u5343\u4e07\u522b\u88ab\u672c\u7ae0\u91cc\u8fd9\u4e9b\u82b1\u91cc\u80e1\u54e8\u7684\u8bcd\u85fb\u5413\u5012\u4e86\uff0c\u5176\u5b9e \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u975e\u5e38\u7b80\u5355\u3002 \u4f9d\u8d56\u6ce8\u5165\u65e0\u975e\u662f\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e00\u6837\u7684\u51fd\u6570\u7f62\u4e86\u3002 \u4f46\u5b83\u4f9d\u7136\u975e\u5e38\u5f3a\u5927\uff0c\u80fd\u591f\u58f0\u660e\u4efb\u610f\u5d4c\u5957\u6df1\u5ea6\u7684\u300c\u56fe\u300d\u6216\u6811\u72b6\u7684\u4f9d\u8d56\u7ed3\u6784\u3002 \u63d0\u793a \u8fd9\u4e9b\u7b80\u5355\u7684\u4f8b\u5b50\u73b0\u5728\u770b\u4e0a\u53bb\u867d\u7136\u6ca1\u6709\u4ec0\u4e48\u5b9e\u7528\u4ef7\u503c\uff0c \u4f46\u5728 \u5b89\u5168 \u4e00\u7ae0\u4e2d\uff0c\u60a8\u4f1a\u4e86\u89e3\u5230\u8fd9\u4e9b\u4f8b\u5b50\u7684\u7528\u9014\uff0c \u4ee5\u53ca\u8fd9\u4e9b\u4f8b\u5b50\u6240\u80fd\u8282\u7701\u7684\u4ee3\u7801\u91cf\u3002","title":"\u5b50\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/sub-dependencies/#_1","text":"FastAPI \u652f\u6301\u521b\u5efa\u542b \u5b50\u4f9d\u8d56\u9879 \u7684\u4f9d\u8d56\u9879\u3002 \u5e76\u4e14\uff0c\u53ef\u4ee5\u6309\u9700\u58f0\u660e\u4efb\u610f \u6df1\u5ea6 \u7684\u5b50\u4f9d\u8d56\u9879\u5d4c\u5957\u5c42\u7ea7\u3002 FastAPI \u8d1f\u8d23\u5904\u7406\u89e3\u6790\u4e0d\u540c\u6df1\u5ea6\u7684\u5b50\u4f9d\u8d56\u9879\u3002","title":"\u5b50\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/sub-dependencies/#_2","text":"\u4e0b\u5217\u4ee3\u7801\u521b\u5efa\u4e86\u7b2c\u4e00\u5c42\u4f9d\u8d56\u9879\uff1a from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } \u8fd9\u6bb5\u4ee3\u7801\u58f0\u660e\u4e86\u7c7b\u578b\u4e3a str \u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 q \uff0c\u7136\u540e\u8fd4\u56de\u8fd9\u4e2a\u67e5\u8be2\u53c2\u6570\u3002 \u8fd9\u4e2a\u51fd\u6570\u5f88\u7b80\u5355\uff08\u4e0d\u8fc7\u4e5f\u6ca1\u4ec0\u4e48\u7528\uff09\uff0c\u4f46\u5374\u6709\u52a9\u4e8e\u8ba9\u6211\u4eec\u4e13\u6ce8\u4e8e\u4e86\u89e3\u5b50\u4f9d\u8d56\u9879\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002","title":"\u7b2c\u4e00\u5c42\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/sub-dependencies/#_3","text":"\u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u53e6\u4e00\u4e2a\u4f9d\u8d56\u9879\u51fd\u6570\uff0c\u5e76\u540c\u65f6\u7528\u8be5\u4f9d\u8d56\u9879\u81ea\u8eab\u518d\u58f0\u660e\u4e00\u4e2a\u4f9d\u8d56\u9879\uff08\u6240\u4ee5\u8fd9\u4e5f\u662f\u4e00\u4e2a\u300c\u4f9d\u8d56\u9879\u300d\uff09\uff1a from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } \u8fd9\u91cc\u91cd\u70b9\u8bf4\u660e\u4e00\u4e0b\u58f0\u660e\u7684\u53c2\u6570\uff1a \u5c3d\u7ba1\u8be5\u51fd\u6570\u81ea\u8eab\u662f\u4f9d\u8d56\u9879\uff0c\u4f46\u8fd8\u58f0\u660e\u4e86\u53e6\u4e00\u4e2a\u4f9d\u8d56\u9879\uff08\u5b83\u300c\u4f9d\u8d56\u300d\u4e8e\u5176\u4ed6\u5bf9\u8c61\uff09 \u8be5\u51fd\u6570\u4f9d\u8d56 query_extractor , \u5e76\u628a query_extractor \u7684\u8fd4\u56de\u503c\u8d4b\u7ed9\u53c2\u6570 q \u540c\u65f6\uff0c\u8be5\u51fd\u6570\u8fd8\u58f0\u660e\u4e86\u7c7b\u578b\u662f str \u7684\u53ef\u9009 cookie\uff08 last_query \uff09 \u7528\u6237\u672a\u63d0\u4f9b\u67e5\u8be2\u53c2\u6570 q \u65f6\uff0c\u5219\u4f7f\u7528\u4e0a\u6b21\u4f7f\u7528\u540e\u4fdd\u5b58\u5728 cookie \u4e2d\u7684\u67e5\u8be2","title":"\u7b2c\u4e8c\u5c42\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/sub-dependencies/#_4","text":"\u63a5\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4f9d\u8d56\u9879\uff1a from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } \u4fe1\u606f \u6ce8\u610f\uff0c\u8fd9\u91cc\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u53ea\u58f0\u660e\u4e86\u4e00\u4e2a\u4f9d\u8d56\u9879\uff0c\u5373 query_or_cookie_extractor \u3002 \u4f46 FastAPI \u5fc5\u987b\u5148\u5904\u7406 query_extractor \uff0c\u4ee5\u4fbf\u5728\u8c03\u7528 query_or_cookie_extractor \u65f6\u4f7f\u7528 query_extractor \u8fd4\u56de\u7684\u7ed3\u679c\u3002 graph TB query_extractor([\"query_extractor\"]) query_or_cookie_extractor([\"query_or_cookie_extractor\"]) read_query[\"/items/\"] query_extractor --> query_or_cookie_extractor --> read_query","title":"\u4f7f\u7528\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/sub-dependencies/#_5","text":"\u5982\u679c\u5728\u540c\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u591a\u6b21\u58f0\u660e\u4e86\u540c\u4e00\u4e2a\u4f9d\u8d56\u9879\uff0c\u4f8b\u5982\uff0c\u591a\u4e2a\u4f9d\u8d56\u9879\u5171\u7528\u4e00\u4e2a\u5b50\u4f9d\u8d56\u9879\uff0c FastAPI \u5728\u5904\u7406\u540c\u4e00\u8bf7\u6c42\u65f6\uff0c\u53ea\u8c03\u7528\u4e00\u6b21\u8be5\u5b50\u4f9d\u8d56\u9879\u3002 FastAPI \u4e0d\u4f1a\u4e3a\u540c\u4e00\u4e2a\u8bf7\u6c42\u591a\u6b21\u8c03\u7528\u540c\u4e00\u4e2a\u4f9d\u8d56\u9879\uff0c\u800c\u662f\u628a\u4f9d\u8d56\u9879\u7684\u8fd4\u56de\u503c\u8fdb\u884c \u300c\u7f13\u5b58\u300d \uff0c\u5e76\u628a\u5b83\u4f20\u9012\u7ed9\u540c\u4e00\u8bf7\u6c42\u4e2d\u6240\u6709\u9700\u8981\u4f7f\u7528\u8be5\u8fd4\u56de\u503c\u7684\u300c\u4f9d\u8d56\u9879\u300d\u3002 \u5728\u9ad8\u7ea7\u4f7f\u7528\u573a\u666f\u4e2d\uff0c\u5982\u679c\u4e0d\u60f3\u4f7f\u7528\u300c\u7f13\u5b58\u300d\u503c\uff0c\u800c\u662f\u4e3a\u9700\u8981\u5728\u540c\u4e00\u8bf7\u6c42\u7684\u6bcf\u4e00\u6b65\u64cd\u4f5c\uff08\u591a\u6b21\uff09\u4e2d\u90fd\u5b9e\u9645\u8c03\u7528\u4f9d\u8d56\u9879\uff0c\u53ef\u4ee5\u628a Depends \u7684\u53c2\u6570 use_cache \u7684\u503c\u8bbe\u7f6e\u4e3a False : async def needy_dependency ( fresh_value : str = Depends ( get_value , use_cache = False )): return { \"fresh_value\" : fresh_value }","title":"\u591a\u6b21\u4f7f\u7528\u540c\u4e00\u4e2a\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/sub-dependencies/#_6","text":"\u5343\u4e07\u522b\u88ab\u672c\u7ae0\u91cc\u8fd9\u4e9b\u82b1\u91cc\u80e1\u54e8\u7684\u8bcd\u85fb\u5413\u5012\u4e86\uff0c\u5176\u5b9e \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u975e\u5e38\u7b80\u5355\u3002 \u4f9d\u8d56\u6ce8\u5165\u65e0\u975e\u662f\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e00\u6837\u7684\u51fd\u6570\u7f62\u4e86\u3002 \u4f46\u5b83\u4f9d\u7136\u975e\u5e38\u5f3a\u5927\uff0c\u80fd\u591f\u58f0\u660e\u4efb\u610f\u5d4c\u5957\u6df1\u5ea6\u7684\u300c\u56fe\u300d\u6216\u6811\u72b6\u7684\u4f9d\u8d56\u7ed3\u6784\u3002 \u63d0\u793a \u8fd9\u4e9b\u7b80\u5355\u7684\u4f8b\u5b50\u73b0\u5728\u770b\u4e0a\u53bb\u867d\u7136\u6ca1\u6709\u4ec0\u4e48\u5b9e\u7528\u4ef7\u503c\uff0c \u4f46\u5728 \u5b89\u5168 \u4e00\u7ae0\u4e2d\uff0c\u60a8\u4f1a\u4e86\u89e3\u5230\u8fd9\u4e9b\u4f8b\u5b50\u7684\u7528\u9014\uff0c \u4ee5\u53ca\u8fd9\u4e9b\u4f8b\u5b50\u6240\u80fd\u8282\u7701\u7684\u4ee3\u7801\u91cf\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/security/","text":"\u5b89\u5168\u6027\u7b80\u4ecb \u00b6 \u6709\u8bb8\u591a\u65b9\u6cd5\u53ef\u4ee5\u5904\u7406\u5b89\u5168\u6027\u3001\u8eab\u4efd\u8ba4\u8bc1\u548c\u6388\u6743\u7b49\u95ee\u9898\u3002 \u800c\u4e14\u8fd9\u901a\u5e38\u662f\u4e00\u4e2a\u590d\u6742\u800c\u300c\u56f0\u96be\u300d\u7684\u8bdd\u9898\u3002 \u5728\u8bb8\u591a\u6846\u67b6\u548c\u7cfb\u7edf\u4e2d\uff0c\u4ec5\u5904\u7406\u5b89\u5168\u6027\u548c\u8eab\u4efd\u8ba4\u8bc1\u5c31\u4f1a\u82b1\u8d39\u5927\u91cf\u7684\u7cbe\u529b\u548c\u4ee3\u7801\uff08\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u5360\u7f16\u5199\u7684\u6240\u6709\u4ee3\u7801\u7684 50\uff05 \u6216\u66f4\u591a\uff09\u3002 FastAPI \u63d0\u4f9b\u4e86\u591a\u79cd\u5de5\u5177\uff0c\u53ef\u5e2e\u52a9\u4f60\u4ee5\u6807\u51c6\u7684\u65b9\u5f0f\u8f7b\u677e\u3001\u5feb\u901f\u5730\u5904\u7406 \u5b89\u5168\u6027 \uff0c\u800c\u65e0\u9700\u7814\u7a76\u548c\u5b66\u4e60\u6240\u6709\u7684\u5b89\u5168\u89c4\u8303\u3002 \u4f46\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e9b\u5c0f\u7684\u6982\u5ff5\u3002 \u6ca1\u6709\u65f6\u95f4\uff1f \u00b6 \u5982\u679c\u4f60\u4e0d\u5173\u5fc3\u8fd9\u4e9b\u672f\u8bed\uff0c\u800c\u53ea\u9700\u8981 \u7acb\u5373 \u901a\u8fc7\u57fa\u4e8e\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u8eab\u4efd\u8ba4\u8bc1\u6765\u589e\u52a0\u5b89\u5168\u6027\uff0c\u8bf7\u8df3\u8f6c\u5230\u4e0b\u4e00\u7ae0\u3002 OAuth2 \u00b6 OAuth2\u662f\u4e00\u4e2a\u89c4\u8303\uff0c\u5b83\u5b9a\u4e49\u4e86\u51e0\u79cd\u5904\u7406\u8eab\u4efd\u8ba4\u8bc1\u548c\u6388\u6743\u7684\u65b9\u6cd5\u3002 \u5b83\u662f\u4e00\u4e2a\u76f8\u5f53\u5e7f\u6cdb\u7684\u89c4\u8303\uff0c\u6db5\u76d6\u4e86\u4e00\u4e9b\u590d\u6742\u7684\u4f7f\u7528\u573a\u666f\u3002 \u5b83\u5305\u62ec\u4e86\u4f7f\u7528\u300c\u7b2c\u4e09\u65b9\u300d\u8fdb\u884c\u8eab\u4efd\u8ba4\u8bc1\u7684\u65b9\u6cd5\u3002 \u8fd9\u5c31\u662f\u6240\u6709\u5e26\u6709\u300c\u4f7f\u7528 Facebook\uff0cGoogle\uff0cTwitter\uff0cGitHub \u767b\u5f55\u300d\u7684\u7cfb\u7edf\u80cc\u540e\u6240\u4f7f\u7528\u7684\u673a\u5236\u3002 OAuth 1 \u00b6 \u6709\u4e00\u4e2a OAuth 1\uff0c\u5b83\u4e0e OAuth2 \u5b8c\u5168\u4e0d\u540c\uff0c\u5e76\u4e14\u66f4\u4e3a\u590d\u6742\uff0c\u56e0\u4e3a\u5b83\u76f4\u63a5\u5305\u542b\u4e86\u6709\u5173\u5982\u4f55\u52a0\u5bc6\u901a\u4fe1\u7684\u89c4\u8303\u3002 \u5982\u4eca\u5b83\u5df2\u7ecf\u4e0d\u662f\u5f88\u6d41\u884c\uff0c\u6ca1\u6709\u88ab\u5e7f\u6cdb\u4f7f\u7528\u4e86\u3002 OAuth2 \u6ca1\u6709\u6307\u5b9a\u5982\u4f55\u52a0\u5bc6\u901a\u4fe1\uff0c\u5b83\u671f\u671b\u4f60\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528 HTTPS \u8fdb\u884c\u901a\u4fe1\u3002 Tip \u5728\u6709\u5173 \u90e8\u7f72 \u7684\u7ae0\u8282\u4e2d\uff0c\u4f60\u5c06\u4e86\u89e3\u5982\u4f55\u4f7f\u7528 Traefik \u548c Let's Encrypt \u514d\u8d39\u8bbe\u7f6e HTTPS\u3002 OpenID Connect \u00b6 OpenID Connect \u662f\u53e6\u4e00\u4e2a\u57fa\u4e8e OAuth2 \u7684\u89c4\u8303\u3002 \u5b83\u53ea\u662f\u6269\u5c55\u4e86 OAuth2\uff0c\u5e76\u660e\u786e\u4e86\u4e00\u4e9b\u5728 OAuth2 \u4e2d\u76f8\u5bf9\u6a21\u7cca\u7684\u5185\u5bb9\uff0c\u4ee5\u5c1d\u8bd5\u4f7f\u5176\u66f4\u5177\u4e92\u64cd\u4f5c\u6027\u3002 \u4f8b\u5982\uff0cGoogle \u767b\u5f55\u4f7f\u7528 OpenID Connect\uff08\u5e95\u5c42\u4f7f\u7528OAuth2\uff09\u3002 \u4f46\u662f Facebook \u767b\u5f55\u4e0d\u652f\u6301 OpenID Connect\u3002\u5b83\u5177\u6709\u81ea\u5df1\u7684 OAuth2 \u98ce\u683c\u3002 OpenID\uff08\u975e\u300cOpenID Connect\u300d\uff09 \u00b6 \u8fd8\u6709\u4e00\u4e2a\u300cOpenID\u300d\u89c4\u8303\u3002\u5b83\u8bd5\u56fe\u89e3\u51b3\u4e0e OpenID Connect \u76f8\u540c\u7684\u95ee\u9898\uff0c\u4f46\u5b83\u4e0d\u662f\u57fa\u4e8e OAuth2\u3002 \u56e0\u6b64\uff0c\u5b83\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u9644\u52a0\u7cfb\u7edf\u3002 \u5982\u4eca\u5b83\u5df2\u7ecf\u4e0d\u662f\u5f88\u6d41\u884c\uff0c\u6ca1\u6709\u88ab\u5e7f\u6cdb\u4f7f\u7528\u4e86\u3002 OpenAPI \u00b6 OpenAPI\uff08\u4ee5\u524d\u79f0\u4e3a Swagger\uff09\u662f\u7528\u4e8e\u6784\u5efa API \u7684\u5f00\u653e\u89c4\u8303\uff08\u73b0\u5df2\u6210\u4e3a Linux Foundation \u7684\u4e00\u90e8\u5206\uff09\u3002 FastAPI \u57fa\u4e8e OpenAPI \u3002 \u8fd9\u5c31\u662f\u4f7f\u591a\u4e2a\u81ea\u52a8\u4ea4\u4e92\u5f0f\u6587\u6863\u754c\u9762\uff0c\u4ee3\u7801\u751f\u6210\u7b49\u6210\u4e3a\u53ef\u80fd\u7684\u539f\u56e0\u3002 OpenAPI \u6709\u4e00\u79cd\u5b9a\u4e49\u591a\u4e2a\u5b89\u5168\u300c\u65b9\u6848\u300d\u7684\u65b9\u6cd5\u3002 \u901a\u8fc7\u4f7f\u7528\u5b83\u4eec\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u6240\u6709\u8fd9\u4e9b\u57fa\u4e8e\u6807\u51c6\u7684\u5de5\u5177\uff0c\u5305\u62ec\u8fd9\u4e9b\u4ea4\u4e92\u5f0f\u6587\u6863\u7cfb\u7edf\u3002 OpenAPI \u5b9a\u4e49\u4e86\u4ee5\u4e0b\u5b89\u5168\u65b9\u6848\uff1a apiKey \uff1a\u4e00\u4e2a\u7279\u5b9a\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u5bc6\u94a5\uff0c\u53ef\u4ee5\u6765\u81ea\uff1a \u67e5\u8be2\u53c2\u6570\u3002 \u8bf7\u6c42\u5934\u3002 cookie\u3002 http \uff1a\u6807\u51c6\u7684 HTTP \u8eab\u4efd\u8ba4\u8bc1\u7cfb\u7edf\uff0c\u5305\u62ec\uff1a bearer : \u4e00\u4e2a\u503c\u4e3a Bearer \u52a0\u4ee4\u724c\u5b57\u7b26\u4e32\u7684 Authorization \u8bf7\u6c42\u5934\u3002\u8fd9\u662f\u4ece OAuth2 \u7ee7\u627f\u7684\u3002 HTTP Basic \u8ba4\u8bc1\u65b9\u5f0f\u3002 HTTP Digest\uff0c\u7b49\u7b49\u3002 oauth2 \uff1a\u6240\u6709\u7684 OAuth2 \u5904\u7406\u5b89\u5168\u6027\u7684\u65b9\u5f0f\uff08\u79f0\u4e3a\u300c\u6d41\u7a0b\u300d\uff09\u3002 *\u4ee5\u4e0b\u51e0\u79cd\u6d41\u7a0b\u9002\u5408\u6784\u5efa OAuth 2.0 \u8eab\u4efd\u8ba4\u8bc1\u7684\u63d0\u4f9b\u8005\uff08\u4f8b\u5982 Google\uff0cFacebook\uff0cTwitter\uff0cGitHub \u7b49\uff09\uff1a * implicit * clientCredentials * authorizationCode \u4f46\u662f\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u300c\u6d41\u7a0b\u300d\u53ef\u4ee5\u5b8c\u7f8e\u5730\u7528\u4e8e\u76f4\u63a5\u5728\u540c\u4e00\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5904\u7406\u8eab\u4efd\u8ba4\u8bc1\uff1a password \uff1a\u63a5\u4e0b\u6765\u7684\u51e0\u7ae0\u5c06\u4ecb\u7ecd\u5b83\u7684\u793a\u4f8b\u3002 openIdConnect \uff1a\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b9a\u4e49\u5982\u4f55\u81ea\u52a8\u53d1\u73b0 OAuth2 \u8eab\u4efd\u8ba4\u8bc1\u6570\u636e\u7684\u65b9\u6cd5\u3002 \u6b64\u81ea\u52a8\u53d1\u73b0\u673a\u5236\u662f OpenID Connect \u89c4\u8303\u4e2d\u5b9a\u4e49\u7684\u5185\u5bb9\u3002 Tip \u96c6\u6210\u5176\u4ed6\u8eab\u4efd\u8ba4\u8bc1/\u6388\u6743\u63d0\u4f9b\u8005\uff08\u4f8b\u5982Google\uff0cFacebook\uff0cTwitter\uff0cGitHub\u7b49\uff09\u4e5f\u662f\u53ef\u80fd\u7684\uff0c\u800c\u4e14\u8f83\u4e3a\u5bb9\u6613\u3002 \u6700\u590d\u6742\u7684\u95ee\u9898\u662f\u521b\u5efa\u4e00\u4e2a\u50cf\u8fd9\u6837\u7684\u8eab\u4efd\u8ba4\u8bc1/\u6388\u6743\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u4f46\u662f FastAPI \u4e3a\u4f60\u63d0\u4f9b\u4e86\u8f7b\u677e\u5b8c\u6210\u4efb\u52a1\u7684\u5de5\u5177\uff0c\u540c\u65f6\u4e3a\u4f60\u89e3\u51b3\u4e86\u91cd\u6d3b\u3002 FastAPI \u5b9e\u7528\u5de5\u5177 \u00b6 FastAPI \u5728 fastapi.security \u6a21\u5757\u4e2d\u4e3a\u6bcf\u4e2a\u5b89\u5168\u65b9\u6848\u63d0\u4f9b\u4e86\u51e0\u79cd\u5de5\u5177\uff0c\u8fd9\u4e9b\u5de5\u5177\u7b80\u5316\u4e86\u8fd9\u4e9b\u5b89\u5168\u673a\u5236\u7684\u4f7f\u7528\u65b9\u6cd5\u3002 \u5728\u4e0b\u4e00\u7ae0\u4e2d\uff0c\u4f60\u5c06\u770b\u5230\u5982\u4f55\u4f7f\u7528 FastAPI \u6240\u63d0\u4f9b\u7684\u8fd9\u4e9b\u5de5\u5177\u4e3a\u4f60\u7684 API \u589e\u52a0\u5b89\u5168\u6027\u3002 \u800c\u4e14\u4f60\u8fd8\u5c06\u770b\u5230\u5b83\u5982\u4f55\u81ea\u52a8\u5730\u88ab\u96c6\u6210\u5230\u4ea4\u4e92\u5f0f\u6587\u6863\u7cfb\u7edf\u4e2d\u3002","title":"\u5b89\u5168\u6027\u7b80\u4ecb"},{"location":"tutorial/security/#_1","text":"\u6709\u8bb8\u591a\u65b9\u6cd5\u53ef\u4ee5\u5904\u7406\u5b89\u5168\u6027\u3001\u8eab\u4efd\u8ba4\u8bc1\u548c\u6388\u6743\u7b49\u95ee\u9898\u3002 \u800c\u4e14\u8fd9\u901a\u5e38\u662f\u4e00\u4e2a\u590d\u6742\u800c\u300c\u56f0\u96be\u300d\u7684\u8bdd\u9898\u3002 \u5728\u8bb8\u591a\u6846\u67b6\u548c\u7cfb\u7edf\u4e2d\uff0c\u4ec5\u5904\u7406\u5b89\u5168\u6027\u548c\u8eab\u4efd\u8ba4\u8bc1\u5c31\u4f1a\u82b1\u8d39\u5927\u91cf\u7684\u7cbe\u529b\u548c\u4ee3\u7801\uff08\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u5360\u7f16\u5199\u7684\u6240\u6709\u4ee3\u7801\u7684 50\uff05 \u6216\u66f4\u591a\uff09\u3002 FastAPI \u63d0\u4f9b\u4e86\u591a\u79cd\u5de5\u5177\uff0c\u53ef\u5e2e\u52a9\u4f60\u4ee5\u6807\u51c6\u7684\u65b9\u5f0f\u8f7b\u677e\u3001\u5feb\u901f\u5730\u5904\u7406 \u5b89\u5168\u6027 \uff0c\u800c\u65e0\u9700\u7814\u7a76\u548c\u5b66\u4e60\u6240\u6709\u7684\u5b89\u5168\u89c4\u8303\u3002 \u4f46\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e9b\u5c0f\u7684\u6982\u5ff5\u3002","title":"\u5b89\u5168\u6027\u7b80\u4ecb"},{"location":"tutorial/security/#_2","text":"\u5982\u679c\u4f60\u4e0d\u5173\u5fc3\u8fd9\u4e9b\u672f\u8bed\uff0c\u800c\u53ea\u9700\u8981 \u7acb\u5373 \u901a\u8fc7\u57fa\u4e8e\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u8eab\u4efd\u8ba4\u8bc1\u6765\u589e\u52a0\u5b89\u5168\u6027\uff0c\u8bf7\u8df3\u8f6c\u5230\u4e0b\u4e00\u7ae0\u3002","title":"\u6ca1\u6709\u65f6\u95f4\uff1f"},{"location":"tutorial/security/#oauth2","text":"OAuth2\u662f\u4e00\u4e2a\u89c4\u8303\uff0c\u5b83\u5b9a\u4e49\u4e86\u51e0\u79cd\u5904\u7406\u8eab\u4efd\u8ba4\u8bc1\u548c\u6388\u6743\u7684\u65b9\u6cd5\u3002 \u5b83\u662f\u4e00\u4e2a\u76f8\u5f53\u5e7f\u6cdb\u7684\u89c4\u8303\uff0c\u6db5\u76d6\u4e86\u4e00\u4e9b\u590d\u6742\u7684\u4f7f\u7528\u573a\u666f\u3002 \u5b83\u5305\u62ec\u4e86\u4f7f\u7528\u300c\u7b2c\u4e09\u65b9\u300d\u8fdb\u884c\u8eab\u4efd\u8ba4\u8bc1\u7684\u65b9\u6cd5\u3002 \u8fd9\u5c31\u662f\u6240\u6709\u5e26\u6709\u300c\u4f7f\u7528 Facebook\uff0cGoogle\uff0cTwitter\uff0cGitHub \u767b\u5f55\u300d\u7684\u7cfb\u7edf\u80cc\u540e\u6240\u4f7f\u7528\u7684\u673a\u5236\u3002","title":"OAuth2"},{"location":"tutorial/security/#oauth-1","text":"\u6709\u4e00\u4e2a OAuth 1\uff0c\u5b83\u4e0e OAuth2 \u5b8c\u5168\u4e0d\u540c\uff0c\u5e76\u4e14\u66f4\u4e3a\u590d\u6742\uff0c\u56e0\u4e3a\u5b83\u76f4\u63a5\u5305\u542b\u4e86\u6709\u5173\u5982\u4f55\u52a0\u5bc6\u901a\u4fe1\u7684\u89c4\u8303\u3002 \u5982\u4eca\u5b83\u5df2\u7ecf\u4e0d\u662f\u5f88\u6d41\u884c\uff0c\u6ca1\u6709\u88ab\u5e7f\u6cdb\u4f7f\u7528\u4e86\u3002 OAuth2 \u6ca1\u6709\u6307\u5b9a\u5982\u4f55\u52a0\u5bc6\u901a\u4fe1\uff0c\u5b83\u671f\u671b\u4f60\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528 HTTPS \u8fdb\u884c\u901a\u4fe1\u3002 Tip \u5728\u6709\u5173 \u90e8\u7f72 \u7684\u7ae0\u8282\u4e2d\uff0c\u4f60\u5c06\u4e86\u89e3\u5982\u4f55\u4f7f\u7528 Traefik \u548c Let's Encrypt \u514d\u8d39\u8bbe\u7f6e HTTPS\u3002","title":"OAuth 1"},{"location":"tutorial/security/#openid-connect","text":"OpenID Connect \u662f\u53e6\u4e00\u4e2a\u57fa\u4e8e OAuth2 \u7684\u89c4\u8303\u3002 \u5b83\u53ea\u662f\u6269\u5c55\u4e86 OAuth2\uff0c\u5e76\u660e\u786e\u4e86\u4e00\u4e9b\u5728 OAuth2 \u4e2d\u76f8\u5bf9\u6a21\u7cca\u7684\u5185\u5bb9\uff0c\u4ee5\u5c1d\u8bd5\u4f7f\u5176\u66f4\u5177\u4e92\u64cd\u4f5c\u6027\u3002 \u4f8b\u5982\uff0cGoogle \u767b\u5f55\u4f7f\u7528 OpenID Connect\uff08\u5e95\u5c42\u4f7f\u7528OAuth2\uff09\u3002 \u4f46\u662f Facebook \u767b\u5f55\u4e0d\u652f\u6301 OpenID Connect\u3002\u5b83\u5177\u6709\u81ea\u5df1\u7684 OAuth2 \u98ce\u683c\u3002","title":"OpenID Connect"},{"location":"tutorial/security/#openidopenid-connect","text":"\u8fd8\u6709\u4e00\u4e2a\u300cOpenID\u300d\u89c4\u8303\u3002\u5b83\u8bd5\u56fe\u89e3\u51b3\u4e0e OpenID Connect \u76f8\u540c\u7684\u95ee\u9898\uff0c\u4f46\u5b83\u4e0d\u662f\u57fa\u4e8e OAuth2\u3002 \u56e0\u6b64\uff0c\u5b83\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u9644\u52a0\u7cfb\u7edf\u3002 \u5982\u4eca\u5b83\u5df2\u7ecf\u4e0d\u662f\u5f88\u6d41\u884c\uff0c\u6ca1\u6709\u88ab\u5e7f\u6cdb\u4f7f\u7528\u4e86\u3002","title":"OpenID\uff08\u975e\u300cOpenID Connect\u300d\uff09"},{"location":"tutorial/security/#openapi","text":"OpenAPI\uff08\u4ee5\u524d\u79f0\u4e3a Swagger\uff09\u662f\u7528\u4e8e\u6784\u5efa API \u7684\u5f00\u653e\u89c4\u8303\uff08\u73b0\u5df2\u6210\u4e3a Linux Foundation \u7684\u4e00\u90e8\u5206\uff09\u3002 FastAPI \u57fa\u4e8e OpenAPI \u3002 \u8fd9\u5c31\u662f\u4f7f\u591a\u4e2a\u81ea\u52a8\u4ea4\u4e92\u5f0f\u6587\u6863\u754c\u9762\uff0c\u4ee3\u7801\u751f\u6210\u7b49\u6210\u4e3a\u53ef\u80fd\u7684\u539f\u56e0\u3002 OpenAPI \u6709\u4e00\u79cd\u5b9a\u4e49\u591a\u4e2a\u5b89\u5168\u300c\u65b9\u6848\u300d\u7684\u65b9\u6cd5\u3002 \u901a\u8fc7\u4f7f\u7528\u5b83\u4eec\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u6240\u6709\u8fd9\u4e9b\u57fa\u4e8e\u6807\u51c6\u7684\u5de5\u5177\uff0c\u5305\u62ec\u8fd9\u4e9b\u4ea4\u4e92\u5f0f\u6587\u6863\u7cfb\u7edf\u3002 OpenAPI \u5b9a\u4e49\u4e86\u4ee5\u4e0b\u5b89\u5168\u65b9\u6848\uff1a apiKey \uff1a\u4e00\u4e2a\u7279\u5b9a\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u5bc6\u94a5\uff0c\u53ef\u4ee5\u6765\u81ea\uff1a \u67e5\u8be2\u53c2\u6570\u3002 \u8bf7\u6c42\u5934\u3002 cookie\u3002 http \uff1a\u6807\u51c6\u7684 HTTP \u8eab\u4efd\u8ba4\u8bc1\u7cfb\u7edf\uff0c\u5305\u62ec\uff1a bearer : \u4e00\u4e2a\u503c\u4e3a Bearer \u52a0\u4ee4\u724c\u5b57\u7b26\u4e32\u7684 Authorization \u8bf7\u6c42\u5934\u3002\u8fd9\u662f\u4ece OAuth2 \u7ee7\u627f\u7684\u3002 HTTP Basic \u8ba4\u8bc1\u65b9\u5f0f\u3002 HTTP Digest\uff0c\u7b49\u7b49\u3002 oauth2 \uff1a\u6240\u6709\u7684 OAuth2 \u5904\u7406\u5b89\u5168\u6027\u7684\u65b9\u5f0f\uff08\u79f0\u4e3a\u300c\u6d41\u7a0b\u300d\uff09\u3002 *\u4ee5\u4e0b\u51e0\u79cd\u6d41\u7a0b\u9002\u5408\u6784\u5efa OAuth 2.0 \u8eab\u4efd\u8ba4\u8bc1\u7684\u63d0\u4f9b\u8005\uff08\u4f8b\u5982 Google\uff0cFacebook\uff0cTwitter\uff0cGitHub \u7b49\uff09\uff1a * implicit * clientCredentials * authorizationCode \u4f46\u662f\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u300c\u6d41\u7a0b\u300d\u53ef\u4ee5\u5b8c\u7f8e\u5730\u7528\u4e8e\u76f4\u63a5\u5728\u540c\u4e00\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5904\u7406\u8eab\u4efd\u8ba4\u8bc1\uff1a password \uff1a\u63a5\u4e0b\u6765\u7684\u51e0\u7ae0\u5c06\u4ecb\u7ecd\u5b83\u7684\u793a\u4f8b\u3002 openIdConnect \uff1a\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b9a\u4e49\u5982\u4f55\u81ea\u52a8\u53d1\u73b0 OAuth2 \u8eab\u4efd\u8ba4\u8bc1\u6570\u636e\u7684\u65b9\u6cd5\u3002 \u6b64\u81ea\u52a8\u53d1\u73b0\u673a\u5236\u662f OpenID Connect \u89c4\u8303\u4e2d\u5b9a\u4e49\u7684\u5185\u5bb9\u3002 Tip \u96c6\u6210\u5176\u4ed6\u8eab\u4efd\u8ba4\u8bc1/\u6388\u6743\u63d0\u4f9b\u8005\uff08\u4f8b\u5982Google\uff0cFacebook\uff0cTwitter\uff0cGitHub\u7b49\uff09\u4e5f\u662f\u53ef\u80fd\u7684\uff0c\u800c\u4e14\u8f83\u4e3a\u5bb9\u6613\u3002 \u6700\u590d\u6742\u7684\u95ee\u9898\u662f\u521b\u5efa\u4e00\u4e2a\u50cf\u8fd9\u6837\u7684\u8eab\u4efd\u8ba4\u8bc1/\u6388\u6743\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u4f46\u662f FastAPI \u4e3a\u4f60\u63d0\u4f9b\u4e86\u8f7b\u677e\u5b8c\u6210\u4efb\u52a1\u7684\u5de5\u5177\uff0c\u540c\u65f6\u4e3a\u4f60\u89e3\u51b3\u4e86\u91cd\u6d3b\u3002","title":"OpenAPI"},{"location":"tutorial/security/#fastapi","text":"FastAPI \u5728 fastapi.security \u6a21\u5757\u4e2d\u4e3a\u6bcf\u4e2a\u5b89\u5168\u65b9\u6848\u63d0\u4f9b\u4e86\u51e0\u79cd\u5de5\u5177\uff0c\u8fd9\u4e9b\u5de5\u5177\u7b80\u5316\u4e86\u8fd9\u4e9b\u5b89\u5168\u673a\u5236\u7684\u4f7f\u7528\u65b9\u6cd5\u3002 \u5728\u4e0b\u4e00\u7ae0\u4e2d\uff0c\u4f60\u5c06\u770b\u5230\u5982\u4f55\u4f7f\u7528 FastAPI \u6240\u63d0\u4f9b\u7684\u8fd9\u4e9b\u5de5\u5177\u4e3a\u4f60\u7684 API \u589e\u52a0\u5b89\u5168\u6027\u3002 \u800c\u4e14\u4f60\u8fd8\u5c06\u770b\u5230\u5b83\u5982\u4f55\u81ea\u52a8\u5730\u88ab\u96c6\u6210\u5230\u4ea4\u4e92\u5f0f\u6587\u6863\u7cfb\u7edf\u4e2d\u3002","title":"FastAPI \u5b9e\u7528\u5de5\u5177"},{"location":"tutorial/security/first-steps/","text":"Security - First Steps \u00b6 Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Let's imagine that you have your backend API in some domain. And you have a frontend in another domain or in a different path of the same domain (or in a mobile application). And you want to have a way for the frontend to authenticate with the backend, using a username and password . We can use OAuth2 to build that with FastAPI . But let's save you the time of reading the full long specification just to find those little pieces of information you need. Let's use the tools provided by FastAPI to handle security. How it looks \u00b6 Let's first just use the code and see how it works, and then we'll come back to understand what's happening. Create main.py \u00b6 Copy the example in a file main.py : from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } Run it \u00b6 Info First install python-multipart . E.g. pip install python-multipart . This is because OAuth2 uses \"form data\" for sending the username and password . Run the example with: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Check it \u00b6 Go to the interactive docs at: http://127.0.0.1:8000/docs . You will see something like this: Authorize button! You already have a shiny new \"Authorize\" button. And your path operation has a little lock in the top-right corner that you can click. And if you click it, you have a little authorization form to type a username and password (and other optional fields): Note It doesn't matter what you type in the form, it won't work yet. But we'll get there. This is of course not the frontend for the final users, but it's a great automatic tool to document interactively all your API. It can be used by the frontend team (that can also be yourself). It can be used by third party applications and systems. And it can also be used by yourself, to debug, check and test the same application. The password flow \u00b6 Now let's go back a bit and understand what is all that. The password \"flow\" is one of the ways (\"flows\") defined in OAuth2, to handle security and authentication. OAuth2 was designed so that the backend or API could be independent of the server that authenticates the user. But in this case, the same FastAPI application will handle the API and the authentication. So, let's review it from that simplified point of view: The user types the username and password in the frontend, and hits Enter . The frontend (running in the user's browser) sends that username and password to a specific URL in our API (declared with tokenUrl=\"token\" ). The API checks that username and password , and responds with a \"token\" (we haven't implemented any of this yet). A \"token\" is just a string with some content that we can use later to verify this user. Normally, a token is set to expire after some time. So, the user will have to log in again at some point later. And if the token is stolen, the risk is less. It is not like a permanent key that will work forever (in most of the cases). The frontend stores that token temporarily somewhere. The user clicks in the frontend to go to another section of the frontend web app. The frontend needs to fetch some more data from the API. But it needs authentication for that specific endpoint. So, to authenticate with our API, it sends a header Authorization with a value of Bearer plus the token. If the token contains foobar , the content of the Authorization header would be: Bearer foobar . FastAPI 's OAuth2PasswordBearer \u00b6 FastAPI provides several tools, at different levels of abstraction, to implement these security features. In this example we are going to use OAuth2 , with the Password flow, using a Bearer token. We do that using the OAuth2PasswordBearer class. Info A \"bearer\" token is not the only option. But it's the best one for our use case. And it might be the best for most use cases, unless you are an OAuth2 expert and know exactly why there's another option that suits better your needs. In that case, FastAPI also provides you with the tools to build it. When we create an instance of the OAuth2PasswordBearer class we pass in the tokenUrl parameter. This parameter contains the URL that the client (the frontend running in the user's browser) will use to send the username and password in order to get a token. from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } Tip Here tokenUrl=\"token\" refers to a relative URL token that we haven't created yet. As it's a relative URL, it's equivalent to ./token . Because we are using a relative URL, if your API was located at https://example.com/ , then it would refer to https://example.com/token . But if your API was located at https://example.com/api/v1/ , then it would refer to https://example.com/api/v1/token . Using a relative URL is important to make sure your application keeps working even in an advanced use case like Behind a Proxy . This parameter doesn't create that endpoint / path operation , but declares that the URL /token will be the one that the client should use to get the token. That information is used in OpenAPI, and then in the interactive API documentation systems. We will soon also create the actual path operation. Info If you are a very strict \"Pythonista\" you might dislike the style of the parameter name tokenUrl instead of token_url . That's because it is using the same name as in the OpenAPI spec. So that if you need to investigate more about any of these security schemes you can just copy and paste it to find more information about it. The oauth2_scheme variable is an instance of OAuth2PasswordBearer , but it is also a \"callable\". It could be called as: oauth2_scheme ( some , parameters ) So, it can be used with Depends . Use it \u00b6 Now you can pass that oauth2_scheme in a dependency with Depends . from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } This dependency will provide a str that is assigned to the parameter token of the path operation function . FastAPI will know that it can use this dependency to define a \"security scheme\" in the OpenAPI schema (and the automatic API docs). Technical Details FastAPI will know that it can use the class OAuth2PasswordBearer (declared in a dependency) to define the security scheme in OpenAPI because it inherits from fastapi.security.oauth2.OAuth2 , which in turn inherits from fastapi.security.base.SecurityBase . All the security utilities that integrate with OpenAPI (and the automatic API docs) inherit from SecurityBase , that's how FastAPI can know how to integrate them in OpenAPI. What it does \u00b6 It will go and look in the request for that Authorization header, check if the value is Bearer plus some token, and will return the token as a str . If it doesn't see an Authorization header, or the value doesn't have a Bearer token, it will respond with a 401 status code error ( UNAUTHORIZED ) directly. You don't even have to check if the token exists to return an error. You can be sure that if your function is executed, it will have a str in that token. You can try it already in the interactive docs: We are not verifying the validity of the token yet, but that's a start already. Recap \u00b6 So, in just 3 or 4 extra lines, you already have some primitive form of security.","title":"Security - First Steps"},{"location":"tutorial/security/first-steps/#security-first-steps","text":"Warning The current page still doesn't have a translation for this language. But you can help translating it: Contributing . Let's imagine that you have your backend API in some domain. And you have a frontend in another domain or in a different path of the same domain (or in a mobile application). And you want to have a way for the frontend to authenticate with the backend, using a username and password . We can use OAuth2 to build that with FastAPI . But let's save you the time of reading the full long specification just to find those little pieces of information you need. Let's use the tools provided by FastAPI to handle security.","title":"Security - First Steps"},{"location":"tutorial/security/first-steps/#how-it-looks","text":"Let's first just use the code and see how it works, and then we'll come back to understand what's happening.","title":"How it looks"},{"location":"tutorial/security/first-steps/#create-mainpy","text":"Copy the example in a file main.py : from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token }","title":"Create main.py"},{"location":"tutorial/security/first-steps/#run-it","text":"Info First install python-multipart . E.g. pip install python-multipart . This is because OAuth2 uses \"form data\" for sending the username and password . Run the example with: $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"Run it"},{"location":"tutorial/security/first-steps/#check-it","text":"Go to the interactive docs at: http://127.0.0.1:8000/docs . You will see something like this: Authorize button! You already have a shiny new \"Authorize\" button. And your path operation has a little lock in the top-right corner that you can click. And if you click it, you have a little authorization form to type a username and password (and other optional fields): Note It doesn't matter what you type in the form, it won't work yet. But we'll get there. This is of course not the frontend for the final users, but it's a great automatic tool to document interactively all your API. It can be used by the frontend team (that can also be yourself). It can be used by third party applications and systems. And it can also be used by yourself, to debug, check and test the same application.","title":"Check it"},{"location":"tutorial/security/first-steps/#the-password-flow","text":"Now let's go back a bit and understand what is all that. The password \"flow\" is one of the ways (\"flows\") defined in OAuth2, to handle security and authentication. OAuth2 was designed so that the backend or API could be independent of the server that authenticates the user. But in this case, the same FastAPI application will handle the API and the authentication. So, let's review it from that simplified point of view: The user types the username and password in the frontend, and hits Enter . The frontend (running in the user's browser) sends that username and password to a specific URL in our API (declared with tokenUrl=\"token\" ). The API checks that username and password , and responds with a \"token\" (we haven't implemented any of this yet). A \"token\" is just a string with some content that we can use later to verify this user. Normally, a token is set to expire after some time. So, the user will have to log in again at some point later. And if the token is stolen, the risk is less. It is not like a permanent key that will work forever (in most of the cases). The frontend stores that token temporarily somewhere. The user clicks in the frontend to go to another section of the frontend web app. The frontend needs to fetch some more data from the API. But it needs authentication for that specific endpoint. So, to authenticate with our API, it sends a header Authorization with a value of Bearer plus the token. If the token contains foobar , the content of the Authorization header would be: Bearer foobar .","title":"The password flow"},{"location":"tutorial/security/first-steps/#fastapis-oauth2passwordbearer","text":"FastAPI provides several tools, at different levels of abstraction, to implement these security features. In this example we are going to use OAuth2 , with the Password flow, using a Bearer token. We do that using the OAuth2PasswordBearer class. Info A \"bearer\" token is not the only option. But it's the best one for our use case. And it might be the best for most use cases, unless you are an OAuth2 expert and know exactly why there's another option that suits better your needs. In that case, FastAPI also provides you with the tools to build it. When we create an instance of the OAuth2PasswordBearer class we pass in the tokenUrl parameter. This parameter contains the URL that the client (the frontend running in the user's browser) will use to send the username and password in order to get a token. from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } Tip Here tokenUrl=\"token\" refers to a relative URL token that we haven't created yet. As it's a relative URL, it's equivalent to ./token . Because we are using a relative URL, if your API was located at https://example.com/ , then it would refer to https://example.com/token . But if your API was located at https://example.com/api/v1/ , then it would refer to https://example.com/api/v1/token . Using a relative URL is important to make sure your application keeps working even in an advanced use case like Behind a Proxy . This parameter doesn't create that endpoint / path operation , but declares that the URL /token will be the one that the client should use to get the token. That information is used in OpenAPI, and then in the interactive API documentation systems. We will soon also create the actual path operation. Info If you are a very strict \"Pythonista\" you might dislike the style of the parameter name tokenUrl instead of token_url . That's because it is using the same name as in the OpenAPI spec. So that if you need to investigate more about any of these security schemes you can just copy and paste it to find more information about it. The oauth2_scheme variable is an instance of OAuth2PasswordBearer , but it is also a \"callable\". It could be called as: oauth2_scheme ( some , parameters ) So, it can be used with Depends .","title":"FastAPI's OAuth2PasswordBearer"},{"location":"tutorial/security/first-steps/#use-it","text":"Now you can pass that oauth2_scheme in a dependency with Depends . from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } This dependency will provide a str that is assigned to the parameter token of the path operation function . FastAPI will know that it can use this dependency to define a \"security scheme\" in the OpenAPI schema (and the automatic API docs). Technical Details FastAPI will know that it can use the class OAuth2PasswordBearer (declared in a dependency) to define the security scheme in OpenAPI because it inherits from fastapi.security.oauth2.OAuth2 , which in turn inherits from fastapi.security.base.SecurityBase . All the security utilities that integrate with OpenAPI (and the automatic API docs) inherit from SecurityBase , that's how FastAPI can know how to integrate them in OpenAPI.","title":"Use it"},{"location":"tutorial/security/first-steps/#what-it-does","text":"It will go and look in the request for that Authorization header, check if the value is Bearer plus some token, and will return the token as a str . If it doesn't see an Authorization header, or the value doesn't have a Bearer token, it will respond with a 401 status code error ( UNAUTHORIZED ) directly. You don't even have to check if the token exists to return an error. You can be sure that if your function is executed, it will have a str in that token. You can try it already in the interactive docs: We are not verifying the validity of the token yet, but that's a start already.","title":"What it does"},{"location":"tutorial/security/first-steps/#recap","text":"So, in just 3 or 4 extra lines, you already have some primitive form of security.","title":"Recap"},{"location":"tutorial/security/get-current-user/","text":"\u83b7\u53d6\u5f53\u524d\u7528\u6237 \u00b6 \u5728\u4e0a\u4e00\u7ae0\u8282\u4e2d\uff0c\uff08\u57fa\u4e8e\u4f9d\u8d56\u9879\u6ce8\u5165\u7cfb\u7edf\u7684\uff09\u5b89\u5168\u7cfb\u7edf\u5411 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u63d0\u4f9b\u4e86\u4e00\u4e2a str \u7c7b\u578b\u7684 token \uff1a from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } \u4f46\u8fd9\u8fd8\u4e0d\u662f\u5f88\u5b9e\u7528\u3002 \u8ba9\u6211\u4eec\u6765\u4f7f\u5b83\u8fd4\u56de\u5f53\u524d\u7528\u6237\u7ed9\u6211\u4eec\u3002 \u521b\u5efa\u4e00\u4e2a\u7528\u6237\u6a21\u578b \u00b6 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a\u7528\u6237 Pydantic \u6a21\u578b\u3002 \u4e0e\u4f7f\u7528 Pydantic \u58f0\u660e\u8bf7\u6c42\u4f53\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u5b83\uff1a from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \u521b\u5efa\u4e00\u4e2a get_current_user \u4f9d\u8d56\u9879 \u00b6 \u8ba9\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a get_current_user \u4f9d\u8d56\u9879\u3002 \u8fd8\u8bb0\u5f97\u4f9d\u8d56\u9879\u53ef\u4ee5\u6709\u5b50\u4f9d\u8d56\u9879\u5417\uff1f get_current_user \u5c06\u5177\u6709\u4e00\u4e2a\u6211\u4eec\u4e4b\u524d\u6240\u521b\u5efa\u7684\u540c\u4e00\u4e2a oauth2_scheme \u4f5c\u4e3a\u4f9d\u8d56\u9879\u3002 \u4e0e\u6211\u4eec\u4e4b\u524d\u76f4\u63a5\u5728\u8def\u5f84\u64cd\u4f5c\u4e2d\u6240\u505a\u7684\u76f8\u540c\uff0c\u6211\u4eec\u65b0\u7684\u4f9d\u8d56\u9879 get_current_user \u5c06\u4ece\u5b50\u4f9d\u8d56\u9879 oauth2_scheme \u4e2d\u63a5\u6536\u4e00\u4e2a str \u7c7b\u578b\u7684 token \uff1a from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \u83b7\u53d6\u7528\u6237 \u00b6 get_current_user \u5c06\u4f7f\u7528\u6211\u4eec\u521b\u5efa\u7684\uff08\u4f2a\uff09\u5de5\u5177\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u6536 str \u7c7b\u578b\u7684\u4ee4\u724c\u5e76\u8fd4\u56de\u6211\u4eec\u7684 Pydantic User \u6a21\u578b\uff1a from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \u6ce8\u5165\u5f53\u524d\u7528\u6237 \u00b6 \u56e0\u6b64\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528 get_current_user \u4f5c\u4e3a Depends \u4e86\uff1a from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \u6ce8\u610f\u6211\u4eec\u5c06 current_user \u7684\u7c7b\u578b\u58f0\u660e\u4e3a Pydantic \u6a21\u578b User \u3002 \u8fd9\u5c06\u5e2e\u52a9\u6211\u4eec\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u6240\u6709\u7684\u4ee3\u7801\u8865\u5168\u548c\u7c7b\u578b\u68c0\u67e5\u3002 Tip \u4f60\u53ef\u80fd\u8fd8\u8bb0\u5f97\u8bf7\u6c42\u4f53\u4e5f\u662f\u4f7f\u7528 Pydantic \u6a21\u578b\u6765\u58f0\u660e\u7684\u3002 \u5728\u8fd9\u91cc FastAPI \u4e0d\u4f1a\u641e\u6df7\uff0c\u56e0\u4e3a\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u662f Depends \u3002 Check \u8fd9\u79cd\u4f9d\u8d56\u7cfb\u7edf\u7684\u8bbe\u8ba1\u65b9\u5f0f\u4f7f\u6211\u4eec\u53ef\u4ee5\u62e5\u6709\u4e0d\u540c\u7684\u4f9d\u8d56\u9879\uff08\u4e0d\u540c\u7684\u300c\u53ef\u4f9d\u8d56\u7c7b\u578b\u300d\uff09\uff0c\u5e76\u4e14\u5b83\u4eec\u90fd\u8fd4\u56de\u4e00\u4e2a User \u6a21\u578b\u3002 \u6211\u4eec\u5e76\u672a\u88ab\u5c40\u9650\u4e8e\u53ea\u80fd\u6709\u4e00\u4e2a\u8fd4\u56de\u8be5\u7c7b\u578b\u6570\u636e\u7684\u4f9d\u8d56\u9879\u3002 \u5176\u4ed6\u6a21\u578b \u00b6 \u73b0\u5728\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u83b7\u53d6\u5f53\u524d\u7528\u6237\uff0c\u5e76\u4f7f\u7528 Depends \u5728 \u4f9d\u8d56\u6ce8\u5165 \u7ea7\u522b\u5904\u7406\u5b89\u5168\u6027\u673a\u5236\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6a21\u578b\u6216\u6570\u636e\u6765\u6ee1\u8db3\u5b89\u5168\u6027\u8981\u6c42\uff08\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u4f7f\u7528\u7684\u662f Pydantic \u6a21\u578b User \uff09\u3002 \u4f46\u662f\u4f60\u5e76\u672a\u88ab\u9650\u5236\u53ea\u80fd\u4f7f\u7528\u67d0\u4e9b\u7279\u5b9a\u7684\u6570\u636e\u6a21\u578b\uff0c\u7c7b\u6216\u7c7b\u578b\u3002 \u4f60\u60f3\u8981\u5728\u6a21\u578b\u4e2d\u4f7f\u7528 id \u548c email \u800c\u4e0d\u4f7f\u7528\u4efb\u4f55\u7684 username \uff1f\u5f53\u7136\u53ef\u4ee5\u3002\u4f60\u53ef\u4ee5\u540c\u6837\u5730\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u3002 \u4f60\u53ea\u60f3\u8981\u4e00\u4e2a str \uff1f\u6216\u8005\u4ec5\u4ec5\u4e00\u4e2a dict \uff1f\u8fd8\u662f\u76f4\u63a5\u4e00\u4e2a\u6570\u636e\u5e93\u6a21\u578b\u7c7b\u7684\u5b9e\u4f8b\uff1f\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\u3002 \u5b9e\u9645\u4e0a\u4f60\u6ca1\u6709\u7528\u6237\u767b\u5f55\u5230\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u662f\u53ea\u62e5\u6709\u8bbf\u95ee\u4ee4\u724c\u7684\u673a\u5668\u4eba\uff0c\u7a0b\u5e8f\u6216\u5176\u4ed6\u7cfb\u7edf\uff1f\u518d\u4e00\u6b21\uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e5f\u662f\u4e00\u6837\u7684\u3002 \u5c3d\u7ba1\u53bb\u4f7f\u7528\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u8981\u7684\u4efb\u4f55\u6a21\u578b\uff0c\u4efb\u4f55\u7c7b\uff0c\u4efb\u4f55\u6570\u636e\u5e93\u3002 FastAPI \u901a\u8fc7\u4f9d\u8d56\u9879\u6ce8\u5165\u7cfb\u7edf\u90fd\u5e2e\u4f60\u641e\u5b9a\u3002 \u4ee3\u7801\u4f53\u79ef \u00b6 \u8fd9\u4e2a\u793a\u4f8b\u4f3c\u4e4e\u770b\u8d77\u6765\u5f88\u5197\u957f\u3002\u8003\u8651\u5230\u6211\u4eec\u5728\u540c\u4e00\u6587\u4ef6\u4e2d\u6df7\u5408\u4e86\u5b89\u5168\u6027\uff0c\u6570\u636e\u6a21\u578b\u5de5\u5177\u51fd\u6570\u548c\u8def\u5f84\u64cd\u4f5c\u7b49\u4ee3\u7801\u3002 \u4f46\u5173\u952e\u7684\u662f\u3002 \u5b89\u5168\u6027\u548c\u4f9d\u8d56\u9879\u6ce8\u5165\u5185\u5bb9\u53ea\u9700\u8981\u7f16\u5199\u4e00\u6b21\u3002 \u4f60\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4f7f\u5176\u53d8\u5f97\u5f88\u590d\u6742\u3002\u800c\u4e14\u53ea\u9700\u8981\u5728\u4e00\u4e2a\u5730\u65b9\u5199\u4e00\u6b21\u3002\u4f46\u4ecd\u7136\u5177\u5907\u6240\u6709\u7684\u7075\u6d3b\u6027\u3002 \u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u6709\u65e0\u6570\u4e2a\u4f7f\u7528\u540c\u4e00\u5b89\u5168\u7cfb\u7edf\u7684\u7aef\u70b9\uff08 \u8def\u5f84\u64cd\u4f5c \uff09\u3002 \u6240\u6709\uff08\u6216\u6240\u9700\u7684\u4efb\u4f55\u90e8\u5206\uff09\u7684\u7aef\u70b9\uff0c\u90fd\u53ef\u4ee5\u5229\u7528\u5bf9\u8fd9\u4e9b\u6216\u4f60\u521b\u5efa\u7684\u5176\u4ed6\u4f9d\u8d56\u9879\u8fdb\u884c\u590d\u7528\u6240\u5e26\u6765\u7684\u4f18\u52bf\u3002 \u6240\u6709\u7684\u8fd9\u65e0\u6570\u4e2a \u8def\u5f84\u64cd\u4f5c \u751a\u81f3\u53ef\u4ee5\u5c0f\u5230\u53ea\u9700 3 \u884c\u4ee3\u7801\uff1a from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \u603b\u7ed3 \u00b6 \u73b0\u5728\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u83b7\u53d6\u5f53\u524d\u7528\u6237\u3002 \u6211\u4eec\u5df2\u7ecf\u8fdb\u884c\u5230\u4e00\u534a\u4e86\u3002 \u6211\u4eec\u53ea\u9700\u8981\u518d\u4e3a\u7528\u6237/\u5ba2\u6237\u7aef\u6dfb\u52a0\u4e00\u4e2a\u771f\u6b63\u53d1\u9001 username \u548c password \u7684 \u8def\u5f84\u64cd\u4f5c \u3002 \u8fd9\u4e9b\u5185\u5bb9\u5728\u4e0b\u4e00\u7ae0\u8282\u3002","title":"\u83b7\u53d6\u5f53\u524d\u7528\u6237"},{"location":"tutorial/security/get-current-user/#_1","text":"\u5728\u4e0a\u4e00\u7ae0\u8282\u4e2d\uff0c\uff08\u57fa\u4e8e\u4f9d\u8d56\u9879\u6ce8\u5165\u7cfb\u7edf\u7684\uff09\u5b89\u5168\u7cfb\u7edf\u5411 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u63d0\u4f9b\u4e86\u4e00\u4e2a str \u7c7b\u578b\u7684 token \uff1a from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } \u4f46\u8fd9\u8fd8\u4e0d\u662f\u5f88\u5b9e\u7528\u3002 \u8ba9\u6211\u4eec\u6765\u4f7f\u5b83\u8fd4\u56de\u5f53\u524d\u7528\u6237\u7ed9\u6211\u4eec\u3002","title":"\u83b7\u53d6\u5f53\u524d\u7528\u6237"},{"location":"tutorial/security/get-current-user/#_2","text":"\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a\u7528\u6237 Pydantic \u6a21\u578b\u3002 \u4e0e\u4f7f\u7528 Pydantic \u58f0\u660e\u8bf7\u6c42\u4f53\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u5b83\uff1a from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user","title":"\u521b\u5efa\u4e00\u4e2a\u7528\u6237\u6a21\u578b"},{"location":"tutorial/security/get-current-user/#get_current_user","text":"\u8ba9\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a get_current_user \u4f9d\u8d56\u9879\u3002 \u8fd8\u8bb0\u5f97\u4f9d\u8d56\u9879\u53ef\u4ee5\u6709\u5b50\u4f9d\u8d56\u9879\u5417\uff1f get_current_user \u5c06\u5177\u6709\u4e00\u4e2a\u6211\u4eec\u4e4b\u524d\u6240\u521b\u5efa\u7684\u540c\u4e00\u4e2a oauth2_scheme \u4f5c\u4e3a\u4f9d\u8d56\u9879\u3002 \u4e0e\u6211\u4eec\u4e4b\u524d\u76f4\u63a5\u5728\u8def\u5f84\u64cd\u4f5c\u4e2d\u6240\u505a\u7684\u76f8\u540c\uff0c\u6211\u4eec\u65b0\u7684\u4f9d\u8d56\u9879 get_current_user \u5c06\u4ece\u5b50\u4f9d\u8d56\u9879 oauth2_scheme \u4e2d\u63a5\u6536\u4e00\u4e2a str \u7c7b\u578b\u7684 token \uff1a from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user","title":"\u521b\u5efa\u4e00\u4e2a get_current_user \u4f9d\u8d56\u9879"},{"location":"tutorial/security/get-current-user/#_3","text":"get_current_user \u5c06\u4f7f\u7528\u6211\u4eec\u521b\u5efa\u7684\uff08\u4f2a\uff09\u5de5\u5177\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u6536 str \u7c7b\u578b\u7684\u4ee4\u724c\u5e76\u8fd4\u56de\u6211\u4eec\u7684 Pydantic User \u6a21\u578b\uff1a from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user","title":"\u83b7\u53d6\u7528\u6237"},{"location":"tutorial/security/get-current-user/#_4","text":"\u56e0\u6b64\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528 get_current_user \u4f5c\u4e3a Depends \u4e86\uff1a from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \u6ce8\u610f\u6211\u4eec\u5c06 current_user \u7684\u7c7b\u578b\u58f0\u660e\u4e3a Pydantic \u6a21\u578b User \u3002 \u8fd9\u5c06\u5e2e\u52a9\u6211\u4eec\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u6240\u6709\u7684\u4ee3\u7801\u8865\u5168\u548c\u7c7b\u578b\u68c0\u67e5\u3002 Tip \u4f60\u53ef\u80fd\u8fd8\u8bb0\u5f97\u8bf7\u6c42\u4f53\u4e5f\u662f\u4f7f\u7528 Pydantic \u6a21\u578b\u6765\u58f0\u660e\u7684\u3002 \u5728\u8fd9\u91cc FastAPI \u4e0d\u4f1a\u641e\u6df7\uff0c\u56e0\u4e3a\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u662f Depends \u3002 Check \u8fd9\u79cd\u4f9d\u8d56\u7cfb\u7edf\u7684\u8bbe\u8ba1\u65b9\u5f0f\u4f7f\u6211\u4eec\u53ef\u4ee5\u62e5\u6709\u4e0d\u540c\u7684\u4f9d\u8d56\u9879\uff08\u4e0d\u540c\u7684\u300c\u53ef\u4f9d\u8d56\u7c7b\u578b\u300d\uff09\uff0c\u5e76\u4e14\u5b83\u4eec\u90fd\u8fd4\u56de\u4e00\u4e2a User \u6a21\u578b\u3002 \u6211\u4eec\u5e76\u672a\u88ab\u5c40\u9650\u4e8e\u53ea\u80fd\u6709\u4e00\u4e2a\u8fd4\u56de\u8be5\u7c7b\u578b\u6570\u636e\u7684\u4f9d\u8d56\u9879\u3002","title":"\u6ce8\u5165\u5f53\u524d\u7528\u6237"},{"location":"tutorial/security/get-current-user/#_5","text":"\u73b0\u5728\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u83b7\u53d6\u5f53\u524d\u7528\u6237\uff0c\u5e76\u4f7f\u7528 Depends \u5728 \u4f9d\u8d56\u6ce8\u5165 \u7ea7\u522b\u5904\u7406\u5b89\u5168\u6027\u673a\u5236\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6a21\u578b\u6216\u6570\u636e\u6765\u6ee1\u8db3\u5b89\u5168\u6027\u8981\u6c42\uff08\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u4f7f\u7528\u7684\u662f Pydantic \u6a21\u578b User \uff09\u3002 \u4f46\u662f\u4f60\u5e76\u672a\u88ab\u9650\u5236\u53ea\u80fd\u4f7f\u7528\u67d0\u4e9b\u7279\u5b9a\u7684\u6570\u636e\u6a21\u578b\uff0c\u7c7b\u6216\u7c7b\u578b\u3002 \u4f60\u60f3\u8981\u5728\u6a21\u578b\u4e2d\u4f7f\u7528 id \u548c email \u800c\u4e0d\u4f7f\u7528\u4efb\u4f55\u7684 username \uff1f\u5f53\u7136\u53ef\u4ee5\u3002\u4f60\u53ef\u4ee5\u540c\u6837\u5730\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u3002 \u4f60\u53ea\u60f3\u8981\u4e00\u4e2a str \uff1f\u6216\u8005\u4ec5\u4ec5\u4e00\u4e2a dict \uff1f\u8fd8\u662f\u76f4\u63a5\u4e00\u4e2a\u6570\u636e\u5e93\u6a21\u578b\u7c7b\u7684\u5b9e\u4f8b\uff1f\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u90fd\u662f\u4e00\u6837\u7684\u3002 \u5b9e\u9645\u4e0a\u4f60\u6ca1\u6709\u7528\u6237\u767b\u5f55\u5230\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u662f\u53ea\u62e5\u6709\u8bbf\u95ee\u4ee4\u724c\u7684\u673a\u5668\u4eba\uff0c\u7a0b\u5e8f\u6216\u5176\u4ed6\u7cfb\u7edf\uff1f\u518d\u4e00\u6b21\uff0c\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e5f\u662f\u4e00\u6837\u7684\u3002 \u5c3d\u7ba1\u53bb\u4f7f\u7528\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u8981\u7684\u4efb\u4f55\u6a21\u578b\uff0c\u4efb\u4f55\u7c7b\uff0c\u4efb\u4f55\u6570\u636e\u5e93\u3002 FastAPI \u901a\u8fc7\u4f9d\u8d56\u9879\u6ce8\u5165\u7cfb\u7edf\u90fd\u5e2e\u4f60\u641e\u5b9a\u3002","title":"\u5176\u4ed6\u6a21\u578b"},{"location":"tutorial/security/get-current-user/#_6","text":"\u8fd9\u4e2a\u793a\u4f8b\u4f3c\u4e4e\u770b\u8d77\u6765\u5f88\u5197\u957f\u3002\u8003\u8651\u5230\u6211\u4eec\u5728\u540c\u4e00\u6587\u4ef6\u4e2d\u6df7\u5408\u4e86\u5b89\u5168\u6027\uff0c\u6570\u636e\u6a21\u578b\u5de5\u5177\u51fd\u6570\u548c\u8def\u5f84\u64cd\u4f5c\u7b49\u4ee3\u7801\u3002 \u4f46\u5173\u952e\u7684\u662f\u3002 \u5b89\u5168\u6027\u548c\u4f9d\u8d56\u9879\u6ce8\u5165\u5185\u5bb9\u53ea\u9700\u8981\u7f16\u5199\u4e00\u6b21\u3002 \u4f60\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4f7f\u5176\u53d8\u5f97\u5f88\u590d\u6742\u3002\u800c\u4e14\u53ea\u9700\u8981\u5728\u4e00\u4e2a\u5730\u65b9\u5199\u4e00\u6b21\u3002\u4f46\u4ecd\u7136\u5177\u5907\u6240\u6709\u7684\u7075\u6d3b\u6027\u3002 \u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u6709\u65e0\u6570\u4e2a\u4f7f\u7528\u540c\u4e00\u5b89\u5168\u7cfb\u7edf\u7684\u7aef\u70b9\uff08 \u8def\u5f84\u64cd\u4f5c \uff09\u3002 \u6240\u6709\uff08\u6216\u6240\u9700\u7684\u4efb\u4f55\u90e8\u5206\uff09\u7684\u7aef\u70b9\uff0c\u90fd\u53ef\u4ee5\u5229\u7528\u5bf9\u8fd9\u4e9b\u6216\u4f60\u521b\u5efa\u7684\u5176\u4ed6\u4f9d\u8d56\u9879\u8fdb\u884c\u590d\u7528\u6240\u5e26\u6765\u7684\u4f18\u52bf\u3002 \u6240\u6709\u7684\u8fd9\u65e0\u6570\u4e2a \u8def\u5f84\u64cd\u4f5c \u751a\u81f3\u53ef\u4ee5\u5c0f\u5230\u53ea\u9700 3 \u884c\u4ee3\u7801\uff1a from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user","title":"\u4ee3\u7801\u4f53\u79ef"},{"location":"tutorial/security/get-current-user/#_7","text":"\u73b0\u5728\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u83b7\u53d6\u5f53\u524d\u7528\u6237\u3002 \u6211\u4eec\u5df2\u7ecf\u8fdb\u884c\u5230\u4e00\u534a\u4e86\u3002 \u6211\u4eec\u53ea\u9700\u8981\u518d\u4e3a\u7528\u6237/\u5ba2\u6237\u7aef\u6dfb\u52a0\u4e00\u4e2a\u771f\u6b63\u53d1\u9001 username \u548c password \u7684 \u8def\u5f84\u64cd\u4f5c \u3002 \u8fd9\u4e9b\u5185\u5bb9\u5728\u4e0b\u4e00\u7ae0\u8282\u3002","title":"\u603b\u7ed3"},{"location":"tutorial/security/oauth2-jwt/","text":"\u4f7f\u7528\uff08\u54c8\u5e0c\uff09\u5bc6\u7801\u548c JWT Bearer \u4ee4\u724c\u7684 OAuth2 \u00b6 \u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u6240\u6709\u7684\u5b89\u5168\u6d41\u7a0b\uff0c\u5c31\u8ba9\u6211\u4eec\u6765\u4f7f\u7528 JWT \u4ee4\u724c\u548c\u5b89\u5168\u54c8\u5e0c\u5bc6\u7801\u8ba9\u5e94\u7528\u7a0b\u5e8f\u771f\u6b63\u5730\u5b89\u5168\u5427\u3002 \u4f60\u53ef\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u771f\u6b63\u5730\u4f7f\u7528\u8fd9\u4e9b\u4ee3\u7801\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u4fdd\u5b58\u5bc6\u7801\u54c8\u5e0c\u503c\uff0c\u7b49\u7b49\u3002 \u6211\u4eec\u5c06\u4ece\u4e0a\u4e00\u7ae0\u7ed3\u675f\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u7136\u540e\u5bf9\u793a\u4f8b\u8fdb\u884c\u6269\u5145\u3002 \u5173\u4e8e JWT \u00b6 JWT \u8868\u793a \u300cJSON Web Tokens\u300d\u3002 \u5b83\u662f\u4e00\u4e2a\u5c06 JSON \u5bf9\u8c61\u7f16\u7801\u4e3a\u5bc6\u96c6\u4e14\u6ca1\u6709\u7a7a\u683c\u7684\u957f\u5b57\u7b26\u4e32\u7684\u6807\u51c6\u3002\u5b57\u7b26\u4e32\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c \u5b83\u6ca1\u6709\u88ab\u52a0\u5bc6\uff0c\u56e0\u6b64\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u4ece\u5b57\u7b26\u4e32\u5185\u5bb9\u4e2d\u8fd8\u539f\u6570\u636e\u3002 \u4f46\u5b83\u7ecf\u8fc7\u4e86\u7b7e\u540d\u3002\u56e0\u6b64\uff0c\u5f53\u4f60\u6536\u5230\u4e00\u4e2a\u7531\u4f60\u53d1\u51fa\u7684\u4ee4\u724c\u65f6\uff0c\u53ef\u4ee5\u6821\u9a8c\u4ee4\u724c\u662f\u5426\u771f\u7684\u7531\u4f60\u53d1\u51fa\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6709\u6548\u671f\u4e3a 1 \u5468\u7684\u4ee4\u724c\u3002\u7136\u540e\u5f53\u7528\u6237\u7b2c\u4e8c\u5929\u4f7f\u7528\u4ee4\u724c\u91cd\u65b0\u8bbf\u95ee\u65f6\uff0c\u4f60\u77e5\u9053\u8be5\u7528\u6237\u4ecd\u7136\u5904\u4e8e\u767b\u5165\u72b6\u6001\u3002 \u4e00\u5468\u540e\u4ee4\u724c\u5c06\u4f1a\u8fc7\u671f\uff0c\u7528\u6237\u5c06\u4e0d\u4f1a\u901a\u8fc7\u8ba4\u8bc1\uff0c\u5fc5\u987b\u518d\u6b21\u767b\u5f55\u624d\u80fd\u83b7\u5f97\u4e00\u4e2a\u65b0\u4ee4\u724c\u3002\u800c\u4e14\u5982\u679c\u7528\u6237\uff08\u6216\u7b2c\u4e09\u65b9\uff09\u8bd5\u56fe\u4fee\u6539\u4ee4\u724c\u4ee5\u7be1\u6539\u8fc7\u671f\u65f6\u95f4\uff0c\u4f60\u5c06\u56e0\u4e3a\u7b7e\u540d\u4e0d\u5339\u914d\u800c\u80fd\u591f\u53d1\u89c9\u3002 \u5982\u679c\u4f60\u60f3\u4e0a\u624b\u4f53\u9a8c JWT \u4ee4\u724c\u5e76\u4e86\u89e3\u5176\u5de5\u4f5c\u65b9\u5f0f\uff0c\u53ef\u8bbf\u95ee https://jwt.io \u3002 \u5b89\u88c5 python-jose \u00b6 \u6211\u4eec\u9700\u8981\u5b89\u88c5 python-jose \u4ee5\u5728 Python \u4e2d\u751f\u6210\u548c\u6821\u9a8c JWT \u4ee4\u724c\uff1a $ pip install python-jose [ cryptography ] ---> 100% Python-jose \u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u52a0\u5bc6\u540e\u7aef\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7684\u662f\u63a8\u8350\u7684\u540e\u7aef\uff1a pyca/cryptography \u3002 Tip \u672c\u6559\u7a0b\u66fe\u7ecf\u4f7f\u7528\u8fc7 PyJWT \u3002 \u4f46\u662f\u540e\u6765\u66f4\u65b0\u4e3a\u4f7f\u7528 Python-jose\uff0c\u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86 PyJWT \u7684\u6240\u6709\u529f\u80fd\uff0c\u4ee5\u53ca\u4e4b\u540e\u4e0e\u5176\u4ed6\u5de5\u5177\u8fdb\u884c\u96c6\u6210\u65f6\u4f60\u53ef\u80fd\u9700\u8981\u7684\u4e00\u4e9b\u5176\u4ed6\u529f\u80fd\u3002 \u54c8\u5e0c\u5bc6\u7801 \u00b6 \u300c\u54c8\u5e0c\u300d\u7684\u610f\u601d\u662f\uff1a\u5c06\u67d0\u4e9b\u5185\u5bb9\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a\u5bc6\u7801\uff09\u8f6c\u6362\u4e3a\u770b\u8d77\u6765\u50cf\u4e71\u7801\u7684\u5b57\u8282\u5e8f\u5217\uff08\u53ea\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff09\u3002 \u6bcf\u6b21\u4f60\u4f20\u5165\u5b8c\u5168\u76f8\u540c\u7684\u5185\u5bb9\uff08\u5b8c\u5168\u76f8\u540c\u7684\u5bc6\u7801\uff09\u65f6\uff0c\u4f60\u90fd\u4f1a\u5f97\u5230\u5b8c\u5168\u76f8\u540c\u7684\u4e71\u7801\u3002 \u4f46\u662f\u4f60\u4e0d\u80fd\u4ece\u4e71\u7801\u8f6c\u6362\u56de\u5bc6\u7801\u3002 \u4e3a\u4ec0\u4e48\u4f7f\u7528\u54c8\u5e0c\u5bc6\u7801 \u00b6 \u5982\u679c\u4f60\u7684\u6570\u636e\u5e93\u88ab\u76d7\uff0c\u5c0f\u5077\u5c06\u65e0\u6cd5\u83b7\u5f97\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\uff0c\u53ea\u80fd\u62ff\u5230\u54c8\u5e0c\u503c\u3002 \u56e0\u6b64\uff0c\u5c0f\u5077\u5c06\u65e0\u6cd5\u5c1d\u8bd5\u5728\u53e6\u4e00\u4e2a\u7cfb\u7edf\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u76f8\u540c\u7684\u5bc6\u7801\uff08\u7531\u4e8e\u8bb8\u591a\u7528\u6237\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u7801\uff0c\u56e0\u6b64\u8fd9\u5f88\u5371\u9669\uff09\u3002 \u5b89\u88c5 passlib \u00b6 PassLib \u662f\u4e00\u4e2a\u7528\u4e8e\u5904\u7406\u54c8\u5e0c\u5bc6\u7801\u7684\u5f88\u68d2\u7684 Python \u5305\u3002 \u5b83\u652f\u6301\u8bb8\u591a\u5b89\u5168\u54c8\u5e0c\u7b97\u6cd5\u4ee5\u53ca\u914d\u5408\u7b97\u6cd5\u4f7f\u7528\u7684\u5b9e\u7528\u7a0b\u5e8f\u3002 \u63a8\u8350\u7684\u7b97\u6cd5\u662f \u300cBcrypt\u300d\u3002 \u56e0\u6b64\uff0c\u5b89\u88c5\u9644\u5e26 Bcrypt \u7684 PassLib\uff1a $ pip install passlib [ bcrypt ] ---> 100% Tip \u4f7f\u7528 passlib \uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u5c06\u5176\u914d\u7f6e\u4e3a\u80fd\u591f\u8bfb\u53d6 Django\uff0cFlask \u7684\u5b89\u5168\u6269\u5c55\u6216\u8bb8\u591a\u5176\u4ed6\u5de5\u5177\u521b\u5efa\u7684\u5bc6\u7801\u3002 \u56e0\u6b64\uff0c\u4f60\u5c06\u80fd\u591f\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5c06\u6570\u636e\u5e93\u4e2d\u6765\u81ea Django \u5e94\u7528\u7684\u6570\u636e\u5171\u4eab\u7ed9\u4e00\u4e2a FastAPI \u5e94\u7528\u3002\u6216\u8005\u4f7f\u7528\u540c\u4e00\u6570\u636e\u5e93\u4f46\u9010\u6e10\u5c06\u5e94\u7528\u4ece Django \u8fc1\u79fb\u5230 FastAPI\u3002 \u800c\u4f60\u7684\u7528\u6237\u5c06\u80fd\u591f\u540c\u65f6\u4ece Django \u5e94\u7528\u6216 FastAPI \u5e94\u7528\u767b\u5f55\u3002 \u54c8\u5e0c\u5e76\u6821\u9a8c\u5bc6\u7801 \u00b6 \u4ece passlib \u5bfc\u5165\u6211\u4eec\u9700\u8981\u7684\u5de5\u5177\u3002 \u521b\u5efa\u4e00\u4e2a PassLib \u300c\u4e0a\u4e0b\u6587\u300d\u3002\u8fd9\u5c06\u7528\u4e8e\u54c8\u5e0c\u548c\u6821\u9a8c\u5bc6\u7801\u3002 Tip PassLib \u4e0a\u4e0b\u6587\u8fd8\u5177\u6709\u4f7f\u7528\u4e0d\u540c\u54c8\u5e0c\u7b97\u6cd5\u7684\u529f\u80fd\uff0c\u5305\u62ec\u4ec5\u5141\u8bb8\u7528\u4e8e\u6821\u9a8c\u7684\u5df2\u5f03\u7528\u7684\u65e7\u7b97\u6cd5\u7b49\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u8bfb\u53d6\u548c\u6821\u9a8c\u7531\u53e6\u4e00\u4e2a\u7cfb\u7edf\uff08\u4f8b\u5982Django\uff09\u751f\u6210\u7684\u5bc6\u7801\uff0c\u4f46\u662f\u4f7f\u7528\u5176\u4ed6\u7b97\u6cd5\u4f8b\u5982 Bcrypt \u751f\u6210\u65b0\u7684\u5bc6\u7801\u54c8\u5e0c\u503c\u3002 \u5e76\u540c\u65f6\u517c\u5bb9\u6240\u6709\u7684\u8fd9\u4e9b\u529f\u80fd\u3002 \u521b\u5efa\u4e00\u4e2a\u5de5\u5177\u51fd\u6570\u4ee5\u54c8\u5e0c\u6765\u81ea\u7528\u6237\u7684\u5bc6\u7801\u3002 \u7136\u540e\u521b\u5efa\u53e6\u4e00\u4e2a\u5de5\u5177\u51fd\u6570\uff0c\u7528\u4e8e\u6821\u9a8c\u63a5\u6536\u7684\u5bc6\u7801\u662f\u5426\u4e0e\u5b58\u50a8\u7684\u54c8\u5e0c\u503c\u5339\u914d\u3002 \u518d\u521b\u5efa\u53e6\u4e00\u4e2a\u5de5\u5177\u51fd\u6570\u7528\u4e8e\u8ba4\u8bc1\u5e76\u8fd4\u56de\u7528\u6237\u3002 from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] Note \u5982\u679c\u4f60\u67e5\u770b\u65b0\u7684\uff08\u4f2a\uff09\u6570\u636e\u5e93 fake_users_db \uff0c\u4f60\u5c06\u770b\u5230\u54c8\u5e0c\u540e\u7684\u5bc6\u7801\u73b0\u5728\u7684\u6837\u5b50\uff1a \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" \u3002 \u5904\u7406 JWT \u4ee4\u724c \u00b6 \u5bfc\u5165\u5df2\u5b89\u88c5\u7684\u6a21\u5757\u3002 \u521b\u5efa\u4e00\u4e2a\u968f\u673a\u5bc6\u94a5\uff0c\u8be5\u5bc6\u94a5\u5c06\u7528\u4e8e\u5bf9 JWT \u4ee4\u724c\u8fdb\u884c\u7b7e\u540d\u3002 \u8981\u751f\u6210\u4e00\u4e2a\u5b89\u5168\u7684\u968f\u673a\u5bc6\u94a5\uff0c\u53ef\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a $ openssl rand -hex 32 09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7 \u7136\u540e\u5c06\u8f93\u51fa\u590d\u5236\u5230\u53d8\u91cf \u300cSECRET_KEY\u300d \u4e2d\uff08\u4e0d\u8981\u4f7f\u7528\u793a\u4f8b\u4e2d\u7684\u8fd9\u4e2a\uff09\u3002 \u521b\u5efa\u7528\u4e8e\u8bbe\u5b9a JWT \u4ee4\u724c\u7b7e\u540d\u7b97\u6cd5\u7684\u53d8\u91cf \u300cALGORITHM\u300d\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a \"HS256\" \u3002 \u521b\u5efa\u4e00\u4e2a\u8bbe\u7f6e\u4ee4\u724c\u8fc7\u671f\u65f6\u95f4\u7684\u53d8\u91cf\u3002 \u5b9a\u4e49\u4e00\u4e2a\u5c06\u5728\u4ee4\u724c\u7aef\u70b9\u4e2d\u7528\u4e8e\u54cd\u5e94\u7684 Pydantic \u6a21\u578b\u3002 \u521b\u5efa\u4e00\u4e2a\u751f\u6210\u65b0\u7684\u8bbf\u95ee\u4ee4\u724c\u7684\u5de5\u5177\u51fd\u6570\u3002 from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] \u66f4\u65b0\u4f9d\u8d56\u9879 \u00b6 \u66f4\u65b0 get_current_user \u4ee5\u63a5\u6536\u4e0e\u4e4b\u524d\u76f8\u540c\u7684\u4ee4\u724c\uff0c\u4f46\u8fd9\u6b21\u4f7f\u7528\u7684\u662f JWT \u4ee4\u724c\u3002 \u89e3\u7801\u63a5\u6536\u5230\u7684\u4ee4\u724c\uff0c\u5bf9\u5176\u8fdb\u884c\u6821\u9a8c\uff0c\u7136\u540e\u8fd4\u56de\u5f53\u524d\u7528\u6237\u3002 \u5982\u679c\u4ee4\u724c\u65e0\u6548\uff0c\u7acb\u5373\u8fd4\u56de\u4e00\u4e2a HTTP \u9519\u8bef\u3002 from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] \u66f4\u65b0 /token \u8def\u5f84\u64cd\u4f5c \u00b6 \u4f7f\u7528\u4ee4\u724c\u7684\u8fc7\u671f\u65f6\u95f4\u521b\u5efa\u4e00\u4e2a timedelta \u5bf9\u8c61\u3002 \u521b\u5efa\u4e00\u4e2a\u771f\u5b9e\u7684 JWT \u8bbf\u95ee\u4ee4\u724c\u5e76\u8fd4\u56de\u5b83\u3002 from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] \u5173\u4e8e JWT \u300c\u4e3b\u9898\u300d sub \u7684\u6280\u672f\u7ec6\u8282 \u00b6 JWT \u7684\u89c4\u8303\u4e2d\u63d0\u5230\u6709\u4e00\u4e2a sub \u952e\uff0c\u503c\u4e3a\u8be5\u4ee4\u724c\u7684\u4e3b\u9898\u3002 \u4f7f\u7528\u5b83\u5e76\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u4f46\u8fd9\u662f\u4f60\u653e\u7f6e\u7528\u6237\u6807\u8bc6\u7684\u5730\u65b9\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86\u5b83\u3002 \u9664\u4e86\u8bc6\u522b\u7528\u6237\u5e76\u5141\u8bb8\u4ed6\u4eec\u76f4\u63a5\u5728\u4f60\u7684 API \u4e0a\u6267\u884c\u64cd\u4f5c\u4e4b\u5916\uff0cJWT \u8fd8\u53ef\u4ee5\u7528\u4e8e\u5176\u4ed6\u4e8b\u60c5\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u8bc6\u522b\u4e00\u4e2a \u300c\u6c7d\u8f66\u300d \u6216 \u300c\u535a\u5ba2\u6587\u7ae0\u300d\u3002 \u7136\u540e\u4f60\u53ef\u4ee5\u6dfb\u52a0\u5173\u4e8e\u8be5\u5b9e\u4f53\u7684\u6743\u9650\uff0c\u6bd4\u5982\u300c\u9a7e\u9a76\u300d\uff08\u6c7d\u8f66\uff09\u6216\u300c\u7f16\u8f91\u300d\uff08\u535a\u5ba2\uff09\u3002 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5c06 JWT \u4ee4\u724c\u4ea4\u7ed9\u7528\u6237\uff08\u6216\u673a\u5668\u4eba\uff09\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\uff08\u9a7e\u9a76\u6c7d\u8f66\uff0c\u6216\u7f16\u8f91\u535a\u5ba2\u6587\u7ae0\uff09\uff0c\u751a\u81f3\u4e0d\u9700\u8981\u6709\u4e00\u4e2a\u8d26\u6237\uff0c\u53ea\u9700\u4f7f\u7528\u4f60\u7684 API \u4e3a\u5176\u751f\u6210\u7684 JWT \u4ee4\u724c\u3002 \u4f7f\u7528\u8fd9\u6837\u7684\u601d\u8def\uff0cJWT \u53ef\u4ee5\u7528\u4e8e\u66f4\u590d\u6742\u7684\u573a\u666f\u3002 \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u51e0\u4e2a\u5b9e\u4f53\u53ef\u80fd\u6709\u76f8\u540c\u7684 ID\uff0c\u6bd4\u5982\u8bf4 foo \uff08\u4e00\u4e2a\u7528\u6237 foo \uff0c\u4e00\u8f86\u8f66 foo \uff0c\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0 foo \uff09\u3002 \u56e0\u6b64\uff0c\u4e3a\u4e86\u907f\u514d ID \u51b2\u7a81\uff0c\u5f53\u4e3a\u7528\u6237\u521b\u5efa JWT \u4ee4\u724c\u65f6\uff0c\u4f60\u53ef\u4ee5\u5728 sub \u952e\u7684\u503c\u524d\u52a0\u4e0a\u524d\u7f00\uff0c\u4f8b\u5982 username: \u3002\u6240\u4ee5\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c sub \u7684\u503c\u53ef\u4ee5\u662f\uff1a username:johndoe \u3002 \u8981\u8bb0\u4f4f\u7684\u91cd\u70b9\u662f\uff0c sub \u952e\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5e94\u8be5\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u7b26\uff0c\u800c\u4e14\u5e94\u8be5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u68c0\u67e5\u6548\u679c \u00b6 \u8fd0\u884c\u670d\u52a1\u5668\u5e76\u8bbf\u95ee\u6587\u6863\uff1a http://127.0.0.1:8000/docs \u3002 \u4f60\u4f1a\u770b\u5230\u5982\u4e0b\u7528\u6237\u754c\u9762\uff1a \u50cf\u4ee5\u524d\u4e00\u6837\u5bf9\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u8ba4\u8bc1\u3002 \u4f7f\u7528\u5982\u4e0b\u51ed\u8bc1\uff1a \u7528\u6237\u540d: johndoe \u5bc6\u7801: secret Check \u8bf7\u6ce8\u610f\uff0c\u4ee3\u7801\u4e2d\u6ca1\u6709\u4efb\u4f55\u5730\u65b9\u8bb0\u5f55\u4e86\u660e\u6587\u5bc6\u7801 \u300c secret \u300d\uff0c\u6211\u4eec\u53ea\u4fdd\u5b58\u4e86\u5176\u54c8\u5e0c\u503c\u3002 \u8bbf\u95ee /users/me/ \u7aef\u70b9\uff0c\u4f60\u5c06\u83b7\u5f97\u5982\u4e0b\u54cd\u5e94\uff1a { \"username\" : \"johndoe\" , \"email\" : \"johndoe@example.com\" , \"full_name\" : \"John Doe\" , \"disabled\" : false } \u5982\u679c\u4f60\u6253\u5f00\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u5c06\u770b\u5230\u6570\u636e\u662f\u5982\u4f55\u53d1\u9001\u7684\u5e76\u4e14\u5176\u4e2d\u4ec5\u5305\u542b\u4e86\u4ee4\u724c\uff0c\u53ea\u6709\u5728\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u4e2d\u53d1\u9001\u4e86\u5bc6\u7801\u4ee5\u6821\u9a8c\u7528\u6237\u8eab\u4efd\u5e76\u83b7\u53d6\u8be5\u8bbf\u95ee\u4ee4\u724c\uff0c\u4f46\u4e4b\u540e\u90fd\u4e0d\u4f1a\u518d\u53d1\u9001\u5bc6\u7801\uff1a Note \u6ce8\u610f\u8bf7\u6c42\u4e2d\u7684 Authorization \u9996\u90e8\uff0c\u5176\u503c\u4ee5 Bearer \u5f00\u5934\u3002 \u4f7f\u7528 scopes \u7684\u8fdb\u9636\u7528\u6cd5 \u00b6 OAuth2 \u5177\u6709\u300c\u4f5c\u7528\u57df\u300d\u7684\u6982\u5ff5\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u5411 JWT \u4ee4\u724c\u6dfb\u52a0\u4e00\u7ec4\u7279\u5b9a\u7684\u6743\u9650\u3002 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5c06\u6b64\u4ee4\u724c\u76f4\u63a5\u63d0\u4f9b\u7ed9\u7528\u6237\u6216\u7b2c\u4e09\u65b9\uff0c\u4f7f\u5176\u5728\u4e00\u4e9b\u9650\u5236\u4e0b\u4e0e\u4f60\u7684 API \u8fdb\u884c\u4ea4\u4e92\u3002 \u4f60\u53ef\u4ee5\u5728\u4e4b\u540e\u7684 \u8fdb\u9636\u7528\u6237\u6307\u5357 \u4e2d\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u4ee5\u53ca\u5982\u4f55\u5c06\u5b83\u4eec\u96c6\u6210\u5230 FastAPI \u4e2d\u3002 \u603b\u7ed3 \u00b6 \u901a\u8fc7\u76ee\u524d\u4f60\u6240\u770b\u5230\u7684\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u50cf OAuth2 \u548c JWT \u8fd9\u6837\u7684\u6807\u51c6\u6765\u6784\u5efa\u4e00\u4e2a\u5b89\u5168\u7684 FastAPI \u5e94\u7528\u7a0b\u5e8f\u3002 \u5728\u51e0\u4e4e\u6240\u6709\u7684\u6846\u67b6\u4e2d\uff0c\u5904\u7406\u5b89\u5168\u6027\u95ee\u9898\u90fd\u5f88\u5bb9\u6613\u6210\u4e3a\u4e00\u4e2a\u76f8\u5f53\u590d\u6742\u7684\u8bdd\u9898\u3002 \u8bb8\u591a\u9ad8\u5ea6\u7b80\u5316\u4e86\u5b89\u5168\u6d41\u7a0b\u7684\u8f6f\u4ef6\u5305\u4e0d\u5f97\u4e0d\u5728\u6570\u636e\u6a21\u578b\u3001\u6570\u636e\u5e93\u548c\u53ef\u7528\u529f\u80fd\u4e0a\u505a\u51fa\u5f88\u591a\u59a5\u534f\u3002\u800c\u8fd9\u4e9b\u8fc7\u4e8e\u7b80\u5316\u6d41\u7a0b\u7684\u8f6f\u4ef6\u5305\u4e2d\uff0c\u6709\u4e9b\u5176\u5b9e\u9690\u542b\u4e86\u5b89\u5168\u6f0f\u6d1e\u3002 FastAPI \u4e0d\u5bf9\u4efb\u4f55\u6570\u636e\u5e93\u3001\u6570\u636e\u6a21\u578b\u6216\u5de5\u5177\u505a\u4efb\u4f55\u59a5\u534f\u3002 \u5b83\u7ed9\u4e86\u4f60\u6240\u6709\u7684\u7075\u6d3b\u6027\u6765\u9009\u62e9\u6700\u9002\u5408\u4f60\u9879\u76ee\u7684\u524d\u8005\u3002 \u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8bb8\u591a\u7ef4\u62a4\u826f\u597d\u4e14\u4f7f\u7528\u5e7f\u6cdb\u7684\u5305\uff0c\u5982 passlib \u548c python-jose \uff0c\u56e0\u4e3a FastAPI \u4e0d\u9700\u8981\u4efb\u4f55\u590d\u6742\u7684\u673a\u5236\u6765\u96c6\u6210\u5916\u90e8\u5305\u3002 \u4f46\u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5de5\u5177\uff0c\u5728\u4e0d\u5f71\u54cd\u7075\u6d3b\u6027\u3001\u5065\u58ee\u6027\u548c\u5b89\u5168\u6027\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u53ef\u80fd\u5730\u7b80\u5316\u8fd9\u4e2a\u8fc7\u7a0b\u3002 \u800c\u4e14\u4f60\u53ef\u4ee5\u7528\u76f8\u5bf9\u7b80\u5355\u7684\u65b9\u5f0f\u4f7f\u7528\u548c\u5b9e\u73b0\u5b89\u5168\u3001\u6807\u51c6\u7684\u534f\u8bae\uff0c\u6bd4\u5982 OAuth2\u3002 \u4f60\u53ef\u4ee5\u5728 \u8fdb\u9636\u7528\u6237\u6307\u5357 \u4e2d\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u5982\u4f55\u4f7f\u7528 OAuth2 \u300c\u4f5c\u7528\u57df\u300d\u7684\u4fe1\u606f\uff0c\u4ee5\u5b9e\u73b0\u66f4\u7cbe\u7ec6\u7684\u6743\u9650\u7cfb\u7edf\uff0c\u5e76\u540c\u6837\u9075\u5faa\u8fd9\u4e9b\u6807\u51c6\u3002\u5e26\u6709\u4f5c\u7528\u57df\u7684 OAuth2 \u662f\u5f88\u591a\u5927\u7684\u8ba4\u8bc1\u63d0\u4f9b\u5546\u4f7f\u7528\u7684\u673a\u5236\uff0c\u6bd4\u5982 Facebook\u3001Google\u3001GitHub\u3001\u5fae\u8f6f\u3001Twitter \u7b49\uff0c\u6388\u6743\u7b2c\u4e09\u65b9\u5e94\u7528\u4ee3\u8868\u7528\u6237\u4e0e\u4ed6\u4eec\u7684 API \u8fdb\u884c\u4ea4\u4e92\u3002","title":"\u4f7f\u7528\uff08\u54c8\u5e0c\uff09\u5bc6\u7801\u548c JWT Bearer \u4ee4\u724c\u7684 OAuth2"},{"location":"tutorial/security/oauth2-jwt/#jwt-bearer-oauth2","text":"\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u6240\u6709\u7684\u5b89\u5168\u6d41\u7a0b\uff0c\u5c31\u8ba9\u6211\u4eec\u6765\u4f7f\u7528 JWT \u4ee4\u724c\u548c\u5b89\u5168\u54c8\u5e0c\u5bc6\u7801\u8ba9\u5e94\u7528\u7a0b\u5e8f\u771f\u6b63\u5730\u5b89\u5168\u5427\u3002 \u4f60\u53ef\u4ee5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u771f\u6b63\u5730\u4f7f\u7528\u8fd9\u4e9b\u4ee3\u7801\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u4fdd\u5b58\u5bc6\u7801\u54c8\u5e0c\u503c\uff0c\u7b49\u7b49\u3002 \u6211\u4eec\u5c06\u4ece\u4e0a\u4e00\u7ae0\u7ed3\u675f\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u7136\u540e\u5bf9\u793a\u4f8b\u8fdb\u884c\u6269\u5145\u3002","title":"\u4f7f\u7528\uff08\u54c8\u5e0c\uff09\u5bc6\u7801\u548c JWT Bearer \u4ee4\u724c\u7684 OAuth2"},{"location":"tutorial/security/oauth2-jwt/#jwt","text":"JWT \u8868\u793a \u300cJSON Web Tokens\u300d\u3002 \u5b83\u662f\u4e00\u4e2a\u5c06 JSON \u5bf9\u8c61\u7f16\u7801\u4e3a\u5bc6\u96c6\u4e14\u6ca1\u6709\u7a7a\u683c\u7684\u957f\u5b57\u7b26\u4e32\u7684\u6807\u51c6\u3002\u5b57\u7b26\u4e32\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c \u5b83\u6ca1\u6709\u88ab\u52a0\u5bc6\uff0c\u56e0\u6b64\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u4ece\u5b57\u7b26\u4e32\u5185\u5bb9\u4e2d\u8fd8\u539f\u6570\u636e\u3002 \u4f46\u5b83\u7ecf\u8fc7\u4e86\u7b7e\u540d\u3002\u56e0\u6b64\uff0c\u5f53\u4f60\u6536\u5230\u4e00\u4e2a\u7531\u4f60\u53d1\u51fa\u7684\u4ee4\u724c\u65f6\uff0c\u53ef\u4ee5\u6821\u9a8c\u4ee4\u724c\u662f\u5426\u771f\u7684\u7531\u4f60\u53d1\u51fa\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u6709\u6548\u671f\u4e3a 1 \u5468\u7684\u4ee4\u724c\u3002\u7136\u540e\u5f53\u7528\u6237\u7b2c\u4e8c\u5929\u4f7f\u7528\u4ee4\u724c\u91cd\u65b0\u8bbf\u95ee\u65f6\uff0c\u4f60\u77e5\u9053\u8be5\u7528\u6237\u4ecd\u7136\u5904\u4e8e\u767b\u5165\u72b6\u6001\u3002 \u4e00\u5468\u540e\u4ee4\u724c\u5c06\u4f1a\u8fc7\u671f\uff0c\u7528\u6237\u5c06\u4e0d\u4f1a\u901a\u8fc7\u8ba4\u8bc1\uff0c\u5fc5\u987b\u518d\u6b21\u767b\u5f55\u624d\u80fd\u83b7\u5f97\u4e00\u4e2a\u65b0\u4ee4\u724c\u3002\u800c\u4e14\u5982\u679c\u7528\u6237\uff08\u6216\u7b2c\u4e09\u65b9\uff09\u8bd5\u56fe\u4fee\u6539\u4ee4\u724c\u4ee5\u7be1\u6539\u8fc7\u671f\u65f6\u95f4\uff0c\u4f60\u5c06\u56e0\u4e3a\u7b7e\u540d\u4e0d\u5339\u914d\u800c\u80fd\u591f\u53d1\u89c9\u3002 \u5982\u679c\u4f60\u60f3\u4e0a\u624b\u4f53\u9a8c JWT \u4ee4\u724c\u5e76\u4e86\u89e3\u5176\u5de5\u4f5c\u65b9\u5f0f\uff0c\u53ef\u8bbf\u95ee https://jwt.io \u3002","title":"\u5173\u4e8e JWT"},{"location":"tutorial/security/oauth2-jwt/#python-jose","text":"\u6211\u4eec\u9700\u8981\u5b89\u88c5 python-jose \u4ee5\u5728 Python \u4e2d\u751f\u6210\u548c\u6821\u9a8c JWT \u4ee4\u724c\uff1a $ pip install python-jose [ cryptography ] ---> 100% Python-jose \u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u52a0\u5bc6\u540e\u7aef\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u7684\u662f\u63a8\u8350\u7684\u540e\u7aef\uff1a pyca/cryptography \u3002 Tip \u672c\u6559\u7a0b\u66fe\u7ecf\u4f7f\u7528\u8fc7 PyJWT \u3002 \u4f46\u662f\u540e\u6765\u66f4\u65b0\u4e3a\u4f7f\u7528 Python-jose\uff0c\u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86 PyJWT \u7684\u6240\u6709\u529f\u80fd\uff0c\u4ee5\u53ca\u4e4b\u540e\u4e0e\u5176\u4ed6\u5de5\u5177\u8fdb\u884c\u96c6\u6210\u65f6\u4f60\u53ef\u80fd\u9700\u8981\u7684\u4e00\u4e9b\u5176\u4ed6\u529f\u80fd\u3002","title":"\u5b89\u88c5 python-jose"},{"location":"tutorial/security/oauth2-jwt/#_1","text":"\u300c\u54c8\u5e0c\u300d\u7684\u610f\u601d\u662f\uff1a\u5c06\u67d0\u4e9b\u5185\u5bb9\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a\u5bc6\u7801\uff09\u8f6c\u6362\u4e3a\u770b\u8d77\u6765\u50cf\u4e71\u7801\u7684\u5b57\u8282\u5e8f\u5217\uff08\u53ea\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff09\u3002 \u6bcf\u6b21\u4f60\u4f20\u5165\u5b8c\u5168\u76f8\u540c\u7684\u5185\u5bb9\uff08\u5b8c\u5168\u76f8\u540c\u7684\u5bc6\u7801\uff09\u65f6\uff0c\u4f60\u90fd\u4f1a\u5f97\u5230\u5b8c\u5168\u76f8\u540c\u7684\u4e71\u7801\u3002 \u4f46\u662f\u4f60\u4e0d\u80fd\u4ece\u4e71\u7801\u8f6c\u6362\u56de\u5bc6\u7801\u3002","title":"\u54c8\u5e0c\u5bc6\u7801"},{"location":"tutorial/security/oauth2-jwt/#_2","text":"\u5982\u679c\u4f60\u7684\u6570\u636e\u5e93\u88ab\u76d7\uff0c\u5c0f\u5077\u5c06\u65e0\u6cd5\u83b7\u5f97\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\uff0c\u53ea\u80fd\u62ff\u5230\u54c8\u5e0c\u503c\u3002 \u56e0\u6b64\uff0c\u5c0f\u5077\u5c06\u65e0\u6cd5\u5c1d\u8bd5\u5728\u53e6\u4e00\u4e2a\u7cfb\u7edf\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u76f8\u540c\u7684\u5bc6\u7801\uff08\u7531\u4e8e\u8bb8\u591a\u7528\u6237\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u7801\uff0c\u56e0\u6b64\u8fd9\u5f88\u5371\u9669\uff09\u3002","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u54c8\u5e0c\u5bc6\u7801"},{"location":"tutorial/security/oauth2-jwt/#passlib","text":"PassLib \u662f\u4e00\u4e2a\u7528\u4e8e\u5904\u7406\u54c8\u5e0c\u5bc6\u7801\u7684\u5f88\u68d2\u7684 Python \u5305\u3002 \u5b83\u652f\u6301\u8bb8\u591a\u5b89\u5168\u54c8\u5e0c\u7b97\u6cd5\u4ee5\u53ca\u914d\u5408\u7b97\u6cd5\u4f7f\u7528\u7684\u5b9e\u7528\u7a0b\u5e8f\u3002 \u63a8\u8350\u7684\u7b97\u6cd5\u662f \u300cBcrypt\u300d\u3002 \u56e0\u6b64\uff0c\u5b89\u88c5\u9644\u5e26 Bcrypt \u7684 PassLib\uff1a $ pip install passlib [ bcrypt ] ---> 100% Tip \u4f7f\u7528 passlib \uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u5c06\u5176\u914d\u7f6e\u4e3a\u80fd\u591f\u8bfb\u53d6 Django\uff0cFlask \u7684\u5b89\u5168\u6269\u5c55\u6216\u8bb8\u591a\u5176\u4ed6\u5de5\u5177\u521b\u5efa\u7684\u5bc6\u7801\u3002 \u56e0\u6b64\uff0c\u4f60\u5c06\u80fd\u591f\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5c06\u6570\u636e\u5e93\u4e2d\u6765\u81ea Django \u5e94\u7528\u7684\u6570\u636e\u5171\u4eab\u7ed9\u4e00\u4e2a FastAPI \u5e94\u7528\u3002\u6216\u8005\u4f7f\u7528\u540c\u4e00\u6570\u636e\u5e93\u4f46\u9010\u6e10\u5c06\u5e94\u7528\u4ece Django \u8fc1\u79fb\u5230 FastAPI\u3002 \u800c\u4f60\u7684\u7528\u6237\u5c06\u80fd\u591f\u540c\u65f6\u4ece Django \u5e94\u7528\u6216 FastAPI \u5e94\u7528\u767b\u5f55\u3002","title":"\u5b89\u88c5 passlib"},{"location":"tutorial/security/oauth2-jwt/#_3","text":"\u4ece passlib \u5bfc\u5165\u6211\u4eec\u9700\u8981\u7684\u5de5\u5177\u3002 \u521b\u5efa\u4e00\u4e2a PassLib \u300c\u4e0a\u4e0b\u6587\u300d\u3002\u8fd9\u5c06\u7528\u4e8e\u54c8\u5e0c\u548c\u6821\u9a8c\u5bc6\u7801\u3002 Tip PassLib \u4e0a\u4e0b\u6587\u8fd8\u5177\u6709\u4f7f\u7528\u4e0d\u540c\u54c8\u5e0c\u7b97\u6cd5\u7684\u529f\u80fd\uff0c\u5305\u62ec\u4ec5\u5141\u8bb8\u7528\u4e8e\u6821\u9a8c\u7684\u5df2\u5f03\u7528\u7684\u65e7\u7b97\u6cd5\u7b49\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u8bfb\u53d6\u548c\u6821\u9a8c\u7531\u53e6\u4e00\u4e2a\u7cfb\u7edf\uff08\u4f8b\u5982Django\uff09\u751f\u6210\u7684\u5bc6\u7801\uff0c\u4f46\u662f\u4f7f\u7528\u5176\u4ed6\u7b97\u6cd5\u4f8b\u5982 Bcrypt \u751f\u6210\u65b0\u7684\u5bc6\u7801\u54c8\u5e0c\u503c\u3002 \u5e76\u540c\u65f6\u517c\u5bb9\u6240\u6709\u7684\u8fd9\u4e9b\u529f\u80fd\u3002 \u521b\u5efa\u4e00\u4e2a\u5de5\u5177\u51fd\u6570\u4ee5\u54c8\u5e0c\u6765\u81ea\u7528\u6237\u7684\u5bc6\u7801\u3002 \u7136\u540e\u521b\u5efa\u53e6\u4e00\u4e2a\u5de5\u5177\u51fd\u6570\uff0c\u7528\u4e8e\u6821\u9a8c\u63a5\u6536\u7684\u5bc6\u7801\u662f\u5426\u4e0e\u5b58\u50a8\u7684\u54c8\u5e0c\u503c\u5339\u914d\u3002 \u518d\u521b\u5efa\u53e6\u4e00\u4e2a\u5de5\u5177\u51fd\u6570\u7528\u4e8e\u8ba4\u8bc1\u5e76\u8fd4\u56de\u7528\u6237\u3002 from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] Note \u5982\u679c\u4f60\u67e5\u770b\u65b0\u7684\uff08\u4f2a\uff09\u6570\u636e\u5e93 fake_users_db \uff0c\u4f60\u5c06\u770b\u5230\u54c8\u5e0c\u540e\u7684\u5bc6\u7801\u73b0\u5728\u7684\u6837\u5b50\uff1a \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" \u3002","title":"\u54c8\u5e0c\u5e76\u6821\u9a8c\u5bc6\u7801"},{"location":"tutorial/security/oauth2-jwt/#jwt_1","text":"\u5bfc\u5165\u5df2\u5b89\u88c5\u7684\u6a21\u5757\u3002 \u521b\u5efa\u4e00\u4e2a\u968f\u673a\u5bc6\u94a5\uff0c\u8be5\u5bc6\u94a5\u5c06\u7528\u4e8e\u5bf9 JWT \u4ee4\u724c\u8fdb\u884c\u7b7e\u540d\u3002 \u8981\u751f\u6210\u4e00\u4e2a\u5b89\u5168\u7684\u968f\u673a\u5bc6\u94a5\uff0c\u53ef\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a $ openssl rand -hex 32 09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7 \u7136\u540e\u5c06\u8f93\u51fa\u590d\u5236\u5230\u53d8\u91cf \u300cSECRET_KEY\u300d \u4e2d\uff08\u4e0d\u8981\u4f7f\u7528\u793a\u4f8b\u4e2d\u7684\u8fd9\u4e2a\uff09\u3002 \u521b\u5efa\u7528\u4e8e\u8bbe\u5b9a JWT \u4ee4\u724c\u7b7e\u540d\u7b97\u6cd5\u7684\u53d8\u91cf \u300cALGORITHM\u300d\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a \"HS256\" \u3002 \u521b\u5efa\u4e00\u4e2a\u8bbe\u7f6e\u4ee4\u724c\u8fc7\u671f\u65f6\u95f4\u7684\u53d8\u91cf\u3002 \u5b9a\u4e49\u4e00\u4e2a\u5c06\u5728\u4ee4\u724c\u7aef\u70b9\u4e2d\u7528\u4e8e\u54cd\u5e94\u7684 Pydantic \u6a21\u578b\u3002 \u521b\u5efa\u4e00\u4e2a\u751f\u6210\u65b0\u7684\u8bbf\u95ee\u4ee4\u724c\u7684\u5de5\u5177\u51fd\u6570\u3002 from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }]","title":"\u5904\u7406 JWT \u4ee4\u724c"},{"location":"tutorial/security/oauth2-jwt/#_4","text":"\u66f4\u65b0 get_current_user \u4ee5\u63a5\u6536\u4e0e\u4e4b\u524d\u76f8\u540c\u7684\u4ee4\u724c\uff0c\u4f46\u8fd9\u6b21\u4f7f\u7528\u7684\u662f JWT \u4ee4\u724c\u3002 \u89e3\u7801\u63a5\u6536\u5230\u7684\u4ee4\u724c\uff0c\u5bf9\u5176\u8fdb\u884c\u6821\u9a8c\uff0c\u7136\u540e\u8fd4\u56de\u5f53\u524d\u7528\u6237\u3002 \u5982\u679c\u4ee4\u724c\u65e0\u6548\uff0c\u7acb\u5373\u8fd4\u56de\u4e00\u4e2a HTTP \u9519\u8bef\u3002 from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }]","title":"\u66f4\u65b0\u4f9d\u8d56\u9879"},{"location":"tutorial/security/oauth2-jwt/#token","text":"\u4f7f\u7528\u4ee4\u724c\u7684\u8fc7\u671f\u65f6\u95f4\u521b\u5efa\u4e00\u4e2a timedelta \u5bf9\u8c61\u3002 \u521b\u5efa\u4e00\u4e2a\u771f\u5b9e\u7684 JWT \u8bbf\u95ee\u4ee4\u724c\u5e76\u8fd4\u56de\u5b83\u3002 from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }]","title":"\u66f4\u65b0 /token \u8def\u5f84\u64cd\u4f5c"},{"location":"tutorial/security/oauth2-jwt/#jwt-sub","text":"JWT \u7684\u89c4\u8303\u4e2d\u63d0\u5230\u6709\u4e00\u4e2a sub \u952e\uff0c\u503c\u4e3a\u8be5\u4ee4\u724c\u7684\u4e3b\u9898\u3002 \u4f7f\u7528\u5b83\u5e76\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u4f46\u8fd9\u662f\u4f60\u653e\u7f6e\u7528\u6237\u6807\u8bc6\u7684\u5730\u65b9\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86\u5b83\u3002 \u9664\u4e86\u8bc6\u522b\u7528\u6237\u5e76\u5141\u8bb8\u4ed6\u4eec\u76f4\u63a5\u5728\u4f60\u7684 API \u4e0a\u6267\u884c\u64cd\u4f5c\u4e4b\u5916\uff0cJWT \u8fd8\u53ef\u4ee5\u7528\u4e8e\u5176\u4ed6\u4e8b\u60c5\u3002 \u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u8bc6\u522b\u4e00\u4e2a \u300c\u6c7d\u8f66\u300d \u6216 \u300c\u535a\u5ba2\u6587\u7ae0\u300d\u3002 \u7136\u540e\u4f60\u53ef\u4ee5\u6dfb\u52a0\u5173\u4e8e\u8be5\u5b9e\u4f53\u7684\u6743\u9650\uff0c\u6bd4\u5982\u300c\u9a7e\u9a76\u300d\uff08\u6c7d\u8f66\uff09\u6216\u300c\u7f16\u8f91\u300d\uff08\u535a\u5ba2\uff09\u3002 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5c06 JWT \u4ee4\u724c\u4ea4\u7ed9\u7528\u6237\uff08\u6216\u673a\u5668\u4eba\uff09\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\uff08\u9a7e\u9a76\u6c7d\u8f66\uff0c\u6216\u7f16\u8f91\u535a\u5ba2\u6587\u7ae0\uff09\uff0c\u751a\u81f3\u4e0d\u9700\u8981\u6709\u4e00\u4e2a\u8d26\u6237\uff0c\u53ea\u9700\u4f7f\u7528\u4f60\u7684 API \u4e3a\u5176\u751f\u6210\u7684 JWT \u4ee4\u724c\u3002 \u4f7f\u7528\u8fd9\u6837\u7684\u601d\u8def\uff0cJWT \u53ef\u4ee5\u7528\u4e8e\u66f4\u590d\u6742\u7684\u573a\u666f\u3002 \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u51e0\u4e2a\u5b9e\u4f53\u53ef\u80fd\u6709\u76f8\u540c\u7684 ID\uff0c\u6bd4\u5982\u8bf4 foo \uff08\u4e00\u4e2a\u7528\u6237 foo \uff0c\u4e00\u8f86\u8f66 foo \uff0c\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0 foo \uff09\u3002 \u56e0\u6b64\uff0c\u4e3a\u4e86\u907f\u514d ID \u51b2\u7a81\uff0c\u5f53\u4e3a\u7528\u6237\u521b\u5efa JWT \u4ee4\u724c\u65f6\uff0c\u4f60\u53ef\u4ee5\u5728 sub \u952e\u7684\u503c\u524d\u52a0\u4e0a\u524d\u7f00\uff0c\u4f8b\u5982 username: \u3002\u6240\u4ee5\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c sub \u7684\u503c\u53ef\u4ee5\u662f\uff1a username:johndoe \u3002 \u8981\u8bb0\u4f4f\u7684\u91cd\u70b9\u662f\uff0c sub \u952e\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5e94\u8be5\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u7b26\uff0c\u800c\u4e14\u5e94\u8be5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002","title":"\u5173\u4e8e JWT \u300c\u4e3b\u9898\u300d sub \u7684\u6280\u672f\u7ec6\u8282"},{"location":"tutorial/security/oauth2-jwt/#_5","text":"\u8fd0\u884c\u670d\u52a1\u5668\u5e76\u8bbf\u95ee\u6587\u6863\uff1a http://127.0.0.1:8000/docs \u3002 \u4f60\u4f1a\u770b\u5230\u5982\u4e0b\u7528\u6237\u754c\u9762\uff1a \u50cf\u4ee5\u524d\u4e00\u6837\u5bf9\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u8ba4\u8bc1\u3002 \u4f7f\u7528\u5982\u4e0b\u51ed\u8bc1\uff1a \u7528\u6237\u540d: johndoe \u5bc6\u7801: secret Check \u8bf7\u6ce8\u610f\uff0c\u4ee3\u7801\u4e2d\u6ca1\u6709\u4efb\u4f55\u5730\u65b9\u8bb0\u5f55\u4e86\u660e\u6587\u5bc6\u7801 \u300c secret \u300d\uff0c\u6211\u4eec\u53ea\u4fdd\u5b58\u4e86\u5176\u54c8\u5e0c\u503c\u3002 \u8bbf\u95ee /users/me/ \u7aef\u70b9\uff0c\u4f60\u5c06\u83b7\u5f97\u5982\u4e0b\u54cd\u5e94\uff1a { \"username\" : \"johndoe\" , \"email\" : \"johndoe@example.com\" , \"full_name\" : \"John Doe\" , \"disabled\" : false } \u5982\u679c\u4f60\u6253\u5f00\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u5c06\u770b\u5230\u6570\u636e\u662f\u5982\u4f55\u53d1\u9001\u7684\u5e76\u4e14\u5176\u4e2d\u4ec5\u5305\u542b\u4e86\u4ee4\u724c\uff0c\u53ea\u6709\u5728\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u4e2d\u53d1\u9001\u4e86\u5bc6\u7801\u4ee5\u6821\u9a8c\u7528\u6237\u8eab\u4efd\u5e76\u83b7\u53d6\u8be5\u8bbf\u95ee\u4ee4\u724c\uff0c\u4f46\u4e4b\u540e\u90fd\u4e0d\u4f1a\u518d\u53d1\u9001\u5bc6\u7801\uff1a Note \u6ce8\u610f\u8bf7\u6c42\u4e2d\u7684 Authorization \u9996\u90e8\uff0c\u5176\u503c\u4ee5 Bearer \u5f00\u5934\u3002","title":"\u68c0\u67e5\u6548\u679c"},{"location":"tutorial/security/oauth2-jwt/#scopes","text":"OAuth2 \u5177\u6709\u300c\u4f5c\u7528\u57df\u300d\u7684\u6982\u5ff5\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u5411 JWT \u4ee4\u724c\u6dfb\u52a0\u4e00\u7ec4\u7279\u5b9a\u7684\u6743\u9650\u3002 \u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u5c06\u6b64\u4ee4\u724c\u76f4\u63a5\u63d0\u4f9b\u7ed9\u7528\u6237\u6216\u7b2c\u4e09\u65b9\uff0c\u4f7f\u5176\u5728\u4e00\u4e9b\u9650\u5236\u4e0b\u4e0e\u4f60\u7684 API \u8fdb\u884c\u4ea4\u4e92\u3002 \u4f60\u53ef\u4ee5\u5728\u4e4b\u540e\u7684 \u8fdb\u9636\u7528\u6237\u6307\u5357 \u4e2d\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u4ee5\u53ca\u5982\u4f55\u5c06\u5b83\u4eec\u96c6\u6210\u5230 FastAPI \u4e2d\u3002","title":"\u4f7f\u7528 scopes \u7684\u8fdb\u9636\u7528\u6cd5"},{"location":"tutorial/security/oauth2-jwt/#_6","text":"\u901a\u8fc7\u76ee\u524d\u4f60\u6240\u770b\u5230\u7684\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u50cf OAuth2 \u548c JWT \u8fd9\u6837\u7684\u6807\u51c6\u6765\u6784\u5efa\u4e00\u4e2a\u5b89\u5168\u7684 FastAPI \u5e94\u7528\u7a0b\u5e8f\u3002 \u5728\u51e0\u4e4e\u6240\u6709\u7684\u6846\u67b6\u4e2d\uff0c\u5904\u7406\u5b89\u5168\u6027\u95ee\u9898\u90fd\u5f88\u5bb9\u6613\u6210\u4e3a\u4e00\u4e2a\u76f8\u5f53\u590d\u6742\u7684\u8bdd\u9898\u3002 \u8bb8\u591a\u9ad8\u5ea6\u7b80\u5316\u4e86\u5b89\u5168\u6d41\u7a0b\u7684\u8f6f\u4ef6\u5305\u4e0d\u5f97\u4e0d\u5728\u6570\u636e\u6a21\u578b\u3001\u6570\u636e\u5e93\u548c\u53ef\u7528\u529f\u80fd\u4e0a\u505a\u51fa\u5f88\u591a\u59a5\u534f\u3002\u800c\u8fd9\u4e9b\u8fc7\u4e8e\u7b80\u5316\u6d41\u7a0b\u7684\u8f6f\u4ef6\u5305\u4e2d\uff0c\u6709\u4e9b\u5176\u5b9e\u9690\u542b\u4e86\u5b89\u5168\u6f0f\u6d1e\u3002 FastAPI \u4e0d\u5bf9\u4efb\u4f55\u6570\u636e\u5e93\u3001\u6570\u636e\u6a21\u578b\u6216\u5de5\u5177\u505a\u4efb\u4f55\u59a5\u534f\u3002 \u5b83\u7ed9\u4e86\u4f60\u6240\u6709\u7684\u7075\u6d3b\u6027\u6765\u9009\u62e9\u6700\u9002\u5408\u4f60\u9879\u76ee\u7684\u524d\u8005\u3002 \u4f60\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8bb8\u591a\u7ef4\u62a4\u826f\u597d\u4e14\u4f7f\u7528\u5e7f\u6cdb\u7684\u5305\uff0c\u5982 passlib \u548c python-jose \uff0c\u56e0\u4e3a FastAPI \u4e0d\u9700\u8981\u4efb\u4f55\u590d\u6742\u7684\u673a\u5236\u6765\u96c6\u6210\u5916\u90e8\u5305\u3002 \u4f46\u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5de5\u5177\uff0c\u5728\u4e0d\u5f71\u54cd\u7075\u6d3b\u6027\u3001\u5065\u58ee\u6027\u548c\u5b89\u5168\u6027\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u53ef\u80fd\u5730\u7b80\u5316\u8fd9\u4e2a\u8fc7\u7a0b\u3002 \u800c\u4e14\u4f60\u53ef\u4ee5\u7528\u76f8\u5bf9\u7b80\u5355\u7684\u65b9\u5f0f\u4f7f\u7528\u548c\u5b9e\u73b0\u5b89\u5168\u3001\u6807\u51c6\u7684\u534f\u8bae\uff0c\u6bd4\u5982 OAuth2\u3002 \u4f60\u53ef\u4ee5\u5728 \u8fdb\u9636\u7528\u6237\u6307\u5357 \u4e2d\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u5982\u4f55\u4f7f\u7528 OAuth2 \u300c\u4f5c\u7528\u57df\u300d\u7684\u4fe1\u606f\uff0c\u4ee5\u5b9e\u73b0\u66f4\u7cbe\u7ec6\u7684\u6743\u9650\u7cfb\u7edf\uff0c\u5e76\u540c\u6837\u9075\u5faa\u8fd9\u4e9b\u6807\u51c6\u3002\u5e26\u6709\u4f5c\u7528\u57df\u7684 OAuth2 \u662f\u5f88\u591a\u5927\u7684\u8ba4\u8bc1\u63d0\u4f9b\u5546\u4f7f\u7528\u7684\u673a\u5236\uff0c\u6bd4\u5982 Facebook\u3001Google\u3001GitHub\u3001\u5fae\u8f6f\u3001Twitter \u7b49\uff0c\u6388\u6743\u7b2c\u4e09\u65b9\u5e94\u7528\u4ee3\u8868\u7528\u6237\u4e0e\u4ed6\u4eec\u7684 API \u8fdb\u884c\u4ea4\u4e92\u3002","title":"\u603b\u7ed3"},{"location":"tutorial/security/simple-oauth2/","text":"\u4f7f\u7528\u5bc6\u7801\u548c Bearer \u7684\u7b80\u5355 OAuth2 \u00b6 \u73b0\u5728\u8ba9\u6211\u4eec\u63a5\u7740\u4e0a\u4e00\u7ae0\u7ee7\u7eed\u5f00\u53d1\uff0c\u5e76\u6dfb\u52a0\u7f3a\u5c11\u7684\u90e8\u5206\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u5b8c\u6574\u7684\u5b89\u5168\u6027\u6d41\u7a0b\u3002 \u83b7\u53d6 username \u548c password \u00b6 \u6211\u4eec\u5c06\u4f7f\u7528 FastAPI \u7684\u5b89\u5168\u6027\u5b9e\u7528\u5de5\u5177\u6765\u83b7\u53d6 username \u548c password \u3002 OAuth2 \u89c4\u5b9a\u5728\u4f7f\u7528\uff08\u6211\u4eec\u6253\u7b97\u7528\u7684\uff09\u300cpassword \u6d41\u7a0b\u300d\u65f6\uff0c\u5ba2\u6237\u7aef/\u7528\u6237\u5fc5\u987b\u5c06 username \u548c password \u5b57\u6bb5\u4f5c\u4e3a\u8868\u5355\u6570\u636e\u53d1\u9001\u3002 \u800c\u4e14\u89c4\u8303\u660e\u786e\u4e86\u5b57\u6bb5\u5fc5\u987b\u8fd9\u6837\u547d\u540d\u3002\u56e0\u6b64 user-name \u6216 email \u662f\u884c\u4e0d\u901a\u7684\u3002 \u4e0d\u8fc7\u4e0d\u7528\u62c5\u5fc3\uff0c\u4f60\u53ef\u4ee5\u5728\u524d\u7aef\u6309\u7167\u4f60\u7684\u60f3\u6cd5\u5c06\u5b83\u5c55\u793a\u7ed9\u6700\u7ec8\u7528\u6237\u3002 \u800c\u4e14\u4f60\u7684\u6570\u636e\u5e93\u6a21\u578b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4f60\u60f3\u7528\u7684\u4efb\u4f55\u5176\u4ed6\u540d\u79f0\u3002 \u4f46\u662f\u5bf9\u4e8e\u767b\u5f55 \u8def\u5f84\u64cd\u4f5c \uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u8fd9\u4e9b\u540d\u79f0\u6765\u4e0e\u89c4\u8303\u517c\u5bb9\uff08\u4ee5\u5177\u5907\u4f8b\u5982\u4f7f\u7528\u96c6\u6210\u7684 API \u6587\u6863\u7cfb\u7edf\u7684\u80fd\u529b\uff09\u3002 \u89c4\u8303\u8fd8\u5199\u660e\u4e86 username \u548c password \u5fc5\u987b\u4f5c\u4e3a\u8868\u5355\u6570\u636e\u53d1\u9001\uff08\u56e0\u6b64\uff0c\u6b64\u5904\u4e0d\u80fd\u4f7f\u7528 JSON\uff09\u3002 scope \u00b6 \u89c4\u8303\u8fd8\u63d0\u5230\u5ba2\u6237\u7aef\u53ef\u4ee5\u53d1\u9001\u53e6\u4e00\u4e2a\u8868\u5355\u5b57\u6bb5\u300c scope \u300d\u3002 \u8fd9\u4e2a\u8868\u5355\u5b57\u6bb5\u7684\u540d\u79f0\u4e3a scope \uff08\u5355\u6570\u5f62\u5f0f\uff09\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u662f\u4e00\u4e2a\u7531\u7a7a\u683c\u5206\u9694\u7684\u300c\u4f5c\u7528\u57df\u300d\u7ec4\u6210\u7684\u957f\u5b57\u7b26\u4e32\u3002 \u6bcf\u4e2a\u300c\u4f5c\u7528\u57df\u300d\u53ea\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u4e2d\u95f4\u6ca1\u6709\u7a7a\u683c\uff09\u3002 \u5b83\u4eec\u901a\u5e38\u7528\u4e8e\u58f0\u660e\u7279\u5b9a\u7684\u5b89\u5168\u6743\u9650\uff0c\u4f8b\u5982\uff1a users:read \u6216\u8005 users:write \u662f\u5e38\u89c1\u7684\u4f8b\u5b50\u3002 Facebook / Instagram \u4f7f\u7528 instagram_basic \u3002 Google \u4f7f\u7528\u4e86 https://www.googleapis.com/auth/drive \u3002 Info \u5728 OAuth2 \u4e2d\u300c\u4f5c\u7528\u57df\u300d\u53ea\u662f\u4e00\u4e2a\u58f0\u660e\u6240\u9700\u7279\u5b9a\u6743\u9650\u7684\u5b57\u7b26\u4e32\u3002 \u5b83\u6709\u6ca1\u6709 : \u8fd9\u6837\u7684\u5176\u4ed6\u5b57\u7b26\u6216\u8005\u662f\u4e0d\u662f URL \u90fd\u6ca1\u6709\u5173\u7cfb\u3002 \u8fd9\u4e9b\u7ec6\u8282\u662f\u5177\u4f53\u7684\u5b9e\u73b0\u3002 \u5bf9 OAuth2 \u6765\u8bf4\u5b83\u4eec\u5c31\u53ea\u662f\u5b57\u7b26\u4e32\u800c\u5df2\u3002 \u83b7\u53d6 username \u548c password \u7684\u4ee3\u7801 \u00b6 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528 FastAPI \u63d0\u4f9b\u7684\u5b9e\u7528\u5de5\u5177\u6765\u5904\u7406\u6b64\u95ee\u9898\u3002 OAuth2PasswordRequestForm \u00b6 \u9996\u5148\uff0c\u5bfc\u5165 OAuth2PasswordRequestForm \uff0c\u7136\u540e\u5728 token \u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u901a\u8fc7 Depends \u5c06\u5176\u4f5c\u4e3a\u4f9d\u8d56\u9879\u4f7f\u7528\u3002 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user OAuth2PasswordRequestForm \u662f\u4e00\u4e2a\u7c7b\u4f9d\u8d56\u9879\uff0c\u58f0\u660e\u4e86\u5982\u4e0b\u7684\u8bf7\u6c42\u8868\u5355\uff1a username \u3002 password \u3002 \u4e00\u4e2a\u53ef\u9009\u7684 scope \u5b57\u6bb5\uff0c\u662f\u4e00\u4e2a\u7531\u7a7a\u683c\u5206\u9694\u7684\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u5927\u5b57\u7b26\u4e32\u3002 \u4e00\u4e2a\u53ef\u9009\u7684 grant_type . Tip OAuth2 \u89c4\u8303\u5b9e\u9645\u4e0a \u8981\u6c42 grant_type \u5b57\u6bb5\u4f7f\u7528\u4e00\u4e2a\u56fa\u5b9a\u7684\u503c password \uff0c\u4f46\u662f OAuth2PasswordRequestForm \u6ca1\u6709\u4f5c\u5f3a\u5236\u7ea6\u675f\u3002 \u5982\u679c\u4f60\u9700\u8981\u5f3a\u5236\u8981\u6c42\u8fd9\u4e00\u70b9\uff0c\u8bf7\u4f7f\u7528 OAuth2PasswordRequestFormStrict \u800c\u4e0d\u662f OAuth2PasswordRequestForm \u3002 \u4e00\u4e2a\u53ef\u9009\u7684 client_id \uff08\u6211\u4eec\u7684\u793a\u4f8b\u4e0d\u9700\u8981\u5b83\uff09\u3002 \u4e00\u4e2a\u53ef\u9009\u7684 client_secret \uff08\u6211\u4eec\u7684\u793a\u4f8b\u4e0d\u9700\u8981\u5b83\uff09\u3002 Info OAuth2PasswordRequestForm \u5e76\u4e0d\u50cf OAuth2PasswordBearer \u4e00\u6837\u662f FastAPI \u7684\u4e00\u4e2a\u7279\u6b8a\u7684\u7c7b\u3002 OAuth2PasswordBearer \u4f7f\u5f97 FastAPI \u660e\u767d\u5b83\u662f\u4e00\u4e2a\u5b89\u5168\u65b9\u6848\u3002\u6240\u4ee5\u5b83\u5f97\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u6dfb\u52a0\u5230 OpenAPI \u4e2d\u3002 \u4f46 OAuth2PasswordRequestForm \u53ea\u662f\u4e00\u4e2a\u4f60\u53ef\u4ee5\u81ea\u5df1\u7f16\u5199\u7684\u7c7b\u4f9d\u8d56\u9879\uff0c\u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u58f0\u660e Form \u53c2\u6570\u3002 \u4f46\u662f\u7531\u4e8e\u8fd9\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\uff0c\u56e0\u6b64 FastAPI \u51fa\u4e8e\u7b80\u4fbf\u76f4\u63a5\u63d0\u4f9b\u4e86\u5b83\u3002 \u4f7f\u7528\u8868\u5355\u6570\u636e \u00b6 Tip \u7c7b\u4f9d\u8d56\u9879 OAuth2PasswordRequestForm \u7684\u5b9e\u4f8b\u4e0d\u4f1a\u6709\u7528\u7a7a\u683c\u5206\u9694\u7684\u957f\u5b57\u7b26\u4e32\u5c5e\u6027 scope \uff0c\u800c\u662f\u5177\u6709\u4e00\u4e2a scopes \u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u5c06\u5305\u542b\u5b9e\u9645\u88ab\u53d1\u9001\u7684\u6bcf\u4e2a\u4f5c\u7528\u57df\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u5217\u8868\u3002 \u5728\u6b64\u793a\u4f8b\u4e2d\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 scopes \uff0c\u4f46\u5982\u679c\u4f60\u9700\u8981\u7684\u8bdd\u53ef\u4ee5\u4f7f\u7528\u8be5\u529f\u80fd\u3002 \u73b0\u5728\uff0c\u4f7f\u7528\u8868\u5355\u5b57\u6bb5\u4e2d\u7684 username \u4ece\uff08\u4f2a\uff09\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u7528\u6237\u6570\u636e\u3002 \u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u7528\u6237\uff0c\u6211\u4eec\u5c06\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u6d88\u606f\uff0c\u63d0\u793a\u300c\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef\u300d\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u9519\u8bef\uff0c\u6211\u4eec\u4f7f\u7528 HTTPException \u5f02\u5e38\uff1a from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user \u6821\u9a8c\u5bc6\u7801 \u00b6 \u76ee\u524d\u6211\u4eec\u5df2\u7ecf\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u4e86\u7528\u6237\u6570\u636e\uff0c\u4f46\u5c1a\u672a\u6821\u9a8c\u5bc6\u7801\u3002 \u8ba9\u6211\u4eec\u9996\u5148\u5c06\u8fd9\u4e9b\u6570\u636e\u653e\u5165 Pydantic UserInDB \u6a21\u578b\u4e2d\u3002 \u6c38\u8fdc\u4e0d\u8981\u4fdd\u5b58\u660e\u6587\u5bc6\u7801\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\uff08\u4f2a\uff09\u54c8\u5e0c\u5bc6\u7801\u7cfb\u7edf\u3002 \u5982\u679c\u5bc6\u7801\u4e0d\u5339\u914d\uff0c\u6211\u4eec\u5c06\u8fd4\u56de\u540c\u4e00\u4e2a\u9519\u8bef\u3002 \u54c8\u5e0c\u5bc6\u7801 \u00b6 \u300c\u54c8\u5e0c\u300d\u7684\u610f\u601d\u662f\uff1a\u5c06\u67d0\u4e9b\u5185\u5bb9\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a\u5bc6\u7801\uff09\u8f6c\u6362\u4e3a\u770b\u8d77\u6765\u50cf\u4e71\u7801\u7684\u5b57\u8282\u5e8f\u5217\uff08\u53ea\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff09\u3002 \u6bcf\u6b21\u4f60\u4f20\u5165\u5b8c\u5168\u76f8\u540c\u7684\u5185\u5bb9\uff08\u5b8c\u5168\u76f8\u540c\u7684\u5bc6\u7801\uff09\u65f6\uff0c\u4f60\u90fd\u4f1a\u5f97\u5230\u5b8c\u5168\u76f8\u540c\u7684\u4e71\u7801\u3002 \u4f46\u662f\u4f60\u4e0d\u80fd\u4ece\u4e71\u7801\u8f6c\u6362\u56de\u5bc6\u7801\u3002 \u4e3a\u4ec0\u4e48\u4f7f\u7528\u54c8\u5e0c\u5bc6\u7801 \u00b6 \u5982\u679c\u4f60\u7684\u6570\u636e\u5e93\u88ab\u76d7\uff0c\u5c0f\u5077\u5c06\u65e0\u6cd5\u83b7\u5f97\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\uff0c\u53ea\u6709\u54c8\u5e0c\u503c\u3002 \u56e0\u6b64\uff0c\u5c0f\u5077\u5c06\u65e0\u6cd5\u5c1d\u8bd5\u5728\u53e6\u4e00\u4e2a\u7cfb\u7edf\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u76f8\u540c\u7684\u5bc6\u7801\uff08\u7531\u4e8e\u8bb8\u591a\u7528\u6237\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u7801\uff0c\u56e0\u6b64\u8fd9\u5f88\u5371\u9669\uff09\u3002 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user \u5173\u4e8e **user_dict \u00b6 UserInDB(**user_dict) \u8868\u793a\uff1a \u76f4\u63a5\u5c06 user_dict \u7684\u952e\u548c\u503c\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\uff0c\u7b49\u540c\u4e8e\uff1a UserInDB ( username = user_dict [ \"username\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], disabled = user_dict [ \"disabled\" ], hashed_password = user_dict [ \"hashed_password\" ], ) Info \u6709\u5173 user_dict \u7684\u66f4\u5b8c\u6574\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605 \u989d\u5916\u7684\u6a21\u578b \u6587\u6863 \u3002 \u8fd4\u56de\u4ee4\u724c \u00b6 token \u7aef\u70b9\u7684\u54cd\u5e94\u5fc5\u987b\u662f\u4e00\u4e2a JSON \u5bf9\u8c61\u3002 \u5b83\u5e94\u8be5\u6709\u4e00\u4e2a token_type \u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f\u300cBearer\u300d\u4ee4\u724c\uff0c\u56e0\u6b64\u4ee4\u724c\u7c7b\u578b\u5e94\u4e3a\u300c bearer \u300d\u3002 \u5e76\u4e14\u8fd8\u5e94\u8be5\u6709\u4e00\u4e2a access_token \u5b57\u6bb5\uff0c\u5b83\u662f\u4e00\u4e2a\u5305\u542b\u6211\u4eec\u7684\u8bbf\u95ee\u4ee4\u724c\u7684\u5b57\u7b26\u4e32\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u6211\u4eec\u5c06\u6781\u5176\u4e0d\u5b89\u5168\u5730\u8fd4\u56de\u76f8\u540c\u7684 username \u4f5c\u4e3a\u4ee4\u724c\u3002 Tip \u5728\u4e0b\u4e00\u7ae0\u4e2d\uff0c\u4f60\u5c06\u770b\u5230\u4e00\u4e2a\u771f\u5b9e\u7684\u5b89\u5168\u5b9e\u73b0\uff0c\u4f7f\u7528\u4e86\u54c8\u5e0c\u5bc6\u7801\u548c JWT \u4ee4\u724c\u3002 \u4f46\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u4ec5\u5173\u6ce8\u6211\u4eec\u9700\u8981\u7684\u7279\u5b9a\u7ec6\u8282\u3002 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user Tip \u6839\u636e\u89c4\u8303\uff0c\u4f60\u5e94\u8be5\u50cf\u672c\u793a\u4f8b\u4e00\u6837\uff0c\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709 access_token \u548c token_type \u7684 JSON\u3002 \u8fd9\u662f\u4f60\u5fc5\u987b\u5728\u4ee3\u7801\u4e2d\u81ea\u884c\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u5e76\u4e14\u8981\u786e\u4fdd\u4f7f\u7528\u4e86\u8fd9\u4e9b JSON \u5b57\u6bb5\u3002 \u8fd9\u51e0\u4e4e\u662f\u552f\u4e00\u7684\u4f60\u9700\u8981\u81ea\u5df1\u8bb0\u4f4f\u5e76\u6b63\u786e\u5730\u6267\u884c\u4ee5\u7b26\u5408\u89c4\u8303\u7684\u4e8b\u60c5\u3002 \u5176\u4f59\u7684\uff0c FastAPI \u90fd\u4f1a\u4e3a\u4f60\u5904\u7406\u3002 \u66f4\u65b0\u4f9d\u8d56\u9879 \u00b6 \u73b0\u5728\u6211\u4eec\u5c06\u66f4\u65b0\u6211\u4eec\u7684\u4f9d\u8d56\u9879\u3002 \u6211\u4eec\u60f3\u8981\u4ec5\u5f53\u6b64\u7528\u6237\u5904\u4e8e\u542f\u7528\u72b6\u6001\u65f6\u624d\u80fd\u83b7\u53d6 current_user \u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u4f9d\u8d56\u9879 get_current_active_user \uff0c\u800c\u8be5\u4f9d\u8d56\u9879\u53c8\u4ee5 get_current_user \u4f5c\u4e3a\u4f9d\u8d56\u9879\u3002 \u5982\u679c\u7528\u6237\u4e0d\u5b58\u5728\u6216\u5904\u4e8e\u672a\u542f\u7528\u72b6\u6001\uff0c\u5219\u8fd9\u4e24\u4e2a\u4f9d\u8d56\u9879\u90fd\u5c06\u4ec5\u8fd4\u56de HTTP \u9519\u8bef\u3002 \u56e0\u6b64\uff0c\u5728\u6211\u4eec\u7684\u7aef\u70b9\u4e2d\uff0c\u53ea\u6709\u5f53\u7528\u6237\u5b58\u5728\uff0c\u8eab\u4efd\u8ba4\u8bc1\u901a\u8fc7\u4e14\u5904\u4e8e\u542f\u7528\u72b6\u6001\u65f6\uff0c\u6211\u4eec\u624d\u80fd\u83b7\u5f97\u8be5\u7528\u6237\uff1a from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user Info \u6211\u4eec\u5728\u6b64\u5904\u8fd4\u56de\u7684\u503c\u4e3a Bearer \u7684\u989d\u5916\u54cd\u5e94\u5934 WWW-Authenticate \u4e5f\u662f\u89c4\u8303\u7684\u4e00\u90e8\u5206\u3002 \u4efb\u4f55\u7684 401\u300c\u672a\u8ba4\u8bc1\u300dHTTP\uff08\u9519\u8bef\uff09\u72b6\u6001\u7801\u90fd\u5e94\u8be5\u8fd4\u56de WWW-Authenticate \u54cd\u5e94\u5934\u3002 \u5bf9\u4e8e bearer \u4ee4\u724c\uff08\u6211\u4eec\u7684\u4f8b\u5b50\uff09\uff0c\u8be5\u54cd\u5e94\u5934\u7684\u503c\u5e94\u4e3a Bearer \u3002 \u5b9e\u9645\u4e0a\u4f60\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e2a\u989d\u5916\u7684\u54cd\u5e94\u5934\uff0c\u4e0d\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\u3002 \u4f46\u6b64\u5904\u63d0\u4f9b\u4e86\u5b83\u4ee5\u7b26\u5408\u89c4\u8303\u3002 \u800c\u4e14\uff0c\uff08\u73b0\u5728\u6216\u5c06\u6765\uff09\u53ef\u80fd\u4f1a\u6709\u5de5\u5177\u671f\u671b\u5f97\u5230\u5e76\u4f7f\u7528\u5b83\uff0c\u7136\u540e\u5bf9\u4f60\u6216\u4f60\u7684\u7528\u6237\u6709\u7528\u5904\u3002 \u8fd9\u5c31\u662f\u9075\u5faa\u6807\u51c6\u7684\u597d\u5904... \u5b9e\u9645\u6548\u679c \u00b6 \u6253\u5f00\u4ea4\u4e92\u5f0f\u6587\u6863\uff1a http://127.0.0.1:8000/docs \u3002 \u8eab\u4efd\u8ba4\u8bc1 \u00b6 \u70b9\u51fb\u300cAuthorize\u300d\u6309\u94ae\u3002 \u4f7f\u7528\u4ee5\u4e0b\u51ed\u8bc1\uff1a \u7528\u6237\u540d\uff1a johndoe \u5bc6\u7801\uff1a secret \u5728\u7cfb\u7edf\u4e2d\u8fdb\u884c\u8eab\u4efd\u8ba4\u8bc1\u540e\uff0c\u4f60\u5c06\u770b\u5230\uff1a \u83b7\u53d6\u672c\u4eba\u7684\u7528\u6237\u6570\u636e \u00b6 \u73b0\u5728\u6267\u884c /users/me \u8def\u5f84\u7684 GET \u64cd\u4f5c\u3002 \u4f60\u5c06\u83b7\u5f97\u4f60\u7684\u7528\u6237\u6570\u636e\uff0c\u5982\uff1a { \"username\" : \"johndoe\" , \"email\" : \"johndoe@example.com\" , \"full_name\" : \"John Doe\" , \"disabled\" : false , \"hashed_password\" : \"fakehashedsecret\" } \u5982\u679c\u4f60\u70b9\u51fb\u9501\u5b9a\u56fe\u6807\u5e76\u6ce8\u9500\uff0c\u7136\u540e\u518d\u6b21\u5c1d\u8bd5\u540c\u4e00\u64cd\u4f5c\uff0c\u5219\u4f1a\u5f97\u5230 HTTP 401 \u9519\u8bef\uff1a { \"detail\" : \"Not authenticated\" } \u672a\u542f\u7528\u7684\u7528\u6237 \u00b6 \u73b0\u5728\u5c1d\u8bd5\u4f7f\u7528\u672a\u542f\u7528\u7684\u7528\u6237\uff0c\u5e76\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u8eab\u4efd\u8ba4\u8bc1\uff1a \u7528\u6237\u540d\uff1a alice \u5bc6\u7801\uff1a secret2 \u7136\u540e\u5c1d\u8bd5\u6267\u884c /users/me \u8def\u5f84\u7684 GET \u64cd\u4f5c\u3002 \u4f60\u5c06\u5f97\u5230\u4e00\u4e2a\u300c\u672a\u542f\u7528\u7684\u7528\u6237\u300d\u9519\u8bef\uff0c\u5982\uff1a { \"detail\" : \"Inactive user\" } \u603b\u7ed3 \u00b6 \u73b0\u5728\u4f60\u638c\u63e1\u4e86\u4e3a\u4f60\u7684 API \u5b9e\u73b0\u4e00\u4e2a\u57fa\u4e8e username \u548c password \u7684\u5b8c\u6574\u5b89\u5168\u7cfb\u7edf\u7684\u5de5\u5177\u3002 \u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\uff0c\u4f60\u53ef\u4ee5\u4f7f\u5b89\u5168\u7cfb\u7edf\u4e0e\u4efb\u4f55\u6570\u636e\u5e93\u4ee5\u53ca\u4efb\u4f55\u7528\u6237\u6216\u6570\u636e\u6a21\u578b\u517c\u5bb9\u3002 \u552f\u4e00\u7f3a\u5c11\u7684\u7ec6\u8282\u662f\u5b83\u5b9e\u9645\u4e0a\u8fd8\u5e76\u4e0d\u300c\u5b89\u5168\u300d\u3002 \u5728\u4e0b\u4e00\u7ae0\u4e2d\uff0c\u4f60\u5c06\u770b\u5230\u5982\u4f55\u4f7f\u7528\u4e00\u4e2a\u5b89\u5168\u7684\u54c8\u5e0c\u5bc6\u7801\u5e93\u548c JWT \u4ee4\u724c\u3002","title":"\u4f7f\u7528\u5bc6\u7801\u548c Bearer \u7684\u7b80\u5355 OAuth2"},{"location":"tutorial/security/simple-oauth2/#bearer-oauth2","text":"\u73b0\u5728\u8ba9\u6211\u4eec\u63a5\u7740\u4e0a\u4e00\u7ae0\u7ee7\u7eed\u5f00\u53d1\uff0c\u5e76\u6dfb\u52a0\u7f3a\u5c11\u7684\u90e8\u5206\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u5b8c\u6574\u7684\u5b89\u5168\u6027\u6d41\u7a0b\u3002","title":"\u4f7f\u7528\u5bc6\u7801\u548c Bearer \u7684\u7b80\u5355 OAuth2"},{"location":"tutorial/security/simple-oauth2/#username-password","text":"\u6211\u4eec\u5c06\u4f7f\u7528 FastAPI \u7684\u5b89\u5168\u6027\u5b9e\u7528\u5de5\u5177\u6765\u83b7\u53d6 username \u548c password \u3002 OAuth2 \u89c4\u5b9a\u5728\u4f7f\u7528\uff08\u6211\u4eec\u6253\u7b97\u7528\u7684\uff09\u300cpassword \u6d41\u7a0b\u300d\u65f6\uff0c\u5ba2\u6237\u7aef/\u7528\u6237\u5fc5\u987b\u5c06 username \u548c password \u5b57\u6bb5\u4f5c\u4e3a\u8868\u5355\u6570\u636e\u53d1\u9001\u3002 \u800c\u4e14\u89c4\u8303\u660e\u786e\u4e86\u5b57\u6bb5\u5fc5\u987b\u8fd9\u6837\u547d\u540d\u3002\u56e0\u6b64 user-name \u6216 email \u662f\u884c\u4e0d\u901a\u7684\u3002 \u4e0d\u8fc7\u4e0d\u7528\u62c5\u5fc3\uff0c\u4f60\u53ef\u4ee5\u5728\u524d\u7aef\u6309\u7167\u4f60\u7684\u60f3\u6cd5\u5c06\u5b83\u5c55\u793a\u7ed9\u6700\u7ec8\u7528\u6237\u3002 \u800c\u4e14\u4f60\u7684\u6570\u636e\u5e93\u6a21\u578b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4f60\u60f3\u7528\u7684\u4efb\u4f55\u5176\u4ed6\u540d\u79f0\u3002 \u4f46\u662f\u5bf9\u4e8e\u767b\u5f55 \u8def\u5f84\u64cd\u4f5c \uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u8fd9\u4e9b\u540d\u79f0\u6765\u4e0e\u89c4\u8303\u517c\u5bb9\uff08\u4ee5\u5177\u5907\u4f8b\u5982\u4f7f\u7528\u96c6\u6210\u7684 API \u6587\u6863\u7cfb\u7edf\u7684\u80fd\u529b\uff09\u3002 \u89c4\u8303\u8fd8\u5199\u660e\u4e86 username \u548c password \u5fc5\u987b\u4f5c\u4e3a\u8868\u5355\u6570\u636e\u53d1\u9001\uff08\u56e0\u6b64\uff0c\u6b64\u5904\u4e0d\u80fd\u4f7f\u7528 JSON\uff09\u3002","title":"\u83b7\u53d6 username \u548c password"},{"location":"tutorial/security/simple-oauth2/#scope","text":"\u89c4\u8303\u8fd8\u63d0\u5230\u5ba2\u6237\u7aef\u53ef\u4ee5\u53d1\u9001\u53e6\u4e00\u4e2a\u8868\u5355\u5b57\u6bb5\u300c scope \u300d\u3002 \u8fd9\u4e2a\u8868\u5355\u5b57\u6bb5\u7684\u540d\u79f0\u4e3a scope \uff08\u5355\u6570\u5f62\u5f0f\uff09\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u662f\u4e00\u4e2a\u7531\u7a7a\u683c\u5206\u9694\u7684\u300c\u4f5c\u7528\u57df\u300d\u7ec4\u6210\u7684\u957f\u5b57\u7b26\u4e32\u3002 \u6bcf\u4e2a\u300c\u4f5c\u7528\u57df\u300d\u53ea\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u4e2d\u95f4\u6ca1\u6709\u7a7a\u683c\uff09\u3002 \u5b83\u4eec\u901a\u5e38\u7528\u4e8e\u58f0\u660e\u7279\u5b9a\u7684\u5b89\u5168\u6743\u9650\uff0c\u4f8b\u5982\uff1a users:read \u6216\u8005 users:write \u662f\u5e38\u89c1\u7684\u4f8b\u5b50\u3002 Facebook / Instagram \u4f7f\u7528 instagram_basic \u3002 Google \u4f7f\u7528\u4e86 https://www.googleapis.com/auth/drive \u3002 Info \u5728 OAuth2 \u4e2d\u300c\u4f5c\u7528\u57df\u300d\u53ea\u662f\u4e00\u4e2a\u58f0\u660e\u6240\u9700\u7279\u5b9a\u6743\u9650\u7684\u5b57\u7b26\u4e32\u3002 \u5b83\u6709\u6ca1\u6709 : \u8fd9\u6837\u7684\u5176\u4ed6\u5b57\u7b26\u6216\u8005\u662f\u4e0d\u662f URL \u90fd\u6ca1\u6709\u5173\u7cfb\u3002 \u8fd9\u4e9b\u7ec6\u8282\u662f\u5177\u4f53\u7684\u5b9e\u73b0\u3002 \u5bf9 OAuth2 \u6765\u8bf4\u5b83\u4eec\u5c31\u53ea\u662f\u5b57\u7b26\u4e32\u800c\u5df2\u3002","title":"scope"},{"location":"tutorial/security/simple-oauth2/#username-password_1","text":"\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528 FastAPI \u63d0\u4f9b\u7684\u5b9e\u7528\u5de5\u5177\u6765\u5904\u7406\u6b64\u95ee\u9898\u3002","title":"\u83b7\u53d6 username \u548c password \u7684\u4ee3\u7801"},{"location":"tutorial/security/simple-oauth2/#oauth2passwordrequestform","text":"\u9996\u5148\uff0c\u5bfc\u5165 OAuth2PasswordRequestForm \uff0c\u7136\u540e\u5728 token \u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u901a\u8fc7 Depends \u5c06\u5176\u4f5c\u4e3a\u4f9d\u8d56\u9879\u4f7f\u7528\u3002 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user OAuth2PasswordRequestForm \u662f\u4e00\u4e2a\u7c7b\u4f9d\u8d56\u9879\uff0c\u58f0\u660e\u4e86\u5982\u4e0b\u7684\u8bf7\u6c42\u8868\u5355\uff1a username \u3002 password \u3002 \u4e00\u4e2a\u53ef\u9009\u7684 scope \u5b57\u6bb5\uff0c\u662f\u4e00\u4e2a\u7531\u7a7a\u683c\u5206\u9694\u7684\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u5927\u5b57\u7b26\u4e32\u3002 \u4e00\u4e2a\u53ef\u9009\u7684 grant_type . Tip OAuth2 \u89c4\u8303\u5b9e\u9645\u4e0a \u8981\u6c42 grant_type \u5b57\u6bb5\u4f7f\u7528\u4e00\u4e2a\u56fa\u5b9a\u7684\u503c password \uff0c\u4f46\u662f OAuth2PasswordRequestForm \u6ca1\u6709\u4f5c\u5f3a\u5236\u7ea6\u675f\u3002 \u5982\u679c\u4f60\u9700\u8981\u5f3a\u5236\u8981\u6c42\u8fd9\u4e00\u70b9\uff0c\u8bf7\u4f7f\u7528 OAuth2PasswordRequestFormStrict \u800c\u4e0d\u662f OAuth2PasswordRequestForm \u3002 \u4e00\u4e2a\u53ef\u9009\u7684 client_id \uff08\u6211\u4eec\u7684\u793a\u4f8b\u4e0d\u9700\u8981\u5b83\uff09\u3002 \u4e00\u4e2a\u53ef\u9009\u7684 client_secret \uff08\u6211\u4eec\u7684\u793a\u4f8b\u4e0d\u9700\u8981\u5b83\uff09\u3002 Info OAuth2PasswordRequestForm \u5e76\u4e0d\u50cf OAuth2PasswordBearer \u4e00\u6837\u662f FastAPI \u7684\u4e00\u4e2a\u7279\u6b8a\u7684\u7c7b\u3002 OAuth2PasswordBearer \u4f7f\u5f97 FastAPI \u660e\u767d\u5b83\u662f\u4e00\u4e2a\u5b89\u5168\u65b9\u6848\u3002\u6240\u4ee5\u5b83\u5f97\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u6dfb\u52a0\u5230 OpenAPI \u4e2d\u3002 \u4f46 OAuth2PasswordRequestForm \u53ea\u662f\u4e00\u4e2a\u4f60\u53ef\u4ee5\u81ea\u5df1\u7f16\u5199\u7684\u7c7b\u4f9d\u8d56\u9879\uff0c\u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u58f0\u660e Form \u53c2\u6570\u3002 \u4f46\u662f\u7531\u4e8e\u8fd9\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\uff0c\u56e0\u6b64 FastAPI \u51fa\u4e8e\u7b80\u4fbf\u76f4\u63a5\u63d0\u4f9b\u4e86\u5b83\u3002","title":"OAuth2PasswordRequestForm"},{"location":"tutorial/security/simple-oauth2/#_1","text":"Tip \u7c7b\u4f9d\u8d56\u9879 OAuth2PasswordRequestForm \u7684\u5b9e\u4f8b\u4e0d\u4f1a\u6709\u7528\u7a7a\u683c\u5206\u9694\u7684\u957f\u5b57\u7b26\u4e32\u5c5e\u6027 scope \uff0c\u800c\u662f\u5177\u6709\u4e00\u4e2a scopes \u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u5c06\u5305\u542b\u5b9e\u9645\u88ab\u53d1\u9001\u7684\u6bcf\u4e2a\u4f5c\u7528\u57df\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u5217\u8868\u3002 \u5728\u6b64\u793a\u4f8b\u4e2d\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 scopes \uff0c\u4f46\u5982\u679c\u4f60\u9700\u8981\u7684\u8bdd\u53ef\u4ee5\u4f7f\u7528\u8be5\u529f\u80fd\u3002 \u73b0\u5728\uff0c\u4f7f\u7528\u8868\u5355\u5b57\u6bb5\u4e2d\u7684 username \u4ece\uff08\u4f2a\uff09\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u7528\u6237\u6570\u636e\u3002 \u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u7528\u6237\uff0c\u6211\u4eec\u5c06\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u6d88\u606f\uff0c\u63d0\u793a\u300c\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef\u300d\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u9519\u8bef\uff0c\u6211\u4eec\u4f7f\u7528 HTTPException \u5f02\u5e38\uff1a from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user","title":"\u4f7f\u7528\u8868\u5355\u6570\u636e"},{"location":"tutorial/security/simple-oauth2/#_2","text":"\u76ee\u524d\u6211\u4eec\u5df2\u7ecf\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u4e86\u7528\u6237\u6570\u636e\uff0c\u4f46\u5c1a\u672a\u6821\u9a8c\u5bc6\u7801\u3002 \u8ba9\u6211\u4eec\u9996\u5148\u5c06\u8fd9\u4e9b\u6570\u636e\u653e\u5165 Pydantic UserInDB \u6a21\u578b\u4e2d\u3002 \u6c38\u8fdc\u4e0d\u8981\u4fdd\u5b58\u660e\u6587\u5bc6\u7801\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\uff08\u4f2a\uff09\u54c8\u5e0c\u5bc6\u7801\u7cfb\u7edf\u3002 \u5982\u679c\u5bc6\u7801\u4e0d\u5339\u914d\uff0c\u6211\u4eec\u5c06\u8fd4\u56de\u540c\u4e00\u4e2a\u9519\u8bef\u3002","title":"\u6821\u9a8c\u5bc6\u7801"},{"location":"tutorial/security/simple-oauth2/#_3","text":"\u300c\u54c8\u5e0c\u300d\u7684\u610f\u601d\u662f\uff1a\u5c06\u67d0\u4e9b\u5185\u5bb9\uff08\u5728\u672c\u4f8b\u4e2d\u4e3a\u5bc6\u7801\uff09\u8f6c\u6362\u4e3a\u770b\u8d77\u6765\u50cf\u4e71\u7801\u7684\u5b57\u8282\u5e8f\u5217\uff08\u53ea\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff09\u3002 \u6bcf\u6b21\u4f60\u4f20\u5165\u5b8c\u5168\u76f8\u540c\u7684\u5185\u5bb9\uff08\u5b8c\u5168\u76f8\u540c\u7684\u5bc6\u7801\uff09\u65f6\uff0c\u4f60\u90fd\u4f1a\u5f97\u5230\u5b8c\u5168\u76f8\u540c\u7684\u4e71\u7801\u3002 \u4f46\u662f\u4f60\u4e0d\u80fd\u4ece\u4e71\u7801\u8f6c\u6362\u56de\u5bc6\u7801\u3002","title":"\u54c8\u5e0c\u5bc6\u7801"},{"location":"tutorial/security/simple-oauth2/#_4","text":"\u5982\u679c\u4f60\u7684\u6570\u636e\u5e93\u88ab\u76d7\uff0c\u5c0f\u5077\u5c06\u65e0\u6cd5\u83b7\u5f97\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\uff0c\u53ea\u6709\u54c8\u5e0c\u503c\u3002 \u56e0\u6b64\uff0c\u5c0f\u5077\u5c06\u65e0\u6cd5\u5c1d\u8bd5\u5728\u53e6\u4e00\u4e2a\u7cfb\u7edf\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u76f8\u540c\u7684\u5bc6\u7801\uff08\u7531\u4e8e\u8bb8\u591a\u7528\u6237\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u7801\uff0c\u56e0\u6b64\u8fd9\u5f88\u5371\u9669\uff09\u3002 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u54c8\u5e0c\u5bc6\u7801"},{"location":"tutorial/security/simple-oauth2/#user_dict","text":"UserInDB(**user_dict) \u8868\u793a\uff1a \u76f4\u63a5\u5c06 user_dict \u7684\u952e\u548c\u503c\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\uff0c\u7b49\u540c\u4e8e\uff1a UserInDB ( username = user_dict [ \"username\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], disabled = user_dict [ \"disabled\" ], hashed_password = user_dict [ \"hashed_password\" ], ) Info \u6709\u5173 user_dict \u7684\u66f4\u5b8c\u6574\u8bf4\u660e\uff0c\u8bf7\u53c2\u9605 \u989d\u5916\u7684\u6a21\u578b \u6587\u6863 \u3002","title":"\u5173\u4e8e **user_dict"},{"location":"tutorial/security/simple-oauth2/#_5","text":"token \u7aef\u70b9\u7684\u54cd\u5e94\u5fc5\u987b\u662f\u4e00\u4e2a JSON \u5bf9\u8c61\u3002 \u5b83\u5e94\u8be5\u6709\u4e00\u4e2a token_type \u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f\u300cBearer\u300d\u4ee4\u724c\uff0c\u56e0\u6b64\u4ee4\u724c\u7c7b\u578b\u5e94\u4e3a\u300c bearer \u300d\u3002 \u5e76\u4e14\u8fd8\u5e94\u8be5\u6709\u4e00\u4e2a access_token \u5b57\u6bb5\uff0c\u5b83\u662f\u4e00\u4e2a\u5305\u542b\u6211\u4eec\u7684\u8bbf\u95ee\u4ee4\u724c\u7684\u5b57\u7b26\u4e32\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u6211\u4eec\u5c06\u6781\u5176\u4e0d\u5b89\u5168\u5730\u8fd4\u56de\u76f8\u540c\u7684 username \u4f5c\u4e3a\u4ee4\u724c\u3002 Tip \u5728\u4e0b\u4e00\u7ae0\u4e2d\uff0c\u4f60\u5c06\u770b\u5230\u4e00\u4e2a\u771f\u5b9e\u7684\u5b89\u5168\u5b9e\u73b0\uff0c\u4f7f\u7528\u4e86\u54c8\u5e0c\u5bc6\u7801\u548c JWT \u4ee4\u724c\u3002 \u4f46\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u4ec5\u5173\u6ce8\u6211\u4eec\u9700\u8981\u7684\u7279\u5b9a\u7ec6\u8282\u3002 from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user Tip \u6839\u636e\u89c4\u8303\uff0c\u4f60\u5e94\u8be5\u50cf\u672c\u793a\u4f8b\u4e00\u6837\uff0c\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709 access_token \u548c token_type \u7684 JSON\u3002 \u8fd9\u662f\u4f60\u5fc5\u987b\u5728\u4ee3\u7801\u4e2d\u81ea\u884c\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u5e76\u4e14\u8981\u786e\u4fdd\u4f7f\u7528\u4e86\u8fd9\u4e9b JSON \u5b57\u6bb5\u3002 \u8fd9\u51e0\u4e4e\u662f\u552f\u4e00\u7684\u4f60\u9700\u8981\u81ea\u5df1\u8bb0\u4f4f\u5e76\u6b63\u786e\u5730\u6267\u884c\u4ee5\u7b26\u5408\u89c4\u8303\u7684\u4e8b\u60c5\u3002 \u5176\u4f59\u7684\uff0c FastAPI \u90fd\u4f1a\u4e3a\u4f60\u5904\u7406\u3002","title":"\u8fd4\u56de\u4ee4\u724c"},{"location":"tutorial/security/simple-oauth2/#_6","text":"\u73b0\u5728\u6211\u4eec\u5c06\u66f4\u65b0\u6211\u4eec\u7684\u4f9d\u8d56\u9879\u3002 \u6211\u4eec\u60f3\u8981\u4ec5\u5f53\u6b64\u7528\u6237\u5904\u4e8e\u542f\u7528\u72b6\u6001\u65f6\u624d\u80fd\u83b7\u53d6 current_user \u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u4f9d\u8d56\u9879 get_current_active_user \uff0c\u800c\u8be5\u4f9d\u8d56\u9879\u53c8\u4ee5 get_current_user \u4f5c\u4e3a\u4f9d\u8d56\u9879\u3002 \u5982\u679c\u7528\u6237\u4e0d\u5b58\u5728\u6216\u5904\u4e8e\u672a\u542f\u7528\u72b6\u6001\uff0c\u5219\u8fd9\u4e24\u4e2a\u4f9d\u8d56\u9879\u90fd\u5c06\u4ec5\u8fd4\u56de HTTP \u9519\u8bef\u3002 \u56e0\u6b64\uff0c\u5728\u6211\u4eec\u7684\u7aef\u70b9\u4e2d\uff0c\u53ea\u6709\u5f53\u7528\u6237\u5b58\u5728\uff0c\u8eab\u4efd\u8ba4\u8bc1\u901a\u8fc7\u4e14\u5904\u4e8e\u542f\u7528\u72b6\u6001\u65f6\uff0c\u6211\u4eec\u624d\u80fd\u83b7\u5f97\u8be5\u7528\u6237\uff1a from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user Info \u6211\u4eec\u5728\u6b64\u5904\u8fd4\u56de\u7684\u503c\u4e3a Bearer \u7684\u989d\u5916\u54cd\u5e94\u5934 WWW-Authenticate \u4e5f\u662f\u89c4\u8303\u7684\u4e00\u90e8\u5206\u3002 \u4efb\u4f55\u7684 401\u300c\u672a\u8ba4\u8bc1\u300dHTTP\uff08\u9519\u8bef\uff09\u72b6\u6001\u7801\u90fd\u5e94\u8be5\u8fd4\u56de WWW-Authenticate \u54cd\u5e94\u5934\u3002 \u5bf9\u4e8e bearer \u4ee4\u724c\uff08\u6211\u4eec\u7684\u4f8b\u5b50\uff09\uff0c\u8be5\u54cd\u5e94\u5934\u7684\u503c\u5e94\u4e3a Bearer \u3002 \u5b9e\u9645\u4e0a\u4f60\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e2a\u989d\u5916\u7684\u54cd\u5e94\u5934\uff0c\u4e0d\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\u3002 \u4f46\u6b64\u5904\u63d0\u4f9b\u4e86\u5b83\u4ee5\u7b26\u5408\u89c4\u8303\u3002 \u800c\u4e14\uff0c\uff08\u73b0\u5728\u6216\u5c06\u6765\uff09\u53ef\u80fd\u4f1a\u6709\u5de5\u5177\u671f\u671b\u5f97\u5230\u5e76\u4f7f\u7528\u5b83\uff0c\u7136\u540e\u5bf9\u4f60\u6216\u4f60\u7684\u7528\u6237\u6709\u7528\u5904\u3002 \u8fd9\u5c31\u662f\u9075\u5faa\u6807\u51c6\u7684\u597d\u5904...","title":"\u66f4\u65b0\u4f9d\u8d56\u9879"},{"location":"tutorial/security/simple-oauth2/#_7","text":"\u6253\u5f00\u4ea4\u4e92\u5f0f\u6587\u6863\uff1a http://127.0.0.1:8000/docs \u3002","title":"\u5b9e\u9645\u6548\u679c"},{"location":"tutorial/security/simple-oauth2/#_8","text":"\u70b9\u51fb\u300cAuthorize\u300d\u6309\u94ae\u3002 \u4f7f\u7528\u4ee5\u4e0b\u51ed\u8bc1\uff1a \u7528\u6237\u540d\uff1a johndoe \u5bc6\u7801\uff1a secret \u5728\u7cfb\u7edf\u4e2d\u8fdb\u884c\u8eab\u4efd\u8ba4\u8bc1\u540e\uff0c\u4f60\u5c06\u770b\u5230\uff1a","title":"\u8eab\u4efd\u8ba4\u8bc1"},{"location":"tutorial/security/simple-oauth2/#_9","text":"\u73b0\u5728\u6267\u884c /users/me \u8def\u5f84\u7684 GET \u64cd\u4f5c\u3002 \u4f60\u5c06\u83b7\u5f97\u4f60\u7684\u7528\u6237\u6570\u636e\uff0c\u5982\uff1a { \"username\" : \"johndoe\" , \"email\" : \"johndoe@example.com\" , \"full_name\" : \"John Doe\" , \"disabled\" : false , \"hashed_password\" : \"fakehashedsecret\" } \u5982\u679c\u4f60\u70b9\u51fb\u9501\u5b9a\u56fe\u6807\u5e76\u6ce8\u9500\uff0c\u7136\u540e\u518d\u6b21\u5c1d\u8bd5\u540c\u4e00\u64cd\u4f5c\uff0c\u5219\u4f1a\u5f97\u5230 HTTP 401 \u9519\u8bef\uff1a { \"detail\" : \"Not authenticated\" }","title":"\u83b7\u53d6\u672c\u4eba\u7684\u7528\u6237\u6570\u636e"},{"location":"tutorial/security/simple-oauth2/#_10","text":"\u73b0\u5728\u5c1d\u8bd5\u4f7f\u7528\u672a\u542f\u7528\u7684\u7528\u6237\uff0c\u5e76\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8fdb\u884c\u8eab\u4efd\u8ba4\u8bc1\uff1a \u7528\u6237\u540d\uff1a alice \u5bc6\u7801\uff1a secret2 \u7136\u540e\u5c1d\u8bd5\u6267\u884c /users/me \u8def\u5f84\u7684 GET \u64cd\u4f5c\u3002 \u4f60\u5c06\u5f97\u5230\u4e00\u4e2a\u300c\u672a\u542f\u7528\u7684\u7528\u6237\u300d\u9519\u8bef\uff0c\u5982\uff1a { \"detail\" : \"Inactive user\" }","title":"\u672a\u542f\u7528\u7684\u7528\u6237"},{"location":"tutorial/security/simple-oauth2/#_11","text":"\u73b0\u5728\u4f60\u638c\u63e1\u4e86\u4e3a\u4f60\u7684 API \u5b9e\u73b0\u4e00\u4e2a\u57fa\u4e8e username \u548c password \u7684\u5b8c\u6574\u5b89\u5168\u7cfb\u7edf\u7684\u5de5\u5177\u3002 \u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\uff0c\u4f60\u53ef\u4ee5\u4f7f\u5b89\u5168\u7cfb\u7edf\u4e0e\u4efb\u4f55\u6570\u636e\u5e93\u4ee5\u53ca\u4efb\u4f55\u7528\u6237\u6216\u6570\u636e\u6a21\u578b\u517c\u5bb9\u3002 \u552f\u4e00\u7f3a\u5c11\u7684\u7ec6\u8282\u662f\u5b83\u5b9e\u9645\u4e0a\u8fd8\u5e76\u4e0d\u300c\u5b89\u5168\u300d\u3002 \u5728\u4e0b\u4e00\u7ae0\u4e2d\uff0c\u4f60\u5c06\u770b\u5230\u5982\u4f55\u4f7f\u7528\u4e00\u4e2a\u5b89\u5168\u7684\u54c8\u5e0c\u5bc6\u7801\u5e93\u548c JWT \u4ee4\u724c\u3002","title":"\u603b\u7ed3"}]}